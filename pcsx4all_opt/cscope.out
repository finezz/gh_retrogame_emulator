cscope 15 $HOME/Downloads/pcsx4all               0002381418
	@src/cdriso.cpp

24 
	~"psxcomm⁄.h
"

25 
	~"∂ugös.h
"

26 
	~"cdrom.h
"

27 
	~"cdriso.h
"

28 
	~"µf.h
"

30 #ifde‡
_WIN32


31 
	#WIN32_LEAN_AND_MEAN


	)

32 
	~<¥o˚ss.h
>

33 
	~<wödows.h
>

35 
	#°rˇ£cmp
 
_°ricmp


	)

36 
	#f£eko
 
f£ek


	)

37 
	#·ñlo
 
·ñl


	)

39 
	~<±hªad.h
>

42 
	~<sys/time.h
>

43 
	~<uni°d.h
>

44 
	~<î∫o.h
>

45 
	~<zlib.h
>

47 
	#OFF_T_MSB
 ((
off_t
)1 << ((off_tË* 8 - 1))

	)

49 
FILE
 *
	gcdH™dÀ
 = 
NULL
;

50 
FILE
 *
	gcddaH™dÀ
 = 
NULL
;

51 
FILE
 *
	gsubH™dÀ
 = 
NULL
;

53 
boﬁón
 
	gsubCh™Mixed
 = 
FALSE
;

54 
boﬁón
 
	gsubCh™Raw
 = 
FALSE
;

55 
boﬁón
 
	gsubCh™Missög
 = 
FALSE
;

57 
boﬁón
 
	gmu…ifûe
 = 
FALSE
;

59 
	gcdbuf„r
[
CD_FRAMESIZE_RAW
];

60 
	gsubbuf„r
[
SUB_FRAMESIZE
];

62 
	g¢dbuf„r
[
CD_FRAMESIZE_RAW
 * 10];

64 *(*
	gCDR_gëBuf„r
)();

66 
	#CDDA_FRAMETIME
 (1000 * ((
¢dbuf„r
Ë/ 
CD_FRAMESIZE_RAW
Ë/ 75)

	)

68 #ifde‡
_WIN32


69 
HANDLE
 
	gthªadid
;

71 
±hªad_t
 
	gthªadid
;

73 
	göôül_off£t
 = 0;

74 
boﬁón
 
	g∂ayög
 = 
FALSE
;

75 
boﬁón
 
	gcddaBigEndün
 = 
FALSE
;

78 
	gcdda_cur_£˘‹
;

79 
	gcdda_fú°_£˘‹
;

80 
	gcdda_fûe_off£t
;

85 
	g¥eg≠Off£t
;

87 
	#cddaCurPos
 
cdda_cur_£˘‹


	)

91 
	mbuff_øw
[16][
CD_FRAMESIZE_RAW
];

92 
	mbuff_com¥es£d
[
CD_FRAMESIZE_RAW
 * 16 + 100];

93 
off_t
 *
	mödex_èbÀ
;

94 
	mödex_Àn
;

95 
	mblock_shi·
;

96 
	mcuºít_block
;

97 
	m£˘‹_ö_blk
;

98 } 
	tCOMPR_IMG
;

100 
COMPR_IMG
 *
	gcom¥_img
;

102 (*
cdimg_ªad_func
)(
FILE
 *
f
, 
ba£
, *
de°
, 
£˘‹
);

104 * 
	`CDR__gëDriveLëãr
();

105 
	`CDR__c⁄figuª
();

106 
	`CDR__ã°
();

107 
	`CDR__about
();

108 
	`CDR__£tfûíame
(*
fûíame
);

109 
	`CDR__gëSètus
(
CdrSèt
 *
°©
);

111 
	`DecodeRawSubD©a
();

114 
DATA
 = 1,

115 
CDDA


116 } 
	tcd_ty≥
;

118 
	såacköfo
 {

119 
cd_ty≥
 
ty≥
;

120 
°¨t
[3];

121 
Àngth
[3];

122 
FILE
 *
h™dÀ
;

123 
°¨t_off£t
;

126 
	#MAXTRACKS
 100

	)

128 
numåacks
 = 0;

129 
åacköfo
 
ti
[
MAXTRACKS
];

131 
IsoFûe
[
MAXPATHLEN
] = "";

132 
s64
 
cdO≥nCa£Time
 = 0;

137 
cdrIsoMu…idiskCou¡
 = 0;

138 
cdrIsoMu…idiskSñe˘
 = 0;

144 (
CALLBACK
 *
cdrIsoMu…idiskCÆlback
)(Ë
NULL
;

150 
	$RñﬂdCdromPlugö
()

152 i‡(
	`cdrIsoA˘ive
())

153 
	`CDR_shutdown
();

155  
	`CDR_öô
();

156 
	}
}

158 
	$SëIsoFûe
(c⁄° *
fûíame
) {

160 
cdrIsoMu…idiskCou¡
 = 0;

161 
cdrIsoMu…idiskSñe˘
 = 0;

163 i‡(
fûíame
 =
NULL
) {

164 
IsoFûe
[0] = '\0';

167 
	`°r˝y
(
IsoFûe
, 
fûíame
);

168 
	}
}

170 c⁄° *
	$GëIsoFûe
() {

171  
IsoFûe
;

172 
	}
}

174 
boﬁón
 
	$UsögIso
() {

175  (
IsoFûe
[0] != '\0');

176 
	}
}

178 
	$SëCdO≥nCa£Time
(
s64
 
time
) {

179 
cdO≥nCa£Time
 = 
time
;

180 
	}
}

182 
s64
 
	$GëCdO≥nCa£Time
()

184  
cdO≥nCa£Time
;

185 
	}
}

188 
	$msf2£c
(*
msf
) {

189  ((
msf
[0] * 60 + msf[1]) * 75) + msf[2];

190 
	}
}

192 
	$£c2msf
(
s
, *
msf
) {

193 
msf
[0] = 
s
 / 75 / 60;

194 
s
 = s - 
msf
[0] * 75 * 60;

195 
msf
[1] = 
s
 / 75;

196 
s
 = s - 
msf
[1] * 75;

197 
msf
[2] = 
s
;

198 
	}
}

201 
	$tok2msf
(*
time
, *
msf
) {

202 *
tokí
;

204 
tokí
 = 
	`°πok
(
time
, ":");

205 i‡(
tokí
) {

206 
msf
[0] = 
	`©oi
(
tokí
);

209 
msf
[0] = 0;

212 
tokí
 = 
	`°πok
(
NULL
, ":");

213 i‡(
tokí
) {

214 
msf
[1] = 
	`©oi
(
tokí
);

217 
msf
[1] = 0;

220 
tokí
 = 
	`°πok
(
NULL
, ":");

221 i‡(
tokí
) {

222 
msf
[2] = 
	`©oi
(
tokí
);

225 
msf
[2] = 0;

227 
	}
}

229 #i‚de‡
_WIN32


230 
	$GëTickCou¡
() {

231 
time_t
 
öôül_time
 = 0;

232 
timevÆ
 
now
;

234 
	`gëtimeofday
(&
now
, 
NULL
);

236 i‡(
öôül_time
 == 0) {

237 
öôül_time
 = 
now
.
tv_£c
;

240  (
now
.
tv_£c
 - 
öôül_time
Ë* 1000L +Çow.
tv_u£c
 / 1000L;

241 
	}
}

244 #ifde‡
_WIN32


245 
	$∂aythªad
(*
∑øm
)

247 *
	$∂aythªad
(*
∑øm
)

250 
o¶ìp
, 
d
, 
t
, 
i
, 
s
;

251 
tmp
;

252 
ªt
 = 0, 
£˘‹_offs
;

254 
t
 = 
	`GëTickCou¡
();

256 
∂ayög
) {

257 
s
 = 0;

258 
i
 = 0; i < (
¢dbuf„r
Ë/ 
CD_FRAMESIZE_RAW
; i++) {

259 
£˘‹_offs
 = 
cdda_cur_£˘‹
 - 
cdda_fú°_£˘‹
;

260 i‡(
£˘‹_offs
 < 0) {

261 
d
 = 
CD_FRAMESIZE_RAW
;

262 
	`mem£t
(
¢dbuf„r
 + 
s
, 0, 
d
);

265 
d
 = 
	`cdimg_ªad_func
(
cddaH™dÀ
, 
cdda_fûe_off£t
,

266 
¢dbuf„r
 + 
s
, 
£˘‹_offs
);

267 i‡(
d
 < 
CD_FRAMESIZE_RAW
)

271 
s
 +
d
;

272 
cdda_cur_£˘‹
++;

275 i‡(
s
 == 0) {

276 
∂ayög
 = 
FALSE
;

277 
öôül_off£t
 = 0;

281 i‡(!
cdr
.
Muãd
 && 
∂ayög
) {

282 i‡(
cddaBigEndün
) {

283 
i
 = 0; i < 
s
 / 2; i++) {

284 
tmp
 = 
¢dbuf„r
[
i
 * 2];

285 
¢dbuf„r
[
i
 * 2] = sndbuffer[i * 2 + 1];

286 
¢dbuf„r
[
i
 * 2 + 1] = 
tmp
;

293 
ªt
 = 
	`SPU_∂ayCDDAch™√l
((*)
¢dbuf„r
, 
s
);

294 i‡(
ªt
 == 0x7761)

295 
	`u¶ìp
(6 * 1000);

296 } 
ªt
 =0x7761 && 
∂ayög
);

299 i‡(
ªt
 != 0x676f) {

301 
now
;

309 
now
 = 
	`GëTickCou¡
();

310 
o¶ìp
 = 
t
 - 
now
;

311 i‡(
o¶ìp
 <= 0) {

312 
o¶ìp
 = 1;

313 
t
 = 
now
;

315 i‡(
o¶ìp
 > 
CDDA_FRAMETIME
) {

316 
o¶ìp
 = 
CDDA_FRAMETIME
;

317 
t
 = 
now
;

320 
	`u¶ìp
(
o¶ìp
 * 1000);

321 
t
 +
CDDA_FRAMETIME
;

326 #ifde‡
_WIN32


327 
	`_ídthªad
();

329 
	`±hªad_exô
(0);

330  
NULL
;

332 
	}
}

335 
	$°›CDDA
() {

336 i‡(!
∂ayög
) {

340 
∂ayög
 = 
FALSE
;

341 #ifde‡
_WIN32


342 
	`WaôF‹SögÀObje˘
(
thªadid
, 
INFINITE
);

344 
	`±hªad_joö
(
thªadid
, 
NULL
);

346 
	}
}

349 
	$°¨tCDDA
() {

350 i‡(
∂ayög
) {

351 
	`°›CDDA
();

354 
∂ayög
 = 
TRUE
;

356 #ifde‡
_WIN32


357 
thªadid
 = (
HANDLE
)
	`_begöthªad
(
∂aythªad
, 0, 
NULL
);

359 
	`±hªad_¸óã
(&
thªadid
, 
NULL
, 
∂aythªad
, NULL);

361 
	}
}

365 
	$∑r£toc
(c⁄° *
isofûe
) {

366 
to˙ame
[
MAXPATHLEN
];

367 
FILE
 *
fi
;

368 
löebuf
[256], 
tmp
[256], 
«me
[256];

369 *
tokí
;

370 
time
[20], 
time2
[20];

371 
t
, 
£˘‹_offs
, 
£˘‹_size
;

372 
cuºít_zîo_g≠
 = 0;

374 
numåacks
 = 0;

377 
	`°∫˝y
(
to˙ame
, 
isofûe
, (tocname));

378 
to˙ame
[
MAXPATHLEN
 - 1] = '\0';

379 i‡(
	`°æí
(
to˙ame
) >= 4) {

380 
	`°r˝y
(
to˙ame
 + 
	`°æí
(tocname) - 4, ".toc");

385 
boﬁ
 
toc_«med_as_cue
 = 
Ál£
;

386 i‡((
fi
 = 
	`f›í
(
to˙ame
, "r")Ë=
NULL
) {

388 
	`°r˝y
(
to˙ame
 + 
	`°æí
(tocname) - 4, ".cue");

390 i‡((
fi
 = 
	`f›í
(
to˙ame
, "r")Ë=
NULL
) {

392 
	`°r˝y
(
to˙ame
, 
isofûe
);

393 
t
 = 
	`°æí
(
to˙ame
);

394 i‡(
t
 >8 && 
	`°rcmp
(
to˙ame
 +Å - 8, ".toc.bin") == 0) {

395 
to˙ame
[
t
 - 4] = '\0';

396 i‡((
fi
 = 
	`f›í
(
to˙ame
, "r")Ë=
NULL
) {

403 
toc_«med_as_cue
 = 
åue
;

408 
boﬁ
 
is_toc_fûe
 = 
Ál£
;

409 
	`fgës
(
löebuf
, ÷öebuf), 
fi
Ë!
NULL
) {

410 i‡(
	`°r°r
(
löebuf
, "TRACK"Ë!
NULL
) {

411 * 
mode_sub°r
 = 
	`°r°r
(
löebuf
, "MODE");

412 i‡(
mode_sub°r
 !
NULL
 &&

413 (
mode_sub°r
[4] == '1' || mode_substr[4] == '2') &&

414 
mode_sub°r
[5] != '/') {

418 
is_toc_fûe
 = 
åue
;

420 i‡(
toc_«med_as_cue
)

421 
	`¥ötf
("\nWarning: .CUE file isÑeallyá .TOC file (processingás TOC..)\n");

426 i‡(!
is_toc_fûe
) {

427 
	`f˛o£
(
fi
);

431 
	`f£ek
(
fi
, 0, 
SEEK_SET
);

432 
	`mem£t
(&
ti
, 0, (ti));

433 
cddaBigEndün
 = 
TRUE
;

434 
£˘‹_size
 = 
CD_FRAMESIZE_RAW
;

435 
£˘‹_offs
 = 2 * 75;

438 
	`fgës
(
löebuf
, ÷öebuf), 
fi
Ë!
NULL
) {

440 
	`°∫˝y
(
tmp
, 
löebuf
, (linebuf));

441 
tokí
 = 
	`°πok
(
tmp
, " ");

443 i‡(
tokí
 =
NULL
) ;

445 i‡(!
	`°rcmp
(
tokí
, "TRACK")) {

446 
£˘‹_offs
 +
cuºít_zîo_g≠
;

447 
cuºít_zîo_g≠
 = 0;

450 
tokí
 = 
	`°πok
(
NULL
, " ");

451 
numåacks
++;

453 i‡(!
	`°∫cmp
(
tokí
, "MODE2_RAW", 9)) {

454 
ti
[
numåacks
].
ty≥
 = 
DATA
;

455 
	`£c2msf
(2 * 75, 
ti
[
numåacks
].
°¨t
);

458 
tokí
 = 
	`°πok
(
NULL
, " ");

459 i‡(
tokí
 !
NULL
 && !
	`°∫cmp
(token, "RW", 2)) {

460 
£˘‹_size
 = 
CD_FRAMESIZE_RAW
 + 
SUB_FRAMESIZE
;

461 
subCh™Mixed
 = 
TRUE
;

462 i‡(!
	`°∫cmp
(
tokí
, "RW_RAW", 6))

463 
subCh™Raw
 = 
TRUE
;

466 i‡(!
	`°∫cmp
(
tokí
, "AUDIO", 5)) {

467 
ti
[
numåacks
].
ty≥
 = 
CDDA
;

470 i‡(!
	`°rcmp
(
tokí
, "DATAFILE")) {

471 i‡(
ti
[
numåacks
].
ty≥
 =
CDDA
) {

472 
	`ssˇnf
(
löebuf
, "DATAFILE \"%[^\"]\" #%d %8s", 
«me
, &
t
, 
time2
);

473 
ti
[
numåacks
].
°¨t_off£t
 = 
t
;

474 
t
 =Å / 
£˘‹_size
 + 
£˘‹_offs
;

475 
	`£c2msf
(
t
, (*)&
ti
[
numåacks
].
°¨t
);

476 
	`tok2msf
((*)&
time2
, (*)&
ti
[
numåacks
].
Àngth
);

479 
	`ssˇnf
(
löebuf
, "DATAFILE \"%[^\"]\" %8s", 
«me
, 
time
);

480 
	`tok2msf
((*)&
time
, (*)&
ti
[
numåacks
].
Àngth
);

483 i‡(!
	`°rcmp
(
tokí
, "FILE")) {

484 
	`ssˇnf
(
löebuf
, "FILE \"%[^\"]\" #%d %8†%8s", 
«me
, &
t
, 
time
, 
time2
);

485 
	`tok2msf
((*)&
time
, (*)&
ti
[
numåacks
].
°¨t
);

486 
t
 +
	`msf2£c
(
ti
[
numåacks
].
°¨t
Ë* 
£˘‹_size
;

487 
ti
[
numåacks
].
°¨t_off£t
 = 
t
;

488 
t
 =Å / 
£˘‹_size
 + 
£˘‹_offs
;

489 
	`£c2msf
(
t
, (*)&
ti
[
numåacks
].
°¨t
);

490 
	`tok2msf
((*)&
time2
, (*)&
ti
[
numåacks
].
Àngth
);

492 i‡(!
	`°rcmp
(
tokí
, "ZERO") || !strcmp(token, "SILENCE")) {

494 
tokí
 !
NULL
) {

495 
tokí
 = 
	`°πok
(
NULL
, " ");

496 i‡(
	`°rchr
(
tokí
, ':'Ë!
NULL
)

499 i‡(
tokí
 !
NULL
) {

500 
	`tok2msf
(
tokí
, 
tmp
);

501 
cuºít_zîo_g≠
 = 
	`msf2£c
(
tmp
);

503 i‡(
numåacks
 > 1) {

504 
t
 = 
ti
[
numåacks
 - 1].
°¨t_off£t
;

505 
t
 /
£˘‹_size
;

506 
¥eg≠Off£t
 = 
t
 + 
	`msf2£c
(
ti
[
numåacks
 - 1].
Àngth
);

509 i‡(!
	`°rcmp
(
tokí
, "START")) {

510 
tokí
 = 
	`°πok
(
NULL
, " ");

511 i‡(
tokí
 !
NULL
 && 
	`°rchr
(token, ':')) {

512 
	`tok2msf
(
tokí
, 
tmp
);

513 
t
 = 
	`msf2£c
(
tmp
);

514 
ti
[
numåacks
].
°¨t_off£t
 +(
t
 - 
cuºít_zîo_g≠
Ë* 
£˘‹_size
;

515 
t
 = 
	`msf2£c
(
ti
[
numåacks
].
°¨t
) +Å;

516 
	`£c2msf
(
t
, (*)&
ti
[
numåacks
].
°¨t
);

521 i‡(
numåacks
 <0Ë
îr‹
;

523 
	`f˛o£
(
fi
);

526 
îr‹
:

527 
	`¥ötf
("\nEº‹Ñódög .TOC fûê%s\n", 
to˙ame
);

528 
	`f˛o£
(
fi
);

530 
	}
}

534 
	$∑r£cue
(c⁄° *
isofûe
) {

535 
cuíame
[
MAXPATHLEN
];

536 
fûï©h
[
MAXPATHLEN
];

537 *
öcue_‚ame
;

538 
FILE
 *
fi
;

539 *
tokí
;

540 
time
[20];

541 *
tmp
;

542 
löebuf
[256], 
tmpb
[256], 
dummy
[256];

543 
öcue_max_Àn
;

544 
t
, 
fûe_Àn
, 
mode
, 
£˘‹_offs
;

545 
£˘‹_size
 = 2352;

547 
numåacks
 = 0;

550 
	`°∫˝y
(
cuíame
, 
isofûe
, (cuename));

551 
cuíame
[
MAXPATHLEN
 - 1] = '\0';

552 i‡(
	`°æí
(
cuíame
) >= 4) {

553 
	`°r˝y
(
cuíame
 + 
	`°æí
(cuename) - 4, ".cue");

558 i‡((
fi
 = 
	`f›í
(
cuíame
, "r")Ë=
NULL
) {

565 
	`fgës
(
löebuf
, ÷öebuf), 
fi
Ë!
NULL
) {

566 i‡(
	`°r°r
(
löebuf
, "TRACK"Ë!
NULL
) {

567 * 
mode_sub°r
 = 
	`°r°r
(
löebuf
, "MODE");

568 i‡(
mode_sub°r
 !
NULL
 &&

569 (
mode_sub°r
[4] == '1' || mode_substr[4] == '2') &&

570 
mode_sub°r
[5] != '/') {

575 
	`¥ötf
("\nWarning: .CUE file isÑeallyá .TOC file (processingás TOC..)\n");

576 
	`f˛o£
(
fi
);

577  
	`∑r£toc
(
isofûe
);

581 
	`f£ek
(
fi
, 0, 
SEEK_SET
);

584 
	`°∫˝y
(
fûï©h
, 
cuíame
, (filepath));

585 
tmp
 = 
	`°ºchr
(
fûï©h
, '/');

586 i‡(
tmp
 =
NULL
)

587 
tmp
 = 
	`°ºchr
(
fûï©h
, '\\');

588 i‡(
tmp
 !
NULL
)

589 
tmp
++;

591 
tmp
 = 
fûï©h
;

592 *
tmp
 = 0;

593 
fûï©h
[(filepath) - 1] = 0;

594 
öcue_‚ame
 = 
tmp
;

595 
öcue_max_Àn
 = (
fûï©h
Ë- (
tmp
 - filepath) - 1;

597 
	`mem£t
(&
ti
, 0, (ti));

599 
fûe_Àn
 = 0;

600 
£˘‹_offs
 = 2 * 75;

602 
	`fgës
(
löebuf
, ÷öebuf), 
fi
Ë!
NULL
) {

603 
	`°∫˝y
(
dummy
, 
löebuf
, (linebuf));

604 
tokí
 = 
	`°πok
(
dummy
, " ");

606 i‡(
tokí
 =
NULL
) {

610 i‡(!
	`°rcmp
(
tokí
, "TRACK")) {

611 
numåacks
++;

613 
£˘‹_size
 = 0;

614 i‡(
	`°r°r
(
löebuf
, "AUDIO"Ë!
NULL
) {

615 
ti
[
numåacks
].
ty≥
 = 
CDDA
;

616 
£˘‹_size
 = 2352;

618 i‡(
	`ssˇnf
(
löebuf
, " TRACK %u MODE%u/%u", &
t
, &
mode
, &
£˘‹_size
) == 3)

619 
ti
[
numåacks
].
ty≥
 = 
DATA
;

621 
	`¥ötf
(".cue: failedÅoÖarse TRACK\n");

622 
ti
[
numåacks
].
ty≥
 =Çumåack†=1 ? 
DATA
 : 
CDDA
;

624 i‡(
£˘‹_size
 == 0)

625 
£˘‹_size
 = 2352;

627 i‡(!
	`°rcmp
(
tokí
, "INDEX")) {

628 i‡(
	`ssˇnf
(
löebuf
, " INDEX %02d %8s", &
t
, 
time
) != 2)

629 
	`¥ötf
(".cue: failedÅoÖarse INDEX\n");

630 
	`tok2msf
(
time
, (*)&
ti
[
numåacks
].
°¨t
);

632 
t
 = 
	`msf2£c
(
ti
[
numåacks
].
°¨t
);

633 
ti
[
numåacks
].
°¨t_off£t
 = 
t
 * 
£˘‹_size
;

634 
t
 +
£˘‹_offs
;

635 
	`£c2msf
(
t
, 
ti
[
numåacks
].
°¨t
);

638 
t
 = 
fûe_Àn
 - 
ti
[
numåacks
].
°¨t_off£t
 / 
£˘‹_size
;

639 
	`£c2msf
(
t
, 
ti
[
numåacks
].
Àngth
);

641 i‡(
numåacks
 > 1 && 
ti
[numåacks].
h™dÀ
 =
NULL
) {

644 
t
 = 
	`msf2£c
(
ti
[
numåacks
].
°¨t
) - msf2sec(ti[numtracks - 1].start);

645 
	`£c2msf
(
t
, 
ti
[
numåacks
 - 1].
Àngth
);

647 i‡(
numåacks
 > 1 && 
¥eg≠Off£t
 == -1)

648 
¥eg≠Off£t
 = 
ti
[
numåacks
].
°¨t_off£t
 / 
£˘‹_size
;

650 i‡(!
	`°rcmp
(
tokí
, "PREGAP")) {

651 i‡(
	`ssˇnf
(
löebuf
, " PREGAP %8s", 
time
) == 1) {

652 
	`tok2msf
(
time
, 
dummy
);

653 
£˘‹_offs
 +
	`msf2£c
(
dummy
);

655 
¥eg≠Off£t
 = -1;

657 i‡(!
	`°rcmp
(
tokí
, "FILE")) {

658 
t
 = 
	`ssˇnf
(
löebuf
, " FILE \"%255[^\"]\"", 
tmpb
);

659 i‡(
t
 != 1)

660 
	`ssˇnf
(
löebuf
, " FILE %255s", 
tmpb
);

667 
tmp
 = 
	`°ºchr
(
tmpb
, '\\');

668 i‡(
tmp
 =
NULL
)

669 
tmp
 = 
	`°ºchr
(
tmpb
, '/');

670 i‡(
tmp
 !
NULL
)

671 
tmp
++;

673 
tmp
 = 
tmpb
;

674 
	`°∫˝y
(
öcue_‚ame
, 
tmp
, 
öcue_max_Àn
);

675 
ti
[
numåacks
 + 1].
h™dÀ
 = 
	`f›í
(
fûï©h
, "rb");

679 i‡(
numåacks
 + 1 > 1) {

680 
mu…ifûe
 = 1;

681 
£˘‹_offs
 +
fûe_Àn
;

684 
fûe_Àn
 = 0;

685 i‡(
ti
[
numåacks
 + 1].
h™dÀ
 =
NULL
) {

686 
	`¥ötf
(("\ncouldÇŸ o≥n: %s\n"), 
fûï©h
);

689 
	`f£ek
(
ti
[
numåacks
 + 1].
h™dÀ
, 0, 
SEEK_END
);

690 
fûe_Àn
 = 
	`·ñl
(
ti
[
numåacks
 + 1].
h™dÀ
) / 2352;

692 i‡(
numåacks
 =0 && 
	`°æí
(
isofûe
) >= 4 &&

693 
	`°rcmp
(
isofûe
 + 
	`°æí
(isofile) - 4, ".cue") == 0)

696 
	`f˛o£
(
cdH™dÀ
);

697 
cdH™dÀ
 = 
	`f›í
(
fûï©h
, "rb");

702 i‡(
numåacks
 <0Ë
îr‹
;

704 
	`f˛o£
(
fi
);

707 
îr‹
:

708 
	`¥ötf
("\nEº‹Ñódög .CUE fûê%s\n", 
cuíame
);

709 
	`f˛o£
(
fi
);

711 
	}
}

715 
	$∑r£ccd
(c⁄° *
isofûe
) {

716 
ccd«me
[
MAXPATHLEN
];

717 
FILE
 *
fi
;

718 
löebuf
[256];

719 
t
;

721 
numåacks
 = 0;

724 
	`°∫˝y
(
ccd«me
, 
isofûe
, (ccdname));

725 
ccd«me
[
MAXPATHLEN
 - 1] = '\0';

726 i‡(
	`°æí
(
ccd«me
) >= 4) {

727 
	`°r˝y
(
ccd«me
 + 
	`°æí
(ccdname) - 4, ".ccd");

732 i‡((
fi
 = 
	`f›í
(
ccd«me
, "r")Ë=
NULL
) {

736 
	`mem£t
(&
ti
, 0, (ti));

738 
	`fgës
(
löebuf
, ÷öebuf), 
fi
Ë!
NULL
) {

739 i‡(!
	`°∫cmp
(
löebuf
, "[TRACK", 6)){

740 
numåacks
++;

742 i‡(!
	`°∫cmp
(
löebuf
, "MODE=", 5)) {

743 
	`ssˇnf
(
löebuf
, "MODE=%d", &
t
);

744 
ti
[
numåacks
].
ty≥
 = ((
t
 =0Ë? 
CDDA
 : 
DATA
);

746 i‡(!
	`°∫cmp
(
löebuf
, "INDEX 1=", 8)) {

747 
	`ssˇnf
(
löebuf
, "INDEX 1=%d", &
t
);

748 
	`£c2msf
(
t
 + 2 * 75, 
ti
[
numåacks
].
°¨t
);

749 
ti
[
numåacks
].
°¨t_off£t
 = 
t
 * 2352;

752 i‡(
numåacks
 > 1) {

753 
t
 = 
	`msf2£c
(
ti
[
numåacks
].
°¨t
) - msf2sec(ti[numtracks - 1].start);

754 
	`£c2msf
(
t
, 
ti
[
numåacks
 - 1].
Àngth
);

759 i‡(
numåacks
 <= 0)

760 
îr‹
;

763 i‡(
numåacks
 >= 1) {

764 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_END
);

765 
t
 = 
	`·ñl
(
cdH™dÀ
Ë/ 2352 - 
	`msf2£c
(
ti
[
numåacks
].
°¨t
) + 2 * 75;

766 
	`£c2msf
(
t
, 
ti
[
numåacks
].
Àngth
);

769 
	`f˛o£
(
fi
);

772 
îr‹
:

773 
	`¥ötf
("\nEº‹Ñódög .CCD fûê%s\n", 
ccd«me
);

774 
	`f˛o£
(
fi
);

776 
	}
}

781 
	$∑r£mds
(c⁄° *
isofûe
) {

782 
md¢ame
[
MAXPATHLEN
];

783 
FILE
 *
fi
;

784 
uöt32_t
 
off£t
, 
exåa_off£t
, 
l
, 
i
;

785 
uöt16_t
 
s
;

786 
c
;

788 
numåacks
 = 0;

791 
	`°∫˝y
(
md¢ame
, 
isofûe
, (mdsname));

792 
md¢ame
[
MAXPATHLEN
 - 1] = '\0';

793 i‡(
	`°æí
(
md¢ame
) >= 4) {

794 
	`°r˝y
(
md¢ame
 + 
	`°æí
(mdsname) - 4, ".mds");

799 i‡((
fi
 = 
	`f›í
(
md¢ame
, "rb")Ë=
NULL
)

802 
	`mem£t
(&
ti
, 0, (ti));

805 i‡(
	`‰ód
(&
i
, 4, 1, 
fi
) != 1)

806 
îr‹
;

807 
i
 = 
	`SWAP32
(i);

808 i‡(
i
 != 0x4944454D) {

810 
	`¥ötf
("\nEº‹: %†i†nŸá vÆid .MDS fûe\n", 
md¢ame
);

811 
îr‹
;

815 i‡(
	`f£ek
(
fi
, 0x50, 
SEEK_SET
) == -1 ||

816 
	`‰ód
(&
off£t
, 4, 1, 
fi
) != 1)

817 
îr‹
;

818 
off£t
 = 
	`SWAP32
(offset);

821 
off£t
 += 14;

822 i‡(
	`f£ek
(
fi
, 
off£t
, 
SEEK_SET
) == -1 ||

823 
	`‰ód
(&
s
, 2, 1, 
fi
) != 1)

824 
îr‹
;

825 
s
 = 
	`SWAP16
(s);

826 
numåacks
 = 
s
;

829 i‡(
	`f£ek
(
fi
, 4, 
SEEK_CUR
) == -1 ||

830 
	`‰ód
(&
off£t
, 4, 1, 
fi
) != 1)

831 
îr‹
;

832 
off£t
 = 
	`SWAP32
(offset);

836 i‡(
	`f£ek
(
fi
, 
off£t
 + 4, 
SEEK_SET
) == -1 ||

837 (
c
 = 
	`fgëc
(
fi
)Ë=
EOF
)

838 
îr‹
;

839 i‡(
c
 < 0xA0)

841 
off£t
 += 0x50;

845 i‡(
	`f£ek
(
fi
, 
off£t
 + 1, 
SEEK_SET
) == -1 ||

846 
	`fgëc
(
fi
Ë=
EOF
)

847 
îr‹
;

848 
subCh™Mixed
 = 
subCh™Raw
 = (
c
 ? 
TRUE
 : 
FALSE
);

851 
i
 = 1; i <
numåacks
; i++) {

852 i‡(
	`f£ek
(
fi
, 
off£t
, 
SEEK_SET
) == -1)

853 
îr‹
;

856 i‡((
c
 = 
	`fgëc
(
fi
)Ë=
EOF
)

857 
îr‹
;

858 
ti
[
i
].
ty≥
 = (
c
 =0xA9Ë? 
CDDA
 : 
DATA
;

859 
	`f£ek
(
fi
, 8, 
SEEK_CUR
);

862 
j
 = 0; j <= 2; ++j) {

863 i‡((
c
 = 
	`fgëc
(
fi
)Ë=
EOF
)

864 
îr‹
;

865 
ti
[
i
].
°¨t
[
j
] = 
c
;

868 i‡(
	`‰ód
(&
exåa_off£t
, 4, 1, 
fi
) != 1)

869 
îr‹
;

870 
exåa_off£t
 = 
	`SWAP32
(extra_offset);

873 i‡(
	`f£ek
(
fi
, 
off£t
 + 0x28, 
SEEK_SET
) == -1 ||

874 
	`‰ód
(&
l
, 4, 1, 
fi
) != 1)

875 
îr‹
;

876 
l
 = 
	`SWAP32
(l);

877 
ti
[
i
].
°¨t_off£t
 = 
l
;

880 i‡(
	`f£ek
(
fi
, 
exåa_off£t
, 
SEEK_SET
) == -1 ||

881 
	`‰ód
(&
l
, 4, 1, 
fi
) != 1)

882 
îr‹
;

883 
l
 = 
	`SWAP32
(l);

884 i‡(
l
 !0 && 
i
 > 1)

885 
¥eg≠Off£t
 = 
	`msf2£c
(
ti
[
i
].
°¨t
);

888 i‡(
	`‰ód
(&
l
, 4, 1, 
fi
) != 1)

889 
îr‹
;

890 
l
 = 
	`SWAP32
(l);

891 
	`£c2msf
(
l
, 
ti
[
i
].
Àngth
);

893 
off£t
 += 0x50;

896 i‡(
numåacks
 =0Ë
îr‹
;

898 
	`f˛o£
(
fi
);

901 
îr‹
:

902 
	`¥ötf
("\nEº‹Ñódög .MDS fûê%s\n", 
md¢ame
);

903 
	`f˛o£
(
fi
);

905 
	}
}

907 
	$h™dÀpbp
(c⁄° *
isofûe
) {

909 
sig
;

910 
d⁄tˇª
[8];

911 
pßr_offs
;

912 } 
pbp_hdr
;

914 
ty≥
;

915 
∑d0
;

916 
åack
;

917 
ödex0
[3];

918 
∑d1
;

919 
ödex1
[3];

920 } 
toc_íåy
;

922 
off£t
;

923 
size
;

924 
d⁄tˇª
[6];

925 } 
ödex_íåy
;

926 
pßr_sig
[11];

927 
off_t
 
psisoimg_offs
, 
cdimg_ba£
;

928 
t
, 
cd_Àngth
;

929 
off£âab
[8];

930 c⁄° *
ext
 = 
NULL
;

931 
i
, 
ªt
;

933 i‡(
	`°æí
(
isofûe
) >= 4)

934 
ext
 = 
isofûe
 + 
	`°æí
(isofile) - 4;

935 i‡(
ext
 =
NULL
 || (
	`°rcmp
(ext, ".pbp") != 0 && strcmp(ext, ".PBP") != 0))

938 
	`f£eko
(
cdH™dÀ
, 0, 
SEEK_SET
);

940 
numåacks
 = 0;

942 
ªt
 = 
	`‰ód
(&
pbp_hdr
, 1, ’bp_hdr), 
cdH™dÀ
);

943 i‡(
ªt
 !(
pbp_hdr
)) {

944 
	`¥ötf
("failedÅoÑeadÖbp\n");

945 
Áû_io
;

948 
ªt
 = 
	`f£eko
(
cdH™dÀ
, 
pbp_hdr
.
pßr_offs
, 
SEEK_SET
);

949 i‡(
ªt
 != 0) {

950 
	`¥ötf
("ÁûedÅÿ£ekÅÿ%x\n", 
pbp_hdr
.
pßr_offs
);

951 
Áû_io
;

954 
psisoimg_offs
 = 
pbp_hdr
.
pßr_offs
;

955 
ªt
 = 
	`‰ód
(
pßr_sig
, 1, ’ßr_sig), 
cdH™dÀ
);

956 i‡(
ªt
 !(
pßr_sig
)) {

957 
	`¥ötf
("failedÅoÑead sig (1)\n");

958 
Áû_io
;

960 
pßr_sig
[10] = 0;

961 i‡(
	`°rcmp
(
pßr_sig
, "PSTITLEIMG") == 0) {

963 
ªt
 = 
	`f£eko
(
cdH™dÀ
, 
pbp_hdr
.
pßr_offs
 + 0x200, 
SEEK_SET
);

964 i‡(
ªt
 != 0) {

965 
	`¥ötf
("ÁûedÅÿ£ekÅÿ%x\n", 
pbp_hdr
.
pßr_offs
 + 0x200);

966 
Áû_io
;

969 i‡(
	`‰ód
(&
off£âab
, 1, (off£âab), 
cdH™dÀ
) != (offsettab)) {

970 
	`¥ötf
("failedÅoÑead offsettab\n");

971 
Áû_io
;

974 
i
 = 0; i < (
off£âab
) / (offsettab[0]); i++) {

975 i‡(
off£âab
[
i
] == 0)

978 
cdrIsoMu…idiskCou¡
 = 
i
;

979 i‡(
cdrIsoMu…idiskCou¡
 == 0) {

980 
	`¥ötf
("ERROR: multidiskÉboot has 0 images?\n");

981 
Áû_io
;

986 i‡(
cdrIsoMu…idiskCÆlback
Ë
	`cdrIsoMu…idiskCÆlback
();

988 i‡(
cdrIsoMu…idiskSñe˘
 >
cdrIsoMu…idiskCou¡
)

989 
cdrIsoMu…idiskSñe˘
 = 0;

991 
psisoimg_offs
 +
off£âab
[
cdrIsoMu…idiskSñe˘
];

993 
ªt
 = 
	`f£eko
(
cdH™dÀ
, 
psisoimg_offs
, 
SEEK_SET
);

994 i‡(
ªt
 != 0) {

995 
	`¥ötf
("ÁûedÅÿ£ekÅÿ%Œx\n", ()
psisoimg_offs
);

996 
Áû_io
;

999 
ªt
 = 
	`‰ód
(
pßr_sig
, 1, ’ßr_sig), 
cdH™dÀ
);

1000 i‡(
ªt
 !(
pßr_sig
)) {

1001 
	`¥ötf
("failedÅoÑead sig (2)\n");

1002 
Áû_io
;

1004 
pßr_sig
[10] = 0;

1007 i‡(
	`°rcmp
(
pßr_sig
, "PSISOIMG00") != 0) {

1008 
	`¥ötf
("badÖßr_sig: %s\n", 
pßr_sig
);

1009 
Áû_io
;

1013 
ªt
 = 
	`f£eko
(
cdH™dÀ
, 
psisoimg_offs
 + 0x800, 
SEEK_SET
);

1014 i‡(
ªt
 != 0) {

1015 
	`¥ötf
("ÁûedÅÿ£ekÅÿ%Œx\n", ()
psisoimg_offs
 + 0x800);

1016 
Áû_io
;

1020 i‡(
	`f£ek
(
cdH™dÀ
, (
toc_íåy
), 
SEEK_CUR
) == -1 ||

1021 
	`‰ód
(&
toc_íåy
, 1, —oc_íåy), 
cdH™dÀ
) != (toc_entry)) {

1022 
	`¥ötf
("failedÑeading firstÅocÉntry\n");

1023 
Áû_io
;

1026 
numåacks
 = 
	`btoi
(
toc_íåy
.
ödex1
[0]);

1028 i‡(
	`‰ód
(&
toc_íåy
, 1, —oc_íåy), 
cdH™dÀ
) != (toc_entry)) {

1029 
	`¥ötf
("failedÑeading secondÅocÉntry\n");

1030 
Áû_io
;

1033 
cd_Àngth
 = 
	`btoi
(
toc_íåy
.
ödex1
[0]) * 60 * 75 +

1034 
	`btoi
(
toc_íåy
.
ödex1
[1]) * 75 + btoi(toc_entry.index1[2]);

1036 
i
 = 1; i <
numåacks
; i++) {

1037 i‡(
	`‰ód
(&
toc_íåy
, 1, —oc_íåy), 
cdH™dÀ
) != (toc_entry)) {

1038 
	`¥ötf
("ÁûedÑódögÅo¯íåy f‹Åøck %d\n", 
i
);

1039 
Áû_io
;

1042 
ti
[
i
].
ty≥
 = (
toc_íåy
.ty≥ =1Ë? 
CDDA
 : 
DATA
;

1044 
ti
[
i
].
°¨t_off£t
 = 
	`btoi
(
toc_íåy
.
ödex0
[0]) * 60 * 75 +

1045 
	`btoi
(
toc_íåy
.
ödex0
[1]) * 75 + btoi(toc_entry.index0[2]);

1046 
ti
[
i
].
°¨t_off£t
 *= 2352;

1047 
ti
[
i
].
°¨t
[0] = 
	`btoi
(
toc_íåy
.
ödex1
[0]);

1048 
ti
[
i
].
°¨t
[1] = 
	`btoi
(
toc_íåy
.
ödex1
[1]);

1049 
ti
[
i
].
°¨t
[2] = 
	`btoi
(
toc_íåy
.
ödex1
[2]);

1051 i‡(
i
 > 1) {

1052 
t
 = 
	`msf2£c
(
ti
[
i
].
°¨t
) - msf2sec(ti[i - 1].start);

1053 
	`£c2msf
(
t
, 
ti
[
i
 - 1].
Àngth
);

1056 
t
 = 
cd_Àngth
 - 
ti
[
numåacks
].
°¨t_off£t
 / 2352;

1057 
	`£c2msf
(
t
, 
ti
[
numåacks
].
Àngth
);

1060 
ªt
 = 
	`f£eko
(
cdH™dÀ
, 
psisoimg_offs
 + 0x4000, 
SEEK_SET
);

1061 i‡(
ªt
 != 0) {

1062 
	`¥ötf
("failedÅo seekÅo ISO index\n");

1063 
Áû_io
;

1066 
com¥_img
 = (
COMPR_IMG
 *)
	`ˇŒoc
(1, (*compr_img));

1067 i‡(
com¥_img
 =
NULL
)

1068 
Áû_io
;

1070 
com¥_img
->
block_shi·
 = 4;

1071 
com¥_img
->
cuºít_block
 = ()-1;

1073 
com¥_img
->
ödex_Àn
 = (0x100000 - 0x4000Ë/ (
ödex_íåy
);

1074 
com¥_img
->
ödex_èbÀ
 = (
off_t
 *)
	`mÆloc
((com¥_img->
ödex_Àn
 + 1) *

1075 (
com¥_img
->
ödex_èbÀ
[0]));

1076 i‡(
com¥_img
->
ödex_èbÀ
 =
NULL
)

1077 
Áû_io
;

1079 
cdimg_ba£
 = 
psisoimg_offs
 + 0x100000;

1080 
i
 = 0; i < 
com¥_img
->
ödex_Àn
; i++) {

1081 
ªt
 = 
	`‰ód
(&
ödex_íåy
, 1, (ödex_íåy), 
cdH™dÀ
);

1082 i‡(
ªt
 !(
ödex_íåy
)) {

1083 
	`¥ötf
("ÁûedÅÿªad index_íåy #%d\n", 
i
);

1084 
Áû_ödex
;

1087 i‡(
ödex_íåy
.
size
 == 0)

1090 
com¥_img
->
ödex_èbÀ
[
i
] = 
cdimg_ba£
 + 
ödex_íåy
.
off£t
;

1092 
com¥_img
->
ödex_èbÀ
[
i
] = 
cdimg_ba£
 + 
ödex_íåy
.
off£t
 + index_íåy.
size
;

1096 
Áû_ödex
:

1097 
	`‰ì
(
com¥_img
->
ödex_èbÀ
);

1098 
com¥_img
->
ödex_èbÀ
 = 
NULL
;

1099 
Áû_io
:

1100 i‡(
com¥_img
 !
NULL
) {

1101 
	`‰ì
(
com¥_img
);

1102 
com¥_img
 = 
NULL
;

1105 
	}
}

1107 
	$h™dÀcbö
(c⁄° *
isofûe
) {

1110 
magic
[4];

1111 
hódî_size
;

1112 
tŸÆ_byãs
;

1113 
block_size
;

1114 
vî
;

1115 
Æign
;

1116 
rsv_06
[2];

1117 } 
ciso_hdr
;

1118 c⁄° *
ext
 = 
NULL
;

1119 *
ödex_èbÀ
 = 
NULL
;

1120 
ödex
 = 0, 
∂aö
;

1121 
i
, 
ªt
;

1123 i‡(
	`°æí
(
isofûe
) >= 5)

1124 
ext
 = 
isofûe
 + 
	`°æí
(isofile) - 5;

1125 i‡(
ext
 =
NULL
 || (
	`°rˇ£cmp
(ext + 1, ".cbn") != 0 && strcasecmp(ext, ".cbin") != 0))

1128 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_SET
);

1130 
ªt
 = 
	`‰ód
(&
ciso_hdr
, 1, (ciso_hdr), 
cdH™dÀ
);

1131 i‡(
ªt
 !(
ciso_hdr
)) {

1132 
	`¥ötf
("failedÅoÑead ciso header\n");

1136 i‡(
	`°∫cmp
(
ciso_hdr
.
magic
, "CISO", 4Ë!0 || ciso_hdr.
tŸÆ_byãs
 <0 || ciso_hdr.
block_size
 <= 0) {

1137 
	`¥ötf
("bad ciso header\n");

1140 i‡(
ciso_hdr
.
hódî_size
 != 0 && ciso_hdr.header_size != (ciso_hdr)) {

1141 
ªt
 = 
	`f£eko
(
cdH™dÀ
, 
ciso_hdr
.
hódî_size
, 
SEEK_SET
);

1142 i‡(
ªt
 != 0) {

1143 
	`¥ötf
("ÁûedÅÿ£ekÅÿ%x\n", 
ciso_hdr
.
hódî_size
);

1148 
com¥_img
 = (
COMPR_IMG
 *)
	`ˇŒoc
(1, (*compr_img));

1149 i‡(
com¥_img
 =
NULL
)

1150 
Áû_io
;

1152 
com¥_img
->
block_shi·
 = 0;

1153 
com¥_img
->
cuºít_block
 = ()-1;

1155 
com¥_img
->
ödex_Àn
 = 
ciso_hdr
.
tŸÆ_byãs
 / ciso_hdr.
block_size
;

1156 
ödex_èbÀ
 = (*)
	`mÆloc
((
com¥_img
->
ödex_Àn
 + 1) * (index_table[0]));

1157 i‡(
ödex_èbÀ
 =
NULL
)

1158 
Áû_io
;

1160 
ªt
 = 
	`‰ód
(
ödex_èbÀ
, (ödex_èbÀ[0]), 
com¥_img
->
ödex_Àn
, 
cdH™dÀ
);

1161 i‡(
ªt
 !
com¥_img
->
ödex_Àn
) {

1162 
	`¥ötf
("failedÅoÑead indexÅable\n");

1163 
Áû_ödex
;

1166 
com¥_img
->
ödex_èbÀ
 = (
off_t
 *)
	`mÆloc
((com¥_img->
ödex_Àn
 + 1) *

1167 (
com¥_img
->
ödex_èbÀ
[0]));

1168 i‡(
com¥_img
->
ödex_èbÀ
 =
NULL
)

1169 
Áû_ödex
;

1171 
i
 = 0; i < 
com¥_img
->
ödex_Àn
 + 1; i++) {

1172 
ödex
 = 
ödex_èbÀ
[
i
];

1173 
∂aö
 = 
ödex
 & 0x80000000;

1174 
ödex
 &= 0x7fffffff;

1175 
com¥_img
->
ödex_èbÀ
[
i
] = (
off_t
)
ödex
 << 
ciso_hdr
.
Æign
;

1176 i‡(
∂aö
)

1177 
com¥_img
->
ödex_èbÀ
[
i
] |
OFF_T_MSB
;

1182 
Áû_ödex
:

1183 
	`‰ì
(
ödex_èbÀ
);

1184 
Áû_io
:

1185 i‡(
com¥_img
 !
NULL
) {

1186 
	`‰ì
(
com¥_img
);

1187 
com¥_img
 = 
NULL
;

1190 
	}
}

1193 
	$›ísubfûe
(c⁄° *
is⁄ame
) {

1194 
sub«me
[
MAXPATHLEN
];

1197 
	`°∫˝y
(
sub«me
, 
is⁄ame
, (subname));

1198 
sub«me
[
MAXPATHLEN
 - 1] = '\0';

1199 i‡(
	`°æí
(
sub«me
) >= 4) {

1200 
	`°r˝y
(
sub«me
 + 
	`°æí
(subname) - 4, ".sub");

1206 
subH™dÀ
 = 
	`f›í
(
sub«me
, "rb");

1207 i‡(
subH™dÀ
 =
NULL
) {

1212 
	}
}

1214 
	$›ísbifûe
(c⁄° *
is⁄ame
) {

1215 
sböame
[
MAXPATHLEN
];

1216 
s
;

1218 
	`°∫˝y
(
sböame
, 
is⁄ame
, (sbiname));

1219 
sböame
[
MAXPATHLEN
 - 1] = '\0';

1220 i‡(
	`°æí
(
sböame
) >= 4) {

1221 
	`°r˝y
(
sböame
 + 
	`°æí
(sbiname) - 4, ".sbi");

1227 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_END
);

1228 
s
 = 
	`·ñl
(
cdH™dÀ
) / 2352;

1230  
	`LﬂdSBI
(
sböame
, 
s
);

1231 
	}
}

1233 
	$cdªad_n‹mÆ
(
FILE
 *
f
, 
ba£
, *
de°
, 
£˘‹
)

1235 i‡(
	`f£ek
(
f
, 
ba£
 + 
£˘‹
 * 
CD_FRAMESIZE_RAW
, 
SEEK_SET
) == -1)

1237  
	`‰ód
(
de°
, 1, 
CD_FRAMESIZE_RAW
, 
f
);

1238 
	}
}

1240 
	$cdªad_sub_mixed
(
FILE
 *
f
, 
ba£
, *
de°
, 
£˘‹
)

1242 
ªt
;

1244 i‡(
	`f£ek
(
f
, 
ba£
 + 
£˘‹
 * (
CD_FRAMESIZE_RAW
 + 
SUB_FRAMESIZE
), 
SEEK_SET
) == -1)

1246 
ªt
 = 
	`‰ód
(
de°
, 1, 
CD_FRAMESIZE_RAW
, 
f
);

1248 i‡(
	`‰ód
(
subbuf„r
, 1, 
SUB_FRAMESIZE
, 
f
) != SUB_FRAMESIZE) {

1249 
	`¥ötf
("ErrorÑeading mixed subchannel info in cdread_sub_mixed()\n");

1251 i‡(
subCh™Raw
Ë
	`DecodeRawSubD©a
();

1254  
ªt
;

1255 
	}
}

1257 
	$uncom¥ess2
(*
out
, *
out_size
, *
ö
, 
ö_size
)

1259 
z_°ªam
 
z
;

1260 
ªt
 = 0;

1262 i‡(
z
.
zÆloc
 =
NULL
) {

1264 
z
.
√xt_ö
 = 
Z_NULL
;

1265 
z
.
avaû_ö
 = 0;

1266 
z
.
zÆloc
 = 
Z_NULL
;

1267 
z
.
z‰ì
 = 
Z_NULL
;

1268 
z
.
›aque
 = 
Z_NULL
;

1269 
ªt
 = 
	`öÊ©eInô2
(&
z
, -15);

1272 
ªt
 = 
	`öÊ©eRe£t
(&
z
);

1273 i‡(
ªt
 !
Z_OK
)

1274  
ªt
;

1276 
z
.
√xt_ö
 = (
Byãf
 *)
ö
;

1277 
z
.
avaû_ö
 = 
ö_size
;

1278 
z
.
√xt_out
 = (
Byãf
 *)
out
;

1279 
z
.
avaû_out
 = *
out_size
;

1281 
ªt
 = 
	`öÊ©e
(&
z
, 
Z_NO_FLUSH
);

1284 *
out_size
 -
z
.
avaû_out
;

1285  
ªt
 == 1 ? 0 :Ñet;

1286 
	}
}

1288 
	$cdªad_com¥es£d
(
FILE
 *
f
, 
ba£
, *
de°
, 
£˘‹
)

1290 
cdbuf„r_size
, 
cdbuf„r_size_ex≥˘
;

1291 
size
;

1292 
is_com¥es£d
;

1293 
off_t
 
°¨t_byã
;

1294 
ªt
, 
block
;

1296 i‡(
ba£
)

1297 
£˘‹
 +
ba£
 / 2352;

1299 
block
 = 
£˘‹
 >> 
com¥_img
->
block_shi·
;

1300 
com¥_img
->
£˘‹_ö_blk
 = 
£˘‹
 & ((1 << com¥_img->
block_shi·
) - 1);

1302 i‡(
block
 =
com¥_img
->
cuºít_block
) {

1304 
föish
;

1307 i‡(
£˘‹
 >
com¥_img
->
ödex_Àn
 * 16) {

1308 
	`¥ötf
("£˘‹ %d i†∑° imgÉnd\n", 
£˘‹
);

1312 
°¨t_byã
 = 
com¥_img
->
ödex_èbÀ
[
block
] & ~
OFF_T_MSB
;

1313 i‡(
	`f£eko
(
cdH™dÀ
, 
°¨t_byã
, 
SEEK_SET
) != 0) {

1314 
	`¥ötf
("seekÉrror for block %dát %llx: ",

1315 
block
, ()
°¨t_byã
);

1316 
	`≥º‹
(
NULL
);

1320 
is_com¥es£d
 = !(
com¥_img
->
ödex_èbÀ
[
block
] & 
OFF_T_MSB
);

1321 
size
 = (
com¥_img
->
ödex_èbÀ
[
block
 + 1] & ~
OFF_T_MSB
Ë- 
°¨t_byã
;

1322 i‡(
size
 > (
com¥_img
->
buff_com¥es£d
)) {

1323 
	`¥ötf
("block %d i†toÿœrge: %u\n", 
block
, 
size
);

1327 i‡(
	`‰ód
(
is_com¥es£d
 ? 
com¥_img
->
buff_com¥es£d
 : com¥_img->
buff_øw
[0],

1328 1, 
size
, 
cdH™dÀ
) != size) {

1329 
	`¥ötf
("ªadÉº‹ f‹ block %dáà%lx: ", 
block
, 
°¨t_byã
);

1330 
	`≥º‹
(
NULL
);

1334 i‡(
is_com¥es£d
) {

1335 
cdbuf„r_size_ex≥˘
 = (
com¥_img
->
buff_øw
[0]Ë<< com¥_img->
block_shi·
;

1336 
cdbuf„r_size
 = 
cdbuf„r_size_ex≥˘
;

1337 
ªt
 = 
	`uncom¥ess2
(
com¥_img
->
buff_øw
[0], &
cdbuf„r_size
, com¥_img->
buff_com¥es£d
, 
size
);

1338 i‡(
ªt
 != 0) {

1339 
	`¥ötf
("uncompress failed with %d for block %d, sector %d\n",

1340 
ªt
, 
block
, 
£˘‹
);

1343 i‡(
cdbuf„r_size
 !
cdbuf„r_size_ex≥˘
)

1344 
	`¥ötf
("cdbuf„r_size: %lu !%lu, se˘‹ %d\n", 
cdbuf„r_size
,

1345 
cdbuf„r_size_ex≥˘
, 
£˘‹
);

1349 
com¥_img
->
cuºít_block
 = 
block
;

1351 
föish
:

1352 i‡(
de°
 !
cdbuf„r
)

1353 
	`mem˝y
(
de°
, 
com¥_img
->
buff_øw
[com¥_img->
£˘‹_ö_blk
],

1354 
CD_FRAMESIZE_RAW
);

1355  
CD_FRAMESIZE_RAW
;

1356 
	}
}

1358 
	$cdªad_2048
(
FILE
 *
f
, 
ba£
, *
de°
, 
£˘‹
)

1360 
ªt
;

1362 i‡(
	`f£ek
(
f
, 
ba£
 + 
£˘‹
 * 2048, 
SEEK_SET
) == -1)

1365 
ªt
 = 
	`‰ód
((*)
de°
 + 12 * 2, 1, 2048, 
f
);

1368 
	`mem£t
(
cdbuf„r
, 0, 12 * 2);

1369 
	`£c2msf
(
£˘‹
 + 2 * 75, (*)&
cdbuf„r
[12]);

1370 
cdbuf„r
[12 + 3] = 1;

1372  
ªt
;

1373 
	}
}

1375 *
	$CDR_gëBuf„r_com¥
() {

1376  
com¥_img
->
buff_øw
[com¥_img->
£˘‹_ö_blk
] + 12;

1377 
	}
}

1379 *
	$CDR_gëBuf„r_n‹m
() {

1380  
cdbuf„r
 + 12;

1381 
	}
}

1383 
	$PrötTøcks
() {

1384 
i
;

1386 
i
 = 1; i <
numåacks
; i++) {

1387 
	`¥ötf
(("Track %.2d (%s) - Start %.2d:%.2d:%.2d, Length %.2d:%.2d:%.2d\n"),

1388 
i
, (
ti
[i].
ty≥
 =
DATA
 ? "DATA" : "AUDIO"),

1389 
ti
[
i
].
°¨t
[0],Åi[i].start[1],Åi[i].start[2],

1390 
ti
[
i
].
Àngth
[0],Åi[i].length[1],Åi[i].length[2]);

1392 
	}
}

1396 
	$CDR_›í
() {

1397 
boﬁón
 
isMode1CDR_
 = 
FALSE
;

1398 
Æt_bö_fûíame
[
MAXPATHLEN
];

1399 c⁄° *
bö_fûíame
;

1401 i‡(
cdH™dÀ
 !
NULL
) {

1405 
cdH™dÀ
 = 
	`f›í
(
	`GëIsoFûe
(), "rb");

1406 i‡(
cdH™dÀ
 =
NULL
) {

1407 
	`¥ötf
(("Could't open '%s' forÑeading: %s\n"),

1408 
	`GëIsoFûe
(), 
	`°ªº‹
(
î∫o
));

1412 
	`¥ötf
("Lﬂded CD Image: %s", 
	`GëIsoFûe
());

1414 
cddaBigEndün
 = 
FALSE
;

1415 
subCh™Mixed
 = 
FALSE
;

1416 
subCh™Raw
 = 
FALSE
;

1417 
¥eg≠Off£t
 = 0;

1418 
cdrIsoMu…idiskCou¡
 = 1;

1419 
mu…ifûe
 = 0;

1421 
CDR_gëBuf„r
 = 
CDR_gëBuf„r_n‹m
;

1422 
cdimg_ªad_func
 = 
cdªad_n‹mÆ
;

1424 i‡(
	`∑r£toc
(
	`GëIsoFûe
()) == 0) {

1425 
	`¥ötf
("[+toc]");

1427 i‡(
	`∑r£ccd
(
	`GëIsoFûe
()) == 0) {

1428 
	`¥ötf
("[+ccd]");

1430 i‡(
	`∑r£mds
(
	`GëIsoFûe
()) == 0) {

1431 
	`¥ötf
("[+mds]");

1433 i‡(
	`∑r£cue
(
	`GëIsoFûe
()) == 0) {

1434 
	`¥ötf
("[+cue]");

1436 i‡(
	`h™dÀpbp
(
	`GëIsoFûe
()) == 0) {

1437 
	`¥ötf
("[pbp]");

1438 
CDR_gëBuf„r
 = 
CDR_gëBuf„r_com¥
;

1439 
cdimg_ªad_func
 = 
cdªad_com¥es£d
;

1441 i‡(
	`h™dÀcbö
(
	`GëIsoFûe
()) == 0) {

1442 
	`¥ötf
("[cbin]");

1443 
CDR_gëBuf„r
 = 
CDR_gëBuf„r_com¥
;

1444 
cdimg_ªad_func
 = 
cdªad_com¥es£d
;

1447 i‡(!
subCh™Mixed
 && 
	`›ísubfûe
(
	`GëIsoFûe
()) == 0) {

1448 
	`¥ötf
("[+sub]");

1450 i‡(
	`›ísbifûe
(
	`GëIsoFûe
()) == 0) {

1451 
	`¥ötf
("[+sbi]");

1453 
	`f£eko
(
cdH™dÀ
, 0, 
SEEK_END
);

1456 
bö_fûíame
 = 
	`GëIsoFûe
();

1457 i‡(
	`·ñlo
(
cdH™dÀ
) < 2352 * 0x10) {

1458 c⁄° *
exts
[] = { ".bin", ".BIN", ".img", ".IMG" };

1459 
FILE
 *
tmpf
 = 
NULL
;

1460 
size_t
 
i
;

1461 *
p
;

1463 
	`°∫˝y
(
Æt_bö_fûíame
, 
bö_fûíame
, (alt_bin_filename));

1464 
Æt_bö_fûíame
[
MAXPATHLEN
 - 1] = '\0';

1465 i‡(
	`°æí
(
Æt_bö_fûíame
) >= 4) {

1466 
p
 = 
Æt_bö_fûíame
 + 
	`°æí
(alt_bin_filename) - 4;

1467 
i
 = 0; i < (
exts
) / (exts[0]); i++) {

1468 
	`°r˝y
(
p
, 
exts
[
i
]);

1469 
tmpf
 = 
	`f›í
(
Æt_bö_fûíame
, "rb");

1470 i‡(
tmpf
 !
NULL
)

1474 i‡(
tmpf
 !
NULL
) {

1475 
bö_fûíame
 = 
Æt_bö_fûíame
;

1476 
	`f˛o£
(
cdH™dÀ
);

1477 
cdH™dÀ
 = 
tmpf
;

1478 
	`f£eko
(
cdH™dÀ
, 0, 
SEEK_END
);

1483 i‡(
	`·ñlo
(
cdH™dÀ
) % 2048 == 0) {

1484 
modeTe°
 = 0;

1485 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_SET
);

1486 i‡(
	`‰ód
(&
modeTe°
, 4, 1, 
cdH™dÀ
) == 1) {

1487 i‡(
	`SWAP32
(
modeTe°
) != 0xffffff00) {

1488 
	`¥ötf
("[2048]");

1489 
isMode1CDR_
 = 
TRUE
;

1493 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_SET
);

1495 
	`¥ötf
(".\n");

1497 i‡(
cdrIsoMu…idiskCou¡
 > 1)

1498 
	`¥ötf
("Lﬂdög mu…i-CD imagê%d o‡%d.\n", 
cdrIsoMu…idiskSñe˘
+1, 
cdrIsoMu…idiskCou¡
);

1500 
	`PrötTøcks
();

1502 i‡(
subCh™Mixed
)

1503 
cdimg_ªad_func
 = 
cdªad_sub_mixed
;

1504 i‡(
isMode1CDR_
)

1505 
cdimg_ªad_func
 = 
cdªad_2048
;

1508 i‡(
numåacks
 > 1 && 
ti
[1].
h™dÀ
 =
NULL
) {

1509 
ti
[1].
h™dÀ
 = 
	`f›í
(
bö_fûíame
, "rb");

1511 
cdda_cur_£˘‹
 = 0;

1512 
cdda_fûe_off£t
 = 0;

1515 
	}
}

1517 
	$CDR_˛o£
() {

1518 
i
;

1520 i‡(
cdH™dÀ
 !
NULL
) {

1521 
	`f˛o£
(
cdH™dÀ
);

1522 
cdH™dÀ
 = 
NULL
;

1524 i‡(
subH™dÀ
 !
NULL
) {

1525 
	`f˛o£
(
subH™dÀ
);

1526 
subH™dÀ
 = 
NULL
;

1528 
	`°›CDDA
();

1529 
cddaH™dÀ
 = 
NULL
;

1531 i‡(
com¥_img
 !
NULL
) {

1532 
	`‰ì
(
com¥_img
->
ödex_èbÀ
);

1533 
	`‰ì
(
com¥_img
);

1534 
com¥_img
 = 
NULL
;

1537 
i
 = 1; i <
numåacks
; i++) {

1538 i‡(
ti
[
i
].
h™dÀ
 !
NULL
) {

1539 
	`f˛o£
(
ti
[
i
].
h™dÀ
);

1540 
ti
[
i
].
h™dÀ
 = 
NULL
;

1543 
numåacks
 = 0;

1544 
ti
[1].
ty≥
 = (
cd_ty≥
)0;

1545 
	`U∆ﬂdSBI
();

1546 
	`mem£t
(
cdbuf„r
, 0, (cdbuffer));

1547 
CDR_gëBuf„r
 = 
CDR_gëBuf„r_n‹m
;

1550 
	}
}

1552 
	$CDR_öô
() {

1553 
numåacks
 = 0;

1554 
	`as£π
(
cdH™dÀ
 =
NULL
);

1555 
	`as£π
(
subH™dÀ
 =
NULL
);

1558 
	}
}

1560 
	$CDR_shutdown
() {

1561 
	`CDR_˛o£
();

1564 
	`FªePPFCache
();

1567 
	}
}

1573 
	$CDR_gëTN
(*
buf„r
) {

1574 
buf„r
[0] = 1;

1576 i‡(
numåacks
 > 0) {

1577 
buf„r
[1] = 
numåacks
;

1580 
buf„r
[1] = 1;

1584 
	}
}

1591 
	$CDR_gëTD
(
åack
, *
buf„r
) {

1592 i‡(
åack
 == 0) {

1593 
£˘
;

1594 
time
[3];

1595 
£˘
 = 
	`msf2£c
(
ti
[
numåacks
].
°¨t
Ë+ msf2£c—i[numåacks].
Àngth
);

1596 
	`£c2msf
(
£˘
, (*)
time
);

1597 
buf„r
[2] = 
time
[0];

1598 
buf„r
[1] = 
time
[1];

1599 
buf„r
[0] = 
time
[2];

1601 i‡(
numåacks
 > 0 && 
åack
 <=Çumtracks) {

1602 
buf„r
[2] = 
ti
[
åack
].
°¨t
[0];

1603 
buf„r
[1] = 
ti
[
åack
].
°¨t
[1];

1604 
buf„r
[0] = 
ti
[
åack
].
°¨t
[2];

1607 
buf„r
[2] = 0;

1608 
buf„r
[1] = 2;

1609 
buf„r
[0] = 0;

1613 
	}
}

1616 
	$DecodeRawSubD©a
() {

1617 
subQD©a
[12];

1618 
i
;

1620 
	`mem£t
(
subQD©a
, 0, (subQData));

1622 
i
 = 0; i < 8 * 12; i++) {

1623 i‡(
subbuf„r
[
i
] & (1 << 6)) {

1624 
subQD©a
[
i
 >> 3] |= (1 << (7 - (i & 7)));

1628 
	`mem˝y
(&
subbuf„r
[12], 
subQD©a
, 12);

1629 
	}
}

1634 
	$CDR_ªadTøck
(*
time
) {

1635 
£˘‹
 = 
	`MSF2SECT
(
	`btoi
(
time
[0]), btoi(time[1]), btoi(time[2]));

1636 
ªt
;

1638 i‡(
cdH™dÀ
 =
NULL
) {

1642 i‡(
¥eg≠Off£t
) {

1643 
subCh™Missög
 = 
FALSE
;

1644 i‡(
£˘‹
 >
¥eg≠Off£t
) {

1645 
£˘‹
 -= 2 * 75;

1646 i‡(
£˘‹
 < 
¥eg≠Off£t
)

1647 
subCh™Missög
 = 
TRUE
;

1651 
ªt
 = 
	`cdimg_ªad_func
(
cdH™dÀ
, 0, 
cdbuf„r
, 
£˘‹
);

1652 i‡(
ªt
 < 0)

1655 i‡(
subH™dÀ
 !
NULL
) {

1656 i‡(
	`f£ek
(
subH™dÀ
, 
£˘‹
 * 
SUB_FRAMESIZE
, 
SEEK_SET
) != -1 &&

1657 
	`‰ód
(
subbuf„r
, 1, 
SUB_FRAMESIZE
, 
subH™dÀ
) == SUB_FRAMESIZE) {

1658 i‡(
subCh™Raw
Ë
	`DecodeRawSubD©a
();

1660 
	`¥ötf
("ErrorÑeading subchannel info in CDR_readTrack()\n");

1665 
	}
}

1670 
	$CDR_∂ay
(*
time
) {

1671 
i
;

1673 i‡(
numåacks
 <= 1)

1677 
cdda_cur_£˘‹
 = 
	`msf2£c
((*)
time
);

1678 
i
 = 
numåacks
; i > 1; i--) {

1679 
cdda_fú°_£˘‹
 = 
	`msf2£c
(
ti
[
i
].
°¨t
);

1680 i‡(
cdda_fú°_£˘‹
 <
cdda_cur_£˘‹
 + 2 * 75)

1683 
cdda_fûe_off£t
 = 
ti
[
i
].
°¨t_off£t
;

1686 ; 
i
 > 1; i--)

1687 i‡(
ti
[
i
].
h™dÀ
 !
NULL
)

1690 
cddaH™dÀ
 = 
ti
[
i
].
h™dÀ
;

1694 
	`°¨tCDDA
();

1697 
	}
}

1700 
	$CDR_°›
() {

1701 
	`°›CDDA
();

1703 
	}
}

1706 * 
	$CDR_gëBuf„rSub
() {

1707 i‡((
subH™dÀ
 !
NULL
 || 
subCh™Mixed
Ë&& !
subCh™Missög
) {

1708  
subbuf„r
;

1711  
NULL
;

1712 
	}
}

1714 
	$CDR_gëSètus
(
CdrSèt
 *
°©
) {

1715 
u32
 
£˘
;

1722 i‡(
cdO≥nCa£Time
 < 0 || cdO≥nCa£Timê> (
s64
)
	`time
(
NULL
))

1723 
°©
->
Sètus
 = 0x10;

1725 
°©
->
Sètus
 = 0;

1728 i‡(
∂ayög
) {

1729 
°©
->
Ty≥
 = 0x02;

1730 
°©
->
Sètus
 |= 0x80;

1734 
°©
->
Ty≥
 = 
ti
[1].
ty≥
;

1738 
£˘
 = 
cddaCurPos
;

1739 
	`£c2msf
(
£˘
, (*)
°©
->
Time
);

1742 
	}
}

1745 
	$CDR_ªadCDDA
(
m
, 
s
, 
f
, *
buf„r
) {

1746 
msf
[3] = {
m
, 
s
, 
f
};

1747 
fûe
, 
åack
, 
åack_°¨t
 = 0;

1748 
ªt
;

1750 
cddaCurPos
 = 
	`msf2£c
((*)
msf
);

1753 
åack
 = 
numåacks
; ;Årack--) {

1754 
åack_°¨t
 = 
	`msf2£c
(
ti
[
åack
].
°¨t
);

1755 i‡(
åack_°¨t
 <
cddaCurPos
)

1757 i‡(
åack
 == 1)

1762 i‡(
ti
[
åack
].
ty≥
 !
CDDA
) {

1763 
	`mem£t
(
buf„r
, 0, 
CD_FRAMESIZE_RAW
);

1767 
fûe
 = 1;

1768 i‡(
mu…ifûe
) {

1770 
fûe
 = 
åack
; file > 1; file--)

1771 i‡(
ti
[
fûe
].
h™dÀ
 !
NULL
)

1775 
ªt
 = 
	`cdimg_ªad_func
(
ti
[
fûe
].
h™dÀ
,Åi[
åack
].
°¨t_off£t
,

1776 
buf„r
, 
cddaCurPos
 - 
åack_°¨t
);

1777 i‡(
ªt
 !
CD_FRAMESIZE_RAW
) {

1778 
	`mem£t
(
buf„r
, 0, 
CD_FRAMESIZE_RAW
);

1782 i‡(
cddaBigEndün
) {

1783 
i
;

1784 
tmp
;

1786 
i
 = 0; i < 
CD_FRAMESIZE_RAW
 / 2; i++) {

1787 
tmp
 = 
buf„r
[
i
 * 2];

1788 
buf„r
[
i
 * 2] = buffer[i * 2 + 1];

1789 
buf„r
[
i
 * 2 + 1] = 
tmp
;

1794 
	}
}

1796 
	$cdrIsoInô
() {

1797 
numåacks
 = 0;

1798 
	}
}

1800 
	$cdrIsoA˘ive
() {

1801  (
cdH™dÀ
 !
NULL
);

1802 
	}
}

	@src/cdriso.h

21 #i‚de‡
CDRISO_H


22 
	#CDRISO_H


	)

24 
cdrIsoInô
();

25 
cdrIsoA˘ive
();

28 (
CALLBACK
 *
cdrIsoMu…idiskCÆlback
)();

29 
cdrIsoMu…idiskCou¡
;

30 
cdrIsoMu…idiskSñe˘
;

	@src/cdrom.cpp

36 
	~"cdrom.h
"

37 
	~"∂ugö_lib.h
"

38 
	~"µf.h
"

39 
	~"psxdma.h
"

40 
	~"psxevíts.h
"

42 #i‡
deföed
(
CDR_LOG
Ë|| deföed(
CDR_LOG_I
Ë|| deföed(
CDR_LOG_IO
)

43 c⁄° *
	gCmdName
[0x100]= {

51 "CdlRe£t", 
NULL
, "CDlReadToc", NULL

55 #i‚de‡
CDR_LOG


56 
	#CDR_LOG
(...)

	)

59 #i‚de‡
CDR_LOG_I


60 
	#CDR_LOG_I
(...)

	)

63 #i‚de‡
CDR_LOG_IO


64 
	#CDR_LOG_IO
(...)

	)

67 
	#SysPrötf
 
¥ötf


	)

69 
cdrSåu˘
 
	gcdr
;

70 *
	gpTøns„r
;

73 
	#CdlSync
 0

	)

74 
	#CdlN›
 1

	)

75 
	#CdlSëloc
 2

	)

76 
	#CdlPœy
 3

	)

77 
	#CdlF‹w¨d
 4

	)

78 
	#CdlBackw¨d
 5

	)

79 
	#CdlRódN
 6

	)

80 
	#CdlSèndby
 7

	)

81 
	#CdlSt›
 8

	)

82 
	#CdlPau£
 9

	)

83 
	#CdlInô
 10

	)

84 
	#CdlMuã
 11

	)

85 
	#CdlDemuã
 12

	)

86 
	#CdlSëfûãr
 13

	)

87 
	#CdlSëmode
 14

	)

88 
	#CdlGëmode
 15

	)

89 
	#CdlGëlocL
 16

	)

90 
	#CdlGëlocP
 17

	)

91 
	#CdlRódT
 18

	)

92 
	#CdlGëTN
 19

	)

93 
	#CdlGëTD
 20

	)

94 
	#CdlSìkL
 21

	)

95 
	#CdlSìkP
 22

	)

96 
	#CdlSë˛ock
 23

	)

97 
	#CdlGë˛ock
 24

	)

98 
	#CdlTe°
 25

	)

99 
	#CdlID
 26

	)

100 
	#CdlRódS
 27

	)

101 
	#CdlRe£t
 28

	)

102 
	#CdlGëQ
 29

	)

103 
	#CdlRódToc
 30

	)

105 
	gTe°04
[] = { 0 };

106 
	gTe°05
[] = { 0 };

107 
	gTe°20
[] = { 0x98, 0x06, 0x10, 0xC3 };

108 
	gTe°22
[] = { 0x66, 0x6F, 0x72, 0x20, 0x45, 0x75, 0x72, 0x6F };

109 
	gTe°23
[] = { 0x43, 0x58, 0x44, 0x32, 0x39 ,0x34, 0x30, 0x51 };

112 
	#NoI¡r
 0

	)

113 
	#D©aRódy
 1

	)

114 
	#Com∂ëe
 2

	)

115 
	#AcknowÀdge
 3

	)

116 
	#D©aEnd
 4

	)

117 
	#DiskEº‹
 5

	)

120 
	#MODE_SPEED
 (1<<7)

121 
	#MODE_STRSND
 (1<<6)

122 
	#MODE_SIZE_2340
 (1<<5)

123 
	#MODE_SIZE_2328
 (1<<4)

124 
	#MODE_SIZE_2048
 (0<<4)

125 
	#MODE_SF
 (1<<3)

126 
	#MODE_REPORT
 (1<<2)

127 
	#MODE_AUTOPAUSE
 (1<<1)

128 
	#MODE_CDDA
 (1<<0)

129 

	)

131 
	#STATUS_PLAY
 (1<<7)

132 
	#STATUS_SEEK
 (1<<6)

133 
	#STATUS_READ
 (1<<5)

134 
	#STATUS_SHELLOPEN
 (1<<4)

135 
	#STATUS_UNKNOWN3
 (1<<3)

136 
	#STATUS_UNKNOWN2
 (1<<2)

137 
	#STATUS_ROTATING
 (1<<1)

138 
	#STATUS_ERROR
 (1<<0)

139 

	)

141 
	#ERROR_NOTREADY
 (1<<7)

142 
	#ERROR_INVALIDCMD
 (1<<6)

143 
	#ERROR_INVALIDARG
 (1<<5)

144 

	)

145 
	#cdRódTime
 (
PSXCLK
 / 75)

	)

147 
	edrive_°©e
 {

148 
	mDRIVESTATE_STANDBY
 = 0,

149 
	mDRIVESTATE_LID_OPEN
,

150 
	mDRIVESTATE_RESCAN_CD
,

151 
	mDRIVESTATE_PREPARE_CD
,

152 
	mDRIVESTATE_STOPPED
,

156 
	e£eked_°©e
 {

157 
	mSEEK_PENDING
 = 0,

158 
	mSEEK_DONE
 = 1,

161 
CdrSèt
 
	g°©
;

163 
	$msf2£c
(c⁄° 
u8
 *
msf
) {

164  ((
msf
[0] * 60 + msf[1]) * 75) + msf[2];

165 
	}
}

168 
	$fsm2£c
(c⁄° 
u8
 *
msf
) {

169  ((
msf
[2] * 60 + msf[1]) * 75) + msf[0];

170 
	}
}

172 
	$£c2msf
(
s
, 
u8
 *
msf
) {

173 
msf
[0] = 
s
 / 75 / 60;

174 
s
 = s - 
msf
[0] * 75 * 60;

175 
msf
[1] = 
s
 / 75;

176 
s
 = s - 
msf
[1] * 75;

177 
msf
[2] = 
s
;

178 
	}
}

181 
	g¸˘ab
[256] = {

213 
u16
 
	$ˇlcCrc
(c⁄° 
u8
 *
d
, c⁄° 
Àn
) {

214 
u16
 
¸c
 = 0;

215 
i
;

217 
i
 = 0; i < 
Àn
; i++) {

218 
¸c
 = 
¸˘ab
[(¸¯>> 8Ë^ 
d
[
i
]] ^ (crc << 8);

221  ~
¸c
;

222 
	}
}

225 
	#CDR_INT
(
eCy˛e
) { \

226 
	`psxEvqueueAdd
(
PSXINT_CDR
, 
eCy˛e
); \

227 }

	)

230 
	#CDREAD_INT
(
eCy˛e
) { \

231 
	`psxEvqueueAdd
(
PSXINT_CDREAD
, 
eCy˛e
); \

232 }

	)

236 
	#CDRLID_INT
(
eCy˛e
) { \

237 
	`psxEvqueueAdd
(
PSXINT_CDRLID
, 
eCy˛e
); \

238 }

	)

241 
	#CDRMISC_INT
(
eCy˛e
) { \

242 
	`psxEvqueueAdd
(
PSXINT_CDRPLAY
, 
eCy˛e
); \

243 }

	)

245 
	#St›Ródög
() { \

246 i‡(
cdr
.
Ródög
) { \

247 
cdr
.
Ródög
 = 0; \

248 
	`psxEvqueueRemove
(
PSXINT_CDREAD
); \

250 
cdr
.
SètP
 &~(
STATUS_READ
|
STATUS_SEEK
);\

251 }

	)

253 
	#St›Cdda
() { \

254 i‡(
cdr
.
Pœy
) { \

255 i‡(!
C⁄fig
.
Cdda
Ë
	`CDR_°›
(); \

256 
cdr
.
SètP
 &~
STATUS_PLAY
; \

257 
cdr
.
Pœy
 = 
FALSE
; \

258 
cdr
.
Fa°F‹w¨d
 = 0; \

259 
cdr
.
Fa°Backw¨d
 = 0; \

261 }

	)

263 
	#SëResu…Size
(
size
) { \

264 
cdr
.
Resu…P
 = 0; \

265 
cdr
.
Resu…C
 = 
size
; \

266 
cdr
.
Resu…Ródy
 = 1; \

267 }

	)

269 
	$£tIrq
()

271 i‡(
cdr
.
Sèt
 & cdr.
Reg2
)

272 
	`psxHu32ªf
(0x1070Ë|
	`SWAP32
((
u32
)0x4);

276 
	`Re£tIoCy˛e
();

277 
	}
}

281 
	$cdrLidSìkI¡îru±
()

283 
cdr
.
DriveSèã
) {

285 
DRIVESTATE_STANDBY
:

286 
cdr
.
SètP
 &~
STATUS_SEEK
;

288 i‡(
	`CDR_gëSètus
(&
°©
) == -1)

291 i‡(
°©
.
Sètus
 & 
STATUS_SHELLOPEN
)

293 
	`St›Cdda
();

294 
cdr
.
DriveSèã
 = 
DRIVESTATE_LID_OPEN
;

295 
	`CDRLID_INT
(0x800);

299 
DRIVESTATE_LID_OPEN
:

300 i‡(
	`CDR_gëSètus
(&
°©
) == -1)

301 
°©
.
Sètus
 &~
STATUS_SHELLOPEN
;

304 i‡(!(
cdr
.
SètP
 & 
STATUS_SHELLOPEN
)) {

305 
	`St›Ródög
();

306 
cdr
.
SètP
 |
STATUS_SHELLOPEN
;

312 
	`CDRLID_INT
(
cdRódTime
 * 30);

315 i‡(
cdr
.
SètP
 & 
STATUS_ROTATING
) {

316 
cdr
.
SètP
 &~
STATUS_ROTATING
;

318 i‡(!(
°©
.
Sètus
 & 
STATUS_SHELLOPEN
)) {

320 
	`CheckCdrom
();

325 
cdr
.
DriveSèã
 = 
DRIVESTATE_RESCAN_CD
;

326 
	`CDRLID_INT
(
cdRódTime
 * 105);

331 
	`CDRLID_INT
(
cdRódTime
 * 3);

334 
DRIVESTATE_RESCAN_CD
:

335 
cdr
.
SètP
 |
STATUS_ROTATING
;

336 
cdr
.
DriveSèã
 = 
DRIVESTATE_PREPARE_CD
;

340 
	`CDRLID_INT
(
cdRódTime
 * 150);

343 
DRIVESTATE_PREPARE_CD
:

344 
cdr
.
SètP
 |
STATUS_SEEK
;

346 
cdr
.
DriveSèã
 = 
DRIVESTATE_STANDBY
;

347 
	`CDRLID_INT
(
cdRódTime
 * 26);

350 
	}
}

352 
	$Föd_CurTøck
(c⁄° 
u8
 *
time
)

354 
cuºít
, 
£˘
;

356 
cuºít
 = 
	`msf2£c
(
time
);

358 
cdr
.
CurTøck
 = 1; cdr.CurTøck < cdr.
Resu…TN
[1]; cdr.CurTrack++) {

359 
	`CDR_gëTD
(
cdr
.
CurTøck
 + 1, cdr.
Resu…TD
);

360 
£˘
 = 
	`fsm2£c
(
cdr
.
Resu…TD
);

361 i‡(
£˘
 - 
cuºít
 >= 150)

364 
	}
}

366 
	$gíî©e_subq
(c⁄° 
u8
 *
time
)

368 
°¨t
[3], 
√xt
[3];

369 
this_s
, 
°¨t_s
, 
√xt_s
, 
¥eg≠
;

370 
ªœtive_s
;

372 
	`CDR_gëTD
(
cdr
.
CurTøck
, 
°¨t
);

373 i‡(
cdr
.
CurTøck
 + 1 <cdr.
Resu…TN
[1]) {

374 
¥eg≠
 = 150;

375 
	`CDR_gëTD
(
cdr
.
CurTøck
 + 1, 
√xt
);

379 
¥eg≠
 = 0;

380 
√xt
[0] = 
cdr
.
SëSe˘‹End
[2];

381 
√xt
[1] = 
cdr
.
SëSe˘‹End
[1];

382 
√xt
[2] = 
cdr
.
SëSe˘‹End
[0];

385 
this_s
 = 
	`msf2£c
(
time
);

386 
°¨t_s
 = 
	`fsm2£c
(
°¨t
);

387 
√xt_s
 = 
	`fsm2£c
(
√xt
);

389 
cdr
.
TøckCh™ged
 = 
FALSE
;

391 i‡(
√xt_s
 - 
this_s
 < 
¥eg≠
) {

392 
cdr
.
TøckCh™ged
 = 
TRUE
;

393 
cdr
.
CurTøck
++;

394 
°¨t_s
 = 
√xt_s
;

397 
cdr
.
subq
.
Index
 = 1;

399 
ªœtive_s
 = 
this_s
 - 
°¨t_s
;

400 i‡(
ªœtive_s
 < 0) {

401 
cdr
.
subq
.
Index
 = 0;

402 
ªœtive_s
 = -relative_s;

404 
	`£c2msf
(
ªœtive_s
, 
cdr
.
subq
.
Rñ©ive
);

406 
cdr
.
subq
.
Tøck
 = 
	`ôob
(cdr.
CurTøck
);

407 
cdr
.
subq
.
Rñ©ive
[0] = 
	`ôob
(cdr.subq.Relative[0]);

408 
cdr
.
subq
.
Rñ©ive
[1] = 
	`ôob
(cdr.subq.Relative[1]);

409 
cdr
.
subq
.
Rñ©ive
[2] = 
	`ôob
(cdr.subq.Relative[2]);

410 
cdr
.
subq
.
Absﬁuã
[0] = 
	`ôob
(
time
[0]);

411 
cdr
.
subq
.
Absﬁuã
[1] = 
	`ôob
(
time
[1]);

412 
cdr
.
subq
.
Absﬁuã
[2] = 
	`ôob
(
time
[2]);

413 
	}
}

415 
	$RódTøck
(c⁄° 
u8
 *
time
)

417 
tmp
[3];

418 
SubQ
 *
subq
;

419 
u16
 
¸c
;

421 
tmp
[0] = 
	`ôob
(
time
[0]);

422 
tmp
[1] = 
	`ôob
(
time
[1]);

423 
tmp
[2] = 
	`ôob
(
time
[2]);

425 i‡(
	`memcmp
(
cdr
.
Pªv
, 
tmp
, 3) == 0)

428 
	`CDR_LOG
("RódTøck *** %02x:%02x:%02x\n", 
tmp
[0],Åmp[1],Åmp[2]);

430 
cdr
.
REº
 = 
	`CDR_ªadTøck
(
tmp
);

431 
	`mem˝y
(
cdr
.
Pªv
, 
tmp
, 3);

433 i‡(
	`CheckSBI
(
time
))

436 
subq
 = (
SubQ
 *)
	`CDR_gëBuf„rSub
();

437 i‡(
subq
 !
NULL
 && 
cdr
.
CurTøck
 == 1) {

438 
¸c
 = 
	`ˇlcCrc
((
u8
 *)
subq
 + 12, 10);

439 i‡(
¸c
 =(((
u16
)
subq
->
CRC
[0] << 8) | subq->CRC[1])) {

440 
cdr
.
subq
.
Tøck
 = subq->
TøckNumbî
;

441 
cdr
.
subq
.
Index
 = subq->
IndexNumbî
;

442 
	`mem˝y
(
cdr
.
subq
.
Rñ©ive
, subq->
TøckRñ©iveAddªss
, 3);

443 
	`mem˝y
(
cdr
.
subq
.
Absﬁuã
, subq->
AbsﬁuãAddªss
, 3);

446 
	`CDR_LOG_I
("subq bad crc @%02x:%02x:%02x\n",

447 
tmp
[0],Åmp[1],Åmp[2]);

451 
	`gíî©e_subq
(
time
);

454 
	`CDR_LOG
(" -> %02x,%02x %02x:%02x:%02x %02x:%02x:%02x\n",

455 
cdr
.
subq
.
Tøck
, cdr.subq.
Index
,

456 
cdr
.
subq
.
Rñ©ive
[0], cdr.subq.Relative[1], cdr.subq.Relative[2],

457 
cdr
.
subq
.
Absﬁuã
[0], cdr.subq.Absolute[1], cdr.subq.Absolute[2]);

458 
	}
}

460 
	$AddIrqQueue
(
úq
, 
ecy˛e
)

462 i‡(
cdr
.
Irq
 != 0) {

463 i‡(
úq
 =
cdr
.
Irq
 || irq + 0x100 == cdr.Irq) {

464 
cdr
.
IrqRïóãd
 = 1;

465 
	`CDR_INT
(
ecy˛e
);

469 
	`CDR_LOG_I
("cdr: ovîridêcmd %02x -> %02x\n", 
cdr
.
Irq
, 
úq
);

472 
cdr
.
Irq
 = 
úq
;

473 
cdr
.
eCy˛e
 = 
ecy˛e
;

475 
	`CDR_INT
(
ecy˛e
);

476 
	}
}

478 
	$cdrPœyI¡îru±_Aut›au£
()

480 i‡((
cdr
.
Mode
 & 
MODE_AUTOPAUSE
Ë&& cdr.
TøckCh™ged
) {

481 
	`CDR_LOG
( "CDDA STOP\n" );

489 
cdr
.
Sèt
 = 
D©aEnd
;

490 
	`£tIrq
();

492 
	`St›Cdda
();

494 i‡(
cdr
.
Mode
 & 
MODE_REPORT
) {

496 
cdr
.
Resu…
[0] = cdr.
SètP
;

497 
cdr
.
Resu…
[1] = cdr.
subq
.
Tøck
;

498 
cdr
.
Resu…
[2] = cdr.
subq
.
Index
;

500 i‡(
cdr
.
subq
.
Absﬁuã
[2] & 0x10) {

501 
cdr
.
Resu…
[3] = cdr.
subq
.
Rñ©ive
[0];

502 
cdr
.
Resu…
[4] = cdr.
subq
.
Rñ©ive
[1] | 0x80;

503 
cdr
.
Resu…
[5] = cdr.
subq
.
Rñ©ive
[2];

506 
cdr
.
Resu…
[3] = cdr.
subq
.
Absﬁuã
[0];

507 
cdr
.
Resu…
[4] = cdr.
subq
.
Absﬁuã
[1];

508 
cdr
.
Resu…
[5] = cdr.
subq
.
Absﬁuã
[2];

511 
cdr
.
Resu…
[6] = 0;

512 
cdr
.
Resu…
[7] = 0;

515 
cdr
.
Resu…Ródy
 = 1;

516 
cdr
.
Sèt
 = 
D©aRódy
;

518 
	`SëResu…Size
(8);

519 
	`£tIrq
();

521 
	}
}

524 
	$cdrPœyI¡îru±
()

526 i‡(
cdr
.
Sìked
 =
SEEK_PENDING
) {

527 i‡(
cdr
.
Sèt
) {

528 
	`CDR_LOG_I
("cdrom: seek stat hack\n");

529 
	`CDRMISC_INT
(0x1000);

532 
	`SëResu…Size
(1);

533 
cdr
.
SètP
 |
STATUS_ROTATING
;

534 
cdr
.
SètP
 &~
STATUS_SEEK
;

535 
cdr
.
Resu…
[0] = cdr.
SètP
;

536 
cdr
.
Sìked
 = 
SEEK_DONE
;

537 i‡(
cdr
.
Irq
 == 0) {

538 
cdr
.
Sèt
 = 
Com∂ëe
;

539 
	`£tIrq
();

542 i‡(
cdr
.
SëlocPídög
) {

543 
	`mem˝y
(
cdr
.
SëSe˘‹Pœy
, cdr.
SëSe˘‹
, 4);

544 
cdr
.
SëlocPídög
 = 0;

546 
	`Föd_CurTøck
(
cdr
.
SëSe˘‹Pœy
);

547 
	`RódTøck
(
cdr
.
SëSe˘‹Pœy
);

548 
cdr
.
TøckCh™ged
 = 
FALSE
;

551 i‡(!
cdr
.
Pœy
) ;

553 
	`CDR_LOG
( "CDDA - %d:%d:%d\n",

554 
cdr
.
SëSe˘‹Pœy
[0], cdr.SetSectorPlay[1], cdr.SetSectorPlay[2] );

556 i‡(
	`memcmp
(
cdr
.
SëSe˘‹Pœy
, cdr.
SëSe˘‹End
, 3) == 0) {

557 
	`St›Cdda
();

558 
cdr
.
TøckCh™ged
 = 
TRUE
;

561 i‡(!
cdr
.
Irq
 && !cdr.
Sèt
 && (cdr.
Mode
 & (
MODE_AUTOPAUSE
|
MODE_REPORT
)))

562 
	`cdrPœyI¡îru±_Aut›au£
();

564 i‡(!
cdr
.
Pœy
) ;

566 
cdr
.
SëSe˘‹Pœy
[2]++;

567 i‡(
cdr
.
SëSe˘‹Pœy
[2] == 75) {

568 
cdr
.
SëSe˘‹Pœy
[2] = 0;

569 
cdr
.
SëSe˘‹Pœy
[1]++;

570 i‡(
cdr
.
SëSe˘‹Pœy
[1] == 60) {

571 
cdr
.
SëSe˘‹Pœy
[1] = 0;

572 
cdr
.
SëSe˘‹Pœy
[0]++;

576 
	`CDRMISC_INT
(
cdRódTime
);

579 
	`gíî©e_subq
(
cdr
.
SëSe˘‹Pœy
);

580 
	}
}

582 
	$cdrI¡îru±
()

584 
u16
 
Irq
 = 
cdr
.Irq;

585 
no_busy_îr‹
 = 0;

586 
°¨t_rŸ©ög
 = 0;

587 
îr‹
 = 0;

588 
dñay
;

591 i‡(
cdr
.
Sèt
) {

592 
	`CDR_LOG_I
("cdrom: sèàhack: %02x %x\n", 
cdr
.
Irq
, cdr.
Sèt
);

593 
	`CDR_INT
(0x1000);

597 
cdr
.
Cål
 &= ~0x80;

600 
	`SëResu…Size
(1);

601 
cdr
.
Resu…
[0] = cdr.
SètP
;

602 
cdr
.
Sèt
 = 
AcknowÀdge
;

604 i‡(
cdr
.
IrqRïóãd
) {

605 
cdr
.
IrqRïóãd
 = 0;

606 i‡(
cdr
.
eCy˛e
 > 
psxRegs
.
cy˛e
) {

607 
	`CDR_INT
(
cdr
.
eCy˛e
);

608 
föish
;

612 
cdr
.
Irq
 = 0;

614 
Irq
) {

615 
CdlSync
:

619 
CdlN›
:

620 i‡(
cdr
.
DriveSèã
 !
DRIVESTATE_LID_OPEN
)

621 
cdr
.
SètP
 &~
STATUS_SHELLOPEN
;

622 
no_busy_îr‹
 = 1;

625 
CdlSëloc
:

628 
do_CdlPœy
:

629 
CdlPœy
:

630 
	`St›Cdda
();

631 i‡(
cdr
.
Sìked
 =
SEEK_PENDING
) {

633 
cdr
.
Sìked
 = 
SEEK_DONE
;

635 i‡(
cdr
.
SëlocPídög
) {

636 
	`mem˝y
(
cdr
.
SëSe˘‹Pœy
, cdr.
SëSe˘‹
, 4);

637 
cdr
.
SëlocPídög
 = 0;

643 i‡(
cdr
.
P¨amC
 =0 || cdr.
P¨am
[0] == 0) {

644 
	`CDR_LOG
("PLAY Resume @ %d:%d:%d\n",

645 
cdr
.
SëSe˘‹Pœy
[0], cdr.SetSectorPlay[1], cdr.SetSectorPlay[2]);

649 
åack
 = 
	`btoi
–
cdr
.
P¨am
[0] );

651 i‡(
åack
 <
cdr
.
Resu…TN
[1])

652 
cdr
.
CurTøck
 = 
åack
;

654 
	`CDR_LOG
("PLAYÅøck %d\n", 
cdr
.
CurTøck
);

656 i‡(
	`CDR_gëTD
((
u8
)
cdr
.
CurTøck
, cdr.
Resu…TD
) != -1) {

657 
cdr
.
SëSe˘‹Pœy
[0] = cdr.
Resu…TD
[2];

658 
cdr
.
SëSe˘‹Pœy
[1] = cdr.
Resu…TD
[1];

659 
cdr
.
SëSe˘‹Pœy
[2] = cdr.
Resu…TD
[0];

673 
	`Föd_CurTøck
(
cdr
.
SëSe˘‹Pœy
);

674 
	`RódTøck
(
cdr
.
SëSe˘‹Pœy
);

675 
cdr
.
TøckCh™ged
 = 
FALSE
;

677 i‡(!
C⁄fig
.
Cdda
)

678 
	`CDR_∂ay
(
cdr
.
SëSe˘‹Pœy
);

681 
cdr
.
SètP
 &~
STATUS_SEEK
;

682 
cdr
.
Resu…
[0] = cdr.
SètP
;

684 
cdr
.
SètP
 |
STATUS_PLAY
;

687 
cdr
.
Pœy
 = 
TRUE
;

689 
	`CDRMISC_INT
–
cdRódTime
 );

690 
°¨t_rŸ©ög
 = 1;

693 
CdlF‹w¨d
:

695 
cdr
.
Sèt
 = 
Com∂ëe
;

698 if–
cdr
.
Fa°F‹w¨d
 == 0 ) cdr.FastForward = 2;

699 
cdr
.
Fa°F‹w¨d
++;

701 
cdr
.
Fa°Backw¨d
 = 0;

704 
CdlBackw¨d
:

705 
cdr
.
Sèt
 = 
Com∂ëe
;

708 if–
cdr
.
Fa°Backw¨d
 == 0 ) cdr.FastBackward = 2;

709 
cdr
.
Fa°Backw¨d
++;

711 
cdr
.
Fa°F‹w¨d
 = 0;

714 
CdlSèndby
:

715 i‡(
cdr
.
DriveSèã
 !
DRIVESTATE_STOPPED
) {

716 
îr‹
 = 
ERROR_INVALIDARG
;

717 
£t_îr‹
;

719 
	`AddIrqQueue
(
CdlSèndby
 + 0x100, 
cdRódTime
 * 125 / 2);

720 
°¨t_rŸ©ög
 = 1;

723 
CdlSèndby
 + 0x100:

724 
cdr
.
Sèt
 = 
Com∂ëe
;

727 
CdlSt›
:

728 i‡(
cdr
.
Pœy
) {

730 
	`CDR_gëTD
((
u8
)(
cdr
.
CurTøck
), cdr.
Resu…TD
);

732 
cdr
.
SëSe˘‹Pœy
[0] = cdr.
Resu…TD
[2];

733 
cdr
.
SëSe˘‹Pœy
[1] = cdr.
Resu…TD
[1];

734 
cdr
.
SëSe˘‹Pœy
[2] = cdr.
Resu…TD
[0];

737 
	`St›Cdda
();

738 
	`St›Ródög
();

740 
dñay
 = 0x800;

741 i‡(
cdr
.
DriveSèã
 =
DRIVESTATE_STANDBY
)

742 
dñay
 = 
cdRódTime
 * 30 / 2;

744 
cdr
.
DriveSèã
 = 
DRIVESTATE_STOPPED
;

745 
	`AddIrqQueue
(
CdlSt›
 + 0x100, 
dñay
);

748 
CdlSt›
 + 0x100:

749 
cdr
.
SètP
 &~
STATUS_ROTATING
;

750 
cdr
.
Resu…
[0] = cdr.
SètP
;

751 
cdr
.
Sèt
 = 
Com∂ëe
;

754 
CdlPau£
:

765 
	`AddIrqQueue
(
CdlPau£
 + 0x100, 
cdRódTime
 * 3);

766 
cdr
.
Cål
 |= 0x80;

769 
CdlPau£
 + 0x100:

770 
cdr
.
SètP
 &~
STATUS_READ
;

771 
cdr
.
Resu…
[0] = cdr.
SètP
;

772 
cdr
.
Sèt
 = 
Com∂ëe
;

775 
CdlInô
:

776 
	`AddIrqQueue
(
CdlInô
 + 0x100, 
cdRódTime
 * 6);

777 
no_busy_îr‹
 = 1;

778 
°¨t_rŸ©ög
 = 1;

781 
CdlInô
 + 0x100:

782 
cdr
.
Sèt
 = 
Com∂ëe
;

785 
CdlMuã
:

786 
cdr
.
Muãd
 = 
TRUE
;

789 
CdlDemuã
:

790 
cdr
.
Muãd
 = 
FALSE
;

793 
CdlSëfûãr
:

794 
cdr
.
Fûe
 = cdr.
P¨am
[0];

795 
cdr
.
Ch™√l
 = cdr.
P¨am
[1];

798 
CdlSëmode
:

799 
no_busy_îr‹
 = 1;

802 
CdlGëmode
:

803 
	`SëResu…Size
(6);

804 
cdr
.
Resu…
[1] = cdr.
Mode
;

805 
cdr
.
Resu…
[2] = cdr.
Fûe
;

806 
cdr
.
Resu…
[3] = cdr.
Ch™√l
;

807 
cdr
.
Resu…
[4] = 0;

808 
cdr
.
Resu…
[5] = 0;

809 
no_busy_îr‹
 = 1;

812 
CdlGëlocL
:

813 
	`SëResu…Size
(8);

814 
	`mem˝y
(
cdr
.
Resu…
, cdr.
Tøns„r
, 8);

817 
CdlGëlocP
:

818 
	`SëResu…Size
(8);

819 
	`mem˝y
(&
cdr
.
Resu…
, &cdr.
subq
, 8);

821 i‡(!
cdr
.
Pœy
 && !cdr.
Ródög
)

822 
cdr
.
Resu…
[1] = 0;

825 
CdlRódT
:

827 
	`AddIrqQueue
(
CdlRódT
 + 0x100, 
cdRódTime
 * 290 / 4);

828 
°¨t_rŸ©ög
 = 1;

831 
CdlRódT
 + 0x100:

832 
cdr
.
Sèt
 = 
Com∂ëe
;

835 
CdlGëTN
:

836 
	`SëResu…Size
(3);

837 i‡(
	`CDR_gëTN
(
cdr
.
Resu…TN
) == -1) {

838 
cdr
.
Sèt
 = 
DiskEº‹
;

839 
cdr
.
Resu…
[0] |
STATUS_ERROR
;

841 
cdr
.
Sèt
 = 
AcknowÀdge
;

842 
cdr
.
Resu…
[1] = 
	`ôob
(cdr.
Resu…TN
[0]);

843 
cdr
.
Resu…
[2] = 
	`ôob
(cdr.
Resu…TN
[1]);

847 
CdlGëTD
:

848 
cdr
.
Tøck
 = 
	`btoi
(cdr.
P¨am
[0]);

849 
	`SëResu…Size
(4);

850 i‡(
	`CDR_gëTD
(
cdr
.
Tøck
, cdr.
Resu…TD
) == -1) {

851 
cdr
.
Sèt
 = 
DiskEº‹
;

852 
cdr
.
Resu…
[0] |
STATUS_ERROR
;

854 
cdr
.
Sèt
 = 
AcknowÀdge
;

855 
cdr
.
Resu…
[0] = cdr.
SètP
;

856 
cdr
.
Resu…
[1] = 
	`ôob
(cdr.
Resu…TD
[2]);

857 
cdr
.
Resu…
[2] = 
	`ôob
(cdr.
Resu…TD
[1]);

858 
cdr
.
Resu…
[3] = 
	`ôob
(cdr.
Resu…TD
[0]);

862 
CdlSìkL
:

863 
CdlSìkP
:

864 
	`St›Cdda
();

865 
	`St›Ródög
();

866 
cdr
.
SètP
 |
STATUS_SEEK
;

881 
	`CDRMISC_INT
(
cdr
.
Sìked
 =
SEEK_DONE
 ? 0x800 : 
cdRódTime
 * 4);

882 
cdr
.
Sìked
 = 
SEEK_PENDING
;

883 
°¨t_rŸ©ög
 = 1;

886 
CdlTe°
:

887 
cdr
.
P¨am
[0]) {

889 
	`SëResu…Size
(4);

890 
	`mem˝y
(
cdr
.
Resu…
, 
Te°20
, 4);

893 
	`SëResu…Size
(8);

894 
	`mem˝y
(
cdr
.
Resu…
, 
Te°22
, 4);

897 
	`SëResu…Size
(8);

898 
	`mem˝y
(
cdr
.
Resu…
, 
Te°23
, 4);

901 
no_busy_îr‹
 = 1;

904 
CdlID
:

905 
	`AddIrqQueue
(
CdlID
 + 0x100, 20480);

908 
CdlID
 + 0x100:

909 
	`SëResu…Size
(8);

910 
cdr
.
Resu…
[0] = cdr.
SètP
;

911 
cdr
.
Resu…
[1] = 0;

912 
cdr
.
Resu…
[2] = 0;

913 
cdr
.
Resu…
[3] = 0;

916 i‡(
	`CDR_gëSètus
(&
°©
Ë=-1 || sèt.
Ty≥
 == 0 || stat.Type == 0xff) {

917 
cdr
.
Resu…
[1] = 0xc0;

920 i‡(
°©
.
Ty≥
 == 2)

921 
cdr
.
Resu…
[1] |= 0x10;

922 i‡(
CdromId
[0] == '\0')

923 
cdr
.
Resu…
[1] |= 0x80;

925 
cdr
.
Resu…
[0] |= (cdr.Result[1] >> 4) & 0x08;

927 
	`°∫˝y
((*)&
cdr
.
Resu…
[4], "PCSX", 4);

928 
cdr
.
Sèt
 = 
Com∂ëe
;

931 
CdlRe£t
:

933 
cdr
.
SètP
 |
STATUS_SHELLOPEN
;

934 
cdr
.
DriveSèã
 = 
DRIVESTATE_RESCAN_CD
;

935 
	`CDRLID_INT
(20480);

936 
no_busy_îr‹
 = 1;

937 
°¨t_rŸ©ög
 = 1;

940 
CdlGëQ
:

942 
	`CDR_LOG_I
("got CdlGetQ\n");

945 
CdlRódToc
:

946 
	`AddIrqQueue
(
CdlRódToc
 + 0x100, 
cdRódTime
 * 180 / 4);

947 
no_busy_îr‹
 = 1;

948 
°¨t_rŸ©ög
 = 1;

951 
CdlRódToc
 + 0x100:

952 
cdr
.
Sèt
 = 
Com∂ëe
;

953 
no_busy_îr‹
 = 1;

956 
CdlRódN
:

957 
CdlRódS
:

958 i‡(
cdr
.
SëlocPídög
) {

959 
	`mem˝y
(
cdr
.
SëSe˘‹Pœy
, cdr.
SëSe˘‹
, 4);

960 
cdr
.
SëlocPídög
 = 0;

962 
	`Föd_CurTøck
(
cdr
.
SëSe˘‹Pœy
);

964 i‡((
cdr
.
Mode
 & 
MODE_CDDA
Ë&& cdr.
CurTøck
 > 1)

966 
do_CdlPœy
;

968 
cdr
.
Ródög
 = 1;

969 
cdr
.
Fú°Se˘‹
 = 1;

973 
	`RódTøck
(
cdr
.
SëSe˘‹Pœy
);

979 
u8
 *
buf
 = 
	`CDR_gëBuf„r
();

980 i‡(
buf
 !
NULL
)

981 
	`mem˝y
(
cdr
.
Tøns„r
, 
buf
, 8);

990 i‡(
cdr
.
Sìked
 !
SEEK_DONE
) {

991 
cdr
.
SètP
 |
STATUS_SEEK
;

992 
cdr
.
SètP
 &~
STATUS_READ
;

998 
	`CDREAD_INT
((
cdr
.
Mode
 & 0x80Ë? (
cdRódTime
 / 2) : cdReadTime * 1);

1000 
cdr
.
SètP
 |
STATUS_READ
;

1001 
cdr
.
SètP
 &~
STATUS_SEEK
;

1003 
	`CDREAD_INT
((
cdr
.
Mode
 & 0x80Ë? (
cdRódTime
 / 2) : cdReadTime * 1);

1006 
cdr
.
Resu…
[0] = cdr.
SètP
;

1007 
°¨t_rŸ©ög
 = 1;

1011 
	`CDR_LOG_I
("InvÆid comm™d: %02x\n", 
Irq
);

1012 
îr‹
 = 
ERROR_INVALIDCMD
;

1015 
£t_îr‹
:

1016 
	`SëResu…Size
(2);

1017 
cdr
.
Resu…
[0] = cdr.
SètP
 | 
STATUS_ERROR
;

1018 
cdr
.
Resu…
[1] = 
îr‹
;

1019 
cdr
.
Sèt
 = 
DiskEº‹
;

1023 i‡(
cdr
.
DriveSèã
 =
DRIVESTATE_STOPPED
 && 
°¨t_rŸ©ög
) {

1024 
cdr
.
DriveSèã
 = 
DRIVESTATE_STANDBY
;

1025 
cdr
.
SètP
 |
STATUS_ROTATING
;

1028 i‡(!
no_busy_îr‹
) {

1029 
cdr
.
DriveSèã
) {

1030 
DRIVESTATE_LID_OPEN
:

1031 
DRIVESTATE_RESCAN_CD
:

1032 
DRIVESTATE_PREPARE_CD
:

1033 
	`SëResu…Size
(2);

1034 
cdr
.
Resu…
[0] = cdr.
SètP
 | 
STATUS_ERROR
;

1035 
cdr
.
Resu…
[1] = 
ERROR_NOTREADY
;

1036 
cdr
.
Sèt
 = 
DiskEº‹
;

1041 
föish
:

1042 
	`£tIrq
();

1043 
cdr
.
P¨amC
 = 0;

1045 #ifde‡
CDR_LOG_CMD_IRQ


1047 
i
;

1048 
	`SysPrötf
("CDR IRQ %d cmd %02x stat %02x: ",

1049 !!(
cdr
.
Sèt
 & cdr.
Reg2
), 
Irq
, cdr.Stat);

1050 
i
 = 0; i < 
cdr
.
Resu…C
; i++)

1051 
	`SysPrötf
("%02x ", 
cdr
.
Resu…
[
i
]);

1052 
	`SysPrötf
("\n");

1055 
	}
}

1057 #ifde‡
HAVE_ARMV7


1058 
	#sßt32_to_16
(
v
) \

1059 
	`asm
("sßà%0,#16,%1" : "Ù" (
v
Ë: "r" (v))

	)

1061 
	#sßt32_to_16
(
v
) do { \

1062 i‡(
v
 < -32768) v = -32768; \

1063 i‡(
v
 > 32767) v = 32767; \

1064 } 0)

	)

1067 
	$cdrAâíu©e
(
s16
 *
buf
, 
ßm∂es
, 
°îeo
)

1069 
i
, 
l
, 
r
;

1070 
Œ
 = 
cdr
.
Aâíu©‹Le·ToLe·
;

1071 
Ã
 = 
cdr
.
Aâíu©‹Le·ToRight
;

1072 
æ
 = 
cdr
.
Aâíu©‹RightToLe·
;

1073 
º
 = 
cdr
.
Aâíu©‹RightToRight
;

1075 i‡(
Ã
 =0 && 
æ
 =0 && 0x78 <
Œ
 &&Ü»<0x88 && 0x78 <
º
 &&Ñr <= 0x88)

1078 i‡(!
°îeo
 && 
Œ
 =0x40 && 
Ã
 =0x40 && 
æ
 =0x40 && 
º
 == 0x40)

1081 i‡(
°îeo
) {

1082 
i
 = 0; i < 
ßm∂es
; i++) {

1083 
l
 = 
buf
[
i
 * 2];

1084 
r
 = 
buf
[
i
 * 2 + 1];

1085 
l
 = (»* 
Œ
 + 
r
 * 
æ
) >> 7;

1086 
r
 = (∏* 
º
 + 
l
 * 
Ã
) >> 7;

1087 
	`sßt32_to_16
(
l
);

1088 
	`sßt32_to_16
(
r
);

1089 
buf
[
i
 * 2] = 
l
;

1090 
buf
[
i
 * 2 + 1] = 
r
;

1094 
i
 = 0; i < 
ßm∂es
; i++) {

1095 
l
 = 
buf
[
i
];

1096 
l
 =Ü * (
Œ
 + 
æ
) >> 7;

1098 
	`sßt32_to_16
(
l
);

1100 
buf
[
i
] = 
l
;

1103 
	}
}

1105 
	$cdrRódI¡îru±
() {

1106 
u8
 *
buf
;

1108 i‡(!
cdr
.
Ródög
)

1111 i‡(
cdr
.
Irq
 || cdr.
Sèt
) {

1112 
	`CDR_LOG_I
("cdrom:Ñód sèàhack %02x %x\n", 
cdr
.
Irq
, cdr.
Sèt
);

1113 
	`CDREAD_INT
(0x1000);

1117 
cdªad_úq_cy˛es
 = (
cdr
.
Mode
 & 
MODE_SPEED
Ë? (
cdRódTime
 / 2) : cdReadTime;

1121 i‡((!
cdr
.
RódRescheduÀd
Ë&& (
	`psxHu32ªf
(0x1070Ë&ÖsxHu32ªf(0x1074Ë& 
	`SWAP32
((
u32
)0x4))) {

1124 
	`CDREAD_INT
(
cdªad_úq_cy˛es
 / 2);

1125 
cdr
.
RódRescheduÀd
 = 1;

1126 
	`CDR_LOG_I
("cdrom: CPU BUSY,Ñescheduled CDREAD_INT\n");

1130 
cdr
.
OCUP
 = 1;

1131 
	`SëResu…Size
(1);

1132 
cdr
.
SètP
 |
STATUS_READ
|
STATUS_ROTATING
;

1133 
cdr
.
SètP
 &~
STATUS_SEEK
;

1134 
cdr
.
Resu…
[0] = cdr.
SètP
;

1135 
cdr
.
Sìked
 = 
SEEK_DONE
;

1137 
	`RódTøck
(
cdr
.
SëSe˘‹Pœy
);

1139 
buf
 = 
	`CDR_gëBuf„r
();

1140 i‡(
buf
 =
NULL
)

1141 
cdr
.
REº
 = -1;

1143 i‡(
cdr
.
REº
 == -1) {

1144 
	`CDR_LOG_I
("cdrReadInterrupt() Log:Érr\n");

1145 
	`mem£t
(
cdr
.
Tøns„r
, 0, 
DATA_SIZE
);

1146 
cdr
.
Sèt
 = 
DiskEº‹
;

1147 
cdr
.
Resu…
[0] |
STATUS_ERROR
;

1148 
	`CDREAD_INT
((
cdr
.
Mode
 & 0x80Ë? (
cdRódTime
 / 2) : cdReadTime);

1152 
	`mem˝y
(
cdr
.
Tøns„r
, 
buf
, 
DATA_SIZE
);

1155 
	`CheckPPFCache
(
cdr
.
Tøns„r
, cdr.
Pªv
[0], cdr.Prev[1], cdr.Prev[2]);

1157 
	`CDR_LOG
("cdrRódI¡îru±(ËLog: cdr.Tøns„∏%x:%x:%x\n", 
cdr
.
Tøns„r
[0], cdr.Transfer[1], cdr.Transfer[2]);

1159 i‡((!
cdr
.
Muãd
Ë&& (cdr.
Mode
 & 
MODE_STRSND
Ë&& (!
C⁄fig
.
Xa
Ë&& (cdr.
Fú°Se˘‹
 != -1)) {

1161 if–
cdr
.
Fú°Se˘‹
 =1 && (cdr.
Mode
 & 
MODE_SF
)==0 ) {

1162 
cdr
.
Fûe
 = cdr.
Tøns„r
[4 + 0];

1163 
cdr
.
Ch™√l
 = cdr.
Tøns„r
[4 + 1];

1166 
was_fú°_£˘‹
 = (
cdr
.
Fú°Se˘‹
 == 1);

1167 
boﬁ
 
∂ayed_ADPCM
 = 
Ál£
;

1169 if((
cdr
.
Tøns„r
[4 + 2] & 0x4) &&

1170 (
cdr
.
Tøns„r
[4 + 1] =cdr.
Ch™√l
) &&

1171 (
cdr
.
Tøns„r
[4 + 0] =cdr.
Fûe
)) {

1172 
ªt
 = 
	`xa_decode_£˘‹
(&
cdr
.
Xa
, cdr.
Tøns„r
+4, cdr.
Fú°Se˘‹
);

1173 i‡(!
ªt
) {

1174 
	`cdrAâíu©e
(
cdr
.
Xa
.
pcm
, cdr.Xa.
nßm∂es
, cdr.Xa.
°îeo
);

1175 i‡((
cdr
.
Xa
.
nßm∂es
 !0Ë&& (cdr.Xa.
‰eq
 != 0)) {

1176 
∂ayed_ADPCM
 = 
åue
;

1177 
	`SPU_∂ayADPCMch™√l
(&
cdr
.
Xa
);

1180 
cdr
.
Fú°Se˘‹
 = 0;

1182 
cdr
.
Fú°Se˘‹
 = -1;

1185 #i‚de‡
SPU_NULL


1201 
ˇŒs_sö˚_∂ayög_ADPCM
 = 0;

1202 i‡(!
∂ayed_ADPCM
)

1203 
ˇŒs_sö˚_∂ayög_ADPCM
++;

1205 
ˇŒs_sö˚_∂ayög_ADPCM
 = 0;

1207 i‡–(
C⁄fig
.
F‹˚dXAUpd©es
 !
FORCED_XA_UPDATES_OFF
) &&

1208 (!
was_fú°_£˘‹
Ë&& (
cdr
.
Fú°Se˘‹
 != -1) &&

1209 (
ˇŒs_sö˚_∂ayög_ADPCM
 < 32) &&

1210 (
	`SPU_gëADPCMBuf„rRoom
(Ë>
CD_FRAMESIZE_RAW
*4) )

1216 i‡(
C⁄fig
.
F‹˚dXAUpd©es
 =
FORCED_XA_UPDATES_AUTO
) {

1217 i‡(
	`∂_‰ameskù_advi˚
()Ë
cdªad_úq_cy˛es
 /= 2;

1221 
cdªad_úq_cy˛es
 >>(
C⁄fig
.
F‹˚dXAUpd©es
 - 1);

1227 
cdr
.
SëSe˘‹Pœy
[2]++;

1228 i‡(
cdr
.
SëSe˘‹Pœy
[2] == 75) {

1229 
cdr
.
SëSe˘‹Pœy
[2] = 0;

1230 
cdr
.
SëSe˘‹Pœy
[1]++;

1231 i‡(
cdr
.
SëSe˘‹Pœy
[1] == 60) {

1232 
cdr
.
SëSe˘‹Pœy
[1] = 0;

1233 
cdr
.
SëSe˘‹Pœy
[0]++;

1237 
cdr
.
Róded
 = 0;

1238 
cdr
.
RódRescheduÀd
 = 0;

1240 
	`CDREAD_INT
(
cdªad_úq_cy˛es
);

1248 i‡(!(
cdr
.
Mode
 & 
MODE_STRSND
Ë|| !(cdr.
Tøns„r
[4+2] & 0x4)) {

1249 
cdr
.
Sèt
 = 
D©aRódy
;

1250 
	`£tIrq
();

1254 
	`RódTøck
(
cdr
.
SëSe˘‹Pœy
);

1255 
	}
}

1269 
	$cdrRód0
() {

1270 i‡(
cdr
.
Resu…Ródy
)

1271 
cdr
.
Cål
 |= 0x20;

1273 
cdr
.
Cål
 &= ~0x20;

1275 i‡(
cdr
.
OCUP
)

1276 
cdr
.
Cål
 |= 0x40;

1279 
cdr
.
Cål
 |= 0x18;

1281 #ifde‡
CDR_LOG


1282 
	`CDR_LOG
("cdrRód0(ËLog: CD0 Ród: %x\n", 
cdr
.
Cål
);

1285  
	`psxHu8
(0x1800Ë
cdr
.
Cål
;

1286 
	}
}

1293 
	$cdrWrôe0
(
π
) {

1294 
	`CDR_LOG_IO
("cd∏w0: %02x\n", 
π
);

1296 
cdr
.
Cål
 = (
π
 & 3) | (cdr.Ctrl & ~3);

1297 
	}
}

1299 
	$cdrRód1
() {

1300 i‡((
cdr
.
Resu…P
 & 0xfË< cdr.
Resu…C
)

1301 
	`psxHu8
(0x1801Ë
cdr
.
Resu…
[cdr.
Resu…P
 & 0xf];

1303 
	`psxHu8
(0x1801) = 0;

1304 
cdr
.
Resu…P
++;

1305 i‡(
cdr
.
Resu…P
 =cdr.
Resu…C
)

1306 
cdr
.
Resu…Ródy
 = 0;

1308 
	`CDR_LOG_IO
("cd∏r1: %02x\n", 
	`psxHu8
(0x1801));

1310  
	`psxHu8
(0x1801);

1311 
	}
}

1313 
	$cdrWrôe1
(
π
) {

1314 
u8
 
£t_loc
[3];

1315 
i
;

1317 
	`CDR_LOG_IO
("cd∏w1: %02x\n", 
π
);

1319 
cdr
.
Cål
 & 3) {

1323 
cdr
.
Aâíu©‹RightToRightT
 = 
π
;

1329 
cdr
.
Cmd
 = 
π
;

1330 
cdr
.
OCUP
 = 0;

1332 #ifde‡
CDR_LOG_CMD_IRQ


1333 
	`SysPrötf
("CD1 wrôe: %x (%s)", 
π
, 
CmdName
[rt]);

1334 i‡(
cdr
.
P¨amC
) {

1335 
	`SysPrötf
(" P¨am[%d] = {", 
cdr
.
P¨amC
);

1336 
i
 = 0; i < 
cdr
.
P¨amC
; i++)

1337 
	`SysPrötf
(" %x,", 
cdr
.
P¨am
[
i
]);

1338 
	`SysPrötf
("}\n");

1340 
	`SysPrötf
("\n");

1344 
cdr
.
Resu…Ródy
 = 0;

1345 
cdr
.
Cål
 |= 0x80;

1347 
	`AddIrqQueue
(
cdr
.
Cmd
, 0x800);

1349 
cdr
.
Cmd
) {

1350 
CdlSëloc
:

1351 
i
 = 0; i < 3; i++)

1352 
£t_loc
[
i
] = 
	`btoi
(
cdr
.
P¨am
[i]);

1354 
i
 = 
	`msf2£c
(
cdr
.
SëSe˘‹Pœy
);

1355 
i
 = 
	`abs
(ò- 
	`msf2£c
(
£t_loc
));

1356 i‡(
i
 > 16)

1357 
cdr
.
Sìked
 = 
SEEK_PENDING
;

1359 
	`mem˝y
(
cdr
.
SëSe˘‹
, 
£t_loc
, 3);

1360 
cdr
.
SëSe˘‹
[3] = 0;

1361 
cdr
.
SëlocPídög
 = 1;

1364 
CdlRódN
:

1365 
CdlRódS
:

1366 
CdlPau£
:

1367 
	`St›Cdda
();

1368 
	`St›Ródög
();

1371 
CdlRe£t
:

1372 
CdlInô
:

1373 
cdr
.
Sìked
 = 
SEEK_DONE
;

1374 
	`St›Cdda
();

1375 
	`St›Ródög
();

1378 
CdlSëmode
:

1379 
	`CDR_LOG
("cdrWrôe1(ËLog: Sëmodê%x\n", 
cdr
.
P¨am
[0]);

1381 
cdr
.
Mode
 = cdr.
P¨am
[0];

1385 if–
cdr
.
Pœy
 && (cdr.
Mode
 & 
MODE_CDDA
) == 0 )

1386 
	`St›Cdda
();

1389 
	}
}

1391 
	$cdrRód2
() {

1392 
ªt
;

1394 i‡(
cdr
.
Róded
 == 0) {

1395 
ªt
 = 0;

1397 
ªt
 = *
pTøns„r
++;

1400 #ifde‡
CDR_LOG


1401 
	`CDR_LOG
("cdrRód2(ËLog: CD2 Ród: %x\n", 
ªt
);

1403  
ªt
;

1404 
	}
}

1406 
	$cdrWrôe2
(
π
) {

1407 #ifde‡
CDR_LOG


1408 
	`CDR_LOG
("cdrWrôe2(ËLog: CD2 wrôe: %x\n", 
π
);

1411 
cdr
.
Cål
 & 3) {

1413 i‡(
cdr
.
P¨amC
 < 8)

1414 
cdr
.
P¨am
[cdr.
P¨amC
++] = 
π
;

1417 
cdr
.
Reg2
 = 
π
;

1418 
	`£tIrq
();

1421 
cdr
.
Aâíu©‹Le·ToLe·T
 = 
π
;

1424 
cdr
.
Aâíu©‹RightToLe·T
 = 
π
;

1427 
	}
}

1429 
	$cdrRód3
() {

1430 i‡(
cdr
.
Cål
 & 0x1)

1431 
	`psxHu8
(0x1803Ë
cdr
.
Sèt
 | 0xE0;

1433 
	`psxHu8
(0x1803Ë
cdr
.
Reg2
 | 0xE0;

1435 
	`CDR_LOG_IO
("cd∏r3: %02x\n", 
	`psxHu8
(0x1803));

1436  
	`psxHu8
(0x1803);

1437 
	}
}

1439 
	$cdrWrôe3
(
π
) {

1440 
	`CDR_LOG_IO
("cd∏w3: %02x\n", 
π
);

1442 
cdr
.
Cål
 & 3) {

1446 
cdr
.
Sèt
 &~
π
;

1448 i‡(
π
 & 0x40)

1449 
cdr
.
P¨amC
 = 0;

1452 
cdr
.
Aâíu©‹Le·ToRightT
 = 
π
;

1455 i‡(
π
 & 0x20) {

1456 
	`mem˝y
(&
cdr
.
Aâíu©‹Le·ToLe·
, &cdr.
Aâíu©‹Le·ToLe·T
, 4);

1457 
	`CDR_LOG_I
("CD-XA Volume: %02x %02x | %02x %02x\n",

1458 
cdr
.
Aâíu©‹Le·ToLe·
, cdr.
Aâíu©‹Le·ToRight
,

1459 
cdr
.
Aâíu©‹RightToLe·
, cdr.
Aâíu©‹RightToRight
);

1464 i‡((
π
 & 0x80Ë&& 
cdr
.
Róded
 == 0) {

1465 
cdr
.
Róded
 = 1;

1466 
pTøns„r
 = 
cdr
.
Tøns„r
;

1468 
cdr
.
Mode
 & 0x30) {

1469 
MODE_SIZE_2328
:

1471 
pTøns„r
 += 12;

1474 
MODE_SIZE_2340
:

1475 
pTøns„r
 += 0;

1482 
	}
}

1484 
	$psxDma3
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
) {

1485 
u32
 
cdsize
;

1486 
size
;

1487 
u8
 *
±r
;

1489 
	`CDR_LOG
("psxDma3(ËLog: *** DMA 3 *** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

1491 
ch¸
) {

1494 i‡(
cdr
.
Róded
 == 0) {

1495 
	`CDR_LOG
("psxDma3() Log: *** DMA 3 *** NOT READY\n");

1499 
cdsize
 = (
b¸
 & 0xffff) * 4;

1503 if–
cdsize
 == 0 )

1505 
cdr
.
Mode
 & (
MODE_SIZE_2340
|
MODE_SIZE_2328
)) {

1506 
MODE_SIZE_2340
: 
cdsize
 = 2340; ;

1507 
MODE_SIZE_2328
: 
cdsize
 = 2328; ;

1509 
MODE_SIZE_2048
: 
cdsize
 = 2048; ;

1514 
±r
 = (
u8
 *)
	`PSXM
(
madr
);

1515 i‡(
±r
 =
NULL
) {

1516 
	`CDR_LOG
("psxDma3() Log: *** DMA 3 *** NULL Pointer!\n");

1526 
size
 = 
CD_FRAMESIZE_RAW
 - (
pTøns„r
 - 
cdr
.
Tøns„r
);

1527 i‡(
size
 > 
cdsize
)

1528 
size
 = 
cdsize
;

1529 i‡(
size
 > 0)

1531 
	`mem˝y
(
±r
, 
pTøns„r
, 
size
);

1534 #ifde‡
PSXREC


1535 
psxCpu
->
	`CÀ¨
(
madr
, 
cdsize
 / 4);

1537 
pTøns„r
 +
cdsize
;

1539 if–
ch¸
 == 0x11400100 ) {

1540 
HW_DMA3_MADR
 = 
	`SWAPu32
(
madr
 + 
cdsize
);

1541 
	`CDRDMA_INT
–(
cdsize
/4) / 4 );

1543 if–
ch¸
 == 0x11000000 ) {

1546 
psxRegs
.
cy˛e
 +(
cdsize
/4) * 24/2;

1547 
	`CDRDMA_INT
(16);

1552 
	`CDR_LOG
("psxDma3(ËLog: Unknow¿cddm®%x\n", 
ch¸
);

1556 
HW_DMA3_CHCR
 &
	`SWAP32
(~0x01000000);

1557 
	`DMA_INTERRUPT
(3);

1558 
	}
}

1560 
	$cdrDmaI¡îru±
()

1562 i‡(
HW_DMA3_CHCR
 & 
	`SWAP32
(0x01000000))

1564 
HW_DMA3_CHCR
 &
	`SWAP32
(~0x01000000);

1565 
	`DMA_INTERRUPT
(3);

1567 
	}
}

1569 
	$gëCdInfo
()

1571 
u8
 
tmp
;

1573 
	`CDR_gëTN
(
cdr
.
Resu…TN
);

1574 
	`CDR_gëTD
(0, 
cdr
.
SëSe˘‹End
);

1575 
tmp
 = 
cdr
.
SëSe˘‹End
[0];

1576 
cdr
.
SëSe˘‹End
[0] = cdr.SetSectorEnd[2];

1577 
cdr
.
SëSe˘‹End
[2] = 
tmp
;

1578 
	}
}

1581 
	$cdrRe£t
() {

1582 
	`mem£t
(&
cdr
, 0, (cdr));

1583 
cdr
.
CurTøck
 = 1;

1584 
cdr
.
Fûe
 = 1;

1585 
cdr
.
Ch™√l
 = 1;

1586 
cdr
.
Reg2
 = 0x1f;

1587 
cdr
.
Sèt
 = 
NoI¡r
;

1588 
cdr
.
DriveSèã
 = 
DRIVESTATE_STANDBY
;

1589 
cdr
.
SètP
 = 
STATUS_ROTATING
;

1590 
cdr
.
RódRescheduÀd
 = 0;

1591 
pTøns„r
 = 
cdr
.
Tøns„r
;

1594 
cdr
.
Aâíu©‹Le·ToLe·
 = 0x80;

1595 
cdr
.
Aâíu©‹Le·ToRight
 = 0x00;

1596 
cdr
.
Aâíu©‹RightToLe·
 = 0x00;

1597 
cdr
.
Aâíu©‹RightToRight
 = 0x80;

1599 
	`gëCdInfo
();

1600 
	}
}

1602 
	$cdrFªeze
(*
f
, 
FªezeMode
 
mode
)

1604 
u32
 
tmp
;

1605 
u8
 
tmµ
[3];

1607 i‡(
mode
 =
FREEZE_LOAD
 && !
C⁄fig
.
Cdda
)

1608 
	`CDR_°›
();

1610 
cdr
.
‰ìze_vî
 = 0x63647202;

1611 i‡(
	`‰ìze_rw
(
f
, 
mode
, &
cdr
, (cdr)))

1614 i‡(
mode
 =
FREEZE_SAVE
) {

1615 
cdr
.
P¨amP
 = cdr.
P¨amC
;

1616 
tmp
 = 
pTøns„r
 - 
cdr
.
Tøns„r
;

1619 i‡(
	`‰ìze_rw
(
f
, 
mode
, &
tmp
, (tmp)))

1622 i‡(
mode
 =
FREEZE_LOAD
) {

1623 
	`gëCdInfo
();

1625 
pTøns„r
 = 
cdr
.
Tøns„r
 + 
tmp
;

1628 
	`mem˝y
(
tmµ
, 
cdr
.
Pªv
, 3);

1629 
cdr
.
Pªv
[0]++;

1630 
	`RódTøck
(
tmµ
);

1632 i‡(
cdr
.
Pœy
) {

1633 i‡(
cdr
.
‰ìze_vî
 < 0x63647202)

1634 
	`mem˝y
(
cdr
.
SëSe˘‹Pœy
, cdr.
SëSe˘‹
, 3);

1636 
	`Föd_CurTøck
(
cdr
.
SëSe˘‹Pœy
);

1637 i‡(!
C⁄fig
.
Cdda
)

1638 
	`CDR_∂ay
(
cdr
.
SëSe˘‹Pœy
);

1641 i‡((
cdr
.
‰ìze_vî
 & 0xffffff00) != 0x63647200) {

1643 i‡(
cdr
.
Reg2
 == 0) {

1644 
	`SysPrötf
("cdrom: fixing up old savestate\n");

1645 
cdr
.
Reg2
 = 7;

1648 i‡((
cdr
.
Aâíu©‹Le·ToLe·
 | cdr.
Aâíu©‹Le·ToRight


1649 | 
cdr
.
Aâíu©‹RightToLe·
 | cdr.
Aâíu©‹RightToRight
) == 0)

1651 
cdr
.
Aâíu©‹Le·ToLe·
 = cdr.
Aâíu©‹RightToRight
 = 0x80;

1657 
	}
}

1659 
	$LidI¡îru±
() {

1660 
	`gëCdInfo
();

1661 
	`St›Cdda
();

1662 
	`cdrLidSìkI¡îru±
();

1663 
	}
}

	@src/cdrom.h

21 #i‚de‡
__CDROM_H__


22 
	#__CDROM_H__


	)

24 
	~"psxcomm⁄.h
"

25 
	~"decode_xa.h
"

26 
	~"r3000a.h
"

27 
	~"∂ugös.h
"

28 
	~"psxmem.h
"

29 
	~"psxhw.h
"

31 
	#btoi
(
b
Ë((b)/16*10 + (b)%16Ë

	)

32 
	#ôob
(
i
Ë((i)/10*16 + (i)%10Ë

	)

34 
	#MSF2SECT
(
m
, 
s
, 
f
Ë(((mË* 60 + (sË- 2Ë* 75 + (f))

	)

36 
	#CD_FRAMESIZE_RAW
 2352

	)

37 
	#DATA_SIZE
 (
CD_FRAMESIZE_RAW
 - 12)

	)

39 
	#SUB_FRAMESIZE
 96

	)

42 
	mOCUP
;

43 
	mReg1Mode
;

44 
	mReg2
;

45 
	mCmdPro˚ss
;

46 
	mCål
;

47 
	mSèt
;

49 
	mSètP
;

51 
	mTøns„r
[
DATA_SIZE
];

53 
	mTøck
;

54 
	mIndex
;

55 
	mRñ©ive
[3];

56 
	mAbsﬁuã
[3];

57 } 
	msubq
;

58 
	mTøckCh™ged
;

59 
	m∑d1
[3];

60 
	m‰ìze_vî
;

62 
	mPªv
[4];

63 
	mP¨am
[8];

64 
	mResu…
[16];

66 
	mP¨amC
;

67 
	mP¨amP
;

68 
	mResu…C
;

69 
	mResu…P
;

70 
	mResu…Ródy
;

71 
	mCmd
;

72 
	mRóded
;

73 
	mSëlocPídög
;

74 
u32
 
	mRódög
;

76 
	mResu…TN
[6];

77 
	mResu…TD
[4];

78 
	mSëSe˘‹Pœy
[4];

79 
	mSëSe˘‹End
[4];

80 
	mSëSe˘‹
[4];

81 
	mTøck
;

82 
boﬁón
 
	mPœy
, 
	mMuãd
;

83 
	mCurTøck
;

84 
	mMode
, 
	mFûe
, 
	mCh™√l
;

85 
	mRe£t
;

86 
	mREº
;

87 
	mFú°Se˘‹
;

89 
xa_decode_t
 
	mXa
;

91 
	mInô
;

93 
u16
 
	mIrq
;

94 
u8
 
	mIrqRïóãd
;

95 
u32
 
	meCy˛e
;

97 
u8
 
	mSìked
;

98 
u8
 
	mRódRescheduÀd
;

100 
u8
 
	mDriveSèã
;

101 
u8
 
	mFa°F‹w¨d
;

102 
u8
 
	mFa°Backw¨d
;

103 
u8
 
	m∑d
;

105 
u8
 
	mAâíu©‹Le·ToLe·
, 
	mAâíu©‹Le·ToRight
;

106 
u8
 
	mAâíu©‹RightToRight
, 
	mAâíu©‹RightToLe·
;

107 
u8
 
	mAâíu©‹Le·ToLe·T
, 
	mAâíu©‹Le·ToRightT
;

108 
u8
 
	mAâíu©‹RightToRightT
, 
	mAâíu©‹RightToLe·T
;

109 } 
	tcdrSåu˘
;

111 
cdrSåu˘
 
cdr
;

113 
cdrRe£t
();

114 
cdrAâíu©e
(
s16
 *
buf
, 
ßm∂es
, 
°îeo
);

115 
cdrI¡îru±
();

116 
cdrRódI¡îru±
();

117 
cdrRï∂ayI¡îru±
();

118 
cdrLidSìkI¡îru±
();

119 
cdrPœyI¡îru±
();

120 
cdrDmaI¡îru±
();

121 
LidI¡îru±
();

122 
cdrRód0
();

123 
cdrRód1
();

124 
cdrRód2
();

125 
cdrRód3
();

126 
cdrWrôe0
(
π
);

127 
cdrWrôe1
(
π
);

128 
cdrWrôe2
(
π
);

129 
cdrWrôe3
(
π
);

130 
cdrFªeze
(*
f
, 
FªezeMode
 
mode
);

132 
u16
 
ˇlcCrc
(c⁄° 
u8
 *
d
, c⁄° 
Àn
);

	@src/decode_xa.cpp

25 
	~"decode_xa.h
"

27 
	#FIXED


	)

29 
	#NOT
(
_X_
Ë(!(_X_))

	)

30 
	#XACLAMP
(
_X_
,
_MI_
,
_MA_
Ë{if(_X_<_MI_)_X_=_MI_; if(_X_>_MA_)_X_=_MA_;}

	)

32 
	#SH
 4

	)

33 
	#SHC
 10

	)

39 #i‚de‡
FIXED


40 
	gK0
[4] = {

47 
	gK1
[4] = {

54 
	gK0
[4] = {

55 ()(0.0 * ()(1<<
SHC
)),

56 ()(0.9375 * ()(1<<
SHC
)),

57 ()(1.796875 * ()(1<<
SHC
)),

58 ()(1.53125 * ()(1<<
SHC
))

61 
	gK1
[4] = {

62 ()(0.0 * ()(1<<
SHC
)),

63 ()(0.0 * ()(1<<
SHC
)),

64 ()(-0.8125 * ()(1<<
SHC
)),

65 ()(-0.859375 * ()(1<<
SHC
))

69 
	#BLKSIZ
 28

	)

72 
	$ADPCM_InôDecode
(
ADPCM_Decode_t
 *
de˝
) {

73 
de˝
->
y0
 = 0;

74 
de˝
->
y1
 = 0;

75 
	}
}

78 #i‚de‡
FIXED


79 
	#IK0
(
fid
Ë(()((-
K0
[fid]Ë* (1<<
SHC
)))

	)

80 
	#IK1
(
fid
Ë(()((-
K1
[fid]Ë* (1<<
SHC
)))

	)

82 
	#IK0
(
fid
Ë(-
K0
[fid])

	)

83 
	#IK1
(
fid
Ë(-
K1
[fid])

	)

86 
INLINE
 
	$ADPCM_DecodeBlock16
–
ADPCM_Decode_t
 *
de˝
, 
u8
 
fûãr_ønge
, c⁄° *
vblockp
, *
de°p
, 
öc
 ) {

87 
i
;

88 
ønge
, 
fûãrid
;

89 
s32
 
fy0
, 
fy1
;

90 c⁄° 
u16
 *
blockp
;

92 
blockp
 = (c⁄° *)
vblockp
;

93 
fûãrid
 = (
fûãr_ønge
 >> 4) & 0x0f;

94 
ønge
 = (
fûãr_ønge
 >> 0) & 0x0f;

96 
fy0
 = 
de˝
->
y0
;

97 
fy1
 = 
de˝
->
y1
;

99 
i
 = 
BLKSIZ
/4; i; --i) {

100 
s32
 
y
;

101 
s32
 
x0
, 
x1
, 
x2
, 
x3
;

103 
y
 = *
blockp
++;

104 
x3
 = ()–
y
 & 0xf000Ë>> 
ønge
; x3 <<
SH
;

105 
x2
 = ()((
y
 << 4Ë& 0xf000Ë>> 
ønge
; x2 <<
SH
;

106 
x1
 = ()((
y
 << 8Ë& 0xf000Ë>> 
ønge
; x1 <<
SH
;

107 
x0
 = ()((
y
 << 12Ë& 0xf000Ë>> 
ønge
; x0 <<
SH
;

109 
x0
 -(
	`IK0
(
fûãrid
Ë* 
fy0
 + (
	`IK1
(fûãridË* 
fy1
)Ë>> 
SHC
; fy1 = fy0; fy0 = x0;

110 
x1
 -(
	`IK0
(
fûãrid
Ë* 
fy0
 + (
	`IK1
(fûãridË* 
fy1
)Ë>> 
SHC
; fy1 = fy0; fy0 = x1;

111 
x2
 -(
	`IK0
(
fûãrid
Ë* 
fy0
 + (
	`IK1
(fûãridË* 
fy1
)Ë>> 
SHC
; fy1 = fy0; fy0 = x2;

112 
x3
 -(
	`IK0
(
fûãrid
Ë* 
fy0
 + (
	`IK1
(fûãridË* 
fy1
)Ë>> 
SHC
; fy1 = fy0; fy0 = x3;

114 
	`XACLAMP
–
x0
, -32768<<
SH
, 32767<<SH ); *
de°p
 = x0 >> SH; de°∞+
öc
;

115 
	`XACLAMP
–
x1
, -32768<<
SH
, 32767<<SH ); *
de°p
 = x1 >> SH; de°∞+
öc
;

116 
	`XACLAMP
–
x2
, -32768<<
SH
, 32767<<SH ); *
de°p
 = x2 >> SH; de°∞+
öc
;

117 
	`XACLAMP
–
x3
, -32768<<
SH
, 32767<<SH ); *
de°p
 = x3 >> SH; de°∞+
öc
;

119 
de˝
->
y0
 = 
fy0
;

120 
de˝
->
y1
 = 
fy1
;

121 
	}
}

123 
	ghódèbÀ
[4] = {0,2,8,10};

125 
	$xa_decode_d©a
–
xa_decode_t
 *
xdp
, *
§˝
 ) {

126 c⁄° 
u8
 *
sound_group•
;

127 c⁄° 
u8
 *
sound_d©≠
, *
sound_d©≠2
;

128 
i
, 
j
, 
k
, 
nbôs
;

129 
u16
 
d©a
[4096], *
d©≠
;

130 *
de°p
;

132 
de°p
 = 
xdp
->
pcm
;

133 
nbôs
 = 
xdp
->nbits == 4 ? 4 : 2;

135 i‡(
xdp
->
°îeo
) {

136 i‡((
xdp
->
nbôs
 =8Ë&& (xdp->
‰eq
 == 37800)) {

137 
j
=0; j < 18; j++) {

138 
sound_group•
 = 
§˝
 + 
j
 * 128;

139 
sound_d©≠
 = 
sound_group•
 + 16;

141 
i
=0; i < 
nbôs
; i++) {

142 
d©≠
 = 
d©a
;

143 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

145 
k
=0; k < 14; k++, 
sound_d©≠2
 += 8) {

146 *(
d©≠
++Ë(
u16
)
sound_d©≠2
[0] |

147 (
u16
)(
sound_d©≠2
[4] << 8);

150 
	`ADPCM_DecodeBlock16
–&
xdp
->
À·
, 
sound_group•
[
hódèbÀ
[
i
]+0], 
d©a
,

151 
de°p
+0, 2 );

153 
d©≠
 = 
d©a
;

154 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

155 
k
=0; k < 14; k++, 
sound_d©≠2
 += 8) {

156 *(
d©≠
++Ë(
u16
)
sound_d©≠2
[0] |

157 (
u16
)(
sound_d©≠2
[4] << 8);

159 
	`ADPCM_DecodeBlock16
–&
xdp
->
right
, 
sound_group•
[
hódèbÀ
[
i
]+1], 
d©a
,

160 
de°p
+1, 2 );

162 
de°p
 += 28*2;

166 
j
=0; j < 18; j++) {

167 
sound_group•
 = 
§˝
 + 
j
 * 128;

168 
sound_d©≠
 = 
sound_group•
 + 16;

170 
i
=0; i < 
nbôs
; i++) {

171 
d©≠
 = 
d©a
;

172 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

174 
k
=0; k < 7; k++, 
sound_d©≠2
 += 16) {

175 *(
d©≠
++Ë(
u16
)(
sound_d©≠2
[ 0] & 0x0f) |

176 ((
u16
)(
sound_d©≠2
[ 4] & 0x0f) << 4) |

177 ((
u16
)(
sound_d©≠2
[ 8] & 0x0f) << 8) |

178 ((
u16
)(
sound_d©≠2
[12] & 0x0f) << 12);

180 
	`ADPCM_DecodeBlock16
–&
xdp
->
À·
, 
sound_group•
[
hódèbÀ
[
i
]+0], 
d©a
,

181 
de°p
+0, 2 );

183 
d©≠
 = 
d©a
;

184 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

185 
k
=0; k < 7; k++, 
sound_d©≠2
 += 16) {

186 *(
d©≠
++Ë(
u16
)(
sound_d©≠2
[ 0] >> 4) |

187 ((
u16
)(
sound_d©≠2
[ 4] >> 4) << 4) |

188 ((
u16
)(
sound_d©≠2
[ 8] >> 4) << 8) |

189 ((
u16
)(
sound_d©≠2
[12] >> 4) << 12);

191 
	`ADPCM_DecodeBlock16
–&
xdp
->
right
, 
sound_group•
[
hódèbÀ
[
i
]+1], 
d©a
,

192 
de°p
+1, 2 );

194 
de°p
 += 28*2;

199 i‡((
xdp
->
nbôs
 =8Ë&& (xdp->
‰eq
 == 37800)) {

200 
j
=0; j < 18; j++) {

201 
sound_group•
 = 
§˝
 + 
j
 * 128;

202 
sound_d©≠
 = 
sound_group•
 + 16;

204 
i
=0; i < 
nbôs
; i++) {

205 
d©≠
 = 
d©a
;

206 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

207 
k
=0; k < 14; k++, 
sound_d©≠2
 += 8) {

208 *(
d©≠
++Ë(
u16
)
sound_d©≠2
[0] |

209 (
u16
)(
sound_d©≠2
[4] << 8);

211 
	`ADPCM_DecodeBlock16
–&
xdp
->
À·
, 
sound_group•
[
hódèbÀ
[
i
]+0], 
d©a
,

212 
de°p
, 1 );

214 
de°p
 += 28;

216 
d©≠
 = 
d©a
;

217 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

218 
k
=0; k < 14; k++, 
sound_d©≠2
 += 8) {

219 *(
d©≠
++Ë(
u16
)
sound_d©≠2
[0] |

220 (
u16
)(
sound_d©≠2
[4] << 8);

222 
	`ADPCM_DecodeBlock16
–&
xdp
->
À·
, 
sound_group•
[
hódèbÀ
[
i
]+1], 
d©a
,

223 
de°p
, 1 );

225 
de°p
 += 28;

229 
j
=0; j < 18; j++) {

230 
sound_group•
 = 
§˝
 + 
j
 * 128;

231 
sound_d©≠
 = 
sound_group•
 + 16;

233 
i
=0; i < 
nbôs
; i++) {

234 
d©≠
 = 
d©a
;

235 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

236 
k
=0; k < 7; k++, 
sound_d©≠2
 += 16) {

237 *(
d©≠
++Ë(
u16
)(
sound_d©≠2
[ 0] & 0x0f) |

238 ((
u16
)(
sound_d©≠2
[ 4] & 0x0f) << 4) |

239 ((
u16
)(
sound_d©≠2
[ 8] & 0x0f) << 8) |

240 ((
u16
)(
sound_d©≠2
[12] & 0x0f) << 12);

242 
	`ADPCM_DecodeBlock16
–&
xdp
->
À·
, 
sound_group•
[
hódèbÀ
[
i
]+0], 
d©a
,

243 
de°p
, 1 );

245 
de°p
 += 28;

247 
d©≠
 = 
d©a
;

248 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

249 
k
=0; k < 7; k++, 
sound_d©≠2
 += 16) {

250 *(
d©≠
++Ë(
u16
)(
sound_d©≠2
[ 0] >> 4) |

251 ((
u16
)(
sound_d©≠2
[ 4] >> 4) << 4) |

252 ((
u16
)(
sound_d©≠2
[ 8] >> 4) << 8) |

253 ((
u16
)(
sound_d©≠2
[12] >> 4) << 12);

255 
	`ADPCM_DecodeBlock16
–&
xdp
->
À·
, 
sound_group•
[
hódèbÀ
[
i
]+1], 
d©a
,

256 
de°p
, 1 );

258 
de°p
 += 28;

263 
	}
}

269 
u8
 
	mfûíum
;

270 
u8
 
	mch™num
;

271 
u8
 
	msubmode
;

272 
u8
 
	mcodög
;

274 
u8
 
	mfûíum2
;

275 
u8
 
	mch™num2
;

276 
u8
 
	msubmode2
;

277 
u8
 
	mcodög2
;

278 } 
	txa_subhódî_t
;

280 
	#SUB_SUB_EOF
 (1<<7)

281 
	#SUB_SUB_RT
 (1<<6)

282 
	#SUB_SUB_FORM
 (1<<5)

283 
	#SUB_SUB_TRIGGER
 (1<<4)

284 
	#SUB_SUB_DATA
 (1<<3)

285 
	#SUB_SUB_AUDIO
 (1<<2)

286 
	#SUB_SUB_VIDEO
 (1<<1)

287 
	#SUB_SUB_EOR
 (1<<0)

288 

	)

289 
	#AUDIO_CODING_GET_STEREO
(
_X_
Ë–(_X_Ë& 3)

	)

290 
	#AUDIO_CODING_GET_FREQ
(
_X_
Ë(((_X_Ë>> 2Ë& 3)

	)

291 
	#AUDIO_CODING_GET_BPS
(
_X_
Ë(((_X_Ë>> 4Ë& 3)

	)

292 
	#AUDIO_CODING_GET_EMPHASIS
(
_X_
Ë(((_X_Ë>> 6Ë& 1)

	)

294 
	#SUB_UNKNOWN
 0

	)

295 
	#SUB_VIDEO
 1

	)

296 
	#SUB_AUDIO
 2

	)

299 
	$∑r£_xa_audio_£˘‹
–
xa_decode_t
 *
xdp
,

300 
xa_subhódî_t
 *
subhódp
,

301 *
£˘‹p
,

302 
is_fú°_£˘‹
 ) {

303 i‡–
is_fú°_£˘‹
 ) {

304  
	`AUDIO_CODING_GET_FREQ
(
subhódp
->
codög
) ) {

305 0: 
xdp
->
‰eq
 = 37800; ;

306 1: 
xdp
->
‰eq
 = 18900; ;

307 : 
xdp
->
‰eq
 = 0; ;

309  
	`AUDIO_CODING_GET_BPS
(
subhódp
->
codög
) ) {

310 0: 
xdp
->
nbôs
 = 4; ;

311 1: 
xdp
->
nbôs
 = 8; ;

312 : 
xdp
->
nbôs
 = 0; ;

314  
	`AUDIO_CODING_GET_STEREO
(
subhódp
->
codög
) ) {

315 0: 
xdp
->
°îeo
 = 0; ;

316 1: 
xdp
->
°îeo
 = 1; ;

317 : 
xdp
->
°îeo
 = 0; ;

320 i‡–
xdp
->
‰eq
 == 0 )

323 
	`ADPCM_InôDecode
–&
xdp
->
À·
 );

324 
	`ADPCM_InôDecode
–&
xdp
->
right
 );

326 
xdp
->
nßm∂es
 = 18 * 28 * 8;

327 i‡(
xdp
->
°îeo
 =1Ëxdp->
nßm∂es
 /= 2;

329 
	`xa_decode_d©a
–
xdp
, 
£˘‹p
 );

332 
	}
}

343 
s32
 
	$xa_decode_£˘‹
–
xa_decode_t
 *
xdp
,

344 *
£˘‹p
, 
is_fú°_£˘‹
 ) {

345 i‡(
	`∑r£_xa_audio_£˘‹
(
xdp
, (
xa_subhódî_t
 *)
£˘‹p
, se˘‹∞+ (xa_subhódî_t), 
is_fú°_£˘‹
))

349 
	}
}

	@src/decode_xa.h

21 #i‚de‡
__DECODE_XA_H__


22 
	#__DECODE_XA_H__


	)

24 
	~"psxcomm⁄.h
"

27 
s32
 
	my0
, 
	my1
;

28 } 
	tADPCM_Decode_t
;

31 
	m‰eq
;

32 
	mnbôs
;

33 
	m°îeo
;

34 
	mnßm∂es
;

35 
ADPCM_Decode_t
 
	mÀ·
, 
	mright
;

36 
	mpcm
[16384];

37 } 
	txa_decode_t
;

39 
s32
 
xa_decode_£˘‹
–
xa_decode_t
 *
xdp
,

40 *
£˘‹p
,

41 
is_fú°_£˘‹
 );

	@src/gpu.h

28 
	#PSXGPU_LCF
 (1<<31)

	)

29 
	#PSXGPU_nBUSY
 (1<<26)

	)

30 
	#PSXGPU_ILACE
 (1<<22)

	)

31 
	#PSXGPU_DHEIGHT
 (1<<19)

	)

34 
	#PSXGPU_ILACE_BITS
 (
PSXGPU_ILACE
 | 
PSXGPU_DHEIGHT
)

	)

36 
	#HW_GPU_STATUS
 
	`psxHu32ªf
(0x1814)

	)

39 
	#PSXGPU_TIMING_BITS
 (
PSXGPU_LCF
 | 
PSXGPU_nBUSY
)

	)

41 
	#gpuSyncPlugöSR
() { \

42 
HW_GPU_STATUS
 &
PSXGPU_TIMING_BITS
; \

43 
HW_GPU_STATUS
 |
	`GPU_ªadSètus
(Ë& ~
PSXGPU_TIMING_BITS
; \

44 }

	)

	@src/gpu/gpu_dfxvideo/gpu.cpp

18 
	~"gpu.h
"

19 
	~"°döt.h
"

20 
	~"p£mu_∂ugö_defs.h
"

21 
	~"p‹t.h
"

27 *
	gpsxVSecuª
;

28 *
	gpsxVub
;

29 sig√d *
	gpsxVsb
;

30 *
	gpsxVuw
;

31 *
	gpsxVuw_eom
;

32 sig√d *
	gpsxVsw
;

33 
uöt32_t
 *
	gpsxVul
;

34 
öt32_t
 *
	gpsxV¶
;

40 
	glGPUd©aRë
;

41 
	glGPU°©usRë
;

42 
uöt32_t
 
	gulSètusC⁄åﬁ
[256];

44 
uöt32_t
 
	ggpuD©aM
[256];

45 
	ggpuComm™d
 = 0;

46 
	ggpuD©aC
 = 0;

47 
	ggpuD©aP
 = 0;

49 
VRAMLﬂd_t
 
	gVRAMWrôe
;

50 
VRAMLﬂd_t
 
	gVRAMRód
;

51 
DATAREGISTERMODES
 
	gD©aWrôeMode
;

52 
DATAREGISTERMODES
 
	gD©aRódMode
;

54 
BOOL
 
	gbSkùNextFøme
 = 
FALSE
;

55 
DWORD
 
	gdwLa˚C¡
=0;

56 
	gsDi•Widths
[8] = {256,320,512,640,368,384,512,640};

57 
PSXDi•œy_t
 
	gPSXDi•œy
;

58 
PSXDi•œy_t
 
	gPªviousPSXDi•œy
;

59 
	glSñe˘edSlŸ
=0;

60 
BOOL
 
	gbDoLazyUpd©e
=
FALSE
;

61 
uöt32_t
 
	glGPUInfoVÆs
[16];

67 
	~<time.h
>

68 
time_t
 
	gtSèπ
;

71 
	~"gpu_Âs.h
"

74 
	~"gpu_blô.h
"

80 
INLINE
 
	$SëFixes
()

82 if(
dwA˘Fixes
&0x02Ë
sDi•Widths
[4]=384;

83 
sDi•Widths
[4]=368;

84 
	}
}

90 
CALLBACK
 
	$GPU_öô
()

92 
	`mem£t
(
ulSètusC⁄åﬁ
,0,256*(
uöt32_t
));

94 
psxVSecuª
 = (*)
	`mÆloc
((512*2)*1024 + (1024*1024));

95 i‡(!
psxVSecuª
)

99 
psxVub
=
psxVSecuª
 + 512 * 1024;

101 
psxVsb
=(sig√d *)
psxVub
;

102 
psxVsw
=(sig√d *)
psxVub
;

103 
psxV¶
=(
öt32_t
 *)
psxVub
;

104 
psxVuw
=(*)
psxVub
;

105 
psxVul
=(
uöt32_t
 *)
psxVub
;

107 
psxVuw_eom
=
psxVuw
+1024*512;

109 
	`mem£t
(
psxVSecuª
,0x00,(512*2)*1024 + (1024*1024));

110 
	`mem£t
(
lGPUInfoVÆs
,0x00,16*(
uöt32_t
));

112 
PSXDi•œy
.
RGB24
 = 
FALSE
;

113 
PSXDi•œy
.
I¡îœ˚d
 = 
FALSE
;

114 
PSXDi•œy
.
DøwOff£t
.
x
 = 0;

115 
PSXDi•œy
.
DøwOff£t
.
y
 = 0;

116 
PSXDi•œy
.
Di•œyMode
.
x
= 320;

117 
PSXDi•œy
.
Di•œyMode
.
y
= 240;

118 
PªviousPSXDi•œy
.
Di•œyMode
.
x
= 320;

119 
PªviousPSXDi•œy
.
Di•œyMode
.
y
= 240;

120 
PSXDi•œy
.
DißbÀd
 = 
FALSE
;

121 
PªviousPSXDi•œy
.
R™ge
.
x0
 =0;

122 
PªviousPSXDi•œy
.
R™ge
.
y0
 =0;

123 
PSXDi•œy
.
R™ge
.
x0
=0;

124 
PSXDi•œy
.
R™ge
.
x1
=0;

125 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=0;

126 
PSXDi•œy
.
DoubÀ
 = 1;

127 
lGPUd©aRë
 = 0x400;

129 
D©aWrôeMode
 = 
DR_NORMAL
;

132 
	`mem£t
(&
VRAMWrôe
, 0, (
VRAMLﬂd_t
));

133 
	`mem£t
(&
VRAMRód
, 0, (
VRAMLﬂd_t
));

136 
lGPU°©usRë
 = 0x14802000;

137 
GPUIsIdÀ
;

138 
GPUIsRódyF‹Comm™ds
;

139 
bDoVSyncUpd©e
 = 
TRUE
;

164 if(
iU£Fixes
Ë
dwA˘Fixes
=
dwCfgFixes
;

165 
	`SëFixes
();

167 
	`InôFPS
();

169 
bDoVSyncUpd©e
 = 
TRUE
;

171 
	`ulInôDi•œy
();

174 
	}
}

180 
CALLBACK
 
	$GPU_shutdown
()

182 
	`Clo£Di•œy
();

183 
	`‰ì
(
psxVSecuª
);

185 
	}
}

191 
	$upd©eDi•œy
()

193 if(
PSXDi•œy
.
DißbÀd
)

198 if(
dwA˘Fixes
&32)

200 if(
U£FømeLimô
Ë
	`PCFømeC≠
();

201 if(
U£FømeSkù
Ë
	`PCˇlcÂs
();

204 if(
U£FømeSkù
)

206 if(!
bSkùNextFøme
Ë
	`DoBuf„rSw≠
();

207 if(
dwA˘Fixes
&0xa0)

209 if((
Âs_skù
 < 
fFømeR©eHz
Ë&& !(
bSkùNextFøme
))

210 {
bSkùNextFøme
 = 
TRUE
; 
Âs_skù
=
fFømeR©eHz
;}

211 
bSkùNextFøme
 = 
FALSE
;

213 
	`FømeSkù
();

217 
	`DoBuf„rSw≠
();

219 
	}
}

225 
	$Ch™geDi•Off£tsX
()

227 
lx
,
l
;

229 if(!
PSXDi•œy
.
R™ge
.
x1
) ;

231 
l
=
PªviousPSXDi•œy
.
Di•œyMode
.
x
;

233 
l
*=()
PSXDi•œy
.
R™ge
.
x1
;

234 
l
/=2560;
lx
=l;l&=0xfffffff8;

236 if(
l
==
PªviousPSXDi•œy
.
R™ge
.
y1
) ;

237 
PªviousPSXDi•œy
.
R™ge
.
y1
=()
l
;

239 if(
lx
>=
PªviousPSXDi•œy
.
Di•œyMode
.
x
)

241 
PªviousPSXDi•œy
.
R™ge
.
x1
=

242 ()
PªviousPSXDi•œy
.
Di•œyMode
.
x
;

243 
PªviousPSXDi•œy
.
R™ge
.
x0
=0;

247 
PªviousPSXDi•œy
.
R™ge
.
x1
=()
l
;

249 
PªviousPSXDi•œy
.
R™ge
.
x0
=

250 (
PSXDi•œy
.
R™ge
.
x0
-500)/8;

252 if(
PªviousPSXDi•œy
.
R™ge
.
x0
<0)

253 
PªviousPSXDi•œy
.
R™ge
.
x0
=0;

255 if((
PªviousPSXDi•œy
.
R™ge
.
x0
+
lx
)>

256 
PªviousPSXDi•œy
.
Di•œyMode
.
x
)

258 
PªviousPSXDi•œy
.
R™ge
.
x0
=

259 ()(
PªviousPSXDi•œy
.
Di•œyMode
.
x
-
lx
);

260 
PªviousPSXDi•œy
.
R™ge
.
x0
+=2;

262 
PªviousPSXDi•œy
.
R™ge
.
x1
+=()(
lx
-
l
);

264 
PªviousPSXDi•œy
.
R™ge
.
x1
-=2;

269 
PªviousPSXDi•œy
.
R™ge
.
x0
=PreviousPSXDisplay.Range.x0>>1;

270 
PªviousPSXDi•œy
.
R™ge
.
x0
=PreviousPSXDisplay.Range.x0<<1;

271 
PªviousPSXDi•œy
.
R™ge
.
x1
=PreviousPSXDisplay.Range.x1>>1;

272 
PªviousPSXDi•œy
.
R™ge
.
x1
=PreviousPSXDisplay.Range.x1<<1;

274 
	`DoCÀ¨S¸ìnBuf„r
();

277 
bDoVSyncUpd©e
=
TRUE
;

278 
	}
}

282 
	$Ch™geDi•Off£tsY
()

284 
iT
,
iO
=
PªviousPSXDi•œy
.
R™ge
.
y0
;

285 
iOldYOff£t
=
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
;

289 if((
PªviousPSXDi•œy
.
Di•œyModeNew
.
x
+
PSXDi•œy
.Di•œyModeNew.
y
)>512)

291 
dy1
=512-
PªviousPSXDi•œy
.
Di•œyModeNew
.
x
;

292 
dy2
=(
PªviousPSXDi•œy
.
Di•œyModeNew
.
x
+
PSXDi•œy
.Di•œyModeNew.
y
)-512;

294 if(
dy1
>=
dy2
)

296 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=-
dy2
;

300 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
=0;

301 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=-
dy1
;

304 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=0;

308 if(
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
!=
iOldYOff£t
)

310 
PSXDi•œy
.
Height
 = PSXDi•œy.
R™ge
.
y1
 -

311 
PSXDi•œy
.
R™ge
.
y0
 +

312 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
;

313 
PSXDi•œy
.
Di•œyModeNew
.
y
=PSXDi•œy.
Height
*PSXDi•œy.
DoubÀ
;

318 if(
PSXDi•œy
.
PAL
Ë
iT
=48; iT=28;

320 if(
PSXDi•œy
.
R™ge
.
y0
>=
iT
)

322 
PªviousPSXDi•œy
.
R™ge
.
y0
=

323 ()((
PSXDi•œy
.
R™ge
.
y0
-
iT
-4)*PSXDi•œy.
DoubÀ
);

324 if(
PªviousPSXDi•œy
.
R™ge
.
y0
<0)

325 
PªviousPSXDi•œy
.
R™ge
.
y0
=0;

326 
PSXDi•œy
.
Di•œyModeNew
.
y
+=

327 
PªviousPSXDi•œy
.
R™ge
.
y0
;

330 
PªviousPSXDi•œy
.
R™ge
.
y0
=0;

332 if(
iO
!=
PªviousPSXDi•œy
.
R™ge
.
y0
)

334 
	`DoCÀ¨S¸ìnBuf„r
();

336 
	}
}

342 
	$upd©eDi•œyIfCh™ged
()

344 i‡((
PSXDi•œy
.
Di•œyMode
.
y
 =PSXDi•œy.
Di•œyModeNew
.y) &&

345 (
PSXDi•œy
.
Di•œyMode
.
x
 =PSXDi•œy.
Di•œyModeNew
.x))

347 if((
PSXDi•œy
.
RGB24
 =PSXDi•œy.
RGB24New
) &&

348 (
PSXDi•œy
.
I¡îœ˚d
 =PSXDi•œy.
I¡îœ˚dNew
)) ;

351 
PSXDi•œy
.
RGB24
 = PSXDi•œy.
RGB24New
;

353 
PSXDi•œy
.
Di•œyMode
.
y
 = PSXDi•œy.
Di•œyModeNew
.y;

354 
PSXDi•œy
.
Di•œyMode
.
x
 = PSXDi•œy.
Di•œyModeNew
.x;

355 
PªviousPSXDi•œy
.
Di•œyMode
.
x
=

356 
	`mö
(640,
PSXDi•œy
.
Di•œyMode
.
x
);

357 
PªviousPSXDi•œy
.
Di•œyMode
.
y
=

358 
	`mö
(512,
PSXDi•œy
.
Di•œyMode
.
y
);

359 
PSXDi•œy
.
I¡îœ˚d
 = PSXDi•œy.
I¡îœ˚dNew
;

361 
PSXDi•œy
.
Di•œyEnd
.
x
=

362 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
+ PSXDi•œy.
Di•œyMode
.x;

363 
PSXDi•œy
.
Di•œyEnd
.
y
=

364 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+ PSXDi•œy.
Di•œyMode
.y+
PªviousPSXDi•œy
.
Di•œyModeNew
.y;

365 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
=

366 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
+ 
PSXDi•œy
.
Di•œyMode
.x;

367 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
=

368 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
+ 
PSXDi•œy
.
Di•œyMode
.y+PªviousPSXDi•œy.
Di•œyModeNew
.y;

370 
	`Ch™geDi•Off£tsX
();

372 if(
iFømeLimô
==2Ë
	`SëAutoFømeC≠
();

374 if(
U£FømeSkù
Ë
	`upd©eDi•œy
();

375 
	}
}

381 
CALLBACK
 
	$GPU_upd©eLa˚
()

383 if(!(
dwA˘Fixes
&1))

384 
lGPU°©usRë
^=0x80000000;

386 if(!(
dwA˘Fixes
&32))

387 
	`CheckFømeR©e
();

389 if(
PSXDi•œy
.
I¡îœ˚d
)

391 if(
bDoVSyncUpd©e
 && 
PSXDi•œy
.
Di•œyMode
.
x
>0 && PSXDi•œy.Di•œyMode.
y
>0)

393 
	`upd©eDi•œy
();

398 if(
dwA˘Fixes
&64)

400 if(
bDoLazyUpd©e
 && !
U£FømeSkù
)

401 
	`upd©eDi•œy
();

402 
bDoLazyUpd©e
=
FALSE
;

406 if(
bDoVSyncUpd©e
 && !
U£FømeSkù
)

407 
	`upd©eDi•œy
();

410 
bDoVSyncUpd©e
=
FALSE
;

411 
	}
}

418 
uöt32_t
 
CALLBACK
 
	$GPU_ªadSètus
()

420 if(
dwA˘Fixes
&1)

422 
iNumRód
=0;

423 if((
iNumRód
++)==2)

425 
iNumRód
=0;

426 
lGPU°©usRë
^=0x80000000;

430  
lGPU°©usRë
;

431 
	}
}

438 
CALLBACK
 
	$GPU_wrôeSètus
(
uöt32_t
 
gd©a
)

440 
uöt32_t
 
lComm™d
=(
gd©a
>>24)&0xff;

442 
ulSètusC⁄åﬁ
[
lComm™d
]=
gd©a
;

444 
lComm™d
)

449 
	`mem£t
(
lGPUInfoVÆs
,0x00,16*(
uöt32_t
));

450 
lGPU°©usRë
=0x14802000;

451 
PSXDi•œy
.
DißbÀd
=1;

452 
D©aWrôeMode
=
D©aRódMode
=
DR_NORMAL
;

453 
PSXDi•œy
.
DøwOff£t
.
x
=PSXDi•œy.DøwOff£t.
y
=0;

454 
døwX
=
døwY
=0;
døwW
=
døwH
=0;

455 
sSëMask
=0;
lSëMask
=0;
bCheckMask
=
FALSE
;

456 
usMúr‹
=0;

457 
GlobÆTextAddrX
=0;
GlobÆTextAddrY
=0;

458 
GlobÆTextTP
=0;
GlobÆTextABR
=0;

459 
PSXDi•œy
.
RGB24
=
FALSE
;

460 
PSXDi•œy
.
I¡îœ˚d
=
FALSE
;

461 
bUsögTWö
 = 
FALSE
;

467 
PªviousPSXDi•œy
.
DißbÀd
 = 
PSXDi•œy
.Disabled;

468 
PSXDi•œy
.
DißbÀd
 = (
gd©a
 & 1);

470 if(
PSXDi•œy
.
DißbÀd
)

471 
lGPU°©usRë
|=
GPUSTATUS_DISPLAYDISABLED
;

472 
lGPU°©usRë
&=~
GPUSTATUS_DISPLAYDISABLED
;

478 
gd©a
 &= 0x03;

480 
D©aWrôeMode
=
D©aRódMode
=
DR_NORMAL
;

481 if(
gd©a
==0x02Ë
D©aWrôeMode
=
DR_VRAMTRANSFER
;

482 if(
gd©a
==0x03Ë
D©aRódMode
 =
DR_VRAMTRANSFER
;

483 
lGPU°©usRë
&=~
GPUSTATUS_DMABITS
;

484 
lGPU°©usRë
|=(
gd©a
 << 29);

491 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 
PSXDi•œy
.DisplayPosition.x;

492 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 
PSXDi•œy
.DisplayPosition.y;

495 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
 = ()((
gd©a
>>10)&0x1ff);

498 
PªviousPSXDi•œy
.
Di•œyModeNew
.
x
=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

500 if((
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+PSXDi•œy.
Di•œyMode
.y)>512)

502 
dy1
=512-
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

503 
dy2
=(
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+PSXDi•œy.
Di•œyMode
.y)-512;

505 if(
dy1
>=
dy2
)

507 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=-
dy2
;

511 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
=0;

512 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=-
dy1
;

515 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=0;

518 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
 = ()(
gd©a
 & 0x3ff);

519 
PSXDi•œy
.
Di•œyEnd
.
x
=

520 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
+ PSXDi•œy.
Di•œyMode
.x;

521 
PSXDi•œy
.
Di•œyEnd
.
y
=

522 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+ PSXDi•œy.
Di•œyMode
.y + 
PªviousPSXDi•œy
.
Di•œyModeNew
.y;

523 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
=

524 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
+ 
PSXDi•œy
.
Di•œyMode
.x;

525 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
=

526 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
+ 
PSXDi•œy
.
Di•œyMode
.y + PªviousPSXDi•œy.
Di•œyModeNew
.y;

528 
bDoVSyncUpd©e
=
TRUE
;

530 i‡(!(
PSXDi•œy
.
I¡îœ˚d
))

532 if(
U£FømeSkù
Ë
	`upd©eDi•œy
();

533 if(
dwA˘Fixes
&64Ë
bDoLazyUpd©e
=
TRUE
;

540 
PSXDi•œy
.
R™ge
.
x0
=()(
gd©a
 & 0x7ff);

541 
PSXDi•œy
.
R™ge
.
x1
=()((
gd©a
>>12) & 0xfff);

543 
PSXDi•œy
.
R™ge
.
x1
-=PSXDi•œy.R™ge.
x0
;

545 
	`Ch™geDi•Off£tsX
();

553 
PSXDi•œy
.
R™ge
.
y0
=()(
gd©a
 & 0x3ff);

554 
PSXDi•œy
.
R™ge
.
y1
=()((
gd©a
>>10) & 0x3ff);

556 
PªviousPSXDi•œy
.
Height
 = 
PSXDi•œy
.Height;

558 
PSXDi•œy
.
Height
 = PSXDi•œy.
R™ge
.
y1
 -

559 
PSXDi•œy
.
R™ge
.
y0
 +

560 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
;

562 if(
PªviousPSXDi•œy
.
Height
!=
PSXDi•œy
.Height)

564 
PSXDi•œy
.
Di•œyModeNew
.
y
=PSXDi•œy.
Height
*PSXDi•œy.
DoubÀ
;

566 
	`Ch™geDi•Off£tsY
();

568 
	`upd©eDi•œyIfCh™ged
();

576 
PSXDi•œy
.
Di•œyModeNew
.
x
 =

577 
sDi•Widths
[(
gd©a
 & 0x03) | ((gdata & 0x40) >> 4)];

579 i‡(
gd©a
&0x04Ë
PSXDi•œy
.
DoubÀ
=2;

580 
PSXDi•œy
.
DoubÀ
=1;

582 
PSXDi•œy
.
Di•œyModeNew
.
y
 = PSXDi•œy.
Height
*PSXDi•œy.
DoubÀ
;

584 
	`Ch™geDi•Off£tsY
();

586 
PSXDi•œy
.
PAL
 = (
gd©a
 & 0x08)?
TRUE
:
FALSE
;

587 
PSXDi•œy
.
RGB24New
 = (
gd©a
 & 0x10)?
TRUE
:
FALSE
;

588 
PSXDi•œy
.
I¡îœ˚dNew
 = (
gd©a
 & 0x20)?
TRUE
:
FALSE
;

590 
lGPU°©usRë
&=~
GPUSTATUS_WIDTHBITS
;

591 
lGPU°©usRë
|=

592 (((
gd©a
 & 0x03) << 17) |

593 ((
gd©a
 & 0x40) << 10));

595 if(
PSXDi•œy
.
I¡îœ˚dNew
)

597 if(!
PSXDi•œy
.
I¡îœ˚d
)

599 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 
PSXDi•œy
.DisplayPosition.x;

600 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 
PSXDi•œy
.DisplayPosition.y;

602 
lGPU°©usRë
|=
GPUSTATUS_INTERLACED
;

604 
lGPU°©usRë
&=~
GPUSTATUS_INTERLACED
;

606 i‡(
PSXDi•œy
.
PAL
)

607 
lGPU°©usRë
|=
GPUSTATUS_PAL
;

608 
lGPU°©usRë
&=~
GPUSTATUS_PAL
;

610 i‡(
PSXDi•œy
.
DoubÀ
==2)

611 
lGPU°©usRë
|=
GPUSTATUS_DOUBLEHEIGHT
;

612 
lGPU°©usRë
&=~
GPUSTATUS_DOUBLEHEIGHT
;

614 i‡(
PSXDi•œy
.
RGB24New
)

615 
lGPU°©usRë
|=
GPUSTATUS_RGB24
;

616 
lGPU°©usRë
&=~
GPUSTATUS_RGB24
;

618 
	`upd©eDi•œyIfCh™ged
();

625 
gd©a
&=0xff;

627 
gd©a
)

630 
lGPUd©aRë
=
lGPUInfoVÆs
[
INFO_TW
];

633 
lGPUd©aRë
=
lGPUInfoVÆs
[
INFO_DRAWSTART
];

636 
lGPUd©aRë
=
lGPUInfoVÆs
[
INFO_DRAWEND
];

640 
lGPUd©aRë
=
lGPUInfoVÆs
[
INFO_DRAWOFF
];

643 
lGPUd©aRë
=0x02;

647 
lGPUd©aRë
=0xBFC03720;

653 
	}
}

659 
INLINE
 
	$FöishedVRAMWrôe
()

662 
D©aWrôeMode
 = 
DR_NORMAL
;

664 
VRAMWrôe
.
x
 = 0;

665 
VRAMWrôe
.
y
 = 0;

666 
VRAMWrôe
.
Width
 = 0;

667 
VRAMWrôe
.
Height
 = 0;

668 
VRAMWrôe
.
CﬁsRemaöög
 = 0;

669 
VRAMWrôe
.
RowsRemaöög
 = 0;

670 
	}
}

672 
INLINE
 
	$FöishedVRAMRód
()

675 
D©aRódMode
 = 
DR_NORMAL
;

677 
VRAMRód
.
x
 = 0;

678 
VRAMRód
.
y
 = 0;

679 
VRAMRód
.
Width
 = 0;

680 
VRAMRód
.
Height
 = 0;

681 
VRAMRód
.
CﬁsRemaöög
 = 0;

682 
VRAMRód
.
RowsRemaöög
 = 0;

685 
lGPU°©usRë
&=~
GPUSTATUS_READYFORVRAM
;

686 
	}
}

692 
CALLBACK
 
	$GPU_ªadD©aMem
(
uöt32_t
 * 
pMem
, 
iSize
)

694 
i
;

696 if(
D©aRódMode
!=
DR_VRAMTRANSFER
) ;

698 
GPUIsBusy
;

701 
VRAMRód
.
ImagePå
>=
psxVuw_eom
)

702 
VRAMRód
.
ImagePå
-=512*1024;

703 
VRAMRód
.
ImagePå
<
psxVuw
)

704 
VRAMRód
.
ImagePå
+=512*1024;

706 
i
=0;i<
iSize
;i++)

709 i‡((
VRAMRód
.
CﬁsRemaöög
 > 0Ë&& (VRAMRód.
RowsRemaöög
 > 0))

712 
lGPUd©aRë
=(
uöt32_t
)
	`GETLE16
(
VRAMRód
.
ImagePå
);

714 
VRAMRód
.
ImagePå
++;

715 if(
VRAMRód
.
ImagePå
>=
psxVuw_eom
) VRAMRead.ImagePtr-=512*1024;

716 
VRAMRód
.
RowsRemaöög
 --;

718 if(
VRAMRód
.
RowsRemaöög
<=0)

720 
VRAMRód
.
RowsRemaöög
 = VRAMRód.
Width
;

721 
VRAMRód
.
CﬁsRemaöög
--;

722 
VRAMRód
.
ImagePå
 +1024 - VRAMRód.
Width
;

723 if(
VRAMRód
.
ImagePå
>=
psxVuw_eom
) VRAMRead.ImagePtr-=512*1024;

727 
lGPUd©aRë
|=(
uöt32_t
)
	`GETLE16
(
VRAMRód
.
ImagePå
)<<16;

728 
	`PUTLE32
(
pMem
, 
lGPUd©aRë
);ÖMem++;

730 if(
VRAMRód
.
CﬁsRemaöög
 <= 0)

731 {
	`FöishedVRAMRód
();
ENDREAD
;}

733 
VRAMRód
.
ImagePå
++;

734 if(
VRAMRód
.
ImagePå
>=
psxVuw_eom
) VRAMRead.ImagePtr-=512*1024;

735 
VRAMRód
.
RowsRemaöög
--;

736 if(
VRAMRód
.
RowsRemaöög
<=0)

738 
VRAMRód
.
RowsRemaöög
 = VRAMRód.
Width
;

739 
VRAMRód
.
CﬁsRemaöög
--;

740 
VRAMRód
.
ImagePå
 +1024 - VRAMRód.
Width
;

741 if(
VRAMRód
.
ImagePå
>=
psxVuw_eom
) VRAMRead.ImagePtr-=512*1024;

743 if(
VRAMRód
.
CﬁsRemaöög
 <= 0)

744 {
	`FöishedVRAMRód
();
ENDREAD
;}

746 {
	`FöishedVRAMRód
();
ENDREAD
;}

749 
ENDREAD
:

750 
GPUIsIdÀ
;

751 
	}
}

756 
uöt32_t
 
CALLBACK
 
	$GPU_ªadD©a
()

758 
uöt32_t
 
l
;

759 
	`GPU_ªadD©aMem
(&
l
,1);

760  
lGPUd©aRë
;

761 
	}
}

764 
	~"gpu_so·.h
"

767 
	~"gpu_¥im.h
"

774 c⁄° 
	g¥imTabÀCX
[256] =

844 
CALLBACK
 
	$GPU_wrôeD©aMem
(
uöt32_t
 * 
pMem
, 
iSize
)

846 
comm™d
;

847 
uöt32_t
 
gd©a
=0;

848 
i
=0;

849 
GPUIsBusy
;

850 
GPUIsNŸRódyF‹Comm™ds
;

852 
STARTVRAM
:

854 if(
D©aWrôeMode
==
DR_VRAMTRANSFER
)

856 
BOOL
 
bFöished
=
FALSE
;

859 
VRAMWrôe
.
ImagePå
>=
psxVuw_eom
)

860 
VRAMWrôe
.
ImagePå
-=512*1024;

861 
VRAMWrôe
.
ImagePå
<
psxVuw
)

862 
VRAMWrôe
.
ImagePå
+=512*1024;

865 
VRAMWrôe
.
CﬁsRemaöög
>0)

867 
VRAMWrôe
.
RowsRemaöög
>0)

869 if(
i
>=
iSize
Ë{
ENDVRAM
;}

870 
i
++;

872 
gd©a
=
	`GETLE32
(
pMem
);ÖMem++;

874 
	`PUTLE16
(
VRAMWrôe
.
ImagePå
, ()
gd©a
); VRAMWrite.ImagePtr++;

875 if(
VRAMWrôe
.
ImagePå
>=
psxVuw_eom
) VRAMWrite.ImagePtr-=512*1024;

876 
VRAMWrôe
.
RowsRemaöög
 --;

878 if(
VRAMWrôe
.
RowsRemaöög
 <= 0)

880 
VRAMWrôe
.
CﬁsRemaöög
--;

881 i‡(
VRAMWrôe
.
CﬁsRemaöög
 <= 0)

883 
gd©a
=(gd©a&0xFFFF)|(((
uöt32_t
)
	`GETLE16
(
VRAMWrôe
.
ImagePå
))<<16);

884 
	`FöishedVRAMWrôe
();

885 
bDoVSyncUpd©e
=
TRUE
;

886 
ENDVRAM
;

888 
VRAMWrôe
.
RowsRemaöög
 = VRAMWrôe.
Width
;

889 
VRAMWrôe
.
ImagePå
 +1024 - VRAMWrôe.
Width
;

892 
	`PUTLE16
(
VRAMWrôe
.
ImagePå
, ()(
gd©a
>>16)); VRAMWrite.ImagePtr++;

893 if(
VRAMWrôe
.
ImagePå
>=
psxVuw_eom
) VRAMWrite.ImagePtr-=512*1024;

894 
VRAMWrôe
.
RowsRemaöög
 --;

897 
VRAMWrôe
.
RowsRemaöög
 = VRAMWrôe.
Width
;

898 
VRAMWrôe
.
CﬁsRemaöög
--;

899 
VRAMWrôe
.
ImagePå
 +1024 - VRAMWrôe.
Width
;

900 
bFöished
=
TRUE
;

903 
	`FöishedVRAMWrôe
();

904 if(
bFöished
Ë
bDoVSyncUpd©e
=
TRUE
;

907 
ENDVRAM
:

909 if(
D©aWrôeMode
==
DR_NORMAL
)

911 (* *
¥imFunc
)(*);

912 if(
bSkùNextFøme
Ë
¥imFunc
=
¥imTabÀSkù
;

913 
¥imFunc
=
¥imTabÀJ
;

915 ;
i
<
iSize
;)

917 if(
D©aWrôeMode
==
DR_VRAMTRANSFER
Ë
STARTVRAM
;

919 
gd©a
=
	`GETLE32
(
pMem
);ÖMem++; 
i
++;

921 if(
gpuD©aC
 == 0)

923 
comm™d
 = ()((
gd©a
>>24) & 0xff);

927 if(
¥imTabÀCX
[
comm™d
])

929 
gpuD©aC
 = 
¥imTabÀCX
[
comm™d
];

930 
gpuComm™d
 = 
comm™d
;

931 
	`PUTLE32
(&
gpuD©aM
[0], 
gd©a
);

932 
gpuD©aP
 = 1;

938 
	`PUTLE32
(&
gpuD©aM
[
gpuD©aP
], 
gd©a
);

939 if(
gpuD©aC
>128)

941 if((
gpuD©aC
==254 && 
gpuD©aP
>=3) ||

942 (
gpuD©aC
==255 && 
gpuD©aP
>=4 && !(gpuDataP&1)))

944 if((
gpuD©aM
[
gpuD©aP
] & 0xF000F000) == 0x50005000)

945 
gpuD©aP
=
gpuD©aC
-1;

948 
gpuD©aP
++;

951 if(
gpuD©aP
 =
gpuD©aC
)

953 
gpuD©aC
=
gpuD©aP
=0;

954 
¥imFunc
[
gpuComm™d
]((*)
gpuD©aM
);

959 
lGPUd©aRë
=
gd©a
;

961 
GPUIsRódyF‹Comm™ds
;

962 
GPUIsIdÀ
;

963 
	}
}

967 
CALLBACK
 
	$GPU_wrôeD©a
(
uöt32_t
 
gd©a
)

969 
	`PUTLE32
(&
gd©a
, gdata);

970 
	`GPU_wrôeD©aMem
(&
gd©a
,1);

971 
	}
}

977 
	glU£dAddr
[3];

979 
INLINE
 
BOOL
 
	$CheckF‹EndÀssLo›
(
œddr
)

981 if(
œddr
==
lU£dAddr
[1]Ë 
TRUE
;

982 if(
œddr
==
lU£dAddr
[2]Ë 
TRUE
;

984 if(
œddr
<
lU£dAddr
[0])ÜUsedAddr[1]=laddr;

985 
lU£dAddr
[2]=
œddr
;

986 
lU£dAddr
[0]=
œddr
;

987  
FALSE
;

988 
	}
}

990 
CALLBACK
 
	$GPU_dmaChaö
(
uöt32_t
 * 
ba£AddrL
, uöt32_à
addr
)

992 
uöt32_t
 
dmaMem
;

993 * 
ba£AddrB
;

994 
cou¡
;
DMAComm™dCou¡î
 = 0;

996 
GPUIsBusy
;

998 
lU£dAddr
[0]=lUsedAddr[1]=lUsedAddr[2]=0xffffff;

1000 
ba£AddrB
 = (*Ë
ba£AddrL
;

1004 
addr
&=0x1FFFFC;

1005 if(
DMAComm™dCou¡î
++ > 2000000) ;

1006 if(
	`CheckF‹EndÀssLo›
(
addr
)) ;

1008 
cou¡
 = 
ba£AddrB
[
addr
+3];

1010 
dmaMem
=
addr
+4;

1012 if(
cou¡
>0Ë
	`GPU_wrôeD©aMem
(&
ba£AddrL
[
dmaMem
>>2],count);

1014 
addr
 = 
	`GETLE32
(&
ba£AddrL
[addr>>2])&0xffffff;

1016 
addr
 != 0xffffff);

1018 
GPUIsIdÀ
;

1021 
	}
}

1029 
uöt32_t
 
	mulFªezeVîsi⁄
;

1030 
uöt32_t
 
	mulSètus
;

1031 
uöt32_t
 
	mulC⁄åﬁ
[256];

1032 
	mpsxVRam
[1024*512*2];

1033 } 
	tGPUFªeze_t
;

1037 
CALLBACK
 
	$GPU_‰ìze
(
uöt32_t
 
ulGëFªezeD©a
,
GPUFªeze_t
 * 
pF
)

1040 if(
ulGëFªezeD©a
==2)

1042 
lSlŸNum
=*((*)
pF
);

1043 if(
lSlŸNum
<0)  0;

1044 if(
lSlŸNum
>8)  0;

1045 
lSñe˘edSlŸ
=
lSlŸNum
+1;

1049 if(!
pF
)  0;

1050 if(
pF
->
ulFªezeVîsi⁄
!=1)  0;

1052 if(
ulGëFªezeD©a
==1)

1054 
pF
->
ulSètus
=
lGPU°©usRë
;

1055 
	`mem˝y
(
pF
->
ulC⁄åﬁ
,
ulSètusC⁄åﬁ
,256*(
uöt32_t
));

1056 
	`mem˝y
(
pF
->
psxVRam
, 
psxVub
, 1024*512*2);

1061 if(
ulGëFªezeD©a
!=0)  0;

1063 
lGPU°©usRë
=
pF
->
ulSètus
;

1064 
	`mem˝y
(
ulSètusC⁄åﬁ
,
pF
->
ulC⁄åﬁ
,256*(
uöt32_t
));

1065 
	`mem˝y
(
psxVub
, 
pF
->
psxVRam
, 1024*512*2);

1069 
	`GPU_wrôeSètus
(
ulSètusC⁄åﬁ
[0]);

1070 
	`GPU_wrôeSètus
(
ulSètusC⁄åﬁ
[1]);

1071 
	`GPU_wrôeSètus
(
ulSètusC⁄åﬁ
[2]);

1072 
	`GPU_wrôeSètus
(
ulSètusC⁄åﬁ
[3]);

1073 
	`GPU_wrôeSètus
(
ulSètusC⁄åﬁ
[8]);

1074 
	`GPU_wrôeSètus
(
ulSètusC⁄åﬁ
[6]);

1075 
	`GPU_wrôeSètus
(
ulSètusC⁄åﬁ
[7]);

1076 
	`GPU_wrôeSètus
(
ulSètusC⁄åﬁ
[5]);

1077 
	`GPU_wrôeSètus
(
ulSètusC⁄åﬁ
[4]);

1080 
	}
}

	@src/gpu/gpu_dfxvideo/gpu.h

18 #i‚de‡
_PSX_GPU_


19 
	#_PSX_GPU_


	)

21 
	#INFO_TW
 0

	)

22 
	#INFO_DRAWSTART
 1

	)

23 
	#INFO_DRAWEND
 2

	)

24 
	#INFO_DRAWOFF
 3

	)

26 
	#SHADETEXBIT
(
x
Ë((x>>24Ë& 0x1)

	)

27 
	#SEMITRANSBIT
(
x
Ë((x>>25Ë& 0x1)

	)

28 
	#PSXRGB
(
r
,
g
,
b
Ë((g<<10)|(b<<5)|r)

	)

30 
	#DATAREGISTERMODES
 

	)

32 
	#DR_NORMAL
 0

	)

33 
	#DR_VRAMTRANSFER
 1

	)

36 
	#GPUSTATUS_ODDLINES
 0x80000000

	)

37 
	#GPUSTATUS_DMABITS
 0x60000000

38 
	#GPUSTATUS_READYFORCOMMANDS
 0x10000000

	)

39 
	#GPUSTATUS_READYFORVRAM
 0x08000000

	)

40 
	#GPUSTATUS_IDLE
 0x04000000

	)

41 
	#GPUSTATUS_DISPLAYDISABLED
 0x00800000

	)

42 
	#GPUSTATUS_INTERLACED
 0x00400000

	)

43 
	#GPUSTATUS_RGB24
 0x00200000

	)

44 
	#GPUSTATUS_PAL
 0x00100000

	)

45 
	#GPUSTATUS_DOUBLEHEIGHT
 0x00080000

	)

46 
	#GPUSTATUS_WIDTHBITS
 0x00070000

47 
	#GPUSTATUS_MASKENABLED
 0x00001000

	)

48 
	#GPUSTATUS_MASKDRAWN
 0x00000800

	)

49 
	#GPUSTATUS_DRAWINGALLOWED
 0x00000400

	)

50 
	#GPUSTATUS_DITHER
 0x00000200

	)

52 
	#GPUIsBusy
 (
lGPU°©usRë
 &~
GPUSTATUS_IDLE
)

	)

53 
	#GPUIsIdÀ
 (
lGPU°©usRë
 |
GPUSTATUS_IDLE
)

	)

55 
	#GPUIsNŸRódyF‹Comm™ds
 (
lGPU°©usRë
 &~
GPUSTATUS_READYFORCOMMANDS
)

	)

56 
	#GPUIsRódyF‹Comm™ds
 (
lGPU°©usRë
 |
GPUSTATUS_READYFORCOMMANDS
)

	)

58 
	#CALLBACK


	)

60 
	~<°dio.h
>

61 
	~<°dlib.h
>

62 
	~<°rög.h
>

63 
	~<sys/time.h
>

64 
	~<m©h.h
>

65 
	~<°döt.h
>

66 
	~<uni°d.h
>

72 
	#SWAP16
(
x
Ë({ 
uöt16_t
 
y
=(x); (((y)>>8 & 0xffË| ((y)<<8 & 0xff00)); })

	)

73 
	#SWAP32
(
x
Ë({ 
uöt32_t
 
y
=(x); (((y)>>24 & 0xffulË| ((y)>>8 & 0xff00ulË| ((y)<<8 & 0xff0000ulË| ((y)<<24 & 0xff000000ul)); })

	)

75 #ifde‡
__BIG_ENDIAN__


78 
	#HOST2LE32
(
x
Ë
	`SWAP32
(x)

	)

79 
	#HOST2BE32
(
x
Ë(x)

	)

80 
	#LE2HOST32
(
x
Ë
	`SWAP32
(x)

	)

81 
	#BE2HOST32
(
x
Ë(x)

	)

83 
	#HOST2LE16
(
x
Ë
	`SWAP16
(x)

	)

84 
	#HOST2BE16
(
x
Ë(x)

	)

85 
	#LE2HOST16
(
x
Ë
	`SWAP16
(x)

	)

86 
	#BE2HOST16
(
x
Ë(x)

	)

91 
	#HOST2LE32
(
x
Ë(x)

	)

92 
	#HOST2BE32
(
x
Ë
	`SWAP32
(x)

	)

93 
	#LE2HOST32
(
x
Ë(x)

	)

94 
	#BE2HOST32
(
x
Ë
	`SWAP32
(x)

	)

96 
	#HOST2LE16
(
x
Ë(x)

	)

97 
	#HOST2BE16
(
x
Ë
	`SWAP16
(x)

	)

98 
	#LE2HOST16
(
x
Ë(x)

	)

99 
	#BE2HOST16
(
x
Ë
	`SWAP16
(x)

	)

103 
	#GETLEs16
(
X
Ë((
öt16_t
)
	`GETLE16
((
uöt16_t
 *)X))

	)

104 
	#GETLEs32
(
X
Ë((
öt16_t
)
	`GETLE32
((
uöt16_t
 *)X))

	)

106 
	#GETLE16
(
X
Ë
	`LE2HOST16
(*(
uöt16_t
 *)X)

	)

107 
	#GETLE32
(
X
Ë
	`LE2HOST32
(*(
uöt32_t
 *)X)

	)

108 
	#GETLE16D
(
X
Ë({
uöt32_t
 
vÆ
 = 
	`GETLE32
(X); (vÆ<<16 | vÆ >> 16);})

	)

109 
	#PUTLE16
(
X
, 
Y
Ëdo{*((
uöt16_t
 *)X)=
	`HOST2LE16
((uöt16_t)Y);}0)

	)

110 
	#PUTLE32
(
X
, 
Y
Ëdo{*((
uöt32_t
 *)X)=
	`HOST2LE16
((uöt32_t)Y);}0)

	)

114 
	sVRAMLOADTTAG


116 
	mx
;

117 
	my
;

118 
	mWidth
;

119 
	mHeight
;

120 
	mRowsRemaöög
;

121 
	mCﬁsRemaöög
;

122 *
	mImagePå
;

123 } 
	tVRAMLﬂd_t
;

127 
	sPSXPOINTTAG


129 
öt32_t
 
	mx
;

130 
öt32_t
 
	my
;

131 } 
	tPSXPoöt_t
;

133 
	sPSXSPOINTTAG


135 
	mx
;

136 
	my
;

137 } 
	tPSXSPoöt_t
;

139 
	sPSXRECTTAG


141 
	mx0
;

142 
	mx1
;

143 
	my0
;

144 
	my1
;

145 } 
	tPSXRe˘_t
;

149 
	#FALSE
 0

	)

150 
	#TRUE
 1

	)

151 
	#BOOL
 

	)

152 
	#LOWORD
(
l
Ë(()÷))

	)

153 
	#HIWORD
(
l
Ë(()(((
uöt32_t
)÷Ë>> 16Ë& 0xFFFF))

	)

154 
	#max
(
a
,
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

155 
	#mö
(
a
,
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

156 
	#DWORD
 
uöt32_t


	)

157 #i‚de‡
__öt64


158 
	#__öt64
 

	)

161 
	sRECTTAG


163 
	mÀ·
;

164 
	mt›
;

165 
	mright
;

166 
	mbŸtom
;

167 }
	tRECT
;

171 
	sTWINTAG


173 
PSXRe˘_t
 
	mPosôi⁄
;

174 } 
	tTWö_t
;

178 
	sPSXDISPLAYTAG


180 
PSXPoöt_t
 
	mDi•œyModeNew
;

181 
PSXPoöt_t
 
	mDi•œyMode
;

182 
PSXPoöt_t
 
	mDi•œyPosôi⁄
;

183 
PSXPoöt_t
 
	mDi•œyEnd
;

185 
öt32_t
 
	mDoubÀ
;

186 
öt32_t
 
	mHeight
;

187 
öt32_t
 
	mPAL
;

188 
öt32_t
 
	mI¡îœ˚dNew
;

189 
öt32_t
 
	mI¡îœ˚d
;

190 
öt32_t
 
	mRGB24New
;

191 
öt32_t
 
	mRGB24
;

192 
PSXSPoöt_t
 
	mDøwOff£t
;

193 
öt32_t
 
	mDißbÀd
;

194 
PSXRe˘_t
 
	mR™ge
;

196 } 
	tPSXDi•œy_t
;

202 
öt32_t
 
GlobÆTextAddrX
,
GlobÆTextAddrY
,
GlobÆTextTP
;

203 
öt32_t
 
GlobÆTextREST
,
GlobÆTextABR
,
GlobÆTextPAGE
;

204 
ly0
,
lx0
,
ly1
,
lx1
,
ly2
,
lx2
,
ly3
,
lx3
;

205 
lLowî∑π
;

206 
BOOL
 
bCheckMask
;

207 
sSëMask
;

208 
lSëMask
;

209 
g_m1
;

210 
g_m2
;

211 
g_m3
;

212 
DøwSemiTøns
;

216 
BOOL
 
bUsögTWö
;

217 
TWö_t
 
TWö
;

218 (*
¥imTabÀJ
[256])(*);

219 (*
¥imTabÀSkù
[256])(*);

220 
usMúr‹
;

221 
iDôhî
;

222 
uöt32_t
 
dwCfgFixes
;

223 
uöt32_t
 
dwA˘Fixes
;

224 
iU£Fixes
;

225 
iU£Dôhî
;

226 
BOOL
 
bDoVSyncUpd©e
;

227 
öt32_t
 
døwX
;

228 
öt32_t
 
døwY
;

229 
öt32_t
 
døwW
;

230 
öt32_t
 
døwH
;

234 
	#OPAQUEON
 10

	)

235 
	#OPAQUEOFF
 11

	)

237 
	#KEY_RESETTEXSTORE
 1

	)

238 
	#KEY_SHOWFPS
 2

	)

239 
	#KEY_RESETOPAQUE
 4

	)

240 
	#KEY_RESETDITHER
 8

	)

241 
	#KEY_RESETFILTER
 16

	)

242 
	#KEY_RESETADVBLEND
 32

	)

243 
	#KEY_BADTEXTURES
 128

	)

244 
	#KEY_CHECKTHISOUT
 256

	)

246 #i‡!
	`deföed
(
__BIG_ENDIAN__
Ë|| deföed(
__x86_64__
Ë|| deföed(
__i386__
)

247 #i‚de‡
__LITTLE_ENDIAN__


248 
	#__LITTLE_ENDIAN__


	)

252 #ifde‡
__LITTLE_ENDIAN__


253 
	#RED
(
x
Ë(x & 0xff)

	)

254 
	#BLUE
(
x
Ë((x>>16Ë& 0xff)

	)

255 
	#GREEN
(
x
Ë((x>>8Ë& 0xff)

	)

256 
	#COLOR
(
x
Ë(x & 0xffffff)

	)

257 #ñi‡
deföed
 
__BIG_ENDIAN__


258 
	#RED
(
x
Ë((x>>24Ë& 0xff)

	)

259 
	#BLUE
(
x
Ë((x>>8Ë& 0xff)

	)

260 
	#GREEN
(
x
Ë((x>>16Ë& 0xff)

	)

261 
	#COLOR
(
x
Ë
	`SWAP32
(x & 0xffffff)

	)

266 
VRAMLﬂd_t
 
VRAMWrôe
;

267 
VRAMLﬂd_t
 
VRAMRód
;

268 
DATAREGISTERMODES
 
D©aWrôeMode
;

269 
DATAREGISTERMODES
 
D©aRódMode
;

270 
sDi•Widths
[];

271 
BOOL
 
bDebugText
;

272 
PSXDi•œy_t
 
PSXDi•œy
;

273 
PSXDi•œy_t
 
PªviousPSXDi•œy
;

274 
BOOL
 
bSkùNextFøme
;

275 
lGPU°©usRë
;

276 * 
psxVSecuª
;

277 * 
psxVub
;

278 sig√d * 
psxVsb
;

279 * 
psxVuw
;

280 sig√d * 
psxVsw
;

281 
uöt32_t
 * 
psxVul
;

282 
öt32_t
 * 
psxV¶
;

283 * 
psxVuw_eom
;

284 
BOOL
 
bCh™geWöMode
;

285 
lSñe˘edSlŸ
;

286 
BOOL
 
bInôC≠
;

287 
DWORD
 
dwLa˚C¡
;

288 
uöt32_t
 
lGPUInfoVÆs
[];

289 
uöt32_t
 
ulSètusC⁄åﬁ
[];

293 
U£FømeLimô
;

294 
U£FømeSkù
;

295 
fFømeR©e
;

296 
iFømeLimô
;

297 
fFømeR©eHz
;

298 
Âs_skù
;

299 
Âs_cur
;

	@src/gpu/gpu_dfxvideo/gpu_blit.h

19 
	glLowî∑π
;

20 
BOOL
 
	gbCheckMask
 = 
FALSE
;

21 
	gsSëMask
 = 0;

22 
	glSëMask
 = 0;

24 *
	gpVideoBuf„r
=
NULL
;

95 
	$BlôS¸ìn16
(*
surf
, 
öt32_t
 
x
, i¡32_à
y
)

97 *
pD
;

98 
°¨txy
;

99 
uöt32_t
 
lu
;

100 
s
;

101 
row
, 
cﬁumn
;

102 
dx
 = 
PªviousPSXDi•œy
.
R™ge
.
x1
;

103 
dy
 = 
PªviousPSXDi•œy
.
Di•œyMode
.
y
;

105 
öt32_t
 
lPôch
 = 
PSXDi•œy
.
Di•œyMode
.
x
 << 1;

107 
uöt16_t
 *
de°pix
;

109 i‡(
PªviousPSXDi•œy
.
R™ge
.
y0
)

111 
	`mem£t
(
surf
, 0, (
PªviousPSXDi•œy
.
R™ge
.
y0
 >> 1Ë* 
lPôch
);

113 
dy
 -
PªviousPSXDi•œy
.
R™ge
.
y0
;

114 
surf
 +(
PªviousPSXDi•œy
.
R™ge
.
y0
 >> 1Ë* 
lPôch
;

116 
	`mem£t
(
surf
 + 
dy
 * 
lPôch
,

117 0, ((
PªviousPSXDi•œy
.
R™ge
.
y0
 + 1Ë>> 1Ë* 
lPôch
);

120 i‡(
PªviousPSXDi•œy
.
R™ge
.
x0
)

122 
cﬁumn
 = 0; cﬁum¿< 
dy
; column++)

124 
de°pix
 = (
uöt16_t
 *)(
surf
 + (
cﬁumn
 * 
lPôch
));

125 
	`mem£t
(
de°pix
, 0, 
PªviousPSXDi•œy
.
R™ge
.
x0
 << 1);

127 
surf
 +
PªviousPSXDi•œy
.
R™ge
.
x0
 << 1;

130 i‡(
PSXDi•œy
.
RGB24
)

132 
cﬁumn
 = 0; cﬁum¿< 
dy
; column++)

134 
°¨txy
 = ((1024Ë* (
cﬁumn
 + 
y
)Ë+ 
x
;

135 
pD
 = (*)&
psxVuw
[
°¨txy
];

136 
de°pix
 = (
uöt16_t
 *)(
surf
 + (
cﬁumn
 * 
lPôch
));

137 
row
 = 0;Ñow < 
dx
;Ñow++)

139 
lu
 = *((
uöt32_t
 *)
pD
);

140 
de°pix
[
row
] =

141 ((
	`RED
(
lu
)<<8)&0xf800)|((
	`GREEN
÷u)<<3)&0x7e0)|(
	`BLUE
(lu)>>3);

142 
pD
 += 3;

148 
cﬁumn
 = 0;cﬁumn<
dy
;column++)

150 
°¨txy
 = (1024 * (
cﬁumn
 + 
y
)Ë+ 
x
;

151 
de°pix
 = (
uöt16_t
 *)(
surf
 + (
cﬁumn
 * 
lPôch
));

152 
row
 = 0;Ñow < 
dx
;Ñow++)

154 
s
 = 
	`GETLE16
(&
psxVuw
[
°¨txy
++]);

155 
de°pix
[
row
] =

156 ((
s
<<11)&0xf800f800)|((s<<1)&0x7c007c0)|((s>>10)&0x1f001f);

160 
	}
}

162 
	$DoBuf„rSw≠
()

164 i‡((
PSXDi•œy
.
Di•œyMode
.
x
 =0Ë|| (PSXDi•œy.Di•œyMode.
y
 == 0)) ;

165 
	`BlôS¸ìn16
(
pVideoBuf„r
, 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
, PSXDi•œy.Di•œyPosôi⁄.
y
);

166 
	`video_£t
((*)
pVideoBuf„r
,
PSXDi•œy
.
Di•œyMode
.
x
,PSXDi•œy.Di•œyMode.
y
);

167 
	}
}

169 
	$DoCÀ¨S¸ìnBuf„r
()

171 
	`video_˛ór
();

172 
	}
}

174 
	$ulInôDi•œy
()

181 
pVideoBuf„r
=(*)
	`mÆloc
(640*512*2);

182 
	`mem£t
(
pVideoBuf„r
,0,640*512*2);

184 
bUsögTWö
=
FALSE
;

186 
	}
}

188 
	$Clo£Di•œy
()

190 
	`‰ì
(
pVideoBuf„r
);

191 
pVideoBuf„r
 = 
NULL
;

192 
	}
}

	@src/gpu/gpu_dfxvideo/gpu_fps.h

19 
	gfFømeR©eHz
=0;

20 
DWORD
 
	gdwFømeR©eTicks
=16;

21 
	gfFømeR©e
;

22 
	giFømeLimô
;

23 
	gU£FømeLimô
=0;

24 
	gU£FømeSkù
=0;

27 
BOOL
 
	gbInôC≠
 = 
TRUE
;

28 
	gÂs_skù
 = 0;

29 
	gÂs_cur
 = 0;

31 
	#TIMEBASE
 100000

	)

32 
	#MAXLACE
 16

	)

33 
	#MAXSKIP
 120

	)

35 
	$timeGëTime
()

37 
timevÆ
 
tv
;

38 
	`gëtimeofday
(&
tv
, 0);

39  
tv
.
tv_£c
 * 100000 +Åv.
tv_u£c
/10;

40 
	}
}

44 
	$FømeC≠
 ()

46 
cuπicks
, 
œ°ticks
, 
_ticks_sö˚_œ°_upd©e
;

47 
TicksToWaô
 = 0;

48 
ovî¶ït
=0, 
tick°ogo
=0;

49 
BOOL
 
Waôög
 = 
TRUE
;

52 
cuπicks
 = 
	`timeGëTime
();

53 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

55 if((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

56 (
cuπicks
 <
œ°ticks
))

58 
œ°ticks
 = 
cuπicks
;

59 
ovî¶ït
 = 
_ticks_sö˚_œ°_upd©e
 - 
TicksToWaô
;

60 if((
_ticks_sö˚_œ°_upd©e
-
TicksToWaô
Ë> 
dwFømeR©eTicks
)

61 
TicksToWaô
=0;

63 
TicksToWaô
=
dwFømeR©eTicks
 - 
ovî¶ït
;

67 
Waôög
)

69 
cuπicks
 = 
	`timeGëTime
();

70 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

71 
tick°ogo
 = 
TicksToWaô
 - 
_ticks_sö˚_œ°_upd©e
;

72 i‡((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

73 (
cuπicks
 < 
œ°ticks
Ë|| 
tick°ogo
 < 
ovî¶ït
)

75 
Waôög
 = 
FALSE
;

76 
œ°ticks
 = 
cuπicks
;

77 
ovî¶ït
 = 
_ticks_sö˚_œ°_upd©e
 - 
TicksToWaô
;

78 
TicksToWaô
 = 
dwFømeR©eTicks
 - 
ovî¶ït
;

81 #ifde‡
u¶ìp


82 i‡(
tick°ogo
 >200 && !(
dwA˘Fixes
&16))

83 
	`u¶ìp
(
tick°ogo
*10 - 200);

88 
	}
}

90 
	$FømeC≠
 ()

92 
	}
}

94 
	$ˇlcÂs
()

96 
cuπicks
,
_ticks_sö˚_œ°_upd©e
,
œ°ticks
;

97 
Âs_˙t
 = 0;

98 
Âs_tck
 = 1;

99 
Âsskù_˙t
 = 0;

100 
Âsskù_tck
 = 1;

103 
cuπicks
 = 
	`timeGëTime
();

104 
_ticks_sö˚_œ°_upd©e
=
cuπicks
-
œ°ticks
;

106 if(
U£FømeSkù
 && !
U£FømeLimô
 && 
_ticks_sö˚_œ°_upd©e
)

107 
Âs_skù
=
	`mö
(Âs_skù,(()
TIMEBASE
/()
_ticks_sö˚_œ°_upd©e
+1.0f));

109 
œ°ticks
 = 
cuπicks
;

112 if(
U£FømeSkù
 && 
U£FømeLimô
)

114 
Âsskù_tck
 +
_ticks_sö˚_œ°_upd©e
;

116 if(++
Âsskù_˙t
==2)

118 
Âs_skù
 = ()2000/()
Âsskù_tck
;

119 
Âs_skù
 +=6.0f;

120 
Âsskù_˙t
 = 0;

121 
Âsskù_tck
 = 1;

125 
Âs_tck
 +
_ticks_sö˚_œ°_upd©e
;

127 if(++
Âs_˙t
==20)

129 
Âs_cur
 = ()(
TIMEBASE
*20)/()
Âs_tck
;

131 
Âs_˙t
 = 0;

132 
Âs_tck
 = 1;

135 
	}
}

137 
	$CheckFømeR©e
()

139 if(
U£FømeSkù
)

141 if(!(
dwA˘Fixes
&0x80))

143 
dwLa˚C¡
++;

144 if(
dwLa˚C¡
>=
MAXLACE
 && 
U£FømeLimô
)

146 if(
dwLa˚C¡
==
MAXLACE
Ë
bInôC≠
=
TRUE
;

147 
	`FømeC≠
();

150 if(
U£FømeLimô
Ë
	`FømeC≠
();

154 if(
U£FømeLimô
Ë
	`FømeC≠
();

156 
	`ˇlcÂs
();

157 
	}
}

159 
	$FømeSkù
()

161 
iNumSkùs
=0,
iAddôi⁄ÆSkù
=0;

162 
DWORD
 
dwLa°La˚
=0;

163 
DWORD
 
cuπicks
, 
œ°ticks
, 
_ticks_sö˚_œ°_upd©e
;

164 
tick°ogo
=0;

165 
ovî¶ït
=0;

167 if(!
dwLa˚C¡
) ;

169 if(
iNumSkùs
)

171 
dwLa°La˚
+=
dwLa˚C¡
;

172 
bSkùNextFøme
 = 
TRUE
;

173 
iNumSkùs
--;

177 
DWORD
 
dwWaôTime
;

179 if(
bInôC≠
 || 
bSkùNextFøme
)

181 if(
U£FømeLimô
 && !
bInôC≠
)

183 
DWORD
 
dwT
=
_ticks_sö˚_œ°_upd©e
;

184 
dwLa°La˚
+=
dwLa˚C¡
;

186 
cuπicks
 = 
	`timeGëTime
();

187 
_ticks_sö˚_œ°_upd©e

dwT
+
cuπicks
 - 
œ°ticks
;

189 
dwWaôTime
=
dwLa°La˚
*
dwFømeR©eTicks
;

191 if(
_ticks_sö˚_œ°_upd©e
<
dwWaôTime
)

193 if((
dwWaôTime
-
_ticks_sö˚_œ°_upd©e
)>

194 (60*
dwFømeR©eTicks
))

195 
_ticks_sö˚_œ°_upd©e
=
dwWaôTime
;

197 
_ticks_sö˚_œ°_upd©e
<
dwWaôTime
)

199 
cuπicks
 = 
	`timeGëTime
();

200 
_ticks_sö˚_œ°_upd©e
 = 
dwT
+
cuπicks
 - 
œ°ticks
;

205 if(
iAddôi⁄ÆSkù
<
MAXSKIP
)

207 
iAddôi⁄ÆSkù
++;

208 
dwLa˚C¡
=0;

209 
œ°ticks
 = 
	`timeGëTime
();

215 
bInôC≠
=
FALSE
;

216 
iAddôi⁄ÆSkù
=0;

217 
bSkùNextFøme
=
FALSE
;

218 
œ°ticks
 = 
	`timeGëTime
();

219 
dwLa˚C¡
=0;

220 
dwLa°La˚
=0;

221 
_ticks_sö˚_œ°_upd©e
=0;

225 
bSkùNextFøme
=
FALSE
;

227 
cuπicks
 = 
	`timeGëTime
();

228 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

230 
dwLa°La˚
=
dwLa˚C¡
;

231 
dwWaôTime
=
dwLa˚C¡
*
dwFømeR©eTicks
;

232 i‡(
dwWaôTime
 >
ovî¶ït
)

233 
dwWaôTime
-=
ovî¶ït
;

235 if(
_ticks_sö˚_œ°_upd©e
>
dwWaôTime
)

237 if(
U£FømeLimô
)

239 
iNumSkùs
=0;

243 
iNumSkùs
=
_ticks_sö˚_œ°_upd©e
/
dwWaôTime
;

244 
iNumSkùs
--;

245 if(
iNumSkùs
>
MAXSKIP
) iNumSkips=MAXSKIP;

247 
bSkùNextFøme
 = 
TRUE
;

250 if(
U£FømeLimô
)

252 if(
dwLa˚C¡
>
MAXLACE
)

253 
_ticks_sö˚_œ°_upd©e
=
dwWaôTime
;

255 
_ticks_sö˚_œ°_upd©e
<
dwWaôTime
)

257 
cuπicks
 = 
	`timeGëTime
();

258 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

260 
tick°ogo
 = 
dwWaôTime
 - 
_ticks_sö˚_œ°_upd©e
;

261 #ifde‡
u¶ìp


262 i‡(
tick°ogo
-
ovî¶ït
 >200 && !(
dwA˘Fixes
&16))

263 
	`u¶ìp
(
tick°ogo
*10 - 200);

267 
ovî¶ït
 = 
_ticks_sö˚_œ°_upd©e
 - 
dwWaôTime
;

268 i‡(
ovî¶ït
 < 0)

269 
ovî¶ït
 = 0;

270 
œ°ticks
 = 
	`timeGëTime
();

273 
dwLa˚C¡
=0;

274 
	}
}

279 
	$PCFømeC≠
 ()

281 
cuπicks
, 
œ°ticks
, 
_ticks_sö˚_œ°_upd©e
;

282 
TicksToWaô
 = 0;

283 
BOOL
 
Waôög
 = 
TRUE
;

285 
Waôög
)

287 
cuπicks
 = 
	`timeGëTime
();

288 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

289 i‡((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

290 (
cuπicks
 < 
œ°ticks
))

292 
Waôög
 = 
FALSE
;

293 
œ°ticks
 = 
cuπicks
;

294 
TicksToWaô
 = (
TIMEBASE
/ ()
fFømeR©eHz
);

297 
	}
}

299 
	$PCFømeC≠
 ()

301 
	}
}

303 
	$PCˇlcÂs
()

305 
cuπicks
,
_ticks_sö˚_œ°_upd©e
,
œ°ticks
;

306 
Âs_˙t
 = 0;

307 
Âs_acc
 = 0;

308 
CuºítFPS
=0;

310 
cuπicks
 = 
	`timeGëTime
();

311 
_ticks_sö˚_œ°_upd©e
=
cuπicks
-
œ°ticks
;

312 if(
_ticks_sö˚_œ°_upd©e
)

313 
CuºítFPS
=()
TIMEBASE
/()
_ticks_sö˚_œ°_upd©e
;

314 
CuºítFPS
 = 0;

315 
œ°ticks
 = 
cuπicks
;

317 
Âs_acc
 +
CuºítFPS
;

319 if(++
Âs_˙t
==10)

321 
Âs_cur
 = 
Âs_acc
 / 10;

322 
Âs_acc
 = 0;

323 
Âs_˙t
 = 0;

326 
Âs_skù
=
CuºítFPS
+1.0f;

327 
	}
}

329 
	$SëAutoFømeC≠
()

331 if(
iFømeLimô
==1)

333 
fFømeR©eHz
 = 
fFømeR©e
;

334 
dwFømeR©eTicks
=(
TIMEBASE
*100 / ()(
fFømeR©eHz
*100));

338 if(
dwA˘Fixes
&32)

340 i‡(
PSXDi•œy
.
I¡îœ˚d
)

341 
fFømeR©eHz
 = 
PSXDi•œy
.
PAL
?50.0f:60.0f;

342 
fFømeR©eHz
 = 
PSXDi•œy
.
PAL
?25.0f:30.0f;

346 
fFømeR©eHz
 = 
PSXDi•œy
.
PAL
?50.0f:59.94f;

347 
dwFømeR©eTicks
=(
TIMEBASE
*100 / ()(
fFømeR©eHz
*100));

349 
	}
}

351 
	$InôFPS
()

353 if(!
fFømeR©e
) fFrameRate=200.0f;

354 if(
fFømeR©eHz
==0ËfFømeR©eHz=
fFømeR©e
;

355 
dwFømeR©eTicks
=(
TIMEBASE
 / ()
fFømeR©eHz
);

356 
	}
}

	@src/gpu/gpu_dfxvideo/gpu_prim.h

22 
BOOL
 
	gbUsögTWö
=
FALSE
;

23 
TWö_t
 
	gTWö
;

25 
	gusMúr‹
=0;

26 
	giDôhî
=0;

27 
öt32_t
 
	gdøwX
;

28 
öt32_t
 
	gdøwY
;

29 
öt32_t
 
	gdøwW
;

30 
öt32_t
 
	gdøwH
;

31 
uöt32_t
 
	gdwCfgFixes
;

32 
uöt32_t
 
	gdwA˘Fixes
=0;

33 
	giU£Fixes
;

34 
	giU£Dôhî
=0;

35 
BOOL
 
	gbDoVSyncUpd©e
=
FALSE
;

38 
INLINE
 
	$BGR24to16
 (
uöt32_t
 
BGR
)

40  ()(((
BGR
>>3)&0x1f)|((BGR&0xf80000)>>9)|((BGR&0xf800)>>6));

41 
	}
}

47 
INLINE
 
	$Upd©eGlobÆTP
(
gd©a
)

49 
GlobÆTextAddrX
 = (
gd©a
 << 6) & 0x3c0;

51 
GlobÆTextAddrY
 = (
gd©a
 << 4) & 0x100;

53 
GlobÆTextTP
 = (
gd©a
 >> 7) & 0x3;

55 if(
GlobÆTextTP
==3) GlobalTextTP=2;

57 
GlobÆTextABR
 = (
gd©a
 >> 5) & 0x3;

59 
lGPU°©usRë
&=~0x000001ff;

60 
lGPU°©usRë
|=(
gd©a
 & 0x01ff);

62 
iU£Dôhî
)

65 
iDôhî
=0;

68 if(
lGPU°©usRë
&0x0200Ë
iDôhî
=2;

69 
iDôhî
=0;

72 
iDôhî
=2;

75 
	}
}

79 
INLINE
 
	$SëRídîMode
(
uöt32_t
 
DøwAâribuãs
)

81 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
DøwAâribuãs
)Ë? 
TRUE
 : 
FALSE
;

83 if(
	`SHADETEXBIT
(
DøwAâribuãs
))

84 {
g_m1
=
g_m2
=
g_m3
=128;}

87 if((
dwA˘Fixes
&4Ë&& ((
DøwAâribuãs
&0x00ffffff)==0))

88 
DøwAâribuãs
|=0x007f7f7f;

90 
g_m1
=()(
DøwAâribuãs
&0xff);

91 
g_m2
=()((
DøwAâribuãs
>>8)&0xff);

92 
g_m3
=()((
DøwAâribuãs
>>16)&0xff);

94 
	}
}

111 
	#SIGNSHIFT
 21

	)

112 
	#CHKMAX_X
 1024

	)

113 
	#CHKMAX_Y
 512

	)

115 
INLINE
 
	$Adju°Co‹d4
()

117 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

118 
lx1
=()(((Óx1<<
SIGNSHIFT
)>>SIGNSHIFT);

119 
lx2
=()(((Óx2<<
SIGNSHIFT
)>>SIGNSHIFT);

120 
lx3
=()(((Óx3<<
SIGNSHIFT
)>>SIGNSHIFT);

121 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

122 
ly1
=()(((Óy1<<
SIGNSHIFT
)>>SIGNSHIFT);

123 
ly2
=()(((Óy2<<
SIGNSHIFT
)>>SIGNSHIFT);

124 
ly3
=()(((Óy3<<
SIGNSHIFT
)>>SIGNSHIFT);

125 
	}
}

127 
INLINE
 
	$Adju°Co‹d3
()

129 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

130 
lx1
=()(((Óx1<<
SIGNSHIFT
)>>SIGNSHIFT);

131 
lx2
=()(((Óx2<<
SIGNSHIFT
)>>SIGNSHIFT);

132 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

133 
ly1
=()(((Óy1<<
SIGNSHIFT
)>>SIGNSHIFT);

134 
ly2
=()(((Óy2<<
SIGNSHIFT
)>>SIGNSHIFT);

135 
	}
}

137 
INLINE
 
	$Adju°Co‹d2
()

139 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

140 
lx1
=()(((Óx1<<
SIGNSHIFT
)>>SIGNSHIFT);

141 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

142 
ly1
=()(((Óy1<<
SIGNSHIFT
)>>SIGNSHIFT);

143 
	}
}

145 
INLINE
 
	$Adju°Co‹d1
()

147 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

148 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

150 if(
lx0
<-512 && 
PSXDi•œy
.
DøwOff£t
.
x
<=-512)

151 
lx0
+=2048;

153 if(
ly0
<-512 && 
PSXDi•œy
.
DøwOff£t
.
y
<=-512)

154 
ly0
+=2048;

155 
	}
}

164 
INLINE
 
BOOL
 
	$CheckCo‹d4
()

166 if(
lx0
<0)

168 if(((
lx1
-
lx0
)>
CHKMAX_X
) ||

169 ((
lx2
-
lx0
)>
CHKMAX_X
))

171 if(
lx3
<0)

173 if((
lx1
-
lx3
)>
CHKMAX_X
Ë 
TRUE
;

174 if((
lx2
-
lx3
)>
CHKMAX_X
Ë 
TRUE
;

178 if(
lx1
<0)

180 if((
lx0
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

181 if((
lx2
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

182 if((
lx3
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

184 if(
lx2
<0)

186 if((
lx0
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

187 if((
lx1
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

188 if((
lx3
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

190 if(
lx3
<0)

192 if(((
lx1
-
lx3
)>
CHKMAX_X
) ||

193 ((
lx2
-
lx3
)>
CHKMAX_X
))

195 if(
lx0
<0)

197 if((
lx1
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

198 if((
lx2
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

204 if(
ly0
<0)

206 if((
ly1
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

207 if((
ly2
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

209 if(
ly1
<0)

211 if((
ly0
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

212 if((
ly2
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

213 if((
ly3
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

215 if(
ly2
<0)

217 if((
ly0
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

218 if((
ly1
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

219 if((
ly3
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

221 if(
ly3
<0)

223 if((
ly1
-
ly3
)>
CHKMAX_Y
Ë 
TRUE
;

224 if((
ly2
-
ly3
)>
CHKMAX_Y
Ë 
TRUE
;

227  
FALSE
;

228 
	}
}

230 
INLINE
 
BOOL
 
	$CheckCo‹d3
()

232 if(
lx0
<0)

234 if((
lx1
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

235 if((
lx2
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

237 if(
lx1
<0)

239 if((
lx0
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

240 if((
lx2
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

242 if(
lx2
<0)

244 if((
lx0
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

245 if((
lx1
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

247 if(
ly0
<0)

249 if((
ly1
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

250 if((
ly2
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

252 if(
ly1
<0)

254 if((
ly0
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

255 if((
ly2
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

257 if(
ly2
<0)

259 if((
ly0
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

260 if((
ly1
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

263  
FALSE
;

264 
	}
}

267 
INLINE
 
BOOL
 
	$CheckCo‹d2
()

269 if(
lx0
<0)

271 if((
lx1
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

273 if(
lx1
<0)

275 if((
lx0
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

277 if(
ly0
<0)

279 if((
ly1
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

281 if(
ly1
<0)

283 if((
ly0
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

286  
FALSE
;

287 
	}
}

289 
INLINE
 
BOOL
 
	$CheckCo‹dL
(
¶x0
,
¶y0
,
¶x1
,
¶y1
)

291 if(
¶x0
<0)

293 if((
¶x1
-
¶x0
)>
CHKMAX_X
Ë 
TRUE
;

295 if(
¶x1
<0)

297 if((
¶x0
-
¶x1
)>
CHKMAX_X
Ë 
TRUE
;

299 if(
¶y0
<0)

301 if((
¶y1
-
¶y0
)>
CHKMAX_Y
Ë 
TRUE
;

303 if(
¶y1
<0)

305 if((
¶y0
-
¶y1
)>
CHKMAX_Y
Ë 
TRUE
;

308  
FALSE
;

309 
	}
}

316 
	$cmdSTP
(* 
ba£Addr
)

318 
uöt32_t
 
gd©a
 = 
	`GETLE32
(&((uöt32_t*)
ba£Addr
)[0]);

320 
lGPU°©usRë
&=~0x1800;

321 
lGPU°©usRë
|=((
gd©a
 & 0x03) << 11);

323 if(
gd©a
&1Ë{
sSëMask
=0x8000;
lSëMask
=0x80008000;}

324 {
sSëMask
=0; 
lSëMask
=0; }

326 if(
gd©a
&2Ë
bCheckMask
=
TRUE
;

327 
bCheckMask
=
FALSE
;

328 
	}
}

334 
	$cmdTextuªPage
(* 
ba£Addr
)

336 
uöt32_t
 
gd©a
 = 
	`GETLE32
(&((uöt32_t*)
ba£Addr
)[0]);

338 
lGPU°©usRë
&=~0x000007ff;

339 
lGPU°©usRë
|=(
gd©a
 & 0x07ff);

341 
usMúr‹
=
gd©a
&0x3000;

343 
	`Upd©eGlobÆTP
(()
gd©a
);

344 
GlobÆTextREST
 = (
gd©a
&0x00ffffff)>>9;

345 
	}
}

351 
	$cmdTextuªWödow
(*
ba£Addr
)

353 
uöt32_t
 
gd©a
 = 
	`GETLE32
(&((uöt32_t*)
ba£Addr
)[0]);

355 
uöt32_t
 
YAlign
,
XAlign
;

357 
lGPUInfoVÆs
[
INFO_TW
]=
gd©a
&0xFFFFF;

359 if(
gd©a
 & 0x020)

360 
TWö
.
Posôi⁄
.
y1
 = 8;

361 i‡(
gd©a
 & 0x040)

362 
TWö
.
Posôi⁄
.
y1
 = 16;

363 i‡(
gd©a
 & 0x080)

364 
TWö
.
Posôi⁄
.
y1
 = 32;

365 i‡(
gd©a
 & 0x100)

366 
TWö
.
Posôi⁄
.
y1
 = 64;

367 i‡(
gd©a
 & 0x200)

368 
TWö
.
Posôi⁄
.
y1
 = 128;

370 
TWö
.
Posôi⁄
.
y1
 = 256;

374 i‡(
gd©a
 & 0x001)

375 
TWö
.
Posôi⁄
.
x1
 = 8;

376 i‡(
gd©a
 & 0x002)

377 
TWö
.
Posôi⁄
.
x1
 = 16;

378 i‡(
gd©a
 & 0x004)

379 
TWö
.
Posôi⁄
.
x1
 = 32;

380 i‡(
gd©a
 & 0x008)

381 
TWö
.
Posôi⁄
.
x1
 = 64;

382 i‡(
gd©a
 & 0x010)

383 
TWö
.
Posôi⁄
.
x1
 = 128;

385 
TWö
.
Posôi⁄
.
x1
 = 256;

390 
YAlign
 = (
uöt32_t
)(32 - (
TWö
.
Posôi⁄
.
y1
 >> 3));

391 
XAlign
 = (
uöt32_t
)(32 - (
TWö
.
Posôi⁄
.
x1
 >> 3));

395 
TWö
.
Posôi⁄
.
y0
 = ()(((
gd©a
 >> 15Ë& 
YAlign
) << 3);

396 
TWö
.
Posôi⁄
.
x0
 = ()(((
gd©a
 >> 10Ë& 
XAlign
) << 3);

398 if((
TWö
.
Posôi⁄
.
x0
 == 0 &&

399 
TWö
.
Posôi⁄
.
y0
 == 0 &&

400 
TWö
.
Posôi⁄
.
x1
 == 0 &&

401 
TWö
.
Posôi⁄
.
y1
 == 0) ||

402 (
TWö
.
Posôi⁄
.
x1
 == 256 &&

403 
TWö
.
Posôi⁄
.
y1
 == 256))

405 
bUsögTWö
 = 
FALSE
;

409 
bUsögTWö
 = 
TRUE
;

411 
	}
}

419 
	$cmdDøwAªaSèπ
(* 
ba£Addr
)

421 
uöt32_t
 
gd©a
 = 
	`GETLE32
(&((uöt32_t*)
ba£Addr
)[0]);

423 
døwX
 = 
gd©a
 & 0x3ff;

425 
lGPUInfoVÆs
[
INFO_DRAWSTART
]=
gd©a
&0xFFFFF;

426 
døwY
 = (
gd©a
>>10)&0x3ff;

427 if(
døwY
>=512) drawY=511;

428 
	}
}

434 
	$cmdDøwAªaEnd
(* 
ba£Addr
)

436 
uöt32_t
 
gd©a
 = 
	`GETLE32
(&((uöt32_t*)
ba£Addr
)[0]);

438 
døwW
 = 
gd©a
 & 0x3ff;

440 
lGPUInfoVÆs
[
INFO_DRAWEND
]=
gd©a
&0xFFFFF;

441 
døwH
 = (
gd©a
>>10)&0x3ff;

442 if(
døwH
>=512) drawH=511;

443 
	}
}

449 
	$cmdDøwOff£t
(* 
ba£Addr
)

451 
uöt32_t
 
gd©a
 = 
	`GETLE32
(&((uöt32_t*)
ba£Addr
)[0]);

453 
PSXDi•œy
.
DøwOff£t
.
x
 = ()(
gd©a
 & 0x7ff);

455 
lGPUInfoVÆs
[
INFO_DRAWOFF
]=
gd©a
&0x3FFFFF;

456 
PSXDi•œy
.
DøwOff£t
.
y
 = ()((
gd©a
>>11) & 0x7ff);

458 
PSXDi•œy
.
DøwOff£t
.
y
=()((()PSXDisplay.DrawOffset.y<<21)>>21);

459 
PSXDi•œy
.
DøwOff£t
.
x
=()((()PSXDisplay.DrawOffset.x<<21)>>21);

460 
	}
}

466 
	$¥imLﬂdImage
(* 
ba£Addr
)

468 *
sgpuD©a
 = ((*Ë
ba£Addr
);

470 
VRAMWrôe
.
x
 = 
	`GETLEs16
(&
sgpuD©a
[2])&0x3ff;

471 
VRAMWrôe
.
y
 = 
	`GETLEs16
(&
sgpuD©a
[3])&511;

472 
VRAMWrôe
.
Width
 = 
	`GETLEs16
(&
sgpuD©a
[4]);

473 
VRAMWrôe
.
Height
 = 
	`GETLEs16
(&
sgpuD©a
[5]);

475 
D©aWrôeMode
 = 
DR_VRAMTRANSFER
;

477 
VRAMWrôe
.
ImagePå
 = 
psxVuw
 + (VRAMWrôe.
y
<<10Ë+ VRAMWrôe.
x
;

478 
VRAMWrôe
.
RowsRemaöög
 = VRAMWrôe.
Width
;

479 
VRAMWrôe
.
CﬁsRemaöög
 = VRAMWrôe.
Height
;

480 
	}
}

486 
	$¥imSt‹eImage
(* 
ba£Addr
)

488 *
sgpuD©a
 = ((*Ë
ba£Addr
);

490 
VRAMRód
.
x
 = 
	`GETLEs16
(&
sgpuD©a
[2])&0x03ff;

491 
VRAMRód
.
y
 = 
	`GETLEs16
(&
sgpuD©a
[3])&511;

492 
VRAMRód
.
Width
 = 
	`GETLEs16
(&
sgpuD©a
[4]);

493 
VRAMRód
.
Height
 = 
	`GETLEs16
(&
sgpuD©a
[5]);

495 
VRAMRód
.
ImagePå
 = 
psxVuw
 + (VRAMRód.
y
<<10Ë+ VRAMRód.
x
;

496 
VRAMRód
.
RowsRemaöög
 = VRAMRód.
Width
;

497 
VRAMRód
.
CﬁsRemaöög
 = VRAMRód.
Height
;

499 
D©aRódMode
 = 
DR_VRAMTRANSFER
;

501 
lGPU°©usRë
 |
GPUSTATUS_READYFORVRAM
;

502 
	}
}

508 
	$¥imBlkFûl
(* 
ba£Addr
)

510 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

511 *
sgpuD©a
 = ((*Ë
ba£Addr
);

513 
sX
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

514 
sY
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

515 
sW
 = 
	`GETLEs16
(&
sgpuD©a
[4]) & 0x3ff;

516 
sH
 = 
	`GETLEs16
(&
sgpuD©a
[5]) & 0x3ff;

518 
sW
 = (sW+15) & ~15;

521 i‡(
sH
 >= 1023) sH=1024;

522 i‡(
sW
 >= 1023) sW=1024;

525 
sW
+=
sX
;

526 
sH
+=
sY
;

528 
	`FûlSo·w¨eAªa
(
sX
, 
sY
, 
sW
, 
sH
, 
	`BGR24to16
(
	`GETLE32
(&
gpuD©a
[0])));

530 
bDoVSyncUpd©e
=
TRUE
;

531 
	}
}

537 
	$¥imMoveImage
(* 
ba£Addr
)

539 *
sgpuD©a
 = ((*Ë
ba£Addr
);

541 
imageY0
,
imageX0
,
imageY1
,
imageX1
,
imageSX
,
imageSY
,
i
,
j
;

543 
imageX0
 = 
	`GETLEs16
(&
sgpuD©a
[2])&0x03ff;

544 
imageY0
 = 
	`GETLEs16
(&
sgpuD©a
[3])&511;

545 
imageX1
 = 
	`GETLEs16
(&
sgpuD©a
[4])&0x03ff;

546 
imageY1
 = 
	`GETLEs16
(&
sgpuD©a
[5])&511;

547 
imageSX
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

548 
imageSY
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

550 if((
imageX0
 =
imageX1
Ë&& (
imageY0
 =
imageY1
)) ;

551 if(
imageSX
<=0) ;

552 if(
imageSY
<=0) ;

554 if((
imageY0
+
imageSY
)>512 ||

555 (
imageX0
+
imageSX
)>1024 ||

556 (
imageY1
+
imageSY
)>512 ||

557 (
imageX1
+
imageSX
)>1024)

559 
i
,
j
;

560 
j
=0;j<
imageSY
;j++)

561 
i
=0;i<
imageSX
;i++)

562 
psxVuw
 [(1024*((
imageY1
+
j
)&511))+((
imageX1
+
i
)&0x3ff)]=

563 
psxVuw
[(1024*((
imageY0
+
j
)&511))+((
imageX0
+
i
)&0x3ff)];

565 
bDoVSyncUpd©e
=
TRUE
;

570 if(
imageSX
&1)

572 *
SRCPå
, *
DSTPå
;

573 
LöeOff£t
;

575 
SRCPå
 = 
psxVuw
 + (1024*
imageY0
Ë+ 
imageX0
;

576 
DSTPå
 = 
psxVuw
 + (1024*
imageY1
Ë+ 
imageX1
;

578 
LöeOff£t
 = 1024 - 
imageSX
;

580 
j
=0;j<
imageSY
;j++)

582 
i
=0;i<
imageSX
;i++Ë*
DSTPå
++ = *
SRCPå
++;

583 
SRCPå
 +
LöeOff£t
;

584 
DSTPå
 +
LöeOff£t
;

589 
uöt32_t
 *
SRCPå
, *
DSTPå
;

590 
LöeOff£t
;

591 
dx
=
imageSX
>>1;

593 
SRCPå
 = (
uöt32_t
 *)(
psxVuw
 + (1024*
imageY0
Ë+ 
imageX0
);

594 
DSTPå
 = (
uöt32_t
 *)(
psxVuw
 + (1024*
imageY1
Ë+ 
imageX1
);

596 
LöeOff£t
 = 512 - 
dx
;

598 
j
=0;j<
imageSY
;j++)

600 
i
=0;i<
dx
;i++Ë*
DSTPå
++ = *
SRCPå
++;

601 
SRCPå
 +
LöeOff£t
;

602 
DSTPå
 +
LöeOff£t
;

606 
imageSX
+=
imageX1
;

607 
imageSY
+=
imageY1
;

609 
bDoVSyncUpd©e
=
TRUE
;

610 
	}
}

616 
	$¥imTûeS
(* 
ba£Addr
)

618 
uöt32_t
 *
gpuD©a
 = ((uöt32_t*)
ba£Addr
);

619 *
sgpuD©a
 = ((*Ë
ba£Addr
);

620 
sW
 = 
	`GETLEs16
(&
sgpuD©a
[4]) & 0x3ff;

621 
sH
 = 
	`GETLEs16
(&
sgpuD©a
[5]) & 511;

623 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

624 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

626 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

629 
ly2
 = 
ly3
 = 
ly0
+
sH
 +
PSXDi•œy
.
DøwOff£t
.
y
;

630 
ly0
 = 
ly1
 =Üy0 +
PSXDi•œy
.
DøwOff£t
.
y
;

631 
lx1
 = 
lx2
 = 
lx0
+
sW
 +
PSXDi•œy
.
DøwOff£t
.
x
;

632 
lx0
 = 
lx3
 =Üx0 +
PSXDi•œy
.
DøwOff£t
.
x
;

634 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

636 
	`FûlSo·w¨eAªaTøns
(
lx0
,
ly0
,
lx2
,
ly2
,

637 
	`BGR24to16
(
	`GETLE32
(&
gpuD©a
[0])));

639 
bDoVSyncUpd©e
=
TRUE
;

640 
	}
}

646 
	$¥imTûe1
(* 
ba£Addr
)

648 
uöt32_t
 *
gpuD©a
 = ((uöt32_t*)
ba£Addr
);

649 *
sgpuD©a
 = ((*Ë
ba£Addr
);

650 
sH
 = 1;

651 
sW
 = 1;

653 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

654 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

656 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

659 
ly2
 = 
ly3
 = 
ly0
+
sH
 +
PSXDi•œy
.
DøwOff£t
.
y
;

660 
ly0
 = 
ly1
 =Üy0 +
PSXDi•œy
.
DøwOff£t
.
y
;

661 
lx1
 = 
lx2
 = 
lx0
+
sW
 +
PSXDi•œy
.
DøwOff£t
.
x
;

662 
lx0
 = 
lx3
 =Üx0 +
PSXDi•œy
.
DøwOff£t
.
x
;

664 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

666 
	`FûlSo·w¨eAªaTøns
(
lx0
,
ly0
,
lx2
,
ly2
,

667 
	`BGR24to16
(
	`GETLE32
(&
gpuD©a
[0])));

669 
bDoVSyncUpd©e
=
TRUE
;

670 
	}
}

676 
	$¥imTûe8
(* 
ba£Addr
)

678 
uöt32_t
 *
gpuD©a
 = ((uöt32_t*)
ba£Addr
);

679 *
sgpuD©a
 = ((*Ë
ba£Addr
);

680 
sH
 = 8;

681 
sW
 = 8;

683 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

684 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

686 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

689 
ly2
 = 
ly3
 = 
ly0
+
sH
 +
PSXDi•œy
.
DøwOff£t
.
y
;

690 
ly0
 = 
ly1
 =Üy0 +
PSXDi•œy
.
DøwOff£t
.
y
;

691 
lx1
 = 
lx2
 = 
lx0
+
sW
 +
PSXDi•œy
.
DøwOff£t
.
x
;

692 
lx0
 = 
lx3
 =Üx0 +
PSXDi•œy
.
DøwOff£t
.
x
;

694 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

696 
	`FûlSo·w¨eAªaTøns
(
lx0
,
ly0
,
lx2
,
ly2
,

697 
	`BGR24to16
(
	`GETLE32
(&
gpuD©a
[0])));

699 
bDoVSyncUpd©e
=
TRUE
;

700 
	}
}

706 
	$¥imTûe16
(* 
ba£Addr
)

708 
uöt32_t
 *
gpuD©a
 = ((uöt32_t*)
ba£Addr
);

709 *
sgpuD©a
 = ((*Ë
ba£Addr
);

710 
sH
 = 16;

711 
sW
 = 16;

713 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

714 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

716 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

719 
ly2
 = 
ly3
 = 
ly0
+
sH
 +
PSXDi•œy
.
DøwOff£t
.
y
;

720 
ly0
 = 
ly1
 =Üy0 +
PSXDi•œy
.
DøwOff£t
.
y
;

721 
lx1
 = 
lx2
 = 
lx0
+
sW
 +
PSXDi•œy
.
DøwOff£t
.
x
;

722 
lx0
 = 
lx3
 =Üx0 +
PSXDi•œy
.
DøwOff£t
.
x
;

724 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

726 
	`FûlSo·w¨eAªaTøns
(
lx0
,
ly0
,
lx2
,
ly2
,

727 
	`BGR24to16
(
	`GETLE32
(&
gpuD©a
[0])));

729 
bDoVSyncUpd©e
=
TRUE
;

730 
	}
}

736 
	$¥imS¥t8
(* 
ba£Addr
)

738 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

739 *
sgpuD©a
 = ((*Ë
ba£Addr
);

741 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

742 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

744 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

746 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

748 if(
bUsögTWö
Ë
	`DøwSo·w¨eS¥ôeTWö
(
ba£Addr
,8,8);

750 if(
usMúr‹
Ë
	`DøwSo·w¨eS¥ôeMúr‹
(
ba£Addr
,8,8);

751 
	`DøwSo·w¨eS¥ôe
(
ba£Addr
,8,8,

752 
ba£Addr
[8],

753 
ba£Addr
[9]);

755 
bDoVSyncUpd©e
=
TRUE
;

756 
	}
}

762 
	$¥imS¥t16
(* 
ba£Addr
)

764 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

765 *
sgpuD©a
 = ((*Ë
ba£Addr
);

767 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

768 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

770 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

772 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

774 if(
bUsögTWö
Ë
	`DøwSo·w¨eS¥ôeTWö
(
ba£Addr
,16,16);

776 if(
usMúr‹
Ë
	`DøwSo·w¨eS¥ôeMúr‹
(
ba£Addr
,16,16);

777 
	`DøwSo·w¨eS¥ôe
(
ba£Addr
,16,16,

778 
ba£Addr
[8],

779 
ba£Addr
[9]);

781 
bDoVSyncUpd©e
=
TRUE
;

782 
	}
}

789 
	$¥imS¥tSRe°
(* 
ba£Addr
,
ty≥
)

791 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

792 *
sgpuD©a
 = ((*Ë
ba£Addr
);

793 
sTy≥Re°
=0;

795 
s
;

796 
sX
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

797 
sY
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

798 
sW
 = 
	`GETLEs16
(&
sgpuD©a
[6]) & 0x3ff;

799 
sH
 = 
	`GETLEs16
(&
sgpuD©a
[7]) & 0x1ff;

800 
tX
 = 
ba£Addr
[8];

801 
tY
 = 
ba£Addr
[9];

803 
ty≥
)

806 
s
=256-
ba£Addr
[8];

807 
sW
-=
s
;

808 
sX
+=
s
;

809 
tX
=0;

812 
s
=256-
ba£Addr
[9];

813 
sH
-=
s
;

814 
sY
+=
s
;

815 
tY
=0;

818 
s
=256-
ba£Addr
[8];

819 
sW
-=
s
;

820 
sX
+=
s
;

821 
tX
=0;

822 
s
=256-
ba£Addr
[9];

823 
sH
-=
s
;

824 
sY
+=
s
;

825 
tY
=0;

828 
s
=512-
ba£Addr
[8];

829 
sW
-=
s
;

830 
sX
+=
s
;

831 
tX
=0;

834 
s
=512-
ba£Addr
[9];

835 
sH
-=
s
;

836 
sY
+=
s
;

837 
tY
=0;

840 
s
=512-
ba£Addr
[8];

841 
sW
-=
s
;

842 
sX
+=
s
;

843 
tX
=0;

844 
s
=512-
ba£Addr
[9];

845 
sH
-=
s
;

846 
sY
+=
s
;

847 
tY
=0;

851 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

853 if(
tX
+
sW
>256Ë{sW=256-tX;
sTy≥Re°
+=1;}

854 if(
tY
+
sH
>256Ë{sH=256-tY;
sTy≥Re°
+=2;}

856 
lx0
 = 
sX
;

857 
ly0
 = 
sY
;

859 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

861 
	`DøwSo·w¨eS¥ôe
(
ba£Addr
,
sW
,
sH
,
tX
,
tY
);

863 if(
sTy≥Re°
 && 
ty≥
<4)

865 if(
sTy≥Re°
&1 && 
ty≥
==1Ë
	`¥imS¥tSRe°
(
ba£Addr
,4);

866 if(
sTy≥Re°
&2 && 
ty≥
==2Ë
	`¥imS¥tSRe°
(
ba£Addr
,5);

867 if(
sTy≥Re°
==3 && 
ty≥
==3Ë
	`¥imS¥tSRe°
(
ba£Addr
,6);

870 
	}
}

874 
	$¥imS¥tS
(* 
ba£Addr
)

876 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

877 *
sgpuD©a
 = ((*Ë
ba£Addr
);

878 
sW
,
sH
;

880 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

881 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

883 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

885 
sW
 = 
	`GETLEs16
(&
sgpuD©a
[6]) & 0x3ff;

886 
sH
 = 
	`GETLEs16
(&
sgpuD©a
[7]) & 0x1ff;

888 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

890 if(
bUsögTWö
Ë
	`DøwSo·w¨eS¥ôeTWö
(
ba£Addr
,
sW
,
sH
);

892 if(
usMúr‹
Ë
	`DøwSo·w¨eS¥ôeMúr‹
(
ba£Addr
,
sW
,
sH
);

895 
sTy≥Re°
=0;

896 
tX
=
ba£Addr
[8];

897 
tY
=
ba£Addr
[9];

899 if(
tX
+
sW
>256Ë{sW=256-tX;
sTy≥Re°
+=1;}

900 if(
tY
+
sH
>256Ë{sH=256-tY;
sTy≥Re°
+=2;}

902 
	`DøwSo·w¨eS¥ôe
(
ba£Addr
,
sW
,
sH
,
tX
,
tY
);

904 if(
sTy≥Re°
)

906 if(
sTy≥Re°
&1Ë
	`¥imS¥tSRe°
(
ba£Addr
,1);

907 if(
sTy≥Re°
&2Ë
	`¥imS¥tSRe°
(
ba£Addr
,2);

908 if(
sTy≥Re°
==3Ë
	`¥imS¥tSRe°
(
ba£Addr
,3);

913 
bDoVSyncUpd©e
=
TRUE
;

914 
	}
}

920 
	$¥imPﬁyF4
(*
ba£Addr
)

922 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

923 *
sgpuD©a
 = ((*Ë
ba£Addr
);

925 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

926 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

927 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[4]);

928 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[5]);

929 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

930 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

931 
lx3
 = 
	`GETLEs16
(&
sgpuD©a
[8]);

932 
ly3
 = 
	`GETLEs16
(&
sgpuD©a
[9]);

934 if(!(
dwA˘Fixes
&8))

936 
	`Adju°Co‹d4
();

937 if(
	`CheckCo‹d4
()) ;

940 
	`off£tPSX4
();

941 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

943 
	`døwPﬁy4F
(
	`GETLE32
(&
gpuD©a
[0]));

945 
bDoVSyncUpd©e
=
TRUE
;

946 
	}
}

952 
	$¥imPﬁyG4
(* 
ba£Addr
)

954 
uöt32_t
 *
gpuD©a
 = (uöt32_à*)
ba£Addr
;

955 *
sgpuD©a
 = ((*Ë
ba£Addr
);

957 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

958 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

959 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

960 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

961 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[10]);

962 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[11]);

963 
lx3
 = 
	`GETLEs16
(&
sgpuD©a
[14]);

964 
ly3
 = 
	`GETLEs16
(&
sgpuD©a
[15]);

966 if(!(
dwA˘Fixes
&8))

968 
	`Adju°Co‹d4
();

969 if(
	`CheckCo‹d4
()) ;

972 
	`off£tPSX4
();

973 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

975 
	`døwPﬁy4G
(
	`GETLE32
(&
gpuD©a
[0]), GETLE32(&gpuData[2]),

976 
	`GETLE32
(&
gpuD©a
[4]), GETLE32(&gpuData[6]));

978 
bDoVSyncUpd©e
=
TRUE
;

979 
	}
}

985 
	$¥imPﬁyFT3
(* 
ba£Addr
)

987 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

988 *
sgpuD©a
 = ((*Ë
ba£Addr
);

990 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

991 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

992 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

993 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

994 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[10]);

995 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[11]);

997 
lLowî∑π
=
	`GETLE32
(&
gpuD©a
[4])>>16;

998 
	`Upd©eGlobÆTP
(()
lLowî∑π
);

1000 if(!(
dwA˘Fixes
&8))

1002 
	`Adju°Co‹d3
();

1003 if(
	`CheckCo‹d3
()) ;

1006 
	`off£tPSX3
();

1007 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

1009 
	`døwPﬁy3FT
(
ba£Addr
);

1011 
bDoVSyncUpd©e
=
TRUE
;

1012 
	}
}

1018 
	$¥imPﬁyFT4
(* 
ba£Addr
)

1020 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1021 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1023 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1024 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1025 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

1026 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

1027 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[10]);

1028 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[11]);

1029 
lx3
 = 
	`GETLEs16
(&
sgpuD©a
[14]);

1030 
ly3
 = 
	`GETLEs16
(&
sgpuD©a
[15]);

1032 
lLowî∑π
=
	`GETLE32
(&
gpuD©a
[4])>>16;

1033 
	`Upd©eGlobÆTP
(()
lLowî∑π
);

1035 if(!(
dwA˘Fixes
&8))

1037 
	`Adju°Co‹d4
();

1038 if(
	`CheckCo‹d4
()) ;

1041 
	`off£tPSX4
();

1043 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

1045 
	`døwPﬁy4FT
(
ba£Addr
);

1047 
bDoVSyncUpd©e
=
TRUE
;

1048 
	}
}

1054 
	$¥imPﬁyGT3
(*
ba£Addr
)

1056 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1057 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1059 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1060 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1061 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[8]);

1062 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[9]);

1063 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[14]);

1064 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[15]);

1066 
lLowî∑π
=
	`GETLE32
(&
gpuD©a
[5])>>16;

1067 
	`Upd©eGlobÆTP
(()
lLowî∑π
);

1069 if(!(
dwA˘Fixes
&8))

1071 
	`Adju°Co‹d3
();

1072 if(
	`CheckCo‹d3
()) ;

1075 
	`off£tPSX3
();

1076 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

1078 if(
	`SHADETEXBIT
(
	`GETLE32
(&
gpuD©a
[0])))

1080 
gpuD©a
[0] = (gpuD©a[0]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1081 
gpuD©a
[3] = (gpuD©a[3]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1082 
gpuD©a
[6] = (gpuD©a[6]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1085 
	`døwPﬁy3GT
(
ba£Addr
);

1087 
bDoVSyncUpd©e
=
TRUE
;

1088 
	}
}

1094 
	$¥imPﬁyG3
(*
ba£Addr
)

1096 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1097 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1099 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1100 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1101 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

1102 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

1103 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[10]);

1104 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[11]);

1106 if(!(
dwA˘Fixes
&8))

1108 
	`Adju°Co‹d3
();

1109 if(
	`CheckCo‹d3
()) ;

1112 
	`off£tPSX3
();

1113 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

1115 
	`døwPﬁy3G
(
	`GETLE32
(&
gpuD©a
[0]), GETLE32(&gpuData[2]), GETLE32(&gpuData[4]));

1117 
bDoVSyncUpd©e
=
TRUE
;

1118 
	}
}

1124 
	$¥imPﬁyGT4
(*
ba£Addr
)

1126 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1127 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1129 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1130 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1131 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[8]);

1132 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[9]);

1133 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[14]);

1134 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[15]);

1135 
lx3
 = 
	`GETLEs16
(&
sgpuD©a
[20]);

1136 
ly3
 = 
	`GETLEs16
(&
sgpuD©a
[21]);

1138 
lLowî∑π
=
	`GETLE32
(&
gpuD©a
[5])>>16;

1139 
	`Upd©eGlobÆTP
(()
lLowî∑π
);

1141 if(!(
dwA˘Fixes
&8))

1143 
	`Adju°Co‹d4
();

1144 if(
	`CheckCo‹d4
()) ;

1147 
	`off£tPSX4
();

1148 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

1150 if(
	`SHADETEXBIT
(
	`GETLE32
(&
gpuD©a
[0])))

1152 
gpuD©a
[0] = (gpuD©a[0]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1153 
gpuD©a
[3] = (gpuD©a[3]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1154 
gpuD©a
[6] = (gpuD©a[6]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1155 
gpuD©a
[9] = (gpuD©a[9]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1158 
	`døwPﬁy4GT
(
ba£Addr
);

1160 
bDoVSyncUpd©e
=
TRUE
;

1161 
	}
}

1167 
	$¥imPﬁyF3
(*
ba£Addr
)

1169 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1170 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1172 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1173 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1174 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[4]);

1175 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[5]);

1176 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

1177 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

1179 if(!(
dwA˘Fixes
&8))

1181 
	`Adju°Co‹d3
();

1182 if(
	`CheckCo‹d3
()) ;

1185 
	`off£tPSX3
();

1186 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

1188 
	`døwPﬁy3F
(
	`GETLE32
(&
gpuD©a
[0]));

1190 
bDoVSyncUpd©e
=
TRUE
;

1191 
	}
}

1197 
	$¥imLöeGSkù
(*
ba£Addr
)

1199 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1200 
iMax
=255;

1201 
i
=2;

1203 
ly1
 = ()((
	`GETLE32
(&
gpuD©a
[1])>>16) & 0xffff);

1204 
lx1
 = ()(
	`GETLE32
(&
gpuD©a
[1]) & 0xffff);

1206 !(((
	`GETLE32
(&
gpuD©a
[
i
]) & 0xF000F000) == 0x50005000) && i>=4))

1208 
i
++;

1209 
ly1
 = ()((
	`GETLE32
(&
gpuD©a
[
i
])>>16) & 0xffff);

1210 
lx1
 = ()(
	`GETLE32
(&
gpuD©a
[
i
]) & 0xffff);

1211 
i
++;if(i>
iMax
) ;

1213 
	}
}

1219 
	$¥imLöeGEx
(*
ba£Addr
)

1221 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1222 
iMax
=255;

1223 
uöt32_t
 
lc0
,
lc1
;

1224 
¶x0
,
¶x1
,
¶y0
,
¶y1
;
i
=2;
BOOL
 
bDøw
=
TRUE
;

1226 
¶y1
 = ()((
	`GETLE32
(&
gpuD©a
[1])>>16) & 0xffff);

1227 
¶x1
 = ()(
	`GETLE32
(&
gpuD©a
[1]) & 0xffff);

1229 if(!(
dwA˘Fixes
&8))

1231 
¶x1
=()((()¶x1<<
SIGNSHIFT
)>>SIGNSHIFT);

1232 
¶y1
=()((()¶y1<<
SIGNSHIFT
)>>SIGNSHIFT);

1235 
lc1
 = 
gpuD©a
[0] & 0xffffff;

1237 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

1239 !(((
	`GETLE32
(&
gpuD©a
[
i
]) & 0xF000F000) == 0x50005000) && i>=4))

1241 
¶y0
=
¶y1
; 
¶x0
=
¶x1
; 
lc0
=
lc1
;

1242 
lc1
=
	`GETLE32
(&
gpuD©a
[
i
]) & 0xffffff;

1244 
i
++;

1249 
¶y1
 = ()((
	`GETLE32
(&
gpuD©a
[
i
])>>16) & 0xffff);

1250 
¶x1
 = ()(
	`GETLE32
(&
gpuD©a
[
i
]) & 0xffff);

1252 if(!(
dwA˘Fixes
&8))

1254 
¶x1
=()((()¶x1<<
SIGNSHIFT
)>>SIGNSHIFT);

1255 
¶y1
=()((()¶y1<<
SIGNSHIFT
)>>SIGNSHIFT);

1256 if(
	`CheckCo‹dL
(
¶x0
,
¶y0
,
¶x1
,
¶y1
)Ë
bDøw
=
FALSE
; bDøw=
TRUE
;

1259 i‡((
lx0
 !
lx1
Ë|| (
ly0
 !
ly1
))

1261 
ly0
=
¶y0
;

1262 
lx0
=
¶x0
;

1263 
ly1
=
¶y1
;

1264 
lx1
=
¶x1
;

1266 
	`off£tPSX2
();

1267 if(
bDøw
Ë
	`DøwSo·w¨eLöeShade
(
lc0
, 
lc1
);

1269 
i
++;

1270 if(
i
>
iMax
) ;

1273 
bDoVSyncUpd©e
=
TRUE
;

1274 
	}
}

1280 
	$¥imLöeG2
(*
ba£Addr
)

1282 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1283 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1285 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1286 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1287 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

1288 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

1290 if(!(
dwA˘Fixes
&8))

1292 
	`Adju°Co‹d2
();

1293 if(
	`CheckCo‹d2
()) ;

1296 if((
lx0
 =
lx1
Ë&& (
ly0
 =
ly1
)) {lx1++;ly1++;}

1298 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

1299 
	`off£tPSX2
();

1300 
	`DøwSo·w¨eLöeShade
(
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[2]));

1302 
bDoVSyncUpd©e
=
TRUE
;

1303 
	}
}

1309 
	$¥imLöeFSkù
(*
ba£Addr
)

1311 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1312 
i
=2,
iMax
=255;

1314 
ly1
 = ()((
	`GETLE32
(&
gpuD©a
[1])>>16) & 0xffff);

1315 
lx1
 = ()(
	`GETLE32
(&
gpuD©a
[1]) & 0xffff);

1317 !(((
	`GETLE32
(&
gpuD©a
[
i
]) & 0xF000F000) == 0x50005000) && i>=3))

1319 
ly1
 = ()((
	`GETLE32
(&
gpuD©a
[
i
])>>16) & 0xffff);

1320 
lx1
 = ()(
	`GETLE32
(&
gpuD©a
[
i
]) & 0xffff);

1321 
i
++;if(i>
iMax
) ;

1323 
	}
}

1329 
	$¥imLöeFEx
(*
ba£Addr
)

1331 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1332 
iMax
;

1333 
¶x0
,
¶x1
,
¶y0
,
¶y1
;
i
=2;
BOOL
 
bDøw
=
TRUE
;

1335 
iMax
=255;

1337 
¶y1
 = ()((
	`GETLE32
(&
gpuD©a
[1])>>16) & 0xffff);

1338 
¶x1
 = ()(
	`GETLE32
(&
gpuD©a
[1]) & 0xffff);

1339 if(!(
dwA˘Fixes
&8))

1341 
¶x1
=()((()¶x1<<
SIGNSHIFT
)>>SIGNSHIFT);

1342 
¶y1
=()((()¶y1<<
SIGNSHIFT
)>>SIGNSHIFT);

1345 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

1347 !(((
	`GETLE32
(&
gpuD©a
[
i
]) & 0xF000F000) == 0x50005000) && i>=3))

1349 
¶y0
 = 
¶y1
;
¶x0
=
¶x1
;

1350 
¶y1
 = ()((
	`GETLE32
(&
gpuD©a
[
i
])>>16) & 0xffff);

1351 
¶x1
 = ()(
	`GETLE32
(&
gpuD©a
[
i
]) & 0xffff);

1352 if(!(
dwA˘Fixes
&8))

1354 
¶x1
=()((()¶x1<<
SIGNSHIFT
)>>SIGNSHIFT);

1355 
¶y1
=()((()¶y1<<
SIGNSHIFT
)>>SIGNSHIFT);

1357 if(
	`CheckCo‹dL
(
¶x0
,
¶y0
,
¶x1
,
¶y1
)Ë
bDøw
=
FALSE
; bDøw=
TRUE
;

1360 
ly0
=
¶y0
;

1361 
lx0
=
¶x0
;

1362 
ly1
=
¶y1
;

1363 
lx1
=
¶x1
;

1365 
	`off£tPSX2
();

1366 if(
bDøw
Ë
	`DøwSo·w¨eLöeFœt
(
	`GETLE32
(&
gpuD©a
[0]));

1368 
i
++;if(i>
iMax
) ;

1371 
bDoVSyncUpd©e
=
TRUE
;

1372 
	}
}

1378 
	$¥imLöeF2
(*
ba£Addr
)

1380 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1381 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1383 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1384 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1385 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[4]);

1386 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[5]);

1388 if(!(
dwA˘Fixes
&8))

1390 
	`Adju°Co‹d2
();

1391 if(
	`CheckCo‹d2
()) ;

1394 if((
lx0
 =
lx1
Ë&& (
ly0
 =
ly1
)) {lx1++;ly1++;}

1396 
	`off£tPSX2
();

1397 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

1399 
	`DøwSo·w¨eLöeFœt
(
	`GETLE32
(&
gpuD©a
[0]));

1401 
bDoVSyncUpd©e
=
TRUE
;

1402 
	}
}

1408 
	$¥imNI
(*
bA
)

1410 
	}
}

1417 (*
¥imTabÀJ
[256])(*) =

1420 
¥imNI
,¥imNI,
¥imBlkFûl
,primNI,primNI,primNI,primNI,primNI,

1422 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1424 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1426 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1428 
¥imPﬁyF3
,¥imPﬁyF3,¥imPﬁyF3,¥imPﬁyF3,
¥imPﬁyFT3
,primPolyFT3,primPolyFT3,primPolyFT3,

1430 
¥imPﬁyF4
,¥imPﬁyF4,¥imPﬁyF4,¥imPﬁyF4,
¥imPﬁyFT4
,primPolyFT4,primPolyFT4,primPolyFT4,

1432 
¥imPﬁyG3
,¥imPﬁyG3,¥imPﬁyG3,¥imPﬁyG3,
¥imPﬁyGT3
,primPolyGT3,primPolyGT3,primPolyGT3,

1434 
¥imPﬁyG4
,¥imPﬁyG4,¥imPﬁyG4,¥imPﬁyG4,
¥imPﬁyGT4
,primPolyGT4,primPolyGT4,primPolyGT4,

1436 
¥imLöeF2
,¥imLöeF2,¥imLöeF2,¥imLöeF2,
¥imNI
,primNI,primNI,primNI,

1438 
¥imLöeFEx
,primLineFEx,primLineFEx,primLineFEx,primLineFEx,primLineFEx,primLineFEx,primLineFEx,

1440 
¥imLöeG2
,¥imLöeG2,¥imLöeG2,¥imLöeG2,
¥imNI
,primNI,primNI,primNI,

1442 
¥imLöeGEx
,primLineGEx,primLineGEx,primLineGEx,primLineGEx,primLineGEx,primLineGEx,primLineGEx,

1444 
¥imTûeS
,¥imTûeS,¥imTûeS,¥imTûeS,
¥imS¥tS
,primSprtS,primSprtS,primSprtS,

1446 
¥imTûe1
,¥imTûe1,¥imTûe1,¥imTûe1,
¥imNI
,primNI,primNI,primNI,

1448 
¥imTûe8
,¥imTûe8,¥imTûe8,¥imTûe8,
¥imS¥t8
,primSprt8,primSprt8,primSprt8,

1450 
¥imTûe16
,¥imTûe16,¥imTûe16,¥imTûe16,
¥imS¥t16
,primSprt16,primSprt16,primSprt16,

1452 
¥imMoveImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

1454 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1456 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1458 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1460 
¥imLﬂdImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

1462 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1464 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1466 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1468 
¥imSt‹eImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

1470 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1472 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1474 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1476 
¥imNI
,
cmdTextuªPage
,
cmdTextuªWödow
,
cmdDøwAªaSèπ
,
cmdDøwAªaEnd
,
cmdDøwOff£t
,
cmdSTP
,primNI,

1478 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1480 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1482 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI

1483 
	}
};

1489 (*
¥imTabÀSkù
[256])(*) =

1492 
¥imNI
,¥imNI,
¥imBlkFûl
,primNI,primNI,primNI,primNI,primNI,

1494 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1496 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1498 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1500 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1502 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1504 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1506 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1508 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1510 
¥imLöeFSkù
,primLineFSkip,primLineFSkip,primLineFSkip,primLineFSkip,primLineFSkip,primLineFSkip,primLineFSkip,

1512 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1514 
¥imLöeGSkù
,primLineGSkip,primLineGSkip,primLineGSkip,primLineGSkip,primLineGSkip,primLineGSkip,primLineGSkip,

1516 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1518 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1520 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1522 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1524 
¥imMoveImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

1526 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1528 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1530 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1532 
¥imLﬂdImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

1534 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1536 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1538 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1540 
¥imSt‹eImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

1542 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1544 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1546 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1548 
¥imNI
,
cmdTextuªPage
,
cmdTextuªWödow
,
cmdDøwAªaSèπ
,
cmdDøwAªaEnd
,
cmdDøwOff£t
,
cmdSTP
,primNI,

1550 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1552 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1554 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI

1555 
	}
};

	@src/gpu/gpu_dfxvideo/gpu_soft.h

20 
	#POLYQUAD3


	)

21 
	#POLYQUAD3GT


	)

24 
	#FASTSOLID


	)

27 
	#HALFBRIGHTMODE3


	)

31 
	#XCOL1
(
x
Ë(x & 0x1f)

	)

32 
	#XCOL2
(
x
Ë(x & 0x3e0)

	)

33 
	#XCOL3
(
x
Ë(x & 0x7c00)

	)

35 
	#XCOL1D
(
x
Ë(x & 0x1f)

	)

36 
	#XCOL2D
(
x
Ë((x>>5Ë& 0x1f)

	)

37 
	#XCOL3D
(
x
Ë((x>>10Ë& 0x1f)

	)

39 
	#X32TCOL1
(
x
Ë((x & 0x001f001f)<<7)

	)

40 
	#X32TCOL2
(
x
Ë((x & 0x03e003e0)<<2)

	)

41 
	#X32TCOL3
(
x
Ë((x & 0x7c007c00)>>3)

	)

43 
	#X32COL1
(
x
Ë(x & 0x001f001f)

	)

44 
	#X32COL2
(
x
Ë((x>>5Ë& 0x001f001f)

	)

45 
	#X32COL3
(
x
Ë((x>>10Ë& 0x001f001f)

	)

47 
	#X32ACOL1
(
x
Ë(x & 0x001e001e)

	)

48 
	#X32ACOL2
(
x
Ë((x>>5Ë& 0x001e001e)

	)

49 
	#X32ACOL3
(
x
Ë((x>>10Ë& 0x001e001e)

	)

51 
	#X32BCOL1
(
x
Ë(x & 0x001c001c)

	)

52 
	#X32BCOL2
(
x
Ë((x>>5Ë& 0x001c001c)

	)

53 
	#X32BCOL3
(
x
Ë((x>>10Ë& 0x001c001c)

	)

55 
	#X32PSXCOL
(
r
,
g
,
b
Ë((g<<10)|(b<<5)|r)

	)

57 
	#XPSXCOL
(
r
,
g
,
b
Ë((g&0x7c00)|(b&0x3e0)|‘&0x1f))

	)

60 
	gg_m1
=255,
	gg_m2
=255,
	gg_m3
=255;

61 
	gDøwSemiTøns
=
FALSE
;

62 
	gYmö
;

63 
	gYmax
;

64 
	gly0
,
	glx0
,
	gly1
,
	glx1
,
	gly2
,
	glx2
,
	gly3
,
	glx3
;

65 
öt32_t
 
	gGlobÆTextAddrX
,
	gGlobÆTextAddrY
,
	gGlobÆTextTP
;

66 
öt32_t
 
	gGlobÆTextREST
,
	gGlobÆTextABR
,
	gGlobÆTextPAGE
;

72 
	$off£tPSX2
()

74 
lx0
 +
PSXDi•œy
.
DøwOff£t
.
x
;

75 
ly0
 +
PSXDi•œy
.
DøwOff£t
.
y
;

76 
lx1
 +
PSXDi•œy
.
DøwOff£t
.
x
;

77 
ly1
 +
PSXDi•œy
.
DøwOff£t
.
y
;

78 
	}
}

80 
	$off£tPSX3
()

82 
lx0
 +
PSXDi•œy
.
DøwOff£t
.
x
;

83 
ly0
 +
PSXDi•œy
.
DøwOff£t
.
y
;

84 
lx1
 +
PSXDi•œy
.
DøwOff£t
.
x
;

85 
ly1
 +
PSXDi•œy
.
DøwOff£t
.
y
;

86 
lx2
 +
PSXDi•œy
.
DøwOff£t
.
x
;

87 
ly2
 +
PSXDi•œy
.
DøwOff£t
.
y
;

88 
	}
}

90 
	$off£tPSX4
()

92 
lx0
 +
PSXDi•œy
.
DøwOff£t
.
x
;

93 
ly0
 +
PSXDi•œy
.
DøwOff£t
.
y
;

94 
lx1
 +
PSXDi•œy
.
DøwOff£t
.
x
;

95 
ly1
 +
PSXDi•œy
.
DøwOff£t
.
y
;

96 
lx2
 +
PSXDi•œy
.
DøwOff£t
.
x
;

97 
ly2
 +
PSXDi•œy
.
DøwOff£t
.
y
;

98 
lx3
 +
PSXDi•œy
.
DøwOff£t
.
x
;

99 
ly3
 +
PSXDi•œy
.
DøwOff£t
.
y
;

100 
	}
}

111 
	gdôhîèbÀ
[16] =

119 
INLINE
 
	$Dôhî16
(* 
pde°
,
uöt32_t
 
r
,uöt32_à
g
,uöt32_à
b
,
sM
)

121 
c€ff
;

122 
æow
, 
glow
, 
blow
;

123 
x
,
y
;

125 
x
=
pde°
-
psxVuw
;

126 
y
=
x
>>10;

127 
x
-=(
y
<<10);

129 
c€ff
 = 
dôhîèbÀ
[(
y
&3)*4+(
x
&3)];

131 
æow
 = 
r
&7; 
glow
 = 
g
&7; 
blow
 = 
b
&7;

133 
r
>>=3; 
g
>>=3; 
b
>>=3;

135 i‡((
r
 < 0x1FË&& 
æow
 > 
c€ff
)Ñ++;

136 i‡((
g
 < 0x1FË&& 
glow
 > 
c€ff
) g++;

137 i‡((
b
 < 0x1FË&& 
blow
 > 
c€ff
) b++;

139 
	`PUTLE16
(
pde°
, (()
b
<<10) |

140 (()
g
<<5) |

141 ()
r
 | 
sM
);

142 
	}
}

148 
INLINE
 
	$GëShadeTønsCﬁ_Dôhî
(* 
pde°
, 
öt32_t
 
m1
, i¡32_à
m2
, i¡32_à
m3
)

150 
öt32_t
 
r
,
g
,
b
;

152 if(
bCheckMask
 && (*
pde°
 & 
	`HOST2LE16
(0x8000))) ;

154 if(
DøwSemiTøns
)

156 
r
=((
	`XCOL1D
(
	`GETLE16
(
pde°
)))<<3);

157 
b
=((
	`XCOL2D
(
	`GETLE16
(
pde°
)))<<3);

158 
g
=((
	`XCOL3D
(
	`GETLE16
(
pde°
)))<<3);

160 if(
GlobÆTextABR
==0)

162 
r
=‘>>1)+(
m1
>>1);

163 
b
=(b>>1)+(
m2
>>1);

164 
g
=(g>>1)+(
m3
>>1);

167 if(
GlobÆTextABR
==1)

169 
r
+=
m1
;

170 
b
+=
m2
;

171 
g
+=
m3
;

174 if(
GlobÆTextABR
==2)

176 
r
-=
m1
;

177 
b
-=
m2
;

178 
g
-=
m3
;

179 if(
r
&0x80000000)Ñ=0;

180 if(
b
&0x80000000) b=0;

181 if(
g
&0x80000000) g=0;

185 #ifde‡
HALFBRIGHTMODE3


186 
r
+=(
m1
>>2);

187 
b
+=(
m2
>>2);

188 
g
+=(
m3
>>2);

190 
r
+=(
m1
>>1);

191 
b
+=(
m2
>>1);

192 
g
+=(
m3
>>1);

198 
r
=
m1
;

199 
b
=
m2
;

200 
g
=
m3
;

203 if(
r
&0x7FFFFF00)Ñ=0xff;

204 if(
b
&0x7FFFFF00) b=0xff;

205 if(
g
&0x7FFFFF00) g=0xff;

207 
	`Dôhî16
(
pde°
,
r
,
b
,
g
,
sSëMask
);

208 
	}
}

212 
INLINE
 
	$GëShadeTønsCﬁ
(* 
pde°
,
cﬁ‹
)

214 if(
bCheckMask
 && (*
pde°
 & 
	`HOST2LE16
(0x8000))) ;

216 if(
DøwSemiTøns
)

218 
öt32_t
 
r
,
g
,
b
;

220 if(
GlobÆTextABR
==0)

222 
	`PUTLE16
(
pde°
, (((
	`GETLE16
’de°)&0x7bde)>>1)+(((
cﬁ‹
)&0x7bde)>>1))|
sSëMask
);

226 if(
GlobÆTextABR
==1)

228 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((XCOL1(
cﬁ‹
)));

229 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((XCOL2(
cﬁ‹
)));

230 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((XCOL3(
cﬁ‹
)));

233 if(
GlobÆTextABR
==2)

235 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))-((XCOL1(
cﬁ‹
)));

236 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))-((XCOL2(
cﬁ‹
)));

237 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))-((XCOL3(
cﬁ‹
)));

238 if(
r
&0x80000000)Ñ=0;

239 if(
b
&0x80000000) b=0;

240 if(
g
&0x80000000) g=0;

244 #ifde‡
HALFBRIGHTMODE3


245 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((XCOL1(
cﬁ‹
))>>2);

246 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((XCOL2(
cﬁ‹
))>>2);

247 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((XCOL3(
cﬁ‹
))>>2);

249 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((XCOL1(
cﬁ‹
))>>1);

250 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((XCOL2(
cﬁ‹
))>>1);

251 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((XCOL3(
cﬁ‹
))>>1);

255 if(
r
&0x7FFFFFE0)Ñ=0x1f;

256 if(
b
&0x7FFFFC00) b=0x3e0;

257 if(
g
&0x7FFF8000) g=0x7c00;

259 
	`PUTLE16
(
pde°
, (
	`XPSXCOL
(
r
,
g
,
b
))|
sSëMask
);

261 
	`PUTLE16
(
pde°
, 
cﬁ‹
|
sSëMask
);

262 
	}
}

266 
INLINE
 
	$GëShadeTønsCﬁ32
(
uöt32_t
 * 
pde°
,uöt32_à
cﬁ‹
)

268 if(
DøwSemiTøns
)

270 
öt32_t
 
r
,
g
,
b
;

272 if(
GlobÆTextABR
==0)

274 if(!
bCheckMask
)

276 
	`PUTLE32
(
pde°
, (((
	`GETLE32
’de°)&0x7bde7bde)>>1)+(((
cﬁ‹
)&0x7bde7bde)>>1))|
lSëMask
);

279 
r
=(
	`X32ACOL1
(
	`GETLE32
(
pde°
))>>1)+((X32ACOL1(
cﬁ‹
))>>1);

280 
b
=(
	`X32ACOL2
(
	`GETLE32
(
pde°
))>>1)+((X32ACOL2(
cﬁ‹
))>>1);

281 
g
=(
	`X32ACOL3
(
	`GETLE32
(
pde°
))>>1)+((X32ACOL3(
cﬁ‹
))>>1);

284 if(
GlobÆTextABR
==1)

286 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+((X32COL1(
cﬁ‹
)));

287 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+((X32COL2(
cﬁ‹
)));

288 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+((X32COL3(
cﬁ‹
)));

291 if(
GlobÆTextABR
==2)

293 
öt32_t
 
§
,
sb
,
sg
,
§c
,
sbc
,
sgc
,
c
;

294 
§c
=
	`XCOL1
(
cﬁ‹
);
sbc
=
	`XCOL2
(cﬁ‹);
sgc
=
	`XCOL3
(color);

295 
c
=
	`GETLE32
(
pde°
)>>16;

296 
§
=(
	`XCOL1
(
c
))-
§c
; if(sr&0x8000) sr=0;

297 
sb
=(
	`XCOL2
(
c
))-
sbc
; if(sb&0x8000) sb=0;

298 
sg
=(
	`XCOL3
(
c
))-
sgc
; if(sg&0x8000) sg=0;

299 
r
=((
öt32_t
)
§
)<<16;
b
=((öt32_t)
sb
)<<11;
g
=((öt32_t)
sg
)<<6;

300 
c
=
	`LOWORD
(
	`GETLE32
(
pde°
));

301 
§
=(
	`XCOL1
(
c
))-
§c
; if(sr&0x8000) sr=0;

302 
sb
=(
	`XCOL2
(
c
))-
sbc
; if(sb&0x8000) sb=0;

303 
sg
=(
	`XCOL3
(
c
))-
sgc
; if(sg&0x8000) sg=0;

304 
r
|=
§
;
b
|=
sb
>>5;
g
|=
sg
>>10;

308 #ifde‡
HALFBRIGHTMODE3


309 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+((
	`X32BCOL1
(
cﬁ‹
))>>2);

310 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+((
	`X32BCOL2
(
cﬁ‹
))>>2);

311 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+((
	`X32BCOL3
(
cﬁ‹
))>>2);

313 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+((
	`X32ACOL1
(
cﬁ‹
))>>1);

314 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+((
	`X32ACOL2
(
cﬁ‹
))>>1);

315 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+((
	`X32ACOL3
(
cﬁ‹
))>>1);

319 if(
r
&0x7FE00000)Ñ=0x1f0000|(r&0xFFFF);

320 if(
r
&0x7FE0)Ñ=0x1f |(r&0xFFFF0000);

321 if(
b
&0x7FE00000) b=0x1f0000|(b&0xFFFF);

322 if(
b
&0x7FE0) b=0x1f |(b&0xFFFF0000);

323 if(
g
&0x7FE00000) g=0x1f0000|(g&0xFFFF);

324 if(
g
&0x7FE0) g=0x1f |(g&0xFFFF0000);

326 if(
bCheckMask
)

328 
uöt32_t
 
ma
=
	`GETLE32
(
pde°
);

329 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
);

330 if(
ma
&0x80000000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFF0000)|(*pdest&0xFFFF));

331 if(
ma
&0x00008000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFF) |(*pdest&0xFFFF0000));

334 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
);

338 if(
bCheckMask
)

340 
uöt32_t
 
ma
=
	`GETLE32
(
pde°
);

341 
	`PUTLE32
(
pde°
, 
cﬁ‹
|
lSëMask
);

342 if(
ma
&0x80000000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFF0000)|(
	`GETLE32
(pdest)&0xFFFF));

343 if(
ma
&0x00008000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFFË|(
	`GETLE32
(pdest)&0xFFFF0000));

347 
	`PUTLE32
(
pde°
, 
cﬁ‹
|
lSëMask
);

349 
	}
}

353 
INLINE
 
	$GëTextuªTønsCﬁG
(* 
pde°
,
cﬁ‹
)

355 
öt32_t
 
r
,
g
,
b
;
l
;

357 if(
cﬁ‹
==0) ;

359 if(
bCheckMask
 && (*
pde°
 & 
	`HOST2LE16
(0x8000))) ;

361 
l
=
sSëMask
|(
cﬁ‹
&0x8000);

363 if(
DøwSemiTøns
 && (
cﬁ‹
&0x8000))

365 if(
GlobÆTextABR
==0)

367 
d
;

368 
d
 =(
	`GETLE16
(
pde°
)&0x7bde)>>1;

369 
cﬁ‹
 =((color) &0x7bde)>>1;

370 
r
=(
	`XCOL1
(
d
))+((((XCOL1(
cﬁ‹
)))* 
g_m1
)>>7);

371 
b
=(
	`XCOL2
(
d
))+((((XCOL2(
cﬁ‹
)))* 
g_m2
)>>7);

372 
g
=(
	`XCOL3
(
d
))+((((XCOL3(
cﬁ‹
)))* 
g_m3
)>>7);

375 if(
GlobÆTextABR
==1)

377 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
)))* 
g_m1
)>>7);

378 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
)))* 
g_m2
)>>7);

379 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
)))* 
g_m3
)>>7);

382 if(
GlobÆTextABR
==2)

384 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))-((((XCOL1(
cﬁ‹
)))* 
g_m1
)>>7);

385 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))-((((XCOL2(
cﬁ‹
)))* 
g_m2
)>>7);

386 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))-((((XCOL3(
cﬁ‹
)))* 
g_m3
)>>7);

387 if(
r
&0x80000000)Ñ=0;

388 if(
b
&0x80000000) b=0;

389 if(
g
&0x80000000) g=0;

393 #ifde‡
HALFBRIGHTMODE3


394 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
))>>2)* 
g_m1
)>>7);

395 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
))>>2)* 
g_m2
)>>7);

396 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
))>>2)* 
g_m3
)>>7);

398 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
))>>1)* 
g_m1
)>>7);

399 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
))>>1)* 
g_m2
)>>7);

400 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
))>>1)* 
g_m3
)>>7);

406 
r
=((
	`XCOL1
(
cﬁ‹
))* 
g_m1
)>>7;

407 
b
=((
	`XCOL2
(
cﬁ‹
))* 
g_m2
)>>7;

408 
g
=((
	`XCOL3
(
cﬁ‹
))* 
g_m3
)>>7;

411 if(
r
&0x7FFFFFE0)Ñ=0x1f;

412 if(
b
&0x7FFFFC00) b=0x3e0;

413 if(
g
&0x7FFF8000) g=0x7c00;

415 
	`PUTLE16
(
pde°
, (
	`XPSXCOL
(
r
,
g
,
b
))|
l
);

416 
	}
}

420 
INLINE
 
	$GëTextuªTønsCﬁG_S
(* 
pde°
,
cﬁ‹
)

422 
öt32_t
 
r
,
g
,
b
;
l
;

424 if(
cﬁ‹
==0) ;

426 
l
=
sSëMask
|(
cﬁ‹
&0x8000);

428 
r
=((
	`XCOL1
(
cﬁ‹
))* 
g_m1
)>>7;

429 
b
=((
	`XCOL2
(
cﬁ‹
))* 
g_m2
)>>7;

430 
g
=((
	`XCOL3
(
cﬁ‹
))* 
g_m3
)>>7;

432 if(
r
&0x7FFFFFE0)Ñ=0x1f;

433 if(
b
&0x7FFFFC00) b=0x3e0;

434 if(
g
&0x7FFF8000) g=0x7c00;

436 
	`PUTLE16
(
pde°
, (
	`XPSXCOL
(
r
,
g
,
b
))|
l
);

437 
	}
}

441 
INLINE
 
	$GëTextuªTønsCﬁG_SPR
(* 
pde°
,
cﬁ‹
)

443 
öt32_t
 
r
,
g
,
b
;
l
;

445 if(
cﬁ‹
==0) ;

447 if(
bCheckMask
 && (
	`GETLE16
(
pde°
) & 0x8000)) ;

449 
l
=
sSëMask
|(
cﬁ‹
&0x8000);

451 if(
DøwSemiTøns
 && (
cﬁ‹
&0x8000))

453 if(
GlobÆTextABR
==0)

455 
d
;

456 
d
 =(
	`GETLE16
(
pde°
)&0x7bde)>>1;

457 
cﬁ‹
 =((color) &0x7bde)>>1;

458 
r
=(
	`XCOL1
(
d
))+((((XCOL1(
cﬁ‹
)))* 
g_m1
)>>7);

459 
b
=(
	`XCOL2
(
d
))+((((XCOL2(
cﬁ‹
)))* 
g_m2
)>>7);

460 
g
=(
	`XCOL3
(
d
))+((((XCOL3(
cﬁ‹
)))* 
g_m3
)>>7);

463 if(
GlobÆTextABR
==1)

465 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
)))* 
g_m1
)>>7);

466 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
)))* 
g_m2
)>>7);

467 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
)))* 
g_m3
)>>7);

470 if(
GlobÆTextABR
==2)

472 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))-((((XCOL1(
cﬁ‹
)))* 
g_m1
)>>7);

473 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))-((((XCOL2(
cﬁ‹
)))* 
g_m2
)>>7);

474 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))-((((XCOL3(
cﬁ‹
)))* 
g_m3
)>>7);

475 if(
r
&0x80000000)Ñ=0;

476 if(
b
&0x80000000) b=0;

477 if(
g
&0x80000000) g=0;

481 #ifde‡
HALFBRIGHTMODE3


482 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
))>>2)* 
g_m1
)>>7);

483 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
))>>2)* 
g_m2
)>>7);

484 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
))>>2)* 
g_m3
)>>7);

486 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
))>>1)* 
g_m1
)>>7);

487 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
))>>1)* 
g_m2
)>>7);

488 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
))>>1)* 
g_m3
)>>7);

494 
r
=((
	`XCOL1
(
cﬁ‹
))* 
g_m1
)>>7;

495 
b
=((
	`XCOL2
(
cﬁ‹
))* 
g_m2
)>>7;

496 
g
=((
	`XCOL3
(
cﬁ‹
))* 
g_m3
)>>7;

499 if(
r
&0x7FFFFFE0)Ñ=0x1f;

500 if(
b
&0x7FFFFC00) b=0x3e0;

501 if(
g
&0x7FFF8000) g=0x7c00;

503 
	`PUTLE16
(
pde°
, (
	`XPSXCOL
(
r
,
g
,
b
))|
l
);

504 
	}
}

508 
INLINE
 
	$GëTextuªTønsCﬁG32
(
uöt32_t
 * 
pde°
,uöt32_à
cﬁ‹
)

510 
öt32_t
 
r
,
g
,
b
,
l
;

512 if(
cﬁ‹
==0) ;

514 
l
=
lSëMask
|(
cﬁ‹
&0x80008000);

516 if(
DøwSemiTøns
 && (
cﬁ‹
&0x80008000))

518 if(
GlobÆTextABR
==0)

520 
r
=((((
	`X32TCOL1
(
	`GETLE32
(
pde°
)))+((
	`X32COL1
(
cﬁ‹
)Ë* 
g_m1
))&0xFF00FF00)>>8);

521 
b
=((((
	`X32TCOL2
(
	`GETLE32
(
pde°
)))+((
	`X32COL2
(
cﬁ‹
)Ë* 
g_m2
))&0xFF00FF00)>>8);

522 
g
=((((
	`X32TCOL3
(
	`GETLE32
(
pde°
)))+((
	`X32COL3
(
cﬁ‹
)Ë* 
g_m3
))&0xFF00FF00)>>8);

525 if(
GlobÆTextABR
==1)

527 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+(((((X32COL1(
cﬁ‹
)))* 
g_m1
)&0xFF80FF80)>>7);

528 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+(((((X32COL2(
cﬁ‹
)))* 
g_m2
)&0xFF80FF80)>>7);

529 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+(((((X32COL3(
cﬁ‹
)))* 
g_m3
)&0xFF80FF80)>>7);

532 if(
GlobÆTextABR
==2)

534 
öt32_t
 
t
;

535 
r
=(((((
	`X32COL1
(
cﬁ‹
)))* 
g_m1
)&0xFF80FF80)>>7);

536 
t
=(
	`GETLE32
(
pde°
)&0x001f0000)-(
r
&0x003f0000); if(t&0x80000000)Å=0;

537 
r
=(
	`GETLE32
(
pde°
)&0x0000001f)-(r&0x0000003f); if(r&0x80000000)Ñ=0;

538 
r
|=
t
;

540 
b
=(((((
	`X32COL2
(
cﬁ‹
)))* 
g_m2
)&0xFF80FF80)>>7);

541 
t
=((
	`GETLE32
(
pde°
)>>5)&0x001f0000)-(
b
&0x003f0000); if(t&0x80000000)Å=0;

542 
b
=((
	`GETLE32
(
pde°
)>>5)&0x0000001f)-(b&0x0000003f); if(b&0x80000000) b=0;

543 
b
|=
t
;

545 
g
=(((((
	`X32COL3
(
cﬁ‹
)))* 
g_m3
)&0xFF80FF80)>>7);

546 
t
=((
	`GETLE32
(
pde°
)>>10)&0x001f0000)-(
g
&0x003f0000); if(t&0x80000000)Å=0;

547 
g
=((
	`GETLE32
(
pde°
)>>10)&0x0000001f)-(g&0x0000003f); if(g&0x80000000) g=0;

548 
g
|=
t
;

552 #ifde‡
HALFBRIGHTMODE3


553 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+(((((
	`X32BCOL1
(
cﬁ‹
))>>2)* 
g_m1
)&0xFF80FF80)>>7);

554 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+(((((
	`X32BCOL2
(
cﬁ‹
))>>2)* 
g_m2
)&0xFF80FF80)>>7);

555 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+(((((
	`X32BCOL3
(
cﬁ‹
))>>2)* 
g_m3
)&0xFF80FF80)>>7);

557 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+(((((
	`X32ACOL1
(
cﬁ‹
))>>1)* 
g_m1
)&0xFF80FF80)>>7);

558 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+(((((
	`X32ACOL2
(
cﬁ‹
))>>1)* 
g_m2
)&0xFF80FF80)>>7);

559 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+(((((
	`X32ACOL3
(
cﬁ‹
))>>1)* 
g_m3
)&0xFF80FF80)>>7);

563 if(!(
cﬁ‹
&0x8000))

565 
r
=‘&0xffff0000)|((((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0x0000FF80)>>7);

566 
b
=(b&0xffff0000)|((((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0x0000FF80)>>7);

567 
g
=(g&0xffff0000)|((((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0x0000FF80)>>7);

569 if(!(
cﬁ‹
&0x80000000))

571 
r
=‘&0xffff)|((((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0xFF800000)>>7);

572 
b
=(b&0xffff)|((((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0xFF800000)>>7);

573 
g
=(g&0xffff)|((((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0xFF800000)>>7);

579 
r
=(((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0xFF80FF80)>>7;

580 
b
=(((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0xFF80FF80)>>7;

581 
g
=(((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0xFF80FF80)>>7;

584 if(
r
&0x7FE00000)Ñ=0x1f0000|(r&0xFFFF);

585 if(
r
&0x7FE0)Ñ=0x1f |(r&0xFFFF0000);

586 if(
b
&0x7FE00000) b=0x1f0000|(b&0xFFFF);

587 if(
b
&0x7FE0) b=0x1f |(b&0xFFFF0000);

588 if(
g
&0x7FE00000) g=0x1f0000|(g&0xFFFF);

589 if(
g
&0x7FE0) g=0x1f |(g&0xFFFF0000);

591 if(
bCheckMask
)

593 
uöt32_t
 
ma
=
	`GETLE32
(
pde°
);

595 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
l
);

597 if((
cﬁ‹
&0xffff)==0 ) 
	`PUTLE32
(
pde°
, (
ma
&0xffff)|(
	`GETLE32
(pdest)&0xffff0000));

598 if((
cﬁ‹
&0xffff0000)==0Ë
	`PUTLE32
(
pde°
, (
ma
&0xffff0000)|(
	`GETLE32
(pdest)&0xffff));

599 if(
ma
&0x80000000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFF0000)|(
	`GETLE32
(pdest)&0xFFFF));

600 if(
ma
&0x00008000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFFË|(
	`GETLE32
(pdest)&0xFFFF0000));

604 if((
cﬁ‹
&0xffff)==0 ) {
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
l
)&0xffff0000));;}

605 if((
cﬁ‹
&0xffff0000)==0Ë{
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff0000)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
l
)&0xffff));;}

607 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
l
);

608 
	}
}

612 
INLINE
 
	$GëTextuªTønsCﬁG32_S
(
uöt32_t
 * 
pde°
,uöt32_à
cﬁ‹
)

614 
öt32_t
 
r
,
g
,
b
;

616 if(
cﬁ‹
==0) ;

618 
r
=(((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0xFF80FF80)>>7;

619 
b
=(((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0xFF80FF80)>>7;

620 
g
=(((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0xFF80FF80)>>7;

622 if(
r
&0x7FE00000)Ñ=0x1f0000|(r&0xFFFF);

623 if(
r
&0x7FE0)Ñ=0x1f |(r&0xFFFF0000);

624 if(
b
&0x7FE00000) b=0x1f0000|(b&0xFFFF);

625 if(
b
&0x7FE0) b=0x1f |(b&0xFFFF0000);

626 if(
g
&0x7FE00000) g=0x1f0000|(g&0xFFFF);

627 if(
g
&0x7FE0) g=0x1f |(g&0xFFFF0000);

629 if((
cﬁ‹
&0xffff)==0Ë{
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(color&0x80008000))&0xffff0000));;}

630 if((
cﬁ‹
&0xffff0000)==0Ë{
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff0000)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(color&0x80008000))&0xffff));;}

632 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(
cﬁ‹
&0x80008000));

633 
	}
}

637 
INLINE
 
	$GëTextuªTønsCﬁG32_SPR
(
uöt32_t
 * 
pde°
,uöt32_à
cﬁ‹
)

639 
öt32_t
 
r
,
g
,
b
;

641 if(
cﬁ‹
==0) ;

643 if(
DøwSemiTøns
 && (
cﬁ‹
&0x80008000))

645 if(
GlobÆTextABR
==0)

647 
r
=((((
	`X32TCOL1
(
	`GETLE32
(
pde°
)))+((
	`X32COL1
(
cﬁ‹
)Ë* 
g_m1
))&0xFF00FF00)>>8);

648 
b
=((((
	`X32TCOL2
(
	`GETLE32
(
pde°
)))+((
	`X32COL2
(
cﬁ‹
)Ë* 
g_m2
))&0xFF00FF00)>>8);

649 
g
=((((
	`X32TCOL3
(
	`GETLE32
(
pde°
)))+((
	`X32COL3
(
cﬁ‹
)Ë* 
g_m3
))&0xFF00FF00)>>8);

652 if(
GlobÆTextABR
==1)

654 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+(((((X32COL1(
cﬁ‹
)))* 
g_m1
)&0xFF80FF80)>>7);

655 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+(((((X32COL2(
cﬁ‹
)))* 
g_m2
)&0xFF80FF80)>>7);

656 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+(((((X32COL3(
cﬁ‹
)))* 
g_m3
)&0xFF80FF80)>>7);

659 if(
GlobÆTextABR
==2)

661 
öt32_t
 
t
;

662 
r
=(((((
	`X32COL1
(
cﬁ‹
)))* 
g_m1
)&0xFF80FF80)>>7);

663 
t
=(
	`GETLE32
(
pde°
)&0x001f0000)-(
r
&0x003f0000); if(t&0x80000000)Å=0;

664 
r
=(
	`GETLE32
(
pde°
)&0x0000001f)-(r&0x0000003f); if(r&0x80000000)Ñ=0;

665 
r
|=
t
;

667 
b
=(((((
	`X32COL2
(
cﬁ‹
)))* 
g_m2
)&0xFF80FF80)>>7);

668 
t
=((
	`GETLE32
(
pde°
)>>5)&0x001f0000)-(
b
&0x003f0000); if(t&0x80000000)Å=0;

669 
b
=((
	`GETLE32
(
pde°
)>>5)&0x0000001f)-(b&0x0000003f); if(b&0x80000000) b=0;

670 
b
|=
t
;

672 
g
=(((((
	`X32COL3
(
cﬁ‹
)))* 
g_m3
)&0xFF80FF80)>>7);

673 
t
=((
	`GETLE32
(
pde°
)>>10)&0x001f0000)-(
g
&0x003f0000); if(t&0x80000000)Å=0;

674 
g
=((
	`GETLE32
(
pde°
)>>10)&0x0000001f)-(g&0x0000003f); if(g&0x80000000) g=0;

675 
g
|=
t
;

679 #ifde‡
HALFBRIGHTMODE3


680 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+(((((
	`X32BCOL1
(
cﬁ‹
))>>2)* 
g_m1
)&0xFF80FF80)>>7);

681 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+(((((
	`X32BCOL2
(
cﬁ‹
))>>2)* 
g_m2
)&0xFF80FF80)>>7);

682 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+(((((
	`X32BCOL3
(
cﬁ‹
))>>2)* 
g_m3
)&0xFF80FF80)>>7);

684 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+(((((
	`X32ACOL1
(
cﬁ‹
))>>1)* 
g_m1
)&0xFF80FF80)>>7);

685 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+(((((
	`X32ACOL2
(
cﬁ‹
))>>1)* 
g_m2
)&0xFF80FF80)>>7);

686 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+(((((
	`X32ACOL3
(
cﬁ‹
))>>1)* 
g_m3
)&0xFF80FF80)>>7);

690 if(!(
cﬁ‹
&0x8000))

692 
r
=‘&0xffff0000)|((((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0x0000FF80)>>7);

693 
b
=(b&0xffff0000)|((((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0x0000FF80)>>7);

694 
g
=(g&0xffff0000)|((((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0x0000FF80)>>7);

696 if(!(
cﬁ‹
&0x80000000))

698 
r
=‘&0xffff)|((((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0xFF800000)>>7);

699 
b
=(b&0xffff)|((((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0xFF800000)>>7);

700 
g
=(g&0xffff)|((((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0xFF800000)>>7);

706 
r
=(((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0xFF80FF80)>>7;

707 
b
=(((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0xFF80FF80)>>7;

708 
g
=(((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0xFF80FF80)>>7;

711 if(
r
&0x7FE00000)Ñ=0x1f0000|(r&0xFFFF);

712 if(
r
&0x7FE0)Ñ=0x1f |(r&0xFFFF0000);

713 if(
b
&0x7FE00000) b=0x1f0000|(b&0xFFFF);

714 if(
b
&0x7FE0) b=0x1f |(b&0xFFFF0000);

715 if(
g
&0x7FE00000) g=0x1f0000|(g&0xFFFF);

716 if(
g
&0x7FE0) g=0x1f |(g&0xFFFF0000);

718 if(
bCheckMask
)

720 
uöt32_t
 
ma
=
	`GETLE32
(
pde°
);

722 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(
cﬁ‹
&0x80008000));

724 if((
cﬁ‹
&0xffff)==0 ) 
	`PUTLE32
(
pde°
, (
ma
&0xffff)|(
	`GETLE32
(pdest)&0xffff0000));

725 if((
cﬁ‹
&0xffff0000)==0Ë
	`PUTLE32
(
pde°
, (
ma
&0xffff0000)|(
	`GETLE32
(pdest)&0xffff));

726 if(
ma
&0x80000000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFF0000)|(
	`GETLE32
(pdest)&0xFFFF));

727 if(
ma
&0x00008000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFFË|(
	`GETLE32
(pdest)&0xFFFF0000));

731 if((
cﬁ‹
&0xffff)==0 ) {
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(color&0x80008000))&0xffff0000));;}

732 if((
cﬁ‹
&0xffff0000)==0Ë{
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff0000)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(color&0x80008000))&0xffff));;}

734 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(
cﬁ‹
&0x80008000));

735 
	}
}

739 
INLINE
 
	$GëTextuªTønsCﬁGX_Dôhî
(* 
pde°
,
cﬁ‹
,
öt32_t
 
m1
,öt32_à
m2
,öt32_à
m3
)

741 
öt32_t
 
r
,
g
,
b
;

743 if(
cﬁ‹
==0) ;

745 if(
bCheckMask
 && (*
pde°
 & 
	`HOST2LE16
(0x8000))) ;

747 
m1
=(((
	`XCOL1D
(
cﬁ‹
)))*m1)>>4;

748 
m2
=(((
	`XCOL2D
(
cﬁ‹
)))*m2)>>4;

749 
m3
=(((
	`XCOL3D
(
cﬁ‹
)))*m3)>>4;

751 if(
DøwSemiTøns
 && (
cﬁ‹
&0x8000))

753 
r
=((
	`XCOL1D
(
	`GETLE16
(
pde°
)))<<3);

754 
b
=((
	`XCOL2D
(
	`GETLE16
(
pde°
)))<<3);

755 
g
=((
	`XCOL3D
(
	`GETLE16
(
pde°
)))<<3);

757 if(
GlobÆTextABR
==0)

759 
r
=‘>>1)+(
m1
>>1);

760 
b
=(b>>1)+(
m2
>>1);

761 
g
=(g>>1)+(
m3
>>1);

764 if(
GlobÆTextABR
==1)

766 
r
+=
m1
;

767 
b
+=
m2
;

768 
g
+=
m3
;

771 if(
GlobÆTextABR
==2)

773 
r
-=
m1
;

774 
b
-=
m2
;

775 
g
-=
m3
;

776 if(
r
&0x80000000)Ñ=0;

777 if(
b
&0x80000000) b=0;

778 if(
g
&0x80000000) g=0;

782 #ifde‡
HALFBRIGHTMODE3


783 
r
+=(
m1
>>2);

784 
b
+=(
m2
>>2);

785 
g
+=(
m3
>>2);

787 
r
+=(
m1
>>1);

788 
b
+=(
m2
>>1);

789 
g
+=(
m3
>>1);

795 
r
=
m1
;

796 
b
=
m2
;

797 
g
=
m3
;

800 if(
r
&0x7FFFFF00)Ñ=0xff;

801 if(
b
&0x7FFFFF00) b=0xff;

802 if(
g
&0x7FFFFF00) g=0xff;

804 
	`Dôhî16
(
pde°
,
r
,
b
,
g
,
sSëMask
|(
cﬁ‹
&0x8000));

806 
	}
}

810 
INLINE
 
	$GëTextuªTønsCﬁGX
(* 
pde°
,
cﬁ‹
,
m1
,
m2
,
m3
)

812 
öt32_t
 
r
,
g
,
b
;
l
;

814 if(
cﬁ‹
==0) ;

816 if(
bCheckMask
 && (*
pde°
 & 
	`HOST2LE16
(0x8000))) ;

818 
l
=
sSëMask
|(
cﬁ‹
&0x8000);

820 if(
DøwSemiTøns
 && (
cﬁ‹
&0x8000))

822 if(
GlobÆTextABR
==0)

824 
d
;

825 
d
 =(
	`GETLE16
(
pde°
)&0x7bde)>>1;

826 
cﬁ‹
 =((color) &0x7bde)>>1;

827 
r
=(
	`XCOL1
(
d
))+((((XCOL1(
cﬁ‹
)))* 
m1
)>>7);

828 
b
=(
	`XCOL2
(
d
))+((((XCOL2(
cﬁ‹
)))* 
m2
)>>7);

829 
g
=(
	`XCOL3
(
d
))+((((XCOL3(
cﬁ‹
)))* 
m3
)>>7);

832 if(
GlobÆTextABR
==1)

834 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
)))* 
m1
)>>7);

835 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
)))* 
m2
)>>7);

836 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
)))* 
m3
)>>7);

839 if(
GlobÆTextABR
==2)

841 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))-((((XCOL1(
cﬁ‹
)))* 
m1
)>>7);

842 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))-((((XCOL2(
cﬁ‹
)))* 
m2
)>>7);

843 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))-((((XCOL3(
cﬁ‹
)))* 
m3
)>>7);

844 if(
r
&0x80000000)Ñ=0;

845 if(
b
&0x80000000) b=0;

846 if(
g
&0x80000000) g=0;

850 #ifde‡
HALFBRIGHTMODE3


851 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
))>>2)* 
m1
)>>7);

852 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
))>>2)* 
m2
)>>7);

853 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
))>>2)* 
m3
)>>7);

855 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
))>>1)* 
m1
)>>7);

856 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
))>>1)* 
m2
)>>7);

857 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
))>>1)* 
m3
)>>7);

863 
r
=((
	`XCOL1
(
cﬁ‹
))* 
m1
)>>7;

864 
b
=((
	`XCOL2
(
cﬁ‹
))* 
m2
)>>7;

865 
g
=((
	`XCOL3
(
cﬁ‹
))* 
m3
)>>7;

868 if(
r
&0x7FFFFFE0)Ñ=0x1f;

869 if(
b
&0x7FFFFC00) b=0x3e0;

870 if(
g
&0x7FFF8000) g=0x7c00;

872 
	`PUTLE16
(
pde°
, (
	`XPSXCOL
(
r
,
g
,
b
))|
l
);

873 
	}
}

877 
INLINE
 
	$GëTextuªTønsCﬁGX_S
(* 
pde°
,
cﬁ‹
,
m1
,
m2
,
m3
)

879 
öt32_t
 
r
,
g
,
b
;

881 if(
cﬁ‹
==0) ;

883 
r
=((
	`XCOL1
(
cﬁ‹
))* 
m1
)>>7;

884 
b
=((
	`XCOL2
(
cﬁ‹
))* 
m2
)>>7;

885 
g
=((
	`XCOL3
(
cﬁ‹
))* 
m3
)>>7;

887 if(
r
&0x7FFFFFE0)Ñ=0x1f;

888 if(
b
&0x7FFFFC00) b=0x3e0;

889 if(
g
&0x7FFF8000) g=0x7c00;

891 
	`PUTLE16
(
pde°
, (
	`XPSXCOL
(
r
,
g
,
b
))|
sSëMask
|(
cﬁ‹
&0x8000));

892 
	}
}

896 
INLINE
 
	$GëTextuªTønsCﬁGX32_S
(
uöt32_t
 * 
pde°
,uöt32_à
cﬁ‹
,
m1
,
m2
,
m3
)

898 
öt32_t
 
r
,
g
,
b
;

900 if(
cﬁ‹
==0) ;

902 
r
=(((
	`X32COL1
(
cﬁ‹
))* 
m1
)&0xFF80FF80)>>7;

903 
b
=(((
	`X32COL2
(
cﬁ‹
))* 
m2
)&0xFF80FF80)>>7;

904 
g
=(((
	`X32COL3
(
cﬁ‹
))* 
m3
)&0xFF80FF80)>>7;

906 if(
r
&0x7FE00000)Ñ=0x1f0000|(r&0xFFFF);

907 if(
r
&0x7FE0)Ñ=0x1f |(r&0xFFFF0000);

908 if(
b
&0x7FE00000) b=0x1f0000|(b&0xFFFF);

909 if(
b
&0x7FE0) b=0x1f |(b&0xFFFF0000);

910 if(
g
&0x7FE00000) g=0x1f0000|(g&0xFFFF);

911 if(
g
&0x7FE0) g=0x1f |(g&0xFFFF0000);

913 if((
cﬁ‹
&0xffff)==0Ë{
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(color&0x80008000))&0xffff0000));;}

914 if((
cﬁ‹
&0xffff0000)==0Ë{
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff0000)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(color&0x80008000))&0xffff));;}

916 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(
cﬁ‹
&0x80008000));

917 
	}
}

923 
	$FûlSo·w¨eAªaTøns
(
x0
,
y0
,
x1
,

924 
y1
,
cﬁ
)

926 
j
,
i
,
dx
,
dy
;

928 if(
y0
>
y1
) ;

929 if(
x0
>
x1
) ;

931 if(
x1
<
døwX
) ;

932 if(
y1
<
døwY
) ;

933 if(
x0
>
døwW
) ;

934 if(
y0
>
døwH
) ;

936 
x1
=
	`mö
(x1,
døwW
+1);

937 
y1
=
	`mö
(y1,
døwH
+1);

938 
x0
=
	`max
(x0,
døwX
);

939 
y0
=
	`max
(y0,
døwY
);

941 if(
y0
>=512) ;

942 if(
x0
>1023) ;

944 if(
y1
>512) y1=512;

945 if(
x1
>1024) x1=1024;

947 
dx
=
x1
-
x0
;
dy
=
y1
-
y0
;

949 if(
dx
==1 && 
dy
==1 && 
x0
==1020 && 
y0
==511)

951 
iChót
=0;

952 
cﬁ
+=
iChót
;

953 if(
iChót
==1) iCheat=0; iCheat=1;

957 if(
dx
&1)

959 *
DSTPå
;

960 
LöeOff£t
;

961 
DSTPå
 = 
psxVuw
 + (1024*
y0
Ë+ 
x0
;

962 
LöeOff£t
 = 1024 - 
dx
;

963 
i
=0;i<
dy
;i++)

965 
j
=0;j<
dx
;j++)

966 
	`GëShadeTønsCﬁ
(
DSTPå
++,
cﬁ
);

967 
DSTPå
 +
LöeOff£t
;

972 
uöt32_t
 *
DSTPå
;

973 
LöeOff£t
;

974 
uöt32_t
 
lcﬁ
=
lSëMask
|(((uöt32_t)(
cﬁ
))<<16)|col;

975 
dx
>>=1;

976 
DSTPå
 = (
uöt32_t
 *)(
psxVuw
 + (1024*
y0
Ë+ 
x0
);

977 
LöeOff£t
 = 512 - 
dx
;

979 if(!
bCheckMask
 && !
DøwSemiTøns
)

981 
i
=0;i<
dy
;i++)

983 
j
=0;j<
dx
;j++Ë{ 
	`PUTLE32
(
DSTPå
, 
lcﬁ
); DSTPtr++; }

984 
DSTPå
 +
LöeOff£t
;

989 
i
=0;i<
dy
;i++)

991 
j
=0;j<
dx
;j++)

992 
	`GëShadeTønsCﬁ32
(
DSTPå
++,
lcﬁ
);

993 
DSTPå
 +
LöeOff£t
;

997 
	}
}

1001 
	$FûlSo·w¨eAªa
(
x0
,
y0
,
x1
,

1002 
y1
,
cﬁ
)

1004 
j
,
i
,
dx
,
dy
;

1006 if(
y0
>
y1
) ;

1007 if(
x0
>
x1
) ;

1009 if(
y0
>=512) ;

1010 if(
x0
>1023) ;

1012 if(
y1
>512) y1=512;

1013 if(
x1
>1024) x1=1024;

1015 
dx
=
x1
-
x0
;
dy
=
y1
-
y0
;

1016 if(
dx
&1)

1018 *
DSTPå
;

1019 
LöeOff£t
;

1021 
DSTPå
 = 
psxVuw
 + (1024*
y0
Ë+ 
x0
;

1022 
LöeOff£t
 = 1024 - 
dx
;

1024 
i
=0;i<
dy
;i++)

1026 
j
=0;j<
dx
;j++Ë{ 
	`PUTLE16
(
DSTPå
, 
cﬁ
); DSTPtr++; }

1027 
DSTPå
 +
LöeOff£t
;

1032 
uöt32_t
 *
DSTPå
;

1033 
LöeOff£t
;

1034 
uöt32_t
 
lcﬁ
=(((
öt32_t
)
cﬁ
)<<16)|col;

1035 
dx
>>=1;

1036 
DSTPå
 = (
uöt32_t
 *)(
psxVuw
 + (1024*
y0
Ë+ 
x0
);

1037 
LöeOff£t
 = 512 - 
dx
;

1039 
i
=0;i<
dy
;i++)

1041 
j
=0;j<
dx
;j++Ë{ 
	`PUTLE32
(
DSTPå
, 
lcﬁ
); DSTPtr++; }

1042 
DSTPå
 +
LöeOff£t
;

1045 
	}
}

1055 
	sSOFTVTAG


1057 
	mx
,
	my
;

1058 
	mu
,
	mv
;

1059 
öt32_t
 
	mR
,
	mG
,
	mB
;

1060 } 
	tso·_vîãx
;

1062 
so·_vîãx
 
	gvtx
[4];

1063 
so·_vîãx
 * 
	gÀ·_¨øy
[4], * 
	gright_¨øy
[4];

1064 
	gÀ·_£˘i⁄
, 
	gright_£˘i⁄
;

1065 
	gÀ·_£˘i⁄_height
, 
	gright_£˘i⁄_height
;

1066 
	gÀ·_x
, 
	gdñè_À·_x
, 
	gright_x
, 
	gdñè_right_x
;

1067 
	gÀ·_u
, 
	gdñè_À·_u
, 
	gÀ·_v
, 
	gdñè_À·_v
;

1068 
	gright_u
, 
	gdñè_right_u
, 
	gright_v
, 
	gdñè_right_v
;

1069 
	gÀ·_R
, 
	gdñè_À·_R
, 
	gright_R
, 
	gdñè_right_R
;

1070 
	gÀ·_G
, 
	gdñè_À·_G
, 
	gright_G
, 
	gdñè_right_G
;

1071 
	gÀ·_B
, 
	gdñè_À·_B
, 
	gright_B
, 
	gdñè_right_B
;

1074 
INLINE
 
	$shl10idiv
(
x
, 
y
)

1076 
__öt64
 
bi
=
x
;

1077 
bi
<<=10;

1078  
bi
/
y
;

1079 
	}
}

1085 
INLINE
 
	$RightSe˘i⁄_F
()

1087 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

1088 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

1090 
height
 = 
v2
->
y
 - 
v1
->y;

1091 if(
height
 == 0)  0;

1092 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1093 
right_x
 = 
v1
->
x
;

1095 
right_£˘i⁄_height
 = 
height
;

1096  
height
;

1097 
	}
}

1101 
INLINE
 
	$Le·Se˘i⁄_F
()

1103 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

1104 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

1106 
height
 = 
v2
->
y
 - 
v1
->y;

1107 if(
height
 == 0)  0;

1108 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1109 
À·_x
 = 
v1
->
x
;

1111 
À·_£˘i⁄_height
 = 
height
;

1112  
height
;

1113 
	}
}

1117 
INLINE
 
BOOL
 
	$NextRow_F
()

1119 if(--
À·_£˘i⁄_height
<=0)

1121 if(--
À·_£˘i⁄
 <0Ë{ 
TRUE
;}

1122 if(
	`Le·Se˘i⁄_F
(Ë<0Ë{ 
TRUE
;}

1126 
À·_x
 +
dñè_À·_x
;

1129 if(--
right_£˘i⁄_height
<=0)

1131 if(--
right_£˘i⁄
<=0Ë{ 
TRUE
;}

1132 if(
	`RightSe˘i⁄_F
(Ë<=0Ë{ 
TRUE
;}

1136 
right_x
 +
dñè_right_x
;

1138  
FALSE
;

1139 
	}
}

1143 
INLINE
 
BOOL
 
	$SëupSe˘i⁄s_F
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
)

1145 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
;

1146 
height
,
l⁄ge°
;

1148 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

1149 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

1150 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

1152 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

1153 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

1154 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

1156 
height
 = 
v3
->
y
 - 
v1
->y;

1157 if(
height
 =0Ë{ 
FALSE
;}

1158 
l⁄ge°
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

1159 if(
l⁄ge°
 =0Ë{ 
FALSE
;}

1161 if(
l⁄ge°
 < 0)

1163 
right_¨øy
[0] = 
v3
;

1164 
right_¨øy
[1] = 
v2
;

1165 
right_¨øy
[2] = 
v1
;

1166 
right_£˘i⁄
 = 2;

1167 
À·_¨øy
[0] = 
v3
;

1168 
À·_¨øy
[1] = 
v1
;

1169 
À·_£˘i⁄
 = 1;

1171 if(
	`Le·Se˘i⁄_F
(Ë<0Ë 
FALSE
;

1172 if(
	`RightSe˘i⁄_F
() <= 0)

1174 
right_£˘i⁄
--;

1175 if(
	`RightSe˘i⁄_F
(Ë<0Ë 
FALSE
;

1180 
À·_¨øy
[0] = 
v3
;

1181 
À·_¨øy
[1] = 
v2
;

1182 
À·_¨øy
[2] = 
v1
;

1183 
À·_£˘i⁄
 = 2;

1184 
right_¨øy
[0] = 
v3
;

1185 
right_¨øy
[1] = 
v1
;

1186 
right_£˘i⁄
 = 1;

1188 if(
	`RightSe˘i⁄_F
(Ë<0Ë 
FALSE
;

1189 if(
	`Le·Se˘i⁄_F
() <= 0)

1191 
À·_£˘i⁄
--;

1192 if(
	`Le·Se˘i⁄_F
(Ë<0Ë 
FALSE
;

1196 
Ymö
=
v1
->
y
;

1197 
Ymax
=
	`mö
(
v3
->
y
-1,
døwH
);

1199  
TRUE
;

1200 
	}
}

1205 
INLINE
 
	$RightSe˘i⁄_G
()

1207 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

1208 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

1210 
height
 = 
v2
->
y
 - 
v1
->y;

1211 if(
height
 == 0)  0;

1212 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1213 
right_x
 = 
v1
->
x
;

1215 
right_£˘i⁄_height
 = 
height
;

1216  
height
;

1217 
	}
}

1221 
INLINE
 
	$Le·Se˘i⁄_G
()

1223 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

1224 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

1226 
height
 = 
v2
->
y
 - 
v1
->y;

1227 if(
height
 == 0)  0;

1228 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1229 
À·_x
 = 
v1
->
x
;

1231 
dñè_À·_R
 = ((
v2
->
R
 - 
v1
->R)Ë/ 
height
;

1232 
À·_R
 = 
v1
->
R
;

1233 
dñè_À·_G
 = ((
v2
->
G
 - 
v1
->G)Ë/ 
height
;

1234 
À·_G
 = 
v1
->
G
;

1235 
dñè_À·_B
 = ((
v2
->
B
 - 
v1
->B)Ë/ 
height
;

1236 
À·_B
 = 
v1
->
B
;

1238 
À·_£˘i⁄_height
 = 
height
;

1239  
height
;

1240 
	}
}

1244 
INLINE
 
BOOL
 
	$NextRow_G
()

1246 if(--
À·_£˘i⁄_height
<=0)

1248 if(--
À·_£˘i⁄
 <0Ë{ 
TRUE
;}

1249 if(
	`Le·Se˘i⁄_G
(Ë<0Ë{ 
TRUE
;}

1253 
À·_x
 +
dñè_À·_x
;

1254 
À·_R
 +
dñè_À·_R
;

1255 
À·_G
 +
dñè_À·_G
;

1256 
À·_B
 +
dñè_À·_B
;

1259 if(--
right_£˘i⁄_height
<=0)

1261 if(--
right_£˘i⁄
<=0Ë{ 
TRUE
;}

1262 if(
	`RightSe˘i⁄_G
(Ë<=0Ë{ 
TRUE
;}

1266 
right_x
 +
dñè_right_x
;

1268  
FALSE
;

1269 
	}
}

1273 
INLINE
 
BOOL
 
	$SëupSe˘i⁄s_G
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
öt32_t
 
rgb1
, i¡32_à
rgb2
, i¡32_à
rgb3
)

1275 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
;

1276 
height
,
l⁄ge°
,
ãmp
;

1278 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

1279 
v1
->
R
=(
rgb1
) & 0x00ff0000;

1280 
v1
->
G
=(
rgb1
<<8) & 0x00ff0000;

1281 
v1
->
B
=(
rgb1
<<16) & 0x00ff0000;

1282 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

1283 
v2
->
R
=(
rgb2
) & 0x00ff0000;

1284 
v2
->
G
=(
rgb2
<<8) & 0x00ff0000;

1285 
v2
->
B
=(
rgb2
<<16) & 0x00ff0000;

1286 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

1287 
v3
->
R
=(
rgb3
) & 0x00ff0000;

1288 
v3
->
G
=(
rgb3
<<8) & 0x00ff0000;

1289 
v3
->
B
=(
rgb3
<<16) & 0x00ff0000;

1291 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

1292 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

1293 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

1295 
height
 = 
v3
->
y
 - 
v1
->y;

1296 if(
height
 =0Ë{ 
FALSE
;}

1297 
ãmp
=(((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
);

1298 
l⁄ge°
 = 
ãmp
 * ((
v3
->
x
 - 
v1
->x)>>16Ë+ (v1->x - 
v2
->x);

1299 if(
l⁄ge°
 =0Ë{ 
FALSE
;}

1301 if(
l⁄ge°
 < 0)

1303 
right_¨øy
[0] = 
v3
;

1304 
right_¨øy
[1] = 
v2
;

1305 
right_¨øy
[2] = 
v1
;

1306 
right_£˘i⁄
 = 2;

1307 
À·_¨øy
[0] = 
v3
;

1308 
À·_¨øy
[1] = 
v1
;

1309 
À·_£˘i⁄
 = 1;

1311 if(
	`Le·Se˘i⁄_G
(Ë<0Ë 
FALSE
;

1312 if(
	`RightSe˘i⁄_G
() <= 0)

1314 
right_£˘i⁄
--;

1315 if(
	`RightSe˘i⁄_G
(Ë<0Ë 
FALSE
;

1317 if(
l⁄ge°
 > -0x1000)Üongest = -0x1000;

1321 
À·_¨øy
[0] = 
v3
;

1322 
À·_¨øy
[1] = 
v2
;

1323 
À·_¨øy
[2] = 
v1
;

1324 
À·_£˘i⁄
 = 2;

1325 
right_¨øy
[0] = 
v3
;

1326 
right_¨øy
[1] = 
v1
;

1327 
right_£˘i⁄
 = 1;

1329 if(
	`RightSe˘i⁄_G
(Ë<0Ë 
FALSE
;

1330 if(
	`Le·Se˘i⁄_G
() <= 0)

1332 
À·_£˘i⁄
--;

1333 if(
	`Le·Se˘i⁄_G
(Ë<0Ë 
FALSE
;

1335 if(
l⁄ge°
 < 0x1000)Üongest = 0x1000;

1338 
Ymö
=
v1
->
y
;

1339 
Ymax
=
	`mö
(
v3
->
y
-1,
døwH
);

1341 
dñè_right_R
=
	`shl10idiv
(
ãmp
*((
v3
->
R
 - 
v1
->R)>>10)+((v1->R - 
v2
->R)<<6),
l⁄ge°
);

1342 
dñè_right_G
=
	`shl10idiv
(
ãmp
*((
v3
->
G
 - 
v1
->G)>>10)+((v1->G - 
v2
->G)<<6),
l⁄ge°
);

1343 
dñè_right_B
=
	`shl10idiv
(
ãmp
*((
v3
->
B
 - 
v1
->B)>>10)+((v1->B - 
v2
->B)<<6),
l⁄ge°
);

1345  
TRUE
;

1346 
	}
}

1351 
INLINE
 
	$RightSe˘i⁄_FT
()

1353 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

1354 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

1356 
height
 = 
v2
->
y
 - 
v1
->y;

1357 if(
height
 == 0)  0;

1358 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1359 
right_x
 = 
v1
->
x
;

1361 
right_£˘i⁄_height
 = 
height
;

1362  
height
;

1363 
	}
}

1367 
INLINE
 
	$Le·Se˘i⁄_FT
()

1369 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

1370 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

1372 
height
 = 
v2
->
y
 - 
v1
->y;

1373 if(
height
 == 0)  0;

1374 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1375 
À·_x
 = 
v1
->
x
;

1377 
dñè_À·_u
 = ((
v2
->
u
 - 
v1
->u)Ë/ 
height
;

1378 
À·_u
 = 
v1
->
u
;

1379 
dñè_À·_v
 = ((
v2
->
v
 - 
v1
->v)Ë/ 
height
;

1380 
À·_v
 = 
v1
->
v
;

1382 
À·_£˘i⁄_height
 = 
height
;

1383  
height
;

1384 
	}
}

1388 
INLINE
 
BOOL
 
	$NextRow_FT
()

1390 if(--
À·_£˘i⁄_height
<=0)

1392 if(--
À·_£˘i⁄
 <0Ë{ 
TRUE
;}

1393 if(
	`Le·Se˘i⁄_FT
(Ë<0Ë{ 
TRUE
;}

1397 
À·_x
 +
dñè_À·_x
;

1398 
À·_u
 +
dñè_À·_u
;

1399 
À·_v
 +
dñè_À·_v
;

1402 if(--
right_£˘i⁄_height
<=0)

1404 if(--
right_£˘i⁄
<=0Ë{ 
TRUE
;}

1405 if(
	`RightSe˘i⁄_FT
(Ë<=0Ë{ 
TRUE
;}

1409 
right_x
 +
dñè_right_x
;

1411  
FALSE
;

1412 
	}
}

1416 
INLINE
 
BOOL
 
	$SëupSe˘i⁄s_FT
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
)

1418 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
;

1419 
height
,
l⁄ge°
,
ãmp
;

1421 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

1422 
v1
->
u
=
tx1
<<16;v1->
v
=
ty1
<<16;

1423 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

1424 
v2
->
u
=
tx2
<<16;v2->
v
=
ty2
<<16;

1425 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

1426 
v3
->
u
=
tx3
<<16;v3->
v
=
ty3
<<16;

1428 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

1429 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

1430 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

1432 
height
 = 
v3
->
y
 - 
v1
->y;

1433 if(
height
 =0Ë{ 
FALSE
;}

1435 
ãmp
=(((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
);

1436 
l⁄ge°
 = 
ãmp
 * ((
v3
->
x
 - 
v1
->x)>>16Ë+ (v1->x - 
v2
->x);

1438 if(
l⁄ge°
 =0Ë{ 
FALSE
;}

1440 if(
l⁄ge°
 < 0)

1442 
right_¨øy
[0] = 
v3
;

1443 
right_¨øy
[1] = 
v2
;

1444 
right_¨øy
[2] = 
v1
;

1445 
right_£˘i⁄
 = 2;

1446 
À·_¨øy
[0] = 
v3
;

1447 
À·_¨øy
[1] = 
v1
;

1448 
À·_£˘i⁄
 = 1;

1450 if(
	`Le·Se˘i⁄_FT
(Ë<0Ë 
FALSE
;

1451 if(
	`RightSe˘i⁄_FT
() <= 0)

1453 
right_£˘i⁄
--;

1454 if(
	`RightSe˘i⁄_FT
(Ë<0Ë 
FALSE
;

1456 if(
l⁄ge°
 > -0x1000)Üongest = -0x1000;

1460 
À·_¨øy
[0] = 
v3
;

1461 
À·_¨øy
[1] = 
v2
;

1462 
À·_¨øy
[2] = 
v1
;

1463 
À·_£˘i⁄
 = 2;

1464 
right_¨øy
[0] = 
v3
;

1465 
right_¨øy
[1] = 
v1
;

1466 
right_£˘i⁄
 = 1;

1468 if(
	`RightSe˘i⁄_FT
(Ë<0Ë 
FALSE
;

1469 if(
	`Le·Se˘i⁄_FT
() <= 0)

1471 
À·_£˘i⁄
--;

1472 if(
	`Le·Se˘i⁄_FT
(Ë<0Ë 
FALSE
;

1474 if(
l⁄ge°
 < 0x1000)Üongest = 0x1000;

1477 
Ymö
=
v1
->
y
;

1478 
Ymax
=
	`mö
(
v3
->
y
-1,
døwH
);

1480 
dñè_right_u
=
	`shl10idiv
(
ãmp
*((
v3
->
u
 - 
v1
->u)>>10)+((v1->u - 
v2
->u)<<6),
l⁄ge°
);

1481 
dñè_right_v
=
	`shl10idiv
(
ãmp
*((
v3
->
v
 - 
v1
->v)>>10)+((v1->v - 
v2
->v)<<6),
l⁄ge°
);

1483  
TRUE
;

1484 
	}
}

1489 
INLINE
 
	$RightSe˘i⁄_GT
()

1491 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

1492 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

1494 
height
 = 
v2
->
y
 - 
v1
->y;

1495 if(
height
 == 0)  0;

1496 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1497 
right_x
 = 
v1
->
x
;

1499 
right_£˘i⁄_height
 = 
height
;

1500  
height
;

1501 
	}
}

1505 
INLINE
 
	$Le·Se˘i⁄_GT
()

1507 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

1508 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

1510 
height
 = 
v2
->
y
 - 
v1
->y;

1511 if(
height
 == 0)  0;

1512 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1513 
À·_x
 = 
v1
->
x
;

1515 
dñè_À·_u
 = ((
v2
->
u
 - 
v1
->u)Ë/ 
height
;

1516 
À·_u
 = 
v1
->
u
;

1517 
dñè_À·_v
 = ((
v2
->
v
 - 
v1
->v)Ë/ 
height
;

1518 
À·_v
 = 
v1
->
v
;

1520 
dñè_À·_R
 = ((
v2
->
R
 - 
v1
->R)Ë/ 
height
;

1521 
À·_R
 = 
v1
->
R
;

1522 
dñè_À·_G
 = ((
v2
->
G
 - 
v1
->G)Ë/ 
height
;

1523 
À·_G
 = 
v1
->
G
;

1524 
dñè_À·_B
 = ((
v2
->
B
 - 
v1
->B)Ë/ 
height
;

1525 
À·_B
 = 
v1
->
B
;

1527 
À·_£˘i⁄_height
 = 
height
;

1528  
height
;

1529 
	}
}

1533 
INLINE
 
BOOL
 
	$NextRow_GT
()

1535 if(--
À·_£˘i⁄_height
<=0)

1537 if(--
À·_£˘i⁄
 <0Ë{ 
TRUE
;}

1538 if(
	`Le·Se˘i⁄_GT
(Ë<0Ë{ 
TRUE
;}

1542 
À·_x
 +
dñè_À·_x
;

1543 
À·_u
 +
dñè_À·_u
;

1544 
À·_v
 +
dñè_À·_v
;

1545 
À·_R
 +
dñè_À·_R
;

1546 
À·_G
 +
dñè_À·_G
;

1547 
À·_B
 +
dñè_À·_B
;

1550 if(--
right_£˘i⁄_height
<=0)

1552 if(--
right_£˘i⁄
<=0Ë{ 
TRUE
;}

1553 if(
	`RightSe˘i⁄_GT
(Ë<=0Ë{ 
TRUE
;}

1557 
right_x
 +
dñè_right_x
;

1559  
FALSE
;

1560 
	}
}

1564 
INLINE
 
BOOL
 
	$SëupSe˘i⁄s_GT
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
öt32_t
 
rgb1
, i¡32_à
rgb2
, i¡32_à
rgb3
)

1566 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
;

1567 
height
,
l⁄ge°
,
ãmp
;

1569 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

1570 
v1
->
u
=
tx1
<<16;v1->
v
=
ty1
<<16;

1571 
v1
->
R
=(
rgb1
) & 0x00ff0000;

1572 
v1
->
G
=(
rgb1
<<8) & 0x00ff0000;

1573 
v1
->
B
=(
rgb1
<<16) & 0x00ff0000;

1575 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

1576 
v2
->
u
=
tx2
<<16;v2->
v
=
ty2
<<16;

1577 
v2
->
R
=(
rgb2
) & 0x00ff0000;

1578 
v2
->
G
=(
rgb2
<<8) & 0x00ff0000;

1579 
v2
->
B
=(
rgb2
<<16) & 0x00ff0000;

1581 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

1582 
v3
->
u
=
tx3
<<16;v3->
v
=
ty3
<<16;

1583 
v3
->
R
=(
rgb3
) & 0x00ff0000;

1584 
v3
->
G
=(
rgb3
<<8) & 0x00ff0000;

1585 
v3
->
B
=(
rgb3
<<16) & 0x00ff0000;

1587 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

1588 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

1589 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

1591 
height
 = 
v3
->
y
 - 
v1
->y;

1592 if(
height
 =0Ë{ 
FALSE
;}

1594 
ãmp
=(((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
);

1595 
l⁄ge°
 = 
ãmp
 * ((
v3
->
x
 - 
v1
->x)>>16Ë+ (v1->x - 
v2
->x);

1597 if(
l⁄ge°
 =0Ë{ 
FALSE
;}

1599 if(
l⁄ge°
 < 0)

1601 
right_¨øy
[0] = 
v3
;

1602 
right_¨øy
[1] = 
v2
;

1603 
right_¨øy
[2] = 
v1
;

1604 
right_£˘i⁄
 = 2;

1605 
À·_¨øy
[0] = 
v3
;

1606 
À·_¨øy
[1] = 
v1
;

1607 
À·_£˘i⁄
 = 1;

1609 if(
	`Le·Se˘i⁄_GT
(Ë<0Ë 
FALSE
;

1610 if(
	`RightSe˘i⁄_GT
() <= 0)

1612 
right_£˘i⁄
--;

1613 if(
	`RightSe˘i⁄_GT
(Ë<0Ë 
FALSE
;

1616 if(
l⁄ge°
 > -0x1000)Üongest = -0x1000;

1620 
À·_¨øy
[0] = 
v3
;

1621 
À·_¨øy
[1] = 
v2
;

1622 
À·_¨øy
[2] = 
v1
;

1623 
À·_£˘i⁄
 = 2;

1624 
right_¨øy
[0] = 
v3
;

1625 
right_¨øy
[1] = 
v1
;

1626 
right_£˘i⁄
 = 1;

1628 if(
	`RightSe˘i⁄_GT
(Ë<0Ë 
FALSE
;

1629 if(
	`Le·Se˘i⁄_GT
() <= 0)

1631 
À·_£˘i⁄
--;

1632 if(
	`Le·Se˘i⁄_GT
(Ë<0Ë 
FALSE
;

1634 if(
l⁄ge°
 < 0x1000)Üongest = 0x1000;

1637 
Ymö
=
v1
->
y
;

1638 
Ymax
=
	`mö
(
v3
->
y
-1,
døwH
);

1640 
dñè_right_R
=
	`shl10idiv
(
ãmp
*((
v3
->
R
 - 
v1
->R)>>10)+((v1->R - 
v2
->R)<<6),
l⁄ge°
);

1641 
dñè_right_G
=
	`shl10idiv
(
ãmp
*((
v3
->
G
 - 
v1
->G)>>10)+((v1->G - 
v2
->G)<<6),
l⁄ge°
);

1642 
dñè_right_B
=
	`shl10idiv
(
ãmp
*((
v3
->
B
 - 
v1
->B)>>10)+((v1->B - 
v2
->B)<<6),
l⁄ge°
);

1644 
dñè_right_u
=
	`shl10idiv
(
ãmp
*((
v3
->
u
 - 
v1
->u)>>10)+((v1->u - 
v2
->u)<<6),
l⁄ge°
);

1645 
dñè_right_v
=
	`shl10idiv
(
ãmp
*((
v3
->
v
 - 
v1
->v)>>10)+((v1->v - 
v2
->v)<<6),
l⁄ge°
);

1647  
TRUE
;

1648 
	}
}

1653 
INLINE
 
	$RightSe˘i⁄_F4
()

1655 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

1656 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

1658 
height
 = 
v2
->
y
 - 
v1
->y;

1659 
right_£˘i⁄_height
 = 
height
;

1660 
right_x
 = 
v1
->
x
;

1661 if(
height
 == 0)

1665 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1667  
height
;

1668 
	}
}

1672 
INLINE
 
	$Le·Se˘i⁄_F4
()

1674 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

1675 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

1677 
height
 = 
v2
->
y
 - 
v1
->y;

1678 
À·_£˘i⁄_height
 = 
height
;

1679 
À·_x
 = 
v1
->
x
;

1680 if(
height
 == 0)

1684 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1686  
height
;

1687 
	}
}

1691 
INLINE
 
BOOL
 
	$NextRow_F4
()

1693 if(--
À·_£˘i⁄_height
<=0)

1695 if(--
À·_£˘i⁄
 > 0)

1696 
	`Le·Se˘i⁄_F4
()<=0)

1698 if(--
À·_£˘i⁄
 <= 0) ;

1703 
À·_x
 +
dñè_À·_x
;

1706 if(--
right_£˘i⁄_height
<=0)

1708 if(--
right_£˘i⁄
 > 0)

1709 
	`RightSe˘i⁄_F4
()<=0)

1711 if(--
right_£˘i⁄
<=0) ;

1716 
right_x
 +
dñè_right_x
;

1718  
FALSE
;

1719 
	}
}

1723 
INLINE
 
BOOL
 
	$SëupSe˘i⁄s_F4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
)

1725 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
, * 
v4
;

1726 
height
,
width
,
l⁄ge°1
,
l⁄ge°2
;

1728 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

1729 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

1730 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

1731 
v4
 = 
vtx
+3; v4->
x
=
x4
<<16;v4->
y
=
y4
;

1733 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

1734 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

1735 if(
v1
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v4; v4 = v; }

1736 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

1737 if(
v2
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v4; v4 = v; }

1738 if(
v3
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v3; v3 = v4; v4 = v; }

1740 
height
 = 
v4
->
y
 - 
v1
->y; if(height == 0) height =1;

1741 
width
 = (
v4
->
x
 - 
v1
->x)>>16;

1742 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* 
width
 + (v1->
x
 - v2->x);

1743 
l⁄ge°2
 = (((
v3
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* 
width
 + (v1->
x
 - v3->x);

1745 if(
l⁄ge°1
 < 0)

1747 if(
l⁄ge°2
 < 0)

1749 
À·_¨øy
[0] = 
v4
;

1750 
À·_¨øy
[1] = 
v1
;

1751 
À·_£˘i⁄
 = 1;

1753 
height
 = 
v3
->
y
 - 
v1
->y; if(height == 0) height=1;

1754 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

1755 if(
l⁄ge°1
 >= 0)

1757 
right_¨øy
[0] = 
v4
;

1758 
right_¨øy
[1] = 
v3
;

1759 
right_¨øy
[2] = 
v1
;

1760 
right_£˘i⁄
 = 2;

1764 
height
 = 
v4
->
y
 - 
v2
->y; if(height == 0) height=1;

1765 
l⁄ge°1
 = (((
v3
->
y
 - 
v2
->yË<< 16Ë/ 
height
Ë* ((
v4
->
x
 - v2->x)>>16) + (v2->x - v3->x);

1766 if(
l⁄ge°1
 >= 0)

1768 
right_¨øy
[0] = 
v4
;

1769 
right_¨øy
[1] = 
v2
;

1770 
right_¨øy
[2] = 
v1
;

1771 
right_£˘i⁄
 = 2;

1775 
right_¨øy
[0] = 
v4
;

1776 
right_¨øy
[1] = 
v3
;

1777 
right_¨øy
[2] = 
v2
;

1778 
right_¨øy
[3] = 
v1
;

1779 
right_£˘i⁄
 = 3;

1785 
À·_¨øy
[0] = 
v4
;

1786 
À·_¨øy
[1] = 
v3
;

1787 
À·_¨øy
[2] = 
v1
;

1788 
À·_£˘i⁄
 = 2;

1789 
right_¨øy
[0] = 
v4
;

1790 
right_¨øy
[1] = 
v2
;

1791 
right_¨øy
[2] = 
v1
;

1792 
right_£˘i⁄
 = 2;

1797 if(
l⁄ge°2
 < 0)

1799 
À·_¨øy
[0] = 
v4
;

1800 
À·_¨øy
[1] = 
v2
;

1801 
À·_¨øy
[2] = 
v1
;

1802 
À·_£˘i⁄
 = 2;

1803 
right_¨øy
[0] = 
v4
;

1804 
right_¨øy
[1] = 
v3
;

1805 
right_¨øy
[2] = 
v1
;

1806 
right_£˘i⁄
 = 2;

1810 
right_¨øy
[0] = 
v4
;

1811 
right_¨øy
[1] = 
v1
;

1812 
right_£˘i⁄
 = 1;

1814 
height
 = 
v3
->
y
 - 
v1
->y; if(height == 0) height=1;

1815 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

1816 if(
l⁄ge°1
<0)

1818 
À·_¨øy
[0] = 
v4
;

1819 
À·_¨øy
[1] = 
v3
;

1820 
À·_¨øy
[2] = 
v1
;

1821 
À·_£˘i⁄
 = 2;

1825 
height
 = 
v4
->
y
 - 
v2
->y; if(height == 0) height=1;

1826 
l⁄ge°1
 = (((
v3
->
y
 - 
v2
->yË<< 16Ë/ 
height
Ë* ((
v4
->
x
 - v2->x)>>16) + (v2->x - v3->x);

1827 if(
l⁄ge°1
<0)

1829 
À·_¨øy
[0] = 
v4
;

1830 
À·_¨øy
[1] = 
v2
;

1831 
À·_¨øy
[2] = 
v1
;

1832 
À·_£˘i⁄
 = 2;

1836 
À·_¨øy
[0] = 
v4
;

1837 
À·_¨øy
[1] = 
v3
;

1838 
À·_¨øy
[2] = 
v2
;

1839 
À·_¨øy
[3] = 
v1
;

1840 
À·_£˘i⁄
 = 3;

1846 
	`Le·Se˘i⁄_F4
()<=0)

1848 if(--
À·_£˘i⁄
 <= 0) ;

1851 
	`RightSe˘i⁄_F4
()<=0)

1853 if(--
right_£˘i⁄
 <= 0) ;

1856 
Ymö
=
v1
->
y
;

1857 
Ymax
=
	`mö
(
v4
->
y
-1,
døwH
);

1859  
TRUE
;

1860 
	}
}

1865 
INLINE
 
	$RightSe˘i⁄_FT4
()

1867 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

1868 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

1870 
height
 = 
v2
->
y
 - 
v1
->y;

1871 
right_£˘i⁄_height
 = 
height
;

1872 
right_x
 = 
v1
->
x
;

1873 
right_u
 = 
v1
->
u
;

1874 
right_v
 = 
v1
->
v
;

1875 if(
height
 == 0)

1879 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1880 
dñè_right_u
 = (
v2
->
u
 - 
v1
->uË/ 
height
;

1881 
dñè_right_v
 = (
v2
->
v
 - 
v1
->vË/ 
height
;

1883  
height
;

1884 
	}
}

1888 
INLINE
 
	$Le·Se˘i⁄_FT4
()

1890 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

1891 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

1893 
height
 = 
v2
->
y
 - 
v1
->y;

1894 
À·_£˘i⁄_height
 = 
height
;

1895 
À·_x
 = 
v1
->
x
;

1896 
À·_u
 = 
v1
->
u
;

1897 
À·_v
 = 
v1
->
v
;

1898 if(
height
 == 0)

1902 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1903 
dñè_À·_u
 = (
v2
->
u
 - 
v1
->uË/ 
height
;

1904 
dñè_À·_v
 = (
v2
->
v
 - 
v1
->vË/ 
height
;

1906  
height
;

1907 
	}
}

1911 
INLINE
 
BOOL
 
	$NextRow_FT4
()

1913 if(--
À·_£˘i⁄_height
<=0)

1915 if(--
À·_£˘i⁄
 > 0)

1916 
	`Le·Se˘i⁄_FT4
()<=0)

1918 if(--
À·_£˘i⁄
 <= 0) ;

1923 
À·_x
 +
dñè_À·_x
;

1924 
À·_u
 +
dñè_À·_u
;

1925 
À·_v
 +
dñè_À·_v
;

1928 if(--
right_£˘i⁄_height
<=0)

1930 if(--
right_£˘i⁄
 > 0)

1931 
	`RightSe˘i⁄_FT4
()<=0)

1933 if(--
right_£˘i⁄
<=0) ;

1938 
right_x
 +
dñè_right_x
;

1939 
right_u
 +
dñè_right_u
;

1940 
right_v
 +
dñè_right_v
;

1942  
FALSE
;

1943 
	}
}

1947 
INLINE
 
BOOL
 
	$SëupSe˘i⁄s_FT4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
)

1949 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
, * 
v4
;

1950 
height
,
width
,
l⁄ge°1
,
l⁄ge°2
;

1952 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

1953 
v1
->
u
=
tx1
<<16;v1->
v
=
ty1
<<16;

1955 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

1956 
v2
->
u
=
tx2
<<16;v2->
v
=
ty2
<<16;

1958 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

1959 
v3
->
u
=
tx3
<<16;v3->
v
=
ty3
<<16;

1961 
v4
 = 
vtx
+3; v4->
x
=
x4
<<16;v4->
y
=
y4
;

1962 
v4
->
u
=
tx4
<<16;v4->
v
=
ty4
<<16;

1964 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

1965 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

1966 if(
v1
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v4; v4 = v; }

1967 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

1968 if(
v2
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v4; v4 = v; }

1969 if(
v3
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v3; v3 = v4; v4 = v; }

1971 
height
 = 
v4
->
y
 - 
v1
->y; if(height == 0) height =1;

1972 
width
 = (
v4
->
x
 - 
v1
->x)>>16;

1973 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* 
width
 + (v1->
x
 - v2->x);

1974 
l⁄ge°2
 = (((
v3
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* 
width
 + (v1->
x
 - v3->x);

1976 if(
l⁄ge°1
 < 0)

1978 if(
l⁄ge°2
 < 0)

1980 
À·_¨øy
[0] = 
v4
;

1981 
À·_¨øy
[1] = 
v1
;

1982 
À·_£˘i⁄
 = 1;

1984 
height
 = 
v3
->
y
 - 
v1
->y; if(height == 0) height=1;

1985 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

1986 if(
l⁄ge°1
 >= 0)

1988 
right_¨øy
[0] = 
v4
;

1989 
right_¨øy
[1] = 
v3
;

1990 
right_¨øy
[2] = 
v1
;

1991 
right_£˘i⁄
 = 2;

1995 
height
 = 
v4
->
y
 - 
v2
->y; if(height == 0) height=1;

1996 
l⁄ge°1
 = (((
v3
->
y
 - 
v2
->yË<< 16Ë/ 
height
Ë* ((
v4
->
x
 - v2->x)>>16) + (v2->x - v3->x);

1997 if(
l⁄ge°1
 >= 0)

1999 
right_¨øy
[0] = 
v4
;

2000 
right_¨øy
[1] = 
v2
;

2001 
right_¨øy
[2] = 
v1
;

2002 
right_£˘i⁄
 = 2;

2006 
right_¨øy
[0] = 
v4
;

2007 
right_¨øy
[1] = 
v3
;

2008 
right_¨øy
[2] = 
v2
;

2009 
right_¨øy
[3] = 
v1
;

2010 
right_£˘i⁄
 = 3;

2016 
À·_¨øy
[0] = 
v4
;

2017 
À·_¨øy
[1] = 
v3
;

2018 
À·_¨øy
[2] = 
v1
;

2019 
À·_£˘i⁄
 = 2;

2020 
right_¨øy
[0] = 
v4
;

2021 
right_¨øy
[1] = 
v2
;

2022 
right_¨øy
[2] = 
v1
;

2023 
right_£˘i⁄
 = 2;

2028 if(
l⁄ge°2
 < 0)

2030 
À·_¨øy
[0] = 
v4
;

2031 
À·_¨øy
[1] = 
v2
;

2032 
À·_¨øy
[2] = 
v1
;

2033 
À·_£˘i⁄
 = 2;

2034 
right_¨øy
[0] = 
v4
;

2035 
right_¨øy
[1] = 
v3
;

2036 
right_¨øy
[2] = 
v1
;

2037 
right_£˘i⁄
 = 2;

2041 
right_¨øy
[0] = 
v4
;

2042 
right_¨øy
[1] = 
v1
;

2043 
right_£˘i⁄
 = 1;

2045 
height
 = 
v3
->
y
 - 
v1
->y; if(height == 0) height=1;

2046 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

2047 if(
l⁄ge°1
<0)

2049 
À·_¨øy
[0] = 
v4
;

2050 
À·_¨øy
[1] = 
v3
;

2051 
À·_¨øy
[2] = 
v1
;

2052 
À·_£˘i⁄
 = 2;

2056 
height
 = 
v4
->
y
 - 
v2
->y; if(height == 0) height=1;

2057 
l⁄ge°1
 = (((
v3
->
y
 - 
v2
->yË<< 16Ë/ 
height
Ë* ((
v4
->
x
 - v2->x)>>16) + (v2->x - v3->x);

2058 if(
l⁄ge°1
<0)

2060 
À·_¨øy
[0] = 
v4
;

2061 
À·_¨øy
[1] = 
v2
;

2062 
À·_¨øy
[2] = 
v1
;

2063 
À·_£˘i⁄
 = 2;

2067 
À·_¨øy
[0] = 
v4
;

2068 
À·_¨øy
[1] = 
v3
;

2069 
À·_¨øy
[2] = 
v2
;

2070 
À·_¨øy
[3] = 
v1
;

2071 
À·_£˘i⁄
 = 3;

2077 
	`Le·Se˘i⁄_FT4
()<=0)

2079 if(--
À·_£˘i⁄
 <= 0) ;

2082 
	`RightSe˘i⁄_FT4
()<=0)

2084 if(--
right_£˘i⁄
 <= 0) ;

2087 
Ymö
=
v1
->
y
;

2088 
Ymax
=
	`mö
(
v4
->
y
-1,
døwH
);

2090  
TRUE
;

2091 
	}
}

2096 
INLINE
 
	$RightSe˘i⁄_GT4
()

2098 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

2099 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

2101 
height
 = 
v2
->
y
 - 
v1
->y;

2102 
right_£˘i⁄_height
 = 
height
;

2103 
right_x
 = 
v1
->
x
;

2104 
right_u
 = 
v1
->
u
;

2105 
right_v
 = 
v1
->
v
;

2106 
right_R
 = 
v1
->
R
;

2107 
right_G
 = 
v1
->
G
;

2108 
right_B
 = 
v1
->
B
;

2110 if(
height
 == 0)

2114 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

2115 
dñè_right_u
 = (
v2
->
u
 - 
v1
->uË/ 
height
;

2116 
dñè_right_v
 = (
v2
->
v
 - 
v1
->vË/ 
height
;

2117 
dñè_right_R
 = (
v2
->
R
 - 
v1
->RË/ 
height
;

2118 
dñè_right_G
 = (
v2
->
G
 - 
v1
->GË/ 
height
;

2119 
dñè_right_B
 = (
v2
->
B
 - 
v1
->BË/ 
height
;

2121  
height
;

2122 
	}
}

2126 
INLINE
 
	$Le·Se˘i⁄_GT4
()

2128 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

2129 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

2131 
height
 = 
v2
->
y
 - 
v1
->y;

2132 
À·_£˘i⁄_height
 = 
height
;

2133 
À·_x
 = 
v1
->
x
;

2134 
À·_u
 = 
v1
->
u
;

2135 
À·_v
 = 
v1
->
v
;

2136 
À·_R
 = 
v1
->
R
;

2137 
À·_G
 = 
v1
->
G
;

2138 
À·_B
 = 
v1
->
B
;

2140 if(
height
 == 0)

2144 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

2145 
dñè_À·_u
 = (
v2
->
u
 - 
v1
->uË/ 
height
;

2146 
dñè_À·_v
 = (
v2
->
v
 - 
v1
->vË/ 
height
;

2147 
dñè_À·_R
 = (
v2
->
R
 - 
v1
->RË/ 
height
;

2148 
dñè_À·_G
 = (
v2
->
G
 - 
v1
->GË/ 
height
;

2149 
dñè_À·_B
 = (
v2
->
B
 - 
v1
->BË/ 
height
;

2151  
height
;

2152 
	}
}

2156 
INLINE
 
BOOL
 
	$NextRow_GT4
()

2158 if(--
À·_£˘i⁄_height
<=0)

2160 if(--
À·_£˘i⁄
 > 0)

2161 
	`Le·Se˘i⁄_GT4
()<=0)

2163 if(--
À·_£˘i⁄
 <= 0) ;

2168 
À·_x
 +
dñè_À·_x
;

2169 
À·_u
 +
dñè_À·_u
;

2170 
À·_v
 +
dñè_À·_v
;

2171 
À·_R
 +
dñè_À·_R
;

2172 
À·_G
 +
dñè_À·_G
;

2173 
À·_B
 +
dñè_À·_B
;

2176 if(--
right_£˘i⁄_height
<=0)

2178 if(--
right_£˘i⁄
 > 0)

2179 
	`RightSe˘i⁄_GT4
()<=0)

2181 if(--
right_£˘i⁄
<=0) ;

2186 
right_x
 +
dñè_right_x
;

2187 
right_u
 +
dñè_right_u
;

2188 
right_v
 +
dñè_right_v
;

2189 
right_R
 +
dñè_right_R
;

2190 
right_G
 +
dñè_right_G
;

2191 
right_B
 +
dñè_right_B
;

2193  
FALSE
;

2194 
	}
}

2198 
INLINE
 
BOOL
 
	$SëupSe˘i⁄s_GT4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
öt32_t
 
rgb1
,öt32_à
rgb2
,öt32_à
rgb3
,öt32_à
rgb4
)

2200 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
, * 
v4
;

2201 
height
,
width
,
l⁄ge°1
,
l⁄ge°2
;

2203 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

2204 
v1
->
u
=
tx1
<<16;v1->
v
=
ty1
<<16;

2205 
v1
->
R
=(
rgb1
) & 0x00ff0000;

2206 
v1
->
G
=(
rgb1
<<8) & 0x00ff0000;

2207 
v1
->
B
=(
rgb1
<<16) & 0x00ff0000;

2209 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

2210 
v2
->
u
=
tx2
<<16;v2->
v
=
ty2
<<16;

2211 
v2
->
R
=(
rgb2
) & 0x00ff0000;

2212 
v2
->
G
=(
rgb2
<<8) & 0x00ff0000;

2213 
v2
->
B
=(
rgb2
<<16) & 0x00ff0000;

2215 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

2216 
v3
->
u
=
tx3
<<16;v3->
v
=
ty3
<<16;

2217 
v3
->
R
=(
rgb3
) & 0x00ff0000;

2218 
v3
->
G
=(
rgb3
<<8) & 0x00ff0000;

2219 
v3
->
B
=(
rgb3
<<16) & 0x00ff0000;

2221 
v4
 = 
vtx
+3; v4->
x
=
x4
<<16;v4->
y
=
y4
;

2222 
v4
->
u
=
tx4
<<16;v4->
v
=
ty4
<<16;

2223 
v4
->
R
=(
rgb4
) & 0x00ff0000;

2224 
v4
->
G
=(
rgb4
<<8) & 0x00ff0000;

2225 
v4
->
B
=(
rgb4
<<16) & 0x00ff0000;

2227 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

2228 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

2229 if(
v1
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v4; v4 = v; }

2230 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

2231 if(
v2
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v4; v4 = v; }

2232 if(
v3
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v3; v3 = v4; v4 = v; }

2234 
height
 = 
v4
->
y
 - 
v1
->y; if(height == 0) height =1;

2235 
width
 = (
v4
->
x
 - 
v1
->x)>>16;

2236 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* 
width
 + (v1->
x
 - v2->x);

2237 
l⁄ge°2
 = (((
v3
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* 
width
 + (v1->
x
 - v3->x);

2239 if(
l⁄ge°1
 < 0)

2241 if(
l⁄ge°2
 < 0)

2243 
À·_¨øy
[0] = 
v4
;

2244 
À·_¨øy
[1] = 
v1
;

2245 
À·_£˘i⁄
 = 1;

2247 
height
 = 
v3
->
y
 - 
v1
->y; if(height == 0) height=1;

2248 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

2249 if(
l⁄ge°1
 >= 0)

2251 
right_¨øy
[0] = 
v4
;

2252 
right_¨øy
[1] = 
v3
;

2253 
right_¨øy
[2] = 
v1
;

2254 
right_£˘i⁄
 = 2;

2258 
height
 = 
v4
->
y
 - 
v2
->y; if(height == 0) height=1;

2259 
l⁄ge°1
 = (((
v3
->
y
 - 
v2
->yË<< 16Ë/ 
height
Ë* ((
v4
->
x
 - v2->x)>>16) + (v2->x - v3->x);

2260 if(
l⁄ge°1
 >= 0)

2262 
right_¨øy
[0] = 
v4
;

2263 
right_¨øy
[1] = 
v2
;

2264 
right_¨øy
[2] = 
v1
;

2265 
right_£˘i⁄
 = 2;

2269 
right_¨øy
[0] = 
v4
;

2270 
right_¨øy
[1] = 
v3
;

2271 
right_¨øy
[2] = 
v2
;

2272 
right_¨øy
[3] = 
v1
;

2273 
right_£˘i⁄
 = 3;

2279 
À·_¨øy
[0] = 
v4
;

2280 
À·_¨øy
[1] = 
v3
;

2281 
À·_¨øy
[2] = 
v1
;

2282 
À·_£˘i⁄
 = 2;

2283 
right_¨øy
[0] = 
v4
;

2284 
right_¨øy
[1] = 
v2
;

2285 
right_¨øy
[2] = 
v1
;

2286 
right_£˘i⁄
 = 2;

2291 if(
l⁄ge°2
 < 0)

2293 
À·_¨øy
[0] = 
v4
;

2294 
À·_¨øy
[1] = 
v2
;

2295 
À·_¨øy
[2] = 
v1
;

2296 
À·_£˘i⁄
 = 2;

2297 
right_¨øy
[0] = 
v4
;

2298 
right_¨øy
[1] = 
v3
;

2299 
right_¨øy
[2] = 
v1
;

2300 
right_£˘i⁄
 = 2;

2304 
right_¨øy
[0] = 
v4
;

2305 
right_¨øy
[1] = 
v1
;

2306 
right_£˘i⁄
 = 1;

2308 
height
 = 
v3
->
y
 - 
v1
->y; if(height == 0) height=1;

2309 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

2310 if(
l⁄ge°1
<0)

2312 
À·_¨øy
[0] = 
v4
;

2313 
À·_¨øy
[1] = 
v3
;

2314 
À·_¨øy
[2] = 
v1
;

2315 
À·_£˘i⁄
 = 2;

2319 
height
 = 
v4
->
y
 - 
v2
->y; if(height == 0) height=1;

2320 
l⁄ge°1
 = (((
v3
->
y
 - 
v2
->yË<< 16Ë/ 
height
Ë* ((
v4
->
x
 - v2->x)>>16) + (v2->x - v3->x);

2321 if(
l⁄ge°1
<0)

2323 
À·_¨øy
[0] = 
v4
;

2324 
À·_¨øy
[1] = 
v2
;

2325 
À·_¨øy
[2] = 
v1
;

2326 
À·_£˘i⁄
 = 2;

2330 
À·_¨øy
[0] = 
v4
;

2331 
À·_¨øy
[1] = 
v3
;

2332 
À·_¨øy
[2] = 
v2
;

2333 
À·_¨øy
[3] = 
v1
;

2334 
À·_£˘i⁄
 = 3;

2340 
	`Le·Se˘i⁄_GT4
()<=0)

2342 if(--
À·_£˘i⁄
 <= 0) ;

2345 
	`RightSe˘i⁄_GT4
()<=0)

2347 if(--
right_£˘i⁄
 <= 0) ;

2350 
Ymö
=
v1
->
y
;

2351 
Ymax
=
	`mö
(
v4
->
y
-1,
døwH
);

2353  
TRUE
;

2354 
	}
}

2368 
INLINE
 
	$døwPﬁy3Fi
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
öt32_t
 
rgb
)

2370 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

2371 
cﬁ‹
;
uöt32_t
 
lcﬁ‹
;

2373 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

2374 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

2375 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

2376 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

2377 if(
døwY
>=
døwH
) ;

2378 if(
døwX
>=
døwW
) ;

2380 if(!
	`SëupSe˘i⁄s_F
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
)) ;

2382 
ymax
=
Ymax
;

2384 
cﬁ‹
 = ((
rgb
 & 0x00f80000)>>9) | ((rgb & 0x0000f800)>>6) | ((rgb & 0x000000f8)>>3);

2385 
lcﬁ‹
=
lSëMask
|(((
uöt32_t
)(
cﬁ‹
))<<16)|color;

2387 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

2388 if(
	`NextRow_F
()) ;

2390 #ifde‡
FASTSOLID


2392 if(!
bCheckMask
 && !
DøwSemiTøns
)

2394 
cﬁ‹
 |=
sSëMask
;

2395 
i
=
ymö
;i<=
ymax
;i++)

2397 
xmö
=
À·_x
 >> 16; if(
døwX
>xmin) xmin=drawX;

2398 
xmax
=(
right_x
 >> 16)-1; if(
døwW
<xmax) xmax=drawW;

2400 
j
=
xmö
;j<
xmax
;j+=2)

2402 
	`PUTLE32
(((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
]), 
lcﬁ‹
);

2404 if(
j
==
xmax
Ë
	`PUTLE16
(&
psxVuw
[(
i
<<10)+j], 
cﬁ‹
);

2406 if(
	`NextRow_F
()) ;

2413 
i
=
ymö
;i<=
ymax
;i++)

2415 
xmö
=
À·_x
 >> 16; if(
døwX
>xmin) xmin=drawX;

2416 
xmax
=(
right_x
 >> 16)-1; if(
døwW
<xmax) xmax=drawW;

2418 
j
=
xmö
;j<
xmax
;j+=2)

2420 
	`GëShadeTønsCﬁ32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],
lcﬁ‹
);

2422 if(
j
==
xmax
)

2423 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
i
<<10)+
j
],
cﬁ‹
);

2425 if(
	`NextRow_F
()) ;

2427 
	}
}

2431 
	$døwPﬁy3F
(
öt32_t
 
rgb
)

2433 
	`døwPﬁy3Fi
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,
rgb
);

2434 
	}
}

2436 #ifde‡
POLYQUAD3FS


2438 
	$døwPﬁy4F_TRI
(
öt32_t
 
rgb
)

2440 
	`døwPﬁy3Fi
(
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,
rgb
);

2441 
	`døwPﬁy3Fi
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,
rgb
);

2442 
	}
}

2448 
	$døwPﬁy4F
(
öt32_t
 
rgb
)

2450 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

2451 
cﬁ‹
;
uöt32_t
 
lcﬁ‹
;

2453 if(
lx0
>
døwW
 && 
lx1
>døwW && 
lx2
>døwW && 
lx3
>drawW) ;

2454 if(
ly0
>
døwH
 && 
ly1
>døwH && 
ly2
>døwH && 
ly3
>drawH) ;

2455 if(
lx0
<
døwX
 && 
lx1
<døwX && 
lx2
<døwX && 
lx3
<drawX) ;

2456 if(
ly0
<
døwY
 && 
ly1
<døwY && 
ly2
<døwY && 
ly3
<drawY) ;

2457 if(
døwY
>=
døwH
) ;

2458 if(
døwX
>=
døwW
) ;

2460 if(!
	`SëupSe˘i⁄s_F4
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,
lx3
,
ly3
)) ;

2462 
ymax
=
Ymax
;

2464 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

2465 if(
	`NextRow_F4
()) ;

2467 
cﬁ‹
 = ((
rgb
 & 0x00f80000)>>9) | ((rgb & 0x0000f800)>>6) | ((rgb & 0x000000f8)>>3);

2468 
lcﬁ‹

lSëMask
|(((
uöt32_t
)(
cﬁ‹
))<<16)|color;

2470 #ifde‡
FASTSOLID


2472 if(!
bCheckMask
 && !
DøwSemiTøns
)

2474 
cﬁ‹
 |=
sSëMask
;

2475 
i
=
ymö
;i<=
ymax
;i++)

2477 
xmö
=
À·_x
 >> 16; if(
døwX
>xmin) xmin=drawX;

2478 
xmax
=(
right_x
 >> 16)-1; if(
døwW
<xmax) xmax=drawW;

2480 
j
=
xmö
;j<
xmax
;j+=2)

2482 
	`PUTLE32
(((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
]), 
lcﬁ‹
);

2484 if(
j
==
xmax
Ë
	`PUTLE16
(&
psxVuw
[(
i
<<10)+j], 
cﬁ‹
);

2486 if(
	`NextRow_F4
()) ;

2493 
i
=
ymö
;i<=
ymax
;i++)

2495 
xmö
=
À·_x
 >> 16; if(
døwX
>xmin) xmin=drawX;

2496 
xmax
=(
right_x
 >> 16)-1; if(
døwW
<xmax) xmax=drawW;

2498 
j
=
xmö
;j<
xmax
;j+=2)

2500 
	`GëShadeTønsCﬁ32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],
lcﬁ‹
);

2502 if(
j
==
xmax
Ë
	`GëShadeTønsCﬁ
(&
psxVuw
[(
i
<<10)+j],
cﬁ‹
);

2504 if(
	`NextRow_F4
()) ;

2506 
	}
}

2512 
	$døwPﬁy3TEx4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
,
˛X
, 
˛Y
)

2514 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

2515 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

2516 
öt32_t
 
posX
,
posY
,
YAdju°
,
XAdju°
;

2517 
öt32_t
 
˛utP
;

2518 
tC1
,
tC2
;

2520 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

2521 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

2522 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

2523 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

2524 if(
døwY
>=
døwH
) ;

2525 if(
døwX
>=
døwW
) ;

2527 if(!
	`SëupSe˘i⁄s_FT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
)) ;

2529 
ymax
=
Ymax
;

2531 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

2532 if(
	`NextRow_FT
()) ;

2534 
˛utP
=(
˛Y
<<10)+
˛X
;

2536 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

2538 
difX
=
dñè_right_u
;
difX2
=difX<<1;

2539 
difY
=
dñè_right_v
;
difY2
=difY<<1;

2541 #ifde‡
FASTSOLID


2543 if(!
bCheckMask
 && !
DøwSemiTøns
)

2545 
i
=
ymö
;i<=
ymax
;i++)

2547 
xmö
=(
À·_x
 >> 16);

2548 
xmax
=(
right_x
 >> 16)-1;

2549 if(
døwW
<
xmax
) xmax=drawW;

2551 if(
xmax
>=
xmö
)

2553 
posX
=
À·_u
;

2554 
posY
=
À·_v
;

2556 if(
xmö
<
døwX
)

2557 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2559 
j
=
xmö
;j<
xmax
;j+=2)

2561 
XAdju°
=(
posX
>>16);

2562 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

2563 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2564 
XAdju°
=((
posX
+
difX
)>>16);

2565 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2566 (
XAdju°
>>1)];

2567 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2569 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2570 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2571 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2573 
posX
+=
difX2
;

2574 
posY
+=
difY2
;

2576 if(
j
==
xmax
)

2578 
XAdju°
=(
posX
>>16);

2579 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2580 (
XAdju°
>>1)];

2581 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2582 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

2585 if(
	`NextRow_FT
())

2595 
i
=
ymö
;i<=
ymax
;i++)

2597 
xmö
=(
À·_x
 >> 16);

2598 
xmax
=(
right_x
 >> 16)-1;

2599 if(
døwW
<
xmax
) xmax=drawW;

2601 if(
xmax
>=
xmö
)

2603 
posX
=
À·_u
;

2604 
posY
=
À·_v
;

2606 if(
xmö
<
døwX
)

2607 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2609 
j
=
xmö
;j<
xmax
;j+=2)

2611 
XAdju°
=(
posX
>>16);

2612 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

2613 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2614 
XAdju°
=((
posX
+
difX
)>>16);

2615 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2616 (
XAdju°
>>1)];

2617 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2619 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2620 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2621 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2623 
posX
+=
difX2
;

2624 
posY
+=
difY2
;

2626 if(
j
==
xmax
)

2628 
XAdju°
=(
posX
>>16);

2629 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2630 (
XAdju°
>>1)];

2631 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2632 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

2635 if(
	`NextRow_FT
())

2640 
	}
}

2644 
	$døwPﬁy3TEx4_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
,
˛X
, 
˛Y
)

2646 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

2647 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

2648 
öt32_t
 
posX
,
posY
,
YAdju°
,
XAdju°
;

2649 
öt32_t
 
˛utP
;

2650 
tC1
,
tC2
;

2652 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

2653 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

2654 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

2655 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

2656 if(
døwY
>=
døwH
) ;

2657 if(
døwX
>=
døwW
) ;

2659 if(!
	`SëupSe˘i⁄s_FT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
)) ;

2661 
ymax
=
Ymax
;

2663 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

2664 if(
	`NextRow_FT
()) ;

2666 
˛utP
=(
˛Y
<<10)+
˛X
;

2668 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

2669 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
>>1);

2671 
difX
=
dñè_right_u
;
difX2
=difX<<1;

2672 
difY
=
dñè_right_v
;
difY2
=difY<<1;

2674 #ifde‡
FASTSOLID


2676 if(!
bCheckMask
 && !
DøwSemiTøns
)

2678 
i
=
ymö
;i<=
ymax
;i++)

2680 
xmö
=(
À·_x
 >> 16);

2681 
xmax
=(
right_x
 >> 16);

2682 if(
xmax
>
xmö
) xmax--;

2684 if(
døwW
<
xmax
) xmax=drawW;

2686 if(
xmax
>=
xmö
)

2688 
posX
=
À·_u
;

2689 
posY
=
À·_v
;

2691 if(
xmö
<
døwX
)

2692 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2694 
j
=
xmö
;j<
xmax
;j+=2)

2696 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

2697 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

2698 
YAdju°
+(
XAdju°
>>1)];

2699 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2700 
XAdju°
=((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
;

2701 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

2702 
YAdju°
+(
XAdju°
>>1)];

2703 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2705 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2706 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2707 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2709 
posX
+=
difX2
;

2710 
posY
+=
difY2
;

2712 if(
j
==
xmax
)

2714 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

2715 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

2716 
YAdju°
+(
XAdju°
>>1)];

2717 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2718 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

2721 if(
	`NextRow_FT
())

2731 
i
=
ymö
;i<=
ymax
;i++)

2733 
xmö
=(
À·_x
 >> 16);

2734 
xmax
=(
right_x
 >> 16)-1;

2735 if(
døwW
<
xmax
) xmax=drawW;

2737 if(
xmax
>=
xmö
)

2739 
posX
=
À·_u
;

2740 
posY
=
À·_v
;

2742 if(
xmö
<
døwX
)

2743 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2745 
j
=
xmö
;j<
xmax
;j+=2)

2747 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

2748 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

2749 
YAdju°
+(
XAdju°
>>1)];

2750 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2751 
XAdju°
=((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
;

2752 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

2753 
YAdju°
+(
XAdju°
>>1)];

2754 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2756 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2757 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2758 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2760 
posX
+=
difX2
;

2761 
posY
+=
difY2
;

2763 if(
j
==
xmax
)

2765 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

2766 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

2767 
YAdju°
+(
XAdju°
>>1)];

2768 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2769 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

2772 if(
	`NextRow_FT
())

2777 
	}
}

2781 #ifde‡
POLYQUAD3


2783 
	$døwPﬁy4TEx4_TRI
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

2785 
	`døwPﬁy3TEx4
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

2786 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

2787 
˛X
,
˛Y
);

2788 
	`døwPﬁy3TEx4
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

2789 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

2790 
˛X
,
˛Y
);

2791 
	}
}

2797 
	$døwPﬁy4TEx4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

2799 
öt32_t
 
num
;

2800 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

2801 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

2802 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
,
XAdju°
;

2803 
tC1
,
tC2
;

2805 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

2806 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

2807 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

2808 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

2809 if(
døwY
>=
døwH
) ;

2810 if(
døwX
>=
døwW
) ;

2812 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

2814 
ymax
=
Ymax
;

2816 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

2817 if(
	`NextRow_FT4
()) ;

2819 
˛utP
=(
˛Y
<<10)+
˛X
;

2821 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

2823 #ifde‡
FASTSOLID


2825 if(!
bCheckMask
 && !
DøwSemiTøns
)

2827 
i
=
ymö
;i<=
ymax
;i++)

2829 
xmö
=(
À·_x
 >> 16);

2830 
xmax
=(
right_x
 >> 16);

2832 if(
xmax
>=
xmö
)

2834 
posX
=
À·_u
;

2835 
posY
=
À·_v
;

2837 
num
=(
xmax
-
xmö
);

2838 if(
num
==0)Çum=1;

2839 
difX
=(
right_u
-
posX
)/
num
;

2840 
difY
=(
right_v
-
posY
)/
num
;

2841 
difX2
=
difX
<<1;

2842 
difY2
=
difY
<<1;

2844 if(
xmö
<
døwX
)

2845 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2846 
xmax
--;if(
døwW
<xmax) xmax=drawW;

2848 
j
=
xmö
;j<
xmax
;j+=2)

2850 
XAdju°
=(
posX
>>16);

2851 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

2852 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2853 
XAdju°
=((
posX
+
difX
)>>16);

2854 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2855 (
XAdju°
>>1)];

2856 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2858 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2859 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2860 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2861 
posX
+=
difX2
;

2862 
posY
+=
difY2
;

2864 if(
j
==
xmax
)

2866 
XAdju°
=(
posX
>>16);

2867 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2868 (
XAdju°
>>1)];

2869 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2870 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

2874 if(
	`NextRow_FT4
()) ;

2881 
i
=
ymö
;i<=
ymax
;i++)

2883 
xmö
=(
À·_x
 >> 16);

2884 
xmax
=(
right_x
 >> 16);

2886 if(
xmax
>=
xmö
)

2888 
posX
=
À·_u
;

2889 
posY
=
À·_v
;

2891 
num
=(
xmax
-
xmö
);

2892 if(
num
==0)Çum=1;

2893 
difX
=(
right_u
-
posX
)/
num
;

2894 
difY
=(
right_v
-
posY
)/
num
;

2895 
difX2
=
difX
<<1;

2896 
difY2
=
difY
<<1;

2898 if(
xmö
<
døwX
)

2899 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2900 
xmax
--;if(
døwW
<xmax) xmax=drawW;

2902 
j
=
xmö
;j<
xmax
;j+=2)

2904 
XAdju°
=(
posX
>>16);

2905 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

2906 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2907 
XAdju°
=((
posX
+
difX
)>>16);

2908 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2909 (
XAdju°
>>1)];

2910 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2912 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2913 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2914 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2915 
posX
+=
difX2
;

2916 
posY
+=
difY2
;

2918 if(
j
==
xmax
)

2920 
XAdju°
=(
posX
>>16);

2921 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2922 (
XAdju°
>>1)];

2923 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2924 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

2927 if(
	`NextRow_FT4
()) ;

2929 
	}
}

2933 
	$døwPﬁy4TEx4_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

2935 
öt32_t
 
num
;

2936 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

2937 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

2938 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
,
XAdju°
;

2939 
tC1
,
tC2
;

2941 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

2942 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

2943 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

2944 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

2945 if(
døwY
>=
døwH
) ;

2946 if(
døwX
>=
døwW
) ;

2948 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

2950 
ymax
=
Ymax
;

2952 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

2953 if(
	`NextRow_FT4
()) ;

2955 
˛utP
=(
˛Y
<<10)+
˛X
;

2957 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

2958 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
>>1);

2960 #ifde‡
FASTSOLID


2962 if(!
bCheckMask
 && !
DøwSemiTøns
)

2964 
i
=
ymö
;i<=
ymax
;i++)

2966 
xmö
=(
À·_x
 >> 16);

2967 
xmax
=(
right_x
 >> 16);

2969 if(
xmax
>=
xmö
)

2971 
posX
=
À·_u
;

2972 
posY
=
À·_v
;

2974 
num
=(
xmax
-
xmö
);

2975 if(
num
==0)Çum=1;

2976 
difX
=(
right_u
-
posX
)/
num
;

2977 
difY
=(
right_v
-
posY
)/
num
;

2978 
difX2
=
difX
<<1;

2979 
difY2
=
difY
<<1;

2981 if(
xmö
<
døwX
)

2982 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2983 
xmax
--;if(
døwW
<xmax) xmax=drawW;

2985 
j
=
xmö
;j<
xmax
;j+=2)

2987 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

2988 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

2989 
YAdju°
+(
XAdju°
>>1)];

2990 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2991 
XAdju°
=((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
;

2992 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

2993 
YAdju°
+(
XAdju°
>>1)];

2994 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2996 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2997 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2998 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2999 
posX
+=
difX2
;

3000 
posY
+=
difY2
;

3002 if(
j
==
xmax
)

3004 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

3005 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3006 
YAdju°
+(
XAdju°
>>1)];

3007 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3008 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3011 if(
	`NextRow_FT4
()) ;

3018 
i
=
ymö
;i<=
ymax
;i++)

3020 
xmö
=(
À·_x
 >> 16);

3021 
xmax
=(
right_x
 >> 16);

3023 if(
xmax
>=
xmö
)

3025 
posX
=
À·_u
;

3026 
posY
=
À·_v
;

3028 
num
=(
xmax
-
xmö
);

3029 if(
num
==0)Çum=1;

3030 
difX
=(
right_u
-
posX
)/
num
;

3031 
difY
=(
right_v
-
posY
)/
num
;

3032 
difX2
=
difX
<<1;

3033 
difY2
=
difY
<<1;

3035 if(
xmö
<
døwX
)

3036 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3037 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3039 
j
=
xmö
;j<
xmax
;j+=2)

3041 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

3042 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3043 
YAdju°
+(
XAdju°
>>1)];

3044 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3045 
XAdju°
=((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
;

3046 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3047 
YAdju°
+(
XAdju°
>>1)];

3048 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

3050 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3051 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3052 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3053 
posX
+=
difX2
;

3054 
posY
+=
difY2
;

3056 if(
j
==
xmax
)

3058 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

3059 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3060 
YAdju°
+(
XAdju°
>>1)];

3061 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3062 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3065 if(
	`NextRow_FT4
()) ;

3067 
	}
}

3071 
	$døwPﬁy4TEx4_TW_S
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

3073 
öt32_t
 
num
;

3074 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3075 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

3076 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
,
XAdju°
;

3077 
tC1
,
tC2
;

3079 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

3080 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

3081 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

3082 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

3083 if(
døwY
>=
døwH
) ;

3084 if(
døwX
>=
døwW
) ;

3086 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

3088 
ymax
=
Ymax
;

3090 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3091 if(
	`NextRow_FT4
()) ;

3093 
˛utP
=(
˛Y
<<10)+
˛X
;

3095 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

3096 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
>>1);

3098 #ifde‡
FASTSOLID


3100 if(!
bCheckMask
 && !
DøwSemiTøns
)

3102 
i
=
ymö
;i<=
ymax
;i++)

3104 
xmö
=(
À·_x
 >> 16);

3105 
xmax
=(
right_x
 >> 16);

3107 if(
xmax
>=
xmö
)

3109 
posX
=
À·_u
;

3110 
posY
=
À·_v
;

3112 
num
=(
xmax
-
xmö
);

3113 if(
num
==0)Çum=1;

3114 
difX
=(
right_u
-
posX
)/
num
;

3115 
difY
=(
right_v
-
posY
)/
num
;

3116 
difX2
=
difX
<<1;

3117 
difY2
=
difY
<<1;

3119 if(
xmö
<
døwX
)

3120 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3121 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3123 
j
=
xmö
;j<
xmax
;j+=2)

3125 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

3126 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3127 
YAdju°
+(
XAdju°
>>1)];

3128 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3129 
XAdju°
=((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
;

3130 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3131 
YAdju°
+(
XAdju°
>>1)];

3132 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

3134 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3135 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3136 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3137 
posX
+=
difX2
;

3138 
posY
+=
difY2
;

3140 if(
j
==
xmax
)

3142 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

3143 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3144 
YAdju°
+(
XAdju°
>>1)];

3145 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3146 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3149 if(
	`NextRow_FT4
()) ;

3156 
i
=
ymö
;i<=
ymax
;i++)

3158 
xmö
=(
À·_x
 >> 16);

3159 
xmax
=(
right_x
 >> 16);

3161 if(
xmax
>=
xmö
)

3163 
posX
=
À·_u
;

3164 
posY
=
À·_v
;

3166 
num
=(
xmax
-
xmö
);

3167 if(
num
==0)Çum=1;

3168 
difX
=(
right_u
-
posX
)/
num
;

3169 
difY
=(
right_v
-
posY
)/
num
;

3170 
difX2
=
difX
<<1;

3171 
difY2
=
difY
<<1;

3173 if(
xmö
<
døwX
)

3174 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3175 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3177 
j
=
xmö
;j<
xmax
;j+=2)

3179 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

3180 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3181 
YAdju°
+(
XAdju°
>>1)];

3182 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3183 
XAdju°
=((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
;

3184 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3185 
YAdju°
+(
XAdju°
>>1)];

3186 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

3188 
	`GëTextuªTønsCﬁG32_SPR
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3189 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3190 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3191 
posX
+=
difX2
;

3192 
posY
+=
difY2
;

3194 if(
j
==
xmax
)

3196 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

3197 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3198 
YAdju°
+(
XAdju°
>>1)];

3199 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3200 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3203 if(
	`NextRow_FT4
()) ;

3205 
	}
}

3210 
	$døwPﬁy3TEx8
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
,
˛X
, 
˛Y
)

3212 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3213 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

3214 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

3215 
tC1
,
tC2
;

3217 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

3218 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

3219 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

3220 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

3221 if(
døwY
>=
døwH
) ;

3222 if(
døwX
>=
døwW
) ;

3224 if(!
	`SëupSe˘i⁄s_FT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
)) ;

3226 
ymax
=
Ymax
;

3228 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3229 if(
	`NextRow_FT
()) ;

3231 
˛utP
=(
˛Y
<<10)+
˛X
;

3233 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

3235 
difX
=
dñè_right_u
;
difX2
=difX<<1;

3236 
difY
=
dñè_right_v
;
difY2
=difY<<1;

3238 #ifde‡
FASTSOLID


3240 if(!
bCheckMask
 && !
DøwSemiTøns
)

3242 
i
=
ymö
;i<=
ymax
;i++)

3244 
xmö
=(
À·_x
 >> 16);

3245 
xmax
=(
right_x
 >> 16)-1;

3246 if(
døwW
<
xmax
) xmax=drawW;

3248 if(
xmax
>=
xmö
)

3250 
posX
=
À·_u
;

3251 
posY
=
À·_v
;

3253 if(
xmö
<
døwX
)

3254 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3256 
j
=
xmö
;j<
xmax
;j+=2)

3258 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3259 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

3260 ((
posX
+
difX
)>>16)];

3261 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3262 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3263 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3264 
posX
+=
difX2
;

3265 
posY
+=
difY2
;

3268 if(
j
==
xmax
)

3270 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3271 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3274 if(
	`NextRow_FT
())

3284 
i
=
ymö
;i<=
ymax
;i++)

3286 
xmö
=(
À·_x
 >> 16);

3287 
xmax
=(
right_x
 >> 16)-1;

3288 if(
døwW
<
xmax
) xmax=drawW;

3290 if(
xmax
>=
xmö
)

3292 
posX
=
À·_u
;

3293 
posY
=
À·_v
;

3295 if(
xmö
<
døwX
)

3296 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3298 
j
=
xmö
;j<
xmax
;j+=2)

3300 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3301 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

3302 ((
posX
+
difX
)>>16)];

3303 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3304 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3305 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3306 
posX
+=
difX2
;

3307 
posY
+=
difY2
;

3310 if(
j
==
xmax
)

3312 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3313 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3317 if(
	`NextRow_FT
())

3322 
	}
}

3326 
	$døwPﬁy3TEx8_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
,
˛X
, 
˛Y
)

3328 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3329 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

3330 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

3331 
tC1
,
tC2
;

3333 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

3334 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

3335 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

3336 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

3337 if(
døwY
>=
døwH
) ;

3338 if(
døwX
>=
døwW
) ;

3340 if(!
	`SëupSe˘i⁄s_FT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
)) ;

3342 
ymax
=
Ymax
;

3344 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3345 if(
	`NextRow_FT
()) ;

3347 
˛utP
=(
˛Y
<<10)+
˛X
;

3349 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

3350 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
);

3352 
difX
=
dñè_right_u
;
difX2
=difX<<1;

3353 
difY
=
dñè_right_v
;
difY2
=difY<<1;

3355 #ifde‡
FASTSOLID


3357 if(!
bCheckMask
 && !
DøwSemiTøns
)

3359 
i
=
ymö
;i<=
ymax
;i++)

3361 
xmö
=(
À·_x
 >> 16);

3362 
xmax
=(
right_x
 >> 16);

3363 if(
xmax
>
xmö
) xmax--;

3365 if(
døwW
<
xmax
) xmax=drawW;

3367 if(
xmax
>=
xmö
)

3369 
posX
=
À·_u
;

3370 
posY
=
À·_v
;

3372 if(
xmö
<
døwX
)

3373 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3375 
j
=
xmö
;j<
xmax
;j+=2)

3377 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3378 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

3379 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3380 
YAdju°
+(((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)];

3381 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3382 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3383 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3384 
posX
+=
difX2
;

3385 
posY
+=
difY2
;

3388 if(
j
==
xmax
)

3390 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3391 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

3392 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3395 if(
	`NextRow_FT
())

3405 
i
=
ymö
;i<=
ymax
;i++)

3407 
xmö
=(
À·_x
 >> 16);

3408 
xmax
=(
right_x
 >> 16)-1;

3409 if(
døwW
<
xmax
) xmax=drawW;

3411 if(
xmax
>=
xmö
)

3413 
posX
=
À·_u
;

3414 
posY
=
À·_v
;

3416 if(
xmö
<
døwX
)

3417 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3419 
j
=
xmö
;j<
xmax
;j+=2)

3421 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3422 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

3423 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3424 
YAdju°
+(((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)];

3425 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3426 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3427 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3428 
posX
+=
difX2
;

3429 
posY
+=
difY2
;

3432 if(
j
==
xmax
)

3434 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3435 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

3436 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3440 if(
	`NextRow_FT
())

3445 
	}
}

3449 #ifde‡
POLYQUAD3


3451 
	$døwPﬁy4TEx8_TRI
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

3453 
	`døwPﬁy3TEx8
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

3454 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

3455 
˛X
,
˛Y
);

3457 
	`døwPﬁy3TEx8
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

3458 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

3459 
˛X
,
˛Y
);

3460 
	}
}

3466 
	$døwPﬁy4TEx8
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

3468 
öt32_t
 
num
;

3469 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3470 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

3471 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

3472 
tC1
,
tC2
;

3474 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

3475 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

3476 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

3477 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

3478 if(
døwY
>=
døwH
) ;

3479 if(
døwX
>=
døwW
) ;

3481 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

3483 
ymax
=
Ymax
;

3485 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3486 if(
	`NextRow_FT4
()) ;

3488 
˛utP
=(
˛Y
<<10)+
˛X
;

3490 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

3492 #ifde‡
FASTSOLID


3494 if(!
bCheckMask
 && !
DøwSemiTøns
)

3496 
i
=
ymö
;i<=
ymax
;i++)

3498 
xmö
=(
À·_x
 >> 16);

3499 
xmax
=(
right_x
 >> 16);

3501 if(
xmax
>=
xmö
)

3503 
posX
=
À·_u
;

3504 
posY
=
À·_v
;

3506 
num
=(
xmax
-
xmö
);

3507 if(
num
==0)Çum=1;

3508 
difX
=(
right_u
-
posX
)/
num
;

3509 
difY
=(
right_v
-
posY
)/
num
;

3510 
difX2
=
difX
<<1;

3511 
difY2
=
difY
<<1;

3513 if(
xmö
<
døwX
)

3514 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3515 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3517 
j
=
xmö
;j<
xmax
;j+=2)

3519 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3520 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

3521 ((
posX
+
difX
)>>16)];

3522 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3523 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3524 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3525 
posX
+=
difX2
;

3526 
posY
+=
difY2
;

3528 if(
j
==
xmax
)

3530 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3531 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3534 if(
	`NextRow_FT4
()) ;

3541 
i
=
ymö
;i<=
ymax
;i++)

3543 
xmö
=(
À·_x
 >> 16);

3544 
xmax
=(
right_x
 >> 16);

3546 if(
xmax
>=
xmö
)

3548 
posX
=
À·_u
;

3549 
posY
=
À·_v
;

3551 
num
=(
xmax
-
xmö
);

3552 if(
num
==0)Çum=1;

3553 
difX
=(
right_u
-
posX
)/
num
;

3554 
difY
=(
right_v
-
posY
)/
num
;

3555 
difX2
=
difX
<<1;

3556 
difY2
=
difY
<<1;

3558 if(
xmö
<
døwX
)

3559 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3560 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3562 
j
=
xmö
;j<
xmax
;j+=2)

3564 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3565 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

3566 ((
posX
+
difX
)>>16)];

3567 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3568 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3569 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3570 
posX
+=
difX2
;

3571 
posY
+=
difY2
;

3573 if(
j
==
xmax
)

3575 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3576 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3579 if(
	`NextRow_FT4
()) ;

3581 
	}
}

3585 
	$døwPﬁy4TEx8_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

3587 
öt32_t
 
num
;

3588 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3589 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

3590 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

3591 
tC1
,
tC2
;

3593 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

3594 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

3595 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

3596 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

3597 if(
døwY
>=
døwH
) ;

3598 if(
døwX
>=
døwW
) ;

3600 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

3602 
ymax
=
Ymax
;

3604 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3605 if(
	`NextRow_FT4
()) ;

3607 
˛utP
=(
˛Y
<<10)+
˛X
;

3609 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

3610 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
);

3612 #ifde‡
FASTSOLID


3614 if(!
bCheckMask
 && !
DøwSemiTøns
)

3616 
i
=
ymö
;i<=
ymax
;i++)

3618 
xmö
=(
À·_x
 >> 16);

3619 
xmax
=(
right_x
 >> 16);

3621 if(
xmax
>=
xmö
)

3623 
posX
=
À·_u
;

3624 
posY
=
À·_v
;

3626 
num
=(
xmax
-
xmö
);

3627 if(
num
==0)Çum=1;

3628 
difX
=(
right_u
-
posX
)/
num
;

3629 
difY
=(
right_v
-
posY
)/
num
;

3630 
difX2
=
difX
<<1;

3631 
difY2
=
difY
<<1;

3633 if(
xmö
<
døwX
)

3634 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3635 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3637 
j
=
xmö
;j<
xmax
;j+=2)

3639 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3640 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

3641 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3642 
YAdju°
+(((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)];

3643 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3644 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3645 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3646 
posX
+=
difX2
;

3647 
posY
+=
difY2
;

3649 if(
j
==
xmax
)

3651 
tC1
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3652 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

3653 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3656 if(
	`NextRow_FT4
()) ;

3664 
i
=
ymö
;i<=
ymax
;i++)

3666 
xmö
=(
À·_x
 >> 16);

3667 
xmax
=(
right_x
 >> 16);

3669 if(
xmax
>=
xmö
)

3671 
posX
=
À·_u
;

3672 
posY
=
À·_v
;

3674 
num
=(
xmax
-
xmö
);

3675 if(
num
==0)Çum=1;

3676 
difX
=(
right_u
-
posX
)/
num
;

3677 
difY
=(
right_v
-
posY
)/
num
;

3678 
difX2
=
difX
<<1;

3679 
difY2
=
difY
<<1;

3681 if(
xmö
<
døwX
)

3682 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3683 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3685 
j
=
xmö
;j<
xmax
;j+=2)

3687 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3688 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

3689 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3690 
YAdju°
+(((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)];

3691 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3692 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3693 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3694 
posX
+=
difX2
;

3695 
posY
+=
difY2
;

3697 if(
j
==
xmax
)

3699 
tC1
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3700 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

3701 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3704 if(
	`NextRow_FT4
()) ;

3706 
	}
}

3710 
	$døwPﬁy4TEx8_TW_S
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

3712 
öt32_t
 
num
;

3713 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3714 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

3715 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

3716 
tC1
,
tC2
;

3718 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

3719 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

3720 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

3721 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

3722 if(
døwY
>=
døwH
) ;

3723 if(
døwX
>=
døwW
) ;

3725 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

3727 
ymax
=
Ymax
;

3729 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3730 if(
	`NextRow_FT4
()) ;

3732 
˛utP
=(
˛Y
<<10)+
˛X
;

3734 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

3735 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
);

3737 #ifde‡
FASTSOLID


3739 if(!
bCheckMask
 && !
DøwSemiTøns
)

3741 
i
=
ymö
;i<=
ymax
;i++)

3743 
xmö
=(
À·_x
 >> 16);

3744 
xmax
=(
right_x
 >> 16);

3746 if(
xmax
>=
xmö
)

3748 
posX
=
À·_u
;

3749 
posY
=
À·_v
;

3751 
num
=(
xmax
-
xmö
);

3752 if(
num
==0)Çum=1;

3753 
difX
=(
right_u
-
posX
)/
num
;

3754 
difY
=(
right_v
-
posY
)/
num
;

3755 
difX2
=
difX
<<1;

3756 
difY2
=
difY
<<1;

3758 if(
xmö
<
døwX
)

3759 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3760 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3762 
j
=
xmö
;j<
xmax
;j+=2)

3764 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3765 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

3766 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3767 
YAdju°
+(((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)];

3768 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3769 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3770 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3771 
posX
+=
difX2
;

3772 
posY
+=
difY2
;

3774 if(
j
==
xmax
)

3776 
tC1
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3777 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

3778 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3781 if(
	`NextRow_FT4
()) ;

3789 
i
=
ymö
;i<=
ymax
;i++)

3791 
xmö
=(
À·_x
 >> 16);

3792 
xmax
=(
right_x
 >> 16);

3794 if(
xmax
>=
xmö
)

3796 
posX
=
À·_u
;

3797 
posY
=
À·_v
;

3799 
num
=(
xmax
-
xmö
);

3800 if(
num
==0)Çum=1;

3801 
difX
=(
right_u
-
posX
)/
num
;

3802 
difY
=(
right_v
-
posY
)/
num
;

3803 
difX2
=
difX
<<1;

3804 
difY2
=
difY
<<1;

3806 if(
xmö
<
døwX
)

3807 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3808 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3810 
j
=
xmö
;j<
xmax
;j+=2)

3812 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3813 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

3814 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3815 
YAdju°
+(((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)];

3816 
	`GëTextuªTønsCﬁG32_SPR
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3817 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3818 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3819 
posX
+=
difX2
;

3820 
posY
+=
difY2
;

3822 if(
j
==
xmax
)

3824 
tC1
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

3825 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

3826 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3829 if(
	`NextRow_FT4
()) ;

3831 
	}
}

3837 
	$døwPﬁy3TD
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
)

3839 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3840 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

3841 
öt32_t
 
posX
,
posY
;

3843 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

3844 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

3845 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

3846 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

3847 if(
døwY
>=
døwH
) ;

3848 if(
døwX
>=
døwW
) ;

3850 if(!
	`SëupSe˘i⁄s_FT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
)) ;

3852 
ymax
=
Ymax
;

3854 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3855 if(
	`NextRow_FT
()) ;

3857 
difX
=
dñè_right_u
;
difX2
=difX<<1;

3858 
difY
=
dñè_right_v
;
difY2
=difY<<1;

3860 #ifde‡
FASTSOLID


3862 if(!
bCheckMask
 && !
DøwSemiTøns
)

3864 
i
=
ymö
;i<=
ymax
;i++)

3866 
xmö
=(
À·_x
 >> 16);

3867 
xmax
=(
right_x
 >> 16)-1;

3868 if(
døwW
<
xmax
) xmax=drawW;

3870 if(
xmax
>=
xmö
)

3872 
posX
=
À·_u
;

3873 
posY
=
À·_v
;

3875 if(
xmö
<
døwX
)

3876 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3878 
j
=
xmö
;j<
xmax
;j+=2)

3880 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3881 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[((((
posY
+
difY
)>>16)+
GlobÆTextAddrY
)<<10)+((
posX
+
difX
)>>16)+
GlobÆTextAddrX
]))<<16)|

3882 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+((
posX
)>>16)+
GlobÆTextAddrX
]));

3884 
posX
+=
difX2
;

3885 
posY
+=
difY2
;

3887 if(
j
==
xmax
)

3888 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],

3889 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]));

3891 if(
	`NextRow_FT
())

3901 
i
=
ymö
;i<=
ymax
;i++)

3903 
xmö
=(
À·_x
 >> 16);

3904 
xmax
=(
right_x
 >> 16)-1;

3905 if(
døwW
<
xmax
) xmax=drawW;

3907 if(
xmax
>=
xmö
)

3909 
posX
=
À·_u
;

3910 
posY
=
À·_v
;

3912 if(
xmö
<
døwX
)

3913 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3915 
j
=
xmö
;j<
xmax
;j+=2)

3917 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3918 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[((((
posY
+
difY
)>>16)+
GlobÆTextAddrY
)<<10)+((
posX
+
difX
)>>16)+
GlobÆTextAddrX
]))<<16)|

3919 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+((
posX
)>>16)+
GlobÆTextAddrX
]));

3921 
posX
+=
difX2
;

3922 
posY
+=
difY2
;

3924 if(
j
==
xmax
)

3925 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],

3926 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]));

3928 if(
	`NextRow_FT
())

3933 
	}
}

3937 
	$døwPﬁy3TD_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
)

3939 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3940 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

3941 
öt32_t
 
posX
,
posY
;

3943 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

3944 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

3945 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

3946 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

3947 if(
døwY
>=
døwH
) ;

3948 if(
døwX
>=
døwW
) ;

3950 if(!
	`SëupSe˘i⁄s_FT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
)) ;

3952 
ymax
=
Ymax
;

3954 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3955 if(
	`NextRow_FT
()) ;

3957 
difX
=
dñè_right_u
;
difX2
=difX<<1;

3958 
difY
=
dñè_right_v
;
difY2
=difY<<1;

3960 #ifde‡
FASTSOLID


3962 if(!
bCheckMask
 && !
DøwSemiTøns
)

3964 
i
=
ymö
;i<=
ymax
;i++)

3966 
xmö
=(
À·_x
 >> 16);

3967 
xmax
=(
right_x
 >> 16)-1;

3968 if(
døwW
<
xmax
) xmax=drawW;

3970 if(
xmax
>=
xmö
)

3972 
posX
=
À·_u
;

3973 
posY
=
À·_v
;

3975 if(
xmö
<
døwX
)

3976 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3978 
j
=
xmö
;j<
xmax
;j+=2)

3980 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3981 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

3982 (((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]))<<16)|

3983 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

3984 (((
posX
)>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]));

3986 
posX
+=
difX2
;

3987 
posY
+=
difY2
;

3989 if(
j
==
xmax
)

3990 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],

3991 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

3992 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]));

3994 if(
	`NextRow_FT
())

4004 
i
=
ymö
;i<=
ymax
;i++)

4006 
xmö
=(
À·_x
 >> 16);

4007 
xmax
=(
right_x
 >> 16)-1;

4008 if(
døwW
<
xmax
) xmax=drawW;

4010 if(
xmax
>=
xmö
)

4012 
posX
=
À·_u
;

4013 
posY
=
À·_v
;

4015 if(
xmö
<
døwX
)

4016 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4018 
j
=
xmö
;j<
xmax
;j+=2)

4020 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4021 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4022 (((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]))<<16)|

4023 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4024 (((
posX
)>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]));

4026 
posX
+=
difX2
;

4027 
posY
+=
difY2
;

4029 if(
j
==
xmax
)

4030 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],

4031 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4032 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]));

4034 if(
	`NextRow_FT
())

4039 
	}
}

4044 #ifde‡
POLYQUAD3


4046 
	$døwPﬁy4TD_TRI
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
)

4048 
	`døwPﬁy3TD
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

4049 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
);

4050 
	`døwPﬁy3TD
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

4051 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
);

4052 
	}
}

4058 
	$døwPﬁy4TD
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
)

4060 
öt32_t
 
num
;

4061 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4062 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

4063 
öt32_t
 
posX
,
posY
;

4065 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

4066 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

4067 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

4068 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

4069 if(
døwY
>=
døwH
) ;

4070 if(
døwX
>=
døwW
) ;

4072 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

4074 
ymax
=
Ymax
;

4076 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4077 if(
	`NextRow_FT4
()) ;

4079 #ifde‡
FASTSOLID


4081 if(!
bCheckMask
 && !
DøwSemiTøns
)

4083 
i
=
ymö
;i<=
ymax
;i++)

4085 
xmö
=(
À·_x
 >> 16);

4086 
xmax
=(
right_x
 >> 16);

4088 if(
xmax
>=
xmö
)

4090 
posX
=
À·_u
;

4091 
posY
=
À·_v
;

4093 
num
=(
xmax
-
xmö
);

4094 if(
num
==0)Çum=1;

4095 
difX
=(
right_u
-
posX
)/
num
;

4096 
difY
=(
right_v
-
posY
)/
num
;

4097 
difX2
=
difX
<<1;

4098 
difY2
=
difY
<<1;

4100 if(
xmö
<
døwX
)

4101 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4102 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4104 
j
=
xmö
;j<
xmax
;j+=2)

4106 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4107 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[((((
posY
+
difY
)>>16)+
GlobÆTextAddrY
)<<10)+((
posX
+
difX
)>>16)+
GlobÆTextAddrX
]))<<16)|

4108 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+((
posX
)>>16)+
GlobÆTextAddrX
]));

4110 
posX
+=
difX2
;

4111 
posY
+=
difY2
;

4113 if(
j
==
xmax
)

4114 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],

4115 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]));

4117 if(
	`NextRow_FT4
()) ;

4124 
i
=
ymö
;i<=
ymax
;i++)

4126 
xmö
=(
À·_x
 >> 16);

4127 
xmax
=(
right_x
 >> 16);

4129 if(
xmax
>=
xmö
)

4131 
posX
=
À·_u
;

4132 
posY
=
À·_v
;

4134 
num
=(
xmax
-
xmö
);

4135 if(
num
==0)Çum=1;

4136 
difX
=(
right_u
-
posX
)/
num
;

4137 
difY
=(
right_v
-
posY
)/
num
;

4138 
difX2
=
difX
<<1;

4139 
difY2
=
difY
<<1;

4141 if(
xmö
<
døwX
)

4142 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4143 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4145 
j
=
xmö
;j<
xmax
;j+=2)

4147 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4148 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[((((
posY
+
difY
)>>16)+
GlobÆTextAddrY
)<<10)+((
posX
+
difX
)>>16)+
GlobÆTextAddrX
]))<<16)|

4149 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+((
posX
)>>16)+
GlobÆTextAddrX
]));

4151 
posX
+=
difX2
;

4152 
posY
+=
difY2
;

4154 if(
j
==
xmax
)

4155 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],

4156 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]));

4158 if(
	`NextRow_FT4
()) ;

4160 
	}
}

4164 
	$døwPﬁy4TD_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
)

4166 
öt32_t
 
num
;

4167 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4168 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

4169 
öt32_t
 
posX
,
posY
;

4171 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

4172 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

4173 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

4174 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

4175 if(
døwY
>=
døwH
) ;

4176 if(
døwX
>=
døwW
) ;

4178 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

4180 
ymax
=
Ymax
;

4182 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4183 if(
	`NextRow_FT4
()) ;

4185 #ifde‡
FASTSOLID


4187 if(!
bCheckMask
 && !
DøwSemiTøns
)

4189 
i
=
ymö
;i<=
ymax
;i++)

4191 
xmö
=(
À·_x
 >> 16);

4192 
xmax
=(
right_x
 >> 16);

4194 if(
xmax
>=
xmö
)

4196 
posX
=
À·_u
;

4197 
posY
=
À·_v
;

4199 
num
=(
xmax
-
xmö
);

4200 if(
num
==0)Çum=1;

4201 
difX
=(
right_u
-
posX
)/
num
;

4202 
difY
=(
right_v
-
posY
)/
num
;

4203 
difX2
=
difX
<<1;

4204 
difY2
=
difY
<<1;

4206 if(
xmö
<
døwX
)

4207 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4208 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4210 
j
=
xmö
;j<
xmax
;j+=2)

4212 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4213 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4214 (((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]))<<16)|

4215 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
)<<10)+TWö.Posôi⁄.
y0
+

4216 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]));

4218 
posX
+=
difX2
;

4219 
posY
+=
difY2
;

4221 if(
j
==
xmax
)

4222 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],

4223 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4224 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]));

4226 if(
	`NextRow_FT4
()) ;

4233 
i
=
ymö
;i<=
ymax
;i++)

4235 
xmö
=(
À·_x
 >> 16);

4236 
xmax
=(
right_x
 >> 16);

4238 if(
xmax
>=
xmö
)

4240 
posX
=
À·_u
;

4241 
posY
=
À·_v
;

4243 
num
=(
xmax
-
xmö
);

4244 if(
num
==0)Çum=1;

4245 
difX
=(
right_u
-
posX
)/
num
;

4246 
difY
=(
right_v
-
posY
)/
num
;

4247 
difX2
=
difX
<<1;

4248 
difY2
=
difY
<<1;

4250 if(
xmö
<
døwX
)

4251 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4252 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4254 
j
=
xmö
;j<
xmax
;j+=2)

4256 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4257 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4258 (((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]))<<16)|

4259 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4260 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]));

4262 
posX
+=
difX2
;

4263 
posY
+=
difY2
;

4265 if(
j
==
xmax
)

4266 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],

4267 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4268 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]));

4270 if(
	`NextRow_FT4
()) ;

4272 
	}
}

4276 
	$døwPﬁy4TD_TW_S
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
)

4278 
öt32_t
 
num
;

4279 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4280 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

4281 
öt32_t
 
posX
,
posY
;

4283 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

4284 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

4285 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

4286 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

4287 if(
døwY
>=
døwH
) ;

4288 if(
døwX
>=
døwW
) ;

4290 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

4292 
ymax
=
Ymax
;

4294 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4295 if(
	`NextRow_FT4
()) ;

4297 #ifde‡
FASTSOLID


4299 if(!
bCheckMask
 && !
DøwSemiTøns
)

4301 
i
=
ymö
;i<=
ymax
;i++)

4303 
xmö
=(
À·_x
 >> 16);

4304 
xmax
=(
right_x
 >> 16);

4306 if(
xmax
>=
xmö
)

4308 
posX
=
À·_u
;

4309 
posY
=
À·_v
;

4311 
num
=(
xmax
-
xmö
);

4312 if(
num
==0)Çum=1;

4313 
difX
=(
right_u
-
posX
)/
num
;

4314 
difY
=(
right_v
-
posY
)/
num
;

4315 
difX2
=
difX
<<1;

4316 
difY2
=
difY
<<1;

4318 if(
xmö
<
døwX
)

4319 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4320 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4322 
j
=
xmö
;j<
xmax
;j+=2)

4324 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4325 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4326 (((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]))<<16)|

4327 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
)<<10)+TWö.Posôi⁄.
y0
+

4328 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]));

4330 
posX
+=
difX2
;

4331 
posY
+=
difY2
;

4333 if(
j
==
xmax
)

4334 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],

4335 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4336 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]));

4338 if(
	`NextRow_FT4
()) ;

4345 
i
=
ymö
;i<=
ymax
;i++)

4347 
xmö
=(
À·_x
 >> 16);

4348 
xmax
=(
right_x
 >> 16);

4350 if(
xmax
>=
xmö
)

4352 
posX
=
À·_u
;

4353 
posY
=
À·_v
;

4355 
num
=(
xmax
-
xmö
);

4356 if(
num
==0)Çum=1;

4357 
difX
=(
right_u
-
posX
)/
num
;

4358 
difY
=(
right_v
-
posY
)/
num
;

4359 
difX2
=
difX
<<1;

4360 
difY2
=
difY
<<1;

4362 if(
xmö
<
døwX
)

4363 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4364 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4366 
j
=
xmö
;j<
xmax
;j+=2)

4368 
	`GëTextuªTønsCﬁG32_SPR
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4369 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4370 (((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]))<<16)|

4371 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4372 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]));

4374 
posX
+=
difX2
;

4375 
posY
+=
difY2
;

4377 if(
j
==
xmax
)

4378 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[(
i
<<10)+
j
],

4379 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

4380 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]));

4382 if(
	`NextRow_FT4
()) ;

4384 
	}
}

4390 
INLINE
 
	$døwPﬁy3Gi
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
öt32_t
 
rgb1
, i¡32_à
rgb2
, i¡32_à
rgb3
)

4392 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4393 
öt32_t
 
cR1
,
cG1
,
cB1
;

4394 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

4396 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

4397 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

4398 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

4399 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

4400 if(
døwY
>=
døwH
) ;

4401 if(
døwX
>=
døwW
) ;

4403 if(!
	`SëupSe˘i⁄s_G
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
rgb1
,
rgb2
,
rgb3
)) ;

4405 
ymax
=
Ymax
;

4407 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4408 if(
	`NextRow_G
()) ;

4410 
difR
=
dñè_right_R
;

4411 
difG
=
dñè_right_G
;

4412 
difB
=
dñè_right_B
;

4413 
difR2
=
difR
<<1;

4414 
difG2
=
difG
<<1;

4415 
difB2
=
difB
<<1;

4417 #ifde‡
FASTSOLID


4419 if(!
bCheckMask
 && !
DøwSemiTøns
 && 
iDôhî
!=2)

4421 
i
=
ymö
;i<=
ymax
;i++)

4423 
xmö
=(
À·_x
 >> 16);

4424 
xmax
=(
right_x
 >> 16)-1;if(
døwW
<xmax) xmax=drawW;

4426 if(
xmax
>=
xmö
)

4428 
cR1
=
À·_R
;

4429 
cG1
=
À·_G
;

4430 
cB1
=
À·_B
;

4432 if(
xmö
<
døwX
)

4433 {
j
=
døwX
-
xmö
;xmö=døwX;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4435 
j
=
xmö
;j<
xmax
;j+=2)

4437 
	`PUTLE32
(((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
]),

4438 ((((
cR1
+
difR
Ë<<7)&0x7c000000)|(((
cG1
+
difG
Ë<< 2)&0x03e00000)|(((
cB1
+
difB
)>>3)&0x001f0000)|

4439 (((
cR1
Ë>> 9)&0x7c00)|(((
cG1
Ë>> 14)&0x03e0)|(((
cB1
Ë>> 19)&0x001f))|
lSëMask
);

4441 
cR1
+=
difR2
;

4442 
cG1
+=
difG2
;

4443 
cB1
+=
difB2
;

4445 if(
j
==
xmax
)

4446 
	`PUTLE16
(&
psxVuw
[(
i
<<10)+
j
], (((
cR1
 >> 9)&0x7c00)|((
cG1
 >> 14)&0x03e0)|((
cB1
 >> 19)&0x001f))|
sSëMask
);

4448 if(
	`NextRow_G
()) ;

4455 if(
iDôhî
==2)

4456 
i
=
ymö
;i<=
ymax
;i++)

4458 
xmö
=(
À·_x
 >> 16);

4459 
xmax
=(
right_x
 >> 16)-1;if(
døwW
<xmax) xmax=drawW;

4461 if(
xmax
>=
xmö
)

4463 
cR1
=
À·_R
;

4464 
cG1
=
À·_G
;

4465 
cB1
=
À·_B
;

4467 if(
xmö
<
døwX
)

4468 {
j
=
døwX
-
xmö
;xmö=døwX;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4470 
j
=
xmö
;j<=
xmax
;j++)

4472 
	`GëShadeTønsCﬁ_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],(
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4474 
cR1
+=
difR
;

4475 
cG1
+=
difG
;

4476 
cB1
+=
difB
;

4479 if(
	`NextRow_G
()) ;

4482 
i
=
ymö
;i<=
ymax
;i++)

4484 
xmö
=(
À·_x
 >> 16);

4485 
xmax
=(
right_x
 >> 16)-1;if(
døwW
<xmax) xmax=drawW;

4487 if(
xmax
>=
xmö
)

4489 
cR1
=
À·_R
;

4490 
cG1
=
À·_G
;

4491 
cB1
=
À·_B
;

4493 if(
xmö
<
døwX
)

4494 {
j
=
døwX
-
xmö
;xmö=døwX;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4496 
j
=
xmö
;j<=
xmax
;j++)

4498 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
i
<<10)+
j
],((
cR1
 >> 9)&0x7c00)|((
cG1
 >> 14)&0x03e0)|((
cB1
 >> 19)&0x001f));

4500 
cR1
+=
difR
;

4501 
cG1
+=
difG
;

4502 
cB1
+=
difB
;

4505 if(
	`NextRow_G
()) ;

4508 
	}
}

4512 
	$døwPﬁy3G
(
öt32_t
 
rgb1
, i¡32_à
rgb2
, i¡32_à
rgb3
)

4514 
	`døwPﬁy3Gi
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,
rgb1
,
rgb2
,
rgb3
);

4515 
	}
}

4519 
	$døwPﬁy4G
(
öt32_t
 
rgb1
, i¡32_à
rgb2
, i¡32_à
rgb3
, i¡32_à
rgb4
)

4521 
	`døwPﬁy3Gi
(
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

4522 
rgb2
,
rgb4
,
rgb3
);

4523 
	`døwPﬁy3Gi
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

4524 
rgb1
,
rgb2
,
rgb3
);

4525 
	}
}

4531 
	$døwPﬁy3TGEx4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
˛X
, 
˛Y
,
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
)

4533 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4534 
öt32_t
 
cR1
,
cG1
,
cB1
;

4535 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

4536 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

4537 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
,
XAdju°
;

4538 
tC1
,
tC2
;

4540 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

4541 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

4542 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

4543 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

4544 if(
døwY
>=
døwH
) ;

4545 if(
døwX
>=
døwW
) ;

4547 if(!
	`SëupSe˘i⁄s_GT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
cﬁ1
,
cﬁ2
,
cﬁ3
)) ;

4549 
ymax
=
Ymax
;

4551 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4552 if(
	`NextRow_GT
()) ;

4554 
˛utP
=(
˛Y
<<10)+
˛X
;

4556 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

4558 
difR
=
dñè_right_R
;

4559 
difG
=
dñè_right_G
;

4560 
difB
=
dñè_right_B
;

4561 
difR2
=
difR
<<1;

4562 
difG2
=
difG
<<1;

4563 
difB2
=
difB
<<1;

4565 
difX
=
dñè_right_u
;
difX2
=difX<<1;

4566 
difY
=
dñè_right_v
;
difY2
=difY<<1;

4568 #ifde‡
FASTSOLID


4570 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

4572 
i
=
ymö
;i<=
ymax
;i++)

4574 
xmö
=((
À·_x
) >> 16);

4575 
xmax
=((
right_x
) >> 16)-1;

4576 if(
døwW
<
xmax
) xmax=drawW;

4578 if(
xmax
>=
xmö
)

4580 
posX
=
À·_u
;

4581 
posY
=
À·_v
;

4582 
cR1
=
À·_R
;

4583 
cG1
=
À·_G
;

4584 
cB1
=
À·_B
;

4586 if(
xmö
<
døwX
)

4587 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4589 
j
=
xmö
;j<
xmax
;j+=2)

4591 
XAdju°
=(
posX
>>16);

4592 
tC1
 = 
psxVub
[((
posY
>>5)&0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

4593 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4594 
XAdju°
=((
posX
+
difX
)>>16);

4595 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

4596 (
XAdju°
>>1)];

4597 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

4599 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4600 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

4601 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16,

4602 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

4603 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

4604 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

4605 
posX
+=
difX2
;

4606 
posY
+=
difY2
;

4607 
cR1
+=
difR2
;

4608 
cG1
+=
difG2
;

4609 
cB1
+=
difB2
;

4611 if(
j
==
xmax
)

4613 
XAdju°
=(
posX
>>16);

4614 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

4615 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4616 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

4617 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4618 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4621 if(
	`NextRow_GT
())

4631 
i
=
ymö
;i<=
ymax
;i++)

4633 
xmö
=(
À·_x
 >> 16);

4634 
xmax
=(
right_x
 >> 16)-1;

4635 if(
døwW
<
xmax
) xmax=drawW;

4637 if(
xmax
>=
xmö
)

4639 
posX
=
À·_u
;

4640 
posY
=
À·_v
;

4641 
cR1
=
À·_R
;

4642 
cG1
=
À·_G
;

4643 
cB1
=
À·_B
;

4645 if(
xmö
<
døwX
)

4646 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4648 
j
=
xmö
;j<=
xmax
;j++)

4650 
XAdju°
=(
posX
>>16);

4651 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

4652 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4653 if(
iDôhî
)

4654 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

4655 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4656 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4658 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

4659 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4660 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4661 
posX
+=
difX
;

4662 
posY
+=
difY
;

4663 
cR1
+=
difR
;

4664 
cG1
+=
difG
;

4665 
cB1
+=
difB
;

4668 if(
	`NextRow_GT
())

4673 
	}
}

4677 
	$døwPﬁy3TGEx4_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
˛X
, 
˛Y
,
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
)

4679 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4680 
öt32_t
 
cR1
,
cG1
,
cB1
;

4681 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

4682 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

4683 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
,
XAdju°
;

4684 
tC1
,
tC2
;

4686 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

4687 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

4688 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

4689 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

4690 if(
døwY
>=
døwH
) ;

4691 if(
døwX
>=
døwW
) ;

4693 if(!
	`SëupSe˘i⁄s_GT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
cﬁ1
,
cﬁ2
,
cﬁ3
)) ;

4695 
ymax
=
Ymax
;

4697 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4698 if(
	`NextRow_GT
()) ;

4700 
˛utP
=(
˛Y
<<10)+
˛X
;

4702 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

4703 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
>>1);

4705 
difR
=
dñè_right_R
;

4706 
difG
=
dñè_right_G
;

4707 
difB
=
dñè_right_B
;

4708 
difR2
=
difR
<<1;

4709 
difG2
=
difG
<<1;

4710 
difB2
=
difB
<<1;

4712 
difX
=
dñè_right_u
;
difX2
=difX<<1;

4713 
difY
=
dñè_right_v
;
difY2
=difY<<1;

4715 #ifde‡
FASTSOLID


4717 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

4719 
i
=
ymö
;i<=
ymax
;i++)

4721 
xmö
=((
À·_x
) >> 16);

4722 
xmax
=((
right_x
) >> 16)-1;

4723 if(
døwW
<
xmax
) xmax=drawW;

4725 if(
xmax
>=
xmö
)

4727 
posX
=
À·_u
;

4728 
posY
=
À·_v
;

4729 
cR1
=
À·_R
;

4730 
cG1
=
À·_G
;

4731 
cB1
=
À·_B
;

4733 if(
xmö
<
døwX
)

4734 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4736 
j
=
xmö
;j<
xmax
;j+=2)

4738 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

4739 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

4740 
YAdju°
+(
XAdju°
>>1)];

4741 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4742 
XAdju°
=((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
;

4743 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

4744 
YAdju°
+(
XAdju°
>>1)];

4745 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

4746 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4747 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

4748 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16,

4749 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

4750 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

4751 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

4752 
posX
+=
difX2
;

4753 
posY
+=
difY2
;

4754 
cR1
+=
difR2
;

4755 
cG1
+=
difG2
;

4756 
cB1
+=
difB2
;

4758 if(
j
==
xmax
)

4760 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

4761 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

4762 
YAdju°
+(
XAdju°
>>1)];

4763 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4764 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

4765 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4766 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4769 if(
	`NextRow_GT
())

4779 
i
=
ymö
;i<=
ymax
;i++)

4781 
xmö
=(
À·_x
 >> 16);

4782 
xmax
=(
right_x
 >> 16)-1;

4783 if(
døwW
<
xmax
) xmax=drawW;

4785 if(
xmax
>=
xmö
)

4787 
posX
=
À·_u
;

4788 
posY
=
À·_v
;

4789 
cR1
=
À·_R
;

4790 
cG1
=
À·_G
;

4791 
cB1
=
À·_B
;

4793 if(
xmö
<
døwX
)

4794 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4796 
j
=
xmö
;j<=
xmax
;j++)

4798 
XAdju°
=(
posX
>>16)%
TWö
.
Posôi⁄
.
x1
;

4799 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

4800 
YAdju°
+(
XAdju°
>>1)];

4801 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4802 if(
iDôhî
)

4803 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

4804 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4805 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4807 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

4808 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4809 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4810 
posX
+=
difX
;

4811 
posY
+=
difY
;

4812 
cR1
+=
difR
;

4813 
cG1
+=
difG
;

4814 
cB1
+=
difB
;

4817 if(
	`NextRow_GT
())

4822 
	}
}

4824 #ifde‡
POLYQUAD3GT


4826 
	$døwPﬁy4TGEx4_TRI
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
,

4827 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,

4828 
˛X
, 
˛Y
,

4829 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
, i¡32_à
cﬁ4
)

4831 
	`døwPﬁy3TGEx4
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

4832 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

4833 
˛X
,
˛Y
,

4834 
cﬁ2
,
cﬁ4
,
cﬁ3
);

4835 
	`døwPﬁy3TGEx4
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

4836 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

4837 
˛X
,
˛Y
,

4838 
cﬁ1
,
cﬁ2
,
cﬁ3
);

4839 
	}
}

4845 
	$døwPﬁy4TGEx4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
,

4846 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,

4847 
˛X
, 
˛Y
,

4848 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ4
, i¡32_à
cﬁ3
)

4850 
öt32_t
 
num
;

4851 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4852 
öt32_t
 
cR1
,
cG1
,
cB1
;

4853 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

4854 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

4855 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
,
XAdju°
;

4856 
tC1
,
tC2
;

4858 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

4859 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

4860 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

4861 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

4862 if(
døwY
>=
døwH
) ;

4863 if(
døwX
>=
døwW
) ;

4865 if(!
	`SëupSe˘i⁄s_GT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,
cﬁ1
,
cﬁ2
,
cﬁ3
,
cﬁ4
)) ;

4867 
ymax
=
Ymax
;

4869 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4870 if(
	`NextRow_GT4
()) ;

4872 
˛utP
=(
˛Y
<<10)+
˛X
;

4874 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

4877 #ifde‡
FASTSOLID


4879 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

4881 
i
=
ymö
;i<=
ymax
;i++)

4883 
xmö
=(
À·_x
 >> 16);

4884 
xmax
=(
right_x
 >> 16);

4886 if(
xmax
>=
xmö
)

4888 
posX
=
À·_u
;

4889 
posY
=
À·_v
;

4891 
num
=(
xmax
-
xmö
);

4892 if(
num
==0)Çum=1;

4893 
difX
=(
right_u
-
posX
)/
num
;

4894 
difY
=(
right_v
-
posY
)/
num
;

4895 
difX2
=
difX
<<1;

4896 
difY2
=
difY
<<1;

4898 
cR1
=
À·_R
;

4899 
cG1
=
À·_G
;

4900 
cB1
=
À·_B
;

4901 
difR
=(
right_R
-
cR1
)/
num
;

4902 
difG
=(
right_G
-
cG1
)/
num
;

4903 
difB
=(
right_B
-
cB1
)/
num
;

4904 
difR2
=
difR
<<1;

4905 
difG2
=
difG
<<1;

4906 
difB2
=
difB
<<1;

4908 if(
xmö
<
døwX
)

4909 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4910 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4912 
j
=
xmö
;j<
xmax
;j+=2)

4914 
XAdju°
=(
posX
>>16);

4915 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

4916 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4917 
XAdju°
=((
posX
+
difX
)>>16);

4918 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

4919 (
XAdju°
>>1)];

4920 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

4922 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4923 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

4924 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16,

4925 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

4926 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

4927 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

4928 
posX
+=
difX2
;

4929 
posY
+=
difY2
;

4930 
cR1
+=
difR2
;

4931 
cG1
+=
difG2
;

4932 
cB1
+=
difB2
;

4934 if(
j
==
xmax
)

4936 
XAdju°
=(
posX
>>16);

4937 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

4938 (
XAdju°
>>1)];

4939 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4941 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

4942 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4943 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4946 if(
	`NextRow_GT4
()) ;

4953 
i
=
ymö
;i<=
ymax
;i++)

4955 
xmö
=(
À·_x
 >> 16);

4956 
xmax
=(
right_x
 >> 16);

4958 if(
xmax
>=
xmö
)

4960 
posX
=
À·_u
;

4961 
posY
=
À·_v
;

4963 
num
=(
xmax
-
xmö
);

4964 if(
num
==0)Çum=1;

4965 
difX
=(
right_u
-
posX
)/
num
;

4966 
difY
=(
right_v
-
posY
)/
num
;

4967 
difX2
=
difX
<<1;

4968 
difY2
=
difY
<<1;

4970 
cR1
=
À·_R
;

4971 
cG1
=
À·_G
;

4972 
cB1
=
À·_B
;

4973 
difR
=(
right_R
-
cR1
)/
num
;

4974 
difG
=(
right_G
-
cG1
)/
num
;

4975 
difB
=(
right_B
-
cB1
)/
num
;

4976 
difR2
=
difR
<<1;

4977 
difG2
=
difG
<<1;

4978 
difB2
=
difB
<<1;

4980 if(
xmö
<
døwX
)

4981 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4982 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4984 
j
=
xmö
;j<=
xmax
;j++)

4986 
XAdju°
=(
posX
>>16);

4987 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

4988 (
XAdju°
>>1)];

4989 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4990 if(
iDôhî
)

4991 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

4992 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4993 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4995 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

4996 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4997 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4998 
posX
+=
difX
;

4999 
posY
+=
difY
;

5000 
cR1
+=
difR
;

5001 
cG1
+=
difG
;

5002 
cB1
+=
difB
;

5005 if(
	`NextRow_GT4
()) ;

5007 
	}
}

5011 
	$døwPﬁy4TGEx4_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
,

5012 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,

5013 
˛X
, 
˛Y
,

5014 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
, i¡32_à
cﬁ4
)

5016 
	`døwPﬁy3TGEx4_TW
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

5017 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

5018 
˛X
,
˛Y
,

5019 
cﬁ2
,
cﬁ4
,
cﬁ3
);

5021 
	`døwPﬁy3TGEx4_TW
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

5022 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

5023 
˛X
,
˛Y
,

5024 
cﬁ1
,
cﬁ2
,
cﬁ3
);

5025 
	}
}

5031 
	$døwPﬁy3TGEx8
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
˛X
, 
˛Y
,
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
)

5033 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

5034 
öt32_t
 
cR1
,
cG1
,
cB1
;

5035 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

5036 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

5037 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

5038 
tC1
,
tC2
;

5040 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

5041 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

5042 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

5043 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

5044 if(
døwY
>=
døwH
) ;

5045 if(
døwX
>=
døwW
) ;

5047 if(!
	`SëupSe˘i⁄s_GT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
cﬁ1
,
cﬁ2
,
cﬁ3
)) ;

5049 
ymax
=
Ymax
;

5051 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

5052 if(
	`NextRow_GT
()) ;

5054 
˛utP
=(
˛Y
<<10)+
˛X
;

5056 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

5058 
difR
=
dñè_right_R
;

5059 
difG
=
dñè_right_G
;

5060 
difB
=
dñè_right_B
;

5061 
difR2
=
difR
<<1;

5062 
difG2
=
difG
<<1;

5063 
difB2
=
difB
<<1;

5064 
difX
=
dñè_right_u
;
difX2
=difX<<1;

5065 
difY
=
dñè_right_v
;
difY2
=difY<<1;

5067 #ifde‡
FASTSOLID


5069 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

5071 
i
=
ymö
;i<=
ymax
;i++)

5073 
xmö
=(
À·_x
 >> 16);

5074 
xmax
=(
right_x
 >> 16)-1;

5075 if(
døwW
<
xmax
) xmax=drawW;

5077 if(
xmax
>=
xmö
)

5079 
posX
=
À·_u
;

5080 
posY
=
À·_v
;

5081 
cR1
=
À·_R
;

5082 
cG1
=
À·_G
;

5083 
cB1
=
À·_B
;

5085 if(
xmö
<
døwX
)

5086 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5088 
j
=
xmö
;j<
xmax
;j+=2)

5090 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+((
posX
>>16))];

5091 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

5092 (((
posX
+
difX
)>>16))];

5093 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

5094 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

5095 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16,

5096 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

5097 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

5098 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

5099 
posX
+=
difX2
;

5100 
posY
+=
difY2
;

5101 
cR1
+=
difR2
;

5102 
cG1
+=
difG2
;

5103 
cB1
+=
difB2
;

5105 if(
j
==
xmax
)

5107 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+((
posX
>>16))];

5108 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

5109 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5110 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5113 if(
	`NextRow_GT
())

5123 
i
=
ymö
;i<=
ymax
;i++)

5125 
xmö
=(
À·_x
 >> 16);

5126 
xmax
=(
right_x
 >> 16)-1;

5127 if(
døwW
<
xmax
) xmax=drawW;

5129 if(
xmax
>=
xmö
)

5131 
posX
=
À·_u
;

5132 
posY
=
À·_v
;

5133 
cR1
=
À·_R
;

5134 
cG1
=
À·_G
;

5135 
cB1
=
À·_B
;

5137 if(
xmö
<
døwX
)

5138 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5140 
j
=
xmö
;j<=
xmax
;j++)

5142 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+((
posX
>>16))];

5143 if(
iDôhî
)

5144 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

5145 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5146 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5148 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5149 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5150 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5151 
posX
+=
difX
;

5152 
posY
+=
difY
;

5153 
cR1
+=
difR
;

5154 
cG1
+=
difG
;

5155 
cB1
+=
difB
;

5158 if(
	`NextRow_GT
())

5163 
	}
}

5167 
	$døwPﬁy3TGEx8_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
˛X
, 
˛Y
,
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
)

5169 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

5170 
öt32_t
 
cR1
,
cG1
,
cB1
;

5171 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

5172 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

5173 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

5174 
tC1
,
tC2
;

5176 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

5177 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

5178 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

5179 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

5180 if(
døwY
>=
døwH
) ;

5181 if(
døwX
>=
døwW
) ;

5183 if(!
	`SëupSe˘i⁄s_GT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
cﬁ1
,
cﬁ2
,
cﬁ3
)) ;

5185 
ymax
=
Ymax
;

5187 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

5188 if(
	`NextRow_GT
()) ;

5190 
˛utP
=(
˛Y
<<10)+
˛X
;

5192 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

5193 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
);

5195 
difR
=
dñè_right_R
;

5196 
difG
=
dñè_right_G
;

5197 
difB
=
dñè_right_B
;

5198 
difR2
=
difR
<<1;

5199 
difG2
=
difG
<<1;

5200 
difB2
=
difB
<<1;

5201 
difX
=
dñè_right_u
;
difX2
=difX<<1;

5202 
difY
=
dñè_right_v
;
difY2
=difY<<1;

5204 #ifde‡
FASTSOLID


5206 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

5208 
i
=
ymö
;i<=
ymax
;i++)

5210 
xmö
=(
À·_x
 >> 16);

5211 
xmax
=(
right_x
 >> 16)-1;

5212 if(
døwW
<
xmax
) xmax=drawW;

5214 if(
xmax
>=
xmö
)

5216 
posX
=
À·_u
;

5217 
posY
=
À·_v
;

5218 
cR1
=
À·_R
;

5219 
cG1
=
À·_G
;

5220 
cB1
=
À·_B
;

5222 if(
xmö
<
døwX
)

5223 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5225 
j
=
xmö
;j<
xmax
;j+=2)

5227 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

5228 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

5229 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

5230 
YAdju°
+(((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)];

5232 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

5233 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

5234 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16,

5235 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

5236 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

5237 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

5238 
posX
+=
difX2
;

5239 
posY
+=
difY2
;

5240 
cR1
+=
difR2
;

5241 
cG1
+=
difG2
;

5242 
cB1
+=
difB2
;

5244 if(
j
==
xmax
)

5246 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

5247 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

5248 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

5249 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5250 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5253 if(
	`NextRow_GT
())

5263 
i
=
ymö
;i<=
ymax
;i++)

5265 
xmö
=(
À·_x
 >> 16);

5266 
xmax
=(
right_x
 >> 16)-1;

5267 if(
døwW
<
xmax
) xmax=drawW;

5269 if(
xmax
>=
xmö
)

5271 
posX
=
À·_u
;

5272 
posY
=
À·_v
;

5273 
cR1
=
À·_R
;

5274 
cG1
=
À·_G
;

5275 
cB1
=
À·_B
;

5277 if(
xmö
<
døwX
)

5278 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5280 
j
=
xmö
;j<=
xmax
;j++)

5282 
tC1
 = 
psxVub
[(((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)<<11)+

5283 
YAdju°
+((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)];

5284 if(
iDôhî
)

5285 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

5286 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5287 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5289 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5290 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5291 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5292 
posX
+=
difX
;

5293 
posY
+=
difY
;

5294 
cR1
+=
difR
;

5295 
cG1
+=
difG
;

5296 
cB1
+=
difB
;

5299 if(
	`NextRow_GT
())

5304 
	}
}

5306 #ifde‡
POLYQUAD3GT


5308 
	$døwPﬁy4TGEx8_TRI
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
,

5309 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,

5310 
˛X
, 
˛Y
,

5311 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
, i¡32_à
cﬁ4
)

5313 
	`døwPﬁy3TGEx8
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

5314 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

5315 
˛X
,
˛Y
,

5316 
cﬁ2
,
cﬁ4
,
cﬁ3
);

5317 
	`døwPﬁy3TGEx8
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

5318 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

5319 
˛X
,
˛Y
,

5320 
cﬁ1
,
cﬁ2
,
cﬁ3
);

5321 
	}
}

5325 
	$døwPﬁy4TGEx8
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
,

5326 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,

5327 
˛X
, 
˛Y
,

5328 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ4
, i¡32_à
cﬁ3
)

5330 
öt32_t
 
num
;

5331 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

5332 
öt32_t
 
cR1
,
cG1
,
cB1
;

5333 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

5334 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

5335 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

5336 
tC1
,
tC2
;

5338 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

5339 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

5340 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

5341 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

5342 if(
døwY
>=
døwH
) ;

5343 if(
døwX
>=
døwW
) ;

5345 if(!
	`SëupSe˘i⁄s_GT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,
cﬁ1
,
cﬁ2
,
cﬁ3
,
cﬁ4
)) ;

5347 
ymax
=
Ymax
;

5349 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

5350 if(
	`NextRow_GT4
()) ;

5352 
˛utP
=(
˛Y
<<10)+
˛X
;

5354 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

5356 #ifde‡
FASTSOLID


5358 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

5360 
i
=
ymö
;i<=
ymax
;i++)

5362 
xmö
=(
À·_x
 >> 16);

5363 
xmax
=(
right_x
 >> 16);

5365 if(
xmax
>=
xmö
)

5367 
posX
=
À·_u
;

5368 
posY
=
À·_v
;

5370 
num
=(
xmax
-
xmö
);

5371 if(
num
==0)Çum=1;

5372 
difX
=(
right_u
-
posX
)/
num
;

5373 
difY
=(
right_v
-
posY
)/
num
;

5374 
difX2
=
difX
<<1;

5375 
difY2
=
difY
<<1;

5377 
cR1
=
À·_R
;

5378 
cG1
=
À·_G
;

5379 
cB1
=
À·_B
;

5380 
difR
=(
right_R
-
cR1
)/
num
;

5381 
difG
=(
right_G
-
cG1
)/
num
;

5382 
difB
=(
right_B
-
cB1
)/
num
;

5383 
difR2
=
difR
<<1;

5384 
difG2
=
difG
<<1;

5385 
difB2
=
difB
<<1;

5387 if(
xmö
<
døwX
)

5388 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5389 
xmax
--;if(
døwW
<xmax) xmax=drawW;

5391 
j
=
xmö
;j<
xmax
;j+=2)

5393 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

5394 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

5395 ((
posX
+
difX
)>>16)];

5397 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

5398 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

5399 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16,

5400 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

5401 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

5402 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

5403 
posX
+=
difX2
;

5404 
posY
+=
difY2
;

5405 
cR1
+=
difR2
;

5406 
cG1
+=
difG2
;

5407 
cB1
+=
difB2
;

5409 if(
j
==
xmax
)

5411 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

5412 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

5413 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5414 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5417 if(
	`NextRow_GT4
()) ;

5424 
i
=
ymö
;i<=
ymax
;i++)

5426 
xmö
=(
À·_x
 >> 16);

5427 
xmax
=(
right_x
 >> 16);

5429 if(
xmax
>=
xmö
)

5431 
posX
=
À·_u
;

5432 
posY
=
À·_v
;

5434 
num
=(
xmax
-
xmö
);

5435 if(
num
==0)Çum=1;

5436 
difX
=(
right_u
-
posX
)/
num
;

5437 
difY
=(
right_v
-
posY
)/
num
;

5438 
difX2
=
difX
<<1;

5439 
difY2
=
difY
<<1;

5441 
cR1
=
À·_R
;

5442 
cG1
=
À·_G
;

5443 
cB1
=
À·_B
;

5444 
difR
=(
right_R
-
cR1
)/
num
;

5445 
difG
=(
right_G
-
cG1
)/
num
;

5446 
difB
=(
right_B
-
cB1
)/
num
;

5447 
difR2
=
difR
<<1;

5448 
difG2
=
difG
<<1;

5449 
difB2
=
difB
<<1;

5451 if(
xmö
<
døwX
)

5452 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5453 
xmax
--;if(
døwW
<xmax) xmax=drawW;

5455 
j
=
xmö
;j<=
xmax
;j++)

5457 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

5458 if(
iDôhî
)

5459 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

5460 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5461 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5463 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5464 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5465 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5466 
posX
+=
difX
;

5467 
posY
+=
difY
;

5468 
cR1
+=
difR
;

5469 
cG1
+=
difG
;

5470 
cB1
+=
difB
;

5473 if(
	`NextRow_GT4
()) ;

5475 
	}
}

5479 
	$døwPﬁy4TGEx8_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
,

5480 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,

5481 
˛X
, 
˛Y
,

5482 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
, i¡32_à
cﬁ4
)

5484 
	`døwPﬁy3TGEx8_TW
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

5485 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

5486 
˛X
,
˛Y
,

5487 
cﬁ2
,
cﬁ4
,
cﬁ3
);

5488 
	`døwPﬁy3TGEx8_TW
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

5489 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

5490 
˛X
,
˛Y
,

5491 
cﬁ1
,
cﬁ2
,
cﬁ3
);

5492 
	}
}

5498 
	$døwPﬁy3TGD
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
,
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
)

5500 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

5501 
öt32_t
 
cR1
,
cG1
,
cB1
;

5502 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

5503 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

5504 
öt32_t
 
posX
,
posY
;

5506 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

5507 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

5508 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

5509 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

5510 if(
døwY
>=
døwH
) ;

5511 if(
døwX
>=
døwW
) ;

5513 if(!
	`SëupSe˘i⁄s_GT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
cﬁ1
,
cﬁ2
,
cﬁ3
)) ;

5515 
ymax
=
Ymax
;

5517 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

5518 if(
	`NextRow_GT
()) ;

5520 
difR
=
dñè_right_R
;

5521 
difG
=
dñè_right_G
;

5522 
difB
=
dñè_right_B
;

5523 
difR2
=
difR
<<1;

5524 
difG2
=
difG
<<1;

5525 
difB2
=
difB
<<1;

5526 
difX
=
dñè_right_u
;
difX2
=difX<<1;

5527 
difY
=
dñè_right_v
;
difY2
=difY<<1;

5529 #ifde‡
FASTSOLID


5531 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

5533 
i
=
ymö
;i<=
ymax
;i++)

5535 
xmö
=(
À·_x
 >> 16);

5536 
xmax
=(
right_x
 >> 16)-1;

5537 if(
døwW
<
xmax
) xmax=drawW;

5539 if(
xmax
>=
xmö
)

5541 
posX
=
À·_u
;

5542 
posY
=
À·_v
;

5543 
cR1
=
À·_R
;

5544 
cG1
=
À·_G
;

5545 
cB1
=
À·_B
;

5547 if(
xmö
<
døwX
)

5548 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5550 
j
=
xmö
;j<
xmax
;j+=2)

5552 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

5553 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[((((
posY
+
difY
)>>16)+
GlobÆTextAddrY
)<<10)+((
posX
+
difX
)>>16)+
GlobÆTextAddrX
]))<<16)|

5554 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+((
posX
)>>16)+
GlobÆTextAddrX
]),

5555 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

5556 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

5557 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

5558 
posX
+=
difX2
;

5559 
posY
+=
difY2
;

5560 
cR1
+=
difR2
;

5561 
cG1
+=
difG2
;

5562 
cB1
+=
difB2
;

5564 if(
j
==
xmax
)

5565 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

5566 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]),

5567 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5569 if(
	`NextRow_GT
())

5579 
i
=
ymö
;i<=
ymax
;i++)

5581 
xmö
=(
À·_x
 >> 16);

5582 
xmax
=(
right_x
 >> 16)-1;

5583 if(
døwW
<
xmax
) xmax=drawW;

5585 if(
xmax
>=
xmö
)

5587 
posX
=
À·_u
;

5588 
posY
=
À·_v
;

5589 
cR1
=
À·_R
;

5590 
cG1
=
À·_G
;

5591 
cB1
=
À·_B
;

5593 if(
xmö
<
døwX
)

5594 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5596 
j
=
xmö
;j<=
xmax
;j++)

5598 if(
iDôhî
)

5599 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

5600 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]),

5601 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5603 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5604 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]),

5605 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5606 
posX
+=
difX
;

5607 
posY
+=
difY
;

5608 
cR1
+=
difR
;

5609 
cG1
+=
difG
;

5610 
cB1
+=
difB
;

5613 if(
	`NextRow_GT
())

5618 
	}
}

5622 
	$døwPﬁy3TGD_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
,
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
)

5624 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

5625 
öt32_t
 
cR1
,
cG1
,
cB1
;

5626 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

5627 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

5628 
öt32_t
 
posX
,
posY
;

5630 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

5631 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

5632 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

5633 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

5634 if(
døwY
>=
døwH
) ;

5635 if(
døwX
>=
døwW
) ;

5637 if(!
	`SëupSe˘i⁄s_GT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
cﬁ1
,
cﬁ2
,
cﬁ3
)) ;

5639 
ymax
=
Ymax
;

5641 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

5642 if(
	`NextRow_GT
()) ;

5644 
difR
=
dñè_right_R
;

5645 
difG
=
dñè_right_G
;

5646 
difB
=
dñè_right_B
;

5647 
difR2
=
difR
<<1;

5648 
difG2
=
difG
<<1;

5649 
difB2
=
difB
<<1;

5650 
difX
=
dñè_right_u
;
difX2
=difX<<1;

5651 
difY
=
dñè_right_v
;
difY2
=difY<<1;

5653 #ifde‡
FASTSOLID


5655 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

5657 
i
=
ymö
;i<=
ymax
;i++)

5659 
xmö
=(
À·_x
 >> 16);

5660 
xmax
=(
right_x
 >> 16)-1;

5661 if(
døwW
<
xmax
) xmax=drawW;

5663 if(
xmax
>=
xmö
)

5665 
posX
=
À·_u
;

5666 
posY
=
À·_v
;

5667 
cR1
=
À·_R
;

5668 
cG1
=
À·_G
;

5669 
cB1
=
À·_B
;

5671 if(
xmö
<
døwX
)

5672 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5674 
j
=
xmö
;j<
xmax
;j+=2)

5676 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

5677 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

5678 (((
posX
+
difX
)>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]))<<16)|

5679 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

5680 (((
posX
)>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]),

5681 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

5682 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

5683 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

5684 
posX
+=
difX2
;

5685 
posY
+=
difY2
;

5686 
cR1
+=
difR2
;

5687 
cG1
+=
difG2
;

5688 
cB1
+=
difB2
;

5690 if(
j
==
xmax
)

5691 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

5692 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

5693 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]),

5694 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5696 if(
	`NextRow_GT
())

5706 
i
=
ymö
;i<=
ymax
;i++)

5708 
xmö
=(
À·_x
 >> 16);

5709 
xmax
=(
right_x
 >> 16)-1;

5710 if(
døwW
<
xmax
) xmax=drawW;

5712 if(
xmax
>=
xmö
)

5714 
posX
=
À·_u
;

5715 
posY
=
À·_v
;

5716 
cR1
=
À·_R
;

5717 
cG1
=
À·_G
;

5718 
cB1
=
À·_B
;

5720 if(
xmö
<
døwX
)

5721 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5723 
j
=
xmö
;j<=
xmax
;j++)

5725 if(
iDôhî
)

5726 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

5727 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

5728 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]),

5729 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5731 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5732 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)%
TWö
.
Posôi⁄
.
y1
)+
GlobÆTextAddrY
+TWö.Posôi⁄.
y0
)<<10)+

5733 ((
posX
>>16)%
TWö
.
Posôi⁄
.
x1
)+
GlobÆTextAddrX
+TWö.Posôi⁄.
x0
]),

5734 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5735 
posX
+=
difX
;

5736 
posY
+=
difY
;

5737 
cR1
+=
difR
;

5738 
cG1
+=
difG
;

5739 
cB1
+=
difB
;

5742 if(
	`NextRow_GT
())

5747 
	}
}

5753 #ifde‡
POLYQUAD3GT


5755 
	$døwPﬁy4TGD_TRI
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
, 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
, i¡32_à
cﬁ4
)

5757 
	`døwPﬁy3TGD
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

5758 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

5759 
cﬁ2
,
cﬁ4
,
cﬁ3
);

5760 
	`døwPﬁy3TGD
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

5761 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

5762 
cﬁ1
,
cﬁ2
,
cﬁ3
);

5763 
	}
}

5767 
	$døwPﬁy4TGD
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
, 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ4
, i¡32_à
cﬁ3
)

5769 
öt32_t
 
num
;

5770 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

5771 
öt32_t
 
cR1
,
cG1
,
cB1
;

5772 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

5773 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

5774 
öt32_t
 
posX
,
posY
;

5776 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

5777 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

5778 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

5779 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

5780 if(
døwY
>=
døwH
) ;

5781 if(
døwX
>=
døwW
) ;

5783 if(!
	`SëupSe˘i⁄s_GT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,
cﬁ1
,
cﬁ2
,
cﬁ3
,
cﬁ4
)) ;

5785 
ymax
=
Ymax
;

5787 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

5788 if(
	`NextRow_GT4
()) ;

5790 #ifde‡
FASTSOLID


5792 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

5794 
i
=
ymö
;i<=
ymax
;i++)

5796 
xmö
=(
À·_x
 >> 16);

5797 
xmax
=(
right_x
 >> 16);

5799 if(
xmax
>=
xmö
)

5801 
posX
=
À·_u
;

5802 
posY
=
À·_v
;

5804 
num
=(
xmax
-
xmö
);

5805 if(
num
==0)Çum=1;

5806 
difX
=(
right_u
-
posX
)/
num
;

5807 
difY
=(
right_v
-
posY
)/
num
;

5808 
difX2
=
difX
<<1;

5809 
difY2
=
difY
<<1;

5811 
cR1
=
À·_R
;

5812 
cG1
=
À·_G
;

5813 
cB1
=
À·_B
;

5814 
difR
=(
right_R
-
cR1
)/
num
;

5815 
difG
=(
right_G
-
cG1
)/
num
;

5816 
difB
=(
right_B
-
cB1
)/
num
;

5817 
difR2
=
difR
<<1;

5818 
difG2
=
difG
<<1;

5819 
difB2
=
difB
<<1;

5821 if(
xmö
<
døwX
)

5822 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5823 
xmax
--;if(
døwW
<xmax) xmax=drawW;

5825 
j
=
xmö
;j<
xmax
;j+=2)

5827 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

5828 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[((((
posY
+
difY
)>>16)+
GlobÆTextAddrY
)<<10)+((
posX
+
difX
)>>16)+
GlobÆTextAddrX
]))<<16)|

5829 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+((
posX
)>>16)+
GlobÆTextAddrX
]),

5830 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

5831 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

5832 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

5833 
posX
+=
difX2
;

5834 
posY
+=
difY2
;

5835 
cR1
+=
difR2
;

5836 
cG1
+=
difG2
;

5837 
cB1
+=
difB2
;

5839 if(
j
==
xmax
)

5840 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

5841 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]),

5842 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5844 if(
	`NextRow_GT4
()) ;

5851 
i
=
ymö
;i<=
ymax
;i++)

5853 
xmö
=(
À·_x
 >> 16);

5854 
xmax
=(
right_x
 >> 16);

5856 if(
xmax
>=
xmö
)

5858 
posX
=
À·_u
;

5859 
posY
=
À·_v
;

5861 
num
=(
xmax
-
xmö
);

5862 if(
num
==0)Çum=1;

5863 
difX
=(
right_u
-
posX
)/
num
;

5864 
difY
=(
right_v
-
posY
)/
num
;

5865 
difX2
=
difX
<<1;

5866 
difY2
=
difY
<<1;

5868 
cR1
=
À·_R
;

5869 
cG1
=
À·_G
;

5870 
cB1
=
À·_B
;

5871 
difR
=(
right_R
-
cR1
)/
num
;

5872 
difG
=(
right_G
-
cG1
)/
num
;

5873 
difB
=(
right_B
-
cB1
)/
num
;

5874 
difR2
=
difR
<<1;

5875 
difG2
=
difG
<<1;

5876 
difB2
=
difB
<<1;

5878 if(
xmö
<
døwX
)

5879 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5880 
xmax
--;if(
døwW
<xmax) xmax=drawW;

5882 
j
=
xmö
;j<=
xmax
;j++)

5884 if(
iDôhî
)

5885 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5886 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]),

5887 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5889 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5890 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]),

5891 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5892 
posX
+=
difX
;

5893 
posY
+=
difY
;

5894 
cR1
+=
difR
;

5895 
cG1
+=
difG
;

5896 
cB1
+=
difB
;

5899 if(
	`NextRow_GT4
()) ;

5901 
	}
}

5905 
	$døwPﬁy4TGD_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
, 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
, i¡32_à
cﬁ4
)

5907 
	`døwPﬁy3TGD_TW
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

5908 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

5909 
cﬁ2
,
cﬁ4
,
cﬁ3
);

5910 
	`døwPﬁy3TGD_TW
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

5911 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

5912 
cﬁ1
,
cﬁ2
,
cﬁ3
);

5913 
	}
}

5935 
INLINE
 
BOOL
 
	$IsNoRe˘
()

5937 if(!(
dwA˘Fixes
&0x200)Ë 
FALSE
;

5939 if(
ly0
==
ly1
)

5941 if(
lx1
==
lx3
 && 
ly3
==
ly2
 && 
lx2
==
lx0
Ë 
FALSE
;

5942 if(
lx1
==
lx2
 && 
ly2
==
ly3
 && 
lx3
==
lx0
Ë 
FALSE
;

5943  
TRUE
;

5946 if(
ly0
==
ly2
)

5948 if(
lx2
==
lx3
 && 
ly3
==
ly1
 && 
lx1
==
lx0
Ë 
FALSE
;

5949 if(
lx2
==
lx1
 && 
ly1
==
ly3
 && 
lx3
==
lx0
Ë 
FALSE
;

5950  
TRUE
;

5953 if(
ly0
==
ly3
)

5955 if(
lx3
==
lx2
 && 
ly2
==
ly1
 && 
lx1
==
lx0
Ë 
FALSE
;

5956 if(
lx3
==
lx1
 && 
ly1
==
ly2
 && 
lx2
==
lx0
Ë 
FALSE
;

5957  
TRUE
;

5959  
TRUE
;

5960 
	}
}

5964 
	$døwPﬁy3FT
(* 
ba£Addr
)

5966 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

5968 if(!
bUsögTWö
 && !(
dwA˘Fixes
&0x100))

5970 
GlobÆTextTP
)

5973 
	`døwPﬁy3TEx4
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

5974 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff),

5975 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

5978 
	`døwPﬁy3TEx8
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

5979 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff),

5980 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

5983 
	`døwPﬁy3TD
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff));

5989 
GlobÆTextTP
)

5992 
	`døwPﬁy3TEx4_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

5993 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff),

5994 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

5997 
	`døwPﬁy3TEx8_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

5998 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff),

5999 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6002 
	`døwPﬁy3TD_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff));

6005 
	}
}

6009 
	$døwPﬁy4FT
(* 
ba£Addr
)

6011 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

6013 if(!
bUsögTWö
)

6015 #ifde‡
POLYQUAD3GT


6016 if(
	`IsNoRe˘
())

6018 
GlobÆTextTP
)

6021 
	`døwPﬁy4TEx4_TRI
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6022 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff), ((GETLE32(&gpuData[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6025 
	`døwPﬁy4TEx8_TRI
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6026 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff), ((GETLE32(&gpuData[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6029 
	`døwPﬁy4TD_TRI
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff));

6036 
GlobÆTextTP
)

6039 
	`døwPﬁy4TEx4
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6040 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff), ((GETLE32(&gpuData[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6043 
	`døwPﬁy4TEx8
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6044 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff), ((GETLE32(&gpuData[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6047 
	`døwPﬁy4TD
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff));

6053 
GlobÆTextTP
)

6056 
	`døwPﬁy4TEx4_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6057 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff), ((GETLE32(&gpuData[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6060 
	`døwPﬁy4TEx8_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6061 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff), ((GETLE32(&gpuData[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6064 
	`døwPﬁy4TD_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff));

6067 
	}
}

6071 
	$døwPﬁy3GT
(* 
ba£Addr
)

6073 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

6075 if(!
bUsögTWö
)

6077 
GlobÆTextTP
)

6080 
	`døwPﬁy3TGEx4
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

6081 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6082 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511),

6083 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]));

6086 
	`døwPﬁy3TGEx8
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

6087 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6088 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511),

6089 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]));

6092 
	`døwPﬁy3TGD
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),GETLE32(&gpuData[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]));

6098 
GlobÆTextTP
)

6101 
	`døwPﬁy3TGEx4_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

6102 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6103 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511),

6104 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]));

6107 
	`døwPﬁy3TGEx8_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

6108 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6109 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511),

6110 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]));

6113 
	`døwPﬁy3TGD_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),GETLE32(&gpuData[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]));

6116 
	}
}

6120 
	$døwPﬁy4GT
(*
ba£Addr
)

6122 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

6124 if(!
bUsögTWö
)

6126 #ifde‡
POLYQUAD3GT


6127 if(
	`IsNoRe˘
())

6129 
GlobÆTextTP
)

6132 
	`døwPﬁy4TGEx4_TRI
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6133 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6134 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0),((GETLE32(&gpuData[2])>>22) & 511),

6135 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6139 
	`døwPﬁy4TGEx8_TRI
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6140 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6141 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0),((GETLE32(&gpuData[2])>>22) & 511),

6142 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6145 
	`døwPﬁy4TGD_TRI
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff),((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),GETLE32(&gpuData[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6152 
GlobÆTextTP
)

6155 
	`døwPﬁy4TGEx4
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6156 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6157 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0),((GETLE32(&gpuData[2])>>22) & 511),

6158 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6162 
	`døwPﬁy4TGEx8
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6163 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6164 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0),((GETLE32(&gpuData[2])>>22) & 511),

6165 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6168 
	`døwPﬁy4TGD
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff),((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),GETLE32(&gpuData[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6174 
GlobÆTextTP
)

6177 
	`døwPﬁy4TGEx4_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6178 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6179 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0),((GETLE32(&gpuData[2])>>22) & 511),

6180 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6183 
	`døwPﬁy4TGEx8_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6184 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6185 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0),((GETLE32(&gpuData[2])>>22) & 511),

6186 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6189 
	`døwPﬁy4TGD_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff),((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),GETLE32(&gpuData[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6192 
	}
}

6198 
	$DøwSo·w¨eS¥ôeTWö
(* 
ba£Addr
,
öt32_t
 
w
,öt32_à
h
)

6200 
uöt32_t
 *
gpuD©a
 = (uöt32_à*)
ba£Addr
;

6201 
sx0
,
sy0
,
sx1
,
sy1
,
sx2
,
sy2
,
sx3
,
sy3
;

6202 
tx0
,
ty0
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
;

6204 
sx0
=
lx0
;

6205 
sy0
=
ly0
;

6207 
sx0
=
sx3
=sx0+
PSXDi•œy
.
DøwOff£t
.
x
;

6208 
sx1
=
sx2
=
sx0
+
w
;

6209 
sy0
=
sy1
=sy0+
PSXDi•œy
.
DøwOff£t
.
y
;

6210 
sy2
=
sy3
=
sy0
+
h
;

6212 
tx0
=
tx3
=
	`GETLE32
(&
gpuD©a
[2])&0xff;

6213 
tx1
=
tx2
=
tx0
+
w
;

6214 
ty0
=
ty1
=(
	`GETLE32
(&
gpuD©a
[2])>>8)&0xff;

6215 
ty2
=
ty3
=
ty0
+
h
;

6217 
GlobÆTextTP
)

6220 
	`døwPﬁy4TEx4_TW_S
(
sx0
,
sy0
,
sx1
,
sy1
,
sx2
,
sy2
,
sx3
,
sy3
,

6221 
tx0
,
ty0
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,

6222 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6225 
	`døwPﬁy4TEx8_TW_S
(
sx0
,
sy0
,
sx1
,
sy1
,
sx2
,
sy2
,
sx3
,
sy3
,

6226 
tx0
,
ty0
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,

6227 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6230 
	`døwPﬁy4TD_TW_S
(
sx0
,
sy0
,
sx1
,
sy1
,
sx2
,
sy2
,
sx3
,
sy3
,

6231 
tx0
,
ty0
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
);

6234 
	}
}

6238 
	$DøwSo·w¨eS¥ôeMúr‹
(* 
ba£Addr
,
öt32_t
 
w
,öt32_à
h
)

6240 
öt32_t
 
•πY
,
•πX
,
•πW
,
•πH
,
lXDú
,
lYDú
;

6241 
öt32_t
 
˛utY0
,
˛utX0
,
˛utP
,
ãxtX0
,
ãxtY0
,
•πYa
,
•rCY
,
•rCX
,
•rA
;

6242 
tC
;

6243 
uöt32_t
 *
gpuD©a
 = (uöt32_à*)
ba£Addr
;

6244 
•πY
 = 
ly0
;

6245 
•πX
 = 
lx0
;

6246 
•πH
 = 
h
;

6247 
•πW
 = 
w
;

6248 
˛utY0
 = (
	`GETLE32
(&
gpuD©a
[2])>>22) & 511;

6249 
˛utX0
 = (
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0;

6250 
˛utP
 = (
˛utY0
<<11Ë+ (
˛utX0
<<1);

6251 
ãxtY0
 = ((
	`GETLE32
(&
gpuD©a
[2])>>8Ë& 0x000000ffË+ 
GlobÆTextAddrY
;

6252 
ãxtX0
 = (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff);

6254 
•πX
+=
PSXDi•œy
.
DøwOff£t
.
x
;

6255 
•πY
+=
PSXDi•œy
.
DøwOff£t
.
y
;

6257 if(
•πX
>
døwW
)

6262 if(
•πY
>
døwH
)

6267 if(
•πY
<
døwY
)

6269 if((
•πY
+
•πH
)<
døwY
) ;

6270 
•πH
-=(
døwY
-
•πY
);

6271 
ãxtY0
+=(
døwY
-
•πY
);

6272 
•πY
=
døwY
;

6275 if(
•πX
<
døwX
)

6277 if((
•πX
+
•πW
)<
døwX
) ;

6278 
•πW
-=(
døwX
-
•πX
);

6279 
ãxtX0
+=(
døwX
-
•πX
);

6280 
•πX
=
døwX
;

6283 if((
•πY
+
•πH
)>
døwH
) sprtH=drawH-sprtY+1;

6284 if((
•πX
+
•πW
)>
døwW
) sprtW=drawW-sprtX+1;

6286 if(
usMúr‹
&0x1000Ë
lXDú
=-1; lXDir=1;

6287 if(
usMúr‹
&0x2000Ë
lYDú
=-1; lYDir=1;

6289 
GlobÆTextTP
)

6293 
•πW
=sprtW/2;

6294 
ãxtX0
=(
GlobÆTextAddrX
<<1)+(textX0>>1);

6295 
•πYa
=(
•πY
<<10);

6296 
˛utP
=(
˛utY0
<<10)+
˛utX0
;

6297 
•rCY
=0;•rCY<
•πH
;sprCY++)

6298 
•rCX
=0;•rCX<
•πW
;sprCX++)

6300 
tC

psxVub
[((
ãxtY0
+(
•rCY
*
lYDú
))<<11Ë+ 
ãxtX0
 +(
•rCX
*
lXDú
)];

6301 
•rA
=
•πYa
+(
•rCY
<<10)+
•πX
 + (
•rCX
<<1);

6302 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[
•rA
],
	`GETLE16
(&psxVuw[
˛utP
+((
tC
>>4)&0xf)]));

6303 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[
•rA
+1],
	`GETLE16
(&psxVuw[
˛utP
+(
tC
&0xf)]));

6309 
˛utP
>>=1;

6310 
•rCY
=0;•rCY<
•πH
;sprCY++)

6311 
•rCX
=0;•rCX<
•πW
;sprCX++)

6313 
tC
 = 
psxVub
[((
ãxtY0
+(
•rCY
*
lYDú
))<<11)+(
GlobÆTextAddrX
<<1Ë+ 
ãxtX0
 + (
•rCX
*
lXDú
)] & 0xff;

6314 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[((
•πY
+
•rCY
)<<10)+
•πX
 + 
•rCX
],psxVuw[
˛utP
+
tC
]);

6320 
•rCY
=0;•rCY<
•πH
;sprCY++)

6321 
•rCX
=0;•rCX<
•πW
;sprCX++)

6323 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[((
•πY
+
•rCY
)<<10)+
•πX
+
•rCX
],

6324 
	`GETLE16
(&
psxVuw
[((
ãxtY0
+(
•rCY
*
lYDú
))<<10)+
GlobÆTextAddrX
 + 
ãxtX0
 +(
•rCX
*
lXDú
)]));

6328 
	}
}

6332 
	$DøwSo·w¨eS¥ôe
(* 
ba£Addr
,
w
,
h
,
öt32_t
 
tx
,öt32_à
ty
)

6334 
öt32_t
 
•πY
,
•πX
,
•πW
,
•πH
;

6335 
öt32_t
 
˛utY0
,
˛utX0
,
˛utP
,
ãxtX0
,
ãxtY0
,
•πYa
,
•rCY
,
•rCX
,
•rA
;

6336 
tC
,
tC2
;

6337 
uöt32_t
 *
gpuD©a
 = (uöt32_à*)
ba£Addr
;

6338 * 
pV
;

6339 
BOOL
 
bWT
,
bWS
;

6341 
•πY
 = 
ly0
;

6342 
•πX
 = 
lx0
;

6343 
•πH
 = 
h
;

6344 
•πW
 = 
w
;

6345 
˛utY0
 = (
	`GETLE32
(&
gpuD©a
[2])>>22) & 511;

6346 
˛utX0
 = (
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0;

6348 
˛utP
 = (
˛utY0
<<11Ë+ (
˛utX0
<<1);

6350 
ãxtY0
 =
ty
+ 
GlobÆTextAddrY
;

6351 
ãxtX0
 =
tx
;

6353 
•πX
+=
PSXDi•œy
.
DøwOff£t
.
x
;

6354 
•πY
+=
PSXDi•œy
.
DøwOff£t
.
y
;

6356 if(
•πX
>
døwW
)

6361 if(
•πY
>
døwH
)

6366 if(
•πY
<
døwY
)

6368 if((
•πY
+
•πH
)<
døwY
) ;

6369 
•πH
-=(
døwY
-
•πY
);

6370 
ãxtY0
+=(
døwY
-
•πY
);

6371 
•πY
=
døwY
;

6374 if(
•πX
<
døwX
)

6376 if((
•πX
+
•πW
)<
døwX
) ;

6378 
•πW
-=(
døwX
-
•πX
);

6379 
ãxtX0
+=(
døwX
-
•πX
);

6380 
•πX
=
døwX
;

6383 if((
•πY
+
•πH
)>
døwH
) sprtH=drawH-sprtY+1;

6384 if((
•πX
+
•πW
)>
døwW
) sprtW=drawW-sprtX+1;

6387 
bWT
=
FALSE
;

6388 
bWS
=
FALSE
;

6390 
GlobÆTextTP
)

6394 if(
ãxtX0
&1Ë{
bWS
=
TRUE
;
•πW
--;}

6395 if(
•πW
&1Ë
bWT
=
TRUE
;

6397 
•πW
=sprtW>>1;

6398 
ãxtX0
=(
GlobÆTextAddrX
<<1)+—extX0>>1)+(
ãxtY0
<<11);

6399 
•πYa
=(
•πY
<<10)+
•πX
;

6400 
˛utP
=(
˛utY0
<<10)+
˛utX0
;

6402 #ifde‡
FASTSOLID


6404 if(!
bCheckMask
 && !
DøwSemiTøns
)

6406 
•rCY
=0;•rCY<
•πH
;sprCY++)

6408 
•rA
=
•πYa
+(
•rCY
<<10);

6409 
pV
=&
psxVub
[(
•rCY
<<11)+
ãxtX0
];

6411 if(
bWS
)

6413 
tC
=*
pV
++;

6414 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[
•rA
++],
	`GETLE16
(&psxVuw[
˛utP
+((
tC
>>4)&0xf)]));

6417 
•rCX
=0;•rCX<
•πW
;•rCX++,
•rA
+=2)

6419 
tC
=*
pV
++;

6421 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[
•rA
],

6422 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+((
tC
>>4)&0xf)]))<<16)|

6423 
	`GETLE16
(&
psxVuw
[
˛utP
+(
tC
&0x0f)]));

6426 if(
bWT
)

6428 
tC
=*
pV
;

6429 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[
•rA
],
	`GETLE16
(&psxVuw[
˛utP
+(
tC
&0x0f)]));

6437 
•rCY
=0;•rCY<
•πH
;sprCY++)

6439 
•rA
=
•πYa
+(
•rCY
<<10);

6440 
pV
=&
psxVub
[(
•rCY
<<11)+
ãxtX0
];

6442 if(
bWS
)

6444 
tC
=*
pV
++;

6445 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[
•rA
++],
	`GETLE16
(&psxVuw[
˛utP
+((
tC
>>4)&0xf)]));

6448 
•rCX
=0;•rCX<
•πW
;•rCX++,
•rA
+=2)

6450 
tC
=*
pV
++;

6452 
	`GëTextuªTønsCﬁG32_SPR
((
uöt32_t
 *)&
psxVuw
[
•rA
],

6453 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+((
tC
>>4)&0xf)])<<16))|

6454 
	`GETLE16
(&
psxVuw
[
˛utP
+(
tC
&0x0f)]));

6457 if(
bWT
)

6459 
tC
=*
pV
;

6460 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[
•rA
],
	`GETLE16
(&psxVuw[
˛utP
+(
tC
&0x0f)]));

6466 
˛utP
>>=1;
•πW
--;

6467 
ãxtX0
+=(
GlobÆTextAddrX
<<1Ë+ (
ãxtY0
<<11);

6469 #ifde‡
FASTSOLID


6471 if(!
bCheckMask
 && !
DøwSemiTøns
)

6473 
•rCY
=0;•rCY<
•πH
;sprCY++)

6475 
•rA
=((
•πY
+
•rCY
)<<10)+
•πX
;

6476 
pV
=&
psxVub
[(
•rCY
<<11)+
ãxtX0
];

6477 
•rCX
=0;•rCX<
•πW
;•rCX+=2,
•rA
+=2)

6479 
tC
 = *
pV
++;
tC2
 = *pV++;

6480 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[
•rA
],

6481 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16)|

6482 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC
]));

6484 if(
•rCX
==
•πW
)

6485 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[
•rA
],
	`GETLE16
(&psxVuw[
˛utP
+(*
pV
)]));

6492 
•rCY
=0;•rCY<
•πH
;sprCY++)

6494 
•rA
=((
•πY
+
•rCY
)<<10)+
•πX
;

6495 
pV
=&
psxVub
[(
•rCY
<<11)+
ãxtX0
];

6496 
•rCX
=0;•rCX<
•πW
;•rCX+=2,
•rA
+=2)

6498 
tC
 = *
pV
++;
tC2
 = *pV++;

6499 
	`GëTextuªTønsCﬁG32_SPR
((
uöt32_t
 *)&
psxVuw
[
•rA
],

6500 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16)|

6501 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC
]));

6503 if(
•rCX
==
•πW
)

6504 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[
•rA
],
	`GETLE16
(&psxVuw[
˛utP
+(*
pV
)]));

6510 
ãxtX0
+=(
GlobÆTextAddrX
Ë+ (
ãxtY0
<<10);

6511 
•πW
--;

6513 #ifde‡
FASTSOLID


6515 if(!
bCheckMask
 && !
DøwSemiTøns
)

6517 
•rCY
=0;•rCY<
•πH
;sprCY++)

6519 
•rA
=((
•πY
+
•rCY
)<<10)+
•πX
;

6521 
•rCX
=0;•rCX<
•πW
;•rCX+=2,
•rA
+=2)

6523 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[
•rA
],

6524 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(
•rCY
<<10Ë+ 
ãxtX0
 + 
•rCX
 +1]))<<16)|

6525 
	`GETLE16
(&
psxVuw
[(
•rCY
<<10Ë+ 
ãxtX0
 + 
•rCX
]));

6527 if(
•rCX
==
•πW
)

6528 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[
•rA
],

6529 
	`GETLE16
(&
psxVuw
[(
•rCY
<<10Ë+ 
ãxtX0
 + 
•rCX
]));

6537 
•rCY
=0;•rCY<
•πH
;sprCY++)

6539 
•rA
=((
•πY
+
•rCY
)<<10)+
•πX
;

6541 
•rCX
=0;•rCX<
•πW
;•rCX+=2,
•rA
+=2)

6543 
	`GëTextuªTønsCﬁG32_SPR
((
uöt32_t
 *)&
psxVuw
[
•rA
],

6544 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(
•rCY
<<10Ë+ 
ãxtX0
 + 
•rCX
 +1]))<<16)|

6545 
	`GETLE16
(&
psxVuw
[(
•rCY
<<10Ë+ 
ãxtX0
 + 
•rCX
]));

6547 if(
•rCX
==
•πW
)

6548 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[
•rA
],

6549 
	`GETLE16
(&
psxVuw
[(
•rCY
<<10Ë+ 
ãxtX0
 + 
•rCX
]));

6554 
	}
}

6569 
	$Löe_E_SE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
uöt32_t
 
rgb0
, uöt32_à
rgb1
)

6571 
dx
, 
dy
, 
ö¸E
, 
ö¸SE
, 
d
;

6572 
uöt32_t
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

6573 
öt32_t
 
dr
, 
dg
, 
db
;

6575 
r0
 = (
rgb0
 & 0x00ff0000);

6576 
g0
 = (
rgb0
 & 0x0000ff00) << 8;

6577 
b0
 = (
rgb0
 & 0x000000ff) << 16;

6578 
r1
 = (
rgb1
 & 0x00ff0000);

6579 
g1
 = (
rgb1
 & 0x0000ff00) << 8;

6580 
b1
 = (
rgb1
 & 0x000000ff) << 16;

6582 
dx
 = 
x1
 - 
x0
;

6583 
dy
 = 
y1
 - 
y0
;

6585 i‡(
dx
 > 0)

6587 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
Ë/ 
dx
;

6588 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
Ë/ 
dx
;

6589 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
Ë/ 
dx
;

6593 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
);

6594 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
);

6595 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
);

6598 
d
 = 2*
dy
 - 
dx
;

6599 
ö¸E
 = 2*
dy
;

6600 
ö¸SE
 = 2*(
dy
 - 
dx
);

6602 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6603 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6604 
x0
 < 
x1
)

6606 i‡(
d
 <= 0)

6608 
d
 = d + 
ö¸E
;

6612 
d
 = d + 
ö¸SE
;

6613 
y0
++;

6615 
x0
++;

6617 
r0
+=
dr
;

6618 
g0
+=
dg
;

6619 
b0
+=
db
;

6621 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6622 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6624 
	}
}

6628 
	$Löe_S_SE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
uöt32_t
 
rgb0
, uöt32_à
rgb1
)

6630 
dx
, 
dy
, 
ö¸S
, 
ö¸SE
, 
d
;

6631 
uöt32_t
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

6632 
öt32_t
 
dr
, 
dg
, 
db
;

6634 
r0
 = (
rgb0
 & 0x00ff0000);

6635 
g0
 = (
rgb0
 & 0x0000ff00) << 8;

6636 
b0
 = (
rgb0
 & 0x000000ff) << 16;

6637 
r1
 = (
rgb1
 & 0x00ff0000);

6638 
g1
 = (
rgb1
 & 0x0000ff00) << 8;

6639 
b1
 = (
rgb1
 & 0x000000ff) << 16;

6641 
dx
 = 
x1
 - 
x0
;

6642 
dy
 = 
y1
 - 
y0
;

6644 i‡(
dy
 > 0)

6646 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
Ë/ 
dy
;

6647 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
Ë/ 
dy
;

6648 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
Ë/ 
dy
;

6652 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
);

6653 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
);

6654 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
);

6657 
d
 = 2*
dx
 - 
dy
;

6658 
ö¸S
 = 2*
dx
;

6659 
ö¸SE
 = 2*(
dx
 - 
dy
);

6661 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6662 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6663 
y0
 < 
y1
)

6665 i‡(
d
 <= 0)

6667 
d
 = d + 
ö¸S
;

6671 
d
 = d + 
ö¸SE
;

6672 
x0
++;

6674 
y0
++;

6676 
r0
+=
dr
;

6677 
g0
+=
dg
;

6678 
b0
+=
db
;

6680 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6681 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6683 
	}
}

6687 
	$Löe_N_NE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
uöt32_t
 
rgb0
, uöt32_à
rgb1
)

6689 
dx
, 
dy
, 
ö¸N
, 
ö¸NE
, 
d
;

6690 
uöt32_t
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

6691 
öt32_t
 
dr
, 
dg
, 
db
;

6693 
r0
 = (
rgb0
 & 0x00ff0000);

6694 
g0
 = (
rgb0
 & 0x0000ff00) << 8;

6695 
b0
 = (
rgb0
 & 0x000000ff) << 16;

6696 
r1
 = (
rgb1
 & 0x00ff0000);

6697 
g1
 = (
rgb1
 & 0x0000ff00) << 8;

6698 
b1
 = (
rgb1
 & 0x000000ff) << 16;

6700 
dx
 = 
x1
 - 
x0
;

6701 
dy
 = -(
y1
 - 
y0
);

6703 i‡(
dy
 > 0)

6705 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
Ë/ 
dy
;

6706 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
Ë/ 
dy
;

6707 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
Ë/ 
dy
;

6711 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
);

6712 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
);

6713 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
);

6716 
d
 = 2*
dx
 - 
dy
;

6717 
ö¸N
 = 2*
dx
;

6718 
ö¸NE
 = 2*(
dx
 - 
dy
);

6720 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6721 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6722 
y0
 > 
y1
)

6724 i‡(
d
 <= 0)

6726 
d
 = d + 
ö¸N
;

6730 
d
 = d + 
ö¸NE
;

6731 
x0
++;

6733 
y0
--;

6735 
r0
+=
dr
;

6736 
g0
+=
dg
;

6737 
b0
+=
db
;

6739 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6740 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6742 
	}
}

6746 
	$Löe_E_NE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
uöt32_t
 
rgb0
, uöt32_à
rgb1
)

6748 
dx
, 
dy
, 
ö¸E
, 
ö¸NE
, 
d
;

6749 
uöt32_t
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

6750 
öt32_t
 
dr
, 
dg
, 
db
;

6752 
r0
 = (
rgb0
 & 0x00ff0000);

6753 
g0
 = (
rgb0
 & 0x0000ff00) << 8;

6754 
b0
 = (
rgb0
 & 0x000000ff) << 16;

6755 
r1
 = (
rgb1
 & 0x00ff0000);

6756 
g1
 = (
rgb1
 & 0x0000ff00) << 8;

6757 
b1
 = (
rgb1
 & 0x000000ff) << 16;

6759 
dx
 = 
x1
 - 
x0
;

6760 
dy
 = -(
y1
 - 
y0
);

6762 i‡(
dx
 > 0)

6764 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
Ë/ 
dx
;

6765 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
Ë/ 
dx
;

6766 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
Ë/ 
dx
;

6770 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
);

6771 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
);

6772 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
);

6775 
d
 = 2*
dy
 - 
dx
;

6776 
ö¸E
 = 2*
dy
;

6777 
ö¸NE
 = 2*(
dy
 - 
dx
);

6779 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6780 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6781 
x0
 < 
x1
)

6783 i‡(
d
 <= 0)

6785 
d
 = d + 
ö¸E
;

6789 
d
 = d + 
ö¸NE
;

6790 
y0
--;

6792 
x0
++;

6794 
r0
+=
dr
;

6795 
g0
+=
dg
;

6796 
b0
+=
db
;

6798 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6799 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6801 
	}
}

6805 
	$VîtLöeShade
(
x
, 
y0
, 
y1
, 
uöt32_t
 
rgb0
, uöt32_à
rgb1
)

6807 
y
, 
dy
;

6808 
uöt32_t
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

6809 
öt32_t
 
dr
, 
dg
, 
db
;

6811 
r0
 = (
rgb0
 & 0x00ff0000);

6812 
g0
 = (
rgb0
 & 0x0000ff00) << 8;

6813 
b0
 = (
rgb0
 & 0x000000ff) << 16;

6814 
r1
 = (
rgb1
 & 0x00ff0000);

6815 
g1
 = (
rgb1
 & 0x0000ff00) << 8;

6816 
b1
 = (
rgb1
 & 0x000000ff) << 16;

6818 
dy
 = (
y1
 - 
y0
);

6820 i‡(
dy
 > 0)

6822 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
Ë/ 
dy
;

6823 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
Ë/ 
dy
;

6824 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
Ë/ 
dy
;

6828 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
);

6829 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
);

6830 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
);

6833 i‡(
y0
 < 
døwY
)

6835 
r0
+=
dr
*(
døwY
 - 
y0
);

6836 
g0
+=
dg
*(
døwY
 - 
y0
);

6837 
b0
+=
db
*(
døwY
 - 
y0
);

6838 
y0
 = 
døwY
;

6841 i‡(
y1
 > 
døwH
)

6842 
y1
 = 
døwH
;

6844 
y
 = 
y0
; y <
y1
; y++)

6846 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6847 
r0
+=
dr
;

6848 
g0
+=
dg
;

6849 
b0
+=
db
;

6851 
	}
}

6855 
	$H‹zLöeShade
(
y
, 
x0
, 
x1
, 
uöt32_t
 
rgb0
, uöt32_à
rgb1
)

6857 
x
, 
dx
;

6858 
uöt32_t
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

6859 
öt32_t
 
dr
, 
dg
, 
db
;

6861 
r0
 = (
rgb0
 & 0x00ff0000);

6862 
g0
 = (
rgb0
 & 0x0000ff00) << 8;

6863 
b0
 = (
rgb0
 & 0x000000ff) << 16;

6864 
r1
 = (
rgb1
 & 0x00ff0000);

6865 
g1
 = (
rgb1
 & 0x0000ff00) << 8;

6866 
b1
 = (
rgb1
 & 0x000000ff) << 16;

6868 
dx
 = (
x1
 - 
x0
);

6870 i‡(
dx
 > 0)

6872 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
Ë/ 
dx
;

6873 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
Ë/ 
dx
;

6874 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
Ë/ 
dx
;

6878 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
);

6879 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
);

6880 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
);

6883 i‡(
x0
 < 
døwX
)

6885 
r0
+=
dr
*(
døwX
 - 
x0
);

6886 
g0
+=
dg
*(
døwX
 - 
x0
);

6887 
b0
+=
db
*(
døwX
 - 
x0
);

6888 
x0
 = 
døwX
;

6891 i‡(
x1
 > 
døwW
)

6892 
x1
 = 
døwW
;

6894 
x
 = 
x0
; x <
x1
; x++)

6896 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6897 
r0
+=
dr
;

6898 
g0
+=
dg
;

6899 
b0
+=
db
;

6901 
	}
}

6905 
	$Löe_E_SE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
)

6907 
dx
, 
dy
, 
ö¸E
, 
ö¸SE
, 
d
, 
x
, 
y
;

6909 
dx
 = 
x1
 - 
x0
;

6910 
dy
 = 
y1
 - 
y0
;

6911 
d
 = 2*
dy
 - 
dx
;

6912 
ö¸E
 = 2*
dy
;

6913 
ö¸SE
 = 2*(
dy
 - 
dx
);

6914 
x
 = 
x0
;

6915 
y
 = 
y0
;

6916 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

6917 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

6918 
x
 < 
x1
)

6920 i‡(
d
 <= 0)

6922 
d
 = d + 
ö¸E
;

6923 
x
++;

6927 
d
 = d + 
ö¸SE
;

6928 
x
++;

6929 
y
++;

6931 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

6932 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

6934 
	}
}

6938 
	$Löe_S_SE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
)

6940 
dx
, 
dy
, 
ö¸S
, 
ö¸SE
, 
d
, 
x
, 
y
;

6942 
dx
 = 
x1
 - 
x0
;

6943 
dy
 = 
y1
 - 
y0
;

6944 
d
 = 2*
dx
 - 
dy
;

6945 
ö¸S
 = 2*
dx
;

6946 
ö¸SE
 = 2*(
dx
 - 
dy
);

6947 
x
 = 
x0
;

6948 
y
 = 
y0
;

6949 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

6950 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

6951 
y
 < 
y1
)

6953 i‡(
d
 <= 0)

6955 
d
 = d + 
ö¸S
;

6956 
y
++;

6960 
d
 = d + 
ö¸SE
;

6961 
x
++;

6962 
y
++;

6964 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

6965 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

6967 
	}
}

6971 
	$Löe_N_NE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
)

6973 
dx
, 
dy
, 
ö¸N
, 
ö¸NE
, 
d
, 
x
, 
y
;

6975 
dx
 = 
x1
 - 
x0
;

6976 
dy
 = -(
y1
 - 
y0
);

6977 
d
 = 2*
dx
 - 
dy
;

6978 
ö¸N
 = 2*
dx
;

6979 
ö¸NE
 = 2*(
dx
 - 
dy
);

6980 
x
 = 
x0
;

6981 
y
 = 
y0
;

6982 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

6983 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

6984 
y
 > 
y1
)

6986 i‡(
d
 <= 0)

6988 
d
 = d + 
ö¸N
;

6989 
y
--;

6993 
d
 = d + 
ö¸NE
;

6994 
x
++;

6995 
y
--;

6997 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

6998 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

7000 
	}
}

7004 
	$Löe_E_NE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
)

7006 
dx
, 
dy
, 
ö¸E
, 
ö¸NE
, 
d
, 
x
, 
y
;

7008 
dx
 = 
x1
 - 
x0
;

7009 
dy
 = -(
y1
 - 
y0
);

7010 
d
 = 2*
dy
 - 
dx
;

7011 
ö¸E
 = 2*
dy
;

7012 
ö¸NE
 = 2*(
dy
 - 
dx
);

7013 
x
 = 
x0
;

7014 
y
 = 
y0
;

7015 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

7016 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

7017 
x
 < 
x1
)

7019 i‡(
d
 <= 0)

7021 
d
 = d + 
ö¸E
;

7022 
x
++;

7026 
d
 = d + 
ö¸NE
;

7027 
x
++;

7028 
y
--;

7030 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

7031 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

7033 
	}
}

7037 
	$VîtLöeFœt
(
x
, 
y0
, 
y1
, 
cﬁour
)

7039 
y
;

7041 i‡(
y0
 < 
døwY
)

7042 
y0
 = 
døwY
;

7044 i‡(
y1
 > 
døwH
)

7045 
y1
 = 
døwH
;

7047 
y
 = 
y0
; y <
y1
; y++)

7048 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

7049 
	}
}

7053 
	$H‹zLöeFœt
(
y
, 
x0
, 
x1
, 
cﬁour
)

7055 
x
;

7057 i‡(
x0
 < 
døwX
)

7058 
x0
 = 
døwX
;

7060 i‡(
x1
 > 
døwW
)

7061 
x1
 = 
døwW
;

7063 
x
 = 
x0
; x <
x1
; x++)

7064 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
 << 10Ë+ 
x
], 
cﬁour
);

7065 
	}
}

7070 
	$DøwSo·w¨eLöeShade
(
öt32_t
 
rgb0
, i¡32_à
rgb1
)

7072 
x0
, 
y0
, 
x1
, 
y1
, 
xt
, 
yt
;

7073 
öt32_t
 
rgbt
;

7074 
m
, 
dy
, 
dx
;

7076 i‡(
lx0
 > 
døwW
 && 
lx1
 > drawW) ;

7077 i‡(
ly0
 > 
døwH
 && 
ly1
 > drawH) ;

7078 i‡(
lx0
 < 
døwX
 && 
lx1
 < drawX) ;

7079 i‡(
ly0
 < 
døwY
 && 
ly1
 < drawY) ;

7080 i‡(
døwY
 >
døwH
) ;

7081 i‡(
døwX
 >
døwW
) ;

7083 
x0
 = 
lx0
;

7084 
y0
 = 
ly0
;

7085 
x1
 = 
lx1
;

7086 
y1
 = 
ly1
;

7088 
dx
 = 
x1
 - 
x0
;

7089 
dy
 = 
y1
 - 
y0
;

7091 i‡(
dx
 == 0)

7093 i‡(
dy
 > 0)

7094 
	`VîtLöeShade
(
x0
, 
y0
, 
y1
, 
rgb0
, 
rgb1
);

7096 
	`VîtLöeShade
(
x0
, 
y1
, 
y0
, 
rgb1
, 
rgb0
);

7099 i‡(
dy
 == 0)

7101 i‡(
dx
 > 0)

7102 
	`H‹zLöeShade
(
y0
, 
x0
, 
x1
, 
rgb0
, 
rgb1
);

7104 
	`H‹zLöeShade
(
y0
, 
x1
, 
x0
, 
rgb1
, 
rgb0
);

7108 i‡(
dx
 < 0)

7110 
xt
 = 
x0
;

7111 
yt
 = 
y0
;

7112 
rgbt
 = 
rgb0
;

7113 
x0
 = 
x1
;

7114 
y0
 = 
y1
;

7115 
rgb0
 = 
rgb1
;

7116 
x1
 = 
xt
;

7117 
y1
 = 
yt
;

7118 
rgb1
 = 
rgbt
;

7120 
dx
 = 
x1
 - 
x0
;

7121 
dy
 = 
y1
 - 
y0
;

7124 
m
 = 
dy
 / 
dx
;

7126 i‡(
m
 >= 0)

7128 i‡(
m
 > 1)

7129 
	`Löe_S_SE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
rgb0
, 
rgb1
);

7131 
	`Löe_E_SE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
rgb0
, 
rgb1
);

7134 i‡(
m
 < -1)

7135 
	`Löe_N_NE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
rgb0
, 
rgb1
);

7137 
	`Löe_E_NE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
rgb0
, 
rgb1
);

7139 
	}
}

7143 
	$DøwSo·w¨eLöeFœt
(
öt32_t
 
rgb
)

7145 
x0
, 
y0
, 
x1
, 
y1
, 
xt
, 
yt
;

7146 
m
, 
dy
, 
dx
;

7147 
cﬁour
 = 0;

7149 i‡(
lx0
 > 
døwW
 && 
lx1
 > drawW) ;

7150 i‡(
ly0
 > 
døwH
 && 
ly1
 > drawH) ;

7151 i‡(
lx0
 < 
døwX
 && 
lx1
 < drawX) ;

7152 i‡(
ly0
 < 
døwY
 && 
ly1
 < drawY) ;

7153 i‡(
døwY
 >
døwH
) ;

7154 i‡(
døwX
 >
døwW
) ;

7156 
cﬁour
 = ((
rgb
 & 0x00f80000) >> 9) | ((rgb & 0x0000f800) >> 6) | ((rgb & 0x000000f8) >> 3);

7158 
x0
 = 
lx0
;

7159 
y0
 = 
ly0
;

7160 
x1
 = 
lx1
;

7161 
y1
 = 
ly1
;

7163 
dx
 = 
x1
 - 
x0
;

7164 
dy
 = 
y1
 - 
y0
;

7166 i‡(
dx
 == 0)

7168 i‡(
dy
 == 0)

7170 i‡(
dy
 > 0)

7171 
	`VîtLöeFœt
(
x0
, 
y0
, 
y1
, 
cﬁour
);

7173 
	`VîtLöeFœt
(
x0
, 
y1
, 
y0
, 
cﬁour
);

7176 i‡(
dy
 == 0)

7178 i‡(
dx
 > 0)

7179 
	`H‹zLöeFœt
(
y0
, 
x0
, 
x1
, 
cﬁour
);

7181 
	`H‹zLöeFœt
(
y0
, 
x1
, 
x0
, 
cﬁour
);

7185 i‡(
dx
 < 0)

7187 
xt
 = 
x0
;

7188 
yt
 = 
y0
;

7189 
x0
 = 
x1
;

7190 
y0
 = 
y1
;

7191 
x1
 = 
xt
;

7192 
y1
 = 
yt
;

7194 
dx
 = 
x1
 - 
x0
;

7195 
dy
 = 
y1
 - 
y0
;

7198 
m
 = 
dy
/
dx
;

7200 i‡(
m
 >= 0)

7202 i‡(
m
 > 1)

7203 
	`Löe_S_SE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
);

7205 
	`Löe_E_SE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
);

7208 i‡(
m
 < -1)

7209 
	`Löe_N_NE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
);

7211 
	`Löe_E_NE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
);

7213 
	}
}

	@src/gpu/gpu_drhell/gpu.cpp

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<sys/time.h
>

15 
	~<uni°d.h
>

16 
	~"time.h
"

17 
	~"p‹t.h
"

19 
	#VIDEO_WIDTH
 320

	)

20 
	#VIDEO_PITCH
 640

	)

22 
	tUöt32
;

23 sig√d 
	tSöt32
;

24 
	tUöt16
;

25 sig√d 
	tSöt16
;

26 
	tUöt8
;

27 sig√d 
	tSöt8
;

30 
Uöt32
 
	mVîsi⁄
;

31 
Uöt32
 
	mGPU_gp1
;

32 
Uöt32
 
	mC⁄åﬁ
[256];

33 
Uöt8
 
	mFømeBuf„r
[0x100000];

34 } 
	tGPUFªeze_t
;

36 
	#FRAME_BUFFER_SIZE
 (1024*512*2)

	)

37 
	#FRAME_WIDTH
 1024

	)

38 
	#FRAME_HEIGHT
 512

	)

40 
	#video_RGB_cﬁ‹16
(
R
,
G
,
B
Ë(((((R)&0xF8)<<8)|(((G)&0xFC)<<3)|(((B)&0xF8)>>3)))

	)

41 
	#FRAME_OFFSET
(
x
,
y
Ë(((y)<<10)+(x))

	)

42 
	#GPU_RGB16
(
rgb
Ë(((‘gb)&0xF80000)>>9)|((‘gb)&0xF800)>>6)|((‘gb)&0xF8)>>3))

	)

45 
Uöt32
 
	gfú°Time
 = 1;

46 
Uöt32
 
	gautoFømeSkù
 = 1;

47 
Söt32
 
	g‰amesToSkù
 = 0;

48 
Söt32
 
	g‰ameR©eCou¡î
;

49 
Söt32
 
	g‰ameR©e
 = 60;

50 
Uöt32
 
	gsy°icks
;

51 
Söt32
 
	gSkù
 = 0;

52 
Söt32
 
	gupd©eLa˚
 = 0;

54 
Söt32
 
	gisPAL
 = 0;

56 
Uöt32
 
	gwrôeDmaWidth
, 
	gwrôeDmaHeight
;

58 
Söt32
 
	gpx
,
	gpy
;

59 
Söt32
 
	gx_°¨t
,
	gy_°¨t
,
	gx_íd
,
	gy_íd
;

60 
Uöt16
 *
	gpvøm
;

62 
Söt32
 
	gGPU_gp0
;

63 
Söt32
 
	gGPU_gp1
;

64 
Söt32
 
	gFømeToRód
;

65 
Söt32
 
	gFømeToWrôe
;

66 
Söt32
 
	gFømeWidth
;

67 
Söt32
 
	gFømeCou¡
;

68 
Söt32
 
	gFømeIndex
;

70 
Söt8
 
	mS1
[64];

71 
Söt16
 
	mS2
[32];

72 
Söt32
 
	mS4
[16];

73 
Uöt8
 
	mU1
[64];

74 
Uöt16
 
	mU2
[32];

75 
Uöt32
 
	mU4
[16];

76 } 
	gPackëBuf„r
;

77 
Söt32
 
	gPackëCou¡
;

78 
Söt32
 
	gPackëIndex
;

79 
Söt32
 
	gTextuªWödow
[4];

80 
Söt32
 
	gDøwögAªa
[4];

81 
Söt32
 
	gDøwögOff£t
[2];

82 
Söt32
 
	gDi•œyAªa
[8];

83 
Uöt32
 
	gMaskög
;

84 
Uöt32
 
	gPixñMSB
;

85 
Söt32
 
	gOthîEnv
[16];

86 
Söt32
 
	gDøwögCou¡
[4];

87 
Söt32
 
	gDi•œyCou¡
[4];

88 
Uöt16
* 
	gFømeBuf„r
;

94 
Uöt8
 
	gPackëSize
[256] = {

113 
Uöt16
 
	gH‹iz⁄èlResﬁuti⁄
[8] = {

117 
Uöt16
 
	gVîtiˇlResﬁuti⁄
[4] = {

125 
	#GëMem
(
p1
Ë
	`mÆloc
(’1))

	)

126 
	#FªeMem
(
p1
Ë
	`‰ì
(’1))

	)

127 
	#C›yMem‹y
(
De°ö©i⁄
,
Sour˚
,
Lígth
Ë
	`mem˝y
((De°ö©i⁄),(Sour˚),(Lígth))

	)

128 
	#ZîoMem‹y
(
De°ö©i⁄
,
Lígth
Ë
	`mem£t
((De°ö©i⁄),0,(Lígth))

	)

129 
	#C›yMem
(
p1
,
p2
,
p3
Ë
	`C›yMem‹y
(’1),’2),’3))

	)

130 
	#ZîoMem
(
p1
,
p2
Ë
	`ZîoMem‹y
(’1),’2))

	)

132 
INLINE
 
Uöt32
 
	$gpuGëTime
()

134  
	`˛ock
()/1000;

135 
	}
}

137 
INLINE
 
	$gpuO≥nVideo
(
p1
)

139 
FømeBuf„r
 = (
Uöt16
*)
	`GëMem
(
FRAME_BUFFER_SIZE
);

140 
sy°icks
 = 
	`gpuGëTime
();

141 
	}
}

143 
INLINE
 
	$gpuClo£Video
()

145 
	`FªeMem
(
FømeBuf„r
);

146 
	}
}

148 
	gãm∂©e
<
ty≥«me
 
	gT
>

149 
INLINE
 
T
 
	$Mö2
 (c⁄° 
T
 
_a
, c⁄° T 
_b
Ë{  (_a<_b)?_a:_b; 
	}
}

151 
	~"gpu_blô.h
"

153 
INLINE
 
	$gpuVideoOuçut
()

155 
Söt16
 
ﬁd_ªs_h‹z
, 
ﬁd_ªs_vît
, 
ﬁd_rgb24
;

156 
Söt16
 
h0
, 
x0
, 
y0
, 
w0
, 
h1
;

158 
x0
 = 
Di•œyAªa
[0];

159 
y0
 = 
Di•œyAªa
[1];

161 
w0
 = 
Di•œyAªa
[2];

162 
h0
 = 
Di•œyAªa
[3];

164 
h1
 = 
Di•œyAªa
[7] - DisplayArea[5];

165 i‡(
h0
 == 480)

166 
h1
 = 
	`Mö2
(h1*2,480);

168 
Uöt16
* 
de°_s¸ìn16
 = 
SCREEN
;

169 
Uöt16
* 
§c_s¸ìn16
 = &((Uöt16*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
,
y0
)];

170 
Uöt32
 
isRGB24
 = (
GPU_gp1
 & 0x00200000 ? 32 : 0);

173 if–(
w0
 !
ﬁd_ªs_h‹z
 || 
h1
 !
ﬁd_ªs_vît
 || (
Söt16
)
isRGB24
 !
ﬁd_rgb24
) )

176 
ﬁd_ªs_h‹z
 = 
w0
;

177 
ﬁd_ªs_vît
 = 
h1
;

178 
ﬁd_rgb24
 = (
Söt16
)
isRGB24
;

180 
	`video_˛ór
();

184 
sizeShi·
 = 1;

185 if(
h0
==256) h0 = 240;

186 if(
h0
==480Ë
sizeShi·
 = 2;

188 if(
h1
>
h0
)

190 
§c_s¸ìn16
 +((
h1
-
h0
)>>
sizeShi·
)*
FRAME_WIDTH
;

191 
h1
 = 
h0
;

193 if(
h1
<
h0
Ë
de°_s¸ìn16
 +((h0-h1)>>
sizeShi·
)*
VIDEO_WIDTH
;

195 
öcY
 = (
h0
==480) ? 2 : 1;

196 
h0
=(h0==480 ? (
FRAME_WIDTH
*2) : FRAME_WIDTH);

198 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

201  
w0
 )

204 
	`GPU_BlôWWDWW
–
§c_s¸ìn16
, 
de°_s¸ìn16
, 
isRGB24
);

207 
	`GPU_BlôWWWWWWWWS
–
§c_s¸ìn16
, 
de°_s¸ìn16
, 
isRGB24
, 4);

210 
	`GPU_BlôWW
–
§c_s¸ìn16
, 
de°_s¸ìn16
, 
isRGB24
);

213 
	`GPU_BlôWWWWWS
–
§c_s¸ìn16
, 
de°_s¸ìn16
, 
isRGB24
);

216 
	`GPU_BlôWWSWWSWS
–
§c_s¸ìn16
, 
de°_s¸ìn16
, 
isRGB24
);

219 
	`GPU_BlôWS
–
§c_s¸ìn16
, 
de°_s¸ìn16
, 
isRGB24
);

223 
de°_s¸ìn16
 +
VIDEO_WIDTH
;

224 
§c_s¸ìn16
 +
h0
;

227 
	`video_Êù
();

228 
	}
}

234 
	~"gpu_døw.h
"

241 
INLINE
 
	$gpuRe£t
()

243 
GPU_gp1
 = 0x14802000;

244 
TextuªWödow
[2] = 255;

245 
TextuªWödow
[3] = 255;

246 
DøwögAªa
[2] = 256;

247 
DøwögAªa
[3] = 240;

248 
Di•œyAªa
[2] = 256;

249 
Di•œyAªa
[3] = 240;

250 
Di•œyAªa
[6] = 256;

251 
Di•œyAªa
[7] = 240;

252 
	}
}

259 
Söt32
 
	$GPU_öô
()

261 
	`gpuO≥nVideo
(0);

262 
	`gpuRe£t
();

264 
	}
}

267 
Söt32
 
	$GPU_shutdown
()

269 
	`gpuClo£Video
();

271 
	}
}

274 
	$GPU_wrôeD©a
(
Uöt32
 
d©a
)

276 
GPU_gp1
 &= ~0x14000000;

278 i‡(
FømeToWrôe
 > 0) {

279 
pvøm
[
px
]=(
Uöt16
)
d©a
;

280 i‡(++
px
>=
x_íd
) {

281 
px
 = 
x_°¨t
;

282 
pvøm
 +
FRAME_WIDTH
;

283 i‡(++
py
>=
y_íd
Ë
FømeToWrôe
=0;

285 i‡(
FømeToWrôe
 > 0) {

286 
pvøm
[
px
]=
d©a
>>16;

287 i‡(++
px
>=
x_íd
) {

288 
px
 = 
x_°¨t
;

289 
pvøm
 +
FRAME_WIDTH
;

290 i‡(++
py
>=
y_íd
Ë
FømeToWrôe
=0;

294 i‡(
PackëCou¡
) {

295 
PackëCou¡
--;

296 
PackëBuf„r
.
U4
[
PackëIndex
++] = 
d©a
;

298 
PackëBuf„r
.
U4
[0] = 
d©a
;

299 
PackëCou¡
 = 
PackëSize
[
d©a
 >> 24];

300 
PackëIndex
 = 1;

302 i‡(!
PackëCou¡
)

304 
	`gpuSídPackë
();

307 
GPU_gp1
 |= 0x14000000;

308 
	}
}

311 
	$GPU_wrôeSètus
(
Uöt32
 
d©a
)

313 
d©a
 >> 24) {

315 
	`gpuRe£t
();

318 
GPU_gp1
 &= ~0x08000000;

319 
PackëCou¡
 = 
FømeToRód
 = 
FømeToWrôe
 = 0;

322 
GPU_gp1
 &= ~0x08000000;

323 
PackëCou¡
 = 
FømeToRód
 = 
FømeToWrôe
 = 0;

326 
GPU_gp1
 = (GPU_gp1 & ~0x00800000Ë| ((
d©a
 & 1) << 23);

329 i‡(
d©a
 == 0x04000000)

330 
PackëCou¡
 = 0;

331 
GPU_gp1
 = (GPU_gp1 & ~0x60000000Ë| ((
d©a
 & 3) << 29);

334 
Di•œyAªa
[0] = 
d©a
 & 0x000003FF;

335 
Di•œyAªa
[1] = (
d©a
 & 0x000FFC00) >> 10;

338 
Di•œyAªa
[4] = 
d©a
 & 0x00000FFF;

339 
Di•œyAªa
[6] = (
d©a
 & 0x00FFF000) >> 12;

344 
Di•œyAªa
[5] = 
d©a
 & 0x000003FF;

345 
Di•œyAªa
[7] = (
d©a
 & 0x000FFC00) >> 10;

349 
OthîEnv
[0x08] = (
d©a
 >> 7) & 1;

350 
GPU_gp1
 =

351 (
GPU_gp1
 & ~0x007F0000Ë| ((
d©a
 & 0x3F) << 17) |

352 ((
d©a
 & 0x40) << 10);

355 
Di•œyAªa
[2] = 
H‹iz⁄èlResﬁuti⁄
[(
GPU_gp1
 >> 16) & 7];

356 
Di•œyAªa
[3] = 
VîtiˇlResﬁuti⁄
[(
GPU_gp1
 >> 19) & 3];

359 
isPAL
 = (
d©a
 & 0x08) ? 1 : 0;

362 
OthîEnv
[0x09] = 
d©a
 & 1;

365 
d©a
 & 0xffff) {

369 
GPU_gp0
 = (
DøwögAªa
[1] << 10) | DrawingArea[0];

372 
GPU_gp0
 =

373 ((
DøwögAªa
[3] - 1) << 10) | (DrawingArea[2] -

378 
GPU_gp0
 = (
DøwögOff£t
[1] << 11) | DrawingOffset[0];

381 
GPU_gp0
 = 2;

384 
GPU_gp0
 = 0;

388 
	}
}

391 
Uöt32
 
	$GPU_ªadD©a
()

393 
GPU_gp1
 &= ~0x14000000;

394 i‡(
FømeToRód
)

396 
GPU_gp0
 = 
pvøm
[
px
];

397 i‡(++
px
>=
x_íd
) {

398 
px
 = 
x_°¨t
;

399 
pvøm
 +
FRAME_WIDTH
;

400 i‡(++
py
>=
y_íd
Ë
FømeToRód
=0;

402 
GPU_gp0
 |
pvøm
[
px
]<<16;

403 i‡(++
px
>=
x_íd
) {

404 
px
 = 
x_°¨t
;

405 
pvøm
 +=
FRAME_WIDTH
;

406 i‡(++
py
>=
y_íd
Ë
FømeToRód
=0;

409 if–
FømeToRód
 =0 ) 
GPU_gp1
 &= ~0x08000000;

411 
GPU_gp1
 |= 0x14000000;

412  (
GPU_gp0
);

413 
	}
}

416 
Uöt32
 
	$GPU_ªadSètus
()

418 
Uöt32
 
ªt
=(
GPU_gp1
 | 0x1c000000) & ~0x00480000;

419  
ªt
;

420 
	}
}

422 
Uöt32
 *
	glU£dAddr
[3];

423 
INLINE
 
	$CheckF‹EndÀssLo›
(
Uöt32
 *
œddr
)

425 if(
œddr
==
lU£dAddr
[1])  1;

426 if(
œddr
==
lU£dAddr
[2])  1;

428 if(
œddr
<
lU£dAddr
[0])ÜUsedAddr[1]=laddr;

429 
lU£dAddr
[2]=
œddr
;

430 
lU£dAddr
[0]=
œddr
;

432 
	}
}

435 
Söt32
 
	$GPU_dmaChaö
(
Uöt32
 * 
ba£Addr
, Uöt32 
dmaVAddr
)

437 
Uöt32
 
d©a
, *
addªss
, 
cou¡
, 
off£t
;

438 
DMAComm™dCou¡î
 = 0;

440 
GPU_gp1
 &= ~0x14000000;

442 
lU£dAddr
[0]ˆU£dAddr[1]ˆU£dAddr[2]=(
Uöt32
*)0xffffff;

443 
dmaVAddr
 &= 0x00FFFFFF;

445 
dmaVAddr
 != 0xFFFFFF) {

446 
addªss
 = (
ba£Addr
 + (
dmaVAddr
 >> 2));

448 if(
DMAComm™dCou¡î
++ > 2000000) ;

449 if(
	`CheckF‹EndÀssLo›
(
addªss
)) ;

451 
d©a
 = *
addªss
++;

452 
cou¡
 = (
d©a
 >> 24);

453 
off£t
 = 
d©a
 & 0x00FFFFFF;

454 i‡(
dmaVAddr
 !
off£t
)

455 
dmaVAddr
 = 
off£t
;

457 
dmaVAddr
 = 0xFFFFFF;

458 
cou¡
) {

459 
d©a
 = *
addªss
++;

460 
cou¡
--;

462 i‡(
PackëCou¡
) {

463 
PackëCou¡
--;

464 
PackëBuf„r
.
U4
[
PackëIndex
++] = 
d©a
;

466 
PackëBuf„r
.
U4
[0] = 
d©a
;

467 
PackëCou¡
 = 
PackëSize
[
d©a
 >> 24];

468 
PackëIndex
 = 1;

471 i‡(!
PackëCou¡
)

473 
	`gpuSídPackë
();

478 
GPU_gp1
 |= 0x14000000;

480 
	}
}

482 
	#MAXSKIP
 6

	)

484 
Söt32
 
	gœ°‰amî©e
 = 0;

485 
Söt32
 
	g‰ameskùCh™ge
 = 2;

487 
	$FømeSkù
()

489 
Söt32
 
∑lhz
 = 50;

490 
Söt32
 
¡schz
 = 60;

492 
Söt32
 
pﬁlcou¡
 = 0;

493 
Söt32
 
hz
 = (
isPAL
 ? 
∑lhz
 : 
¡schz
);

494 
Söt32
 
¥evious‰ameskù
 = 
‰amesToSkù
;

496 if–
fú°Time
 )

498 
∑lhz
 = 50;

499 
¡schz
 = 60;

500 
‰amesToSkù
 = 0;

501 
‰ameskùCh™ge
 = 2;

502 
œ°‰amî©e
 = 0;

503 
fú°Time
 = 0;

507 if–
‰ameR©e
 * 
‰amesToSkù
 < 
hz
 )

509 
pﬁlcou¡
++;

510 if–
pﬁlcou¡
 > 
MAXSKIP
 )

512 
pﬁlcou¡
 = 0;

513 
‰amesToSkù
 = 2;

514 if–
isPAL
 ) 
∑lhz
 -= 5;

515 
¡schz
 -= 5;

517 if–
∑lhz
 < 10 )Öalhz = 10;

518 if–
¡schz
 < 10 )Çtschz = 10;

520 if–
œ°‰amî©e
 > 
‰ameR©e
 * 
‰amesToSkù
 )

522 
‰ameskùCh™ge
 = -frameskipChange;

523 
‰amesToSkù
 +
‰ameskùCh™ge
;

527 
‰amesToSkù
 +
‰ameskùCh™ge
;

528 
pﬁlcou¡
 = 0;

533 if–
∑lhz
 < 50 || 
¡schz
 < 60 )

535 if–
isPAL
 ) 
∑lhz
 += 5;

536 
¡schz
 += 5;

538 if–
∑lhz
 > 50 )Öalhz = 50;

539 if–
¡schz
 > 60 )Çtschz = 60;

541 
pﬁlcou¡
 = 0;

544 if–
‰amesToSkù
 < 0 ) framesToSkip = 0;

545 if–
‰amesToSkù
 > 
MAXSKIP
 ) framesToSkip = MAXSKIP;

547 
œ°‰amî©e
 = 
‰ameR©e
 * 
¥evious‰ameskù
;

548 
	}
}

551 
	$GPU_upd©eLa˚
()

553 
Uöt32
 
√wticks
;

554 
Uöt32
 
dif·icks
 = 0;

558 
GPU_gp1
 ^= 0x80000000;

560 if(
Skù
)

562 --
Skù
;

563 if(!
Skù
)

564 
upd©eLa˚
 = 0;

568 
Skù
 = 
‰amesToSkù
;

570 
‰ameR©eCou¡î
++;

571 
√wticks
=
	`gpuGëTime
();

573 if–(
dif·icks
 = (
√wticks
-
sy°icks
)) >= 1000 )

575 
sy°icks
 = 
√wticks
;

576 
‰ameR©e
 = (
Söt32
)((()
‰ameR©eCou¡î
Ë/ ((()
dif·icks
)/1000.0));

577 
‰ameR©eCou¡î
 = 0;

580 if–
autoFømeSkù
 )

582 
	`FømeSkù
();

586 i‡(
upd©eLa˚
)

588 
	`gpuVideoOuçut
();

589 
upd©eLa˚
=0;

592 
	}
}

595 
GPU_wrôeDMA
–* 
§c
, * 
d°
, 
§c_adv™˚
, 
w0
, 
h1
, 
dmaCou¡
 );

596 
GPU_wrôeDMA_Fa°
–* 
§c
, * 
d°
, 
§c_adv™˚
, 
w0
, 
h1
, 
dmaCou¡
 );

598 
	$GPU_wrôeD©aMem
(
Uöt32
 * 
dmaAddªss
, 
Söt32
 
dmaCou¡
)

600 
Uöt32
 
ãmp
;

602 
GPU_gp1
 &= ~0x14000000;

604 
dmaCou¡
) {

605 i‡(
FømeToWrôe
 > 0) {

607 
dmaCou¡
--)

609 
Uöt32
 
d©a
 = *
dmaAddªss
++;

611 i‡(
px
<
FRAME_WIDTH
 && 
py
<512)

612 
pvøm
[
px
] = 
d©a
;

613 i‡(++
px
>=
x_íd
)

615 
px
 = 
x_°¨t
;

616 
pvøm
 +
FRAME_WIDTH
;

617 i‡(++
py
>=
y_íd
)

619 
FømeToWrôe
 = 0;

620 
GPU_gp1
 &= ~0x08000000;

624 i‡(
px
<
FRAME_WIDTH
 && 
py
<512)

625 
pvøm
[
px
] = 
d©a
>>16;

626 i‡(++
px
>=
x_íd
)

628 
px
 = 
x_°¨t
;

629 
pvøm
 +
FRAME_WIDTH
;

630 i‡(++
py
>=
y_íd
)

632 
FømeToWrôe
 = 0;

633 
GPU_gp1
 &= ~0x08000000;

640 
ãmp
 = *
dmaAddªss
++;

641 
dmaCou¡
--;

642 i‡(
PackëCou¡
) {

643 
PackëBuf„r
.
U4
[
PackëIndex
++] = 
ãmp
;

644 
PackëCou¡
--;

646 
PackëBuf„r
.
U4
[0] = 
ãmp
;

647 
PackëCou¡
 = 
PackëSize
[
ãmp
 >> 24];

648 
PackëIndex
 = 1;

650 i‡(!
PackëCou¡
)

652 
	`gpuSídPackë
();

656 
GPU_gp1
 |= 0x14000000;

657 
	}
}

660 
	$GPU_ªadD©aMem
(
Uöt32
 * 
dmaAddªss
, 
Söt32
 
dmaCou¡
)

662 if–
FømeToRód
 == 0 ) ;

664 
GPU_gp1
 &= ~0x14000000;

669 
Uöt32
 
d©a
 = ()
pvøm
[
px
];

671 i‡(++
px
>=
x_íd
)

673 
px
 = 
x_°¨t
;

674 
pvøm
 +
FRAME_WIDTH
;

678 
d©a
 |()(
pvøm
[
px
])<<16;

680 *
dmaAddªss
++ = 
d©a
;

682 i‡(++
px
>=
x_íd
)

684 
px
 = 
x_°¨t
;

685 
pvøm
 +
FRAME_WIDTH
;

686 i‡(++
py
>=
y_íd
)

688 
FømeToRód
 = 0;

689 
GPU_gp1
 &= ~0x08000000;

693 } --
dmaCou¡
);

695 
GPU_gp1
 |= 0x14000000;

696 
	}
}

699 
	$GPU_‰ìze
(
Uöt32
 
p1
, 
GPUFªeze_t
 * 
p2
)

701 
Uöt32
 
ãmp
;

702 
Söt32
 
ªt
=0;

704 i‡(
p1
 == 2) {

705 
ãmp
 = *(
Uöt32
 *Ë
p2
;

706 i‡((
ãmp
 < 0) || (temp > 8))

707 
ªt
=0;

709 
ªt
=1;

712 i‡(
p2
 =
NULL
)

713 
ªt
=0;

715 i‡(
p2
->
Vîsi⁄
 != 1)

716 
ªt
=0;

718 i‡(
p1
 == 1) {

719 
p2
->
GPU_gp1
 = GPU_gp1;

720 
	`C›yMem
(
p2
->
FømeBuf„r
, (
Uöt16
*)FømeBuf„r, 
FRAME_BUFFER_SIZE
);

721 
ªt
=1;

724 i‡(
p1
 == 0) {

725 
GPU_gp1
 = 
p2
->GPU_gp1;

726 
	`C›yMem
((
Uöt16
*)
FømeBuf„r
, 
p2
->FømeBuf„r, 
FRAME_BUFFER_SIZE
);

727 
ªt
=1;

729  
ªt
;

730 
	}
}

	@src/gpu/gpu_drhell/gpu_blit.h

1 #i‚de‡
_INNER_BLIT_H_


2 
	#_INNER_BLIT_H_


	)

4 
INLINE
 
	$GPU_BlôWW
(c⁄° * 
§c
, 
Uöt16
* 
d°16
, 
Uöt32
 
isRGB24
)

6 
Uöt32
 
uCou¡
;

7 if(
isRGB24
 == 0)

9 
uCou¡
 = 20;

10 c⁄° 
Uöt32
* 
§c32
 = (c⁄° Uöt32*Ë
§c
;

11 
Uöt32
* 
d°32
 = ( Uöt32*Ë
d°16
;

14 
d°32
[0] = ((
§c32
[0]&(0x1f001f<<10))>>10) | ((src32[0]&(0x1f001f<<5))<<1) | ((src32[0]&(0x1f001f<<0))<<11);

15 
d°32
[1] = ((
§c32
[1]&(0x1f001f<<10))>>10) | ((src32[1]&(0x1f001f<<5))<<1) | ((src32[1]&(0x1f001f<<0))<<11);

16 
d°32
[2] = ((
§c32
[2]&(0x1f001f<<10))>>10) | ((src32[2]&(0x1f001f<<5))<<1) | ((src32[2]&(0x1f001f<<0))<<11);

17 
d°32
[3] = ((
§c32
[3]&(0x1f001f<<10))>>10) | ((src32[3]&(0x1f001f<<5))<<1) | ((src32[3]&(0x1f001f<<0))<<11);

18 
d°32
[4] = ((
§c32
[4]&(0x1f001f<<10))>>10) | ((src32[4]&(0x1f001f<<5))<<1) | ((src32[4]&(0x1f001f<<0))<<11);

19 
d°32
[5] = ((
§c32
[5]&(0x1f001f<<10))>>10) | ((src32[5]&(0x1f001f<<5))<<1) | ((src32[5]&(0x1f001f<<0))<<11);

20 
d°32
[6] = ((
§c32
[6]&(0x1f001f<<10))>>10) | ((src32[6]&(0x1f001f<<5))<<1) | ((src32[6]&(0x1f001f<<0))<<11);

21 
d°32
[7] = ((
§c32
[7]&(0x1f001f<<10))>>10) | ((src32[7]&(0x1f001f<<5))<<1) | ((src32[7]&(0x1f001f<<0))<<11);

22 
d°32
 += 8;

23 
§c32
 += 8;

24 }--
uCou¡
);

28 
uCou¡
 = 20;

29 c⁄° 
Uöt8
* 
§c8
 = (c⁄° Uöt8*)
§c
;

31 
d°16
[ 0] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 0], src8[ 1], src8[ 2] );

32 
d°16
[ 1] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 3], src8[ 4], src8[ 5] );

33 
d°16
[ 2] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 6], src8[ 7], src8[ 8] );

34 
d°16
[ 3] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 9], src8[10], src8[11] );

35 
d°16
[ 4] = 
	`video_RGB_cﬁ‹16
(
§c8
[12], src8[13], src8[14] );

36 
d°16
[ 5] = 
	`video_RGB_cﬁ‹16
(
§c8
[15], src8[16], src8[17] );

37 
d°16
[ 6] = 
	`video_RGB_cﬁ‹16
(
§c8
[18], src8[19], src8[20] );

38 
d°16
[ 7] = 
	`video_RGB_cﬁ‹16
(
§c8
[21], src8[22], src8[23] );

40 
d°16
[ 8] = 
	`video_RGB_cﬁ‹16
(
§c8
[24], src8[25], src8[26] );

41 
d°16
[ 9] = 
	`video_RGB_cﬁ‹16
(
§c8
[27], src8[28], src8[29] );

42 
d°16
[10] = 
	`video_RGB_cﬁ‹16
(
§c8
[30], src8[31], src8[32] );

43 
d°16
[11] = 
	`video_RGB_cﬁ‹16
(
§c8
[33], src8[34], src8[35] );

44 
d°16
[12] = 
	`video_RGB_cﬁ‹16
(
§c8
[36], src8[37], src8[38] );

45 
d°16
[13] = 
	`video_RGB_cﬁ‹16
(
§c8
[39], src8[40], src8[41] );

46 
d°16
[14] = 
	`video_RGB_cﬁ‹16
(
§c8
[42], src8[43], src8[44] );

47 
d°16
[15] = 
	`video_RGB_cﬁ‹16
(
§c8
[45], src8[46], src8[47] );

48 
d°16
 += 16;

49 
§c8
 += 48;

50 }--
uCou¡
);

52 
	}
}

54 
INLINE
 
	$GPU_BlôWWSWWSWS
(c⁄° * 
§c
, 
Uöt16
* 
d°16
, 
Uöt32
 
isRGB24
)

56 
Uöt32
 
uCou¡
;

57 if(
isRGB24
 == 0)

59 
uCou¡
 = 32;

60 c⁄° 
Uöt16
* 
§c16
 = (c⁄° Uöt16*Ë
§c
;

63 
d°16
[ 0] = ((
§c16
[ 0]&(0x1f001f<<10))>>10) | ((src16[ 0]&(0x1f001f<<5))<<1) | ((src16[ 0]&(0x1f001f<<0))<<11);

64 
d°16
[ 1] = ((
§c16
[ 1]&(0x1f001f<<10))>>10) | ((src16[ 1]&(0x1f001f<<5))<<1) | ((src16[ 1]&(0x1f001f<<0))<<11);

65 
d°16
[ 2] = ((
§c16
[ 3]&(0x1f001f<<10))>>10) | ((src16[ 3]&(0x1f001f<<5))<<1) | ((src16[ 3]&(0x1f001f<<0))<<11);

66 
d°16
[ 3] = ((
§c16
[ 4]&(0x1f001f<<10))>>10) | ((src16[ 4]&(0x1f001f<<5))<<1) | ((src16[ 4]&(0x1f001f<<0))<<11);

67 
d°16
[ 4] = ((
§c16
[ 6]&(0x1f001f<<10))>>10) | ((src16[ 6]&(0x1f001f<<5))<<1) | ((src16[ 6]&(0x1f001f<<0))<<11);

68 
d°16
[ 5] = ((
§c16
[ 8]&(0x1f001f<<10))>>10) | ((src16[ 8]&(0x1f001f<<5))<<1) | ((src16[ 8]&(0x1f001f<<0))<<11);

69 
d°16
[ 6] = ((
§c16
[ 9]&(0x1f001f<<10))>>10) | ((src16[ 9]&(0x1f001f<<5))<<1) | ((src16[ 9]&(0x1f001f<<0))<<11);

70 
d°16
[ 7] = ((
§c16
[11]&(0x1f001f<<10))>>10) | ((src16[11]&(0x1f001f<<5))<<1) | ((src16[11]&(0x1f001f<<0))<<11);

71 
d°16
[ 8] = ((
§c16
[12]&(0x1f001f<<10))>>10) | ((src16[12]&(0x1f001f<<5))<<1) | ((src16[12]&(0x1f001f<<0))<<11);

72 
d°16
[ 9] = ((
§c16
[14]&(0x1f001f<<10))>>10) | ((src16[14]&(0x1f001f<<5))<<1) | ((src16[14]&(0x1f001f<<0))<<11);

73 
d°16
 += 10;

74 
§c16
 += 16;

75 }--
uCou¡
);

79 
uCou¡
 = 32;

80 c⁄° 
Uöt8
* 
§c8
 = (c⁄° Uöt8*)
§c
;

82 
d°16
[ 0] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 0], src8[ 1], src8[ 2] );

83 
d°16
[ 1] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 3], src8[ 4], src8[ 5] );

84 
d°16
[ 2] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 9], src8[10], src8[11] );

85 
d°16
[ 3] = 
	`video_RGB_cﬁ‹16
(
§c8
[12], src8[13], src8[14] );

86 
d°16
[ 4] = 
	`video_RGB_cﬁ‹16
(
§c8
[18], src8[19], src8[20] );

88 
d°16
[ 5] = 
	`video_RGB_cﬁ‹16
(
§c8
[24], src8[25], src8[26] );

89 
d°16
[ 6] = 
	`video_RGB_cﬁ‹16
(
§c8
[27], src8[28], src8[29] );

90 
d°16
[ 7] = 
	`video_RGB_cﬁ‹16
(
§c8
[33], src8[34], src8[35] );

91 
d°16
[ 8] = 
	`video_RGB_cﬁ‹16
(
§c8
[36], src8[37], src8[38] );

92 
d°16
[ 9] = 
	`video_RGB_cﬁ‹16
(
§c8
[42], src8[43], src8[44] );

94 
d°16
 += 10;

95 
§c8
 += 48;

96 }--
uCou¡
);

98 
	}
}

100 
INLINE
 
	$GPU_BlôWWWWWS
(c⁄° * 
§c
, 
Uöt16
* 
d°16
, 
Uöt32
 
isRGB24
)

102 
Uöt32
 
uCou¡
;

103 if(
isRGB24
 == 0)

105 
uCou¡
 = 32;

106 c⁄° 
Uöt16
* 
§c16
 = (c⁄° Uöt16*Ë
§c
;

109 
d°16
[ 0] = ((
§c16
[0]&(0x1f001f<<10))>>10) | ((src16[0]&(0x1f001f<<5))<<1) | ((src16[0]&(0x1f001f<<0))<<11);

110 
d°16
[ 1] = ((
§c16
[1]&(0x1f001f<<10))>>10) | ((src16[1]&(0x1f001f<<5))<<1) | ((src16[1]&(0x1f001f<<0))<<11);

111 
d°16
[ 2] = ((
§c16
[2]&(0x1f001f<<10))>>10) | ((src16[2]&(0x1f001f<<5))<<1) | ((src16[2]&(0x1f001f<<0))<<11);

112 
d°16
[ 3] = ((
§c16
[3]&(0x1f001f<<10))>>10) | ((src16[3]&(0x1f001f<<5))<<1) | ((src16[3]&(0x1f001f<<0))<<11);

113 
d°16
[ 4] = ((
§c16
[4]&(0x1f001f<<10))>>10) | ((src16[4]&(0x1f001f<<5))<<1) | ((src16[4]&(0x1f001f<<0))<<11);

114 
d°16
[ 5] = ((
§c16
[6]&(0x1f001f<<10))>>10) | ((src16[6]&(0x1f001f<<5))<<1) | ((src16[6]&(0x1f001f<<0))<<11);

115 
d°16
[ 6] = ((
§c16
[7]&(0x1f001f<<10))>>10) | ((src16[7]&(0x1f001f<<5))<<1) | ((src16[7]&(0x1f001f<<0))<<11);

116 
d°16
[ 7] = ((
§c16
[8]&(0x1f001f<<10))>>10) | ((src16[8]&(0x1f001f<<5))<<1) | ((src16[8]&(0x1f001f<<0))<<11);

117 
d°16
[ 8] = ((
§c16
[9]&(0x1f001f<<10))>>10) | ((src16[9]&(0x1f001f<<5))<<1) | ((src16[9]&(0x1f001f<<0))<<11);

118 
d°16
[ 9] = ((
§c16
[10]&(0x1f001f<<10))>>10) | ((src16[10]&(0x1f001f<<5))<<1) | ((src16[10]&(0x1f001f<<0))<<11);

119 
d°16
 += 10;

120 
§c16
 += 12;

121 }--
uCou¡
);

125 
uCou¡
 = 32;

126 c⁄° 
Uöt8
* 
§c8
 = (c⁄° Uöt8*)
§c
;

128 
d°16
[0] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 0], src8[ 1], src8[ 2] );

129 
d°16
[1] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 3], src8[ 4], src8[ 5] );

130 
d°16
[2] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 6], src8[ 7], src8[ 8] );

131 
d°16
[3] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 9], src8[10], src8[11] );

132 
d°16
[4] = 
	`video_RGB_cﬁ‹16
(
§c8
[12], src8[13], src8[14] );

133 
d°16
[5] = 
	`video_RGB_cﬁ‹16
(
§c8
[18], src8[19], src8[20] );

134 
d°16
[6] = 
	`video_RGB_cﬁ‹16
(
§c8
[21], src8[22], src8[23] );

135 
d°16
[7] = 
	`video_RGB_cﬁ‹16
(
§c8
[24], src8[25], src8[26] );

136 
d°16
[8] = 
	`video_RGB_cﬁ‹16
(
§c8
[27], src8[28], src8[29] );

137 
d°16
[9] = 
	`video_RGB_cﬁ‹16
(
§c8
[30], src8[31], src8[32] );

138 
d°16
 += 10;

139 
§c8
 += 36;

140 }--
uCou¡
);

142 
	}
}

144 
INLINE
 
	$GPU_BlôWWWWWWWWS
(c⁄° * 
§c
, 
Uöt16
* 
d°16
, 
Uöt32
 
isRGB24
, Uöt32 
uClù_§c
)

146 
Uöt32
 
uCou¡
;

147 if(
isRGB24
 == 0)

149 
uCou¡
 = 20;

150 c⁄° 
Uöt16
* 
§c16
 = ((c⁄° Uöt16*Ë
§c
Ë+ 
uClù_§c
;

152 
d°16
[ 0] = ((
§c16
[ 0]&(0x1f001f<<10))>>10) | ((src16[ 0]&(0x1f001f<<5))<<1) | ((src16[ 0]&(0x1f001f<<0))<<11);

153 
d°16
[ 1] = ((
§c16
[ 1]&(0x1f001f<<10))>>10) | ((src16[ 1]&(0x1f001f<<5))<<1) | ((src16[ 1]&(0x1f001f<<0))<<11);

154 
d°16
[ 2] = ((
§c16
[ 2]&(0x1f001f<<10))>>10) | ((src16[ 2]&(0x1f001f<<5))<<1) | ((src16[ 2]&(0x1f001f<<0))<<11);

155 
d°16
[ 3] = ((
§c16
[ 3]&(0x1f001f<<10))>>10) | ((src16[ 3]&(0x1f001f<<5))<<1) | ((src16[ 3]&(0x1f001f<<0))<<11);

156 
d°16
[ 4] = ((
§c16
[ 4]&(0x1f001f<<10))>>10) | ((src16[ 4]&(0x1f001f<<5))<<1) | ((src16[ 4]&(0x1f001f<<0))<<11);

157 
d°16
[ 5] = ((
§c16
[ 5]&(0x1f001f<<10))>>10) | ((src16[ 5]&(0x1f001f<<5))<<1) | ((src16[ 5]&(0x1f001f<<0))<<11);

158 
d°16
[ 6] = ((
§c16
[ 6]&(0x1f001f<<10))>>10) | ((src16[ 6]&(0x1f001f<<5))<<1) | ((src16[ 6]&(0x1f001f<<0))<<11);

159 
d°16
[ 7] = ((
§c16
[ 7]&(0x1f001f<<10))>>10) | ((src16[ 7]&(0x1f001f<<5))<<1) | ((src16[ 7]&(0x1f001f<<0))<<11);

161 
d°16
[ 8] = ((
§c16
[ 9]&(0x1f001f<<10))>>10) | ((src16[ 9]&(0x1f001f<<5))<<1) | ((src16[ 9]&(0x1f001f<<0))<<11);

162 
d°16
[ 9] = ((
§c16
[10]&(0x1f001f<<10))>>10) | ((src16[10]&(0x1f001f<<5))<<1) | ((src16[10]&(0x1f001f<<0))<<11);

163 
d°16
[10] = ((
§c16
[11]&(0x1f001f<<10))>>10) | ((src16[11]&(0x1f001f<<5))<<1) | ((src16[11]&(0x1f001f<<0))<<11);

164 
d°16
[11] = ((
§c16
[12]&(0x1f001f<<10))>>10) | ((src16[12]&(0x1f001f<<5))<<1) | ((src16[12]&(0x1f001f<<0))<<11);

165 
d°16
[12] = ((
§c16
[13]&(0x1f001f<<10))>>10) | ((src16[13]&(0x1f001f<<5))<<1) | ((src16[13]&(0x1f001f<<0))<<11);

166 
d°16
[13] = ((
§c16
[14]&(0x1f001f<<10))>>10) | ((src16[14]&(0x1f001f<<5))<<1) | ((src16[14]&(0x1f001f<<0))<<11);

167 
d°16
[14] = ((
§c16
[15]&(0x1f001f<<10))>>10) | ((src16[15]&(0x1f001f<<5))<<1) | ((src16[15]&(0x1f001f<<0))<<11);

168 
d°16
[15] = ((
§c16
[16]&(0x1f001f<<10))>>10) | ((src16[16]&(0x1f001f<<5))<<1) | ((src16[16]&(0x1f001f<<0))<<11);

169 
d°16
 += 16;

170 
§c16
 += 18;

171 }--
uCou¡
);

175 
uCou¡
 = 20;

176 c⁄° 
Uöt8
* 
§c8
 = (c⁄° Uöt8*)
§c
 + (
uClù_§c
<<1) + uClip_src;

178 
d°16
[ 0] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 0], src8[ 1], src8[ 2] );

179 
d°16
[ 1] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 3], src8[ 4], src8[ 5] );

180 
d°16
[ 2] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 6], src8[ 7], src8[ 8] );

181 
d°16
[ 3] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 9], src8[10], src8[11] );

182 
d°16
[ 4] = 
	`video_RGB_cﬁ‹16
(
§c8
[12], src8[13], src8[14] );

183 
d°16
[ 5] = 
	`video_RGB_cﬁ‹16
(
§c8
[15], src8[16], src8[17] );

184 
d°16
[ 6] = 
	`video_RGB_cﬁ‹16
(
§c8
[18], src8[19], src8[20] );

185 
d°16
[ 7] = 
	`video_RGB_cﬁ‹16
(
§c8
[21], src8[22], src8[23] );

187 
d°16
[ 8] = 
	`video_RGB_cﬁ‹16
(
§c8
[27], src8[28], src8[29] );

188 
d°16
[ 9] = 
	`video_RGB_cﬁ‹16
(
§c8
[30], src8[31], src8[32] );

189 
d°16
[10] = 
	`video_RGB_cﬁ‹16
(
§c8
[33], src8[34], src8[35] );

190 
d°16
[11] = 
	`video_RGB_cﬁ‹16
(
§c8
[36], src8[37], src8[38] );

191 
d°16
[12] = 
	`video_RGB_cﬁ‹16
(
§c8
[39], src8[40], src8[41] );

192 
d°16
[13] = 
	`video_RGB_cﬁ‹16
(
§c8
[42], src8[43], src8[44] );

193 
d°16
[14] = 
	`video_RGB_cﬁ‹16
(
§c8
[45], src8[46], src8[47] );

194 
d°16
[15] = 
	`video_RGB_cﬁ‹16
(
§c8
[48], src8[49], src8[50] );

195 
d°16
 += 16;

196 
§c8
 += 54;

197 }--
uCou¡
);

199 
	}
}

201 
INLINE
 
	$GPU_BlôWWDWW
(c⁄° * 
§c
, 
Uöt16
* 
d°16
, 
Uöt32
 
isRGB24
)

203 
Uöt32
 
uCou¡
;

204 if(
isRGB24
 == 0)

206 
uCou¡
 = 32;

207 c⁄° 
Uöt16
* 
§c16
 = (c⁄° Uöt16*Ë
§c
;

209 
d°16
[ 0] = ((
§c16
[0]&(0x1f001f<<10))>>10) | ((src16[0]&(0x1f001f<<5))<<1) | ((src16[0]&(0x1f001f<<0))<<11);

210 
d°16
[ 1] = ((
§c16
[1]&(0x1f001f<<10))>>10) | ((src16[1]&(0x1f001f<<5))<<1) | ((src16[1]&(0x1f001f<<0))<<11);

211 
d°16
[ 2] = dst16[1];

212 
d°16
[ 3] = ((
§c16
[2]&(0x1f001f<<10))>>10) | ((src16[2]&(0x1f001f<<5))<<1) | ((src16[2]&(0x1f001f<<0))<<11);

213 
d°16
[ 4] = ((
§c16
[3]&(0x1f001f<<10))>>10) | ((src16[3]&(0x1f001f<<5))<<1) | ((src16[3]&(0x1f001f<<0))<<11);

214 
d°16
[ 5] = ((
§c16
[4]&(0x1f001f<<10))>>10) | ((src16[4]&(0x1f001f<<5))<<1) | ((src16[4]&(0x1f001f<<0))<<11);

215 
d°16
[ 6] = ((
§c16
[5]&(0x1f001f<<10))>>10) | ((src16[5]&(0x1f001f<<5))<<1) | ((src16[5]&(0x1f001f<<0))<<11);

216 
d°16
[ 7] = dst16[6];

217 
d°16
[ 8] = ((
§c16
[6]&(0x1f001f<<10))>>10) | ((src16[6]&(0x1f001f<<5))<<1) | ((src16[6]&(0x1f001f<<0))<<11);

218 
d°16
[ 9] = ((
§c16
[7]&(0x1f001f<<10))>>10) | ((src16[7]&(0x1f001f<<5))<<1) | ((src16[7]&(0x1f001f<<0))<<11);

219 
d°16
 += 10;

220 
§c16
 += 8;

221 }--
uCou¡
);

225 
uCou¡
 = 32;

226 c⁄° 
Uöt8
* 
§c8
 = (c⁄° Uöt8*)
§c
;

228 
d°16
[ 0] = 
	`video_RGB_cﬁ‹16
(
§c8
[0], src8[ 1], src8[ 2] );

229 
d°16
[ 1] = 
	`video_RGB_cﬁ‹16
(
§c8
[3], src8[ 4], src8[ 5] );

230 
d°16
[ 2] = dst16[1];

231 
d°16
[ 3] = 
	`video_RGB_cﬁ‹16
(
§c8
[6], src8[ 7], src8[ 8] );

232 
d°16
[ 4] = 
	`video_RGB_cﬁ‹16
(
§c8
[9], src8[10], src8[11] );

234 
d°16
[ 5] = 
	`video_RGB_cﬁ‹16
(
§c8
[12], src8[13], src8[14] );

235 
d°16
[ 6] = 
	`video_RGB_cﬁ‹16
(
§c8
[15], src8[16], src8[17] );

236 
d°16
[ 7] = dst16[6];

237 
d°16
[ 8] = 
	`video_RGB_cﬁ‹16
(
§c8
[18], src8[19], src8[20] );

238 
d°16
[ 9] = 
	`video_RGB_cﬁ‹16
(
§c8
[21], src8[22], src8[23] );

239 
d°16
 += 10;

240 
§c8
 += 24;

241 }--
uCou¡
);

243 
	}
}

246 
INLINE
 
	$GPU_BlôWS
(c⁄° * 
§c
, 
Uöt16
* 
d°16
, 
Uöt32
 
isRGB24
)

248 
Uöt32
 
uCou¡
;

249 if(
isRGB24
 == 0)

251 
uCou¡
 = 20;

252 c⁄° 
Uöt16
* 
§c16
 = (c⁄° Uöt16*Ë
§c
;

254 
d°16
[ 0] = ((
§c16
[ 0]&(0x1f001f<<10))>>10) | ((src16[ 0]&(0x1f001f<<5))<<1) | ((src16[ 0]&(0x1f001f<<0))<<11);

255 
d°16
[ 1] = ((
§c16
[ 2]&(0x1f001f<<10))>>10) | ((src16[ 2]&(0x1f001f<<5))<<1) | ((src16[ 2]&(0x1f001f<<0))<<11);

256 
d°16
[ 2] = ((
§c16
[ 4]&(0x1f001f<<10))>>10) | ((src16[ 4]&(0x1f001f<<5))<<1) | ((src16[ 4]&(0x1f001f<<0))<<11);

257 
d°16
[ 3] = ((
§c16
[ 6]&(0x1f001f<<10))>>10) | ((src16[ 6]&(0x1f001f<<5))<<1) | ((src16[ 6]&(0x1f001f<<0))<<11);

259 
d°16
[ 4] = ((
§c16
[ 8]&(0x1f001f<<10))>>10) | ((src16[ 8]&(0x1f001f<<5))<<1) | ((src16[ 8]&(0x1f001f<<0))<<11);

260 
d°16
[ 5] = ((
§c16
[10]&(0x1f001f<<10))>>10) | ((src16[10]&(0x1f001f<<5))<<1) | ((src16[10]&(0x1f001f<<0))<<11);

261 
d°16
[ 6] = ((
§c16
[12]&(0x1f001f<<10))>>10) | ((src16[12]&(0x1f001f<<5))<<1) | ((src16[12]&(0x1f001f<<0))<<11);

262 
d°16
[ 7] = ((
§c16
[14]&(0x1f001f<<10))>>10) | ((src16[14]&(0x1f001f<<5))<<1) | ((src16[14]&(0x1f001f<<0))<<11);

264 
d°16
[ 8] = ((
§c16
[16]&(0x1f001f<<10))>>10) | ((src16[16]&(0x1f001f<<5))<<1) | ((src16[16]&(0x1f001f<<0))<<11);

265 
d°16
[ 9] = ((
§c16
[18]&(0x1f001f<<10))>>10) | ((src16[18]&(0x1f001f<<5))<<1) | ((src16[18]&(0x1f001f<<0))<<11);

266 
d°16
[10] = ((
§c16
[20]&(0x1f001f<<10))>>10) | ((src16[20]&(0x1f001f<<5))<<1) | ((src16[20]&(0x1f001f<<0))<<11);

267 
d°16
[11] = ((
§c16
[22]&(0x1f001f<<10))>>10) | ((src16[22]&(0x1f001f<<5))<<1) | ((src16[22]&(0x1f001f<<0))<<11);

269 
d°16
[12] = ((
§c16
[24]&(0x1f001f<<10))>>10) | ((src16[24]&(0x1f001f<<5))<<1) | ((src16[24]&(0x1f001f<<0))<<11);

270 
d°16
[13] = ((
§c16
[26]&(0x1f001f<<10))>>10) | ((src16[26]&(0x1f001f<<5))<<1) | ((src16[26]&(0x1f001f<<0))<<11);

271 
d°16
[14] = ((
§c16
[28]&(0x1f001f<<10))>>10) | ((src16[28]&(0x1f001f<<5))<<1) | ((src16[28]&(0x1f001f<<0))<<11);

272 
d°16
[15] = ((
§c16
[30]&(0x1f001f<<10))>>10) | ((src16[30]&(0x1f001f<<5))<<1) | ((src16[30]&(0x1f001f<<0))<<11);

274 
d°16
 += 16;

275 
§c16
 += 32;

276 }--
uCou¡
);

280 
uCou¡
 = 20;

281 c⁄° 
Uöt8
* 
§c8
 = (c⁄° Uöt8*Ë
§c
;

283 
d°16
[ 0] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 0], src8[ 1], src8[ 2] );

284 
d°16
[ 1] = 
	`video_RGB_cﬁ‹16
(
§c8
[ 6], src8[ 7], src8[ 8] );

285 
d°16
[ 2] = 
	`video_RGB_cﬁ‹16
(
§c8
[12], src8[13], src8[14] );

286 
d°16
[ 3] = 
	`video_RGB_cﬁ‹16
(
§c8
[18], src8[19], src8[20] );

288 
d°16
[ 4] = 
	`video_RGB_cﬁ‹16
(
§c8
[24], src8[25], src8[26] );

289 
d°16
[ 5] = 
	`video_RGB_cﬁ‹16
(
§c8
[30], src8[31], src8[32] );

290 
d°16
[ 6] = 
	`video_RGB_cﬁ‹16
(
§c8
[36], src8[37], src8[38] );

291 
d°16
[ 7] = 
	`video_RGB_cﬁ‹16
(
§c8
[42], src8[43], src8[44] );

293 
d°16
[ 8] = 
	`video_RGB_cﬁ‹16
(
§c8
[48], src8[49], src8[50] );

294 
d°16
[ 9] = 
	`video_RGB_cﬁ‹16
(
§c8
[54], src8[55], src8[56] );

295 
d°16
[10] = 
	`video_RGB_cﬁ‹16
(
§c8
[60], src8[61], src8[62] );

296 
d°16
[11] = 
	`video_RGB_cﬁ‹16
(
§c8
[66], src8[67], src8[68] );

298 
d°16
[12] = 
	`video_RGB_cﬁ‹16
(
§c8
[72], src8[73], src8[74] );

299 
d°16
[13] = 
	`video_RGB_cﬁ‹16
(
§c8
[78], src8[79], src8[80] );

300 
d°16
[14] = 
	`video_RGB_cﬁ‹16
(
§c8
[84], src8[85], src8[86] );

301 
d°16
[15] = 
	`video_RGB_cﬁ‹16
(
§c8
[90], src8[91], src8[92] );

303 
d°16
 += 16;

304 
§c8
 += 96;

305 }--
uCou¡
);

307 
	}
}

310 
INLINE
 
	$GPU_BlôWSSWSSWSSWSSWSSS
(c⁄° * 
§c
, 
Uöt16
* 
d°16
, 
Uöt32
 
isRGB24
)

312 
Uöt32
 
uCou¡
;

313 if(
isRGB24
 == 0)

315 
uCou¡
 = 32;

316 c⁄° 
Uöt16
* 
§c16
 = (c⁄° Uöt16*Ë
§c
;

318 
d°16
[ 0] = ((
§c16
[ 0]&(0x1f001f<<10))>>10) | ((src16[ 0]&(0x1f001f<<5))<<1) | ((src16[ 0]&(0x1f001f<<0))<<11);

319 
d°16
[ 1] = ((
§c16
[ 3]&(0x1f001f<<10))>>10) | ((src16[ 3]&(0x1f001f<<5))<<1) | ((src16[ 3]&(0x1f001f<<0))<<11);

320 
d°16
[ 2] = ((
§c16
[ 6]&(0x1f001f<<10))>>10) | ((src16[ 6]&(0x1f001f<<5))<<1) | ((src16[ 6]&(0x1f001f<<0))<<11);

321 
d°16
[ 3] = ((
§c16
[ 9]&(0x1f001f<<10))>>10) | ((src16[ 9]&(0x1f001f<<5))<<1) | ((src16[ 9]&(0x1f001f<<0))<<11);

322 
d°16
[ 4] = ((
§c16
[12]&(0x1f001f<<10))>>10) | ((src16[12]&(0x1f001f<<5))<<1) | ((src16[12]&(0x1f001f<<0))<<11);

324 
d°16
[ 5] = ((
§c16
[16]&(0x1f001f<<10))>>10) | ((src16[16]&(0x1f001f<<5))<<1) | ((src16[16]&(0x1f001f<<0))<<11);

325 
d°16
[ 6] = ((
§c16
[19]&(0x1f001f<<10))>>10) | ((src16[19]&(0x1f001f<<5))<<1) | ((src16[19]&(0x1f001f<<0))<<11);

326 
d°16
[ 7] = ((
§c16
[22]&(0x1f001f<<10))>>10) | ((src16[22]&(0x1f001f<<5))<<1) | ((src16[22]&(0x1f001f<<0))<<11);

327 
d°16
[ 8] = ((
§c16
[25]&(0x1f001f<<10))>>10) | ((src16[25]&(0x1f001f<<5))<<1) | ((src16[25]&(0x1f001f<<0))<<11);

328 
d°16
[ 9] = ((
§c16
[28]&(0x1f001f<<10))>>10) | ((src16[28]&(0x1f001f<<5))<<1) | ((src16[28]&(0x1f001f<<0))<<11);

330 
d°16
 += 10;

331 
§c16
 += 32;

332 }--
uCou¡
);

334 
	}
}

	@src/gpu/gpu_drhell/gpu_draw.h

15 
Uöt16
* 
	gPixñ
;

16 
Uöt16
 
	gPixñD©a
;

17 
Uöt16
* 
	gTextuªBa£Addªss
;

18 
Uöt16
* 
	gClutBa£Addªss
;

19 
Uöt8
 
	gTextuªLoˇti⁄
[2];

20 
Uöt8
 
	gLightCﬁour
[3];

23 
	#_TBA
 
TextuªBa£Addªss


	)

24 
	#_CBA
 
ClutBa£Addªss


	)

25 
	#_TU
 
TextuªLoˇti⁄
[0]

	)

26 
	#_TV
 
TextuªLoˇti⁄
[1]

	)

27 
	#_TUM
 
TextuªWödow
[2]

	)

28 
	#_TVM
 
TextuªWödow
[3]

	)

29 
	#_LR
 
LightCﬁour
[0]

	)

30 
	#_LG
 
LightCﬁour
[1]

	)

31 
	#_LB
 
LightCﬁour
[2]

	)

37 
Uöt8
 
	gTextuªMask
[32] = {

46 
	$gpuLightög
()

48 
Söt32
 
º
, 
gg
, 
bb
;

49 
Uöt16
 
rgb
;

50 
rgb
=
PixñD©a
;

51 
bb
 = ((
rgb
 & 0x7C00Ë* 
_LB
) >> (7 + 10);

52 
gg
 = ((
rgb
 & 0x03E0Ë* 
_LG
) >> (7 + 5);

53 
º
 = ((
rgb
 & 0x001FË* 
_LR
) >> (7 + 0);

54 
bb
 -= 31;

55 
gg
 -= 31;

56 
º
 -= 31;

57 
bb
 &= (bb >> 31);

58 
gg
 &= (gg >> 31);

59 
º
 &= (rr >> 31);

60 
bb
 += 31;

61 
gg
 += 31;

62 
º
 += 31;

63 
PixñD©a
 = (
rgb
 & 0x8000Ë| (
bb
 << 10Ë| (
gg
 << 5Ë| (
º
);

64 
	}
}

71 
	$gpuBÀndög00
()

73 *
Pixñ
 = 
PixñMSB
 | (((*Pixñ & 0x7BDEË+ (
PixñD©a
 & 0x7BDE)) >> 1);

74 
	}
}

77 
	$gpuBÀndög01
()

79 
Söt32
 
º
, 
gg
, 
bb
;

80 
Uöt16
 
bk
, 
‰
;

81 
bk
 = *
Pixñ
;

82 
‰
 = 
PixñD©a
;

83 
bb
 = (
bk
 & 0x7C00Ë+ (
‰
 & 0x7C00);

84 
gg
 = (
bk
 & 0x03E0Ë+ (
‰
 & 0x03E0);

85 
º
 = (
bk
 & 0x001FË+ (
‰
 & 0x001F);

86 
bb
 -= 0x7C00;

87 
gg
 -= 0x03E0;

88 
º
 -= 0x001F;

89 
bb
 &= (bb >> 31);

90 
gg
 &= (gg >> 31);

91 
º
 &= (rr >> 31);

92 
bb
 += 0x7C00;

93 
gg
 += 0x03E0;

94 
º
 += 0x001F;

95 *
Pixñ
 = 
PixñMSB
 | 
bb
 | 
gg
 | 
º
;

96 
	}
}

99 
	$gpuBÀndög02
()

101 
Söt32
 
º
, 
gg
, 
bb
;

102 
Uöt16
 
bk
, 
‰
;

103 
bk
 = *
Pixñ
;

104 
‰
 = 
PixñD©a
;

105 
bb
 = (
bk
 & 0x7C00Ë- (
‰
 & 0x7C00);

106 
gg
 = (
bk
 & 0x03E0Ë- (
‰
 & 0x03E0);

107 
º
 = (
bk
 & 0x001FË- (
‰
 & 0x001F);

108 
bb
 &= ~(bb >> 31);

109 
gg
 &= ~(gg >> 31);

110 
º
 &= ~(rr >> 31);

111 *
Pixñ
 = 
PixñMSB
 | 
bb
 | 
gg
 | 
º
;

112 
	}
}

115 
	$gpuBÀndög03
()

117 
Söt32
 
º
, 
gg
, 
bb
;

118 
Uöt16
 
bk
, 
‰
;

119 
bk
 = *
Pixñ
;

120 
‰
 = 
PixñD©a
 >> 2;

121 
bb
 = (
bk
 & 0x7C00Ë+ (
‰
 & 0x1C00);

122 
gg
 = (
bk
 & 0x03E0Ë+ (
‰
 & 0x00E0);

123 
º
 = (
bk
 & 0x001FË+ (
‰
 & 0x0007);

124 
bb
 -= 0x7C00;

125 
gg
 -= 0x03E0;

126 
º
 -= 0x001F;

127 
bb
 &= (bb >> 31);

128 
gg
 &= (gg >> 31);

129 
º
 &= (rr >> 31);

130 
bb
 += 0x7C00;

131 
gg
 += 0x03E0;

132 
º
 += 0x001F;

133 *
Pixñ
 = 
PixñMSB
 | 
bb
 | 
gg
 | 
º
;

134 
	}
}

137 (*
	gPF
)();

138 
PF
 
	ggpuBÀndög
;

139 
PF
 
	ggpuBÀndögs
[4] = {

140 
gpuBÀndög00
, 
gpuBÀndög01
, 
gpuBÀndög02
, 
gpuBÀndög03


148 
	$gpuTextuªM≠pög00
()

150 
Uöt8
 
tu
, 
tv
;

151 
Uöt16
 
rgb
;

152 
tu
 = 
_TU
 & 
_TUM
;

153 
tv
 = 
_TV
 & 
_TVM
;

154 
rgb
 = 
_TBA
[
	`FRAME_OFFSET
(
tu
 >> 2, 
tv
)];

155 
tu
 = (tu & 3) << 2;

156 
PixñD©a
 = 
_CBA
[(
rgb
 >> 
tu
) & 15];

157 
	}
}

160 
	$gpuTextuªM≠pög01
()

162 
Uöt8
 
tu
, 
tv
;

163 
Uöt16
 
rgb
;

164 
tu
 = 
_TU
 & 
_TUM
;

165 
tv
 = 
_TV
 & 
_TVM
;

166 
rgb
 = 
_TBA
[
	`FRAME_OFFSET
(
tu
 >> 1, 
tv
)];

167 
tu
 = (tu & 1) << 3;

168 
PixñD©a
 = 
_CBA
[(
rgb
 >> 
tu
) & 255];

169 
	}
}

172 
	$gpuTextuªM≠pög02
()

174 
Uöt8
 
tu
, 
tv
;

175 
tu
 = 
_TU
 & 
_TUM
;

176 
tv
 = 
_TV
 & 
_TVM
;

177 
PixñD©a
 = 
_TBA
[
	`FRAME_OFFSET
(
tu
, 
tv
)];

178 
	}
}

181 
	$gpuTextuªM≠pög04
()

183 
Uöt8
 
tu
, 
tv
;

184 
Uöt16
 
rgb
;

186 
tu
 = 
_TU
;

187 
tv
 = 
_TV
;

188 
rgb
 = 
_TBA
[
	`FRAME_OFFSET
(
tu
 >> 2, 
tv
)];

189 
tu
 = (tu & 3) << 2;

190 
PixñD©a
 = 
_CBA
[(
rgb
 >> 
tu
) & 15 ];

191 
	}
}

194 
	$gpuTextuªM≠pög05
()

196 
Uöt8
 
tu
, 
tv
;

197 
Uöt16
 
rgb
;

198 
tu
 = 
_TU
;

199 
tv
 = 
_TV
;

200 
rgb
 = 
_TBA
[
	`FRAME_OFFSET
(
tu
 >> 1, 
tv
)];

201 
tu
 = (tu & 1) << 3;

202 
PixñD©a
 = 
_CBA
[(
rgb
 >> 
tu
) & 255];

203 
	}
}

206 
	$gpuTextuªM≠pög06
()

208 
PixñD©a
 = 
_TBA
[
	`FRAME_OFFSET
(
_TU
, 
_TV
)];

209 
	}
}

212 
PF
 
	ggpuTextuªM≠pög
;

213 
PF
 
	ggpuTextuªM≠pögs
[8] = {

214 
gpuTextuªM≠pög00
,

215 
gpuTextuªM≠pög01
,

216 
gpuTextuªM≠pög02
,

217 
gpuTextuªM≠pög00
,

218 
gpuTextuªM≠pög04
,

219 
gpuTextuªM≠pög05
,

220 
gpuTextuªM≠pög06
,

221 
gpuTextuªM≠pög00


229 
PF
 
	ggpuDrivî
;

231 
	#GPU_MASKING
(Ë{ i‡(*
Pixñ
 & 0x8000Ë; }

	)

233 
	#GPU_TEXTUREMAPPING
(Ë{ 
	`gpuTextuªM≠pög
(); i‡(!
PixñD©a
Ë; }

	)

235 
	#GPU_LIGHTING
(Ë{ 
	`gpuLightög
(); }

	)

237 
	#GPU_BLENDING
(Ë{ 
	`gpuBÀndög
(); }

	)

239 
	#GPU_BLENDING_STP
(Ë{ i‡(
PixñD©a
 & 0x8000Ë{ 
	`gpuBÀndög
(); } { *
Pixñ
 = 
PixñMSB
 | (PixñD©®& 0x7FFF); } }

	)

241 
	#GPU_NOBLENDING
(Ë{ *
Pixñ
 = 
PixñMSB
 | (
PixñD©a
 & 0x7FFF); }

	)

243 
	$gpuDrivî00
()

245 
	`GPU_LIGHTING
();

246 
	`GPU_NOBLENDING
();

247 
	}
}

248 
	$gpuDrivî01
()

250 
	`GPU_NOBLENDING
();

251 
	}
}

252 
	$gpuDrivî02
()

254 
	`GPU_LIGHTING
();

255 
	`GPU_BLENDING
();

256 
	}
}

257 
	$gpuDrivî03
()

259 
	`GPU_BLENDING
();

260 
	}
}

261 
	$gpuDrivî04
()

263 
	`GPU_TEXTUREMAPPING
();

264 
	`GPU_LIGHTING
();

265 
	`GPU_NOBLENDING
();

266 
	}
}

267 
	$gpuDrivî05
()

269 
	`GPU_TEXTUREMAPPING
();

270 
	`GPU_NOBLENDING
();

271 
	}
}

272 
	$gpuDrivî06
()

274 
	`GPU_TEXTUREMAPPING
();

275 
	`GPU_LIGHTING
();

276 
	`GPU_BLENDING_STP
();

277 
	}
}

278 
	$gpuDrivî07
()

280 
	`GPU_TEXTUREMAPPING
();

281 
	`GPU_BLENDING_STP
();

282 
	}
}

283 
	$gpuDrivî08
()

285 
	`GPU_MASKING
();

286 
	`GPU_LIGHTING
();

287 
	`GPU_NOBLENDING
();

288 
	}
}

289 
	$gpuDrivî09
()

291 
	`GPU_MASKING
();

292 
	`GPU_NOBLENDING
();

293 
	}
}

294 
	$gpuDrivî0A
()

296 
	`GPU_MASKING
();

297 
	`GPU_LIGHTING
();

298 
	`GPU_BLENDING
();

299 
	}
}

300 
	$gpuDrivî0B
()

302 
	`GPU_MASKING
();

303 
	`GPU_BLENDING
();

304 
	}
}

305 
	$gpuDrivî0C
()

307 
	`GPU_MASKING
();

308 
	`GPU_TEXTUREMAPPING
();

309 
	`GPU_LIGHTING
();

310 
	`GPU_NOBLENDING
();

311 
	}
}

312 
	$gpuDrivî0D
()

314 
	`GPU_MASKING
();

315 
	`GPU_TEXTUREMAPPING
();

316 
	`GPU_NOBLENDING
();

317 
	}
}

318 
	$gpuDrivî0E
()

320 
	`GPU_MASKING
();

321 
	`GPU_TEXTUREMAPPING
();

322 
	`GPU_LIGHTING
();

323 
	`GPU_BLENDING_STP
();

324 
	}
}

325 
	$gpuDrivî0F
()

327 
	`GPU_MASKING
();

328 
	`GPU_TEXTUREMAPPING
();

329 
	`GPU_BLENDING_STP
();

330 
	}
}

332 
PF
 
	ggpuDrivîs
[16] = {

333 
gpuDrivî00
,

334 
gpuDrivî01
,

335 
gpuDrivî02
,

336 
gpuDrivî03
,

337 
gpuDrivî04
,

338 
gpuDrivî05
,

339 
gpuDrivî06
,

340 
gpuDrivî07
,

341 
gpuDrivî08
,

342 
gpuDrivî09
,

343 
gpuDrivî0A
,

344 
gpuDrivî0B
,

345 
gpuDrivî0C
,

346 
gpuDrivî0D
,

347 
gpuDrivî0E
,

348 
gpuDrivî0F


355 
	$gpuSëTextuª
(
Uöt16
 
çage
)

357 
Söt32
 
ç
;

358 
Söt32
 
tx
, 
ty
;

359 
GPU_gp1
 = (GPU_gp1 & ~0x1FFË| (
çage
 & 0x1FF);

360 
gpuBÀndög
 = 
gpuBÀndögs
[(
çage
 >> 5) & 3];

361 
ç
 = (
çage
 >> 7) & 3;

362 
tx
 = (
çage
 & 0x0F) << 6;

363 
ty
 = (
çage
 & 0x10) << 4;

364 
tx
 +(
TextuªWödow
[0] >> (2 - 
ç
));

365 
ty
 +
TextuªWödow
[1];

366 
_TBA
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
tx
, 
ty
)];

367 
ç
 |(((
_TUM
 & 
_TVM
) >> 5) & 4);

368 
gpuTextuªM≠pög
 = 
gpuTextuªM≠pögs
[
ç
];

369 
	}
}

375 
	$gpuSëCLUT
(
Uöt16
 
˛ut
)

377 
_CBA
 = &((
Uöt16
*)
FømeBuf„r
)[(
˛ut
 & 0x7FFF) << 4];

378 
	}
}

384 
	~"gpu_¥im.h
"

391 
	$gpuLﬂdImage
()

393 
Uöt16
 
x0
, 
y0
, 
w0
, 
h0
;

394 
x0
 = 
PackëBuf„r
.
U2
[2] & 1023;

395 
y0
 = 
PackëBuf„r
.
U2
[3] & 511;

396 
w0
 = 
PackëBuf„r
.
U2
[4];

397 
h0
 = 
PackëBuf„r
.
U2
[5];

398 
FømeIndex
 = 
	`FRAME_OFFSET
(
x0
, 
y0
);

399 i‡((
y0
 + 
h0
Ë> 
FRAME_HEIGHT
) {

400 
h0
 = 
FRAME_HEIGHT
 - 
y0
;

402 
FømeToWrôe
 = 
w0
 * 
h0
;

403 
FømeCou¡
 = 
FømeWidth
 = 
w0
;

405 
wrôeDmaWidth
 = 
w0
;

406 
wrôeDmaHeight
 = 
h0
;

408 
px
 = 
x_°¨t
 = 
x0
;

409 
py
 = 
y_°¨t
 = 
y0
;

410 
x_íd
 = 
x_°¨t
 + 
w0
;

411 
y_íd
 = 
y_°¨t
 + 
h0
;

412 
pvøm
 = &((
Uöt16
*)
FømeBuf„r
)[
py
*1024];

414 
upd©eLa˚
 = 1;

415 
	}
}

418 
	$gpuSt‹eImage
()

420 
Uöt16
 
x0
, 
y0
, 
w0
, 
h0
;

421 
x0
 = 
PackëBuf„r
.
U2
[2] & 1023;

422 
y0
 = 
PackëBuf„r
.
U2
[3] & 511;

423 
w0
 = 
PackëBuf„r
.
U2
[4];

424 
h0
 = 
PackëBuf„r
.
U2
[5];

425 
FømeIndex
 = 
	`FRAME_OFFSET
(
x0
, 
y0
);

426 i‡((
y0
 + 
h0
Ë> 
FRAME_HEIGHT
) {

427 
h0
 = 
FRAME_HEIGHT
 - 
y0
;

429 
FømeToRód
 = 
w0
 * 
h0
;

430 
FømeCou¡
 = 
FømeWidth
 = 
w0
;

432 
px
 = 
x_°¨t
 = 
x0
;

433 
py
 = 
y_°¨t
 = 
y0
;

434 
x_íd
 = 
x_°¨t
 + 
w0
;

435 
y_íd
 = 
y_°¨t
 + 
h0
;

436 
pvøm
 = &((
Uöt16
*)
FømeBuf„r
)[
py
*1024];

438 
GPU_gp1
 |= 0x08000000;

439 
	}
}

442 
	$gpuMoveImage
()

444 
x0
, 
y0
, 
x1
, 
y1
, 
w0
, 
h0
;

445 *
ÕD°
, *
ÕSrc
;

446 
x0
 = 
PackëBuf„r
.
U2
[2] & 1023;

447 
y0
 = 
PackëBuf„r
.
U2
[3] & 511;

448 
x1
 = 
PackëBuf„r
.
U2
[4] & 1023;

449 
y1
 = 
PackëBuf„r
.
U2
[5] & 511;

450 
w0
 = 
PackëBuf„r
.
U2
[6];

451 
h0
 = 
PackëBuf„r
.
U2
[7];

452 i‡((
y0
 + 
h0
Ë> 
FRAME_HEIGHT
)

454 i‡((
y1
 + 
h0
Ë> 
FRAME_HEIGHT
)

456 
ÕD°
 = 
ÕSrc
 = (
Uöt16
*)
FømeBuf„r
;

457 
ÕSrc
 +
	`FRAME_OFFSET
(
x0
, 
y0
);

458 
ÕD°
 +
	`FRAME_OFFSET
(
x1
, 
y1
);

459 
x1
 = 
FRAME_WIDTH
 - 
w0
;

460 ; 
h0
; h0--) {

461 
x0
 = 
w0
; x0; x0--)

462 *
ÕD°
++ = *
ÕSrc
++;

463 
ÕD°
 +
x1
;

464 
ÕSrc
 +
x1
;

466 
upd©eLa˚
 = 1;

467 
	}
}

469 
	$gpuCÀ¨Image
()

471 
x0
, 
y0
, 
w0
, 
h0
;

472 *
pixñ
, 
rgb
;

474 
upd©eLa˚
 = 0;

477 if–
Skù
 ) ;

479 
x0
 = 
PackëBuf„r
.
S4
[0];

480 
rgb
 = 
	`GPU_RGB16
(
x0
);

481 
x0
 = 
PackëBuf„r
.
S2
[2];

482 
y0
 = 
PackëBuf„r
.
S2
[3];

483 
w0
 = 
PackëBuf„r
.
S2
[4];

484 
h0
 = 
PackëBuf„r
.
S2
[5];

486 
w0
 +
x0
;

487 i‡(
x0
 < 0)

488 
x0
 = 0;

489 i‡(
w0
 > 
FRAME_WIDTH
)

490 
w0
 = 
FRAME_WIDTH
;

491 
w0
 -
x0
;

492 i‡(
w0
 < 0)

493 
w0
 = 0;

494 
h0
 +
y0
;

495 i‡(
y0
 < 0)

496 
y0
 = 0;

497 i‡(
h0
 > 
FRAME_HEIGHT
)

498 
h0
 = 
FRAME_HEIGHT
;

499 
h0
 -
y0
;

500 i‡(
h0
 < 0)

501 
h0
 = 0;

502 
pixñ
 = (
Uöt16
*)
FømeBuf„r
 + 
	`FRAME_OFFSET
(
x0
, 
y0
);

503 
y0
 = 
FRAME_WIDTH
 - 
w0
;

504 ; 
h0
; h0--) {

505 
x0
 = 
w0
; x0; x0--)

506 *
pixñ
++ = 
rgb
;

507 
pixñ
 +
y0
;

509 
	}
}

515 
	$gpuSídPackë
()

517 
Uöt32
 
ãmp
;

519 
ãmp
 = 
PackëBuf„r
.
U4
[0];

520 
ãmp
 >> 24) {

525 
	`gpuCÀ¨Image
();

531 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 2) | 1];

532 
	`gpuDøwF3
();

538 
	`gpuSëCLUT
(
PackëBuf„r
.
U4
[2] >> 16);

539 
	`gpuSëTextuª
(
PackëBuf„r
.
U4
[4] >> 16);

540 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 7)];

541 
	`gpuDøwFT3
();

547 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 2) | 1];

548 
	`gpuDøwF3
();

549 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[4];

550 
	`gpuDøwF3
();

556 
	`gpuSëCLUT
(
PackëBuf„r
.
U4
[2] >> 16);

557 
	`gpuSëTextuª
(
PackëBuf„r
.
U4
[4] >> 16);

558 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 7)];

559 
	`gpuDøwFT3
();

560 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[7];

561 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[8];

562 
	`gpuDøwFT3
();

568 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 2)];

569 
	`gpuDøwG3
();

575 
	`gpuSëCLUT
(
PackëBuf„r
.
U4
[2] >> 16);

576 
	`gpuSëTextuª
(
PackëBuf„r
.
U4
[5] >> 16);

577 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 7)];

578 
	`gpuDøwGT3
();

584 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 2)];

585 
	`gpuDøwG3
();

586 
PackëBuf„r
.
U4
[0] = PacketBuffer.U4[6];

587 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[7];

588 
	`gpuDøwG3
();

594 
	`gpuSëCLUT
(
PackëBuf„r
.
U4
[2] >> 16);

595 
	`gpuSëTextuª
(
PackëBuf„r
.
U4
[5] >> 16);

596 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 7)];

597 
	`gpuDøwGT3
();

598 
PackëBuf„r
.
U4
[0] = PacketBuffer.U4[9];

599 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[10];

600 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[11];

601 
	`gpuDøwGT3
();

607 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 2) | 1];

608 
	`gpuDøwLF
();

618 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 2) | 1];

619 
	`gpuDøwLF
();

620 i‡((
PackëBuf„r
.
U4
[3] & 0xF000F000) != 0x50005000) {

621 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[2];

622 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[3];

623 
PackëCou¡
 = 1;

624 
PackëIndex
 = 3;

631 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 2)];

632 
	`gpuDøwGF
();

642 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 2)];

643 
	`gpuDøwGF
();

644 i‡((
PackëBuf„r
.
U4
[4] & 0xF000F000) != 0x50005000) {

645 
PackëBuf„r
.
U1
[3 + (2 * 4)] =

646 
PackëBuf„r
.
U1
[3 + (0 * 4)];

647 
PackëBuf„r
.
U4
[0] = PacketBuffer.U4[2];

648 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[3];

649 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[4];

650 
PackëCou¡
 = 2;

651 
PackëIndex
 = 3;

659 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 2) | 1];

660 
	`gpuDøwT
();

666 
	`gpuSëCLUT
(
PackëBuf„r
.
U4
[2] >> 16);

667 
	`gpuSëTextuª
(
GPU_gp1
);

668 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 7)];

669 
	`gpuDøwS
();

675 
PackëBuf„r
.
U4
[2] = 0x00010001;

676 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 2) | 1];

677 
	`gpuDøwT
();

683 
PackëBuf„r
.
U4
[3] = 0x00010001;

684 
	`gpuSëCLUT
(
PackëBuf„r
.
U4
[2] >> 16);

685 
	`gpuSëTextuª
(
GPU_gp1
);

686 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 7)];

687 
	`gpuDøwS
();

693 
PackëBuf„r
.
U4
[2] = 0x00080008;

694 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 2) | 1];

695 
	`gpuDøwT
();

701 
PackëBuf„r
.
U4
[3] = 0x00080008;

702 
	`gpuSëCLUT
(
PackëBuf„r
.
U4
[2] >> 16);

703 
	`gpuSëTextuª
(
GPU_gp1
);

704 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 7)];

705 
	`gpuDøwS
();

711 
PackëBuf„r
.
U4
[2] = 0x00100010;

712 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 2) | 1];

713 
	`gpuDøwT
();

719 
PackëBuf„r
.
U4
[3] = 0x00100010;

720 
	`gpuSëCLUT
(
PackëBuf„r
.
U4
[2] >> 16);

721 
	`gpuSëTextuª
(
GPU_gp1
);

722 
gpuDrivî
 = 
gpuDrivîs
[
Maskög
 | ((
ãmp
 >> 24) & 7)];

723 
	`gpuDøwS
();

726 
	`gpuMoveImage
();

729 
	`gpuLﬂdImage
();

732 
	`gpuSt‹eImage
();

735 
GPU_gp1
 = (GPU_gp1 & ~0x000007FFË| (
ãmp
 & 0x000007FF);

736 
	`gpuSëTextuª
(
ãmp
);

739 
TextuªWödow
[0] = ((
ãmp
 >> 10) & 0x1F) << 3;

740 
TextuªWödow
[1] = ((
ãmp
 >> 15) & 0x1F) << 3;

741 
TextuªWödow
[2] = 
TextuªMask
[(
ãmp
 >> 0) & 0x1F];

742 
TextuªWödow
[3] = 
TextuªMask
[(
ãmp
 >> 5) & 0x1F];

743 
TextuªWödow
[0] &= ~TextureWindow[2];

744 
TextuªWödow
[1] &= ~TextureWindow[3];

745 
	`gpuSëTextuª
(
GPU_gp1
);

748 
DøwögAªa
[0] = 
ãmp
 & 0x3FF;

749 
DøwögAªa
[1] = (
ãmp
 >> 10) & 0x3FF;

752 
DøwögAªa
[2] = (
ãmp
 & 0x3FF) + 1;

753 
DøwögAªa
[3] = ((
ãmp
 >> 10) & 0x3FF) + 1;

756 
DøwögOff£t
[0] = ((
Söt32
)
ãmp
<<(32-11))>>(32-11);

757 
DøwögOff£t
[1] = ((
Söt32
)
ãmp
<<(32-22))>>(32-11);

760 
ãmp
 &= 3;

761 
GPU_gp1
 = (GPU_gp1 & ~0x00001800Ë| (
ãmp
 << 11);

762 
Maskög
 = (
ãmp
 << 2) & 0x8;

763 
PixñMSB
 = 
ãmp
 << 15;

766 
	}
}

	@src/gpu/gpu_drhell/gpu_prim.h

15 
	#GPU_DIGITS
 10

	)

21 
	#GPU_SWAP
(
x
,
y
,
z
Ë{(z)=(x);(x)=(y);(y)=(z);}

	)

23 
	#GPU_TESTRANGE
(
x
Ë{ i‡((
Uöt32
)((xË+ 1024Ë> (Uöt32)2047Ë; }

	)

25 
INLINE
 
Söt32
 
	$GPU_DIV
(
Söt32
 
‹s
, Söt32 
‹t
)

27 if(
‹t
Ë (
‹s
 / ort);

29 
	}
}

35 
	$gpuDøwF3
()

37 
Söt32
 
ãmp
, 
lo›0
, 
lo›1
, 
lo›2
;

38 
Söt32
 
xa
, 
xb
, 
xmö
, 
xmax
;

39 
Söt32
 
ya
, 
yb
, 
ymö
, 
ymax
;

40 
Söt32
 
x0
, 
x1
, 
x2
, 
x3
, 
dx3
, 
x4
, 
dx4
, 
dx
;

41 
Söt32
 
y0
, 
y1
, 
y2
;

43 i‡–
Skù
 )

46 
upd©eLa˚
 = 1;

48 
x0
 = 
PackëBuf„r
.
S2
[2];

49 
	`GPU_TESTRANGE
(
x0
);

50 
x1
 = 
PackëBuf„r
.
S2
[4];

51 
	`GPU_TESTRANGE
(
x1
);

52 
x2
 = 
PackëBuf„r
.
S2
[6];

53 
	`GPU_TESTRANGE
(
x2
);

54 
y0
 = 
PackëBuf„r
.
S2
[3];

55 
	`GPU_TESTRANGE
(
y0
);

56 
y1
 = 
PackëBuf„r
.
S2
[5];

57 
	`GPU_TESTRANGE
(
y1
);

58 
y2
 = 
PackëBuf„r
.
S2
[7];

59 
	`GPU_TESTRANGE
(
x2
);

60 
xmö
 = 
DøwögAªa
[0];

61 
xmax
 = 
DøwögAªa
[2];

62 
ymö
 = 
DøwögAªa
[1];

63 
ymax
 = 
DøwögAªa
[3];

64 
ãmp
 = 
PackëBuf„r
.
U4
[0];

65 
PixñD©a
 = 
	`GPU_RGB16
(
ãmp
);

66 
ãmp
 = 
DøwögOff£t
[0];

67 
x0
 +
ãmp
;

68 
x1
 +
ãmp
;

69 
x2
 +
ãmp
;

70 
ãmp
 = 
DøwögOff£t
[1];

71 
y0
 +
ãmp
;

72 
y1
 +
ãmp
;

73 
y2
 +
ãmp
;

74 i‡(
y0
 > 
y1
) {

75 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

76 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

78 i‡(
y1
 > 
y2
) {

79 
	`GPU_SWAP
(
x1
, 
x2
, 
ãmp
);

80 
	`GPU_SWAP
(
y1
, 
y2
, 
ãmp
);

82 i‡(
y0
 > 
y1
) {

83 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

84 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

86 
ya
 = 
y2
 - 
y0
;

87 
yb
 = 
y2
 - 
y1
;

88 
dx
 = (
x2
 - 
x1
Ë* 
ya
 - (x2 - 
x0
Ë* 
yb
;

89 
lo›0
 = 2;Üoop0;Üoop0--) {

90 i‡(
lo›0
 == 2) {

91 
ya
 = 
y0
;

92 
yb
 = 
y1
;

93 
x3
 = 
x4
 = 
x0
 << 
GPU_DIGITS
;

94 i‡(
dx
 < 0) {

95 
ãmp
 = 
y2
 - 
y0
;

96 
dx3
 = 
	`GPU_DIV
((
x2
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

97 
ãmp
 = 
y1
 - 
y0
;

98 
dx4
 = 
	`GPU_DIV
((
x1
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

100 
ãmp
 = 
y1
 - 
y0
;

101 
dx3
 = 
	`GPU_DIV
((
x1
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

102 
ãmp
 = 
y2
 - 
y0
;

103 
dx4
 = 
	`GPU_DIV
((
x2
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

106 
ya
 = 
y1
;

107 
yb
 = 
y2
;

108 i‡(
dx
 < 0) {

109 
ãmp
 = 
y1
 - 
y0
;

110 
x3
 = (
x0
 << 
GPU_DIGITS
Ë+ (
dx3
 * 
ãmp
);

111 
x4
 = 
x1
 << 
GPU_DIGITS
;

112 
ãmp
 = 
y2
 - 
y1
;

113 
dx4
 = 
	`GPU_DIV
((
x2
 - 
x1
Ë<< 
GPU_DIGITS
, 
ãmp
);

115 
x3
 = 
x1
 << 
GPU_DIGITS
;

116 
ãmp
 = 
y1
 - 
y0
;

117 
x4
 = (
x0
 << 
GPU_DIGITS
Ë+ (
dx4
 * 
ãmp
);

118 
ãmp
 = 
y2
 - 
y1
;

119 
dx3
 = 
	`GPU_DIV
((
x2
 - 
x1
Ë<< 
GPU_DIGITS
, 
ãmp
);

122 
ãmp
 = 
ymö
 - 
ya
;

123 i‡(
ãmp
 > 0) {

124 
ya
 = 
ymö
;

125 
x3
 +(
dx3
 * 
ãmp
);

126 
x4
 +(
dx4
 * 
ãmp
);

128 i‡(
yb
 > 
ymax
)

129 
yb
 = 
ymax
;

130 
lo›1
 = 
yb
 - 
ya
;

131 i‡(
lo›1
 < 0)

132 
lo›1
 = 0;

133 ; 
lo›1
;Üoop1--) {

134 
xa
 = (
x3
 + ((1 << 
GPU_DIGITS
) - 1)) >> GPU_DIGITS;

135 
xb
 = (
x4
 + ((1 << 
GPU_DIGITS
) - 1)) >> GPU_DIGITS;

136 
ãmp
 = 
xmö
 - 
xa
;

137 i‡(
ãmp
 > 0)

138 
xa
 = 
xmö
;

139 i‡(
xb
 > 
xmax
)

140 
xb
 = 
xmax
;

141 
lo›2
 = 
xb
 - 
xa
;

142 i‡(
lo›2
 < 0)

143 
lo›2
 = 0;

145 
Pixñ
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
xa
, 
ya
)];

146 
ya
++;

147 ; 
lo›2
;Üoop2--) {

148 
	`gpuDrivî
();

149 
Pixñ
++;

151 
x3
 +
dx3
;

152 
x4
 +
dx4
;

155 
	}
}

161 
	$gpuDøwFT3
()

163 
Söt32
 
ãmp
, 
lo›0
, 
lo›1
, 
lo›2
;

164 
Söt32
 
xa
, 
xb
, 
xmö
, 
xmax
;

165 
Söt32
 
ya
, 
yb
, 
ymö
, 
ymax
;

166 
Söt32
 
x0
, 
x1
, 
x2
, 
x3
, 
dx3
, 
x4
, 
dx4
, 
dx
;

167 
Söt32
 
y0
, 
y1
, 
y2
;

168 
Söt32
 
u0
, 
u1
, 
u2
, 
u3
, 
du3
, 
u4
, 
du4
;

169 
Söt32
 
v0
, 
v1
, 
v2
, 
v3
, 
dv3
, 
v4
, 
dv4
;

171 i‡–
Skù
 )

174 
upd©eLa˚
 = 1;

176 
x0
 = 
PackëBuf„r
.
S2
[2];

177 
	`GPU_TESTRANGE
(
x0
);

178 
x1
 = 
PackëBuf„r
.
S2
[6];

179 
	`GPU_TESTRANGE
(
x1
);

180 
x2
 = 
PackëBuf„r
.
S2
[10];

181 
	`GPU_TESTRANGE
(
x2
);

182 
y0
 = 
PackëBuf„r
.
S2
[3];

183 
	`GPU_TESTRANGE
(
y0
);

184 
y1
 = 
PackëBuf„r
.
S2
[7];

185 
	`GPU_TESTRANGE
(
y1
);

186 
y2
 = 
PackëBuf„r
.
S2
[11];

187 
	`GPU_TESTRANGE
(
y2
);

188 
u0
 = 
PackëBuf„r
.
U1
[8];

189 
u1
 = 
PackëBuf„r
.
U1
[16];

190 
u2
 = 
PackëBuf„r
.
U1
[24];

191 
v0
 = 
PackëBuf„r
.
U1
[9];

192 
v1
 = 
PackëBuf„r
.
U1
[17];

193 
v2
 = 
PackëBuf„r
.
U1
[25];

194 
xmö
 = 
DøwögAªa
[0];

195 
xmax
 = 
DøwögAªa
[2];

196 
ymö
 = 
DøwögAªa
[1];

197 
ymax
 = 
DøwögAªa
[3];

198 
_LR
 = 
PackëBuf„r
.
U1
[0];

199 
_LG
 = 
PackëBuf„r
.
U1
[1];

200 
_LB
 = 
PackëBuf„r
.
U1
[2];

201 
ãmp
 = 
DøwögOff£t
[0];

202 
x0
 +
ãmp
;

203 
x1
 +
ãmp
;

204 
x2
 +
ãmp
;

205 
ãmp
 = 
DøwögOff£t
[1];

206 
y0
 +
ãmp
;

207 
y1
 +
ãmp
;

208 
y2
 +
ãmp
;

209 i‡(
y0
 > 
y1
) {

210 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

211 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

212 
	`GPU_SWAP
(
u0
, 
u1
, 
ãmp
);

213 
	`GPU_SWAP
(
v0
, 
v1
, 
ãmp
);

215 i‡(
y1
 > 
y2
) {

216 
	`GPU_SWAP
(
x1
, 
x2
, 
ãmp
);

217 
	`GPU_SWAP
(
y1
, 
y2
, 
ãmp
);

218 
	`GPU_SWAP
(
u1
, 
u2
, 
ãmp
);

219 
	`GPU_SWAP
(
v1
, 
v2
, 
ãmp
);

221 i‡(
y0
 > 
y1
) {

222 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

223 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

224 
	`GPU_SWAP
(
u0
, 
u1
, 
ãmp
);

225 
	`GPU_SWAP
(
v0
, 
v1
, 
ãmp
);

227 
ya
 = 
y2
 - 
y0
;

228 
yb
 = 
y2
 - 
y1
;

229 
dx4
 = (
x2
 - 
x1
Ë* 
ya
 - (x2 - 
x0
Ë* 
yb
;

230 
du4
 = (
u2
 - 
u1
Ë* 
ya
 - (u2 - 
u0
Ë* 
yb
;

231 
dv4
 = (
v2
 - 
v1
Ë* 
ya
 - (v2 - 
v0
Ë* 
yb
;

232 
dx
 = 
dx4
;

233 i‡(
dx4
 < 0) {

234 
dx4
 = -dx4;

235 
du4
 = -du4;

236 
dv4
 = -dv4;

238 
du4
 = 
	`GPU_DIV
(du4 << 
GPU_DIGITS
, 
dx4
);

239 
dv4
 = 
	`GPU_DIV
(dv4 << 
GPU_DIGITS
, 
dx4
);

240 
lo›0
 = 2;Üoop0;Üoop0--) {

241 i‡(
lo›0
 == 2) {

242 
ya
 = 
y0
;

243 
yb
 = 
y1
;

244 
x3
 = 
x4
 = 
x0
 << 
GPU_DIGITS
;

245 
u3
 = 
u0
 << 
GPU_DIGITS
;

246 
v3
 = 
v0
 << 
GPU_DIGITS
;

247 i‡(
dx
 < 0) {

248 
ãmp
 = 
y2
 - 
y0
;

249 
dx3
 = 
	`GPU_DIV
((
x2
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

250 
du3
 = 
	`GPU_DIV
((
u2
 - 
u0
Ë<< 
GPU_DIGITS
, 
ãmp
);

251 
dv3
 = 
	`GPU_DIV
((
v2
 - 
v0
Ë<< 
GPU_DIGITS
, 
ãmp
);

252 
ãmp
 = 
y1
 - 
y0
;

253 
dx4
 = 
	`GPU_DIV
((
x1
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

255 
ãmp
 = 
y1
 - 
y0
;

256 
dx3
 = 
	`GPU_DIV
((
x1
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

257 
du3
 = 
	`GPU_DIV
((
u1
 - 
u0
Ë<< 
GPU_DIGITS
, 
ãmp
);

258 
dv3
 = 
	`GPU_DIV
((
v1
 - 
v0
Ë<< 
GPU_DIGITS
, 
ãmp
);

259 
ãmp
 = 
y2
 - 
y0
;

260 
dx4
 = 
	`GPU_DIV
((
x2
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

263 
ya
 = 
y1
;

264 
yb
 = 
y2
;

265 i‡(
dx
 < 0) {

266 
ãmp
 = 
y1
 - 
y0
;

267 
x3
 = (
x0
 << 
GPU_DIGITS
Ë+ (
dx3
 * 
ãmp
);

268 
u3
 = (
u0
 << 
GPU_DIGITS
Ë+ (
du3
 * 
ãmp
);

269 
v3
 = (
v0
 << 
GPU_DIGITS
Ë+ (
dv3
 * 
ãmp
);

270 
x4
 = 
x1
 << 
GPU_DIGITS
;

271 
ãmp
 = 
y2
 - 
y1
;

272 
dx4
 = 
	`GPU_DIV
((
x2
 - 
x1
Ë<< 
GPU_DIGITS
, 
ãmp
);

274 
x3
 = 
x1
 << 
GPU_DIGITS
;

275 
u3
 = 
u1
 << 
GPU_DIGITS
;

276 
v3
 = 
v1
 << 
GPU_DIGITS
;

277 
ãmp
 = 
y1
 - 
y0
;

278 
x4
 = (
x0
 << 
GPU_DIGITS
Ë+ (
dx4
 * 
ãmp
);

279 
ãmp
 = 
y2
 - 
y1
;

280 
dx3
 = 
	`GPU_DIV
((
x2
 - 
x1
Ë<< 
GPU_DIGITS
, 
ãmp
);

281 
du3
 = 
	`GPU_DIV
((
u2
 - 
u1
Ë<< 
GPU_DIGITS
, 
ãmp
);

282 
dv3
 = 
	`GPU_DIV
((
v2
 - 
v1
Ë<< 
GPU_DIGITS
, 
ãmp
);

285 
ãmp
 = 
ymö
 - 
ya
;

286 i‡(
ãmp
 > 0) {

287 
ya
 = 
ymö
;

288 
x3
 +(
dx3
 * 
ãmp
);

289 
x4
 +(
dx4
 * 
ãmp
);

290 
u3
 +(
du3
 * 
ãmp
);

291 
v3
 +(
dv3
 * 
ãmp
);

293 i‡(
yb
 > 
ymax
)

294 
yb
 = 
ymax
;

295 
lo›1
 = 
yb
 - 
ya
;

296 i‡(
lo›1
 < 0)

297 
lo›1
 = 0;

298 ; 
lo›1
;Üoop1--) {

299 
u4
 = 
u3
;

300 
v4
 = 
v3
;

301 
xa
 = (
x3
 + ((1 << 
GPU_DIGITS
) - 1)) >> GPU_DIGITS;

302 
xb
 = (
x4
 + ((1 << 
GPU_DIGITS
) - 1)) >> GPU_DIGITS;

303 
ãmp
 = (
xa
 << 
GPU_DIGITS
Ë- 
x3
;

304 
u4
 +((
ãmp
 * 
du4
Ë>> 
GPU_DIGITS
);

305 
v4
 +((
ãmp
 * 
dv4
Ë>> 
GPU_DIGITS
);

306 
u4
 +(1 << (
GPU_DIGITS
 - 1));

307 
v4
 +(1 << (
GPU_DIGITS
 - 1));

308 
ãmp
 = 
xmö
 - 
xa
;

309 i‡(
ãmp
 > 0) {

310 
xa
 = 
xmö
;

311 
u4
 +(
du4
 * 
ãmp
);

312 
v4
 +(
dv4
 * 
ãmp
);

314 i‡(
xb
 > 
xmax
)

315 
xb
 = 
xmax
;

316 
lo›2
 = 
xb
 - 
xa
;

317 i‡(
lo›2
 < 0)

318 
lo›2
 = 0;

320 
Pixñ
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
xa
, 
ya
)];

321 
ya
++;

322 ; 
lo›2
;Üoop2--) {

323 
_TU
 = 
u4
 >> 
GPU_DIGITS
;

324 
_TV
 = 
v4
 >> 
GPU_DIGITS
;

325 
	`gpuDrivî
();

326 
Pixñ
++;

327 
u4
 +
du4
;

328 
v4
 +
dv4
;

330 
x3
 +
dx3
;

331 
x4
 +
dx4
;

332 
u3
 +
du3
;

333 
v3
 +
dv3
;

336 
	}
}

342 
	$gpuDøwG3
()

344 
Söt32
 
ãmp
, 
lo›0
, 
lo›1
, 
lo›2
;

345 
Söt32
 
xa
, 
xb
, 
xmö
, 
xmax
;

346 
Söt32
 
ya
, 
yb
, 
ymö
, 
ymax
;

347 
Söt32
 
x0
, 
x1
, 
x2
, 
x3
, 
dx3
, 
x4
, 
dx4
, 
dx
;

348 
Söt32
 
y0
, 
y1
, 
y2
;

349 
Söt32
 
r0
, 
r1
, 
r2
, 
r3
, 
dr3
, 
r4
, 
dr4
;

350 
Söt32
 
g0
, 
g1
, 
g2
, 
g3
, 
dg3
, 
g4
, 
dg4
;

351 
Söt32
 
b0
, 
b1
, 
b2
, 
b3
, 
db3
, 
b4
, 
db4
;

353 i‡–
Skù
 )

356 
upd©eLa˚
 = 1;

358 
x0
 = 
PackëBuf„r
.
S2
[2];

359 
	`GPU_TESTRANGE
(
x0
);

360 
x1
 = 
PackëBuf„r
.
S2
[6];

361 
	`GPU_TESTRANGE
(
x1
);

362 
x2
 = 
PackëBuf„r
.
S2
[10];

363 
	`GPU_TESTRANGE
(
x2
);

364 
y0
 = 
PackëBuf„r
.
S2
[3];

365 
	`GPU_TESTRANGE
(
y0
);

366 
y1
 = 
PackëBuf„r
.
S2
[7];

367 
	`GPU_TESTRANGE
(
y1
);

368 
y2
 = 
PackëBuf„r
.
S2
[11];

369 
	`GPU_TESTRANGE
(
y2
);

370 
r0
 = 
PackëBuf„r
.
U1
[0];

371 
r1
 = 
PackëBuf„r
.
U1
[8];

372 
r2
 = 
PackëBuf„r
.
U1
[16];

373 
g0
 = 
PackëBuf„r
.
U1
[1];

374 
g1
 = 
PackëBuf„r
.
U1
[9];

375 
g2
 = 
PackëBuf„r
.
U1
[17];

376 
b0
 = 
PackëBuf„r
.
U1
[2];

377 
b1
 = 
PackëBuf„r
.
U1
[10];

378 
b2
 = 
PackëBuf„r
.
U1
[18];

379 
xmö
 = 
DøwögAªa
[0];

380 
xmax
 = 
DøwögAªa
[2];

381 
ymö
 = 
DøwögAªa
[1];

382 
ymax
 = 
DøwögAªa
[3];

383 
ãmp
 = 
DøwögOff£t
[0];

384 
x0
 +
ãmp
;

385 
x1
 +
ãmp
;

386 
x2
 +
ãmp
;

387 
ãmp
 = 
DøwögOff£t
[1];

388 
y0
 +
ãmp
;

389 
y1
 +
ãmp
;

390 
y2
 +
ãmp
;

391 i‡(
y0
 > 
y1
) {

392 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

393 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

394 
	`GPU_SWAP
(
r0
, 
r1
, 
ãmp
);

395 
	`GPU_SWAP
(
g0
, 
g1
, 
ãmp
);

396 
	`GPU_SWAP
(
b0
, 
b1
, 
ãmp
);

398 i‡(
y1
 > 
y2
) {

399 
	`GPU_SWAP
(
x1
, 
x2
, 
ãmp
);

400 
	`GPU_SWAP
(
y1
, 
y2
, 
ãmp
);

401 
	`GPU_SWAP
(
r1
, 
r2
, 
ãmp
);

402 
	`GPU_SWAP
(
g1
, 
g2
, 
ãmp
);

403 
	`GPU_SWAP
(
b1
, 
b2
, 
ãmp
);

405 i‡(
y0
 > 
y1
) {

406 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

407 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

408 
	`GPU_SWAP
(
r0
, 
r1
, 
ãmp
);

409 
	`GPU_SWAP
(
g0
, 
g1
, 
ãmp
);

410 
	`GPU_SWAP
(
b0
, 
b1
, 
ãmp
);

412 
ya
 = 
y2
 - 
y0
;

413 
yb
 = 
y2
 - 
y1
;

414 
dx4
 = (
x2
 - 
x1
Ë* 
ya
 - (x2 - 
x0
Ë* 
yb
;

415 
dr4
 = (
r2
 - 
r1
Ë* 
ya
 - (r2 - 
r0
Ë* 
yb
;

416 
dg4
 = (
g2
 - 
g1
Ë* 
ya
 - (g2 - 
g0
Ë* 
yb
;

417 
db4
 = (
b2
 - 
b1
Ë* 
ya
 - (b2 - 
b0
Ë* 
yb
;

418 
dx
 = 
dx4
;

419 i‡(
dx4
 < 0) {

420 
dx4
 = -dx4;

421 
dr4
 = -dr4;

422 
dg4
 = -dg4;

423 
db4
 = -db4;

425 
dr4
 = 
	`GPU_DIV
(dr4 << 
GPU_DIGITS
, 
dx4
);

426 
dg4
 = 
	`GPU_DIV
(dg4 << 
GPU_DIGITS
, 
dx4
);

427 
db4
 = 
	`GPU_DIV
(db4 << 
GPU_DIGITS
, 
dx4
);

428 
lo›0
 = 2;Üoop0;Üoop0--) {

429 i‡(
lo›0
 == 2) {

430 
ya
 = 
y0
;

431 
yb
 = 
y1
;

432 
x3
 = 
x4
 = 
x0
 << 
GPU_DIGITS
;

433 
r3
 = 
r0
 << 
GPU_DIGITS
;

434 
g3
 = 
g0
 << 
GPU_DIGITS
;

435 
b3
 = 
b0
 << 
GPU_DIGITS
;

436 i‡(
dx
 < 0) {

437 
ãmp
 = 
y2
 - 
y0
;

438 
dx3
 = 
	`GPU_DIV
((
x2
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

439 
dr3
 = 
	`GPU_DIV
((
r2
 - 
r0
Ë<< 
GPU_DIGITS
, 
ãmp
);

440 
dg3
 = 
	`GPU_DIV
((
g2
 - 
g0
Ë<< 
GPU_DIGITS
, 
ãmp
);

441 
db3
 = 
	`GPU_DIV
((
b2
 - 
b0
Ë<< 
GPU_DIGITS
, 
ãmp
);

442 
ãmp
 = 
y1
 - 
y0
;

443 
dx4
 = 
	`GPU_DIV
((
x1
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

445 
ãmp
 = 
y1
 - 
y0
;

446 
dx3
 = 
	`GPU_DIV
((
x1
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

447 
dr3
 = 
	`GPU_DIV
((
r1
 - 
r0
Ë<< 
GPU_DIGITS
, 
ãmp
);

448 
dg3
 = 
	`GPU_DIV
((
g1
 - 
g0
Ë<< 
GPU_DIGITS
, 
ãmp
);

449 
db3
 = 
	`GPU_DIV
((
b1
 - 
b0
Ë<< 
GPU_DIGITS
, 
ãmp
);

450 
ãmp
 = 
y2
 - 
y0
;

451 
dx4
 = 
	`GPU_DIV
((
x2
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

454 
ya
 = 
y1
;

455 
yb
 = 
y2
;

456 i‡(
dx
 < 0) {

457 
ãmp
 = 
y1
 - 
y0
;

458 
x3
 = (
x0
 << 
GPU_DIGITS
Ë+ (
dx3
 * 
ãmp
);

459 
r3
 = (
r0
 << 
GPU_DIGITS
Ë+ (
dr3
 * 
ãmp
);

460 
g3
 = (
g0
 << 
GPU_DIGITS
Ë+ (
dg3
 * 
ãmp
);

461 
b3
 = (
b0
 << 
GPU_DIGITS
Ë+ (
db3
 * 
ãmp
);

462 
x4
 = 
x1
 << 
GPU_DIGITS
;

463 
ãmp
 = 
y2
 - 
y1
;

464 
dx4
 = 
	`GPU_DIV
((
x2
 - 
x1
Ë<< 
GPU_DIGITS
, 
ãmp
);

466 
x3
 = 
x1
 << 
GPU_DIGITS
;

467 
r3
 = 
r1
 << 
GPU_DIGITS
;

468 
g3
 = 
g1
 << 
GPU_DIGITS
;

469 
b3
 = 
b1
 << 
GPU_DIGITS
;

470 
ãmp
 = 
y1
 - 
y0
;

471 
x4
 = (
x0
 << 
GPU_DIGITS
Ë+ (
dx4
 * 
ãmp
);

472 
ãmp
 = 
y2
 - 
y1
;

473 
dx3
 = 
	`GPU_DIV
((
x2
 - 
x1
Ë<< 
GPU_DIGITS
, 
ãmp
);

474 
dr3
 = 
	`GPU_DIV
((
r2
 - 
r1
Ë<< 
GPU_DIGITS
, 
ãmp
);

475 
dg3
 = 
	`GPU_DIV
((
g2
 - 
g1
Ë<< 
GPU_DIGITS
, 
ãmp
);

476 
db3
 = 
	`GPU_DIV
((
b2
 - 
b1
Ë<< 
GPU_DIGITS
, 
ãmp
);

479 
ãmp
 = 
ymö
 - 
ya
;

480 i‡(
ãmp
 > 0) {

481 
ya
 = 
ymö
;

482 
x3
 +(
dx3
 * 
ãmp
);

483 
x4
 +(
dx4
 * 
ãmp
);

484 
r3
 +(
dr3
 * 
ãmp
);

485 
g3
 +(
dg3
 * 
ãmp
);

486 
b3
 +(
db3
 * 
ãmp
);

488 i‡(
yb
 > 
ymax
)

489 
yb
 = 
ymax
;

490 
lo›1
 = 
yb
 - 
ya
;

491 i‡(
lo›1
 < 0)

492 
lo›1
 = 0;

493 ; 
lo›1
;Üoop1--) {

494 
r4
 = 
r3
;

495 
g4
 = 
g3
;

496 
b4
 = 
b3
;

497 
xa
 = (
x3
 + ((1 << 
GPU_DIGITS
) - 1)) >> GPU_DIGITS;

498 
xb
 = (
x4
 + ((1 << 
GPU_DIGITS
) - 1)) >> GPU_DIGITS;

499 
ãmp
 = (
xa
 << 
GPU_DIGITS
Ë- 
x3
;

500 
r4
 +((
ãmp
 * 
dr4
Ë>> 
GPU_DIGITS
);

501 
g4
 +((
ãmp
 * 
dg4
Ë>> 
GPU_DIGITS
);

502 
b4
 +((
ãmp
 * 
db4
Ë>> 
GPU_DIGITS
);

503 
r4
 +(1 << (
GPU_DIGITS
 - 1));

504 
g4
 +(1 << (
GPU_DIGITS
 - 1));

505 
b4
 +(1 << (
GPU_DIGITS
 - 1));

506 
ãmp
 = 
xmö
 - 
xa
;

507 i‡(
ãmp
 > 0) {

508 
xa
 = 
xmö
;

509 
r4
 +(
dr4
 * 
ãmp
);

510 
g4
 +(
dg4
 * 
ãmp
);

511 
b4
 +(
db4
 * 
ãmp
);

513 i‡(
xb
 > 
xmax
)

514 
xb
 = 
xmax
;

515 
lo›2
 = 
xb
 - 
xa
;

516 i‡(
lo›2
 < 0)

517 
lo›2
 = 0;

519 
Pixñ
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
xa
, 
ya
)];

520 
ya
++;

521 ; 
lo›2
;Üoop2--) {

522 
PixñD©a
 = (0xF << 10) | (0xF << 5) | 0xF;

523 
_LR
 = 
r4
 >> 
GPU_DIGITS
;

524 
_LG
 = 
g4
 >> 
GPU_DIGITS
;

525 
_LB
 = 
b4
 >> 
GPU_DIGITS
;

526 
	`gpuDrivî
();

527 
Pixñ
++;

528 
r4
 +
dr4
;

529 
g4
 +
dg4
;

530 
b4
 +
db4
;

532 
x3
 +
dx3
;

533 
x4
 +
dx4
;

534 
r3
 +
dr3
;

535 
g3
 +
dg3
;

536 
b3
 +
db3
;

539 
	}
}

545 
	$gpuDøwGT3
()

547 
Söt32
 
ãmp
, 
lo›0
, 
lo›1
, 
lo›2
;

548 
Söt32
 
xa
, 
xb
, 
xmö
, 
xmax
;

549 
Söt32
 
ya
, 
yb
, 
ymö
, 
ymax
;

550 
Söt32
 
x0
, 
x1
, 
x2
, 
x3
, 
dx3
, 
x4
, 
dx4
, 
dx
;

551 
Söt32
 
y0
, 
y1
, 
y2
;

552 
Söt32
 
u0
, 
u1
, 
u2
, 
u3
, 
du3
, 
u4
, 
du4
;

553 
Söt32
 
v0
, 
v1
, 
v2
, 
v3
, 
dv3
, 
v4
, 
dv4
;

554 
Söt32
 
r0
, 
r1
, 
r2
, 
r3
, 
dr3
, 
r4
, 
dr4
;

555 
Söt32
 
g0
, 
g1
, 
g2
, 
g3
, 
dg3
, 
g4
, 
dg4
;

556 
Söt32
 
b0
, 
b1
, 
b2
, 
b3
, 
db3
, 
b4
, 
db4
;

558 i‡–
Skù
 )

561 
upd©eLa˚
 = 1;

563 
x0
 = 
PackëBuf„r
.
S2
[2];

564 
	`GPU_TESTRANGE
(
x0
);

565 
x1
 = 
PackëBuf„r
.
S2
[8];

566 
	`GPU_TESTRANGE
(
x1
);

567 
x2
 = 
PackëBuf„r
.
S2
[14];

568 
	`GPU_TESTRANGE
(
x2
);

569 
y0
 = 
PackëBuf„r
.
S2
[3];

570 
	`GPU_TESTRANGE
(
y0
);

571 
y1
 = 
PackëBuf„r
.
S2
[9];

572 
	`GPU_TESTRANGE
(
y1
);

573 
y2
 = 
PackëBuf„r
.
S2
[15];

574 
	`GPU_TESTRANGE
(
y2
);

575 
u0
 = 
PackëBuf„r
.
U1
[8];

576 
u1
 = 
PackëBuf„r
.
U1
[20];

577 
u2
 = 
PackëBuf„r
.
U1
[32];

578 
v0
 = 
PackëBuf„r
.
U1
[9];

579 
v1
 = 
PackëBuf„r
.
U1
[21];

580 
v2
 = 
PackëBuf„r
.
U1
[33];

581 
r0
 = 
PackëBuf„r
.
U1
[0];

582 
r1
 = 
PackëBuf„r
.
U1
[12];

583 
r2
 = 
PackëBuf„r
.
U1
[24];

584 
g0
 = 
PackëBuf„r
.
U1
[1];

585 
g1
 = 
PackëBuf„r
.
U1
[13];

586 
g2
 = 
PackëBuf„r
.
U1
[25];

587 
b0
 = 
PackëBuf„r
.
U1
[2];

588 
b1
 = 
PackëBuf„r
.
U1
[14];

589 
b2
 = 
PackëBuf„r
.
U1
[26];

590 
xmö
 = 
DøwögAªa
[0];

591 
xmax
 = 
DøwögAªa
[2];

592 
ymö
 = 
DøwögAªa
[1];

593 
ymax
 = 
DøwögAªa
[3];

594 
ãmp
 = 
DøwögOff£t
[0];

595 
x0
 +
ãmp
;

596 
x1
 +
ãmp
;

597 
x2
 +
ãmp
;

598 
ãmp
 = 
DøwögOff£t
[1];

599 
y0
 +
ãmp
;

600 
y1
 +
ãmp
;

601 
y2
 +
ãmp
;

602 i‡(
y0
 > 
y1
) {

603 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

604 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

605 
	`GPU_SWAP
(
u0
, 
u1
, 
ãmp
);

606 
	`GPU_SWAP
(
v0
, 
v1
, 
ãmp
);

607 
	`GPU_SWAP
(
r0
, 
r1
, 
ãmp
);

608 
	`GPU_SWAP
(
g0
, 
g1
, 
ãmp
);

609 
	`GPU_SWAP
(
b0
, 
b1
, 
ãmp
);

611 i‡(
y1
 > 
y2
) {

612 
	`GPU_SWAP
(
x1
, 
x2
, 
ãmp
);

613 
	`GPU_SWAP
(
y1
, 
y2
, 
ãmp
);

614 
	`GPU_SWAP
(
u1
, 
u2
, 
ãmp
);

615 
	`GPU_SWAP
(
v1
, 
v2
, 
ãmp
);

616 
	`GPU_SWAP
(
r1
, 
r2
, 
ãmp
);

617 
	`GPU_SWAP
(
g1
, 
g2
, 
ãmp
);

618 
	`GPU_SWAP
(
b1
, 
b2
, 
ãmp
);

620 i‡(
y0
 > 
y1
) {

621 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

622 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

623 
	`GPU_SWAP
(
u0
, 
u1
, 
ãmp
);

624 
	`GPU_SWAP
(
v0
, 
v1
, 
ãmp
);

625 
	`GPU_SWAP
(
r0
, 
r1
, 
ãmp
);

626 
	`GPU_SWAP
(
g0
, 
g1
, 
ãmp
);

627 
	`GPU_SWAP
(
b0
, 
b1
, 
ãmp
);

629 
ya
 = 
y2
 - 
y0
;

630 
yb
 = 
y2
 - 
y1
;

631 
dx4
 = (
x2
 - 
x1
Ë* 
ya
 - (x2 - 
x0
Ë* 
yb
;

632 
du4
 = (
u2
 - 
u1
Ë* 
ya
 - (u2 - 
u0
Ë* 
yb
;

633 
dv4
 = (
v2
 - 
v1
Ë* 
ya
 - (v2 - 
v0
Ë* 
yb
;

634 
dr4
 = (
r2
 - 
r1
Ë* 
ya
 - (r2 - 
r0
Ë* 
yb
;

635 
dg4
 = (
g2
 - 
g1
Ë* 
ya
 - (g2 - 
g0
Ë* 
yb
;

636 
db4
 = (
b2
 - 
b1
Ë* 
ya
 - (b2 - 
b0
Ë* 
yb
;

637 
dx
 = 
dx4
;

638 i‡(
dx4
 < 0) {

639 
dx4
 = -dx4;

640 
du4
 = -du4;

641 
dv4
 = -dv4;

642 
dr4
 = -dr4;

643 
dg4
 = -dg4;

644 
db4
 = -db4;

647 
du4
 = 
	`GPU_DIV
(du4 << 
GPU_DIGITS
, 
dx4
);

648 
dv4
 = 
	`GPU_DIV
(dv4 << 
GPU_DIGITS
, 
dx4
);

649 
dr4
 = 
	`GPU_DIV
(dr4 << 
GPU_DIGITS
, 
dx4
);

650 
dg4
 = 
	`GPU_DIV
(dg4 << 
GPU_DIGITS
, 
dx4
);

651 
db4
 = 
	`GPU_DIV
(db4 << 
GPU_DIGITS
, 
dx4
);

652 
lo›0
 = 2;Üoop0;Üoop0--) {

653 i‡(
lo›0
 == 2) {

654 
ya
 = 
y0
;

655 
yb
 = 
y1
;

656 
x3
 = 
x4
 = 
x0
 << 
GPU_DIGITS
;

657 
u3
 = 
u0
 << 
GPU_DIGITS
;

658 
v3
 = 
v0
 << 
GPU_DIGITS
;

659 
r3
 = 
r0
 << 
GPU_DIGITS
;

660 
g3
 = 
g0
 << 
GPU_DIGITS
;

661 
b3
 = 
b0
 << 
GPU_DIGITS
;

662 i‡(
dx
 < 0) {

663 
ãmp
 = 
y2
 - 
y0
;

664 
dx3
 = 
	`GPU_DIV
((
x2
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

665 
du3
 = 
	`GPU_DIV
((
u2
 - 
u0
Ë<< 
GPU_DIGITS
, 
ãmp
);

666 
dv3
 = 
	`GPU_DIV
((
v2
 - 
v0
Ë<< 
GPU_DIGITS
, 
ãmp
);

667 
dr3
 = 
	`GPU_DIV
((
r2
 - 
r0
Ë<< 
GPU_DIGITS
, 
ãmp
);

668 
dg3
 = 
	`GPU_DIV
((
g2
 - 
g0
Ë<< 
GPU_DIGITS
, 
ãmp
);

669 
db3
 = 
	`GPU_DIV
((
b2
 - 
b0
Ë<< 
GPU_DIGITS
, 
ãmp
);

670 
ãmp
 = 
y1
 - 
y0
;

671 
dx4
 = 
	`GPU_DIV
((
x1
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

673 
ãmp
 = 
y1
 - 
y0
;

674 
dx3
 = 
	`GPU_DIV
((
x1
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

675 
du3
 = 
	`GPU_DIV
((
u1
 - 
u0
Ë<< 
GPU_DIGITS
, 
ãmp
);

676 
dv3
 = 
	`GPU_DIV
((
v1
 - 
v0
Ë<< 
GPU_DIGITS
, 
ãmp
);

677 
dr3
 = 
	`GPU_DIV
((
r1
 - 
r0
Ë<< 
GPU_DIGITS
, 
ãmp
);

678 
dg3
 = 
	`GPU_DIV
((
g1
 - 
g0
Ë<< 
GPU_DIGITS
, 
ãmp
);

679 
db3
 = 
	`GPU_DIV
((
b1
 - 
b0
Ë<< 
GPU_DIGITS
, 
ãmp
);

680 
ãmp
 = 
y2
 - 
y0
;

681 
dx4
 = 
	`GPU_DIV
((
x2
 - 
x0
Ë<< 
GPU_DIGITS
, 
ãmp
);

684 
ya
 = 
y1
;

685 
yb
 = 
y2
;

686 i‡(
dx
 < 0) {

687 
ãmp
 = 
y1
 - 
y0
;

688 
x3
 = (
x0
 << 
GPU_DIGITS
Ë+ (
dx3
 * 
ãmp
);

689 
u3
 = (
u0
 << 
GPU_DIGITS
Ë+ (
du3
 * 
ãmp
);

690 
v3
 = (
v0
 << 
GPU_DIGITS
Ë+ (
dv3
 * 
ãmp
);

691 
r3
 = (
r0
 << 
GPU_DIGITS
Ë+ (
dr3
 * 
ãmp
);

692 
g3
 = (
g0
 << 
GPU_DIGITS
Ë+ (
dg3
 * 
ãmp
);

693 
b3
 = (
b0
 << 
GPU_DIGITS
Ë+ (
db3
 * 
ãmp
);

694 
x4
 = 
x1
 << 
GPU_DIGITS
;

695 
ãmp
 = 
y2
 - 
y1
;

696 
dx4
 = 
	`GPU_DIV
((
x2
 - 
x1
Ë<< 
GPU_DIGITS
, 
ãmp
);

698 
x3
 = 
x1
 << 
GPU_DIGITS
;

699 
u3
 = 
u1
 << 
GPU_DIGITS
;

700 
v3
 = 
v1
 << 
GPU_DIGITS
;

701 
r3
 = 
r1
 << 
GPU_DIGITS
;

702 
g3
 = 
g1
 << 
GPU_DIGITS
;

703 
b3
 = 
b1
 << 
GPU_DIGITS
;

704 
ãmp
 = 
y1
 - 
y0
;

705 
x4
 = (
x0
 << 
GPU_DIGITS
Ë+ (
dx4
 * 
ãmp
);

706 
ãmp
 = 
y2
 - 
y1
;

707 
dx3
 = 
	`GPU_DIV
((
x2
 - 
x1
Ë<< 
GPU_DIGITS
, 
ãmp
);

708 
du3
 = 
	`GPU_DIV
((
u2
 - 
u1
Ë<< 
GPU_DIGITS
, 
ãmp
);

709 
dv3
 = 
	`GPU_DIV
((
v2
 - 
v1
Ë<< 
GPU_DIGITS
, 
ãmp
);

710 
dr3
 = 
	`GPU_DIV
((
r2
 - 
r1
Ë<< 
GPU_DIGITS
, 
ãmp
);

711 
dg3
 = 
	`GPU_DIV
((
g2
 - 
g1
Ë<< 
GPU_DIGITS
, 
ãmp
);

712 
db3
 = 
	`GPU_DIV
((
b2
 - 
b1
Ë<< 
GPU_DIGITS
, 
ãmp
);

715 
ãmp
 = 
ymö
 - 
ya
;

716 i‡(
ãmp
 > 0) {

717 
ya
 = 
ymö
;

718 
x3
 +(
dx3
 * 
ãmp
);

719 
x4
 +(
dx4
 * 
ãmp
);

720 
u3
 +(
du3
 * 
ãmp
);

721 
v3
 +(
dv3
 * 
ãmp
);

722 
r3
 +(
dr3
 * 
ãmp
);

723 
g3
 +(
dg3
 * 
ãmp
);

724 
b3
 +(
db3
 * 
ãmp
);

726 i‡(
yb
 > 
ymax
)

727 
yb
 = 
ymax
;

728 
lo›1
 = 
yb
 - 
ya
;

729 i‡(
lo›1
 < 0)

730 
lo›1
 = 0;

731 ; 
lo›1
;Üoop1--) {

732 
u4
 = 
u3
;

733 
v4
 = 
v3
;

734 
r4
 = 
r3
;

735 
g4
 = 
g3
;

736 
b4
 = 
b3
;

737 
xa
 = (
x3
 + ((1 << 
GPU_DIGITS
) - 1)) >> GPU_DIGITS;

738 
xb
 = (
x4
 + ((1 << 
GPU_DIGITS
) - 1)) >> GPU_DIGITS;

739 
ãmp
 = (
xa
 << 
GPU_DIGITS
Ë- 
x3
;

740 
u4
 +((
ãmp
 * 
du4
Ë>> 
GPU_DIGITS
);

741 
v4
 +((
ãmp
 * 
dv4
Ë>> 
GPU_DIGITS
);

742 
r4
 +((
ãmp
 * 
dr4
Ë>> 
GPU_DIGITS
);

743 
g4
 +((
ãmp
 * 
dg4
Ë>> 
GPU_DIGITS
);

744 
b4
 +((
ãmp
 * 
db4
Ë>> 
GPU_DIGITS
);

745 
u4
 +(1 << (
GPU_DIGITS
 - 1));

746 
v4
 +(1 << (
GPU_DIGITS
 - 1));

747 
r4
 +(1 << (
GPU_DIGITS
 - 1));

748 
g4
 +(1 << (
GPU_DIGITS
 - 1));

749 
b4
 +(1 << (
GPU_DIGITS
 - 1));

750 
ãmp
 = 
xmö
 - 
xa
;

751 i‡(
ãmp
 > 0) {

752 
xa
 = 
xmö
;

753 
u4
 +(
du4
 * 
ãmp
);

754 
v4
 +(
dv4
 * 
ãmp
);

755 
r4
 +(
dr4
 * 
ãmp
);

756 
g4
 +(
dg4
 * 
ãmp
);

757 
b4
 +(
db4
 * 
ãmp
);

759 i‡(
xb
 > 
xmax
)

760 
xb
 = 
xmax
;

761 
lo›2
 = 
xb
 - 
xa
;

762 i‡(
lo›2
 < 0)

763 
lo›2
 = 0;

765 
Pixñ
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
xa
, 
ya
)];

766 
ya
++;

767 ; 
lo›2
;Üoop2--) {

768 
_TU
 = 
u4
 >> 
GPU_DIGITS
;

769 
_TV
 = 
v4
 >> 
GPU_DIGITS
;

770 
_LR
 = 
r4
 >> 
GPU_DIGITS
;

771 
_LG
 = 
g4
 >> 
GPU_DIGITS
;

772 
_LB
 = 
b4
 >> 
GPU_DIGITS
;

773 
	`gpuDrivî
();

774 
Pixñ
++;

775 
u4
 +
du4
;

776 
v4
 +
dv4
;

777 
r4
 +
dr4
;

778 
g4
 +
dg4
;

779 
b4
 +
db4
;

781 
x3
 +
dx3
;

782 
x4
 +
dx4
;

783 
u3
 +
du3
;

784 
v3
 +
dv3
;

785 
r3
 +
dr3
;

786 
g3
 +
dg3
;

787 
b3
 +
db3
;

790 
	}
}

796 
	$gpuDøwLF
()

798 
Söt32
 
ãmp
;

799 
Söt32
 
xmö
, 
xmax
;

800 
Söt32
 
ymö
, 
ymax
;

801 
Söt32
 
x0
, 
x1
, 
dx
;

802 
Söt32
 
y0
, 
y1
, 
dy
;

804 i‡–
Skù
 )

807 
upd©eLa˚
 = 1;

809 
x0
 = 
PackëBuf„r
.
S2
[2];

810 
	`GPU_TESTRANGE
(
x0
);

811 
x1
 = 
PackëBuf„r
.
S2
[4];

812 
	`GPU_TESTRANGE
(
x1
);

813 
y0
 = 
PackëBuf„r
.
S2
[3];

814 
	`GPU_TESTRANGE
(
y0
);

815 
y1
 = 
PackëBuf„r
.
S2
[5];

816 
	`GPU_TESTRANGE
(
y1
);

817 
xmö
 = 
DøwögAªa
[0];

818 
xmax
 = 
DøwögAªa
[2];

819 
ymö
 = 
DøwögAªa
[1];

820 
ymax
 = 
DøwögAªa
[3];

821 
ãmp
 = 
PackëBuf„r
.
U4
[0];

822 
PixñD©a
 = 
	`GPU_RGB16
(
ãmp
);

823 
ãmp
 = 
DøwögOff£t
[0];

824 
x0
 +
ãmp
;

825 
x1
 +
ãmp
;

826 
ãmp
 = 
DøwögOff£t
[1];

827 
y0
 +
ãmp
;

828 
y1
 +
ãmp
;

829 
dy
 = (
y1
 - 
y0
);

830 i‡(
dy
 < 0)

831 
dy
 = -dy;

832 
dx
 = (
x1
 - 
x0
);

833 i‡(
dx
 < 0)

834 
dx
 = -dx;

835 i‡(
dx
 > 
dy
) {

836 i‡(
x0
 > 
x1
) {

837 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

838 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

840 
y1
 = 
	`GPU_DIV
((y1 - 
y0
Ë<< 
GPU_DIGITS
, 
dx
);

841 
y0
 <<
GPU_DIGITS
;

842 
ãmp
 = 
xmö
 - 
x0
;

843 i‡(
ãmp
 > 0) {

844 
x0
 = 
xmö
;

845 
y0
 +(
y1
 * 
ãmp
);

847 i‡(
x1
 > 
xmax
)

848 
x1
 = 
xmax
;

849 
x1
 -
x0
;

850 i‡(
x1
 < 0)

851 
x1
 = 0;

852 ; 
x1
; x1--) {

853 
ãmp
 = 
y0
 >> 
GPU_DIGITS
;

854 i‡((
Uöt32
Ë(
ãmp
 - 
ymö
Ë< (Uöt32Ë(
ymax
 - ymin)) {

855 
Pixñ
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
, 
ãmp
)];

856 
	`gpuDrivî
();

858 
x0
++;

859 
y0
 +
y1
;

861 } i‡(
dy
) {

862 i‡(
y0
 > 
y1
) {

863 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

864 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

866 
x1
 = 
	`GPU_DIV
((x1 - 
x0
Ë<< 
GPU_DIGITS
, 
dy
);

867 
x0
 <<
GPU_DIGITS
;

868 
ãmp
 = 
ymö
 - 
y0
;

869 i‡(
ãmp
 > 0) {

870 
y0
 = 
ymö
;

871 
x0
 +(
x1
 * 
ãmp
);

873 i‡(
y1
 > 
ymax
)

874 
y1
 = 
ymax
;

875 
y1
 -
y0
;

876 i‡(
y1
 < 0)

877 
y1
 = 0;

878 ; 
y1
; y1--) {

879 
ãmp
 = 
x0
 >> 
GPU_DIGITS
;

880 i‡((
Uöt32
Ë(
ãmp
 - 
xmö
Ë< (Uöt32Ë(
xmax
 - xmin)) {

881 
Pixñ
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
ãmp
, 
y0
)];

882 
	`gpuDrivî
();

884 
y0
++;

885 
x0
 +
x1
;

888 i‡((
Uöt32
Ë(
x0
 - 
xmö
Ë< (Uöt32Ë(
xmax
 - xmin)) {

889 i‡((
Uöt32
Ë(
y0
 - 
ymö
Ë< (Uöt32Ë(
ymax
 - ymin)) {

890 
Pixñ
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
, 
y0
)];

891 
	`gpuDrivî
();

895 
	}
}

901 
	$gpuDøwGF
()

903 
ãmp
;

904 
xmö
, 
xmax
;

905 
ymö
, 
ymax
;

906 
x0
, 
x1
, 
dx
;

907 
y0
, 
y1
, 
dy
;

908 
r0
, 
r1
;

909 
g0
, 
g1
;

910 
b0
, 
b1
;

912 i‡–
Skù
 )

915 
upd©eLa˚
 = 1;

917 
x0
 = 
PackëBuf„r
.
S2
[2];

918 
	`GPU_TESTRANGE
(
x0
);

919 
x1
 = 
PackëBuf„r
.
S2
[6];

920 
	`GPU_TESTRANGE
(
x1
);

921 
y0
 = 
PackëBuf„r
.
S2
[3];

922 
	`GPU_TESTRANGE
(
y0
);

923 
y1
 = 
PackëBuf„r
.
S2
[7];

924 
	`GPU_TESTRANGE
(
y1
);

925 
r0
 = 
PackëBuf„r
.
U1
[0];

926 
r1
 = 
PackëBuf„r
.
U1
[8];

927 
g0
 = 
PackëBuf„r
.
U1
[1];

928 
g1
 = 
PackëBuf„r
.
U1
[9];

929 
b0
 = 
PackëBuf„r
.
U1
[2];

930 
b1
 = 
PackëBuf„r
.
U1
[10];

931 
xmö
 = 
DøwögAªa
[0];

932 
xmax
 = 
DøwögAªa
[2];

933 
ymö
 = 
DøwögAªa
[1];

934 
ymax
 = 
DøwögAªa
[3];

935 
ãmp
 = 
DøwögOff£t
[0];

936 
x0
 +
ãmp
;

937 
x1
 +
ãmp
;

938 
ãmp
 = 
DøwögOff£t
[1];

939 
y0
 +
ãmp
;

940 
y1
 +
ãmp
;

941 
dy
 = (
y1
 - 
y0
);

942 i‡(
dy
 < 0)

943 
dy
 = -dy;

944 
dx
 = (
x1
 - 
x0
);

945 i‡(
dx
 < 0)

946 
dx
 = -dx;

947 i‡(
dx
 > 
dy
) {

948 i‡(
x0
 > 
x1
) {

949 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

950 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

951 
	`GPU_SWAP
(
r0
, 
r1
, 
ãmp
);

952 
	`GPU_SWAP
(
g0
, 
g1
, 
ãmp
);

953 
	`GPU_SWAP
(
b0
, 
b1
, 
ãmp
);

955 
y1
 = 
	`GPU_DIV
((y1 - 
y0
Ë<< 
GPU_DIGITS
, 
dx
);

956 
r1
 = 
	`GPU_DIV
(‘1 - 
r0
Ë<< 
GPU_DIGITS
, 
dx
);

957 
g1
 = 
	`GPU_DIV
((g1 - 
g0
Ë<< 
GPU_DIGITS
, 
dx
);

958 
b1
 = 
	`GPU_DIV
((b1 - 
b0
Ë<< 
GPU_DIGITS
, 
dx
);

959 
y0
 <<
GPU_DIGITS
;

960 
r0
 <<
GPU_DIGITS
;

961 
g0
 <<
GPU_DIGITS
;

962 
b0
 <<
GPU_DIGITS
;

963 
ãmp
 = 
xmö
 - 
x0
;

964 i‡(
ãmp
 > 0) {

965 
x0
 = 
xmö
;

966 
y0
 +(
y1
 * 
ãmp
);

967 
r0
 +(
r1
 * 
ãmp
);

968 
g0
 +(
g1
 * 
ãmp
);

969 
b0
 +(
b1
 * 
ãmp
);

971 i‡(
x1
 > 
xmax
)

972 
x1
 = 
xmax
;

973 
x1
 -
x0
;

974 i‡(
x1
 < 0)

975 
x1
 = 0;

976 ; 
x1
; x1--) {

977 
ãmp
 = 
y0
 >> 
GPU_DIGITS
;

978 i‡((
Uöt32
Ë(
ãmp
 - 
ymö
Ë< (Uöt32Ë(
ymax
 - ymin)) {

979 
Pixñ
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
, 
ãmp
)];

980 
PixñD©a
 = (0xF << 10) | (0xF << 5) | 0xF;

981 
_LR
 = 
r0
 >> 
GPU_DIGITS
;

982 
_LG
 = 
g0
 >> 
GPU_DIGITS
;

983 
_LB
 = 
b0
 >> 
GPU_DIGITS
;

984 
	`gpuDrivî
();

986 
x0
++;

987 
y0
 +
y1
;

988 
r0
 +
r1
;

989 
g0
 +
g1
;

990 
b0
 +
b1
;

992 } i‡(
dy
) {

993 i‡(
y0
 > 
y1
) {

994 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

995 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

996 
	`GPU_SWAP
(
r0
, 
r1
, 
ãmp
);

997 
	`GPU_SWAP
(
g0
, 
g1
, 
ãmp
);

998 
	`GPU_SWAP
(
b0
, 
b1
, 
ãmp
);

1000 
x1
 = 
	`GPU_DIV
((x1 - 
x0
Ë<< 
GPU_DIGITS
, 
dy
);

1001 
r1
 = 
	`GPU_DIV
(‘1 - 
r0
Ë<< 
GPU_DIGITS
, 
dy
);

1002 
g1
 = 
	`GPU_DIV
((g1 - 
g0
Ë<< 
GPU_DIGITS
, 
dy
);

1003 
b1
 = 
	`GPU_DIV
((b1 - 
b0
Ë<< 
GPU_DIGITS
, 
dy
);

1004 
x0
 <<
GPU_DIGITS
;

1005 
r0
 <<
GPU_DIGITS
;

1006 
g0
 <<
GPU_DIGITS
;

1007 
b0
 <<
GPU_DIGITS
;

1008 
ãmp
 = 
ymö
 - 
y0
;

1009 i‡(
ãmp
 > 0) {

1010 
y0
 = 
ymö
;

1011 
x0
 +(
x1
 * 
ãmp
);

1012 
r0
 +(
r1
 * 
ãmp
);

1013 
g0
 +(
g1
 * 
ãmp
);

1014 
b0
 +(
b1
 * 
ãmp
);

1016 i‡(
y1
 > 
ymax
)

1017 
y1
 = 
ymax
;

1018 
y1
 -
y0
;

1019 i‡(
y1
 < 0)

1020 
y1
 = 0;

1021 ; 
y1
; y1--) {

1022 
ãmp
 = 
x0
 >> 
GPU_DIGITS
;

1023 i‡((
Uöt32
Ë(
ãmp
 - 
xmö
Ë< (Uöt32Ë(
xmax
 - xmin)) {

1024 
Pixñ
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
ãmp
, 
y0
)];

1025 
PixñD©a
 = 0x8000 | (0xF << 10) | (0xF << 5) | 0xF;

1026 
_LR
 = 
r0
 >> 12;

1027 
_LG
 = 
g0
 >> 12;

1028 
_LB
 = 
b0
 >> 12;

1029 
	`gpuDrivî
();

1031 
y0
++;

1032 
x0
 +
x1
;

1033 
r0
 +
r1
;

1034 
g0
 +
g1
;

1035 
b0
 +
b1
;

1038 i‡((
Uöt32
Ë(
x0
 - 
xmö
Ë< (Uöt32Ë(
xmax
 - xmin)) {

1039 i‡((
Uöt32
Ë(
y0
 - 
ymö
Ë< (Uöt32Ë(
ymax
 - ymin)) {

1040 
Pixñ
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
, 
y0
)];

1041 
PixñD©a
 = 0x8000 | (0xF << 10) | (0xF << 5) | 0xF;

1042 
_LR
 = 
r0
;

1043 
_LG
 = 
g0
;

1044 
_LB
 = 
b0
;

1045 
	`gpuDrivî
();

1049 
	}
}

1055 
	$gpuDøwT
()

1057 
Söt32
 
ãmp
;

1058 
Söt32
 
xmö
, 
xmax
;

1059 
Söt32
 
ymö
, 
ymax
;

1060 
Söt32
 
x0
, 
w0
;

1061 
Söt32
 
y0
, 
h0
;

1063 i‡–
Skù
 )

1066 
upd©eLa˚
 = 1;

1068 
x0
 = 
PackëBuf„r
.
S2
[2];

1069 
w0
 = 
PackëBuf„r
.
S2
[4];

1070 
y0
 = 
PackëBuf„r
.
S2
[3];

1071 
h0
 = 
PackëBuf„r
.
S2
[5];

1072 
xmö
 = 
DøwögAªa
[0];

1073 
xmax
 = 
DøwögAªa
[2];

1074 
ymö
 = 
DøwögAªa
[1];

1075 
ymax
 = 
DøwögAªa
[3];

1076 
ãmp
 = 
PackëBuf„r
.
U4
[0];

1077 
PixñD©a
 = 
	`GPU_RGB16
(
ãmp
);

1078 
ãmp
 = 
DøwögOff£t
[0];

1079 
x0
 +
ãmp
;

1080 
ãmp
 = 
DøwögOff£t
[1];

1081 
y0
 +
ãmp
;

1082 
h0
 +
y0
;

1083 i‡(
y0
 < 
ymö
)

1084 
y0
 = 
ymö
;

1085 i‡(
h0
 > 
ymax
)

1086 
h0
 = 
ymax
;

1087 
h0
 -
y0
;

1088 i‡(
h0
 < 0)

1089 
h0
 = 0;

1090 
w0
 +
x0
;

1091 i‡(
x0
 < 
xmö
)

1092 
x0
 = 
xmö
;

1093 i‡(
w0
 > 
xmax
)

1094 
w0
 = 
xmax
;

1095 
w0
 -
x0
;

1096 i‡(
w0
 < 0)

1097 
w0
 = 0;

1098 
Pixñ
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
, 
y0
)];

1099 
ãmp
 = 
FRAME_WIDTH
 - 
w0
;

1100 ; 
h0
; h0--) {

1101 
x0
 = 
w0
; x0; x0--) {

1102 
	`gpuDrivî
();

1103 
Pixñ
++;

1105 
Pixñ
 +
ãmp
;

1107 
	}
}

1113 
	$gpuDøwS
()

1115 
Söt32
 
ãmp
;

1116 
Söt32
 
xmö
, 
xmax
;

1117 
Söt32
 
ymö
, 
ymax
;

1118 
Söt32
 
x0
, 
x1
;

1119 
Söt32
 
y0
, 
y1
;

1120 
Söt32
 
u0
;

1121 
Söt32
 
v0
;

1123 i‡–
Skù
 )

1126 
upd©eLa˚
 = 1;

1128 
x0
 = 
PackëBuf„r
.
S2
[2];

1129 
x1
 = 
PackëBuf„r
.
S2
[6];

1130 
y0
 = 
PackëBuf„r
.
S2
[3];

1131 
y1
 = 
PackëBuf„r
.
S2
[7];

1132 
u0
 = 
PackëBuf„r
.
U1
[8];

1133 
v0
 = 
PackëBuf„r
.
U1
[9];

1134 
xmö
 = 
DøwögAªa
[0];

1135 
xmax
 = 
DøwögAªa
[2];

1136 
ymö
 = 
DøwögAªa
[1];

1137 
ymax
 = 
DøwögAªa
[3];

1138 
_LR
 = 
PackëBuf„r
.
U1
[0];

1139 
_LG
 = 
PackëBuf„r
.
U1
[1];

1140 
_LB
 = 
PackëBuf„r
.
U1
[2];

1141 
ãmp
 = 
DøwögOff£t
[0];

1142 
x0
 +
ãmp
;

1143 
ãmp
 = 
DøwögOff£t
[1];

1144 
y0
 +
ãmp
;

1145 
x1
 +
x0
;

1146 
y1
 +
y0
;

1147 
ãmp
 = 
ymö
 - 
y0
;

1148 i‡(
ãmp
 > 0) {

1149 
y0
 = 
ymö
;

1150 
v0
 +
ãmp
;

1152 i‡(
y1
 > 
ymax
)

1153 
y1
 = 
ymax
;

1154 
y1
 -
y0
;

1155 i‡(
y1
 < 0)

1156 
y1
 = 0;

1157 
ãmp
 = 
xmö
 - 
x0
;

1158 i‡(
ãmp
 > 0) {

1159 
x0
 = 
xmö
;

1160 
u0
 +
ãmp
;

1162 i‡(
x1
 > 
xmax
)

1163 
x1
 = 
xmax
;

1164 
x1
 -
x0
;

1165 i‡(
x1
 < 0)

1166 
x1
 = 0;

1167 
Pixñ
 = &((
Uöt16
*)
FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
, 
y0
)];

1168 
ãmp
 = 
FRAME_WIDTH
 - 
x1
;

1169 
_TV
 = 
v0
;

1170 
y0
 = 
y1
; y0; y0--) {

1171 
_TU
 = 
u0
;

1172 
x0
 = 
x1
; x0; x0--) {

1173 
	`gpuDrivî
();

1174 
Pixñ
++;

1175 
_TU
++;

1177 
Pixñ
 +
ãmp
;

1178 
_TV
++;

1180 
	}
}

	@src/gpu/gpu_null/gpu.cpp

1 
	~<°dio.h
>

2 
	~"psxcomm⁄.h
"

3 
	~"p‹t.h
"

4 
	~"∂ugös.h
"

6 
	#MAXSKIP
 6

	)

7 
	#FRAME_HEIGHT
 512

	)

8 
	#FRAME_OFFSET
(
x
,
y
Ë(((y)<<10)+(x))

	)

11 
boﬁ
 
	g‰ameLimô
 = 
Ál£
;

12 
	gskùCou¡
 = 2;

13 
	gíabÀAbbeyHack
 = 0;

14 
	glöesI¡îœ˚
 = 0;

15 
	glöesI¡îœ˚_u£r
 = 0;

16 
boﬁ
 
	g¥ogªssI¡îœ˚
 = 
Ál£
;

17 
	gÆt_Âs
 = 0;

20 
s8
 
	mS1
[64];

21 
s16
 
	mS2
[32];

22 
s32
 
	mS4
[16];

23 
u8
 
	mU1
[64];

24 
u16
 
	mU2
[32];

25 
u32
 
	mU4
[16];

26 } 
	tPackëBuf„r_t
;

28 
u32
 
	g‰ameR©e
=60;

29 
	g‰ameR©eAvg
=0.0;

30 
s32
 
	g‰amesToSkù
=0;

31 
s32
 
	g‰amesSkù≥d
=0;

32 
u32
 
	gdi•œyFømeInfo
=1;

33 
s32
 
	g‰ameR©eCou¡î
=0;

34 
u32
 
	g‰amesTŸÆ
=0;

35 
u32
 
	gautoFømeSkù
 = 0;

36 
	gsy°icks
=0;

38 
	gGPU_‰amesI¡îœ˚
=0;

39 
	gGPU_‰amesProgªsiveI¡
=1;

41 
s32
 
	gGPU_gp0
=0;

42 
s32
 
	gGPU_gp1
=0;

43 
s32
 
	gFømeToRód
=0;

44 
s32
 
	gFømeToWrôe
=0;

45 
s32
 
	gFømeWidth
;

46 
s32
 
	gFømeCou¡
;

47 
s32
 
	gFømeIndex
;

48 
PackëBuf„r_t
 
	gPackëBuf„r
;

49 
s32
 
	gPackëCou¡
;

50 
s32
 
	gPackëIndex
;

51 
s32
 
	gisPAL
 = 0;

52 
s32
 
	gTextuªWödow
[4];

53 
s32
 
	gDøwögAªa
[4];

54 
s32
 
	gDøwögOff£t
[2];

55 
s32
 
	gDi•œyAªa
[8];

56 
s32
 
	gOthîEnv
[16];

58 
s32
 
	gskù_this_‰ame
=0;

60 
	#skù_this_‰ame
 0

	)

62 
s32
 
	gœ°‰amî©e
 = 0;

63 
s32
 
	g‰ameskùCh™ge
 = 2;

66 
u8
 
	gPackëSize
[256] = {

85 
u16
 
	gH‹iz⁄èlResﬁuti⁄
[8] = {

89 
u16
 
	gVîtiˇlResﬁuti⁄
[4] = {

94 
u16
 
	g_dummy_gpu_‰ame_buf„r
[(0x100000)/2];

95 
u32
 
	ggpu_wrôeDmaWidth
=0, 
	ggpu_wrôeDmaHeight
=0;

96 
u16
 *
	ggpu_‰ame_buf„r
=&
_dummy_gpu_‰ame_buf„r
[0];

97 
u16
 *
	ggpu_pvøm
=&
_dummy_gpu_‰ame_buf„r
[0];

98 
s32
 
	ggpu_x_°¨t
=0, 
	ggpu_y_°¨t
=0, 
	ggpu_x_íd
=0, 
	ggpu_y_íd
=0;

99 
s32
 
	ggpu_px
=0, 
	ggpu_py
=0;

100 
s32
 
	ggpu_upd©eLa˚
 = 1;

102 
u8
 
	gTextuªMask
[32] = {

108 
	$gpu_videoOuçut
()

111 
	}
}

113 
	$gpu_ª£t
()

115 
	`mem£t
((*)&
_dummy_gpu_‰ame_buf„r
[0],0,0x100000);

116 
gpu_‰ame_buf„r
=&
_dummy_gpu_‰ame_buf„r
[0];

117 
gpu_pvøm
=&
_dummy_gpu_‰ame_buf„r
[0];

118 
gpu_px
=
gpu_py
=0;

119 
gpu_x_°¨t
=
gpu_y_°¨t
=0;

120 
gpu_x_íd
=
gpu_y_íd
=0;

121 
gpu_wrôeDmaWidth
=0;

122 
gpu_wrôeDmaHeight
=0;

123 
gpu_upd©eLa˚
 = 1;

124 
	}
}

126 
	$gpu_›íVideo
(
p1
)

128 
	`gpu_ª£t
();

129 
	}
}

131 
	$gpu_˛o£Video
()

133 
	}
}

136 
	$gpu_lﬂdImage
()

138 
u16
 
x0
, 
y0
, 
w0
, 
h0
;

139 
x0
 = 
PackëBuf„r
.
U2
[2] & 1023;

140 
y0
 = 
PackëBuf„r
.
U2
[3] & 511;

141 
w0
 = 
PackëBuf„r
.
U2
[4];

142 
h0
 = 
PackëBuf„r
.
U2
[5];

143 
FømeIndex
 = 
	`FRAME_OFFSET
(
x0
, 
y0
);

144 i‡((
y0
 + 
h0
Ë> 
FRAME_HEIGHT
) {

145 
h0
 = 
FRAME_HEIGHT
 - 
y0
;

147 
FømeToWrôe
 = 
w0
 * 
h0
;

148 
FømeCou¡
 = 
FømeWidth
 = 
w0
;

150 
gpu_wrôeDmaWidth
 = 
w0
;

151 
gpu_wrôeDmaHeight
 = 
h0
;

153 
gpu_px
 = 
gpu_x_°¨t
 = 
x0
;

154 
gpu_py
 = 
gpu_y_°¨t
 = 
y0
;

155 
gpu_x_íd
 = 
gpu_x_°¨t
 + 
w0
;

156 
gpu_y_íd
 = 
gpu_y_°¨t
 + 
h0
;

157 
gpu_pvøm
 = &
gpu_‰ame_buf„r
[
gpu_py
*1024];

159 
gpu_upd©eLa˚
 = 1;

160 
	}
}

163 
	$gpu_°‹eImage
()

165 
u16
 
x0
, 
y0
, 
w0
, 
h0
;

166 
x0
 = 
PackëBuf„r
.
U2
[2] & 1023;

167 
y0
 = 
PackëBuf„r
.
U2
[3] & 511;

168 
w0
 = 
PackëBuf„r
.
U2
[4];

169 
h0
 = 
PackëBuf„r
.
U2
[5];

170 
FømeIndex
 = 
	`FRAME_OFFSET
(
x0
, 
y0
);

171 i‡((
y0
 + 
h0
Ë> 
FRAME_HEIGHT
) {

172 
h0
 = 
FRAME_HEIGHT
 - 
y0
;

174 
FømeToRód
 = 
w0
 * 
h0
;

175 
FømeCou¡
 = 
FømeWidth
 = 
w0
;

177 
gpu_px
 = 
gpu_x_°¨t
 = 
x0
;

178 
gpu_py
 = 
gpu_y_°¨t
 = 
y0
;

179 
gpu_x_íd
 = 
gpu_x_°¨t
 + 
w0
;

180 
gpu_y_íd
 = 
gpu_y_°¨t
 + 
h0
;

181 
gpu_pvøm
 = &
gpu_‰ame_buf„r
[
gpu_py
*1024];

183 
GPU_gp1
 |= 0x08000000;

184 
	}
}

186 
__ölöe__
 
	$gpuSëTextuª
(
u16
 
çage
)

189 
GPU_gp1
 = (GPU_gp1 & ~0x7FFË| (
çage
 & 0x7FF);

190 
	}
}

196 
	$gpu_£ndPackë
()

198 
u32
 
ãmp
;

200 
ãmp
 = 
PackëBuf„r
.
U4
[0];

201 
ãmp
 >> 24) {

207 
gpu_upd©eLa˚
 = 0;

214 i‡(!
skù_this_‰ame
)

216 
gpu_upd©eLa˚
 = 1;

225 
	`gpuSëTextuª
(
PackëBuf„r
.
U4
[4] >> 16);

227 i‡(!
skù_this_‰ame
)

229 
gpu_upd©eLa˚
 = 1;

238 i‡(!
skù_this_‰ame
)

240 
gpu_upd©eLa˚
 = 1;

243 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[4];

244 i‡(!
skù_this_‰ame
)

246 
gpu_upd©eLa˚
 = 1;

255 
	`gpuSëTextuª
(
PackëBuf„r
.
U4
[4] >> 16);

257 i‡(!
skù_this_‰ame
)

259 
gpu_upd©eLa˚
 = 1;

262 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[7];

263 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[8];

264 i‡(!
skù_this_‰ame
)

266 
gpu_upd©eLa˚
 = 1;

275 i‡(!
skù_this_‰ame
)

277 
gpu_upd©eLa˚
 = 1;

286 
	`gpuSëTextuª
(
PackëBuf„r
.
U4
[5] >> 16);

288 i‡(!
skù_this_‰ame
)

290 
gpu_upd©eLa˚
 = 1;

299 i‡(!
skù_this_‰ame
)

301 
gpu_upd©eLa˚
 = 1;

304 
PackëBuf„r
.
U4
[0] = PacketBuffer.U4[6];

305 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[7];

306 i‡(!
skù_this_‰ame
)

308 
gpu_upd©eLa˚
 = 1;

317 
	`gpuSëTextuª
(
PackëBuf„r
.
U4
[5] >> 16);

319 i‡(!
skù_this_‰ame
)

321 
gpu_upd©eLa˚
 = 1;

324 
PackëBuf„r
.
U4
[0] = PacketBuffer.U4[9];

325 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[10];

326 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[11];

327 i‡(!
skù_this_‰ame
)

329 
gpu_upd©eLa˚
 = 1;

338 i‡(!
skù_this_‰ame
)

340 
gpu_upd©eLa˚
 = 1;

353 i‡(!
skù_this_‰ame
)

355 
gpu_upd©eLa˚
 = 1;

358 i‡((
PackëBuf„r
.
U4
[3] & 0xF000F000) != 0x50005000) {

359 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[2];

360 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[3];

361 
PackëCou¡
 = 1;

362 
PackëIndex
 = 3;

370 i‡(!
skù_this_‰ame
)

372 
gpu_upd©eLa˚
 = 1;

385 i‡(!
skù_this_‰ame
)

387 
gpu_upd©eLa˚
 = 1;

390 i‡((
PackëBuf„r
.
U4
[4] & 0xF000F000) != 0x50005000) {

391 
PackëBuf„r
.
U1
[3 + (2 * 4)] =

392 
PackëBuf„r
.
U1
[3 + (0 * 4)];

393 
PackëBuf„r
.
U4
[0] = PacketBuffer.U4[2];

394 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[3];

395 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[4];

396 
PackëCou¡
 = 2;

397 
PackëIndex
 = 3;

406 i‡(!
skù_this_‰ame
)

408 
gpu_upd©eLa˚
 = 1;

417 
	`gpuSëTextuª
(
GPU_gp1
);

419 i‡(!
skù_this_‰ame
)

421 
gpu_upd©eLa˚
 = 1;

429 
PackëBuf„r
.
U4
[2] = 0x00010001;

431 i‡(!
skù_this_‰ame
)

433 
gpu_upd©eLa˚
 = 1;

441 
PackëBuf„r
.
U4
[3] = 0x00010001;

443 
	`gpuSëTextuª
(
GPU_gp1
);

445 i‡(!
skù_this_‰ame
)

447 
gpu_upd©eLa˚
 = 1;

455 
PackëBuf„r
.
U4
[2] = 0x00080008;

457 i‡(!
skù_this_‰ame
)

459 
gpu_upd©eLa˚
 = 1;

467 
PackëBuf„r
.
U4
[3] = 0x00080008;

469 
	`gpuSëTextuª
(
GPU_gp1
);

471 i‡(!
skù_this_‰ame
)

473 
gpu_upd©eLa˚
 = 1;

481 
PackëBuf„r
.
U4
[2] = 0x00100010;

483 i‡(!
skù_this_‰ame
)

485 
gpu_upd©eLa˚
 = 1;

493 
PackëBuf„r
.
U4
[3] = 0x00100010;

495 
	`gpuSëTextuª
(
GPU_gp1
);

497 i‡(!
skù_this_‰ame
)

499 
gpu_upd©eLa˚
 = 1;

505 
gpu_upd©eLa˚
 = 1;

508 
	`gpu_lﬂdImage
();

511 
	`gpu_°‹eImage
();

514 
GPU_gp1
 = (GPU_gp1 & ~0x000007FFË| (
ãmp
 & 0x000007FF);

515 
	`gpuSëTextuª
(
ãmp
);

518 
TextuªWödow
[0] = ((
ãmp
 >> 10) & 0x1F) << 3;

519 
TextuªWödow
[1] = ((
ãmp
 >> 15) & 0x1F) << 3;

520 
TextuªWödow
[2] = 
TextuªMask
[(
ãmp
 >> 0) & 0x1F];

521 
TextuªWödow
[3] = 
TextuªMask
[(
ãmp
 >> 5) & 0x1F];

522 
TextuªWödow
[0] &= ~TextureWindow[2];

523 
TextuªWödow
[1] &= ~TextureWindow[3];

524 
	`gpuSëTextuª
(
GPU_gp1
);

528 
DøwögAªa
[0] = 
ãmp
 & 0x3FF;

529 
DøwögAªa
[1] = (
ãmp
 >> 10) & 0x3FF;

533 
DøwögAªa
[2] = (
ãmp
 & 0x3FF) + 1;

534 
DøwögAªa
[3] = ((
ãmp
 >> 10) & 0x3FF) + 1;

542 
DøwögOff£t
[0] = ((
s32
)
ãmp
<<(32-11))>>(32-11);

543 
DøwögOff£t
[1] = ((
s32
)
ãmp
<<(32-22))>>(32-11);

546 
ãmp
 &= 3;

547 
GPU_gp1
 = (GPU_gp1 & ~0x00001800Ë| (
ãmp
 << 11);

552 
	}
}

555 
	$GPU_ª£t
()

559 
GPU_gp1
 = 0x14802000;

560 
TextuªWödow
[2] = 255;

561 
TextuªWödow
[3] = 255;

562 
DøwögAªa
[2] = 256;

563 
DøwögAªa
[3] = 240;

564 
Di•œyAªa
[2] = 256;

565 
Di•œyAªa
[3] = 240;

566 
Di•œyAªa
[6] = 256;

567 
Di•œyAªa
[7] = 240;

568 
	`gpu_ª£t
();

569 
	}
}

572 
	$GPU_öô
() {

573 
	`gpu_›íVideo
(0);

574 
	`GPU_ª£t
();

576 
	}
}

578 
	$GPU_shutdown
() {

579 
	`gpu_˛o£Video
();

581 
	}
}

583 
	$GPU_O≥n
(
u32
 *
gpu
) {

584 
sy°icks
=
	`gë_ticks
()/1000;

585  
	`GPU_öô
();

586 
	}
}

588 
	$GPU_Clo£
() {

589 
	}
}

591 
s32
 
	$GPU_c⁄figuª
() {

593 
	}
}

595 
s32
 
	$GPU_ã°
() {

597 
	}
}

599 
	$GPU_about
() {

600 
	}
}

602 
	$GPU_makeS«pshŸ
() {

603 
	}
}

605 
	$GPU_key¥es£d
(
s32
) {

606 
	}
}

608 
	$GPU_di•œyText
(
s8
 *) {

609 
	}
}

611 
	$GPU_‰ìze
(
bWrôe
, 
GPUFªeze_t
* 
p2
) {

613 
	}
}

615 
	$GPU_gëS¸ìnPic
(
u8
 *) {

616 
	}
}

619 
s32
 
	$GPU_gëMode
()

623 
	}
}

626 
	$GPU_£tMode
(
u32
 
p1
)

629 
	}
}

632 
	$FømeSkù
()

634 
u32
 
fú°Time
 = 1;

635 
s32
 
∑lhz
 = 50;

636 
s32
 
¡schz
 = 60;

638 
s32
 
pﬁlcou¡
 = 0;

639 
s32
 
hz
 = (
isPAL
 ? 
∑lhz
 : 
¡schz
);

640 
s32
 
¥evious‰ameskù
 = 
‰amesToSkù
;

642 if–
fú°Time
 )

644 
∑lhz
 = 50;

645 
¡schz
 = 60;

646 
‰amesToSkù
 = 0;

647 
‰ameskùCh™ge
 = 2;

648 
œ°‰amî©e
 = 0;

649 
fú°Time
 = 0;

653 if–
‰ameR©e
 * 
‰amesToSkù
 < 
hz
 )

655 
pﬁlcou¡
++;

656 if–
pﬁlcou¡
 > 
MAXSKIP
 )

658 
pﬁlcou¡
 = 0;

659 
‰amesToSkù
 = 2;

660 if–
isPAL
 ) 
∑lhz
 -= 5;

661 
¡schz
 -= 5;

663 if–
∑lhz
 < 10 )Öalhz = 10;

664 if–
¡schz
 < 10 )Çtschz = 10;

666 if–
œ°‰amî©e
 > 
‰ameR©e
 * 
‰amesToSkù
 )

668 
‰ameskùCh™ge
 = -frameskipChange;

669 
‰amesToSkù
 +
‰ameskùCh™ge
;

673 
‰amesToSkù
 +
‰ameskùCh™ge
;

674 
pﬁlcou¡
 = 0;

679 if–
∑lhz
 < 50 || 
¡schz
 < 60 )

681 if–
isPAL
 ) 
∑lhz
 += 5;

682 
¡schz
 += 5;

684 if–
∑lhz
 > 50 )Öalhz = 50;

685 if–
¡schz
 > 60 )Çtschz = 60;

693 
pﬁlcou¡
 = 0;

696 if–
‰amesToSkù
 < 0 ) framesToSkip = 0;

697 if–
‰amesToSkù
 > 
MAXSKIP
 ) framesToSkip = MAXSKIP;

699 
œ°‰amî©e
 = 
‰ameR©e
 * 
¥evious‰ameskù
;

700 
	}
}

707 
	$GPU_upd©eLa˚
()

709 
√wticks
;

710 
dif·icks
 = 0;

712 
GPU_gp1
 ^= 0x80000000;

714 
‰ameR©eCou¡î
++;

715 
‰amesTŸÆ
++;

716 
√wticks
=
	`gë_ticks
()/1000;

718 if–(
dif·icks
 = (
√wticks
-
sy°icks
)) >= 1000 )

720 
cu™tos
=0;

721 
øã
=((()
‰ameR©eCou¡î
Ë/ ((()
dif·icks
)/1000.0));

722 
cu™tos
++;

723 
‰ameR©e
 = (
u32
)
øã
;

724 
sy°icks
 += 1000;

725 
‰ameR©eCou¡î
 = 0;

726 
‰ameR©eAvg
=((‰ameR©eAvg*(()(
cu™tos
-1)))+
øã
)/(()cuantos);

729 if–
autoFømeSkù
 )

731 
	`FømeSkù
();

734 if–
di•œyFømeInfo
 )

735 
	`¥ötf
("FømeR©e: %d, Avg=%.2f\n", 
‰ameR©e
, 
‰ameR©eAvg
);

737 
	}
}

741 
	$GPU_wrôeSètus
(
u32
 
d©a
)

743 
d©a
 >> 24) {

745 
	`GPU_ª£t
();

748 
GPU_gp1
 &= ~0x08000000;

749 
PackëCou¡
 = 
FømeToRód
 = 
FømeToWrôe
 = 0;

752 
GPU_gp1
 &= ~0x08000000;

753 
PackëCou¡
 = 
FømeToRód
 = 
FømeToWrôe
 = 0;

756 
GPU_gp1
 = (GPU_gp1 & ~0x00800000Ë| ((
d©a
 & 1) << 23);

759 i‡(
d©a
 == 0x04000000)

760 
PackëCou¡
 = 0;

761 
GPU_gp1
 = (GPU_gp1 & ~0x60000000Ë| ((
d©a
 & 3) << 29);

764 
Di•œyAªa
[0] = 
d©a
 & 0x000003FF;

765 
Di•œyAªa
[1] = (
d©a
 & 0x000FFC00) >> 10;

768 
Di•œyAªa
[4] = 
d©a
 & 0x00000FFF;

769 
Di•œyAªa
[6] = (
d©a
 & 0x00FFF000) >> 12;

774 
Di•œyAªa
[5] = 
d©a
 & 0x000003FF;

775 
Di•œyAªa
[7] = (
d©a
 & 0x000FFC00) >> 10;

799 
OthîEnv
[0x08] = (
d©a
 >> 7) & 1;

800 
GPU_gp1
 =

801 (
GPU_gp1
 & ~0x007F0000Ë| ((
d©a
 & 0x3F) << 17) |

802 ((
d©a
 & 0x40) << 10);

805 
ﬁdResX
 = 
Di•œyAªa
[2];

806 
ﬁdResY
 = 
Di•œyAªa
[3];

808 
Di•œyAªa
[2] = 
H‹iz⁄èlResﬁuti⁄
[(
GPU_gp1
 >> 16) & 7];

809 
Di•œyAªa
[3] = 
VîtiˇlResﬁuti⁄
[(
GPU_gp1
 >> 19) & 3];

812 
isPAL
 = (
d©a
 & 0x08) ? 1 : 0;

815 
OthîEnv
[0x09] = 
d©a
 & 1;

818 
d©a
 & 0xffff) {

822 
GPU_gp0
 = (
DøwögAªa
[1] << 10) | DrawingArea[0];

825 
GPU_gp0
 =

826 ((
DøwögAªa
[3] - 1) << 10) | (DrawingArea[2] -

831 
GPU_gp0
 = (
DøwögOff£t
[1] << 11) | DrawingOffset[0];

834 
GPU_gp0
 = 2;

837 
GPU_gp0
 = 0;

841 
	}
}

844 
u32
 
	$GPU_ªadSètus
()

847 
u32
 
ªt
=
GPU_gp1
;

849  
ªt
;

850 
	}
}

854 
	$GPU_wrôeD©a
(
u32
 
d©a
)

856 
GPU_gp1
 &= ~0x14000000;

857 i‡(
FømeToWrôe
 > 0) {

858 
gpu_pvøm
[
gpu_px
]=(
u16
)
d©a
;

859 i‡(++
gpu_px
>=
gpu_x_íd
) {

860 
gpu_px
 = 
gpu_x_°¨t
;

861 
gpu_pvøm
 += 1024;

862 i‡(++
gpu_py
>=
gpu_y_íd
) {

863 
FømeToWrôe
=0;

864 
GPU_gp1
 &= ~0x08000000;

867 i‡(
FømeToWrôe
 > 0) {

868 
gpu_pvøm
[
gpu_px
]=
d©a
>>16;

869 i‡(++
gpu_px
>=
gpu_x_íd
) {

870 
gpu_px
 = 
gpu_x_°¨t
;

871 
gpu_pvøm
 += 1024;

872 i‡(++
gpu_py
>=
gpu_y_íd
){

873 
FømeToWrôe
=0;

874 
GPU_gp1
 &= ~0x08000000;

879 i‡(
PackëCou¡
) {

880 
PackëCou¡
--;

881 
PackëBuf„r
.
U4
[
PackëIndex
++] = 
d©a
;

883 
PackëBuf„r
.
U4
[0] = 
d©a
;

884 
PackëCou¡
 = 
PackëSize
[
d©a
 >> 24];

885 
PackëIndex
 = 1;

887 i‡(!
PackëCou¡
)

889 
	`gpu_£ndPackë
();

892 
GPU_gp1
 |= 0x14000000;

893 
	}
}

895 
	$GPU_wrôeD©aMem
(
u32
 * 
dmaAddªss
, 
s32
 
dmaCou¡
)

897 
u32
 
ãmp
, 
ãmp2
;

899 
GPU_gp1
 &= ~0x14000000;

901 
dmaCou¡
) {

902 i‡(
FømeToWrôe
 > 0) {

903 
dmaCou¡
--)

905 
u32
 
d©a
 = *
dmaAddªss
++;

907 i‡(
gpu_px
<1024 && 
gpu_py
<512)

908 
gpu_pvøm
[
gpu_px
] = 
d©a
;

909 i‡(++
gpu_px
>=
gpu_x_íd
)

911 
gpu_px
 = 
gpu_x_°¨t
;

912 
gpu_pvøm
 += 1024;

913 i‡(++
gpu_py
>=
gpu_y_íd
)

915 
FømeToWrôe
 = 0;

916 
GPU_gp1
 &= ~0x08000000;

920 i‡(
gpu_px
<1024 && 
gpu_py
<512)

921 
gpu_pvøm
[
gpu_px
] = 
d©a
>>16;

922 i‡(++
gpu_px
>=
gpu_x_íd
)

924 
gpu_px
 = 
gpu_x_°¨t
;

925 
gpu_pvøm
 += 1024;

926 i‡(++
gpu_py
>=
gpu_y_íd
)

928 
FømeToWrôe
 = 0;

929 
GPU_gp1
 &= ~0x08000000;

937 
ãmp
 = *
dmaAddªss
++;

938 
dmaCou¡
--;

939 i‡(
PackëCou¡
) {

940 
PackëBuf„r
.
U4
[
PackëIndex
++] = 
ãmp
;

941 
PackëCou¡
--;

943 
PackëBuf„r
.
U4
[0] = 
ãmp
;

944 
PackëCou¡
 = 
PackëSize
[
ãmp
 >> 24];

945 
PackëIndex
 = 1;

947 i‡(!
PackëCou¡
)

949 
	`gpu_£ndPackë
();

953 
GPU_gp1
 = (GPU_gp1 | 0x14000000) & ~0x60000000;

954 
	}
}

957 
u32
 
	$GPU_ªadD©a
()

959 
GPU_gp1
 &= ~0x14000000;

960 i‡(
FømeToRód
)

962 
GPU_gp0
 = 
gpu_pvøm
[
gpu_px
];

963 i‡(++
gpu_px
>=
gpu_x_íd
) {

964 
gpu_px
 = 
gpu_x_°¨t
;

965 
gpu_pvøm
 += 1024;

966 i‡(++
gpu_py
>=
gpu_y_íd
Ë
FømeToRód
=0;

968 
GPU_gp0
 |
gpu_pvøm
[
gpu_px
]<<16;

969 i‡(++
gpu_px
>=
gpu_x_íd
) {

970 
gpu_px
 = 
gpu_x_°¨t
;

971 
gpu_pvøm
 +=1024;

972 i‡(++
gpu_py
>=
gpu_y_íd
Ë
FømeToRód
=0;

975 if–
FømeToRód
 =0 ) 
GPU_gp1
 &= ~0x08000000;

977 
GPU_gp1
 |= 0x14000000;

979  (
GPU_gp0
);

980 
	}
}

982 
	$GPU_ªadD©aMem
(
u32
 * 
dmaAddªss
, 
s32
 
dmaCou¡
)

984 if–
FømeToRód
 == 0 ) ;

986 
GPU_gp1
 &= ~0x14000000;

991 
u32
 
d©a
 = ()
gpu_pvøm
[
gpu_px
];

993 i‡(++
gpu_px
>=
gpu_x_íd
)

995 
gpu_px
 = 
gpu_x_°¨t
;

996 
gpu_pvøm
 += 1024;

1000 
d©a
 |()(
gpu_pvøm
[
gpu_px
])<<16;

1002 *
dmaAddªss
++ = 
d©a
;

1004 i‡(++
gpu_px
>=
gpu_x_íd
)

1006 
gpu_px
 = 
gpu_x_°¨t
;

1007 
gpu_pvøm
 += 1024;

1008 i‡(++
gpu_py
>=
gpu_y_íd
)

1010 
FømeToRód
 = 0;

1011 
GPU_gp1
 &= ~0x08000000;

1015 } --
dmaCou¡
);

1017 
GPU_gp1
 = (GPU_gp1 | 0x14000000) & ~0x60000000;

1018 
	}
}

1020 
	$GPU_dmaChaö
(
u32
 * 
ba£Addr
, u32 
dmaVAddr
)

1022 
u32
 
ãmp
, 
d©a
, *
addªss
, 
cou¡
, 
off£t
;

1023 
GPU_gp1
 &= ~0x14000000;

1024 
dmaVAddr
 &= 0x00FFFFFF;

1025 
dmaVAddr
 != 0xFFFFFF) {

1026 
addªss
 = (
ba£Addr
 + (
dmaVAddr
 >> 2));

1027 
d©a
 = *
addªss
++;

1028 
cou¡
 = (
d©a
 >> 24);

1029 
off£t
 = 
d©a
 & 0x00FFFFFF;

1030 i‡(
dmaVAddr
 !
off£t
)

1031 
dmaVAddr
 = 
off£t
;

1033 
dmaVAddr
 = 0xFFFFFF;

1034 
cou¡
) {

1035 
d©a
 = *
addªss
++;

1036 
cou¡
--;

1038 i‡(
PackëCou¡
) {

1039 
PackëCou¡
--;

1040 
PackëBuf„r
.
U4
[
PackëIndex
++] = 
d©a
;

1042 
PackëBuf„r
.
U4
[0] = 
d©a
;

1043 
PackëCou¡
 = 
PackëSize
[
d©a
 >> 24];

1044 
PackëIndex
 = 1;

1047 i‡(!
PackëCou¡
)

1049 
	`gpu_£ndPackë
();

1053 
GPU_gp1
 = (GPU_gp1 | 0x14000000) & ~0x60000000;

1056 
	}
}

	@src/gpu/gpu_unai/gpu.cpp

22 
	~<°ddef.h
>

23 
	~"∂ugös.h
"

24 
	~"psxcomm⁄.h
"

25 
	~"p‹t.h
"

26 
	~"gpu_u«i.h
"

28 
	#GPU_INLINE
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

30 
	#VIDEO_WIDTH
 320

	)

32 #ifde‡
TIME_IN_MSEC


33 
	#TPS
 1000

	)

35 
	#TPS
 1000000

	)

38 
	#IS_PAL
 (
gpu_u«i
.
GPU_GP1
&(0x08<<17))

	)

50 
u16
 
	gGPU_FømeBuf„r
[(
FRAME_BUFFER_SIZE
*2 + 4096)/2] 
__©åibuã__
((
Æig√d
(32)));

54 
	~"gpu_fixedpoöt.h
"

58 
	~"gpu_ö√r.h
"

62 
	~"gpu_ø°î_image.h
"

66 
	~"gpu_ø°î_löe.h
"

70 
	~"gpu_ø°î_pﬁyg⁄.h
"

74 
	~"gpu_ø°î_•rôe.h
"

78 
	~"gpu_comm™d.h
"

81 
	$gpuRe£t
()

83 
	`mem£t
((*)&
gpu_u«i
, 0, (gpu_unai));

84 
gpu_u«i
.
vøm
 = (
u16
*)
GPU_FømeBuf„r
 + (4096/2);

85 
gpu_u«i
.
GPU_GP1
 = 0x14802000;

86 
gpu_u«i
.
DøwögAªa
[2] = 256;

87 
gpu_u«i
.
DøwögAªa
[3] = 240;

88 
gpu_u«i
.
Di•œyAªa
[2] = 256;

89 
gpu_u«i
.
Di•œyAªa
[3] = 240;

90 
gpu_u«i
.
Di•œyAªa
[5] = 240;

91 
gpu_u«i
.
TextuªWödow
[0] = 0;

92 
gpu_u«i
.
TextuªWödow
[1] = 0;

93 
gpu_u«i
.
TextuªWödow
[2] = 255;

94 
gpu_u«i
.
TextuªWödow
[3] = 255;

97 c⁄° 
u32
 
fb
 = 
FIXED_BITS
;

98 
gpu_u«i
.
u_msk
 = (((
u32
)gpu_u«i.
TextuªWödow
[2]Ë<< 
fb
) | ((1 << fb) - 1);

99 
gpu_u«i
.
v_msk
 = (((
u32
)gpu_u«i.
TextuªWödow
[3]Ë<< 
fb
) | ((1 << fb) - 1);

102 
gpu_u«i
.
c⁄fig
 = 
gpu_u«i_c⁄fig_ext
;

103 
gpu_u«i
.
ûa˚_mask
 = gpu_u«i.
c⁄fig
.
ûa˚_f‹˚
;

104 
gpu_u«i
.
‰ameskù
.
skùCou¡
 = gpu_u«i.
c⁄fig
.
‰ameskù_cou¡
;

106 
	`SëupLightLUT
();

107 
	`SëupDôhîögC⁄°™ts
();

108 
	}
}

111 
	$GPU_öô
()

113 
	`gpuRe£t
();

115 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


117 
i
=1;i<=(1<<
TABLE_BITS
);++i)

119 
s_övTabÀ
[
i
-1]=0x7fffffff/i;

123 
gpu_u«i
.
fb_dúty
 = 
åue
;

124 
gpu_u«i
.
dma
.
œ°_dma
 = 
NULL
;

126 
	}
}

129 
	$GPU_shutdown
()

132 
	}
}

135 
	$GPU_‰ìze
(
u32
 
bWrôe
, 
GPUFªeze_t
* 
p2
)

137 i‡(!
p2
)  (0);

138 i‡(
p2
->
ulFªezeVîsi⁄
 != 1)  (0);

140 i‡(
bWrôe
)

142 
p2
->
ulSètus
 = 
gpu_u«i
.
GPU_GP1
;

143 
	`mem£t
(
p2
->
ulC⁄åﬁ
, 0, (p2->ulControl));

145 
p2
->
ulC⁄åﬁ
[3] = (3 << 24Ë| ((
gpu_u«i
.
GPU_GP1
 >> 23) & 1);

146 
p2
->
ulC⁄åﬁ
[4] = (4 << 24Ë| ((
gpu_u«i
.
GPU_GP1
 >> 29) & 3);

147 
p2
->
ulC⁄åﬁ
[5] = (5 << 24Ë| (
gpu_u«i
.
Di•œyAªa
[0] | (gpu_unai.DisplayArea[1] << 10));

148 
p2
->
ulC⁄åﬁ
[6] = (6 << 24) | (2560 << 12);

149 
p2
->
ulC⁄åﬁ
[7] = (7 << 24Ë| (
gpu_u«i
.
Di•œyAªa
[4] | (gpu_unai.DisplayArea[5] << 10));

150 
p2
->
ulC⁄åﬁ
[8] = (8 << 24Ë| ((
gpu_u«i
.
GPU_GP1
 >> 17) & 0x3f) | ((gpu_unai.GPU_GP1 >> 10) & 0x40);

151 
	`mem˝y
((*)
p2
->
psxVRam
, (*)
gpu_u«i
.
vøm
, 
FRAME_BUFFER_SIZE
);

156 
	`GPU_wrôeSètus
(
u32
 
d©a
);

157 
gpu_u«i
.
GPU_GP1
 = 
p2
->
ulSètus
;

158 
	`mem˝y
((*)
gpu_u«i
.
vøm
, (*)
p2
->
psxVRam
, 
FRAME_BUFFER_SIZE
);

159 
	`GPU_wrôeSètus
((5 << 24Ë| 
p2
->
ulC⁄åﬁ
[5]);

160 
	`GPU_wrôeSètus
((7 << 24Ë| 
p2
->
ulC⁄åﬁ
[7]);

161 
	`GPU_wrôeSètus
((8 << 24Ë| 
p2
->
ulC⁄åﬁ
[8]);

162 
	`gpuSëTextuª
(
gpu_u«i
.
GPU_GP1
);

166 
	}
}

172 
u8
 
	gPackëSize
[256] =

193 
INLINE
 
	$gpuSídPackë
()

195 
	`gpuSídPackëFun˘i⁄
(
gpu_u«i
.
PackëBuf„r
.
U4
[0]>>24);

196 
	}
}

199 
INLINE
 
	$gpuCheckPackë
(
u32
 
uD©a
)

201 i‡(
gpu_u«i
.
PackëCou¡
)

203 
gpu_u«i
.
PackëBuf„r
.
U4
[gpu_u«i.
PackëIndex
++] = 
uD©a
;

204 --
gpu_u«i
.
PackëCou¡
;

208 
gpu_u«i
.
PackëBuf„r
.
U4
[0] = 
uD©a
;

209 
gpu_u«i
.
PackëCou¡
 = 
PackëSize
[
uD©a
 >> 24];

210 
gpu_u«i
.
PackëIndex
 = 1;

212 i‡(!
gpu_u«i
.
PackëCou¡
Ë
	`gpuSídPackë
();

213 
	}
}

216 
	$GPU_wrôeD©aMem
(
u32
* 
dmaAddªss
, 
dmaCou¡
)

218 #ifde‡
ENABLE_GPU_LOG_SUPPORT


219 
	`Ârötf
(
°dout
,"GPU_wrôeD©aMem(%d)\n",
dmaCou¡
);

221 
u32
 
d©a
;

222 c⁄° 
u16
 *
VIDEO_END
 = (u16*)
gpu_u«i
.
vøm
+(
FRAME_BUFFER_SIZE
/2)-1;

223 
gpu_u«i
.
GPU_GP1
 &= ~0x14000000;

225 
dmaCou¡
)

227 i‡(
gpu_u«i
.
dma
.
FømeToWrôe
)

229 
dmaCou¡
)

231 
dmaCou¡
--;

232 
d©a
 = *
dmaAddªss
++;

233 i‡((&
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
])>(
VIDEO_END
)) gpu_unai.dma.pvram-=512*1024;

234 
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
] = 
d©a
;

235 i‡(++
gpu_u«i
.
dma
.
px
 >gpu_u«i.dma.
x_íd
)

237 
gpu_u«i
.
dma
.
px
 = 0;

238 
gpu_u«i
.
dma
.
pvøm
 += 1024;

239 i‡(++
gpu_u«i
.
dma
.
py
 >gpu_u«i.dma.
y_íd
)

241 
gpu_u«i
.
dma
.
FømeToWrôe
 = 
Ál£
;

242 
gpu_u«i
.
GPU_GP1
 &= ~0x08000000;

243 
gpu_u«i
.
fb_dúty
 = 
åue
;

247 i‡((&
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
])>(
VIDEO_END
)) gpu_unai.dma.pvram-=512*1024;

248 
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
] = 
d©a
>>16;

249 i‡(++
gpu_u«i
.
dma
.
px
 >gpu_u«i.dma.
x_íd
)

251 
gpu_u«i
.
dma
.
px
 = 0;

252 
gpu_u«i
.
dma
.
pvøm
 += 1024;

253 i‡(++
gpu_u«i
.
dma
.
py
 >gpu_u«i.dma.
y_íd
)

255 
gpu_u«i
.
dma
.
FømeToWrôe
 = 
Ál£
;

256 
gpu_u«i
.
GPU_GP1
 &= ~0x08000000;

257 
gpu_u«i
.
fb_dúty
 = 
åue
;

265 
d©a
 = *
dmaAddªss
++;

266 
dmaCou¡
--;

267 
	`gpuCheckPackë
(
d©a
);

271 
gpu_u«i
.
GPU_GP1
 = (gpu_unai.GPU_GP1 | 0x14000000) & ~0x60000000;

272 
	}
}

274 
	$GPU_dmaChaö
(
u32
 *
ømba£
, u32 
°¨t_addr
)

276 #ifde‡
ENABLE_GPU_LOG_SUPPORT


277 
	`Ârötf
(
°dout
,"GPU_dmaChaö(0x%x)\n",
°¨t_addr
);

280 
u32
 
addr
, *
li°
;

281 
u32
 
Àn
, 
cou¡
;

282 
dma_w‹ds
 = 0;

284 i‡(
gpu_u«i
.
dma
.
œ°_dma
) *gpu_unai.dma.last_dma |= 0x800000;

286 
gpu_u«i
.
GPU_GP1
 &= ~0x14000000;

288 
addr
 = 
°¨t_addr
 & 0xffffff;

289 
cou¡
 = 0; 
addr
 != 0xffffff; count++)

291 
li°
 = 
ømba£
 + (
addr
 & 0x1fffff) / 4;

292 
Àn
 = 
li°
[0] >> 24;

293 
addr
 = 
li°
[0] & 0xffffff;

295 
dma_w‹ds
 +1 + 
Àn
;

298 
li°
[0] |= 0x800000;

300 i‡(
Àn
Ë
	`GPU_wrôeD©aMem
(
li°
 + 1,Üen);

302 i‡(
addr
 & 0x800000)

304 #ifde‡
ENABLE_GPU_LOG_SUPPORT


305 
	`Ârötf
(
°dout
,"GPU_dmaChain(LOOP)\n");

312 
addr
 = 
°¨t_addr
 & 0x1fffff;

313 
cou¡
-- > 0)

315 
li°
 = 
ømba£
 + 
addr
 / 4;

316 
addr
 = 
li°
[0] & 0x1fffff;

317 
li°
[0] &= ~0x800000;

320 i‡(
gpu_u«i
.
dma
.
œ°_dma
) *gpu_unai.dma.last_dma &= ~0x800000;

321 
gpu_u«i
.
dma
.
œ°_dma
 = 
ømba£
 + (
°¨t_addr
 & 0x1fffff) / 4;

323 
gpu_u«i
.
GPU_GP1
 = (gpu_unai.GPU_GP1 | 0x14000000) & ~0x60000000;

325  
dma_w‹ds
;

326 
	}
}

329 
	$GPU_wrôeD©a
(
u32
 
d©a
)

331 c⁄° 
u16
 *
VIDEO_END
 = (u16*)
gpu_u«i
.
vøm
+(
FRAME_BUFFER_SIZE
/2)-1;

332 #ifde‡
ENABLE_GPU_LOG_SUPPORT


333 
	`Ârötf
(
°dout
,"GPU_writeData()\n");

335 
gpu_u«i
.
GPU_GP1
 &= ~0x14000000;

337 i‡(
gpu_u«i
.
dma
.
FømeToWrôe
)

339 i‡((&
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
])>(
VIDEO_END
)) gpu_unai.dma.pvram-=512*1024;

340 
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
]=(
u16
)
d©a
;

341 i‡(++
gpu_u«i
.
dma
.
px
 >gpu_u«i.dma.
x_íd
)

343 
gpu_u«i
.
dma
.
px
 = 0;

344 
gpu_u«i
.
dma
.
pvøm
 += 1024;

345 i‡(++
gpu_u«i
.
dma
.
py
 >gpu_u«i.dma.
y_íd
)

347 
gpu_u«i
.
dma
.
FømeToWrôe
 = 
Ál£
;

348 
gpu_u«i
.
GPU_GP1
 &= ~0x08000000;

349 
gpu_u«i
.
fb_dúty
 = 
åue
;

352 i‡(
gpu_u«i
.
dma
.
FømeToWrôe
)

354 i‡((&
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
])>(
VIDEO_END
)) gpu_unai.dma.pvram-=512*1024;

355 
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
]=
d©a
>>16;

356 i‡(++
gpu_u«i
.
dma
.
px
 >gpu_u«i.dma.
x_íd
)

358 
gpu_u«i
.
dma
.
px
 = 0;

359 
gpu_u«i
.
dma
.
pvøm
 += 1024;

360 i‡(++
gpu_u«i
.
dma
.
py
 >gpu_u«i.dma.
y_íd
)

362 
gpu_u«i
.
dma
.
FømeToWrôe
 = 
Ál£
;

363 
gpu_u«i
.
GPU_GP1
 &= ~0x08000000;

364 
gpu_u«i
.
fb_dúty
 = 
åue
;

371 
	`gpuCheckPackë
(
d©a
);

373 
gpu_u«i
.
GPU_GP1
 |= 0x14000000;

374 
	}
}

378 
	$GPU_ªadD©aMem
(
u32
* 
dmaAddªss
, 
dmaCou¡
)

380 c⁄° 
u16
 *
VIDEO_END
 = (u16*)
gpu_u«i
.
vøm
+(
FRAME_BUFFER_SIZE
/2)-1;

381 #ifde‡
ENABLE_GPU_LOG_SUPPORT


382 
	`Ârötf
(
°dout
,"GPU_ªadD©aMem(%d)\n",
dmaCou¡
);

384 if(!
gpu_u«i
.
dma
.
FømeToRód
) ;

386 
gpu_u«i
.
GPU_GP1
 &= ~0x14000000;

389 i‡((&
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
])>(
VIDEO_END
)) gpu_unai.dma.pvram-=512*1024;

393 
u32
 
d©a
 = (u32)
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
];

395 i‡(++
gpu_u«i
.
dma
.
px
 >gpu_u«i.dma.
x_íd
)

397 
gpu_u«i
.
dma
.
px
 = 0;

398 
gpu_u«i
.
dma
.
pvøm
 += 1024;

401 i‡((&
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
])>(
VIDEO_END
)) gpu_unai.dma.pvram-=512*1024;

405 
d©a
 |(
u32
)(
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
])<<16;

407 *
dmaAddªss
++ = 
d©a
;

409 i‡(++
gpu_u«i
.
dma
.
px
 >gpu_u«i.dma.
x_íd
)

411 
gpu_u«i
.
dma
.
px
 = 0;

412 
gpu_u«i
.
dma
.
pvøm
 += 1024;

413 i‡(++
gpu_u«i
.
dma
.
py
 >gpu_u«i.dma.
y_íd
)

415 
gpu_u«i
.
dma
.
FømeToRód
 = 
Ál£
;

416 
gpu_u«i
.
GPU_GP1
 &= ~0x08000000;

420 } --
dmaCou¡
);

422 
gpu_u«i
.
GPU_GP1
 = (gpu_unai.GPU_GP1 | 0x14000000) & ~0x60000000;

423 
	}
}

428 
u32
 
	$GPU_ªadD©a
()

430 c⁄° 
u16
 *
VIDEO_END
 = (u16*)
gpu_u«i
.
vøm
+(
FRAME_BUFFER_SIZE
/2)-1;

431 #ifde‡
ENABLE_GPU_LOG_SUPPORT


432 
	`Ârötf
(
°dout
,"GPU_readData()\n");

434 
gpu_u«i
.
GPU_GP1
 &= ~0x14000000;

435 i‡(
gpu_u«i
.
dma
.
FømeToRód
)

437 i‡((&
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
])>(
VIDEO_END
)) gpu_unai.dma.pvram-=512*1024;

438 
gpu_u«i
.
GPU_GP0
 = gpu_u«i.
dma
.
pvøm
[gpu_u«i.dma.
px
];

439 i‡(++
gpu_u«i
.
dma
.
px
 >gpu_u«i.dma.
x_íd
)

441 
gpu_u«i
.
dma
.
px
 = 0;

442 
gpu_u«i
.
dma
.
pvøm
 += 1024;

443 i‡(++
gpu_u«i
.
dma
.
py
 >gpu_u«i.dma.
y_íd
)

445 
gpu_u«i
.
dma
.
FømeToRód
 = 
Ál£
;

446 
gpu_u«i
.
GPU_GP1
 &= ~0x08000000;

449 i‡((&
gpu_u«i
.
dma
.
pvøm
[gpu_u«i.dma.
px
])>(
VIDEO_END
)) gpu_unai.dma.pvram-=512*1024;

450 
gpu_u«i
.
GPU_GP0
 |gpu_u«i.
dma
.
pvøm
[gpu_u«i.dma.
px
]<<16;

451 i‡(++
gpu_u«i
.
dma
.
px
 >gpu_u«i.dma.
x_íd
)

453 
gpu_u«i
.
dma
.
px
 = 0;

454 
gpu_u«i
.
dma
.
pvøm
 += 1024;

455 i‡(++
gpu_u«i
.
dma
.
py
 >gpu_u«i.dma.
y_íd
)

457 
gpu_u«i
.
dma
.
FømeToRód
 = 
Ál£
;

458 
gpu_u«i
.
GPU_GP1
 &= ~0x08000000;

463 
gpu_u«i
.
GPU_GP1
 |= 0x14000000;

465  (
gpu_u«i
.
GPU_GP0
);

466 
	}
}

469 
u32
 
	$GPU_ªadSètus
()

471  
gpu_u«i
.
GPU_GP1
;

472 
	}
}

474 
INLINE
 
	$GPU_NoSkù
()

476 #ifde‡
ENABLE_GPU_LOG_SUPPORT


477 
	`Ârötf
(
°dout
,"GPU_NoSkip()\n");

479 
gpu_u«i
.
‰ameskù
.
wasSkù
 = gpu_u«i.‰ameskù.
isSkù
;

480 i‡(
gpu_u«i
.
‰ameskù
.
isSkù
)

482 
gpu_u«i
.
‰ameskù
.
isSkù
 = 
Ál£
;

483 
gpu_u«i
.
‰ameskù
.
skùGPU
 = 
Ál£
;

487 
gpu_u«i
.
‰ameskù
.
isSkù
 = gpu_u«i.‰ameskù.
skùFøme
;

488 
gpu_u«i
.
‰ameskù
.
skùGPU
 = gpu_u«i.‰ameskù.
skùFøme
;

490 
	}
}

493 
	$GPU_wrôeSètus
(
u32
 
d©a
)

495 #ifde‡
ENABLE_GPU_LOG_SUPPORT


496 
	`Ârötf
(
°dout
,"GPU_wrôeSètus(%d,%d)\n",
d©a
>>24,data & 0xff);

498 
d©a
 >> 24) {

500 
	`gpuRe£t
();

503 
gpu_u«i
.
GPU_GP1
 &= ~0x08000000;

504 
gpu_u«i
.
PackëCou¡
 = 0;

505 
gpu_u«i
.
dma
.
FømeToRód
 = gpu_u«i.dma.
FømeToWrôe
 = 
Ál£
;

508 
gpu_u«i
.
GPU_GP1
 &= ~0x08000000;

509 
gpu_u«i
.
PackëCou¡
 = 0;

510 
gpu_u«i
.
dma
.
FømeToRód
 = gpu_u«i.dma.
FømeToWrôe
 = 
Ál£
;

513 
gpu_u«i
.
GPU_GP1
 = (gpu_u«i.GPU_GP1 & ~0x00800000Ë| ((
d©a
 & 1) << 23);

516 i‡(
d©a
 =0x04000000Ë
gpu_u«i
.
PackëCou¡
 = 0;

517 
gpu_u«i
.
GPU_GP1
 = (gpu_u«i.GPU_GP1 & ~0x60000000Ë| ((
d©a
 & 3) << 29);

521 
gpu_u«i
.
Di•œyAªa
[0] = 
d©a
 & 0x3ff;

522 
gpu_u«i
.
Di•œyAªa
[1] = (
d©a
 >> 10) & 0x1ff;

523 
	`GPU_NoSkù
();

543 
u32
 
v1
=
d©a
 & 0x000003FF;

544 
u32
 
v2
=(
d©a
 & 0x000FFC00) >> 10;

545 i‡((
gpu_u«i
.
Di•œyAªa
[4]!=
v1
)||(gpu_u«i.Di•œyAªa[5]!=
v2
))

547 
gpu_u«i
.
Di•œyAªa
[4] = 
v1
;

548 
gpu_u«i
.
Di•œyAªa
[5] = 
v2
;

549 #ifde‡
ENABLE_GPU_LOG_SUPPORT


550 
	`Ârötf
(
°dout
,"video_clear(CHANGE_Y)\n");

552 
	`video_˛ór
();

558 c⁄° 
u32
 
H‹iz⁄èlResﬁuti⁄
[8] = { 256, 368, 320, 384, 512, 512, 640, 640 };

559 c⁄° 
u32
 
VîtiˇlResﬁuti⁄
[4] = { 240, 480, 256, 480 };

560 
gpu_u«i
.
GPU_GP1
 = (gpu_u«i.GPU_GP1 & ~0x007F0000Ë| ((
d©a
 & 0x3F) << 17) | ((data & 0x40) << 10);

561 #ifde‡
ENABLE_GPU_LOG_SUPPORT


562 
	`Ârötf
(
°dout
,"GPU_wrôeSètus(RES=%dx%d,BITS=%d,PAL=%d)\n",
H‹iz⁄èlResﬁuti⁄
[(
gpu_u«i
.
GPU_GP1
 >> 16) & 7],

563 
VîtiˇlResﬁuti⁄
[(
gpu_u«i
.
GPU_GP1
 >> 19Ë& 3],(gpu_u«i.GPU_GP1&0x00200000?24:15),(
IS_PAL
?1:0));

566 
u32
 
√w_width
 = 
H‹iz⁄èlResﬁuti⁄
[(
gpu_u«i
.
GPU_GP1
 >> 16) & 7];

567 
u32
 
√w_height
 = 
VîtiˇlResﬁuti⁄
[(
gpu_u«i
.
GPU_GP1
 >> 19) & 3];

569 i‡(
gpu_u«i
.
Di•œyAªa
[2] !
√w_width
 || gpu_u«i.Di•œyAªa[3] !
√w_height
)

572 
gpu_u«i
.
Di•œyAªa
[2] = 
√w_width
;

574 i‡(
	`PixñSkùE«bÀd
()) {

578 
gpu_u«i
.
Di•œyAªa
[2])

580 512: 
gpu_u«i
.
blô_mask
 = 0xa4; ;

581 640: 
gpu_u«i
.
blô_mask
 = 0xaa; ;

582 : 
gpu_u«i
.
blô_mask
 = 0; ;

585 
gpu_u«i
.
blô_mask
 = 0;

589 
gpu_u«i
.
Di•œyAªa
[3] = 
√w_height
;

591 i‡(
	`LöeSkùE«bÀd
()) {

595 i‡(
gpu_u«i
.
Di•œyAªa
[3] == 480) {

596 i‡(
gpu_u«i
.
c⁄fig
.
ûa˚_f‹˚
) {

597 
gpu_u«i
.
ûa˚_mask
 = 3;

599 
gpu_u«i
.
ûa˚_mask
 = 1;

603 
gpu_u«i
.
ûa˚_mask
 = gpu_u«i.
c⁄fig
.
ûa˚_f‹˚
;

606 
gpu_u«i
.
ûa˚_mask
 = 0;

609 #ifde‡
ENABLE_GPU_LOG_SUPPORT


610 
	`Ârötf
(
°dout
,"video_clear(CHANGE_RES)\n");

612 
	`video_˛ór
();

618 
d©a
 & 0xff) {

619 2: 
gpu_u«i
.
GPU_GP0
 = gpu_u«i.
ãx_wödow
; ;

620 3: 
gpu_u«i
.
GPU_GP0
 = (gpu_u«i.
DøwögAªa
[1] << 10) | gpu_unai.DrawingArea[0]; ;

621 4: 
gpu_u«i
.
GPU_GP0
 = ((gpu_u«i.
DøwögAªa
[3]-1) << 10) | (gpu_unai.DrawingArea[2]-1); ;

622 5: 6: 
gpu_u«i
.
GPU_GP0
 = (((
u32
)gpu_u«i.
DøwögOff£t
[1] & 0x7ff) << 11) | ((u32)gpu_unai.DrawingOffset[0] & 0x7ff); ;

623 7: 
gpu_u«i
.
GPU_GP0
 = 2; ;

624 8: 15: 
gpu_u«i
.
GPU_GP0
 = 0xBFC03720; ;

628 
	}
}

631 
	~"gpu_blô.h
"

633 
	$gpuVideoOuçut
()

635 
h0
, 
x0
, 
y0
, 
w0
, 
h1
;

637 
x0
 = 
gpu_u«i
.
Di•œyAªa
[0];

638 
y0
 = 
gpu_u«i
.
Di•œyAªa
[1];

640 
w0
 = 
gpu_u«i
.
Di•œyAªa
[2];

641 
h0
 = 
gpu_u«i
.
Di•œyAªa
[3];

643 
h1
 = 
gpu_u«i
.
Di•œyAªa
[5] - gpu_unai.DisplayArea[4];

644 i‡(
h0
 =480Ë
h1
 = 
	`Mö2
(h1*2,480);

646 
boﬁ
 
isRGB24
 = (
gpu_u«i
.
GPU_GP1
 & 0x00200000 ? 
åue
 : 
Ál£
);

647 
u16
* 
d°16
 = 
SCREEN
;

648 
u16
* 
§c16
 = (u16*)
gpu_u«i
.
vøm
;

651 
§c16_offs_msk
 = 1024*512-1;

652 
§c16_offs
 = (
x0
 + 
y0
*1024Ë& 
§c16_offs_msk
;

655 
sizeShi·
 = 1;

656 i‡(
h0
 == 256) {

657 
h0
 = 240;

658 } i‡(
h0
 == 480) {

659 
sizeShi·
 = 2;

661 i‡(
h1
 > 
h0
) {

662 
§c16_offs
 = (§c16_off†+ (((
h1
-
h0
Ë/ 2Ë* 1024)Ë& 
§c16_offs_msk
;

663 
h1
 = 
h0
;

664 } i‡(
h1
<
h0
) {

665 
d°16
 +((
h0
-
h1
Ë>> 
sizeShi·
Ë* 
VIDEO_WIDTH
;

670 
öcY
 = (
h0
==480) ? 2 : 1;

671 
h0
=(h0==480 ? 2048 : 1024);

674 c⁄° 
li
=
gpu_u«i
.
ûa˚_mask
;

675 
boﬁ
 
pi
 = 
	`ProgªssiveI¡îœ˚E«bÀd
();

676 
boﬁ
 
pif
 = 
gpu_u«i
.
¥og_ûa˚_Êag
;

677  
w0
 )

680 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

682 i‡(–0 =(
y0
&
li
ËË&& ((!
pi
Ë|| (
pif
=!pif)))

683 
	`GPU_BlôWWDWW
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

684 
d°16
 +
VIDEO_WIDTH
;

685 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

689 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

691 i‡(–0 =(
y0
&
li
ËË&& ((!
pi
Ë|| (
pif
=!pif)))

692 
	`GPU_BlôWWWWWWWWS
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
, 4);

693 
d°16
 +
VIDEO_WIDTH
;

694 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

699 
§c16_offs
 &= ~1;

700 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

702 i‡(–0 =(
y0
&
li
ËË&& ((!
pi
Ë|| (
pif
=!pif)))

703 
	`GPU_BlôWW
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

704 
d°16
 +
VIDEO_WIDTH
;

705 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

709 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

711 i‡(–0 =(
y0
&
li
ËË&& ((!
pi
Ë|| (
pif
=!pif)))

712 
	`GPU_BlôWWWWWS
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

713 
d°16
 +
VIDEO_WIDTH
;

714 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

718 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

720 i‡(–0 =(
y0
&
li
ËË&& ((!
pi
Ë|| (
pif
=!pif)))

721 
	`GPU_BlôWWSWWSWS
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

722 
d°16
 +
VIDEO_WIDTH
;

723 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

727 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

729 i‡(–0 =(
y0
&
li
ËË&& ((!
pi
Ë|| (
pif
=!pif)))

730 
	`GPU_BlôWS
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

731 
d°16
 +
VIDEO_WIDTH
;

732 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

736 
gpu_u«i
.
¥og_ûa˚_Êag
 = !gpu_unai.prog_ilace_flag;

738 
	`video_Êù
();

739 
	}
}

742 
	#GPU_FRAMESKIP_UPDATE
 3

	)

744 
	$GPU_‰ameskù
 (
boﬁ
 
show
)

746 
u32
 
now
=
	`gë_ticks
();

749 i‡(
gpu_u«i
.
‰ameskù
.
skùCou¡
==0Ëgpu_u«i.‰ameskù.
skùFøme
=
Ál£
;

750 i‡(
gpu_u«i
.
‰ameskù
.
skùCou¡
==7Ë{ i‡(
show
Ëgpu_u«i.‰ameskù.
skùFøme
=!gpu_unai.frameskip.skipFrame; }

751 i‡(
gpu_u«i
.
‰ameskù
.
skùCou¡
==8Ëgpu_u«i.‰ameskù.
skùFøme
=
åue
;

754 
u32
 
•d
=100;

755 
u32
 
‰ames
=0;

756 
u32
 
¥ev
=
now
;

757 
‰ames
++;

758 i‡((
now
-
¥ev
)>=(
TPS
>>
GPU_FRAMESKIP_UPDATE
))

760 i‡(
IS_PAL
Ë
•d
=(
‰ames
<<1);

761 
•d
=((
‰ames
*1001)/600);

762 
•d
<<=
GPU_FRAMESKIP_UPDATE
;

763 
‰ames
=0;

764 
¥ev
=
now
;

766 
gpu_u«i
.
‰ameskù
.
skùCou¡
)

768 1: i‡(
•d
<50Ë
gpu_u«i
.
‰ameskù
.
skùFøme
=
åue
; gpu_u«i.‰ameskù.skùFøme=
Ál£
; ;

769 2: i‡(
•d
<60Ë
gpu_u«i
.
‰ameskù
.
skùFøme
=
åue
; gpu_u«i.‰ameskù.skùFøme=
Ál£
; ;

770 3: i‡(
•d
<70Ë
gpu_u«i
.
‰ameskù
.
skùFøme
=
åue
; gpu_u«i.‰ameskù.skùFøme=
Ál£
; ;

771 4: i‡(
•d
<80Ë
gpu_u«i
.
‰ameskù
.
skùFøme
=
åue
; gpu_u«i.‰ameskù.skùFøme=
Ál£
; ;

772 5: i‡(
•d
<90Ë
gpu_u«i
.
‰ameskù
.
skùFøme
=
åue
; gpu_u«i.‰ameskù.skùFøme=
Ál£
; ;

775 
	}
}

778 
	$GPU_upd©eLa˚
()

781 
gpu_u«i
.
GPU_GP1
 ^= 0x80000000;

784 i‡((
gpu_u«i
.
fb_dúty
Ë&& (!gpu_u«i.
‰ameskù
.
wasSkù
Ë&& (!(gpu_u«i.
GPU_GP1
&0x00800000)))

787 
	`gpuVideoOuçut
();

788 
	`GPU_‰ameskù
(
åue
);

789 #ifde‡
ENABLE_GPU_LOG_SUPPORT


790 
	`Ârötf
(
°dout
,"GPU_updateLace(UPDATE)\n");

793 
	`GPU_‰ameskù
(
Ál£
);

794 #ifde‡
ENABLE_GPU_LOG_SUPPORT


795 
	`Ârötf
(
°dout
,"GPU_updateLace(SKIP)\n");

799 i‡((!
gpu_u«i
.
‰ameskù
.
skùCou¡
Ë&& (gpu_u«i.
Di•œyAªa
[3] =480)Ëgpu_u«i.‰ameskù.
skùGPU
=
åue
;

801 
gpu_u«i
.
fb_dúty
=
Ál£
;

802 
gpu_u«i
.
dma
.
œ°_dma
 = 
NULL
;

803 
	}
}

806 
	$GPU_ªque°S¸ìnRedøw
()

808 
gpu_u«i
.
fb_dúty
 = 
åue
;

809 
	}
}

811 
	$GPU_gëS¸ìnInfo
(
GPUS¸ìnInfo_t
 *
söfo
)

813 
boﬁ
 
dïth24
 = (
gpu_u«i
.
GPU_GP1
 & 0x00200000 ? 
åue
 : 
Ál£
);

814 
öt16_t
 
hªs
 = (
uöt16_t
)
gpu_u«i
.
Di•œyAªa
[2];

815 
öt16_t
 
vªs
 = (
uöt16_t
)
gpu_u«i
.
Di•œyAªa
[3];

816 
öt16_t
 
w
 = 
hªs
;

817 
öt16_t
 
h
 = 
gpu_u«i
.
Di•œyAªa
[5] - gpu_unai.DisplayArea[4];

818 i‡(
vªs
 == 480)

819 
h
 *= 2;

820 i‡(
h
 <0 || h > 
vªs
)

821 
h
 = 
vªs
;

823 
söfo
->
vøm
 = (
uöt8_t
*)
gpu_u«i
.vram;

824 
söfo
->
x
 = (
uöt16_t
)
gpu_u«i
.
Di•œyAªa
[0];

825 
söfo
->
y
 = (
uöt16_t
)
gpu_u«i
.
Di•œyAªa
[1];

826 
söfo
->
w
 = w;

827 
söfo
->
h
 = h;

828 
söfo
->
hªs
 = hres;

829 
söfo
->
vªs
 = vres;

830 
söfo
->
dïth24
 = depth24;

831 
söfo
->
∑l
 = 
IS_PAL
;

832 
	}
}

	@src/gpu/gpu_unai/gpu.h

22 #i‚de‡
GPU_UNAI_GPU_H


23 
	#GPU_UNAI_GPU_H


	)

25 
	sgpu_u«i_c⁄fig_t
 {

26 
uöt8_t
 
	m˛ù_368
:1;

36 
uöt8_t
 
	mûa˚_f‹˚
:3;

42 
uöt8_t
 
	mlightög
:1;

43 
uöt8_t
 
	mÁ°_lightög
:1;

44 
uöt8_t
 
	mbÀndög
:1;

45 
uöt8_t
 
	mdôhîög
:1;

54 #i‚de‡
USE_GPULIB


55 
uöt8_t
 
	m¥og_ûa˚
:1;

62 
uöt8_t
 
	m‰ameskù_cou¡
:3;

66 
gpu_u«i_c⁄fig_t
 
gpu_u«i_c⁄fig_ext
;

69 
boﬁ
 
show_Âs
;

	@src/gpu/gpu_unai/gpu_arm.h

1 #ifde‡
__˝lu•lus


5 
døw_•r16_fuŒ
(
u16
 *
d
, *
s
, u16 *
∑l
, 
löes
);

7 #ifde‡
__˝lu•lus


	@src/gpu/gpu_unai/gpu_blit.h

21 #i‚de‡
_INNER_BLIT_H_


22 
	#_INNER_BLIT_H_


	)

24 #i‚de‡
USE_BGR15


25 
	#RGB24
(
R
,
G
,
B
Ë(((((R)&0xF8)<<8)|(((G)&0xFC)<<3)|(((B)&0xF8)>>3)))

	)

26 
	#RGB16X2
(
C
Ë(((C)&(0x1f001f<<10))>>10Ë| (((C)&(0x1f001f<<5))<<1Ë| (((C)&(0x1f001f<<0))<<11)

	)

27 
	#RGB16
(
C
Ë(((C)&(0x1f<<10))>>10Ë| (((C)&(0x1f<<5))<<1Ë| (((C)&(0x1f<<0))<<11)

	)

29 
	#RGB24
(
R
,
G
,
B
Ë((((R)&0xF8)>>3)|(((G)&0xF8)<<2)|(((B)&0xF8)<<7))

	)

35 
INLINE
 
	$GPU_BlôWW
(c⁄° * 
§c
, 
u16
* 
d°16
, 
boﬁ
 
isRGB24
)

37 
u32
 
uCou¡
;

38 if(!
isRGB24
)

40 #i‚de‡
USE_BGR15


41 
uCou¡
 = 20;

42 c⁄° 
u32
* 
§c32
 = (c⁄° u32*Ë
§c
;

43 
u32
* 
d°32
 = (u32*)(*Ë
d°16
;

45 
d°32
[0] = 
	`RGB16X2
(
§c32
[0]);

46 
d°32
[1] = 
	`RGB16X2
(
§c32
[1]);

47 
d°32
[2] = 
	`RGB16X2
(
§c32
[2]);

48 
d°32
[3] = 
	`RGB16X2
(
§c32
[3]);

49 
d°32
[4] = 
	`RGB16X2
(
§c32
[4]);

50 
d°32
[5] = 
	`RGB16X2
(
§c32
[5]);

51 
d°32
[6] = 
	`RGB16X2
(
§c32
[6]);

52 
d°32
[7] = 
	`RGB16X2
(
§c32
[7]);

53 
d°32
 += 8;

54 
§c32
 += 8;

55 }--
uCou¡
);

57 
	`mem˝y
(
d°16
,
§c
,640);

62 
uCou¡
 = 20;

63 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
;

65 
d°16
[ 0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

66 
d°16
[ 1] = 
	`RGB24
(
§c8
[ 3], src8[ 4], src8[ 5] );

67 
d°16
[ 2] = 
	`RGB24
(
§c8
[ 6], src8[ 7], src8[ 8] );

68 
d°16
[ 3] = 
	`RGB24
(
§c8
[ 9], src8[10], src8[11] );

69 
d°16
[ 4] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

70 
d°16
[ 5] = 
	`RGB24
(
§c8
[15], src8[16], src8[17] );

71 
d°16
[ 6] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

72 
d°16
[ 7] = 
	`RGB24
(
§c8
[21], src8[22], src8[23] );

74 
d°16
[ 8] = 
	`RGB24
(
§c8
[24], src8[25], src8[26] );

75 
d°16
[ 9] = 
	`RGB24
(
§c8
[27], src8[28], src8[29] );

76 
d°16
[10] = 
	`RGB24
(
§c8
[30], src8[31], src8[32] );

77 
d°16
[11] = 
	`RGB24
(
§c8
[33], src8[34], src8[35] );

78 
d°16
[12] = 
	`RGB24
(
§c8
[36], src8[37], src8[38] );

79 
d°16
[13] = 
	`RGB24
(
§c8
[39], src8[40], src8[41] );

80 
d°16
[14] = 
	`RGB24
(
§c8
[42], src8[43], src8[44] );

81 
d°16
[15] = 
	`RGB24
(
§c8
[45], src8[46], src8[47] );

82 
d°16
 += 16;

83 
§c8
 += 48;

84 }--
uCou¡
);

86 
	}
}

88 
INLINE
 
	$GPU_BlôWWSWWSWS
(c⁄° * 
§c
, 
u16
* 
d°16
, 
boﬁ
 
isRGB24
)

90 
u32
 
uCou¡
;

91 if(!
isRGB24
)

93 #i‚de‡
USE_BGR15


94 
uCou¡
 = 32;

95 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

97 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

98 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

99 
d°16
[ 2] = 
	`RGB16
(
§c16
[3]);

100 
d°16
[ 3] = 
	`RGB16
(
§c16
[4]);

101 
d°16
[ 4] = 
	`RGB16
(
§c16
[6]);

102 
d°16
[ 5] = 
	`RGB16
(
§c16
[8]);

103 
d°16
[ 6] = 
	`RGB16
(
§c16
[9]);

104 
d°16
[ 7] = 
	`RGB16
(
§c16
[11]);

105 
d°16
[ 8] = 
	`RGB16
(
§c16
[12]);

106 
d°16
[ 9] = 
	`RGB16
(
§c16
[14]);

107 
d°16
 += 10;

108 
§c16
 += 16;

109 }--
uCou¡
);

111 
uCou¡
 = 64;

112 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

114 *
d°16
++ = *
§c16
++;

115 *
d°16
++ = *
§c16
;

116 
§c16
+=2;

117 *
d°16
++ = *
§c16
++;

118 *
d°16
++ = *
§c16
;

119 
§c16
+=2;

120 *
d°16
++ = *
§c16
;

121 
§c16
+=2;

122 }--
uCou¡
);

127 
uCou¡
 = 32;

128 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
;

130 
d°16
[ 0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

131 
d°16
[ 1] = 
	`RGB24
(
§c8
[ 3], src8[ 4], src8[ 5] );

132 
d°16
[ 2] = 
	`RGB24
(
§c8
[ 9], src8[10], src8[11] );

133 
d°16
[ 3] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

134 
d°16
[ 4] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

136 
d°16
[ 5] = 
	`RGB24
(
§c8
[24], src8[25], src8[26] );

137 
d°16
[ 6] = 
	`RGB24
(
§c8
[27], src8[28], src8[29] );

138 
d°16
[ 7] = 
	`RGB24
(
§c8
[33], src8[34], src8[35] );

139 
d°16
[ 8] = 
	`RGB24
(
§c8
[36], src8[37], src8[38] );

140 
d°16
[ 9] = 
	`RGB24
(
§c8
[42], src8[43], src8[44] );

142 
d°16
 += 10;

143 
§c8
 += 48;

144 }--
uCou¡
);

146 
	}
}

148 
INLINE
 
	$GPU_BlôWWWWWS
(c⁄° * 
§c
, 
u16
* 
d°16
, 
boﬁ
 
isRGB24
)

150 
u32
 
uCou¡
;

151 if(!
isRGB24
)

153 #i‚de‡
USE_BGR15


154 
uCou¡
 = 32;

155 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

157 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

158 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

159 
d°16
[ 2] = 
	`RGB16
(
§c16
[2]);

160 
d°16
[ 3] = 
	`RGB16
(
§c16
[3]);

161 
d°16
[ 4] = 
	`RGB16
(
§c16
[4]);

162 
d°16
[ 5] = 
	`RGB16
(
§c16
[6]);

163 
d°16
[ 6] = 
	`RGB16
(
§c16
[7]);

164 
d°16
[ 7] = 
	`RGB16
(
§c16
[8]);

165 
d°16
[ 8] = 
	`RGB16
(
§c16
[9]);

166 
d°16
[ 9] = 
	`RGB16
(
§c16
[10]);

167 
d°16
 += 10;

168 
§c16
 += 12;

169 }--
uCou¡
);

171 
uCou¡
 = 64;

172 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

174 *
d°16
++ = *
§c16
++;

175 *
d°16
++ = *
§c16
++;

176 *
d°16
++ = *
§c16
++;

177 *
d°16
++ = *
§c16
++;

178 *
d°16
++ = *
§c16
;

179 
§c16
+=2;

180 }--
uCou¡
);

185 
uCou¡
 = 32;

186 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
;

188 
d°16
[0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

189 
d°16
[1] = 
	`RGB24
(
§c8
[ 3], src8[ 4], src8[ 5] );

190 
d°16
[2] = 
	`RGB24
(
§c8
[ 6], src8[ 7], src8[ 8] );

191 
d°16
[3] = 
	`RGB24
(
§c8
[ 9], src8[10], src8[11] );

192 
d°16
[4] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

193 
d°16
[5] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

194 
d°16
[6] = 
	`RGB24
(
§c8
[21], src8[22], src8[23] );

195 
d°16
[7] = 
	`RGB24
(
§c8
[24], src8[25], src8[26] );

196 
d°16
[8] = 
	`RGB24
(
§c8
[27], src8[28], src8[29] );

197 
d°16
[9] = 
	`RGB24
(
§c8
[30], src8[31], src8[32] );

198 
d°16
 += 10;

199 
§c8
 += 36;

200 }--
uCou¡
);

202 
	}
}

204 
INLINE
 
	$GPU_BlôWWWWWWWWS
(c⁄° * 
§c
, 
u16
* 
d°16
, 
boﬁ
 
isRGB24
, 
u32
 
uClù_§c
)

206 
u32
 
uCou¡
;

207 if(!
isRGB24
)

209 #i‚de‡
USE_BGR15


210 
uCou¡
 = 20;

211 c⁄° 
u16
* 
§c16
 = ((c⁄° u16*Ë
§c
Ë+ 
uClù_§c
;

213 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

214 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

215 
d°16
[ 2] = 
	`RGB16
(
§c16
[2]);

216 
d°16
[ 3] = 
	`RGB16
(
§c16
[3]);

217 
d°16
[ 4] = 
	`RGB16
(
§c16
[4]);

218 
d°16
[ 5] = 
	`RGB16
(
§c16
[5]);

219 
d°16
[ 6] = 
	`RGB16
(
§c16
[6]);

220 
d°16
[ 7] = 
	`RGB16
(
§c16
[7]);

222 
d°16
[ 8] = 
	`RGB16
(
§c16
[9]);

223 
d°16
[ 9] = 
	`RGB16
(
§c16
[10]);

224 
d°16
[10] = 
	`RGB16
(
§c16
[11]);

225 
d°16
[11] = 
	`RGB16
(
§c16
[12]);

226 
d°16
[12] = 
	`RGB16
(
§c16
[13]);

227 
d°16
[13] = 
	`RGB16
(
§c16
[14]);

228 
d°16
[14] = 
	`RGB16
(
§c16
[15]);

229 
d°16
[15] = 
	`RGB16
(
§c16
[16]);

230 
d°16
 += 16;

231 
§c16
 += 18;

232 }--
uCou¡
);

234 
uCou¡
 = 40;

235 c⁄° 
u16
* 
§c16
 = ((c⁄° u16*Ë
§c
Ë+ 
uClù_§c
;

237 *
d°16
++ = *
§c16
++;

238 *
d°16
++ = *
§c16
++;

239 *
d°16
++ = *
§c16
++;

240 *
d°16
++ = *
§c16
++;

241 *
d°16
++ = *
§c16
++;

242 *
d°16
++ = *
§c16
++;

243 *
d°16
++ = *
§c16
++;

244 *
d°16
++ = *
§c16
;

245 
§c16
+=2;

246 }--
uCou¡
);

251 
uCou¡
 = 20;

252 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
 + (
uClù_§c
<<1) + uClip_src;

254 
d°16
[ 0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

255 
d°16
[ 1] = 
	`RGB24
(
§c8
[ 3], src8[ 4], src8[ 5] );

256 
d°16
[ 2] = 
	`RGB24
(
§c8
[ 6], src8[ 7], src8[ 8] );

257 
d°16
[ 3] = 
	`RGB24
(
§c8
[ 9], src8[10], src8[11] );

258 
d°16
[ 4] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

259 
d°16
[ 5] = 
	`RGB24
(
§c8
[15], src8[16], src8[17] );

260 
d°16
[ 6] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

261 
d°16
[ 7] = 
	`RGB24
(
§c8
[21], src8[22], src8[23] );

263 
d°16
[ 8] = 
	`RGB24
(
§c8
[27], src8[28], src8[29] );

264 
d°16
[ 9] = 
	`RGB24
(
§c8
[30], src8[31], src8[32] );

265 
d°16
[10] = 
	`RGB24
(
§c8
[33], src8[34], src8[35] );

266 
d°16
[11] = 
	`RGB24
(
§c8
[36], src8[37], src8[38] );

267 
d°16
[12] = 
	`RGB24
(
§c8
[39], src8[40], src8[41] );

268 
d°16
[13] = 
	`RGB24
(
§c8
[42], src8[43], src8[44] );

269 
d°16
[14] = 
	`RGB24
(
§c8
[45], src8[46], src8[47] );

270 
d°16
[15] = 
	`RGB24
(
§c8
[48], src8[49], src8[50] );

271 
d°16
 += 16;

272 
§c8
 += 54;

273 }--
uCou¡
);

275 
	}
}

277 
INLINE
 
	$GPU_BlôWWDWW
(c⁄° * 
§c
, 
u16
* 
d°16
, 
boﬁ
 
isRGB24
)

279 
u32
 
uCou¡
;

280 if(!
isRGB24
)

282 #i‚de‡
USE_BGR15


283 
uCou¡
 = 32;

284 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

286 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

287 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

288 
d°16
[ 2] = dst16[1];

289 
d°16
[ 3] = 
	`RGB16
(
§c16
[2]);

290 
d°16
[ 4] = 
	`RGB16
(
§c16
[3]);

291 
d°16
[ 5] = 
	`RGB16
(
§c16
[4]);

292 
d°16
[ 6] = 
	`RGB16
(
§c16
[5]);

293 
d°16
[ 7] = dst16[6];

294 
d°16
[ 8] = 
	`RGB16
(
§c16
[6]);

295 
d°16
[ 9] = 
	`RGB16
(
§c16
[7]);

296 
d°16
 += 10;

297 
§c16
 += 8;

298 }--
uCou¡
);

300 
uCou¡
 = 64;

301 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

303 *
d°16
++ = *
§c16
++;

304 *
d°16
++ = *
§c16
;

305 *
d°16
++ = *
§c16
++;

306 *
d°16
++ = *
§c16
++;

307 *
d°16
++ = *
§c16
++;

308 }--
uCou¡
);

313 
uCou¡
 = 32;

314 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
;

316 
d°16
[ 0] = 
	`RGB24
(
§c8
[0], src8[ 1], src8[ 2] );

317 
d°16
[ 1] = 
	`RGB24
(
§c8
[3], src8[ 4], src8[ 5] );

318 
d°16
[ 2] = dst16[1];

319 
d°16
[ 3] = 
	`RGB24
(
§c8
[6], src8[ 7], src8[ 8] );

320 
d°16
[ 4] = 
	`RGB24
(
§c8
[9], src8[10], src8[11] );

322 
d°16
[ 5] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

323 
d°16
[ 6] = 
	`RGB24
(
§c8
[15], src8[16], src8[17] );

324 
d°16
[ 7] = dst16[6];

325 
d°16
[ 8] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

326 
d°16
[ 9] = 
	`RGB24
(
§c8
[21], src8[22], src8[23] );

327 
d°16
 += 10;

328 
§c8
 += 24;

329 }--
uCou¡
);

331 
	}
}

334 
INLINE
 
	$GPU_BlôWS
(c⁄° * 
§c
, 
u16
* 
d°16
, 
boﬁ
 
isRGB24
)

336 
u32
 
uCou¡
;

337 if(!
isRGB24
)

339 #i‚de‡
USE_BGR15


340 
uCou¡
 = 20;

341 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

343 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

344 
d°16
[ 1] = 
	`RGB16
(
§c16
[2]);

345 
d°16
[ 2] = 
	`RGB16
(
§c16
[4]);

346 
d°16
[ 3] = 
	`RGB16
(
§c16
[6]);

348 
d°16
[ 4] = 
	`RGB16
(
§c16
[8]);

349 
d°16
[ 5] = 
	`RGB16
(
§c16
[10]);

350 
d°16
[ 6] = 
	`RGB16
(
§c16
[12]);

351 
d°16
[ 7] = 
	`RGB16
(
§c16
[14]);

353 
d°16
[ 8] = 
	`RGB16
(
§c16
[16]);

354 
d°16
[ 9] = 
	`RGB16
(
§c16
[18]);

355 
d°16
[10] = 
	`RGB16
(
§c16
[20]);

356 
d°16
[11] = 
	`RGB16
(
§c16
[22]);

358 
d°16
[12] = 
	`RGB16
(
§c16
[24]);

359 
d°16
[13] = 
	`RGB16
(
§c16
[26]);

360 
d°16
[14] = 
	`RGB16
(
§c16
[28]);

361 
d°16
[15] = 
	`RGB16
(
§c16
[30]);

363 
d°16
 += 16;

364 
§c16
 += 32;

365 }--
uCou¡
);

367 
uCou¡
 = 320;

368 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

370 *
d°16
++ = *
§c16
; src16+=2;

371 }--
uCou¡
);

376 
uCou¡
 = 20;

377 c⁄° 
u8
* 
§c8
 = (c⁄° u8*Ë
§c
;

379 
d°16
[ 0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

380 
d°16
[ 1] = 
	`RGB24
(
§c8
[ 6], src8[ 7], src8[ 8] );

381 
d°16
[ 2] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

382 
d°16
[ 3] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

384 
d°16
[ 4] = 
	`RGB24
(
§c8
[24], src8[25], src8[26] );

385 
d°16
[ 5] = 
	`RGB24
(
§c8
[30], src8[31], src8[32] );

386 
d°16
[ 6] = 
	`RGB24
(
§c8
[36], src8[37], src8[38] );

387 
d°16
[ 7] = 
	`RGB24
(
§c8
[42], src8[43], src8[44] );

389 
d°16
[ 8] = 
	`RGB24
(
§c8
[48], src8[49], src8[50] );

390 
d°16
[ 9] = 
	`RGB24
(
§c8
[54], src8[55], src8[56] );

391 
d°16
[10] = 
	`RGB24
(
§c8
[60], src8[61], src8[62] );

392 
d°16
[11] = 
	`RGB24
(
§c8
[66], src8[67], src8[68] );

394 
d°16
[12] = 
	`RGB24
(
§c8
[72], src8[73], src8[74] );

395 
d°16
[13] = 
	`RGB24
(
§c8
[78], src8[79], src8[80] );

396 
d°16
[14] = 
	`RGB24
(
§c8
[84], src8[85], src8[86] );

397 
d°16
[15] = 
	`RGB24
(
§c8
[90], src8[91], src8[92] );

399 
d°16
 += 16;

400 
§c8
 += 96;

401 }--
uCou¡
);

403 
	}
}

	@src/gpu/gpu_unai/gpu_command.h

23 
	$gpuSëTextuª
(
u16
 
çage
)

25 
u32
 
tmode
, 
tx
, 
ty
;

26 
gpu_u«i
.
GPU_GP1
 = (gpu_u«i.GPU_GP1 & ~0x1FFË| (
çage
 & 0x1FF);

27 
gpu_u«i
.
TextuªWödow
[0]&= ~gpu_unai.TextureWindow[2];

28 
gpu_u«i
.
TextuªWödow
[1]&= ~gpu_unai.TextureWindow[3];

30 
tmode
 = (
çage
 >> 7) & 3;

35 i‡(
tmode
 == 3)Åmode = 2;

37 
tx
 = (
çage
 & 0x0F) << 6;

38 
ty
 = (
çage
 & 0x10) << 4;

40 
tx
 +(
gpu_u«i
.
TextuªWödow
[0] >> (2 - 
tmode
));

41 
ty
 +
gpu_u«i
.
TextuªWödow
[1];

43 
gpu_u«i
.
BLEND_MODE
 = ((
çage
>>5) & 3) << 3;

44 
gpu_u«i
.
TEXT_MODE
 = (
tmode
 + 1) << 5;

45 
gpu_u«i
.
TBA
 = &((
u16
*)gpu_u«i.
vøm
)[
	`FRAME_OFFSET
(
tx
, 
ty
)];

46 
	}
}

49 
INLINE
 
	$gpuSëCLUT
(
u16
 
˛ut
)

51 
gpu_u«i
.
CBA
 = &((
u16
*)gpu_u«i.
vøm
)[(
˛ut
 & 0x7FFF) << 4];

52 
	}
}

54 #ifde‡ 
ENABLE_GPU_NULL_SUPPORT


55 
	#NULL_GPU
(Ë

	)

57 
	#NULL_GPU
()

	)

60 #ifde‡ 
ENABLE_GPU_LOG_SUPPORT


61 
	#DO_LOG
(
ex¥
Ë
¥ötf
 
	)
expr

63 
	#DO_LOG
(
ex¥
Ë{}

	)

66 
	#BÀndög
 (((
PRIM
&0x2Ë&& 
	`BÀndögE«bÀd
()Ë? (PRIM&0x2Ë: 0)

	)

67 
	#BÀndög_Mode
 (((
PRIM
&0x2Ë&& 
	`BÀndögE«bÀd
()Ë? 
gpu_u«i
.
BLEND_MODE
 : 0)

	)

68 
	#Lightög
 (((~
PRIM
)&0x1Ë&& 
	`LightögE«bÀd
())

	)

70 
	#Dôhîög
 (((((~
PRIM
)&0x1Ë|| (PRIM&0x10)Ë&& 
	`DôhîögE«bÀd
()) ? \

71 (
	`F‹˚dDôhîögE«bÀd
(Ë? (1<<9Ë: (
gpu_u«i
.
GPU_GP1
 & (1 << 9))) \

72 : 0)

	)

77 #i‚de‡
USE_GPULIB


80 
	$gpuGP0Cmd_0xEx
(
gpu_u«i_t
 &
gpu_u«i
, 
u32
 
cmd_w‹d
)

83 
u8
 
num
 = (
cmd_w‹d
 >> 24) & 7;

84 
num
) {

87 
	`DO_LOG
(("GP0(0xE1ËDøwModêTexPage(0x%x)\n", 
cmd_w‹d
));

88 
u32
 
cur_ãx∑ge
 = 
gpu_u«i
.
GPU_GP1
 & 0x7FF;

89 
u32
 
√w_ãx∑ge
 = 
cmd_w‹d
 & 0x7FF;

90 i‡(
cur_ãx∑ge
 !
√w_ãx∑ge
) {

91 
gpu_u«i
.
GPU_GP1
 = (gpu_u«i.GPU_GP1 & ~0x7FFË| 
√w_ãx∑ge
;

92 
	`gpuSëTextuª
(
gpu_u«i
.
GPU_GP1
);

98 
	`DO_LOG
(("GP0(0xE2ËTextuªWödow(0x%x)\n", 
cmd_w‹d
));

99 i‡(
cmd_w‹d
 !
gpu_u«i
.
TextuªWödowCur
) {

100 c⁄° 
u8
 
TextuªMask
[32] = {

104 
gpu_u«i
.
TextuªWödowCur
 = 
cmd_w‹d
;

105 
gpu_u«i
.
TextuªWödow
[0] = ((
cmd_w‹d
 >> 10) & 0x1F) << 3;

106 
gpu_u«i
.
TextuªWödow
[1] = ((
cmd_w‹d
 >> 15) & 0x1F) << 3;

107 
gpu_u«i
.
TextuªWödow
[2] = 
TextuªMask
[(
cmd_w‹d
 >> 0) & 0x1F];

108 
gpu_u«i
.
TextuªWödow
[3] = 
TextuªMask
[(
cmd_w‹d
 >> 5) & 0x1F];

109 
gpu_u«i
.
TextuªWödow
[0] &= ~gpu_unai.TextureWindow[2];

110 
gpu_u«i
.
TextuªWödow
[1] &= ~gpu_unai.TextureWindow[3];

113 c⁄° 
u32
 
fb
 = 
FIXED_BITS
;

114 
gpu_u«i
.
u_msk
 = (((
u32
)gpu_u«i.
TextuªWödow
[2]Ë<< 
fb
) | ((1 << fb) - 1);

115 
gpu_u«i
.
v_msk
 = (((
u32
)gpu_u«i.
TextuªWödow
[3]Ë<< 
fb
) | ((1 << fb) - 1);

117 
	`gpuSëTextuª
(
gpu_u«i
.
GPU_GP1
);

123 
	`DO_LOG
(("GP0(0xE3ËDøwögAª®Pos(0x%x)\n", 
cmd_w‹d
));

124 
gpu_u«i
.
DøwögAªa
[0] = 
cmd_w‹d
 & 0x3FF;

125 
gpu_u«i
.
DøwögAªa
[1] = (
cmd_w‹d
 >> 10) & 0x3FF;

130 
	`DO_LOG
(("GP0(0xE4ËDøwögAª®Size(0x%x)\n", 
cmd_w‹d
));

131 
gpu_u«i
.
DøwögAªa
[2] = (
cmd_w‹d
 & 0x3FF) + 1;

132 
gpu_u«i
.
DøwögAªa
[3] = ((
cmd_w‹d
 >> 10) & 0x3FF) + 1;

137 
	`DO_LOG
(("GP0(0xE5ËDøwögOff£t(0x%x)\n", 
cmd_w‹d
));

138 
gpu_u«i
.
DøwögOff£t
[0] = ((
s32
)
cmd_w‹d
<<(32-11))>>(32-11);

139 
gpu_u«i
.
DøwögOff£t
[1] = ((
s32
)
cmd_w‹d
<<(32-22))>>(32-11);

144 
	`DO_LOG
(("GP0(0xE6ËSëMask(0x%x)\n", 
cmd_w‹d
));

145 
gpu_u«i
.
Maskög
 = (
cmd_w‹d
 & 0x2) << 1;

146 
gpu_u«i
.
PixñMSB
 = (
cmd_w‹d
 & 0x1) << 8;

149 
	}
}

151 
	$gpuSídPackëFun˘i⁄
(c⁄° 
PRIM
)

157 
PåUni⁄
 
∑ckë
 = { .
±r
 = (*)&
gpu_u«i
.
PackëBuf„r
 };

159 
PRIM
)

162 
	`NULL_GPU
();

163 
	`gpuCÀ¨Image
(
∑ckë
);

164 
gpu_u«i
.
fb_dúty
 = 
åue
;

165 
	`DO_LOG
(("gpuCÀ¨Image(0x%x)\n",
PRIM
));

172 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

174 
	`NULL_GPU
();

175 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[

176 (
gpu_u«i
.
blô_mask
?1024:0) |

177 
BÀndög_Mode
 |

178 
gpu_u«i
.
Maskög
 | 
BÀndög
 | gpu_u«i.
PixñMSB


180 
	`gpuDøwPﬁyF
(
∑ckë
, 
drivî
, 
Ál£
);

181 
gpu_u«i
.
fb_dúty
 = 
åue
;

182 
	`DO_LOG
(("gpuDøwPﬁyF(0x%x)\n",
PRIM
));

190 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

192 
	`NULL_GPU
();

193 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

194 
	`gpuSëTextuª
 (
gpu_u«i
.
PackëBuf„r
.
U4
[4] >> 16);

196 
u32
 
drivî_idx
 =

197 (
gpu_u«i
.
blô_mask
?1024:0) |

198 
Dôhîög
 |

199 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 |

200 
gpu_u«i
.
Maskög
 | 
BÀndög
 | gpu_u«i.
PixñMSB
;

202 i‡(!
	`Fa°LightögE«bÀd
()) {

203 
drivî_idx
 |
Lightög
;

205 i‡(!((
gpu_u«i
.
PackëBuf„r
.
U1
[0]>0x5F) && (gpu_unai.PacketBuffer.U1[1]>0x5F) && (gpu_unai.PacketBuffer.U1[2]>0x5F)))

206 
drivî_idx
 |
Lightög
;

209 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[
drivî_idx
];

210 
	`gpuDøwPﬁyFT
(
∑ckë
, 
drivî
, 
Ál£
);

211 
gpu_u«i
.
fb_dúty
 = 
åue
;

212 
	`DO_LOG
(("gpuDøwPﬁyFT(0x%x)\n",
PRIM
));

220 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

222 
	`NULL_GPU
();

223 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[

224 (
gpu_u«i
.
blô_mask
?1024:0) |

225 
BÀndög_Mode
 |

226 
gpu_u«i
.
Maskög
 | 
BÀndög
 | gpu_u«i.
PixñMSB


228 
	`gpuDøwPﬁyF
(
∑ckë
, 
drivî
, 
åue
);

229 
gpu_u«i
.
fb_dúty
 = 
åue
;

230 
	`DO_LOG
(("gpuDøwPﬁyF(0x%xË(4-± QUAD)\n",
PRIM
));

238 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

240 
	`NULL_GPU
();

241 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

242 
	`gpuSëTextuª
 (
gpu_u«i
.
PackëBuf„r
.
U4
[4] >> 16);

244 
u32
 
drivî_idx
 =

245 (
gpu_u«i
.
blô_mask
?1024:0) |

246 
Dôhîög
 |

247 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 |

248 
gpu_u«i
.
Maskög
 | 
BÀndög
 | gpu_u«i.
PixñMSB
;

250 i‡(!
	`Fa°LightögE«bÀd
()) {

251 
drivî_idx
 |
Lightög
;

253 i‡(!((
gpu_u«i
.
PackëBuf„r
.
U1
[0]>0x5F) && (gpu_unai.PacketBuffer.U1[1]>0x5F) && (gpu_unai.PacketBuffer.U1[2]>0x5F)))

254 
drivî_idx
 |
Lightög
;

257 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[
drivî_idx
];

258 
	`gpuDøwPﬁyFT
(
∑ckë
, 
drivî
, 
åue
);

259 
gpu_u«i
.
fb_dúty
 = 
åue
;

260 
	`DO_LOG
(("gpuDøwPﬁyFT(0x%xË(4-± QUAD)\n",
PRIM
));

268 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

270 
	`NULL_GPU
();

275 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[

276 (
gpu_u«i
.
blô_mask
?1024:0) |

277 
Dôhîög
 |

278 
BÀndög_Mode
 |

279 
gpu_u«i
.
Maskög
 | 
BÀndög
 | 129 | gpu_u«i.
PixñMSB


281 
	`gpuDøwPﬁyG
(
∑ckë
, 
drivî
, 
Ál£
);

282 
gpu_u«i
.
fb_dúty
 = 
åue
;

283 
	`DO_LOG
(("gpuDøwPﬁyG(0x%x)\n",
PRIM
));

291 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

293 
	`NULL_GPU
();

294 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

295 
	`gpuSëTextuª
 (
gpu_u«i
.
PackëBuf„r
.
U4
[5] >> 16);

296 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[

297 (
gpu_u«i
.
blô_mask
?1024:0) |

298 
Dôhîög
 |

299 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 |

300 
gpu_u«i
.
Maskög
 | 
BÀndög
 | ((
Lightög
)?129:0Ë| gpu_u«i.
PixñMSB


302 
	`gpuDøwPﬁyGT
(
∑ckë
, 
drivî
, 
Ál£
);

303 
gpu_u«i
.
fb_dúty
 = 
åue
;

304 
	`DO_LOG
(("gpuDøwPﬁyGT(0x%x)\n",
PRIM
));

312 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

314 
	`NULL_GPU
();

316 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[

317 (
gpu_u«i
.
blô_mask
?1024:0) |

318 
Dôhîög
 |

319 
BÀndög_Mode
 |

320 
gpu_u«i
.
Maskög
 | 
BÀndög
 | 129 | gpu_u«i.
PixñMSB


322 
	`gpuDøwPﬁyG
(
∑ckë
, 
drivî
, 
åue
);

323 
gpu_u«i
.
fb_dúty
 = 
åue
;

324 
	`DO_LOG
(("gpuDøwPﬁyG(0x%xË(4-± QUAD)\n",
PRIM
));

332 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

334 
	`NULL_GPU
();

335 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

336 
	`gpuSëTextuª
 (
gpu_u«i
.
PackëBuf„r
.
U4
[5] >> 16);

337 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[

338 (
gpu_u«i
.
blô_mask
?1024:0) |

339 
Dôhîög
 |

340 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 |

341 
gpu_u«i
.
Maskög
 | 
BÀndög
 | ((
Lightög
)?129:0Ë| gpu_u«i.
PixñMSB


343 
	`gpuDøwPﬁyGT
(
∑ckë
, 
drivî
, 
åue
);

344 
gpu_u«i
.
fb_dúty
 = 
åue
;

345 
	`DO_LOG
(("gpuDøwPﬁyGT(0x%xË(4-± QUAD)\n",
PRIM
));

353 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

355 
	`NULL_GPU
();

357 
u32
 
drivî_idx
 = (
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1;

358 
PSD
 
drivî
 = 
gpuPixñS∑nDrivîs
[
drivî_idx
];

359 
	`gpuDøwLöeF
(
∑ckë
, 
drivî
);

360 
gpu_u«i
.
fb_dúty
 = 
åue
;

361 
	`DO_LOG
(("gpuDøwLöeF(0x%x)\n",
PRIM
));

373 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

375 
	`NULL_GPU
();

377 
u32
 
drivî_idx
 = (
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1;

378 
PSD
 
drivî
 = 
gpuPixñS∑nDrivîs
[
drivî_idx
];

379 
	`gpuDøwLöeF
(
∑ckë
, 
drivî
);

380 
gpu_u«i
.
fb_dúty
 = 
åue
;

381 
	`DO_LOG
(("gpuDøwLöeF(0x%x)\n",
PRIM
));

383 i‡((
gpu_u«i
.
PackëBuf„r
.
U4
[3] & 0xF000F000) != 0x50005000)

385 
gpu_u«i
.
PackëBuf„r
.
U4
[1] = gpu_unai.PacketBuffer.U4[2];

386 
gpu_u«i
.
PackëBuf„r
.
U4
[2] = gpu_unai.PacketBuffer.U4[3];

387 
gpu_u«i
.
PackëCou¡
 = 1;

388 
gpu_u«i
.
PackëIndex
 = 3;

396 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

398 
	`NULL_GPU
();

400 
u32
 
drivî_idx
 = (
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1;

402 
drivî_idx
 |= (1 << 5);

403 
PSD
 
drivî
 = 
gpuPixñS∑nDrivîs
[
drivî_idx
];

404 
	`gpuDøwLöeG
(
∑ckë
, 
drivî
);

405 
gpu_u«i
.
fb_dúty
 = 
åue
;

406 
	`DO_LOG
(("gpuDøwLöeG(0x%x)\n",
PRIM
));

418 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

420 
	`NULL_GPU
();

422 
u32
 
drivî_idx
 = (
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1;

424 
drivî_idx
 |= (1 << 5);

425 
PSD
 
drivî
 = 
gpuPixñS∑nDrivîs
[
drivî_idx
];

426 
	`gpuDøwLöeG
(
∑ckë
, 
drivî
);

427 
gpu_u«i
.
fb_dúty
 = 
åue
;

428 
	`DO_LOG
(("gpuDøwLöeG(0x%x)\n",
PRIM
));

430 i‡((
gpu_u«i
.
PackëBuf„r
.
U4
[4] & 0xF000F000) != 0x50005000)

432 
gpu_u«i
.
PackëBuf„r
.
U1
[3 + (2 * 4)] = gpu_unai.PacketBuffer.U1[3 + (0 * 4)];

433 
gpu_u«i
.
PackëBuf„r
.
U4
[0] = gpu_unai.PacketBuffer.U4[2];

434 
gpu_u«i
.
PackëBuf„r
.
U4
[1] = gpu_unai.PacketBuffer.U4[3];

435 
gpu_u«i
.
PackëBuf„r
.
U4
[2] = gpu_unai.PacketBuffer.U4[4];

436 
gpu_u«i
.
PackëCou¡
 = 2;

437 
gpu_u«i
.
PackëIndex
 = 3;

445 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

447 
	`NULL_GPU
();

448 
PT
 
drivî
 = 
gpuTûeS∑nDrivîs
[(
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1];

449 
	`gpuDøwT
(
∑ckë
, 
drivî
);

450 
gpu_u«i
.
fb_dúty
 = 
åue
;

451 
	`DO_LOG
(("gpuDøwT(0x%x)\n",
PRIM
));

459 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

461 
	`NULL_GPU
();

462 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

463 
u32
 
drivî_idx
 = 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 | gpu_u«i.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>1);

478 i‡((
gpu_u«i
.
PackëBuf„r
.
U4
[0] & 0xF8F8F8) != 0x808080)

479 
drivî_idx
 |
Lightög
;

480 
PS
 
drivî
 = 
gpuS¥ôeS∑nDrivîs
[
drivî_idx
];

481 
	`gpuDøwS
(
∑ckë
, 
drivî
);

482 
gpu_u«i
.
fb_dúty
 = 
åue
;

483 
	`DO_LOG
(("gpuDøwS(0x%x)\n",
PRIM
));

491 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

493 
	`NULL_GPU
();

494 
gpu_u«i
.
PackëBuf„r
.
U4
[2] = 0x00010001;

495 
PT
 
drivî
 = 
gpuTûeS∑nDrivîs
[(
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1];

496 
	`gpuDøwT
(
∑ckë
, 
drivî
);

497 
gpu_u«i
.
fb_dúty
 = 
åue
;

498 
	`DO_LOG
(("gpuDøwT(0x%x)\n",
PRIM
));

506 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

508 
	`NULL_GPU
();

509 
gpu_u«i
.
PackëBuf„r
.
U4
[2] = 0x00080008;

510 
PT
 
drivî
 = 
gpuTûeS∑nDrivîs
[(
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1];

511 
	`gpuDøwT
(
∑ckë
, 
drivî
);

512 
gpu_u«i
.
fb_dúty
 = 
åue
;

513 
	`DO_LOG
(("gpuDøwT(0x%x)\n",
PRIM
));

521 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

523 
	`NULL_GPU
();

524 
gpu_u«i
.
PackëBuf„r
.
U4
[3] = 0x00080008;

525 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

526 
u32
 
drivî_idx
 = 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 | gpu_u«i.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>1);

531 i‡((
gpu_u«i
.
PackëBuf„r
.
U4
[0] & 0xF8F8F8) != 0x808080)

532 
drivî_idx
 |
Lightög
;

533 
PS
 
drivî
 = 
gpuS¥ôeS∑nDrivîs
[
drivî_idx
];

534 
	`gpuDøwS
(
∑ckë
, 
drivî
);

535 
gpu_u«i
.
fb_dúty
 = 
åue
;

536 
	`DO_LOG
(("gpuDøwS(0x%x)\n",
PRIM
));

544 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

546 
	`NULL_GPU
();

547 
gpu_u«i
.
PackëBuf„r
.
U4
[2] = 0x00100010;

548 
PT
 
drivî
 = 
gpuTûeS∑nDrivîs
[(
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1];

549 
	`gpuDøwT
(
∑ckë
, 
drivî
);

550 
gpu_u«i
.
fb_dúty
 = 
åue
;

551 
	`DO_LOG
(("gpuDøwT(0x%x)\n",
PRIM
));

557 #ifde‡
__¨m__


559 i‡((!
gpu_u«i
.
‰ameskù
.
skùGPU
Ë&& (!(gpu_u«i.
GPU_GP1
&0x180)Ë&& (!(gpu_u«i.
Maskög
|gpu_u«i.
PixñMSB
)))

561 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

562 
	`gpuDøwS16
(
∑ckë
);

563 
gpu_u«i
.
fb_dúty
 = 
åue
;

569 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
)

571 
	`NULL_GPU
();

572 
gpu_u«i
.
PackëBuf„r
.
U4
[3] = 0x00100010;

573 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

574 
u32
 
drivî_idx
 = 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 | gpu_u«i.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>1);

579 i‡((
gpu_u«i
.
PackëBuf„r
.
U4
[0] & 0xF8F8F8) != 0x808080)

580 
drivî_idx
 |
Lightög
;

581 
PS
 
drivî
 = 
gpuS¥ôeS∑nDrivîs
[
drivî_idx
];

582 
	`gpuDøwS
(
∑ckë
, 
drivî
);

583 
gpu_u«i
.
fb_dúty
 = 
åue
;

584 
	`DO_LOG
(("gpuDøwS(0x%x)\n",
PRIM
));

589 
	`gpuMoveImage
(
∑ckë
);

590 i‡((!
gpu_u«i
.
‰ameskù
.
skùCou¡
Ë&& (gpu_u«i.
Di•œyAªa
[3] == 480))

592 i‡(!
gpu_u«i
.
‰ameskù
.
skùGPU
Ëgpu_u«i.
fb_dúty
 = 
åue
;

596 
gpu_u«i
.
fb_dúty
 = 
åue
;

598 
	`DO_LOG
(("gpuMoveImage(0x%x)\n",
PRIM
));

601 
	`gpuLﬂdImage
(
∑ckë
);

602 
	`DO_LOG
(("gpuLﬂdImage(0x%x)\n",
PRIM
));

605 
	`gpuSt‹eImage
(
∑ckë
);

606 
	`DO_LOG
(("gpuSt‹eImage(0x%x)\n",
PRIM
));

609 
	`gpuGP0Cmd_0xEx
(
gpu_u«i
, gpu_u«i.
PackëBuf„r
.
U4
[0]);

612 
	}
}

	@src/gpu/gpu_unai/gpu_fixedpoint.h

21 #i‚de‡
FIXED_H


22 
	#FIXED_H


	)

24 
s32
 
	tfixed
;

29 
	#FIXED_BITS
 10

	)

31 
	#fixed_ZERO
 ((
fixed
)0)

	)

32 
	#fixed_ONE
 ((
fixed
)1<<
FIXED_BITS
)

	)

33 
	#fixed_TWO
 ((
fixed
)2<<
FIXED_BITS
)

	)

34 
	#fixed_HALF
 ((
fixed
)((1<<
FIXED_BITS
)>>1))

	)

36 
	#fixed_LOMASK
 ((
fixed
)((1<<
FIXED_BITS
)-1))

	)

37 
	#fixed_HIMASK
 ((
fixed
)(~
fixed_LOMASK
))

	)

40 
	#i2x
(
x
Ë((x)<<
FIXED_BITS
)

	)

41 
	#x2i
(
x
Ë((x)>>
FIXED_BITS
)

	)

43 
INLINE
 
fixed
 
	$FixedCeû
(c⁄° 
fixed
 
x
)

45  (
x
 + (
fixed_ONE
 - 1)Ë& 
fixed_HIMASK
;

46 
	}
}

48 
INLINE
 
s32
 
	$FixedCeûToI¡
(c⁄° 
fixed
 
x
)

50  (
x
 + (
fixed_ONE
 - 1)Ë>> 
FIXED_BITS
;

51 
	}
}

54 
	#f2x
(
x
Ë((
s32
)((xË* ()(1<<
FIXED_BITS
)))

	)

55 
	#x2f
(
x
Ë(()(xË/ ()(1<<
FIXED_BITS
))

	)

59 #ifde‡
GPU_UNAI_USE_FLOATMATH


60 #i‡
deföed
(
_MIPS_ARCH_MIPS32R2
Ë|| (
__mùs
 == 64)

61 
INLINE
 
	$FlﬂtInv
(c⁄° 
x
)

63 
ªs
;

64 
	`asm
("ªcù.†%0,%1" : "=f" (
ªs
Ë: "f" (
x
));

65  
ªs
;

66 
	}
}

68 
INLINE
 
	$FlﬂtInv
(c⁄° 
x
)

70  (1.0‡/ 
x
);

71 
	}
}

78 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


81 
	#TABLE_BITS
 16

	)

82 
s32
 
	gs_övTabÀ
[(1<<
TABLE_BITS
)];

85 #i‡
deföed
(
__¨m__
Ë|| (
__mùs
 == 32)

86 
INLINE
 
u32
 
	$Log2
(
u32
 
x
Ë{ u32 
ªs
; 
	`asm
("˛z %0,%1" : "Ù" (ªsË: "r" (x));  32-ªs; 
	}
}

88 
INLINE
 
u32
 
	$Log2
(
u32
 
x
Ë{ u32 
i
 = 0;  ; x > 0; ++i, x >>1);  i - 1; 
	}
}

91 
INLINE
 
	$xInv
 (c⁄° 
fixed
 
_b
, 
s32
& 
iFa˘‹_
, s32& 
iShi·_
)

93 
u32
 
uD
 = (
_b
<0) ? -_b : _b;

94 if(
uD
>1)

96 
u32
 
uLog
 = 
	`Log2
(
uD
);

97 
uLog
 = uLog>(
TABLE_BITS
-1) ? uLog-(TABLE_BITS-1) : 0;

98 
u32
 
uDí
 = (
uD
>>
uLog
);

99 
iFa˘‹_
 = 
s_övTabÀ
[
uDí
];

100 
iFa˘‹_
 = (
_b
<0) ? -iFactor_ :iFactor_;

103 
iShi·_
 = 21+
uLog
;

107 
iFa˘‹_
=
_b
;

108 
iShi·_
 = 0;

110 
	}
}

112 
INLINE
 
fixed
 
	$xInvMulx
 (c⁄° 
fixed
 
_a
, c⁄° 
s32
 
_iFa˘
, c⁄° s32 
_iShi·
)

114 #ifde‡
__¨m__


115 
s64
 
ªs
;

116 
	`asm
 ("smuŒ %Q0, %R0, %1, %2" : "=&r" (
ªs
Ë: "r"(
_a
Ë, "r"(
_iFa˘
));

117  
	`fixed
(
ªs
>>
_iShi·
);

119  
	`fixed
–((
s64
)(
_a
)*(s64)(
_iFa˘
))>>(
_iShi·
) );

121 
	}
}

123 
INLINE
 
fixed
 
	$xLoDivx
 (c⁄° 
fixed
 
_a
, c⁄° fixed 
_b
)

125 
s32
 
iFa˘
, 
iShi·
;

126 
	`xInv
(
_b
, 
iFa˘
, 
iShi·
);

127  
	`xInvMulx
(
_a
, 
iFa˘
, 
iShi·
);

128 
	}
}

	@src/gpu/gpu_unai/gpu_inner.h

27 
	#CF_LIGHT
 ((
CF
>> 0)&1)

28 
	#CF_BLEND
 ((
CF
>> 1)&1)

29 
	#CF_MASKCHECK
 ((
CF
>> 2)&1)

30 
	#CF_BLENDMODE
 ((
CF
>> 3)&3)

31 
	#CF_TEXTMODE
 ((
CF
>> 5)&3)

32 
	#CF_GOURAUD
 ((
CF
>> 7)&1)

33 
	#CF_MASKSET
 ((
CF
>> 8)&1)

34 
	#CF_DITHER
 ((
CF
>> 9)&1)

35 
	#CF_BLITMASK
 ((
CF
>>10)&1)

38 

	)

39 #ifde‡
__¨m__


40 #i‚de‡
ENABLE_GPU_ARMV7


42 
	~"gpu_ö√r_bÀnd_¨m5.h
"

45 
	~"gpu_ö√r_bÀnd_¨m7.h
"

48 
	~"gpu_ö√r_bÀnd.h
"

51 
	~"gpu_ö√r_qu™tiz©i⁄.h
"

52 
	~"gpu_ö√r_light.h
"

61 #ifde‡
GPU_GOURAUD_LOW_PRECISION


62 
	#GPU_GOURAUD_FIXED_BITS
 11

	)

64 
	#GPU_GOURAUD_FIXED_BITS
 16

	)

68 
	sGouøudCﬁ‹
 {

69 #ifde‡
GPU_GOURAUD_LOW_PRECISION


70 
u16
 
	mr
, 
	mg
, 
	mb
;

71 
s16
 
	mr_ö¸
, 
	mg_ö¸
, 
	mb_ö¸
;

73 
u32
 
	mr
, 
	mg
, 
	mb
;

74 
s32
 
	mr_ö¸
, 
	mg_ö¸
, 
	mb_ö¸
;

78 
ölöe
 
u16
 
	$gpuGouøudCﬁ‹15bµ
(
u32
 
r
, u32 
g
, u32 
b
)

80 
r
 >>
GPU_GOURAUD_FIXED_BITS
;

81 
g
 >>
GPU_GOURAUD_FIXED_BITS
;

82 
b
 >>
GPU_GOURAUD_FIXED_BITS
;

84 #i‚de‡
GPU_GOURAUD_LOW_PRECISION


86 
r
 >>3; 
g
 >>3; 
b
 >>= 3;

89  
r
 | (
g
 << 5Ë| (
b
 << 10);

90 
	}
}

107 
	gãm∂©e
<
	gCF
>

108 
u8
* 
	$gpuPixñS∑nFn
(
u8
* 
pD°
, 
uöçå_t
 
d©a
, 
±rdiff_t
 
ö¸
, 
size_t
 
Àn
)

112 c⁄° 
boﬁ
 
skù_uSrc_mask
 = 
åue
;

114 
u16
 
cﬁ
;

115 
GouøudCﬁ‹
 * 
gcPå
;

116 
u32
 
r
, 
g
, 
b
;

117 
s32
 
r_ö¸
, 
g_ö¸
, 
b_ö¸
;

119 i‡(
CF_GOURAUD
) {

120 
gcPå
 = (
GouøudCﬁ‹
*)
d©a
;

121 
r
 = 
gcPå
->r; 
r_ö¸
 = gcPtr->r_incr;

122 
g
 = 
gcPå
->g; 
g_ö¸
 = gcPtr->g_incr;

123 
b
 = 
gcPå
->b; 
b_ö¸
 = gcPtr->b_incr;

125 
cﬁ
 = (
u16
)
d©a
;

129 i‡(!
CF_GOURAUD
)

131 i‡(!
CF_MASKCHECK
 && !
CF_BLEND
) {

132 i‡(
CF_MASKSET
Ë{ *(
u16
*)
pD°
 = 
cﬁ
 | 0x8000; }

133 { *(
u16
*)
pD°
 = 
cﬁ
; }

134 } i‡(
CF_MASKCHECK
 && !
CF_BLEND
) {

135 i‡(!(*(
u16
*)
pD°
 & 0x8000)) {

136 i‡(
CF_MASKSET
Ë{ *(
u16
*)
pD°
 = 
cﬁ
 | 0x8000; }

137 { *(
u16
*)
pD°
 = 
cﬁ
; }

140 
u16
 
uD°
 = *(u16*)
pD°
;

141 i‡(
CF_MASKCHECK
Ë{ i‡(
uD°
 & 0x8000Ë
ídpixñ
; }

143 
u16
 
uSrc
 = 
cﬁ
;

145 i‡(
CF_BLEND
)

146 
uSrc
 = 
gpuBÀndög
<
CF_BLENDMODE
, 
skù_uSrc_mask
>(uSrc, 
uD°
);

148 i‡(
CF_MASKSET
Ë{ *(
u16
*)
pD°
 = 
uSrc
 | 0x8000; }

149 { *(
u16
*)
pD°
 = 
uSrc
; }

155 i‡(!
CF_MASKCHECK
 && !
CF_BLEND
) {

156 
cﬁ
 = 
	`gpuGouøudCﬁ‹15bµ
(
r
, 
g
, 
b
);

157 i‡(
CF_MASKSET
Ë{ *(
u16
*)
pD°
 = 
cﬁ
 | 0x8000; }

158 { *(
u16
*)
pD°
 = 
cﬁ
; }

159 } i‡(
CF_MASKCHECK
 && !
CF_BLEND
) {

160 
cﬁ
 = 
	`gpuGouøudCﬁ‹15bµ
(
r
, 
g
, 
b
);

161 i‡(!(*(
u16
*)
pD°
 & 0x8000)) {

162 i‡(
CF_MASKSET
Ë{ *(
u16
*)
pD°
 = 
cﬁ
 | 0x8000; }

163 { *(
u16
*)
pD°
 = 
cﬁ
; }

166 
u16
 
uD°
 = *(u16*)
pD°
;

167 i‡(
CF_MASKCHECK
Ë{ i‡(
uD°
 & 0x8000Ë
ídpixñ
; }

168 
cﬁ
 = 
	`gpuGouøudCﬁ‹15bµ
(
r
, 
g
, 
b
);

170 
u16
 
uSrc
 = 
cﬁ
;

174 c⁄° 
boﬁ
 
skù_uSrc_mask
 = 
åue
;

176 i‡(
CF_BLEND
)

177 
uSrc
 = 
gpuBÀndög
<
CF_BLENDMODE
, 
skù_uSrc_mask
>(uSrc, 
uD°
);

179 i‡(
CF_MASKSET
Ë{ *(
u16
*)
pD°
 = 
uSrc
 | 0x8000; }

180 { *(
u16
*)
pD°
 = 
uSrc
; }

184 
ídpixñ
:

185 i‡(
CF_GOURAUD
) {

186 
r
 +
r_ö¸
;

187 
g
 +
g_ö¸
;

188 
b
 +
b_ö¸
;

190 
pD°
 +
ö¸
;

191 } 
Àn
-- > 1);

200 i‡(
CF_GOURAUD
) {

201 
gcPå
->
r
 =Ñ;

202 
gcPå
->
g
 = g;

203 
gcPå
->
b
 = b;

205  
pD°
;

206 
	}
}

208 
u8
* 
	$PixñS∑nNULL
(
u8
* 
pD°
, 
uöçå_t
 
d©a
, 
±rdiff_t
 
ö¸
, 
size_t
 
Àn
)

210 #ifde‡
ENABLE_GPU_LOG_SUPPORT


211 
	`Ârötf
(
°dout
,"PixelSpanNULL()\n");

213  
pD°
;

214 
	}
}

218 
	gu8
* (*
	tPSD
)(
	tu8
* 
	td°
, 
	tuöçå_t
 
	td©a
, 
	t±rdiff_t
 
	tö¸
, 
	tsize_t
 
	tÀn
);

220 c⁄° 
PSD
 
	ggpuPixñS∑nDrivîs
[64] =

234 
gpuPixñS∑nFn
<0x00<<1>, gpuPixelSpanFn<0x01<<1>, gpuPixelSpanFn<0x02<<1>, gpuPixelSpanFn<0x03<<1>,

235 
PixñS∑nNULL
, 
gpuPixñS∑nFn
<0x05<<1>, PixelSpanNULL, gpuPixelSpanFn<0x07<<1>,

236 
PixñS∑nNULL
, 
gpuPixñS∑nFn
<0x09<<1>, PixelSpanNULL, gpuPixelSpanFn<0x0B<<1>,

237 
PixñS∑nNULL
, 
gpuPixñS∑nFn
<0x0D<<1>, PixelSpanNULL, gpuPixelSpanFn<0x0F<<1>,

240 
gpuPixñS∑nFn
<(0x00<<1)|0x100>, gpuPixelSpanFn<(0x01<<1)|0x100>, gpuPixelSpanFn<(0x02<<1)|0x100>, gpuPixelSpanFn<(0x03<<1)|0x100>,

241 
PixñS∑nNULL
, 
gpuPixñS∑nFn
<(0x05<<1)|0x100>, PixelSpanNULL, gpuPixelSpanFn<(0x07<<1)|0x100>,

242 
PixñS∑nNULL
, 
gpuPixñS∑nFn
<(0x09<<1)|0x100>, PixelSpanNULL, gpuPixelSpanFn<(0x0B<<1)|0x100>,

243 
PixñS∑nNULL
, 
gpuPixñS∑nFn
<(0x0D<<1)|0x100>, PixelSpanNULL, gpuPixelSpanFn<(0x0F<<1)|0x100>,

246 
gpuPixñS∑nFn
<(0x00<<1)|0x80>, gpuPixelSpanFn<(0x01<<1)|0x80>, gpuPixelSpanFn<(0x02<<1)|0x80>, gpuPixelSpanFn<(0x03<<1)|0x80>,

247 
PixñS∑nNULL
, 
gpuPixñS∑nFn
<(0x05<<1)|0x80>, PixelSpanNULL, gpuPixelSpanFn<(0x07<<1)|0x80>,

248 
PixñS∑nNULL
, 
gpuPixñS∑nFn
<(0x09<<1)|0x80>, PixelSpanNULL, gpuPixelSpanFn<(0x0B<<1)|0x80>,

249 
PixñS∑nNULL
, 
gpuPixñS∑nFn
<(0x0D<<1)|0x80>, PixelSpanNULL, gpuPixelSpanFn<(0x0F<<1)|0x80>,

252 
gpuPixñS∑nFn
<(0x00<<1)|0x180>, gpuPixelSpanFn<(0x01<<1)|0x180>, gpuPixelSpanFn<(0x02<<1)|0x180>, gpuPixelSpanFn<(0x03<<1)|0x180>,

253 
PixñS∑nNULL
, 
gpuPixñS∑nFn
<(0x05<<1)|0x180>, PixelSpanNULL, gpuPixelSpanFn<(0x07<<1)|0x180>,

254 
PixñS∑nNULL
, 
gpuPixñS∑nFn
<(0x09<<1)|0x180>, PixelSpanNULL, gpuPixelSpanFn<(0x0B<<1)|0x180>,

255 
PixñS∑nNULL
, 
gpuPixñS∑nFn
<(0x0D<<1)|0x180>, PixelSpanNULL, gpuPixelSpanFn<(0x0F<<1)|0x180>

261 
	gãm∂©e
<
	gCF
>

262 
	$gpuTûeS∑nFn
(
u16
 *
pD°
, 
u32
 
cou¡
, u16 
d©a
)

264 i‡(!
CF_MASKCHECK
 && !
CF_BLEND
) {

265 i‡(
CF_MASKSET
Ë{ 
d©a
 = data | 0x8000; }

266 dÿ{ *
pD°
++ = 
d©a
; } --
cou¡
);

267 } i‡(
CF_MASKCHECK
 && !
CF_BLEND
) {

268 i‡(
CF_MASKSET
Ë{ 
d©a
 = data | 0x8000; }

269 dÿ{ i‡(!(*
pD°
&0x8000)Ë{ *pD° = 
d©a
; }ÖD°++; } --
cou¡
);

274 c⁄° 
boﬁ
 
skù_uSrc_mask
 = 
åue
;

276 
u16
 
uSrc
, 
uD°
;

279 i‡(
CF_MASKCHECK
 || 
CF_BLEND
Ë{ 
uD°
 = *
pD°
; }

280 i‡(
CF_MASKCHECK
Ë{ i‡(
uD°
&0x8000Ë
ídtûe
; }

282 
uSrc
 = 
d©a
;

284 i‡(
CF_BLEND
)

285 
uSrc
 = 
gpuBÀndög
<
CF_BLENDMODE
, 
skù_uSrc_mask
>(uSrc, 
uD°
);

287 i‡(
CF_MASKSET
Ë{ *
pD°
 = 
uSrc
 | 0x8000; }

288 { *
pD°
 = 
uSrc
; }

295 
ídtûe
:

296 
pD°
++;

298 --
cou¡
);

300 
	}
}

302 
	$TûeNULL
(
u16
 *
pD°
, 
u32
 
cou¡
, u16 
d©a
)

304 #ifde‡
ENABLE_GPU_LOG_SUPPORT


305 
	`Ârötf
(
°dout
,"TileNULL()\n");

307 
	}
}

311 (*
	tPT
)(
	tu16
 *
	tpD°
, 
	tu32
 
	tcou¡
, u16 
	td©a
);

314 
	#TI
(
cf
Ë
gpuTûeS∑nFn
<(cf)>

	)

315 
	#TN
 
TûeNULL


	)

316 
	#TIBLOCK
(
ub
) \

317 
	`TI
((
ub
)|0x00), TI((ub)|0x02), TI((ub)|0x04), TI((ub)|0x06), \

318 
TN
, 
	`TI
((
ub
)|0x0a), TN, TI((ub)|0x0e), \

319 
TN
, 
	`TI
((
ub
)|0x12), TN, TI((ub)|0x16), \

320 
TN
, 
	`TI
((
ub
)|0x1a), TN, TI((ub)|0x1e)

	)

322 c⁄° 
PT
 
gpuTûeS∑nDrivîs
[32] = {

323 
	`TIBLOCK
(0<<8), TIBLOCK(1<<8)

324 
	}
};

326 #unde‡
TI


327 #unde‡
TN


328 #unde‡
TIBLOCK


334 
	gãm∂©e
<
	gCF
>

335 
	$gpuS¥ôeS∑nFn
(
u16
 *
pD°
, 
u32
 
cou¡
, 
u8
* 
pTxt
, u32 
u0
)

340 c⁄° 
boﬁ
 
skù_uSrc_mask
 = (!
CF_TEXTMODE
Ë|| 
CF_LIGHT
;

342 
u16
 
uSrc
, 
uD°
, 
§cMSB
;

343 
u32
 
u0_mask
 = 
gpu_u«i
.
TextuªWödow
[2];

345 
u8
 
r5
, 
g5
, 
b5
;

346 i‡(
CF_LIGHT
) {

347 
r5
 = 
gpu_u«i
.r5;

348 
g5
 = 
gpu_u«i
.g5;

349 
b5
 = 
gpu_u«i
.b5;

352 i‡(
CF_TEXTMODE
==3) {

354 
u0_mask
 <<= 1;

357 c⁄° 
u16
 *
CBA_
; i‡(
CF_TEXTMODE
!=3ËCBA_ = 
gpu_u«i
.
CBA
;

361 i‡(
CF_MASKCHECK
 || 
CF_BLEND
Ë{ 
uD°
 = *
pD°
; }

362 i‡(
CF_MASKCHECK
Ëi‡(
uD°
&0x8000Ë{ 
íd•rôe
; }

364 i‡(
CF_TEXTMODE
==1) {

365 
u8
 
rgb
 = 
pTxt
[(
u0
 & 
u0_mask
)>>1];

366 
uSrc
 = 
CBA_
[(
rgb
>>((
u0
&1)<<2))&0xf];

368 i‡(
CF_TEXTMODE
==2) {

369 
uSrc
 = 
CBA_
[
pTxt
[
u0
 & 
u0_mask
]];

371 i‡(
CF_TEXTMODE
==3) {

372 
uSrc
 = *(
u16
*)(&
pTxt
[
u0
 & 
u0_mask
]);

375 i‡(!
uSrc
Ë
íd•rôe
;

379 i‡(
CF_BLEND
 || 
CF_LIGHT
Ë
§cMSB
 = 
uSrc
 & 0x8000;

381 i‡(
CF_LIGHT
)

382 
uSrc
 = 
	`gpuLightögTXT
(uSrc, 
r5
, 
g5
, 
b5
);

384 i‡(
CF_BLEND
 && 
§cMSB
)

385 
uSrc
 = 
gpuBÀndög
<
CF_BLENDMODE
, 
skù_uSrc_mask
>(uSrc, 
uD°
);

387 i‡(
CF_MASKSET
Ë{ *
pD°
 = 
uSrc
 | 0x8000; }

388 i‡(
CF_BLEND
 || 
CF_LIGHT
Ë{ *
pD°
 = 
uSrc
 | 
§cMSB
; }

389 { *
pD°
 = 
uSrc
; }

391 
íd•rôe
:

392 
u0
 +(
CF_TEXTMODE
==3) ? 2 : 1;

393 
pD°
++;

395 --
cou¡
);

396 
	}
}

398 
	$S¥ôeNULL
(
u16
 *
pD°
, 
u32
 
cou¡
, 
u8
* 
pTxt
, u32 
u0
)

400 #ifde‡
ENABLE_GPU_LOG_SUPPORT


401 
	`Ârötf
(
°dout
,"SpriteNULL()\n");

403 
	}
}

409 (*
	tPS
)(
	tu16
 *
	tpD°
, 
	tu32
 
	tcou¡
, 
	tu8
* 
	tpTxt
, u32 
	tu0
);

412 
	#TI
(
cf
Ë
gpuS¥ôeS∑nFn
<(cf)>

	)

413 
	#TN
 
S¥ôeNULL


	)

414 
	#TIBLOCK
(
ub
) \

415 
TN
, TN, TN, TN, TN, TN, TN, TN, \

416 
TN
, TN, TN, TN, TN, TN, TN, TN, \

417 
TN
, TN, TN, TN, TN, TN, TN, TN, \

418 
TN
, TN, TN, TN, TN, TN, TN, TN, \

419 
	`TI
((
ub
)|0x20), TI((ub)|0x21), TI((ub)|0x22), TI((ub)|0x23), TI((ub)|0x24), TI((ub)|0x25), TI((ub)|0x26), TI((ub)|0x27), \

420 
TN
, TN, 
	`TI
((
ub
)|0x2a), TI((ub)|0x2b), TN, TN, TI((ub)|0x2e), TI((ub)|0x2f), \

421 
TN
, TN, 
	`TI
((
ub
)|0x32), TI((ub)|0x33), TN, TN, TI((ub)|0x36), TI((ub)|0x37), \

422 
TN
, TN, 
	`TI
((
ub
)|0x3a), TI((ub)|0x3b), TN, TN, TI((ub)|0x3e), TI((ub)|0x3f), \

423 
	`TI
((
ub
)|0x40), TI((ub)|0x41), TI((ub)|0x42), TI((ub)|0x43), TI((ub)|0x44), TI((ub)|0x45), TI((ub)|0x46), TI((ub)|0x47), \

424 
TN
, TN, 
	`TI
((
ub
)|0x4a), TI((ub)|0x4b), TN, TN, TI((ub)|0x4e), TI((ub)|0x4f), \

425 
TN
, TN, 
	`TI
((
ub
)|0x52), TI((ub)|0x53), TN, TN, TI((ub)|0x56), TI((ub)|0x57), \

426 
TN
, TN, 
	`TI
((
ub
)|0x5a), TI((ub)|0x5b), TN, TN, TI((ub)|0x5e), TI((ub)|0x5f), \

427 
	`TI
((
ub
)|0x60), TI((ub)|0x61), TI((ub)|0x62), TI((ub)|0x63), TI((ub)|0x64), TI((ub)|0x65), TI((ub)|0x66), TI((ub)|0x67), \

428 
TN
, TN, 
	`TI
((
ub
)|0x6a), TI((ub)|0x6b), TN, TN, TI((ub)|0x6e), TI((ub)|0x6f), \

429 
TN
, TN, 
	`TI
((
ub
)|0x72), TI((ub)|0x73), TN, TN, TI((ub)|0x76), TI((ub)|0x77), \

430 
TN
, TN, 
	`TI
((
ub
)|0x7a), TI((ub)|0x7b), TN, TN, TI((ub)|0x7e), TI((ub)|0x7f)

	)

432 c⁄° 
PS
 
gpuS¥ôeS∑nDrivîs
[256] = {

433 
	`TIBLOCK
(0<<8), TIBLOCK(1<<8)

434 
	}
};

436 #unde‡
TI


437 #unde‡
TN


438 #unde‡
TIBLOCK


461 
	gãm∂©e
<
	gCF
>

462 
	$gpuPﬁyS∑nFn
(c⁄° 
gpu_u«i_t
 &
gpu_u«i
, 
u16
 *
pD°
, 
u32
 
cou¡
)

467 c⁄° 
boﬁ
 
skù_uSrc_mask
 = (!
CF_TEXTMODE
Ë|| 
CF_LIGHT
;

469 
u32
 
bMsk
; i‡(
CF_BLITMASK
ËbMsk = 
gpu_u«i
.
blô_mask
;

471 i‡(!
CF_TEXTMODE
)

473 i‡(!
CF_GOURAUD
)

476 c⁄° 
u16
 
pix15
 = 
gpu_u«i
.
PixñD©a
;

478 
u16
 
uSrc
, 
uD°
;

485 i‡(
CF_BLEND
 || 
CF_MASKCHECK
Ë
uD°
 = *
pD°
;

486 i‡(
CF_MASKCHECK
Ë{ i‡(
uD°
&0x8000Ë{ 
ídpﬁynŸexäogou
; } }

488 
uSrc
 = 
pix15
;

490 i‡(
CF_BLEND
)

491 
uSrc
 = 
gpuBÀndög
<
CF_BLENDMODE
, 
skù_uSrc_mask
>(uSrc, 
uD°
);

493 i‡(
CF_MASKSET
Ë{ *
pD°
 = 
uSrc
 | 0x8000; }

494 { *
pD°
 = 
uSrc
; }

496 
ídpﬁynŸexäogou
:

497 
pD°
++;

498 } --
cou¡
);

503 
u32
 
l_gCﬁ
 = 
gpu_u«i
.
gCﬁ
;

504 
u32
 
l_gInc
 = 
gpu_u«i
.
gInc
;

507 
u16
 
uD°
, 
uSrc
;

512 i‡(
CF_BLEND
 || 
CF_MASKCHECK
Ë
uD°
 = *
pD°
;

513 i‡(
CF_MASKCHECK
Ë{ i‡(
uD°
&0x8000Ë
ídpﬁynŸextgou
; }

515 i‡(
CF_DITHER
) {

518 
u32
 
uSrc24
 = 
	`gpuLightögRGB24
(
l_gCﬁ
);

519 i‡(
CF_BLEND
)

520 
uSrc24
 = 
gpuBÀndög24
<
CF_BLENDMODE
>(uSrc24, 
uD°
);

521 
uSrc
 = 
gpuCﬁ‹Qu™tiz©i⁄24
<
CF_DITHER
>(
uSrc24
, 
pD°
);

525 
uSrc
 = 
	`gpuLightögRGB
(
l_gCﬁ
);

527 i‡(
CF_BLEND
)

528 
uSrc
 = 
gpuBÀndög
<
CF_BLENDMODE
, 
skù_uSrc_mask
>(uSrc, 
uD°
);

531 i‡(
CF_MASKSET
Ë{ *
pD°
 = 
uSrc
 | 0x8000; }

532 { *
pD°
 = 
uSrc
; }

534 
ídpﬁynŸextgou
:

535 
pD°
++;

536 
l_gCﬁ
 +
l_gInc
;

538 --
cou¡
);

545 
u16
 
uD°
, 
uSrc
, 
§cMSB
;

550 
u32
 
l_u_msk
 = 
gpu_u«i
.
u_msk
; u32 
l_v_msk
 = gpu_u«i.
v_msk
;

551 
u32
 
l_u
 = 
gpu_u«i
.
u
 & 
l_u_msk
; u32 
l_v
 = gpu_u«i.
v
 & 
l_v_msk
;

552 
s32
 
l_u_öc
 = 
gpu_u«i
.
u_öc
; s32 
l_v_öc
 = gpu_u«i.
v_öc
;

554 c⁄° 
u16
* 
TBA_
 = 
gpu_u«i
.
TBA
;

555 c⁄° 
u16
* 
CBA_
; i‡(
CF_TEXTMODE
!=3ËCBA_ = 
gpu_u«i
.
CBA
;

557 
u8
 
r5
, 
g5
, 
b5
;

558 
u8
 
r8
, 
g8
, 
b8
;

560 
u32
 
l_gInc
, 
l_gCﬁ
;

562 i‡(
CF_LIGHT
) {

563 i‡(
CF_GOURAUD
) {

564 
l_gInc
 = 
gpu_u«i
.
gInc
;

565 
l_gCﬁ
 = 
gpu_u«i
.
gCﬁ
;

567 i‡(
CF_DITHER
) {

568 
r8
 = 
gpu_u«i
.r8;

569 
g8
 = 
gpu_u«i
.g8;

570 
b8
 = 
gpu_u«i
.b8;

572 
r5
 = 
gpu_u«i
.r5;

573 
g5
 = 
gpu_u«i
.g5;

574 
b5
 = 
gpu_u«i
.b5;

581 i‡(
CF_BLITMASK
Ë{ i‡((
bMsk
>>((((
uöçå_t
)
pD°
)>>1)&7))&1Ë
ídpﬁyãxt
; }

582 i‡(
CF_MASKCHECK
 || 
CF_BLEND
Ë{ 
uD°
 = *
pD°
; }

583 i‡(
CF_MASKCHECK
Ëi‡(
uD°
&0x8000Ë{ 
ídpﬁyãxt
; }

587 i‡(
CF_TEXTMODE
==1) {

588 
u32
 
tu
=(
l_u
>>10);

589 
u32
 
tv
=(
l_v
<<1)&(0xff<<11);

590 
u8
 
rgb
=((u8*)
TBA_
)[
tv
+(
tu
>>1)];

591 
uSrc
=
CBA_
[(
rgb
>>((
tu
&1)<<2))&0xf];

592 i‡(!
uSrc
Ë
ídpﬁyãxt
;

594 i‡(
CF_TEXTMODE
==2) {

595 
uSrc
 = 
CBA_
[(((
u8
*)
TBA_
)[(
l_u
>>10)+((
l_v
<<1)&(0xff<<11))])];

596 i‡(!
uSrc
Ë
ídpﬁyãxt
;

598 i‡(
CF_TEXTMODE
==3) {

599 
uSrc
 = 
TBA_
[(
l_u
>>10)+((
l_v
)&(0xff<<10))];

600 i‡(!
uSrc
Ë
ídpﬁyãxt
;

604 i‡(
CF_BLEND
 || 
CF_LIGHT
Ë
§cMSB
 = 
uSrc
 & 0x8000;

612 i‡(
CF_DITHER
 && 
CF_LIGHT
) {

613 
u32
 
uSrc24
;

614 i‡–
CF_GOURAUD
)

615 
uSrc24
 = 
	`gpuLightögTXT24Gouøud
(
uSrc
, 
l_gCﬁ
);

616 i‡(!
CF_GOURAUD
)

617 
uSrc24
 = 
	`gpuLightögTXT24
(
uSrc
, 
r8
, 
g8
, 
b8
);

619 i‡(
CF_BLEND
 && 
§cMSB
)

620 
uSrc24
 = 
gpuBÀndög24
<
CF_BLENDMODE
>(uSrc24, 
uD°
);

622 
uSrc
 = 
gpuCﬁ‹Qu™tiz©i⁄24
<
CF_DITHER
>(
uSrc24
, 
pD°
);

625 i‡(
CF_LIGHT
) {

626 i‡–
CF_GOURAUD
)

627 
uSrc
 = 
	`gpuLightögTXTGouøud
(uSrc, 
l_gCﬁ
);

628 i‡(!
CF_GOURAUD
)

629 
uSrc
 = 
	`gpuLightögTXT
(uSrc, 
r5
, 
g5
, 
b5
);

632 i‡(
CF_BLEND
 && 
§cMSB
)

633 
uSrc
 = 
gpuBÀndög
<
CF_BLENDMODE
, 
skù_uSrc_mask
>(uSrc, 
uD°
);

636 i‡(
CF_MASKSET
Ë{ *
pD°
 = 
uSrc
 | 0x8000; }

637 i‡(
CF_BLEND
 || 
CF_LIGHT
Ë{ *
pD°
 = 
uSrc
 | 
§cMSB
; }

638 { *
pD°
 = 
uSrc
; }

639 
ídpﬁyãxt
:

640 
pD°
++;

641 
l_u
 = (l_u + 
l_u_öc
Ë& 
l_u_msk
;

642 
l_v
 = (l_v + 
l_v_öc
Ë& 
l_v_msk
;

643 i‡(
CF_LIGHT
 && 
CF_GOURAUD
Ë
l_gCﬁ
 +
l_gInc
;

645 --
cou¡
);

647 
	}
}

649 
	$PﬁyNULL
(c⁄° 
gpu_u«i_t
 &
gpu_u«i
, 
u16
 *
pD°
, 
u32
 
cou¡
)

651 #ifde‡
ENABLE_GPU_LOG_SUPPORT


652 
	`Ârötf
(
°dout
,"PolyNULL()\n");

654 
	}
}

658 (*
	tPP
)(c⁄° 
	tgpu_u«i_t
 &
	tgpu_u«i
, 
	tu16
 *
	tpD°
, 
	tu32
 
	tcou¡
);

661 
	#TI
(
cf
Ë
gpuPﬁyS∑nFn
<(cf)>

	)

662 
	#TN
 
PﬁyNULL


	)

663 
	#TIBLOCK
(
ub
) \

664 
	`TI
((
ub
)|0x00), TI((ub)|0x01), TI((ub)|0x02), TI((ub)|0x03), TI((ub)|0x04), TI((ub)|0x05), TI((ub)|0x06), TI((ub)|0x07), \

665 
TN
, TN, 
	`TI
((
ub
)|0x0a), TI((ub)|0x0b), TN, TN, TI((ub)|0x0e), TI((ub)|0x0f), \

666 
TN
, TN, 
	`TI
((
ub
)|0x12), TI((ub)|0x13), TN, TN, TI((ub)|0x16), TI((ub)|0x17), \

667 
TN
, TN, 
	`TI
((
ub
)|0x1a), TI((ub)|0x1b), TN, TN, TI((ub)|0x1e), TI((ub)|0x1f), \

668 
	`TI
((
ub
)|0x20), TI((ub)|0x21), TI((ub)|0x22), TI((ub)|0x23), TI((ub)|0x24), TI((ub)|0x25), TI((ub)|0x26), TI((ub)|0x27), \

669 
TN
, TN, 
	`TI
((
ub
)|0x2a), TI((ub)|0x2b), TN, TN, TI((ub)|0x2e), TI((ub)|0x2f), \

670 
TN
, TN, 
	`TI
((
ub
)|0x32), TI((ub)|0x33), TN, TN, TI((ub)|0x36), TI((ub)|0x37), \

671 
TN
, TN, 
	`TI
((
ub
)|0x3a), TI((ub)|0x3b), TN, TN, TI((ub)|0x3e), TI((ub)|0x3f), \

672 
	`TI
((
ub
)|0x40), TI((ub)|0x41), TI((ub)|0x42), TI((ub)|0x43), TI((ub)|0x44), TI((ub)|0x45), TI((ub)|0x46), TI((ub)|0x47), \

673 
TN
, TN, 
	`TI
((
ub
)|0x4a), TI((ub)|0x4b), TN, TN, TI((ub)|0x4e), TI((ub)|0x4f), \

674 
TN
, TN, 
	`TI
((
ub
)|0x52), TI((ub)|0x53), TN, TN, TI((ub)|0x56), TI((ub)|0x57), \

675 
TN
, TN, 
	`TI
((
ub
)|0x5a), TI((ub)|0x5b), TN, TN, TI((ub)|0x5e), TI((ub)|0x5f), \

676 
	`TI
((
ub
)|0x60), TI((ub)|0x61), TI((ub)|0x62), TI((ub)|0x63), TI((ub)|0x64), TI((ub)|0x65), TI((ub)|0x66), TI((ub)|0x67), \

677 
TN
, TN, 
	`TI
((
ub
)|0x6a), TI((ub)|0x6b), TN, TN, TI((ub)|0x6e), TI((ub)|0x6f), \

678 
TN
, TN, 
	`TI
((
ub
)|0x72), TI((ub)|0x73), TN, TN, TI((ub)|0x76), TI((ub)|0x77), \

679 
TN
, TN, 
	`TI
((
ub
)|0x7a), TI((ub)|0x7b), TN, TN, TI((ub)|0x7e), TI((ub)|0x7f), \

680 
TN
, 
	`TI
((
ub
)|0x81), TN, TI((ub)|0x83), TN, TI((ub)|0x85), TN, TI((ub)|0x87), \

681 
TN
, TN, TN, 
	`TI
((
ub
)|0x8b), TN, TN, TN, TI((ub)|0x8f), \

682 
TN
, TN, TN, 
	`TI
((
ub
)|0x93), TN, TN, TN, TI((ub)|0x97), \

683 
TN
, TN, TN, 
	`TI
((
ub
)|0x9b), TN, TN, TN, TI((ub)|0x9f), \

684 
TN
, 
	`TI
((
ub
)|0xa1), TN, TI((ub)|0xa3), TN, TI((ub)|0xa5), TN, TI((ub)|0xa7), \

685 
TN
, TN, TN, 
	`TI
((
ub
)|0xab), TN, TN, TN, TI((ub)|0xaf), \

686 
TN
, TN, TN, 
	`TI
((
ub
)|0xb3), TN, TN, TN, TI((ub)|0xb7), \

687 
TN
, TN, TN, 
	`TI
((
ub
)|0xbb), TN, TN, TN, TI((ub)|0xbf), \

688 
TN
, 
	`TI
((
ub
)|0xc1), TN, TI((ub)|0xc3), TN, TI((ub)|0xc5), TN, TI((ub)|0xc7), \

689 
TN
, TN, TN, 
	`TI
((
ub
)|0xcb), TN, TN, TN, TI((ub)|0xcf), \

690 
TN
, TN, TN, 
	`TI
((
ub
)|0xd3), TN, TN, TN, TI((ub)|0xd7), \

691 
TN
, TN, TN, 
	`TI
((
ub
)|0xdb), TN, TN, TN, TI((ub)|0xdf), \

692 
TN
, 
	`TI
((
ub
)|0xe1), TN, TI((ub)|0xe3), TN, TI((ub)|0xe5), TN, TI((ub)|0xe7), \

693 
TN
, TN, TN, 
	`TI
((
ub
)|0xeb), TN, TN, TN, TI((ub)|0xef), \

694 
TN
, TN, TN, 
	`TI
((
ub
)|0xf3), TN, TN, TN, TI((ub)|0xf7), \

695 
TN
, TN, TN, 
	`TI
((
ub
)|0xfb), TN, TN, TN, TI((ub)|0xff)

	)

697 c⁄° 
PP
 
gpuPﬁyS∑nDrivîs
[2048] = {

698 
	`TIBLOCK
(0<<8), TIBLOCK(1<<8), TIBLOCK(2<<8), TIBLOCK(3<<8),

699 
	`TIBLOCK
(4<<8), TIBLOCK(5<<8), TIBLOCK(6<<8), TIBLOCK(7<<8)

700 
	}
};

702 #unde‡
TI


703 #unde‡
TN


704 #unde‡
TIBLOCK


	@src/gpu/gpu_unai/gpu_inner_blend.h

21 #i‚de‡
_OP_BLEND_H_


22 
	#_OP_BLEND_H_


	)

39 
	gãm∂©e
 <
	gBLENDMODE
, 
boﬁ
 
	gSKIP_USRC_MSB_MASK
>

40 
GPU_INLINE
 
u16
 
	$gpuBÀndög
(
u16
 
uSrc
, u16 
uD°
)

47 
u16
 
mix
;

50 i‡(
BLENDMODE
==0) {

51 #ifde‡
GPU_UNAI_USE_ACCURATE_BLENDING


53 
uD°
 &= 0x7fff;

54 i‡(!
SKIP_USRC_MSB_MASK
)

55 
uSrc
 &= 0x7fff;

56 
mix
 = ((
uSrc
 + 
uD°
) - ((uSrc ^ uDst) & 0x0421)) >> 1;

58 
mix
 = ((
uD°
 & 0x7bdeË+ (
uSrc
 & 0x7bde)) >> 1;

63 i‡(
BLENDMODE
==1) {

64 
uD°
 &= 0x7fff;

65 i‡(!
SKIP_USRC_MSB_MASK
)

66 
uSrc
 &= 0x7fff;

67 
u32
 
sum
 = 
uSrc
 + 
uD°
;

68 
u32
 
low_bôs
 = (
uSrc
 ^ 
uD°
) & 0x0421;

69 
u32
 
ˇºõs
 = (
sum
 - 
low_bôs
) & 0x8420;

70 
u32
 
modulo
 = 
sum
 - 
ˇºõs
;

71 
u32
 
˛amp
 = 
ˇºõs
 - (carries >> 5);

72 
mix
 = 
modulo
 | 
˛amp
;

76 i‡(
BLENDMODE
==2) {

77 
uD°
 &= 0x7fff;

78 i‡(!
SKIP_USRC_MSB_MASK
)

79 
uSrc
 &= 0x7fff;

80 
u32
 
diff
 = 
uD°
 - 
uSrc
 + 0x8420;

81 
u32
 
low_bôs
 = (
uD°
 ^ 
uSrc
) & 0x8420;

82 
u32
 
b‹rows
 = (
diff
 - 
low_bôs
) & 0x8420;

83 
u32
 
modulo
 = 
diff
 - 
b‹rows
;

84 
u32
 
˛amp
 = 
b‹rows
 - (borrows >> 5);

85 
mix
 = 
modulo
 & 
˛amp
;

89 i‡(
BLENDMODE
==3) {

90 
uD°
 &= 0x7fff;

91 
uSrc
 = ((uSrc >> 2) & 0x1ce7);

92 
u32
 
sum
 = 
uSrc
 + 
uD°
;

93 
u32
 
low_bôs
 = (
uSrc
 ^ 
uD°
) & 0x0421;

94 
u32
 
ˇºõs
 = (
sum
 - 
low_bôs
) & 0x8420;

95 
u32
 
modulo
 = 
sum
 - 
ˇºõs
;

96 
u32
 
˛amp
 = 
ˇºõs
 - (carries >> 5);

97 
mix
 = 
modulo
 | 
˛amp
;

100  
mix
;

101 
	}
}

116 
GPU_INLINE
 
u32
 
	$gpuGëRGB24
(
u16
 
uSrc
)

118  ((
uSrc
 & 0x7C00)<<14)

119 | ((
uSrc
 & 0x03E0)<< 9)

120 | ((
uSrc
 & 0x001F)<< 4);

121 
	}
}

139 
	gãm∂©e
 <
	gBLENDMODE
>

140 
GPU_INLINE
 
u32
 
	$gpuBÀndög24
(
u32
 
uSrc24
, 
u16
 
uD°
)

146 
u32
 
uD°24
 = 
	`gpuGëRGB24
(
uD°
);

147 
u32
 
mix
;

150 i‡(
BLENDMODE
==0) {

151 c⁄° 
u32
 
uMsk
 = 0x1FE7F9FE;

153 
mix
 = (
uD°24
 + (
uSrc24
 & 
uMsk
)) >> 1;

157 i‡(
BLENDMODE
==1) {

158 
u32
 
sum
 = 
uSrc24
 + 
uD°24
;

159 
u32
 
ˇºõs
 = 
sum
 & 0x20080200;

160 
u32
 
modulo
 = 
sum
 - 
ˇºõs
;

161 
u32
 
˛amp
 = 
ˇºõs
 - (carries >> 9);

162 
mix
 = 
modulo
 | 
˛amp
;

166 i‡(
BLENDMODE
==2) {

168 
uD°24
 |= 0x20080200;

169 
u32
 
diff
 = 
uD°24
 - 
uSrc24
;

170 
u32
 
b‹rows
 = 
diff
 & 0x20080200;

171 
u32
 
˛amp
 = 
b‹rows
 - (borrows >> 9);

172 
mix
 = 
diff
 & 
˛amp
;

176 i‡(
BLENDMODE
==3) {

177 
uSrc24
 = (uSrc24 & 0x1FC7F1FC) >> 2;

178 
u32
 
sum
 = 
uSrc24
 + 
uD°24
;

179 
u32
 
ˇºõs
 = 
sum
 & 0x20080200;

180 
u32
 
modulo
 = 
sum
 - 
ˇºõs
;

181 
u32
 
˛amp
 = 
ˇºõs
 - (carries >> 9);

182 
mix
 = 
modulo
 | 
˛amp
;

185  
mix
;

186 
	}
}

	@src/gpu/gpu_unai/gpu_inner_blend_arm5.h

21 #i‚de‡
_OP_BLEND_H_


22 
	#_OP_BLEND_H_


	)

26 
	#gpuBÀndög00
(
uSrc
,
uD°
) \

28 
	`asm
 ("™d %[§c], %[§c], %[msk] " : [
§c
] "Ù" (
uSrc
Ë: "0" (uSrc), [
msk
] "r" (
uMsk
) ); \

29 
	`asm
 ("™d %[d°], %[d°], %[msk] " : [
d°
] "Ù" (
uD°
Ë: "0" (uD°), [
msk
] "r" (
uMsk
) ); \

30 
	`asm
 ("add %[§c], %[d°], %[§c] " : [
§c
] "Ù" (
uSrc
Ë: [
d°
] "r" (
uD°
), "0" (uSrc) ); \

31 
	`asm
 ("mov %[§c], %[§c],Ü§ #1 " : [
§c
] "Ù" (
uSrc
) : "0" (uSrc) ); \

32 }

	)

35 
	#gpuBÀndög01
(
uSrc
,
uD°
) \

37 
u16
 
°
,
dt
,
out
; \

38 
	`asm
 ("™d %[dt], %[d°], #0x7C00 " : [
dt
] "Ù" (dtË: [
d°
] "r" (
uD°
) ); \

39 
	`asm
 ("™d %[°], %[§c], #0x7C00 " : [
°
] "Ù" (°Ë: [
§c
] "r" (
uSrc
) ); \

40 
	`asm
 ("add %[out], %[dt], %[°] " : [
out
] "Ù" (outË: [
dt
] "r" (dt), [
°
] "r" (st) ); \

41 
	`asm
 ("cm∞ %[out], #0x7C00 " : : [
out
] "r" (out) : "cc" ); \

42 
	`asm
 ("movhò %[out], #0x7C00 " : [
out
] "=r" (out) : "0" (out) ); \

43 
	`asm
 ("™d %[dt], %[d°], #0x03E0 " : [
dt
] "Ù" (dtË: [
d°
] "r" (
uD°
) ); \

44 
	`asm
 ("™d %[°], %[§c], #0x03E0 " : [
°
] "Ù" (°Ë: [
§c
] "r" (
uSrc
) ); \

45 
	`asm
 ("add %[dt], %[dt], %[°] " : [
dt
] "Ù" (dtË: "0" (dt), [
°
] "r" (st) ); \

46 
	`asm
 ("cm∞ %[dt], #0x03E0 " : : [
dt
] "r" (dt) : "cc" ); \

47 
	`asm
 ("movhò %[dt], #0x03E0 " : [
dt
] "=r" (dt) : "0" (dt) ); \

48 
	`asm
 ("‹∏ %[out], %[out], %[dt] " : [
out
] "Ù" (outË: "0" (out), [
dt
] "r" (dt) ); \

49 
	`asm
 ("™d %[dt], %[d°], #0x001F " : [
dt
] "Ù" (dtË: [
d°
] "r" (
uD°
) ); \

50 
	`asm
 ("™d %[°], %[§c], #0x001F " : [
°
] "Ù" (°Ë: [
§c
] "r" (
uSrc
) ); \

51 
	`asm
 ("add %[dt], %[dt], %[°] " : [
dt
] "Ù" (dtË: "0" (dt), [
°
] "r" (st) ); \

52 
	`asm
 ("cm∞ %[dt], #0x001F " : : [
dt
] "r" (dt) : "cc" ); \

53 
	`asm
 ("movhò %[dt], #0x001F " : [
dt
] "=r" (dt) : "0" (dt) ); \

54 
	`asm
 ("‹∏ %[uSrc], %[out], %[dt] " : [
uSrc
] "Ù" (uSrcË: [
out
] "r" (out), [
dt
] "r" (dt) ); \

55 }

	)

58 
	#gpuBÀndög02
(
uSrc
,
uD°
) \

60 
u16
 
°
,
dt
,
out
; \

61 
	`asm
 ("™d %[dt], %[d°], #0x7C00 " : [
dt
] "Ù" (dtË: [
d°
] "r" (
uD°
) ); \

62 
	`asm
 ("™d %[°], %[§c], #0x7C00 " : [
°
] "Ù" (°Ë: [
§c
] "r" (
uSrc
) ); \

63 
	`asm
 ("sub† %[out], %[dt], %[°] " : [
out
] "Ù" (outË: [
dt
] "r" (dt), [
°
] "r" (st) : "cc" ); \

64 
	`asm
 ("movmò %[out], #0x0000 " : [
out
] "=r" (out) : "0" (out) ); \

65 
	`asm
 ("™d %[dt], %[d°], #0x03E0 " : [
dt
] "Ù" (dtË: [
d°
] "r" (
uD°
) ); \

66 
	`asm
 ("™d %[°], %[§c], #0x03E0 " : [
°
] "Ù" (°Ë: [
§c
] "r" (
uSrc
) ); \

67 
	`asm
 ("sub† %[dt], %[dt], %[°] " : [
dt
] "Ù" (dtË: "0" (dt), [
°
] "r" (st) : "cc" ); \

68 
	`asm
 ("‹Ω» %[out], %[out], %[dt] " : [
out
] "Ù" (outË: "0" (out), [
dt
] "r" (dt) ); \

69 
	`asm
 ("™d %[dt], %[d°], #0x001F " : [
dt
] "Ù" (dtË: [
d°
] "r" (
uD°
) ); \

70 
	`asm
 ("™d %[°], %[§c], #0x001F " : [
°
] "Ù" (°Ë: [
§c
] "r" (
uSrc
) ); \

71 
	`asm
 ("sub† %[dt], %[dt], %[°] " : [
dt
] "Ù" (dtË: "0" (dt), [
°
] "r" (st) : "cc" ); \

72 
	`asm
 ("‹Ω» %[out], %[out], %[dt] " : [
out
] "Ù" (outË: "0" (out), [
dt
] "r" (dt) ); \

73 
	`asm
 ("mov %[uSrc], %[out]" : [
uSrc
] "Ù" (uSrcË: [
out
] "r" (out) ); \

74 }

	)

77 
	#gpuBÀndög03
(
uSrc
,
uD°
) \

79 
u16
 
°
,
dt
,
out
; \

80 
	`asm
 ("mov %[§c], %[§c],Ü§ #2 " : [
§c
] "Ù" (
uSrc
) : "0" (uSrc) ); \

81 
	`asm
 ("™d %[dt], %[d°], #0x7C00 " : [
dt
] "Ù" (dtË: [
d°
] "r" (
uD°
) ); \

82 
	`asm
 ("™d %[°], %[§c], #0x1C00 " : [
°
] "Ù" (°Ë: [
§c
] "r" (
uSrc
) ); \

83 
	`asm
 ("add %[out], %[dt], %[°] " : [
out
] "Ù" (outË: [
dt
] "r" (dt), [
°
] "r" (st) ); \

84 
	`asm
 ("cm∞ %[out], #0x7C00 " : : [
out
] "r" (out) : "cc" ); \

85 
	`asm
 ("movhò %[out], #0x7C00 " : [
out
] "=r" (out) : "0" (out) ); \

86 
	`asm
 ("™d %[dt], %[d°], #0x03E0 " : [
dt
] "Ù" (dtË: [
d°
] "r" (
uD°
) ); \

87 
	`asm
 ("™d %[°], %[§c], #0x00E0 " : [
°
] "Ù" (°Ë: [
§c
] "r" (
uSrc
) ); \

88 
	`asm
 ("add %[dt], %[dt], %[°] " : [
dt
] "Ù" (dtË: "0" (dt), [
°
] "r" (st) ); \

89 
	`asm
 ("cm∞ %[dt], #0x03E0 " : : [
dt
] "r" (dt) : "cc" ); \

90 
	`asm
 ("movhò %[dt], #0x03E0 " : [
dt
] "=r" (dt) : "0" (dt) ); \

91 
	`asm
 ("‹∏ %[out], %[out], %[dt] " : [
out
] "Ù" (outË: "0" (out), [
dt
] "r" (dt) ); \

92 
	`asm
 ("™d %[dt], %[d°], #0x001F " : [
dt
] "Ù" (dtË: [
d°
] "r" (
uD°
) ); \

93 
	`asm
 ("™d %[°], %[§c], #0x0007 " : [
°
] "Ù" (°Ë: [
§c
] "r" (
uSrc
) ); \

94 
	`asm
 ("add %[dt], %[dt], %[°] " : [
dt
] "Ù" (dtË: "0" (dt), [
°
] "r" (st) ); \

95 
	`asm
 ("cm∞ %[dt], #0x001F " : : [
dt
] "r" (dt) : "cc" ); \

96 
	`asm
 ("movhò %[dt], #0x001F " : [
dt
] "=r" (dt) : "0" (dt) ); \

97 
	`asm
 ("‹∏ %[uSrc], %[out], %[dt] " : [
uSrc
] "Ù" (uSrcË: [
out
] "r" (out), [
dt
] "r" (dt) ); \

98 }

	)

	@src/gpu/gpu_unai/gpu_inner_blend_arm7.h

21 #i‚de‡
_OP_BLEND_H_


22 
	#_OP_BLEND_H_


	)

26 
	#gpuBÀndög00
(
uSrc
,
uD°
) \

28 
	`asm
 ("and %[src], %[src], %[msk]\n" \

32 : [
§c
] "=&r" (
uSrc
), [
d°
] "=&r" (
uD°
Ë: "0" (uSrc), "1" (uD°), [
msk
] "r" (
uMsk
)); \

33 }

	)

36 
	#gpuBÀndög01
(
uSrc
,
uD°
) \

38 
u32
 
°
,
dt
,
out
; \

39 
	`asm
 ("and %[dt], %[dst], #0x7C00\n" \

56 : [
§c
] "Ù" (
uSrc
), [
°
] "=&r" (°), [
dt
] "=&r" (dt), [
out
] "=&r" (out) \

57 : [
d°
] "r" (
uD°
), "0" (
uSrc
) : "cc"); \

58 }

	)

61 
	#gpuBÀndög02
(
uSrc
,
uD°
) \

63 
u32
 
°
,
dt
,
out
; \

64 
	`asm
 ("and %[dt], %[dst], #0x7C00\n" \

77 : [
§c
] "Ù" (
uSrc
), [
°
] "=&r" (°), [
dt
] "=&r" (dt), [
out
] "=&r" (out) \

78 : [
d°
] "r" (
uD°
), "0" (
uSrc
) : "cc"); \

79 }

	)

82 
	#gpuBÀndög03
(
uSrc
,
uD°
) \

84 
u32
 
°
,
dt
,
out
; \

85 
	`asm
 ("mov %[src], %[src],Üsr #2 \n" \

103 : [
§c
] "Ù" (
uSrc
), [
°
] "=&r" (°), [
dt
] "=&r" (dt), [
out
] "=&r" (out) \

104 : [
d°
] "r" (
uD°
), "0" (
uSrc
) : "cc"); \

105 }

	)

	@src/gpu/gpu_unai/gpu_inner_light.h

21 #i‚de‡
_OP_LIGHT_H_


22 
	#_OP_LIGHT_H_


	)

26 
	$SëupLightLUT
()

64 
j
=0; j < 32; ++j) {

65 
i
=0; i < 32; ++i) {

66 
vÆ
 = 
i
 * 
j
 / 16;

67 i‡(
vÆ
 > 31) val = 31;

68 
gpu_u«i
.
LightLUT
[(
j
*32Ë+ 
i
] = 
vÆ
;

71 
	}
}

86 
GPU_INLINE
 
u32
 
	$gpuPackGouøudCﬁ
(
u32
 
r
, u32 
g
, u32 
b
)

88  ((
u32
)(
b
>> 8)&(0x03ff ))

89 | ((
u32
)(
g
<< 3)&(0x07ff<<10))

90 | ((
u32
)(
r
<<14)&(0x07ff<<21));

91 
	}
}

110 
GPU_INLINE
 
u32
 
	$gpuPackGouøudCﬁInc
(
s32
 
dr
, s32 
dg
, s32 
db
)

112 
u32
 
dr_tmp
 = (u32)(
dr
 << 14)&(0xffffffff<<21); if (dr < 0) dr_tmp += 1<<21;

113 
u32
 
dg_tmp
 = (u32)(
dg
 << 3)&(0xffffffff<<10); if (dg < 0) dg_tmp += 1<<10;

114 
u32
 
db_tmp
 = (u32)(
db
 >> 8)&(0xffffffff ); if (db < 0) db_tmp += 1<< 0;

115  
db_tmp
 + 
dg_tmp
 + 
dr_tmp
;

116 
	}
}

130 
GPU_INLINE
 
u16
 
	$gpuLightögRGB
(
u32
 
gCﬁ
)

132  ((
gCﬁ
<< 5)&0x7C00) |

133 ((
gCﬁ
>>11)&0x03E0) |

134 (
gCﬁ
>>27);

135 
	}
}

151 
GPU_INLINE
 
u32
 
	$gpuLightögRGB24
(
u32
 
gCﬁ
)

153  ((
gCﬁ
<<19) & (0x1FF<<20)) |

154 ((
gCﬁ
>> 2) & (0x1FF<<10)) |

155 (
gCﬁ
>>23);

156 
	}
}

171 
GPU_INLINE
 
u16
 
	$gpuLightögTXT
(
u16
 
uSrc
, 
u8
 
r5
, u8 
g5
, u8 
b5
)

173  (
gpu_u«i
.
LightLUT
[((
uSrc
&0x7C00)>>5Ë| 
b5
] << 10) |

174 (
gpu_u«i
.
LightLUT
[ (
uSrc
&0x03E0Ë| 
g5
] << 5) |

175 (
gpu_u«i
.
LightLUT
[((
uSrc
&0x001F)<<5Ë| 
r5
] );

176 
	}
}

193 
GPU_INLINE
 
u16
 
	$gpuLightögTXTGouøud
(
u16
 
uSrc
, 
u32
 
gCﬁ
)

195  (
gpu_u«i
.
LightLUT
[((
uSrc
&0x7C00)>>5Ë| ((
gCﬁ
>> 5)&0x1F)]<<10) |

196 (
gpu_u«i
.
LightLUT
[ (
uSrc
&0x03E0Ë| ((
gCﬁ
>>16)&0x1F)]<< 5) |

197 (
gpu_u«i
.
LightLUT
[((
uSrc
&0x001F)<<5Ë| (
gCﬁ
>>27) ] );

198 
	}
}

217 
GPU_INLINE
 
u32
 
	$gpuLightögTXT24
(
u16
 
uSrc
, 
u8
 
r8
, u8 
g8
, u8 
b8
)

219 
u16
 
r1
 = 
uSrc
&0x001F;

220 
u16
 
g1
 = 
uSrc
&0x03E0;

221 
u16
 
b1
 = 
uSrc
&0x7C00;

223 
u16
 
r2
 = 
r8
;

224 
u16
 
g2
 = 
g8
;

225 
u16
 
b2
 = 
b8
;

227 
u32
 
r3
 = 
r1
 * 
r2
; if (r3 & 0xFFFFF000)Ñ3 = ~0xFFFFF000;

228 
u32
 
g3
 = 
g1
 * 
g2
; if (g3 & 0xFFFE0000) g3 = ~0xFFFE0000;

229 
u32
 
b3
 = 
b1
 * 
b2
; if (b3 & 0xFFC00000) b3 = ~0xFFC00000;

231  ((
r3
>> 3) ) |

232 ((
g3
>> 8)<<10) |

233 ((
b3
>>13)<<20);

234 
	}
}

252 
GPU_INLINE
 
u32
 
	$gpuLightögTXT24Gouøud
(
u16
 
uSrc
, 
u32
 
gCﬁ
)

254 
u16
 
r1
 = 
uSrc
&0x001F;

255 
u16
 
g1
 = 
uSrc
&0x03E0;

256 
u16
 
b1
 = 
uSrc
&0x7C00;

258 
u16
 
r2
 = (
gCﬁ
>>24) & 0xFF;

259 
u16
 
g2
 = (
gCﬁ
>>13) & 0xFF;

260 
u16
 
b2
 = (
gCﬁ
>> 2) & 0xFF;

262 
u32
 
r3
 = 
r1
 * 
r2
; if (r3 & 0xFFFFF000)Ñ3 = ~0xFFFFF000;

263 
u32
 
g3
 = 
g1
 * 
g2
; if (g3 & 0xFFFE0000) g3 = ~0xFFFE0000;

264 
u32
 
b3
 = 
b1
 * 
b2
; if (b3 & 0xFFC00000) b3 = ~0xFFC00000;

266  ((
r3
>> 3) ) |

267 ((
g3
>> 8)<<10) |

268 ((
b3
>>13)<<20);

269 
	}
}

	@src/gpu/gpu_unai/gpu_inner_quantization.h

20 #i‚de‡
_OP_DITHER_H_


21 
	#_OP_DITHER_H_


	)

23 
	$SëupDôhîögC⁄°™ts
()

37 c⁄° 
u8
 
DôhîM©rix
[] = {

48 
i
, 
j
;

49 
i
 = 0; i < 8; i++)

51 
j
 = 0; j < 8; j++)

53 
u16
 
off£t
 = (
i
 << 3Ë| 
j
;

55 
u32
 
comp⁄ít
 = ((
DôhîM©rix
[
off£t
] + 1) << 4) / 65;

64 
comp⁄ít
 &= ~1;

66 
gpu_u«i
.
DôhîM©rix
[
off£t
] = (
comp⁄ít
)

67 | (
comp⁄ít
 << 10)

68 | (
comp⁄ít
 << 20);

71 
	}
}

87 
	gãm∂©e
 <
	gDITHER
>

88 
GPU_INLINE
 
u16
 
	$gpuCﬁ‹Qu™tiz©i⁄24
(
u32
 
uSrc24
, c⁄° 
u16
 *
pD°
)

90 i‡(
DITHER
)

92 
u16
 
fbpos
 = (
u32
)(
pD°
 - 
gpu_u«i
.
vøm
);

93 
u16
 
off£t
 = ((
fbpos
 & (0x7 << 10)) >> 7) | (fbpos & 0x7);

96 
uSrc24
 = (uSrc24 & 0x1FF7FDFFË+ 
gpu_u«i
.
DôhîM©rix
[
off£t
];

98 i‡(
uSrc24
 & (1<< 9)) uSrc24 |= (0x1FF );

99 i‡(
uSrc24
 & (1<<19)) uSrc24 |= (0x1FF<<10);

100 i‡(
uSrc24
 & (1<<29)) uSrc24 |= (0x1FF<<20);

103  ((
uSrc24
>> 4) & (0x1F ))

104 | ((
uSrc24
>> 9) & (0x1F<<5 ))

105 | ((
uSrc24
>>14) & (0x1F<<10));

106 
	}
}

	@src/gpu/gpu_unai/gpu_raster_image.h

22 #i‚de‡
USE_GPULIB


23 
	$gpuLﬂdImage
(
PåUni⁄
 
∑ckë
)

25 
u16
 
x0
, 
y0
, 
w0
, 
h0
;

26 
x0
 = 
∑ckë
.
U2
[2] & 1023;

27 
y0
 = 
∑ckë
.
U2
[3] & 511;

28 
w0
 = 
∑ckë
.
U2
[4];

29 
h0
 = 
∑ckë
.
U2
[5];

31 i‡((
y0
 + 
h0
Ë> 
FRAME_HEIGHT
)

33 
h0
 = 
FRAME_HEIGHT
 - 
y0
;

36 
gpu_u«i
.
dma
.
FømeToWrôe
 = ((
w0
)&&(
h0
));

38 
gpu_u«i
.
dma
.
px
 = 0;

39 
gpu_u«i
.
dma
.
py
 = 0;

40 
gpu_u«i
.
dma
.
x_íd
 = 
w0
;

41 
gpu_u«i
.
dma
.
y_íd
 = 
h0
;

42 
gpu_u«i
.
dma
.
pvøm
 = &((
u16
*)gpu_u«i.
vøm
)[
x0
+(
y0
*1024)];

44 
gpu_u«i
.
GPU_GP1
 |= 0x08000000;

45 
	}
}

49 #i‚de‡
USE_GPULIB


50 
	$gpuSt‹eImage
(
PåUni⁄
 
∑ckë
)

52 
u16
 
x0
, 
y0
, 
w0
, 
h0
;

53 
x0
 = 
∑ckë
.
U2
[2] & 1023;

54 
y0
 = 
∑ckë
.
U2
[3] & 511;

55 
w0
 = 
∑ckë
.
U2
[4];

56 
h0
 = 
∑ckë
.
U2
[5];

58 i‡((
y0
 + 
h0
Ë> 
FRAME_HEIGHT
)

60 
h0
 = 
FRAME_HEIGHT
 - 
y0
;

62 
gpu_u«i
.
dma
.
FømeToRód
 = ((
w0
)&&(
h0
));

64 
gpu_u«i
.
dma
.
px
 = 0;

65 
gpu_u«i
.
dma
.
py
 = 0;

66 
gpu_u«i
.
dma
.
x_íd
 = 
w0
;

67 
gpu_u«i
.
dma
.
y_íd
 = 
h0
;

68 
gpu_u«i
.
dma
.
pvøm
 = &((
u16
*)gpu_u«i.
vøm
)[
x0
+(
y0
*1024)];

70 
gpu_u«i
.
GPU_GP1
 |= 0x08000000;

71 
	}
}

74 
	$gpuMoveImage
(
PåUni⁄
 
∑ckë
)

76 
u32
 
x0
, 
y0
, 
x1
, 
y1
;

77 
s32
 
w0
, 
h0
;

78 
x0
 = 
∑ckë
.
U2
[2] & 1023;

79 
y0
 = 
∑ckë
.
U2
[3] & 511;

80 
x1
 = 
∑ckë
.
U2
[4] & 1023;

81 
y1
 = 
∑ckë
.
U2
[5] & 511;

82 
w0
 = 
∑ckë
.
U2
[6];

83 
h0
 = 
∑ckë
.
U2
[7];

85 if–(
x0
==
x1
Ë&& (
y0
==
y1
) ) ;

86 i‡((
w0
<=0Ë|| (
h0
<=0)) ;

88 #ifde‡
ENABLE_GPU_LOG_SUPPORT


89 
	`Ârötf
(
°dout
,"gpuMoveImage(x0=%u,y0=%u,x1=%u,y1=%u,w0=%d,h0=%d)\n",
x0
,
y0
,
x1
,
y1
,
w0
,
h0
);

92 i‡(((
y0
+
h0
)>512)||((
x0
+
w0
)>1024)||((
y1
+h0)>512)||((
x1
+w0)>1024))

94 
u16
 *
psxVuw
=
gpu_u«i
.
vøm
;

95 
s32
 
i
,
j
;

96 
j
=0;j<
h0
;j++)

97 
i
=0;i<
w0
;i++)

98 
psxVuw
 [(1024*((
y1
+
j
)&511))+((
x1
+
i
)&0x3ff)]=

99 
psxVuw
[(1024*((
y0
+
j
)&511))+((
x0
+
i
)&0x3ff)];

101 i‡((
x0
&1)||(
x1
&1))

103 
u16
 *
ÕD°
, *
ÕSrc
;

104 
ÕD°
 = 
ÕSrc
 = (
u16
*)
gpu_u«i
.
vøm
;

105 
ÕSrc
 +
	`FRAME_OFFSET
(
x0
, 
y0
);

106 
ÕD°
 +
	`FRAME_OFFSET
(
x1
, 
y1
);

107 
x1
 = 
FRAME_WIDTH
 - 
w0
;

109 
x0
=
w0
;

110 dÿ{ *
ÕD°
++ = *
ÕSrc
++; } --
x0
);

111 
ÕD°
 +
x1
;

112 
ÕSrc
 +
x1
;

113 } --
h0
);

117 
u32
 *
ÕD°
, *
ÕSrc
;

118 
ÕD°
 = 
ÕSrc
 = (
u32
*)(*)
gpu_u«i
.
vøm
;

119 
ÕSrc
 +((
	`FRAME_OFFSET
(
x0
, 
y0
))>>1);

120 
ÕD°
 +((
	`FRAME_OFFSET
(
x1
, 
y1
))>>1);

121 i‡(
w0
&1)

123 
x1
 = (
FRAME_WIDTH
 - 
w0
 +1)>>1;

124 
w0
>>=1;

125 i‡(!
w0
) {

127 *((
u16
*)
ÕD°
Ë*((u16*)
ÕSrc
);

128 
ÕD°
 +
x1
;

129 
ÕSrc
 +
x1
;

130 } --
h0
);

133 
x0
=
w0
;

134 dÿ{ *
ÕD°
++ = *
ÕSrc
++; } --
x0
);

135 *((
u16
*)
ÕD°
Ë*((u16*)
ÕSrc
);

136 
ÕD°
 +
x1
;

137 
ÕSrc
 +
x1
;

138 } --
h0
);

142 
x1
 = (
FRAME_WIDTH
 - 
w0
)>>1;

143 
w0
>>=1;

145 
x0
=
w0
;

146 dÿ{ *
ÕD°
++ = *
ÕSrc
++; } --
x0
);

147 
ÕD°
 +
x1
;

148 
ÕSrc
 +
x1
;

149 } --
h0
);

152 
	}
}

154 
	$gpuCÀ¨Image
(
PåUni⁄
 
∑ckë
)

156 
s32
 
x0
, 
y0
, 
w0
, 
h0
;

157 
x0
 = 
∑ckë
.
S2
[2];

158 
y0
 = 
∑ckë
.
S2
[3];

159 
w0
 = 
∑ckë
.
S2
[4] & 0x3ff;

160 
h0
 = 
∑ckë
.
S2
[5] & 0x3ff;

162 
w0
 +
x0
;

163 i‡(
x0
 < 0) x0 = 0;

164 i‡(
w0
 > 
FRAME_WIDTH
) w0 = FRAME_WIDTH;

165 
w0
 -
x0
;

166 i‡(
w0
 <= 0) ;

167 
h0
 +
y0
;

168 i‡(
y0
 < 0) y0 = 0;

169 i‡(
h0
 > 
FRAME_HEIGHT
) h0 = FRAME_HEIGHT;

170 
h0
 -
y0
;

171 i‡(
h0
 <= 0) ;

173 #ifde‡
ENABLE_GPU_LOG_SUPPORT


174 
	`Ârötf
(
°dout
,"gpuCÀ¨Image(x0=%d,y0=%d,w0=%d,h0=%d)\n",
x0
,
y0
,
w0
,
h0
);

177 i‡(
x0
&1)

179 
u16
* 
pixñ
 = (u16*)
gpu_u«i
.
vøm
 + 
	`FRAME_OFFSET
(
x0
, 
y0
);

180 
u16
 
rgb
 = 
	`GPU_RGB16
(
∑ckë
.
U4
[0]);

181 
y0
 = 
FRAME_WIDTH
 - 
w0
;

183 
x0
=
w0
;

184 dÿ{ *
pixñ
++ = 
rgb
; } --
x0
);

185 
pixñ
 +
y0
;

186 } --
h0
);

190 
u32
* 
pixñ
 = (u32*)
gpu_u«i
.
vøm
 + ((
	`FRAME_OFFSET
(
x0
, 
y0
))>>1);

191 
u32
 
rgb
 = 
	`GPU_RGB16
(
∑ckë
.
U4
[0]);

192 
rgb
 |= (rgb<<16);

193 i‡(
w0
&1)

195 
y0
 = (
FRAME_WIDTH
 - 
w0
 +1)>>1;

196 
w0
>>=1;

198 
x0
=
w0
;

199 dÿ{ *
pixñ
++ = 
rgb
; } --
x0
);

200 *((
u16
*)
pixñ
Ë(u16)
rgb
;

201 
pixñ
 +
y0
;

202 } --
h0
);

206 
y0
 = (
FRAME_WIDTH
 - 
w0
)>>1;

207 
w0
>>=1;

209 
x0
=
w0
;

210 dÿ{ *
pixñ
++ = 
rgb
; } --
x0
);

211 
pixñ
 +
y0
;

212 } --
h0
);

215 
	}
}

	@src/gpu/gpu_unai/gpu_raster_line.h

47 
	#GPU_LINE_FIXED_BITS
 16

	)

51 
	#USE_LINES_ALL_FIXED_PT_MATH


	)

56 
	$gpuDøwLöeF
(
PåUni⁄
 
∑ckë
, c⁄° 
PSD
 
gpuPixñS∑nDrivî
)

58 
x0
, 
y0
, 
x1
, 
y1
;

59 
dx
, 
dy
;

62 
±rdiff_t
 
sx
;

63 c⁄° 
±rdiff_t
 
d°_dïth
 = 
FRAME_BYTES_PER_PIXEL
;

64 c⁄° 
±rdiff_t
 
d°_°ride
 = 
FRAME_BYTE_STRIDE
;

69 c⁄° 
xmö
 = 
gpu_u«i
.
DøwögAªa
[0];

70 c⁄° 
ymö
 = 
gpu_u«i
.
DøwögAªa
[1];

71 c⁄° 
xmax
 = 
gpu_u«i
.
DøwögAªa
[2] - 1;

72 c⁄° 
ymax
 = 
gpu_u«i
.
DøwögAªa
[3] - 1;

74 
x0
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[2]Ë+ 
gpu_u«i
.
DøwögOff£t
[0];

75 
y0
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[3]Ë+ 
gpu_u«i
.
DøwögOff£t
[1];

76 
x1
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[4]Ë+ 
gpu_u«i
.
DøwögOff£t
[0];

77 
y1
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[5]Ë+ 
gpu_u«i
.
DøwögOff£t
[1];

80 i‡(
y0
 > 
y1
) {

81 
	`Sw≠VÆues
(
y0
, 
y1
);

82 
	`Sw≠VÆues
(
x0
, 
x1
);

86 i‡(
y0
 > 
ymax
 || 
y1
 < 
ymö
) ;

88 
dx
 = 
x1
 - 
x0
;

89 
dy
 = 
y1
 - 
y0
;

94 i‡(
dx
 >
CHKMAX_X
 || dx <= -CHKMAX_X)

98 i‡(
dy
) {

101 i‡(
dy
 >
CHKMAX_Y
)

105 i‡(
y0
 < 
ymö
) {

106 
x0
 +
	`GPU_FAST_DIV
(((
ymö
 - 
y0
Ë* 
dx
), 
dy
);

107 
y0
 = 
ymö
;

109 i‡(
y1
 > 
ymax
) {

110 
x1
 +
	`GPU_FAST_DIV
(((
ymax
 - 
y1
Ë* 
dx
), 
dy
);

111 
y1
 = 
ymax
;

115 
dx
 = 
x1
 - 
x0
;

116 
dy
 = 
y1
 - 
y0
;

120 i‡(
dx
 == 0) {

122 i‡(
x0
 < 
xmö
 || x0 > 
xmax
)

124 
sx
 = 0;

126 i‡(
dx
 > 0) {

128 i‡(
x0
 > 
xmax
) ;

130 i‡(
x0
 < 
xmö
) {

131 i‡(
x1
 < 
xmö
) ;

132 
y0
 +
	`GPU_FAST_DIV
(((
xmö
 - 
x0
Ë* 
dy
), 
dx
);

133 
x0
 = 
xmö
;

136 i‡(
x1
 > 
xmax
) {

137 
y1
 +
	`GPU_FAST_DIV
(((
xmax
 - 
x1
Ë* 
dy
), 
dx
);

138 
x1
 = 
xmax
;

141 
sx
 = +1;

142 
dx
 = 
x1
 - 
x0
;

145 i‡(
x1
 > 
xmax
) ;

147 i‡(
x1
 < 
xmö
) {

148 i‡(
x0
 < 
xmö
) ;

150 
y1
 +
	`GPU_FAST_DIV
(((
xmö
 - 
x1
Ë* 
dy
), 
dx
);

151 
x1
 = 
xmö
;

154 i‡(
x0
 > 
xmax
) {

155 
y0
 +
	`GPU_FAST_DIV
(((
xmax
 - 
x0
Ë* 
dy
), 
dx
);

156 
x0
 = 
xmax
;

159 
sx
 = -1;

160 
dx
 = 
x0
 - 
x1
;

164 
dy
 = 
y1
 - 
y0
;

169 
mö_Àngth
,

170 
°¨t_Àngth
,

171 
íd_Àngth
,

172 
îr_ãrm
,

173 
îr_adjup
,

174 
îr_adjdown
;

177 
uöçå_t
 
cﬁ16
 = 
	`GPU_RGB16
(
∑ckë
.
U4
[0]);

182 
u8
 *
d°
 = (u8*)
gpu_u«i
.
vøm
 + 
y0
 * 
d°_°ride
 + 
x0
 * 
d°_dïth
;

185 i‡(
dx
 == 0) {

186 
	`gpuPixñS∑nDrivî
(
d°
, 
cﬁ16
, 
d°_°ride
, 
dy
+1);

191 i‡(
dy
 == 0) {

192 
	`gpuPixñS∑nDrivî
(
d°
, 
cﬁ16
, 
sx
 * 
d°_dïth
, 
dx
+1);

197 i‡(
dx
 =
dy
) {

198 
	`gpuPixñS∑nDrivî
(
d°
, 
cﬁ16
, 
d°_°ride
 + (
sx
 * 
d°_dïth
), 
dy
+1);

202 
maj‹
, 
mö‹
;

203 
±rdiff_t
 
ö¸_maj‹
, 
ö¸_mö‹
;

205 i‡(
dx
 > 
dy
) {

206 
maj‹
 = 
dx
;

207 
mö‹
 = 
dy
;

209 
maj‹
 = 
dy
;

210 
mö‹
 = 
dx
;

214 i‡(
maj‹
 < (2 * 
mö‹
)) {

216 
mö‹
 = 
maj‹
 - minor;

219 
ö¸_maj‹
 = 
d°_°ride
 + (
sx
 * 
d°_dïth
);

222 i‡(
dx
 > 
dy
)

223 
ö¸_mö‹
 = -
d°_°ride
;

225 
ö¸_mö‹
 = -
sx
 * 
d°_dïth
;

228 i‡(
dx
 > 
dy
) {

229 
ö¸_maj‹
 = 
sx
 * 
d°_dïth
;

230 
ö¸_mö‹
 = 
d°_°ride
;

232 
ö¸_maj‹
 = 
d°_°ride
;

233 
ö¸_mö‹
 = 
sx
 * 
d°_dïth
;

237 i‡(
mö‹
 > 1) {

239 
mö_Àngth
 = 
maj‹
 / 
mö‹
;

242 
îr_ãrm
 = (
maj‹
 % 
mö‹
) - (minor * 2);

246 
îr_adjup
 = (
maj‹
 % 
mö‹
) * 2;

248 
mö_Àngth
 = 
maj‹
;

249 
îr_ãrm
 = 0;

250 
îr_adjup
 = 0;

255 
îr_adjdown
 = 
mö‹
 * 2;

260 
°¨t_Àngth
 = 
íd_Àngth
 = (
mö_Àngth
 / 2) + 1;

262 i‡(
mö_Àngth
 & 1) {

267 
îr_ãrm
 +
mö‹
;

272 i‡(
îr_adjup
 == 0)

273 
°¨t_Àngth
--;

277 
d°
 = 
	`gpuPixñS∑nDrivî
(d°, 
cﬁ16
, 
ö¸_maj‹
, 
°¨t_Àngth
);

278 
d°
 +
ö¸_mö‹
;

281 --
mö‹
 > 0) {

282 
run_Àngth
 = 
mö_Àngth
;

283 
îr_ãrm
 +
îr_adjup
;

286 i‡(
îr_ãrm
 > 0) {

287 
îr_ãrm
 -
îr_adjdown
;

288 
run_Àngth
++;

291 
d°
 = 
	`gpuPixñS∑nDrivî
(d°, 
cﬁ16
, 
ö¸_maj‹
, 
run_Àngth
);

292 
d°
 +
ö¸_mö‹
;

296 
	`gpuPixñS∑nDrivî
(
d°
, 
cﬁ16
, 
ö¸_maj‹
, 
íd_Àngth
);

297 
	}
}

302 
	$gpuDøwLöeG
(
PåUni⁄
 
∑ckë
, c⁄° 
PSD
 
gpuPixñS∑nDrivî
)

304 
x0
, 
y0
, 
x1
, 
y1
;

305 
dx
, 
dy
, 
dr
, 
dg
, 
db
;

306 
u32
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

309 
±rdiff_t
 
sx
;

310 c⁄° 
±rdiff_t
 
d°_dïth
 = 
FRAME_BYTES_PER_PIXEL
;

311 c⁄° 
±rdiff_t
 
d°_°ride
 = 
FRAME_BYTE_STRIDE
;

316 c⁄° 
xmö
 = 
gpu_u«i
.
DøwögAªa
[0];

317 c⁄° 
ymö
 = 
gpu_u«i
.
DøwögAªa
[1];

318 c⁄° 
xmax
 = 
gpu_u«i
.
DøwögAªa
[2] - 1;

319 c⁄° 
ymax
 = 
gpu_u«i
.
DøwögAªa
[3] - 1;

321 
x0
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[2]Ë+ 
gpu_u«i
.
DøwögOff£t
[0];

322 
y0
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[3]Ë+ 
gpu_u«i
.
DøwögOff£t
[1];

323 
x1
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[6]Ë+ 
gpu_u«i
.
DøwögOff£t
[0];

324 
y1
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[7]Ë+ 
gpu_u«i
.
DøwögOff£t
[1];

326 
u32
 
cﬁ0
 = 
∑ckë
.
U4
[0];

327 
u32
 
cﬁ1
 = 
∑ckë
.
U4
[2];

330 i‡(
y0
 > 
y1
) {

331 
	`Sw≠VÆues
(
y0
, 
y1
);

332 
	`Sw≠VÆues
(
x0
, 
x1
);

333 
	`Sw≠VÆues
(
cﬁ0
, 
cﬁ1
);

337 i‡(
y0
 > 
ymax
 || 
y1
 < 
ymö
) ;

341 #ifde‡
GPU_GOURAUD_LOW_PRECISION


342 
r0
 = (
cﬁ0
 >> 3Ë& 0x1f; 
g0
 = (cﬁ0 >> 11Ë& 0x1f; 
b0
 = (col0 >> 19) & 0x1f;

343 
r1
 = (
cﬁ1
 >> 3Ë& 0x1f; 
g1
 = (cﬁ1 >> 11Ë& 0x1f; 
b1
 = (col1 >> 19) & 0x1f;

345 
r0
 = 
cﬁ0
 & 0xff; 
g0
 = (cﬁ0 >> 8Ë& 0xff; 
b0
 = (col0 >> 16) & 0xff;

346 
r1
 = 
cﬁ1
 & 0xff; 
g1
 = (cﬁ1 >> 8Ë& 0xff; 
b1
 = (col1 >> 16) & 0xff;

349 
dx
 = 
x1
 - 
x0
;

350 
dy
 = 
y1
 - 
y0
;

351 
dr
 = 
r1
 - 
r0
;

352 
dg
 = 
g1
 - 
g0
;

353 
db
 = 
b1
 - 
b0
;

358 i‡(
dx
 >
CHKMAX_X
 || dx <= -CHKMAX_X)

362 i‡(
dy
) {

365 i‡(
dy
 >
CHKMAX_Y
)

369 i‡(
y0
 < 
ymö
) {

370 #ifde‡
USE_LINES_ALL_FIXED_PT_MATH


371 
s32
 
Á˘‹
 = 
	`GPU_FAST_DIV
(((
ymö
 - 
y0
Ë<< 
GPU_LINE_FIXED_BITS
), 
dy
);

372 
x0
 +(
dx
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

373 
r0
 +(
dr
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

374 
g0
 +(
dg
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

375 
b0
 +(
db
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

377 
x0
 +(
ymö
 - 
y0
Ë* 
dx
 / 
dy
;

378 
r0
 +(
ymö
 - 
y0
Ë* 
dr
 / 
dy
;

379 
g0
 +(
ymö
 - 
y0
Ë* 
dg
 / 
dy
;

380 
b0
 +(
ymö
 - 
y0
Ë* 
db
 / 
dy
;

382 
y0
 = 
ymö
;

385 i‡(
y1
 > 
ymax
) {

386 #ifde‡
USE_LINES_ALL_FIXED_PT_MATH


387 
s32
 
Á˘‹
 = 
	`GPU_FAST_DIV
(((
ymax
 - 
y1
Ë<< 
GPU_LINE_FIXED_BITS
), 
dy
);

388 
x1
 +(
dx
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

389 
r1
 +(
dr
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

390 
g1
 +(
dg
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

391 
b1
 +(
db
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

393 
x1
 +(
ymax
 - 
y1
Ë* 
dx
 / 
dy
;

394 
r1
 +(
ymax
 - 
y1
Ë* 
dr
 / 
dy
;

395 
g1
 +(
ymax
 - 
y1
Ë* 
dg
 / 
dy
;

396 
b1
 +(
ymax
 - 
y1
Ë* 
db
 / 
dy
;

398 
y1
 = 
ymax
;

402 
dx
 = 
x1
 - 
x0
;

403 
dy
 = 
y1
 - 
y0
;

404 
dr
 = 
r1
 - 
r0
;

405 
dg
 = 
g1
 - 
g0
;

406 
db
 = 
b1
 - 
b0
;

410 i‡(
dx
 == 0) {

412 i‡(
x0
 < 
xmö
 || x0 > 
xmax
)

414 
sx
 = 0;

416 i‡(
dx
 > 0) {

418 i‡(
x0
 > 
xmax
) ;

420 i‡(
x0
 < 
xmö
) {

421 i‡(
x1
 < 
xmö
) ;

423 #ifde‡
USE_LINES_ALL_FIXED_PT_MATH


424 
s32
 
Á˘‹
 = 
	`GPU_FAST_DIV
(((
xmö
 - 
x0
Ë<< 
GPU_LINE_FIXED_BITS
), 
dx
);

425 
y0
 +(
dy
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

426 
r0
 +(
dr
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

427 
g0
 +(
dg
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

428 
b0
 +(
db
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

430 
y0
 +(
xmö
 - 
x0
Ë* 
dy
 / 
dx
;

431 
r0
 +(
xmö
 - 
x0
Ë* 
dr
 / 
dx
;

432 
g0
 +(
xmö
 - 
x0
Ë* 
dg
 / 
dx
;

433 
b0
 +(
xmö
 - 
x0
Ë* 
db
 / 
dx
;

435 
x0
 = 
xmö
;

438 i‡(
x1
 > 
xmax
) {

439 #ifde‡
USE_LINES_ALL_FIXED_PT_MATH


440 
s32
 
Á˘‹
 = 
	`GPU_FAST_DIV
(((
xmax
 - 
x1
Ë<< 
GPU_LINE_FIXED_BITS
), 
dx
);

441 
y1
 +(
dy
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

442 
r1
 +(
dr
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

443 
g1
 +(
dg
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

444 
b1
 +(
db
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

446 
y1
 +(
xmax
 - 
x1
Ë* 
dy
 / 
dx
;

447 
r1
 +(
xmax
 - 
x1
Ë* 
dr
 / 
dx
;

448 
g1
 +(
xmax
 - 
x1
Ë* 
dg
 / 
dx
;

449 
b1
 +(
xmax
 - 
x1
Ë* 
db
 / 
dx
;

451 
x1
 = 
xmax
;

454 
sx
 = +1;

455 
dx
 = 
x1
 - 
x0
;

458 i‡(
x1
 > 
xmax
) ;

460 i‡(
x1
 < 
xmö
) {

461 i‡(
x0
 < 
xmö
) ;

463 #ifde‡
USE_LINES_ALL_FIXED_PT_MATH


464 
s32
 
Á˘‹
 = 
	`GPU_FAST_DIV
(((
xmö
 - 
x1
Ë<< 
GPU_LINE_FIXED_BITS
), 
dx
);

465 
y1
 +(
dy
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

466 
r1
 +(
dr
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

467 
g1
 +(
dg
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

468 
b1
 +(
db
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

470 
y1
 +(
xmö
 - 
x1
Ë* 
dy
 / 
dx
;

471 
r1
 +(
xmö
 - 
x1
Ë* 
dr
 / 
dx
;

472 
g1
 +(
xmö
 - 
x1
Ë* 
dg
 / 
dx
;

473 
b1
 +(
xmö
 - 
x1
Ë* 
db
 / 
dx
;

475 
x1
 = 
xmö
;

478 i‡(
x0
 > 
xmax
) {

479 #ifde‡
USE_LINES_ALL_FIXED_PT_MATH


480 
s32
 
Á˘‹
 = 
	`GPU_FAST_DIV
(((
xmax
 - 
x0
Ë<< 
GPU_LINE_FIXED_BITS
), 
dx
);

481 
y0
 +(
dy
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

482 
r0
 +(
dr
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

483 
g0
 +(
dg
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

484 
b0
 +(
db
 * 
Á˘‹
Ë>> 
GPU_LINE_FIXED_BITS
;

486 
y0
 +(
xmax
 - 
x0
Ë* 
dy
 / 
dx
;

487 
r0
 +(
xmax
 - 
x0
Ë* 
dr
 / 
dx
;

488 
g0
 +(
xmax
 - 
x0
Ë* 
dg
 / 
dx
;

489 
b0
 +(
xmax
 - 
x0
Ë* 
db
 / 
dx
;

491 
x0
 = 
xmax
;

494 
sx
 = -1;

495 
dx
 = 
x0
 - 
x1
;

499 
dy
 = 
y1
 - 
y0
;

500 
dr
 = 
r1
 - 
r0
;

501 
dg
 = 
g1
 - 
g0
;

502 
db
 = 
b1
 - 
b0
;

507 
mö_Àngth
,

508 
°¨t_Àngth
,

509 
íd_Àngth
,

510 
îr_ãrm
,

511 
îr_adjup
,

512 
îr_adjdown
;

514 
GouøudCﬁ‹
 
gcﬁ
;

515 
gcﬁ
.
r
 = 
r0
 << 
GPU_GOURAUD_FIXED_BITS
;

516 
gcﬁ
.
g
 = 
g0
 << 
GPU_GOURAUD_FIXED_BITS
;

517 
gcﬁ
.
b
 = 
b0
 << 
GPU_GOURAUD_FIXED_BITS
;

522 
u8
 *
d°
 = (u8*)
gpu_u«i
.
vøm
 + 
y0
 * 
d°_°ride
 + 
x0
 * 
d°_dïth
;

525 i‡(
dx
 == 0) {

526 #ifde‡
USE_LINES_ALL_FIXED_PT_MATH


528 
s32
 
öv_Á˘‹
 = 1 << 
GPU_GOURAUD_FIXED_BITS
;

529 i‡(
dy
 > 1Ë
öv_Á˘‹
 = 
	`GPU_FAST_DIV
(inv_factor, dy);

532 
gcﬁ
.
r_ö¸
 = 
dr
 * 
öv_Á˘‹
;

533 
gcﬁ
.
g_ö¸
 = 
dg
 * 
öv_Á˘‹
;

534 
gcﬁ
.
b_ö¸
 = 
db
 * 
öv_Á˘‹
;

537 
gcﬁ
.
r_ö¸
 = 
dr
 << 
GPU_GOURAUD_FIXED_BITS
;

538 
gcﬁ
.
g_ö¸
 = 
dg
 << 
GPU_GOURAUD_FIXED_BITS
;

539 
gcﬁ
.
b_ö¸
 = 
db
 << 
GPU_GOURAUD_FIXED_BITS
;

541 i‡(
dy
 > 1) {

542 i‡(
dr
Ë
gcﬁ
.
r_ö¸
 /
dy
;

543 i‡(
dg
Ë
gcﬁ
.
g_ö¸
 /
dy
;

544 i‡(
db
Ë
gcﬁ
.
b_ö¸
 /
dy
;

548 
	`gpuPixñS∑nDrivî
(
d°
, (
uöçå_t
)&
gcﬁ
, 
d°_°ride
, 
dy
+1);

553 i‡(
dy
 == 0) {

554 #ifde‡
USE_LINES_ALL_FIXED_PT_MATH


556 
s32
 
öv_Á˘‹
 = (1 << 
GPU_GOURAUD_FIXED_BITS
);

557 i‡(
dx
 > 1Ë
öv_Á˘‹
 = 
	`GPU_FAST_DIV
(inv_factor, dx);

560 
gcﬁ
.
r_ö¸
 = 
dr
 * 
öv_Á˘‹
;

561 
gcﬁ
.
g_ö¸
 = 
dg
 * 
öv_Á˘‹
;

562 
gcﬁ
.
b_ö¸
 = 
db
 * 
öv_Á˘‹
;

564 
gcﬁ
.
r_ö¸
 = 
dr
 << 
GPU_GOURAUD_FIXED_BITS
;

565 
gcﬁ
.
g_ö¸
 = 
dg
 << 
GPU_GOURAUD_FIXED_BITS
;

566 
gcﬁ
.
b_ö¸
 = 
db
 << 
GPU_GOURAUD_FIXED_BITS
;

568 i‡(
dx
 > 1) {

569 i‡(
dr
Ë
gcﬁ
.
r_ö¸
 /
dx
;

570 i‡(
dg
Ë
gcﬁ
.
g_ö¸
 /
dx
;

571 i‡(
db
Ë
gcﬁ
.
b_ö¸
 /
dx
;

575 
	`gpuPixñS∑nDrivî
(
d°
, (
uöçå_t
)&
gcﬁ
, 
sx
 * 
d°_dïth
, 
dx
+1);

580 i‡(
dx
 =
dy
) {

581 #ifde‡
USE_LINES_ALL_FIXED_PT_MATH


583 
s32
 
öv_Á˘‹
 = (1 << 
GPU_GOURAUD_FIXED_BITS
);

584 i‡(
dx
 > 1Ë
öv_Á˘‹
 = 
	`GPU_FAST_DIV
(inv_factor, dx);

587 
gcﬁ
.
r_ö¸
 = 
dr
 * 
öv_Á˘‹
;

588 
gcﬁ
.
g_ö¸
 = 
dg
 * 
öv_Á˘‹
;

589 
gcﬁ
.
b_ö¸
 = 
db
 * 
öv_Á˘‹
;

592 
gcﬁ
.
r_ö¸
 = 
dr
 << 
GPU_GOURAUD_FIXED_BITS
;

593 
gcﬁ
.
g_ö¸
 = 
dg
 << 
GPU_GOURAUD_FIXED_BITS
;

594 
gcﬁ
.
b_ö¸
 = 
db
 << 
GPU_GOURAUD_FIXED_BITS
;

596 i‡(
dx
 > 1) {

597 i‡(
dr
Ë
gcﬁ
.
r_ö¸
 /
dx
;

598 i‡(
dg
Ë
gcﬁ
.
g_ö¸
 /
dx
;

599 i‡(
db
Ë
gcﬁ
.
b_ö¸
 /
dx
;

603 
	`gpuPixñS∑nDrivî
(
d°
, (
uöçå_t
)&
gcﬁ
, 
d°_°ride
 + (
sx
 * 
d°_dïth
), 
dy
+1);

607 
maj‹
, 
mö‹
;

608 
±rdiff_t
 
ö¸_maj‹
, 
ö¸_mö‹
;

610 i‡(
dx
 > 
dy
) {

611 
maj‹
 = 
dx
;

612 
mö‹
 = 
dy
;

614 
maj‹
 = 
dy
;

615 
mö‹
 = 
dx
;

619 i‡(
maj‹
 < (2 * 
mö‹
)) {

621 
mö‹
 = 
maj‹
 - minor;

624 
ö¸_maj‹
 = 
d°_°ride
 + (
sx
 * 
d°_dïth
);

627 i‡(
dx
 > 
dy
)

628 
ö¸_mö‹
 = -
d°_°ride
;

630 
ö¸_mö‹
 = -
sx
 * 
d°_dïth
;

633 i‡(
dx
 > 
dy
) {

634 
ö¸_maj‹
 = 
sx
 * 
d°_dïth
;

635 
ö¸_mö‹
 = 
d°_°ride
;

637 
ö¸_maj‹
 = 
d°_°ride
;

638 
ö¸_mö‹
 = 
sx
 * 
d°_dïth
;

642 #ifde‡
USE_LINES_ALL_FIXED_PT_MATH


643 
s32
 
maj‹_öv
 = 
	`GPU_FAST_DIV
((1 << 
GPU_GOURAUD_FIXED_BITS
), 
maj‹
);

646 
gcﬁ
.
r_ö¸
 = 
dr
 * 
maj‹_öv
;

647 
gcﬁ
.
g_ö¸
 = 
dg
 * 
maj‹_öv
;

648 
gcﬁ
.
b_ö¸
 = 
db
 * 
maj‹_öv
;

650 
gcﬁ
.
r_ö¸
 = 
dr
 ? ((d∏<< 
GPU_GOURAUD_FIXED_BITS
Ë/ 
maj‹
) : 0;

651 
gcﬁ
.
g_ö¸
 = 
dg
 ? ((dg << 
GPU_GOURAUD_FIXED_BITS
Ë/ 
maj‹
) : 0;

652 
gcﬁ
.
b_ö¸
 = 
db
 ? ((db << 
GPU_GOURAUD_FIXED_BITS
Ë/ 
maj‹
) : 0;

655 i‡(
mö‹
 > 1) {

657 
mö_Àngth
 = 
maj‹
 / 
mö‹
;

660 
îr_ãrm
 = (
maj‹
 % 
mö‹
) - (minor * 2);

664 
îr_adjup
 = (
maj‹
 % 
mö‹
) * 2;

666 
mö_Àngth
 = 
maj‹
;

667 
îr_ãrm
 = 0;

668 
îr_adjup
 = 0;

673 
îr_adjdown
 = 
mö‹
 * 2;

678 
°¨t_Àngth
 = 
íd_Àngth
 = (
mö_Àngth
 / 2) + 1;

680 i‡(
mö_Àngth
 & 1) {

685 
îr_ãrm
 +
mö‹
;

690 i‡(
îr_adjup
 == 0)

691 
°¨t_Àngth
--;

695 
d°
 = 
	`gpuPixñS∑nDrivî
(d°, (
uöçå_t
)&
gcﬁ
, 
ö¸_maj‹
, 
°¨t_Àngth
);

696 
d°
 +
ö¸_mö‹
;

699 --
mö‹
 > 0) {

700 
run_Àngth
 = 
mö_Àngth
;

701 
îr_ãrm
 +
îr_adjup
;

704 i‡(
îr_ãrm
 > 0) {

705 
îr_ãrm
 -
îr_adjdown
;

706 
run_Àngth
++;

709 
d°
 = 
	`gpuPixñS∑nDrivî
(d°, (
uöçå_t
)&
gcﬁ
, 
ö¸_maj‹
, 
run_Àngth
);

710 
d°
 +
ö¸_mö‹
;

714 
	`gpuPixñS∑nDrivî
(
d°
, (
uöçå_t
)&
gcﬁ
, 
ö¸_maj‹
, 
íd_Àngth
);

715 
	}
}

	@src/gpu/gpu_unai/gpu_raster_polygon.h

28 
	sPﬁyVîãx
 {

29 
s32
 
	mx
, 
	my
;

31 °ru˘ { 
u8
 
	mu
, 
	mv
, 
	m∑d
[2]; } 
	mãx
;

32 
u32
 
	mãx_w‹d
;

35 °ru˘ { 
u8
 
	mr
, 
	mg
, 
	mb
, 
	m∑d
; } 
	mcﬁ
;

36 
u32
 
	mcﬁ_w‹d
;

40 
	ePﬁyAâribuã
 {

41 
	mPOLYATTR_TEXTURE
 = (1 << 0),

42 
	mPOLYATTR_GOURAUD
 = (1 << 1)

45 
	ePﬁyTy≥
 {

46 
	mPOLYTYPE_F
 = 0,

47 
	mPOLYTYPE_FT
 = (
POLYATTR_TEXTURE
),

48 
	mPOLYTYPE_G
 = (
POLYATTR_GOURAUD
),

49 
	mPOLYTYPE_GT
 = (
POLYATTR_TEXTURE
 | 
POLYATTR_GOURAUD
)

56 
	$pﬁyInôVîãxBuf„r
(
PﬁyVîãx
 *
vbuf
, c⁄° 
PåUni⁄
 
∑ckë
, 
PﬁyTy≥
 
±y≥
, 
u32
 
is_quad
)

58 
boﬁ
 
ãxturög
 = 
±y≥
 & 
POLYATTR_TEXTURE
;

59 
boﬁ
 
gouøud
 = 
±y≥
 & 
POLYATTR_GOURAUD
;

61 
vît_°ride
 = 1;

62 i‡(
ãxturög
)

63 
vît_°ride
++;

64 i‡(
gouøud
)

65 
vît_°ride
++;

67 
num_vîts
 = (
is_quad
) ? 4 : 3;

68 
u32
 *
±r
;

71 
s32
 
x_off
 = 
gpu_u«i
.
DøwögOff£t
[0];

72 
s32
 
y_off
 = 
gpu_u«i
.
DøwögOff£t
[1];

73 
±r
 = &
∑ckë
.
U4
[1];

74 
i
=0; i < 
num_vîts
; ++i, 
±r
 +
vît_°ride
) {

75 
s16
* 
co‹d_±r
 = (s16*)
±r
;

76 
vbuf
[
i
].
x
 = 
	`GPU_EXPANDSIGN
(
co‹d_±r
[0]Ë+ 
x_off
;

77 
vbuf
[
i
].
y
 = 
	`GPU_EXPANDSIGN
(
co‹d_±r
[1]Ë+ 
y_off
;

81 i‡(
ãxturög
) {

82 
±r
 = &
∑ckë
.
U4
[2];

83 
i
=0; i < 
num_vîts
; ++i, 
±r
 +
vît_°ride
)

84 
vbuf
[
i
].
ãx_w‹d
 = *
±r
;

88 i‡(
gouøud
) {

89 
±r
 = &
∑ckë
.
U4
[0];

90 
i
=0; i < 
num_vîts
; ++i, 
±r
 +
vît_°ride
)

91 
vbuf
[
i
].
cﬁ_w‹d
 = *
±r
;

93 
	}
}

105 
	gãm∂©e
<
ty≥«me
 
	gT
>

106 
ölöe
 
	$vîtIdxOfLó°XCo‹d2
(c⁄° 
T
 *
T±r
)

108  (
T±r
[0].
x
 <= Tptr[1].x) ? 0 : 1;

109 
	}
}

111 
	gãm∂©e
<
ty≥«me
 
	gT
>

112 
ölöe
 
	$vîtIdxOfLó°XCo‹d3
(c⁄° 
T
 *
T±r
)

114 
Àa°_of_v0_v1
 = 
	`vîtIdxOfLó°XCo‹d2
(
T±r
);

115  (
T±r
[
Àa°_of_v0_v1
].
x
 <= Tptr[2].x) ?Üeast_of_v0_v1 : 2;

116 
	}
}

118 
	gãm∂©e
<
ty≥«me
 
	gT
>

119 
ölöe
 
	$vîtIdxOfLó°YCo‹d2
(c⁄° 
T
 *
T±r
)

121  (
T±r
[0].
y
 <= Tptr[1].y) ? 0 : 1;

122 
	}
}

124 
	gãm∂©e
<
ty≥«me
 
	gT
>

125 
ölöe
 
	$vîtIdxOfLó°YCo‹d3
(c⁄° 
T
 *
T±r
)

127 
Àa°_of_v0_v1
 = 
	`vîtIdxOfLó°YCo‹d2
(
T±r
);

128  (
T±r
[
Àa°_of_v0_v1
].
y
 <= Tptr[2].y) ?Üeast_of_v0_v1 : 2;

129 
	}
}

131 
	gãm∂©e
<
ty≥«me
 
	gT
>

132 
ölöe
 
	$vîtIdxOfHighe°XCo‹d2
(c⁄° 
T
 *
T±r
)

134  (
T±r
[1].
x
 >= Tptr[0].x) ? 1 : 0;

135 
	}
}

137 
	gãm∂©e
<
ty≥«me
 
	gT
>

138 
ölöe
 
	$vîtIdxOfHighe°XCo‹d3
(c⁄° 
T
 *
T±r
)

140 
highe°_of_v0_v1
 = 
	`vîtIdxOfHighe°XCo‹d2
(
T±r
);

141  (
T±r
[2].
x
 >T±r[
highe°_of_v0_v1
].x) ? 2 : highest_of_v0_v1;

142 
	}
}

144 
	gãm∂©e
<
ty≥«me
 
	gT
>

145 
ölöe
 
	$vîtIdxOfHighe°YCo‹d2
(c⁄° 
T
 *
T±r
)

147  (
T±r
[1].
y
 >= Tptr[0].y) ? 1 : 0;

148 
	}
}

150 
	gãm∂©e
<
ty≥«me
 
	gT
>

151 
ölöe
 
	$vîtIdxOfHighe°YCo‹d3
(c⁄° 
T
 *
T±r
)

153 
highe°_of_v0_v1
 = 
	`vîtIdxOfHighe°YCo‹d2
(
T±r
);

154  (
T±r
[2].
y
 >T±r[
highe°_of_v0_v1
].y) ? 2 : highest_of_v0_v1;

155 
	}
}

166 
boﬁ
 
	$pﬁyU£TrüngÀ
(c⁄° 
PﬁyVîãx
 *
vbuf
, 
åi_num
, c⁄° PﬁyVîãx **
vît_±rs
)

169 c⁄° 
PﬁyVîãx
 *
åi_±r
 = &
vbuf
[(
åi_num
 == 0) ? 0 : 1];

172 
idx_lowe°_x
 = 
	`vîtIdxOfLó°XCo‹d3
(
åi_±r
);

173 
idx_highe°_x
 = 
	`vîtIdxOfHighe°XCo‹d3
(
åi_±r
);

174 
idx_lowe°_y
 = 
	`vîtIdxOfLó°YCo‹d3
(
åi_±r
);

175 
idx_highe°_y
 = 
	`vîtIdxOfHighe°YCo‹d3
(
åi_±r
);

179 
lowe°_x
 = 
åi_±r
[
idx_lowe°_x
].
x
;

180 
highe°_x
 = 
åi_±r
[
idx_highe°_x
].
x
;

181 
lowe°_y
 = 
åi_±r
[
idx_lowe°_y
].
y
;

182 
highe°_y
 = 
åi_±r
[
idx_highe°_y
].
y
;

183 i‡((
highe°_x
 - 
lowe°_x
Ë>
CHKMAX_X
 ||

184 (
highe°_y
 - 
lowe°_y
Ë>
CHKMAX_Y
)

185  
Ál£
;

188 
xmö
, 
xmax
, 
ymö
, 
ymax
;

189 
xmö
 = 
gpu_u«i
.
DøwögAªa
[0]; 
xmax
 = gpu_unai.DrawingArea[2];

190 
ymö
 = 
gpu_u«i
.
DøwögAªa
[1]; 
ymax
 = gpu_unai.DrawingArea[3];

191 
˛ù≥d_lowe°_x
 = 
	`Max2
(
xmö
,
lowe°_x
);

192 
˛ù≥d_lowe°_y
 = 
	`Max2
(
ymö
,
lowe°_y
);

193 
˛ù≥d_highe°_x
 = 
	`Mö2
(
xmax
,
highe°_x
);

194 
˛ù≥d_highe°_y
 = 
	`Mö2
(
ymax
,
highe°_y
);

195 i‡(
˛ù≥d_lowe°_x
 >
˛ù≥d_highe°_x
 ||

196 
˛ù≥d_lowe°_y
 >
˛ù≥d_highe°_y
)

197  
Ál£
;

202 
vît_±rs
[0] = 
åi_±r
 + 
idx_lowe°_y
;

203 
vît_±rs
[1] = 
åi_±r
 + ((
idx_lowe°_y
 + 
idx_highe°_y
) ^ 3);

204 
vît_±rs
[2] = 
åi_±r
 + 
idx_highe°_y
;

205  
åue
;

206 
	}
}

215 
	$gpuDøwPﬁyF
(c⁄° 
PåUni⁄
 
∑ckë
, c⁄° 
PP
 
gpuPﬁyS∑nDrivî
, 
u32
 
is_quad
)

218 
gpu_u«i
.
PixñD©a
 = 
	`GPU_RGB16
(
∑ckë
.
U4
[0]);

220 
PﬁyVîãx
 
vbuf
[4];

221 
	`pﬁyInôVîãxBuf„r
(
vbuf
, 
∑ckë
, 
POLYTYPE_F
, 
is_quad
);

223 
tŸÆ_∑s£s
 = 
is_quad
 ? 2 : 1;

224 
cur_∑ss
 = 0;

227 c⁄° 
PﬁyVîãx
* 
v±rs
[3];

228 i‡(
	`pﬁyU£TrüngÀ
(
vbuf
, 
cur_∑ss
, 
v±rs
Ë=
Ál£
)

231 
s32
 
xa
, 
xb
, 
ya
, 
yb
;

232 
s32
 
x3
, 
dx3
, 
x4
, 
dx4
, 
dx
;

233 
s32
 
x0
, 
x1
, 
x2
, 
y0
, 
y1
, 
y2
;

235 
x0
 = 
v±rs
[0]->
x
; 
y0
 = v±rs[0]->
y
;

236 
x1
 = 
v±rs
[1]->
x
; 
y1
 = v±rs[1]->
y
;

237 
x2
 = 
v±rs
[2]->
x
; 
y2
 = v±rs[2]->
y
;

239 
ya
 = 
y2
 - 
y0
;

240 
yb
 = 
y2
 - 
y1
;

241 
dx
 = (
x2
 - 
x1
Ë* 
ya
 - (x2 - 
x0
Ë* 
yb
;

243 
lo›0
 = 2;Üoop0;Üoop0--) {

244 i‡(
lo›0
 == 2) {

245 
ya
 = 
y0
; 
yb
 = 
y1
;

246 
x3
 = 
x4
 = 
	`i2x
(
x0
);

247 i‡(
dx
 < 0) {

248 #ifde‡
GPU_UNAI_USE_FLOATMATH


249 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


250 
dx3
 = ((
y2
 - 
y0
Ë!0Ë? (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y2 - y0)) : 0;

251 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y1 - y0)) : 0;

253 
dx3
 = ((
y2
 - 
y0
Ë!0Ë? (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
) / ()(y2 - y0)) : 0;

254 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
) / ()(y1 - y0)) : 0;

257 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


258 
dx3
 = ((
y2
 - 
y0
Ë!0Ë? 
	`xLoDivx
((
x2
 - 
x0
), (y2 - y0)) : 0;

259 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? 
	`xLoDivx
((
x1
 - 
x0
), (y1 - y0)) : 0;

261 
dx3
 = ((
y2
 - 
y0
Ë!0Ë? 
	`GPU_FAST_DIV
((
x2
 - 
x0
Ë<< 
FIXED_BITS
, (y2 - y0)) : 0;

262 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? 
	`GPU_FAST_DIV
((
x1
 - 
x0
Ë<< 
FIXED_BITS
, (y1 - y0)) : 0;

266 #ifde‡
GPU_UNAI_USE_FLOATMATH


267 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


268 
dx3
 = ((
y1
 - 
y0
Ë!0Ë? (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y1 - y0)) : 0;

269 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y2 - y0)) : 0;

271 
dx3
 = ((
y1
 - 
y0
Ë!0Ë? (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
) / ()(y1 - y0)) : 0;

272 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
) / ()(y2 - y0)) : 0;

275 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


276 
dx3
 = ((
y1
 - 
y0
Ë!0Ë? 
	`xLoDivx
((
x1
 - 
x0
), (y1 - y0)) : 0;

277 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? 
	`xLoDivx
((
x2
 - 
x0
), (y2 - y0)) : 0;

279 
dx3
 = ((
y1
 - 
y0
Ë!0Ë? 
	`GPU_FAST_DIV
((
x1
 - 
x0
Ë<< 
FIXED_BITS
, (y1 - y0)) : 0;

280 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? 
	`GPU_FAST_DIV
((
x2
 - 
x0
Ë<< 
FIXED_BITS
, (y2 - y0)) : 0;

287 i‡(
y1
 =
y2
) ;

289 
ya
 = 
y1
; 
yb
 = 
y2
;

291 i‡(
dx
 < 0) {

292 
x3
 = 
	`i2x
(
x0
Ë+ (
dx3
 * (
y1
 - 
y0
));

293 
x4
 = 
	`i2x
(
x1
);

294 #ifde‡
GPU_UNAI_USE_FLOATMATH


295 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


296 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y2 - y1)) : 0;

298 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
) / ()(y2 - y1)) : 0;

301 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


302 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? 
	`xLoDivx
 ((
x2
 - 
x1
), (y2 - y1)) : 0;

304 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? 
	`GPU_FAST_DIV
((
x2
 - 
x1
Ë<< 
FIXED_BITS
, (y2 - y1)) : 0;

308 
x3
 = 
	`i2x
(
x1
);

309 
x4
 = 
	`i2x
(
x0
Ë+ (
dx4
 * (
y1
 - 
y0
));

310 #ifde‡
GPU_UNAI_USE_FLOATMATH


311 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


312 
dx3
 = ((
y2
 - 
y1
Ë!0Ë? (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y2 - y1)) : 0;

314 
dx3
 = ((
y2
 - 
y1
Ë!0Ë? (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
) / ()(y2 - y1)) : 0;

317 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


318 
dx3
 = ((
y2
 - 
y1
Ë!0Ë? 
	`xLoDivx
 ((
x2
 - 
x1
), (y2 - y1)) : 0;

320 
dx3
 = ((
y2
 - 
y1
Ë!0Ë? 
	`GPU_FAST_DIV
((
x2
 - 
x1
Ë<< 
FIXED_BITS
, (y2 - y1)) : 0;

326 
s32
 
xmö
, 
xmax
, 
ymö
, 
ymax
;

327 
xmö
 = 
gpu_u«i
.
DøwögAªa
[0]; 
xmax
 = gpu_unai.DrawingArea[2];

328 
ymö
 = 
gpu_u«i
.
DøwögAªa
[1]; 
ymax
 = gpu_unai.DrawingArea[3];

330 i‡((
ymö
 - 
ya
) > 0) {

331 
x3
 +(
dx3
 * (
ymö
 - 
ya
));

332 
x4
 +(
dx4
 * (
ymö
 - 
ya
));

333 
ya
 = 
ymö
;

336 i‡(
yb
 > 
ymax
) yb = ymax;

338 
lo›1
 = 
yb
 - 
ya
;

339 i‡(
lo›1
 <= 0)

342 
u16
* 
PixñBa£
 = &((u16*)
gpu_u«i
.
vøm
)[
	`FRAME_OFFSET
(0, 
ya
)];

343 
li
=
gpu_u«i
.
ûa˚_mask
;

344 
pi
=(
	`ProgªssiveI¡îœ˚E«bÀd
()?(
gpu_u«i
.
ûa˚_mask
+1):0);

345 
pif
=(
	`ProgªssiveI¡îœ˚E«bÀd
()?(
gpu_u«i
.
¥og_ûa˚_Êag
?(gpu_u«i.
ûa˚_mask
+1):0):1);

347 ; 
lo›1
; --lo›1, 
ya
++, 
PixñBa£
 +
FRAME_WIDTH
,

348 
x3
 +
dx3
, 
x4
 +
dx4
 )

350 i‡(
ya
&
li
) ;

351 i‡((
ya
&
pi
)==
pif
) ;

353 
xa
 = 
	`FixedCeûToI¡
(
x3
); 
xb
 = FixedCeûToI¡(
x4
);

354 i‡((
xmö
 - 
xa
) > 0) xa = xmin;

355 i‡(
xb
 > 
xmax
) xb = xmax;

356 i‡((
xb
 - 
xa
) > 0)

357 
	`gpuPﬁyS∑nDrivî
(
gpu_u«i
, 
PixñBa£
 + 
xa
, (
xb
 - xa));

360 } ++
cur_∑ss
 < 
tŸÆ_∑s£s
);

361 
	}
}

366 
	$gpuDøwPﬁyFT
(c⁄° 
PåUni⁄
 
∑ckë
, c⁄° 
PP
 
gpuPﬁyS∑nDrivî
, 
u32
 
is_quad
)

369 
gpu_u«i
.
r8
 = 
∑ckë
.
U1
[0];

370 
gpu_u«i
.
g8
 = 
∑ckë
.
U1
[1];

371 
gpu_u«i
.
b8
 = 
∑ckë
.
U1
[2];

373 
gpu_u«i
.
r5
 = 
∑ckë
.
U1
[0] >> 3;

374 
gpu_u«i
.
g5
 = 
∑ckë
.
U1
[1] >> 3;

375 
gpu_u«i
.
b5
 = 
∑ckë
.
U1
[2] >> 3;

377 
PﬁyVîãx
 
vbuf
[4];

378 
	`pﬁyInôVîãxBuf„r
(
vbuf
, 
∑ckë
, 
POLYTYPE_FT
, 
is_quad
);

380 
tŸÆ_∑s£s
 = 
is_quad
 ? 2 : 1;

381 
cur_∑ss
 = 0;

384 c⁄° 
PﬁyVîãx
* 
v±rs
[3];

385 i‡(
	`pﬁyU£TrüngÀ
(
vbuf
, 
cur_∑ss
, 
v±rs
Ë=
Ál£
)

388 
s32
 
xa
, 
xb
, 
ya
, 
yb
;

389 
s32
 
x3
, 
dx3
, 
x4
, 
dx4
, 
dx
;

390 
s32
 
u3
, 
du3
, 
v3
, 
dv3
;

391 
s32
 
x0
, 
x1
, 
x2
, 
y0
, 
y1
, 
y2
;

392 
s32
 
u0
, 
u1
, 
u2
, 
v0
, 
v1
, 
v2
;

393 
s32
 
du4
, 
dv4
;

395 
x0
 = 
v±rs
[0]->
x
; 
y0
 = v±rs[0]->
y
;

396 
u0
 = 
v±rs
[0]->
ãx
.
u
; 
v0
 = v±rs[0]->ãx.
v
;

397 
x1
 = 
v±rs
[1]->
x
; 
y1
 = v±rs[1]->
y
;

398 
u1
 = 
v±rs
[1]->
ãx
.
u
; 
v1
 = v±rs[1]->ãx.
v
;

399 
x2
 = 
v±rs
[2]->
x
; 
y2
 = v±rs[2]->
y
;

400 
u2
 = 
v±rs
[2]->
ãx
.
u
; 
v2
 = v±rs[2]->ãx.
v
;

402 
ya
 = 
y2
 - 
y0
;

403 
yb
 = 
y2
 - 
y1
;

404 
dx4
 = (
x2
 - 
x1
Ë* 
ya
 - (x2 - 
x0
Ë* 
yb
;

405 
du4
 = (
u2
 - 
u1
Ë* 
ya
 - (u2 - 
u0
Ë* 
yb
;

406 
dv4
 = (
v2
 - 
v1
Ë* 
ya
 - (v2 - 
v0
Ë* 
yb
;

407 
dx
 = 
dx4
;

408 i‡(
dx4
 < 0) {

409 
dx4
 = -dx4;

410 
du4
 = -du4;

411 
dv4
 = -dv4;

414 #ifde‡
GPU_UNAI_USE_FLOATMATH


415 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


416 i‡(
dx4
 != 0) {

417 
föv
 = 
	`FlﬂtInv
(
dx4
);

418 
du4
 = (
fixed
)((du4 << 
FIXED_BITS
Ë* 
föv
);

419 
dv4
 = (
fixed
)((dv4 << 
FIXED_BITS
Ë* 
föv
);

421 
du4
 = 
dv4
 = 0;

424 i‡(
dx4
 != 0) {

425 
fdiv
 = 
dx4
;

426 
du4
 = (
fixed
)((du4 << 
FIXED_BITS
Ë/ 
fdiv
);

427 
dv4
 = (
fixed
)((dv4 << 
FIXED_BITS
Ë/ 
fdiv
);

429 
du4
 = 
dv4
 = 0;

433 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


434 i‡(
dx4
 != 0) {

435 
iF
, 
iS
;

436 
	`xInv
(
dx4
, 
iF
, 
iS
);

437 
du4
 = 
	`xInvMulx
(du4, 
iF
, 
iS
);

438 
dv4
 = 
	`xInvMulx
(dv4, 
iF
, 
iS
);

440 
du4
 = 
dv4
 = 0;

443 i‡(
dx4
 != 0) {

444 
du4
 = 
	`GPU_FAST_DIV
(du4 << 
FIXED_BITS
, 
dx4
);

445 
dv4
 = 
	`GPU_FAST_DIV
(dv4 << 
FIXED_BITS
, 
dx4
);

447 
du4
 = 
dv4
 = 0;

452 
gpu_u«i
.
u_öc
 = 
du4
;

453 
gpu_u«i
.
v_öc
 = 
dv4
;

457 
s32
 
lo›0
 = 2;Üoop0;Üoop0--) {

458 i‡(
lo›0
 == 2) {

459 
ya
 = 
y0
; 
yb
 = 
y1
;

460 
x3
 = 
x4
 = 
	`i2x
(
x0
);

461 
u3
 = 
	`i2x
(
u0
); 
v3
 = i2x(
v0
);

462 i‡(
dx
 < 0) {

463 #ifde‡
GPU_UNAI_USE_FLOATMATH


464 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


465 i‡((
y2
 - 
y0
) != 0) {

466 
föv
 = 
	`FlﬂtInv
(
y2
 - 
y0
);

467 
dx3
 = (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
föv
);

468 
du3
 = (
fixed
)(((
u2
 - 
u0
Ë<< 
FIXED_BITS
Ë* 
föv
);

469 
dv3
 = (
fixed
)(((
v2
 - 
v0
Ë<< 
FIXED_BITS
Ë* 
föv
);

471 
dx3
 = 
du3
 = 
dv3
 = 0;

473 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y1 - y0)) : 0;

475 i‡((
y2
 - 
y0
) != 0) {

476 
fdiv
 = 
y2
 - 
y0
;

477 
dx3
 = (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

478 
du3
 = (
fixed
)(((
u2
 - 
u0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

479 
dv3
 = (
fixed
)(((
v2
 - 
v0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

481 
dx3
 = 
du3
 = 
dv3
 = 0;

483 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
) / ()(y1 - y0)) : 0;

486 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


487 i‡((
y2
 - 
y0
) != 0) {

488 
iF
, 
iS
;

489 
	`xInv
((
y2
 - 
y0
), 
iF
, 
iS
);

490 
dx3
 = 
	`xInvMulx
((
x2
 - 
x0
), 
iF
, 
iS
);

491 
du3
 = 
	`xInvMulx
((
u2
 - 
u0
), 
iF
, 
iS
);

492 
dv3
 = 
	`xInvMulx
((
v2
 - 
v0
), 
iF
, 
iS
);

494 
dx3
 = 
du3
 = 
dv3
 = 0;

496 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? 
	`xLoDivx
((
x1
 - 
x0
), (y1 - y0)) : 0;

498 i‡((
y2
 - 
y0
) != 0) {

499 
dx3
 = 
	`GPU_FAST_DIV
((
x2
 - 
x0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

500 
du3
 = 
	`GPU_FAST_DIV
((
u2
 - 
u0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

501 
dv3
 = 
	`GPU_FAST_DIV
((
v2
 - 
v0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

503 
dx3
 = 
du3
 = 
dv3
 = 0;

505 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? 
	`GPU_FAST_DIV
((
x1
 - 
x0
Ë<< 
FIXED_BITS
, (y1 - y0)) : 0;

509 #ifde‡
GPU_UNAI_USE_FLOATMATH


510 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


511 i‡((
y1
 - 
y0
) != 0) {

512 
föv
 = 
	`FlﬂtInv
(
y1
 - 
y0
);

513 
dx3
 = (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
föv
);

514 
du3
 = (
fixed
)(((
u1
 - 
u0
Ë<< 
FIXED_BITS
Ë* 
föv
);

515 
dv3
 = (
fixed
)(((
v1
 - 
v0
Ë<< 
FIXED_BITS
Ë* 
föv
);

517 
dx3
 = 
du3
 = 
dv3
 = 0;

519 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y2 - y0)) : 0;

521 i‡((
y1
 - 
y0
) != 0) {

522 
fdiv
 = 
y1
 - 
y0
;

523 
dx3
 = (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

524 
du3
 = (
fixed
)(((
u1
 - 
u0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

525 
dv3
 = (
fixed
)(((
v1
 - 
v0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

527 
dx3
 = 
du3
 = 
dv3
 = 0;

529 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
) / ()(y2 - y0)) : 0;

532 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


533 i‡((
y1
 - 
y0
) != 0) {

534 
iF
, 
iS
;

535 
	`xInv
((
y1
 - 
y0
), 
iF
, 
iS
);

536 
dx3
 = 
	`xInvMulx
((
x1
 - 
x0
), 
iF
, 
iS
);

537 
du3
 = 
	`xInvMulx
((
u1
 - 
u0
), 
iF
, 
iS
);

538 
dv3
 = 
	`xInvMulx
((
v1
 - 
v0
), 
iF
, 
iS
);

540 
dx3
 = 
du3
 = 
dv3
 = 0;

542 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? 
	`xLoDivx
((
x2
 - 
x0
), (y2 - y0)) : 0;

544 i‡((
y1
 - 
y0
) != 0) {

545 
dx3
 = 
	`GPU_FAST_DIV
((
x1
 - 
x0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

546 
du3
 = 
	`GPU_FAST_DIV
((
u1
 - 
u0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

547 
dv3
 = 
	`GPU_FAST_DIV
((
v1
 - 
v0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

549 
dx3
 = 
du3
 = 
dv3
 = 0;

551 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? 
	`GPU_FAST_DIV
((
x2
 - 
x0
Ë<< 
FIXED_BITS
, (y2 - y0)) : 0;

558 i‡(
y1
 =
y2
) ;

560 
ya
 = 
y1
; 
yb
 = 
y2
;

562 i‡(
dx
 < 0) {

563 
x3
 = 
	`i2x
(
x0
);

564 
x4
 = 
	`i2x
(
x1
);

565 
u3
 = 
	`i2x
(
u0
);

566 
v3
 = 
	`i2x
(
v0
);

567 i‡((
y1
 - 
y0
) != 0) {

568 
x3
 +(
dx3
 * (
y1
 - 
y0
));

569 
u3
 +(
du3
 * (
y1
 - 
y0
));

570 
v3
 +(
dv3
 * (
y1
 - 
y0
));

572 #ifde‡
GPU_UNAI_USE_FLOATMATH


573 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


574 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y2 - y1)) : 0;

576 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
) / ()(y2 - y1)) : 0;

579 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


580 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? 
	`xLoDivx
((
x2
 - 
x1
), (y2 - y1)) : 0;

582 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? 
	`GPU_FAST_DIV
((
x2
 - 
x1
Ë<< 
FIXED_BITS
, (y2 - y1)) : 0;

586 
x3
 = 
	`i2x
(
x1
);

587 
x4
 = 
	`i2x
(
x0
Ë+ (
dx4
 * (
y1
 - 
y0
));

588 
u3
 = 
	`i2x
(
u1
);

589 
v3
 = 
	`i2x
(
v1
);

590 #ifde‡
GPU_UNAI_USE_FLOATMATH


591 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


592 i‡((
y2
 - 
y1
) != 0) {

593 
föv
 = 
	`FlﬂtInv
(
y2
 - 
y1
);

594 
dx3
 = (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
Ë* 
föv
);

595 
du3
 = (
fixed
)(((
u2
 - 
u1
Ë<< 
FIXED_BITS
Ë* 
föv
);

596 
dv3
 = (
fixed
)(((
v2
 - 
v1
Ë<< 
FIXED_BITS
Ë* 
föv
);

598 
dx3
 = 
du3
 = 
dv3
 = 0;

601 i‡((
y2
 - 
y1
) != 0) {

602 
fdiv
 = 
y2
 - 
y1
;

603 
dx3
 = (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

604 
du3
 = (
fixed
)(((
u2
 - 
u1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

605 
dv3
 = (
fixed
)(((
v2
 - 
v1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

607 
dx3
 = 
du3
 = 
dv3
 = 0;

611 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


612 i‡((
y2
 - 
y1
) != 0) {

613 
iF
, 
iS
;

614 
	`xInv
((
y2
 - 
y1
), 
iF
, 
iS
);

615 
dx3
 = 
	`xInvMulx
((
x2
 - 
x1
), 
iF
, 
iS
);

616 
du3
 = 
	`xInvMulx
((
u2
 - 
u1
), 
iF
, 
iS
);

617 
dv3
 = 
	`xInvMulx
((
v2
 - 
v1
), 
iF
, 
iS
);

619 
dx3
 = 
du3
 = 
dv3
 = 0;

622 i‡((
y2
 - 
y1
) != 0) {

623 
dx3
 = 
	`GPU_FAST_DIV
((
x2
 - 
x1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

624 
du3
 = 
	`GPU_FAST_DIV
((
u2
 - 
u1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

625 
dv3
 = 
	`GPU_FAST_DIV
((
v2
 - 
v1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

627 
dx3
 = 
du3
 = 
dv3
 = 0;

634 
s32
 
xmö
, 
xmax
, 
ymö
, 
ymax
;

635 
xmö
 = 
gpu_u«i
.
DøwögAªa
[0]; 
xmax
 = gpu_unai.DrawingArea[2];

636 
ymö
 = 
gpu_u«i
.
DøwögAªa
[1]; 
ymax
 = gpu_unai.DrawingArea[3];

638 i‡((
ymö
 - 
ya
) > 0) {

639 
x3
 +
dx3
 * (
ymö
 - 
ya
);

640 
x4
 +
dx4
 * (
ymö
 - 
ya
);

641 
u3
 +
du3
 * (
ymö
 - 
ya
);

642 
v3
 +
dv3
 * (
ymö
 - 
ya
);

643 
ya
 = 
ymö
;

646 i‡(
yb
 > 
ymax
) yb = ymax;

648 
lo›1
 = 
yb
 - 
ya
;

649 i‡(
lo›1
 <= 0)

652 
u16
* 
PixñBa£
 = &((u16*)
gpu_u«i
.
vøm
)[
	`FRAME_OFFSET
(0, 
ya
)];

653 
li
=
gpu_u«i
.
ûa˚_mask
;

654 
pi
=(
	`ProgªssiveI¡îœ˚E«bÀd
()?(
gpu_u«i
.
ûa˚_mask
+1):0);

655 
pif
=(
	`ProgªssiveI¡îœ˚E«bÀd
()?(
gpu_u«i
.
¥og_ûa˚_Êag
?(gpu_u«i.
ûa˚_mask
+1):0):1);

657 ; 
lo›1
; --lo›1, ++
ya
, 
PixñBa£
 +
FRAME_WIDTH
,

658 
x3
 +
dx3
, 
x4
 +
dx4
,

659 
u3
 +
du3
, 
v3
 +
dv3
 )

661 i‡(
ya
&
li
) ;

662 i‡((
ya
&
pi
)==
pif
) ;

664 
u32
 
u4
, 
v4
;

666 
xa
 = 
	`FixedCeûToI¡
(
x3
); 
xb
 = FixedCeûToI¡(
x4
);

667 
u4
 = 
u3
; 
v4
 = 
v3
;

669 
fixed
 
ômp
 = 
	`i2x
(
xa
Ë- 
x3
;

670 i‡(
ômp
 != 0) {

671 
u4
 +(
du4
 * 
ômp
Ë>> 
FIXED_BITS
;

672 
v4
 +(
dv4
 * 
ômp
Ë>> 
FIXED_BITS
;

675 
u4
 +
fixed_HALF
;

676 
v4
 +
fixed_HALF
;

678 i‡((
xmö
 - 
xa
) > 0) {

679 
u4
 +
du4
 * (
xmö
 - 
xa
);

680 
v4
 +
dv4
 * (
xmö
 - 
xa
);

681 
xa
 = 
xmö
;

685 
gpu_u«i
.
u
 = 
u4
;

686 
gpu_u«i
.
v
 = 
v4
;

688 i‡(
xb
 > 
xmax
) xb = xmax;

689 i‡((
xb
 - 
xa
) > 0)

690 
	`gpuPﬁyS∑nDrivî
(
gpu_u«i
, 
PixñBa£
 + 
xa
, (
xb
 - xa));

693 } ++
cur_∑ss
 < 
tŸÆ_∑s£s
);

694 
	}
}

699 
	$gpuDøwPﬁyG
(c⁄° 
PåUni⁄
 
∑ckë
, c⁄° 
PP
 
gpuPﬁyS∑nDrivî
, 
u32
 
is_quad
)

701 
PﬁyVîãx
 
vbuf
[4];

702 
	`pﬁyInôVîãxBuf„r
(
vbuf
, 
∑ckë
, 
POLYTYPE_G
, 
is_quad
);

704 
tŸÆ_∑s£s
 = 
is_quad
 ? 2 : 1;

705 
cur_∑ss
 = 0;

708 c⁄° 
PﬁyVîãx
* 
v±rs
[3];

709 i‡(
	`pﬁyU£TrüngÀ
(
vbuf
, 
cur_∑ss
, 
v±rs
Ë=
Ál£
)

712 
s32
 
xa
, 
xb
, 
ya
, 
yb
;

713 
s32
 
x3
, 
dx3
, 
x4
, 
dx4
, 
dx
;

714 
s32
 
r3
, 
dr3
, 
g3
, 
dg3
, 
b3
, 
db3
;

715 
s32
 
x0
, 
x1
, 
x2
, 
y0
, 
y1
, 
y2
;

716 
s32
 
r0
, 
r1
, 
r2
, 
g0
, 
g1
, 
g2
, 
b0
, 
b1
, 
b2
;

717 
s32
 
dr4
, 
dg4
, 
db4
;

719 
x0
 = 
v±rs
[0]->
x
; 
y0
 = v±rs[0]->
y
;

720 
r0
 = 
v±rs
[0]->
cﬁ
.
r
; 
g0
 = v±rs[0]->cﬁ.
g
; 
b0
 = v±rs[0]->cﬁ.
b
;

721 
x1
 = 
v±rs
[1]->
x
; 
y1
 = v±rs[1]->
y
;

722 
r1
 = 
v±rs
[1]->
cﬁ
.
r
; 
g1
 = v±rs[1]->cﬁ.
g
; 
b1
 = v±rs[1]->cﬁ.
b
;

723 
x2
 = 
v±rs
[2]->
x
; 
y2
 = v±rs[2]->
y
;

724 
r2
 = 
v±rs
[2]->
cﬁ
.
r
; 
g2
 = v±rs[2]->cﬁ.
g
; 
b2
 = v±rs[2]->cﬁ.
b
;

726 
ya
 = 
y2
 - 
y0
;

727 
yb
 = 
y2
 - 
y1
;

728 
dx4
 = (
x2
 - 
x1
Ë* 
ya
 - (x2 - 
x0
Ë* 
yb
;

729 
dr4
 = (
r2
 - 
r1
Ë* 
ya
 - (r2 - 
r0
Ë* 
yb
;

730 
dg4
 = (
g2
 - 
g1
Ë* 
ya
 - (g2 - 
g0
Ë* 
yb
;

731 
db4
 = (
b2
 - 
b1
Ë* 
ya
 - (b2 - 
b0
Ë* 
yb
;

732 
dx
 = 
dx4
;

733 i‡(
dx4
 < 0) {

734 
dx4
 = -dx4;

735 
dr4
 = -dr4;

736 
dg4
 = -dg4;

737 
db4
 = -db4;

740 #ifde‡
GPU_UNAI_USE_FLOATMATH


741 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


742 i‡(
dx4
 != 0) {

743 
föv
 = 
	`FlﬂtInv
(
dx4
);

744 
dr4
 = (
fixed
)((dr4 << 
FIXED_BITS
Ë* 
föv
);

745 
dg4
 = (
fixed
)((dg4 << 
FIXED_BITS
Ë* 
föv
);

746 
db4
 = (
fixed
)((db4 << 
FIXED_BITS
Ë* 
föv
);

748 
dr4
 = 
dg4
 = 
db4
 = 0;

751 i‡(
dx4
 != 0) {

752 
fdiv
 = 
dx4
;

753 
dr4
 = (
fixed
)((dr4 << 
FIXED_BITS
Ë/ 
fdiv
);

754 
dg4
 = (
fixed
)((dg4 << 
FIXED_BITS
Ë/ 
fdiv
);

755 
db4
 = (
fixed
)((db4 << 
FIXED_BITS
Ë/ 
fdiv
);

757 
dr4
 = 
dg4
 = 
db4
 = 0;

761 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


762 i‡(
dx4
 != 0) {

763 
iF
, 
iS
;

764 
	`xInv
(
dx4
, 
iF
, 
iS
);

765 
dr4
 = 
	`xInvMulx
(dr4, 
iF
, 
iS
);

766 
dg4
 = 
	`xInvMulx
(dg4, 
iF
, 
iS
);

767 
db4
 = 
	`xInvMulx
(db4, 
iF
, 
iS
);

769 
dr4
 = 
dg4
 = 
db4
 = 0;

772 i‡(
dx4
 != 0) {

773 
dr4
 = 
	`GPU_FAST_DIV
(dr4 << 
FIXED_BITS
, 
dx4
);

774 
dg4
 = 
	`GPU_FAST_DIV
(dg4 << 
FIXED_BITS
, 
dx4
);

775 
db4
 = 
	`GPU_FAST_DIV
(db4 << 
FIXED_BITS
, 
dx4
);

777 
dr4
 = 
dg4
 = 
db4
 = 0;

782 
gpu_u«i
.
gInc
 = 
	`gpuPackGouøudCﬁInc
(
dr4
, 
dg4
, 
db4
);

784 
s32
 
lo›0
 = 2;Üoop0;Üoop0--) {

785 i‡(
lo›0
 == 2) {

786 
ya
 = 
y0
;

787 
yb
 = 
y1
;

788 
x3
 = 
x4
 = 
	`i2x
(
x0
);

789 
r3
 = 
	`i2x
(
r0
);

790 
g3
 = 
	`i2x
(
g0
);

791 
b3
 = 
	`i2x
(
b0
);

792 i‡(
dx
 < 0) {

793 #ifde‡
GPU_UNAI_USE_FLOATMATH


794 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


795 i‡((
y2
 - 
y0
) != 0) {

796 
föv
 = 
	`FlﬂtInv
(
y2
 - 
y0
);

797 
dx3
 = (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
föv
);

798 
dr3
 = (
fixed
)(((
r2
 - 
r0
Ë<< 
FIXED_BITS
Ë* 
föv
);

799 
dg3
 = (
fixed
)(((
g2
 - 
g0
Ë<< 
FIXED_BITS
Ë* 
föv
);

800 
db3
 = (
fixed
)(((
b2
 - 
b0
Ë<< 
FIXED_BITS
Ë* 
föv
);

802 
dx3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

804 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y1 - y0)) : 0;

806 i‡((
y2
 - 
y0
) != 0) {

807 
fdiv
 = 
y2
 - 
y0
;

808 
dx3
 = (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

809 
dr3
 = (
fixed
)(((
r2
 - 
r0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

810 
dg3
 = (
fixed
)(((
g2
 - 
g0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

811 
db3
 = (
fixed
)(((
b2
 - 
b0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

813 
dx3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

815 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
) / ()(y1 - y0)) : 0;

818 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


819 i‡((
y2
 - 
y0
) != 0) {

820 
iF
, 
iS
;

821 
	`xInv
((
y2
 - 
y0
), 
iF
, 
iS
);

822 
dx3
 = 
	`xInvMulx
((
x2
 - 
x0
), 
iF
, 
iS
);

823 
dr3
 = 
	`xInvMulx
((
r2
 - 
r0
), 
iF
, 
iS
);

824 
dg3
 = 
	`xInvMulx
((
g2
 - 
g0
), 
iF
, 
iS
);

825 
db3
 = 
	`xInvMulx
((
b2
 - 
b0
), 
iF
, 
iS
);

827 
dx3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

829 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? 
	`xLoDivx
((
x1
 - 
x0
), (y1 - y0)) : 0;

831 i‡((
y2
 - 
y0
) != 0) {

832 
dx3
 = 
	`GPU_FAST_DIV
((
x2
 - 
x0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

833 
dr3
 = 
	`GPU_FAST_DIV
((
r2
 - 
r0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

834 
dg3
 = 
	`GPU_FAST_DIV
((
g2
 - 
g0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

835 
db3
 = 
	`GPU_FAST_DIV
((
b2
 - 
b0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

837 
dx3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

839 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? 
	`GPU_FAST_DIV
((
x1
 - 
x0
Ë<< 
FIXED_BITS
, (y1 - y0)) : 0;

843 #ifde‡
GPU_UNAI_USE_FLOATMATH


844 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


845 i‡((
y1
 - 
y0
) != 0) {

846 
föv
 = 
	`FlﬂtInv
(
y1
 - 
y0
);

847 
dx3
 = (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
föv
);

848 
dr3
 = (
fixed
)(((
r1
 - 
r0
Ë<< 
FIXED_BITS
Ë* 
föv
);

849 
dg3
 = (
fixed
)(((
g1
 - 
g0
Ë<< 
FIXED_BITS
Ë* 
föv
);

850 
db3
 = (
fixed
)(((
b1
 - 
b0
Ë<< 
FIXED_BITS
Ë* 
föv
);

852 
dx3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

854 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y2 - y0)) : 0;

856 i‡((
y1
 - 
y0
) != 0) {

857 
fdiv
 = 
y1
 - 
y0
;

858 
dx3
 = (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

859 
dr3
 = (
fixed
)(((
r1
 - 
r0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

860 
dg3
 = (
fixed
)(((
g1
 - 
g0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

861 
db3
 = (
fixed
)(((
b1
 - 
b0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

863 
dx3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

865 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
) / ()(y2 - y0)) : 0;

868 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


869 i‡((
y1
 - 
y0
) != 0) {

870 
iF
, 
iS
;

871 
	`xInv
((
y1
 - 
y0
), 
iF
, 
iS
);

872 
dx3
 = 
	`xInvMulx
((
x1
 - 
x0
), 
iF
, 
iS
);

873 
dr3
 = 
	`xInvMulx
((
r1
 - 
r0
), 
iF
, 
iS
);

874 
dg3
 = 
	`xInvMulx
((
g1
 - 
g0
), 
iF
, 
iS
);

875 
db3
 = 
	`xInvMulx
((
b1
 - 
b0
), 
iF
, 
iS
);

877 
dx3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

879 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? 
	`xLoDivx
((
x2
 - 
x0
), (y2 - y0)) : 0;

881 i‡((
y1
 - 
y0
) != 0) {

882 
dx3
 = 
	`GPU_FAST_DIV
((
x1
 - 
x0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

883 
dr3
 = 
	`GPU_FAST_DIV
((
r1
 - 
r0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

884 
dg3
 = 
	`GPU_FAST_DIV
((
g1
 - 
g0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

885 
db3
 = 
	`GPU_FAST_DIV
((
b1
 - 
b0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

887 
dx3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

889 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? 
	`GPU_FAST_DIV
((
x2
 - 
x0
Ë<< 
FIXED_BITS
, (y2 - y0)) : 0;

896 i‡(
y1
 =
y2
) ;

898 
ya
 = 
y1
; 
yb
 = 
y2
;

900 i‡(
dx
 < 0) {

901 
x3
 = 
	`i2x
(
x0
); 
x4
 = i2x(
x1
);

902 
r3
 = 
	`i2x
(
r0
); 
g3
 = i2x(
g0
); 
b3
 = i2x(
b0
);

904 i‡((
y1
 - 
y0
) != 0) {

905 
x3
 +(
dx3
 * (
y1
 - 
y0
));

906 
r3
 +(
dr3
 * (
y1
 - 
y0
));

907 
g3
 +(
dg3
 * (
y1
 - 
y0
));

908 
b3
 +(
db3
 * (
y1
 - 
y0
));

911 #ifde‡
GPU_UNAI_USE_FLOATMATH


912 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


913 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y2 - y1)) : 0;

915 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
) / ()(y2 - y1)) : 0;

918 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


919 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? 
	`xLoDivx
((
x2
 - 
x1
), (y2 - y1)) : 0;

921 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? 
	`GPU_FAST_DIV
((
x2
 - 
x1
Ë<< 
FIXED_BITS
, (y2 - y1)) : 0;

925 
x3
 = 
	`i2x
(
x1
);

926 
x4
 = 
	`i2x
(
x0
Ë+ (
dx4
 * (
y1
 - 
y0
));

928 
r3
 = 
	`i2x
(
r1
); 
g3
 = i2x(
g1
); 
b3
 = i2x(
b1
);

930 #ifde‡
GPU_UNAI_USE_FLOATMATH


931 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


932 i‡((
y2
 - 
y1
) != 0) {

933 
föv
 = 
	`FlﬂtInv
(
y2
 - 
y1
);

934 
dx3
 = (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
Ë* 
föv
);

935 
dr3
 = (
fixed
)(((
r2
 - 
r1
Ë<< 
FIXED_BITS
Ë* 
föv
);

936 
dg3
 = (
fixed
)(((
g2
 - 
g1
Ë<< 
FIXED_BITS
Ë* 
föv
);

937 
db3
 = (
fixed
)(((
b2
 - 
b1
Ë<< 
FIXED_BITS
Ë* 
föv
);

939 
dx3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

942 i‡((
y2
 - 
y1
) != 0) {

943 
fdiv
 = 
y2
 - 
y1
;

944 
dx3
 = (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

945 
dr3
 = (
fixed
)(((
r2
 - 
r1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

946 
dg3
 = (
fixed
)(((
g2
 - 
g1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

947 
db3
 = (
fixed
)(((
b2
 - 
b1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

949 
dx3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

953 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


954 i‡((
y2
 - 
y1
) != 0) {

955 
iF
, 
iS
;

956 
	`xInv
((
y2
 - 
y1
), 
iF
, 
iS
);

957 
dx3
 = 
	`xInvMulx
((
x2
 - 
x1
), 
iF
, 
iS
);

958 
dr3
 = 
	`xInvMulx
((
r2
 - 
r1
), 
iF
, 
iS
);

959 
dg3
 = 
	`xInvMulx
((
g2
 - 
g1
), 
iF
, 
iS
);

960 
db3
 = 
	`xInvMulx
((
b2
 - 
b1
), 
iF
, 
iS
);

962 
dx3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

965 i‡((
y2
 - 
y1
) != 0) {

966 
dx3
 = 
	`GPU_FAST_DIV
((
x2
 - 
x1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

967 
dr3
 = 
	`GPU_FAST_DIV
((
r2
 - 
r1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

968 
dg3
 = 
	`GPU_FAST_DIV
((
g2
 - 
g1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

969 
db3
 = 
	`GPU_FAST_DIV
((
b2
 - 
b1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

971 
dx3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

978 
s32
 
xmö
, 
xmax
, 
ymö
, 
ymax
;

979 
xmö
 = 
gpu_u«i
.
DøwögAªa
[0]; 
xmax
 = gpu_unai.DrawingArea[2];

980 
ymö
 = 
gpu_u«i
.
DøwögAªa
[1]; 
ymax
 = gpu_unai.DrawingArea[3];

982 i‡((
ymö
 - 
ya
) > 0) {

983 
x3
 +(
dx3
 * (
ymö
 - 
ya
));

984 
x4
 +(
dx4
 * (
ymö
 - 
ya
));

985 
r3
 +(
dr3
 * (
ymö
 - 
ya
));

986 
g3
 +(
dg3
 * (
ymö
 - 
ya
));

987 
b3
 +(
db3
 * (
ymö
 - 
ya
));

988 
ya
 = 
ymö
;

991 i‡(
yb
 > 
ymax
) yb = ymax;

993 
lo›1
 = 
yb
 - 
ya
;

994 i‡(
lo›1
 <= 0)

997 
u16
* 
PixñBa£
 = &((u16*)
gpu_u«i
.
vøm
)[
	`FRAME_OFFSET
(0, 
ya
)];

998 
li
=
gpu_u«i
.
ûa˚_mask
;

999 
pi
=(
	`ProgªssiveI¡îœ˚E«bÀd
()?(
gpu_u«i
.
ûa˚_mask
+1):0);

1000 
pif
=(
	`ProgªssiveI¡îœ˚E«bÀd
()?(
gpu_u«i
.
¥og_ûa˚_Êag
?(gpu_u«i.
ûa˚_mask
+1):0):1);

1002 ; 
lo›1
; --lo›1, ++
ya
, 
PixñBa£
 +
FRAME_WIDTH
,

1003 
x3
 +
dx3
, 
x4
 +
dx4
,

1004 
r3
 +
dr3
, 
g3
 +
dg3
, 
b3
 +
db3
 )

1006 i‡(
ya
&
li
) ;

1007 i‡((
ya
&
pi
)==
pif
) ;

1009 
u32
 
r4
, 
g4
, 
b4
;

1011 
xa
 = 
	`FixedCeûToI¡
(
x3
);

1012 
xb
 = 
	`FixedCeûToI¡
(
x4
);

1013 
r4
 = 
r3
; 
g4
 = 
g3
; 
b4
 = 
b3
;

1015 
fixed
 
ômp
 = 
	`i2x
(
xa
Ë- 
x3
;

1016 i‡(
ômp
 != 0) {

1017 
r4
 +(
dr4
 * 
ômp
Ë>> 
FIXED_BITS
;

1018 
g4
 +(
dg4
 * 
ômp
Ë>> 
FIXED_BITS
;

1019 
b4
 +(
db4
 * 
ômp
Ë>> 
FIXED_BITS
;

1022 
r4
 +
fixed_HALF
;

1023 
g4
 +
fixed_HALF
;

1024 
b4
 +
fixed_HALF
;

1026 i‡((
xmö
 - 
xa
) > 0) {

1027 
r4
 +(
dr4
 * (
xmö
 - 
xa
));

1028 
g4
 +(
dg4
 * (
xmö
 - 
xa
));

1029 
b4
 +(
db4
 * (
xmö
 - 
xa
));

1030 
xa
 = 
xmö
;

1034 
gpu_u«i
.
gCﬁ
 = 
	`gpuPackGouøudCﬁ
(
r4
, 
g4
, 
b4
);

1036 i‡(
xb
 > 
xmax
) xb = xmax;

1037 i‡((
xb
 - 
xa
) > 0)

1038 
	`gpuPﬁyS∑nDrivî
(
gpu_u«i
, 
PixñBa£
 + 
xa
, (
xb
 - xa));

1041 } ++
cur_∑ss
 < 
tŸÆ_∑s£s
);

1042 
	}
}

1047 
	$gpuDøwPﬁyGT
(c⁄° 
PåUni⁄
 
∑ckë
, c⁄° 
PP
 
gpuPﬁyS∑nDrivî
, 
u32
 
is_quad
)

1049 
PﬁyVîãx
 
vbuf
[4];

1050 
	`pﬁyInôVîãxBuf„r
(
vbuf
, 
∑ckë
, 
POLYTYPE_GT
, 
is_quad
);

1052 
tŸÆ_∑s£s
 = 
is_quad
 ? 2 : 1;

1053 
cur_∑ss
 = 0;

1056 c⁄° 
PﬁyVîãx
* 
v±rs
[3];

1057 i‡(
	`pﬁyU£TrüngÀ
(
vbuf
, 
cur_∑ss
, 
v±rs
Ë=
Ál£
)

1060 
s32
 
xa
, 
xb
, 
ya
, 
yb
;

1061 
s32
 
x3
, 
dx3
, 
x4
, 
dx4
, 
dx
;

1062 
s32
 
u3
, 
du3
, 
v3
, 
dv3
;

1063 
s32
 
r3
, 
dr3
, 
g3
, 
dg3
, 
b3
, 
db3
;

1064 
s32
 
x0
, 
x1
, 
x2
, 
y0
, 
y1
, 
y2
;

1065 
s32
 
u0
, 
u1
, 
u2
, 
v0
, 
v1
, 
v2
;

1066 
s32
 
r0
, 
r1
, 
r2
, 
g0
, 
g1
, 
g2
, 
b0
, 
b1
, 
b2
;

1067 
s32
 
du4
, 
dv4
;

1068 
s32
 
dr4
, 
dg4
, 
db4
;

1070 
x0
 = 
v±rs
[0]->
x
; 
y0
 = v±rs[0]->
y
;

1071 
u0
 = 
v±rs
[0]->
ãx
.
u
; 
v0
 = v±rs[0]->ãx.
v
;

1072 
r0
 = 
v±rs
[0]->
cﬁ
.
r
; 
g0
 = v±rs[0]->cﬁ.
g
; 
b0
 = v±rs[0]->cﬁ.
b
;

1073 
x1
 = 
v±rs
[1]->
x
; 
y1
 = v±rs[1]->
y
;

1074 
u1
 = 
v±rs
[1]->
ãx
.
u
; 
v1
 = v±rs[1]->ãx.
v
;

1075 
r1
 = 
v±rs
[1]->
cﬁ
.
r
; 
g1
 = v±rs[1]->cﬁ.
g
; 
b1
 = v±rs[1]->cﬁ.
b
;

1076 
x2
 = 
v±rs
[2]->
x
; 
y2
 = v±rs[2]->
y
;

1077 
u2
 = 
v±rs
[2]->
ãx
.
u
; 
v2
 = v±rs[2]->ãx.
v
;

1078 
r2
 = 
v±rs
[2]->
cﬁ
.
r
; 
g2
 = v±rs[2]->cﬁ.
g
; 
b2
 = v±rs[2]->cﬁ.
b
;

1080 
ya
 = 
y2
 - 
y0
;

1081 
yb
 = 
y2
 - 
y1
;

1082 
dx4
 = (
x2
 - 
x1
Ë* 
ya
 - (x2 - 
x0
Ë* 
yb
;

1083 
du4
 = (
u2
 - 
u1
Ë* 
ya
 - (u2 - 
u0
Ë* 
yb
;

1084 
dv4
 = (
v2
 - 
v1
Ë* 
ya
 - (v2 - 
v0
Ë* 
yb
;

1085 
dr4
 = (
r2
 - 
r1
Ë* 
ya
 - (r2 - 
r0
Ë* 
yb
;

1086 
dg4
 = (
g2
 - 
g1
Ë* 
ya
 - (g2 - 
g0
Ë* 
yb
;

1087 
db4
 = (
b2
 - 
b1
Ë* 
ya
 - (b2 - 
b0
Ë* 
yb
;

1088 
dx
 = 
dx4
;

1089 i‡(
dx4
 < 0) {

1090 
dx4
 = -dx4;

1091 
du4
 = -du4;

1092 
dv4
 = -dv4;

1093 
dr4
 = -dr4;

1094 
dg4
 = -dg4;

1095 
db4
 = -db4;

1098 #ifde‡
GPU_UNAI_USE_FLOATMATH


1099 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


1100 i‡(
dx4
 != 0) {

1101 
föv
 = 
	`FlﬂtInv
(
dx4
);

1102 
du4
 = (
fixed
)((du4 << 
FIXED_BITS
Ë* 
föv
);

1103 
dv4
 = (
fixed
)((dv4 << 
FIXED_BITS
Ë* 
föv
);

1104 
dr4
 = (
fixed
)((dr4 << 
FIXED_BITS
Ë* 
föv
);

1105 
dg4
 = (
fixed
)((dg4 << 
FIXED_BITS
Ë* 
föv
);

1106 
db4
 = (
fixed
)((db4 << 
FIXED_BITS
Ë* 
föv
);

1108 
du4
 = 
dv4
 = 
dr4
 = 
dg4
 = 
db4
 = 0;

1111 i‡(
dx4
 != 0) {

1112 
fdiv
 = 
dx4
;

1113 
du4
 = (
fixed
)((du4 << 
FIXED_BITS
Ë/ 
fdiv
);

1114 
dv4
 = (
fixed
)((dv4 << 
FIXED_BITS
Ë/ 
fdiv
);

1115 
dr4
 = (
fixed
)((dr4 << 
FIXED_BITS
Ë/ 
fdiv
);

1116 
dg4
 = (
fixed
)((dg4 << 
FIXED_BITS
Ë/ 
fdiv
);

1117 
db4
 = (
fixed
)((db4 << 
FIXED_BITS
Ë/ 
fdiv
);

1119 
du4
 = 
dv4
 = 
dr4
 = 
dg4
 = 
db4
 = 0;

1123 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


1124 i‡(
dx4
 != 0) {

1125 
iF
, 
iS
;

1126 
	`xInv
(
dx4
, 
iF
, 
iS
);

1127 
du4
 = 
	`xInvMulx
(du4, 
iF
, 
iS
);

1128 
dv4
 = 
	`xInvMulx
(dv4, 
iF
, 
iS
);

1129 
dr4
 = 
	`xInvMulx
(dr4, 
iF
, 
iS
);

1130 
dg4
 = 
	`xInvMulx
(dg4, 
iF
, 
iS
);

1131 
db4
 = 
	`xInvMulx
(db4, 
iF
, 
iS
);

1133 
du4
 = 
dv4
 = 
dr4
 = 
dg4
 = 
db4
 = 0;

1136 i‡(
dx4
 != 0) {

1137 
du4
 = 
	`GPU_FAST_DIV
(du4 << 
FIXED_BITS
, 
dx4
);

1138 
dv4
 = 
	`GPU_FAST_DIV
(dv4 << 
FIXED_BITS
, 
dx4
);

1139 
dr4
 = 
	`GPU_FAST_DIV
(dr4 << 
FIXED_BITS
, 
dx4
);

1140 
dg4
 = 
	`GPU_FAST_DIV
(dg4 << 
FIXED_BITS
, 
dx4
);

1141 
db4
 = 
	`GPU_FAST_DIV
(db4 << 
FIXED_BITS
, 
dx4
);

1143 
du4
 = 
dv4
 = 
dr4
 = 
dg4
 = 
db4
 = 0;

1148 
gpu_u«i
.
u_öc
 = 
du4
;

1149 
gpu_u«i
.
v_öc
 = 
dv4
;

1150 
gpu_u«i
.
gInc
 = 
	`gpuPackGouøudCﬁInc
(
dr4
, 
dg4
, 
db4
);

1152 
s32
 
lo›0
 = 2;Üoop0;Üoop0--) {

1153 i‡(
lo›0
 == 2) {

1154 
ya
 = 
y0
; 
yb
 = 
y1
;

1155 
x3
 = 
x4
 = 
	`i2x
(
x0
);

1156 
u3
 = 
	`i2x
(
u0
); 
v3
 = i2x(
v0
);

1157 
r3
 = 
	`i2x
(
r0
); 
g3
 = i2x(
g0
); 
b3
 = i2x(
b0
);

1158 i‡(
dx
 < 0) {

1159 #ifde‡
GPU_UNAI_USE_FLOATMATH


1160 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


1161 i‡((
y2
 - 
y0
) != 0) {

1162 
föv
 = 
	`FlﬂtInv
(
y2
 - 
y0
);

1163 
dx3
 = (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
föv
);

1164 
du3
 = (
fixed
)(((
u2
 - 
u0
Ë<< 
FIXED_BITS
Ë* 
föv
);

1165 
dv3
 = (
fixed
)(((
v2
 - 
v0
Ë<< 
FIXED_BITS
Ë* 
föv
);

1166 
dr3
 = (
fixed
)(((
r2
 - 
r0
Ë<< 
FIXED_BITS
Ë* 
föv
);

1167 
dg3
 = (
fixed
)(((
g2
 - 
g0
Ë<< 
FIXED_BITS
Ë* 
föv
);

1168 
db3
 = (
fixed
)(((
b2
 - 
b0
Ë<< 
FIXED_BITS
Ë* 
föv
);

1170 
dx3
 = 
du3
 = 
dv3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

1172 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y1 - y0)) : 0;

1174 i‡((
y2
 - 
y0
) != 0) {

1175 
fdiv
 = 
y2
 - 
y0
;

1176 
dx3
 = (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1177 
du3
 = (
fixed
)(((
u2
 - 
u0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1178 
dv3
 = (
fixed
)(((
v2
 - 
v0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1179 
dr3
 = (
fixed
)(((
r2
 - 
r0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1180 
dg3
 = (
fixed
)(((
g2
 - 
g0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1181 
db3
 = (
fixed
)(((
b2
 - 
b0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1183 
dx3
 = 
du3
 = 
dv3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

1185 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
) / ()(y1 - y0)) : 0;

1188 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


1189 i‡((
y2
 - 
y0
) != 0) {

1190 
iF
, 
iS
;

1191 
	`xInv
((
y2
 - 
y0
), 
iF
, 
iS
);

1192 
dx3
 = 
	`xInvMulx
((
x2
 - 
x0
), 
iF
, 
iS
);

1193 
du3
 = 
	`xInvMulx
((
u2
 - 
u0
), 
iF
, 
iS
);

1194 
dv3
 = 
	`xInvMulx
((
v2
 - 
v0
), 
iF
, 
iS
);

1195 
dr3
 = 
	`xInvMulx
((
r2
 - 
r0
), 
iF
, 
iS
);

1196 
dg3
 = 
	`xInvMulx
((
g2
 - 
g0
), 
iF
, 
iS
);

1197 
db3
 = 
	`xInvMulx
((
b2
 - 
b0
), 
iF
, 
iS
);

1199 
dx3
 = 
du3
 = 
dv3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

1201 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? 
	`xLoDivx
((
x1
 - 
x0
), (y1 - y0)) : 0;

1203 i‡((
y2
 - 
y0
) != 0) {

1204 
dx3
 = 
	`GPU_FAST_DIV
((
x2
 - 
x0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

1205 
du3
 = 
	`GPU_FAST_DIV
((
u2
 - 
u0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

1206 
dv3
 = 
	`GPU_FAST_DIV
((
v2
 - 
v0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

1207 
dr3
 = 
	`GPU_FAST_DIV
((
r2
 - 
r0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

1208 
dg3
 = 
	`GPU_FAST_DIV
((
g2
 - 
g0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

1209 
db3
 = 
	`GPU_FAST_DIV
((
b2
 - 
b0
Ë<< 
FIXED_BITS
, (
y2
 - 
y0
));

1211 
dx3
 = 
du3
 = 
dv3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

1213 
dx4
 = ((
y1
 - 
y0
Ë!0Ë? 
	`GPU_FAST_DIV
((
x1
 - 
x0
Ë<< 
FIXED_BITS
, (y1 - y0)) : 0;

1217 #ifde‡
GPU_UNAI_USE_FLOATMATH


1218 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


1219 i‡((
y1
 - 
y0
) != 0) {

1220 
föv
 = 
	`FlﬂtInv
(
y1
 - 
y0
);

1221 
dx3
 = (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
föv
);

1222 
du3
 = (
fixed
)(((
u1
 - 
u0
Ë<< 
FIXED_BITS
Ë* 
föv
);

1223 
dv3
 = (
fixed
)(((
v1
 - 
v0
Ë<< 
FIXED_BITS
Ë* 
föv
);

1224 
dr3
 = (
fixed
)(((
r1
 - 
r0
Ë<< 
FIXED_BITS
Ë* 
föv
);

1225 
dg3
 = (
fixed
)(((
g1
 - 
g0
Ë<< 
FIXED_BITS
Ë* 
föv
);

1226 
db3
 = (
fixed
)(((
b1
 - 
b0
Ë<< 
FIXED_BITS
Ë* 
föv
);

1228 
dx3
 = 
du3
 = 
dv3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

1230 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y2 - y0)) : 0;

1232 i‡((
y1
 - 
y0
) != 0) {

1233 
fdiv
 = 
y1
 - 
y0
;

1234 
dx3
 = (
fixed
)(((
x1
 - 
x0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1235 
du3
 = (
fixed
)(((
u1
 - 
u0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1236 
dv3
 = (
fixed
)(((
v1
 - 
v0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1237 
dr3
 = (
fixed
)(((
r1
 - 
r0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1238 
dg3
 = (
fixed
)(((
g1
 - 
g0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1239 
db3
 = (
fixed
)(((
b1
 - 
b0
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1241 
dx3
 = 
du3
 = 
dv3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

1243 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? (
fixed
)(((
x2
 - 
x0
Ë<< 
FIXED_BITS
) / (y2 - y0)) : 0;

1246 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


1247 i‡((
y1
 - 
y0
) != 0) {

1248 
iF
, 
iS
;

1249 
	`xInv
((
y1
 - 
y0
), 
iF
, 
iS
);

1250 
dx3
 = 
	`xInvMulx
((
x1
 - 
x0
), 
iF
, 
iS
);

1251 
du3
 = 
	`xInvMulx
((
u1
 - 
u0
), 
iF
, 
iS
);

1252 
dv3
 = 
	`xInvMulx
((
v1
 - 
v0
), 
iF
, 
iS
);

1253 
dr3
 = 
	`xInvMulx
((
r1
 - 
r0
), 
iF
, 
iS
);

1254 
dg3
 = 
	`xInvMulx
((
g1
 - 
g0
), 
iF
, 
iS
);

1255 
db3
 = 
	`xInvMulx
((
b1
 - 
b0
), 
iF
, 
iS
);

1257 
dx3
 = 
du3
 = 
dv3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

1259 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? 
	`xLoDivx
((
x2
 - 
x0
), (y2 - y0)) : 0;

1261 i‡((
y1
 - 
y0
) != 0) {

1262 
dx3
 = 
	`GPU_FAST_DIV
((
x1
 - 
x0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

1263 
du3
 = 
	`GPU_FAST_DIV
((
u1
 - 
u0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

1264 
dv3
 = 
	`GPU_FAST_DIV
((
v1
 - 
v0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

1265 
dr3
 = 
	`GPU_FAST_DIV
((
r1
 - 
r0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

1266 
dg3
 = 
	`GPU_FAST_DIV
((
g1
 - 
g0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

1267 
db3
 = 
	`GPU_FAST_DIV
((
b1
 - 
b0
Ë<< 
FIXED_BITS
, (
y1
 - 
y0
));

1269 
dx3
 = 
du3
 = 
dv3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

1271 
dx4
 = ((
y2
 - 
y0
Ë!0Ë? 
	`GPU_FAST_DIV
((
x2
 - 
x0
Ë<< 
FIXED_BITS
, (y2 - y0)) : 0;

1278 i‡(
y1
 =
y2
) ;

1280 
ya
 = 
y1
; 
yb
 = 
y2
;

1282 i‡(
dx
 < 0) {

1283 
x3
 = 
	`i2x
(
x0
); 
x4
 = i2x(
x1
);

1284 
u3
 = 
	`i2x
(
u0
); 
v3
 = i2x(
v0
);

1285 
r3
 = 
	`i2x
(
r0
); 
g3
 = i2x(
g0
); 
b3
 = i2x(
b0
);

1287 i‡((
y1
 - 
y0
) != 0) {

1288 
x3
 +(
dx3
 * (
y1
 - 
y0
));

1289 
u3
 +(
du3
 * (
y1
 - 
y0
));

1290 
v3
 +(
dv3
 * (
y1
 - 
y0
));

1291 
r3
 +(
dr3
 * (
y1
 - 
y0
));

1292 
g3
 +(
dg3
 * (
y1
 - 
y0
));

1293 
b3
 +(
db3
 * (
y1
 - 
y0
));

1296 #ifde‡
GPU_UNAI_USE_FLOATMATH


1297 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


1298 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
Ë* 
	`FlﬂtInv
(y2 - y1)) : 0;

1300 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
) / ()(y2 - y1)) : 0;

1303 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


1304 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? 
	`xLoDivx
((
x2
 - 
x1
), (y2 - y1)) : 0;

1306 
dx4
 = ((
y2
 - 
y1
Ë!0Ë? 
	`GPU_FAST_DIV
((
x2
 - 
x1
Ë<< 
FIXED_BITS
, (y2 - y1)) : 0;

1310 
x3
 = 
	`i2x
(
x1
);

1311 
x4
 = 
	`i2x
(
x0
Ë+ (
dx4
 * (
y1
 - 
y0
));

1313 
u3
 = 
	`i2x
(
u1
); 
v3
 = i2x(
v1
);

1314 
r3
 = 
	`i2x
(
r1
); 
g3
 = i2x(
g1
); 
b3
 = i2x(
b1
);

1315 #ifde‡
GPU_UNAI_USE_FLOATMATH


1316 #ifde‡
GPU_UNAI_USE_FLOAT_DIV_MULTINV


1317 i‡((
y2
 - 
y1
) != 0) {

1318 
föv
 = 
	`FlﬂtInv
(
y2
 - 
y1
);

1319 
dx3
 = (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
Ë* 
föv
);

1320 
du3
 = (
fixed
)(((
u2
 - 
u1
Ë<< 
FIXED_BITS
Ë* 
föv
);

1321 
dv3
 = (
fixed
)(((
v2
 - 
v1
Ë<< 
FIXED_BITS
Ë* 
föv
);

1322 
dr3
 = (
fixed
)(((
r2
 - 
r1
Ë<< 
FIXED_BITS
Ë* 
föv
);

1323 
dg3
 = (
fixed
)(((
g2
 - 
g1
Ë<< 
FIXED_BITS
Ë* 
föv
);

1324 
db3
 = (
fixed
)(((
b2
 - 
b1
Ë<< 
FIXED_BITS
Ë* 
föv
);

1326 
dx3
 = 
du3
 = 
dv3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

1329 i‡((
y2
 - 
y1
) != 0) {

1330 
fdiv
 = 
y2
 - 
y1
;

1331 
dx3
 = (
fixed
)(((
x2
 - 
x1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1332 
du3
 = (
fixed
)(((
u2
 - 
u1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1333 
dv3
 = (
fixed
)(((
v2
 - 
v1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1334 
dr3
 = (
fixed
)(((
r2
 - 
r1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1335 
dg3
 = (
fixed
)(((
g2
 - 
g1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1336 
db3
 = (
fixed
)(((
b2
 - 
b1
Ë<< 
FIXED_BITS
Ë/ 
fdiv
);

1338 
dx3
 = 
du3
 = 
dv3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

1342 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


1343 i‡((
y2
 - 
y1
) != 0) {

1344 
iF
, 
iS
;

1345 
	`xInv
((
y2
 - 
y1
), 
iF
, 
iS
);

1346 
dx3
 = 
	`xInvMulx
((
x2
 - 
x1
), 
iF
, 
iS
);

1347 
du3
 = 
	`xInvMulx
((
u2
 - 
u1
), 
iF
, 
iS
);

1348 
dv3
 = 
	`xInvMulx
((
v2
 - 
v1
), 
iF
, 
iS
);

1349 
dr3
 = 
	`xInvMulx
((
r2
 - 
r1
), 
iF
, 
iS
);

1350 
dg3
 = 
	`xInvMulx
((
g2
 - 
g1
), 
iF
, 
iS
);

1351 
db3
 = 
	`xInvMulx
((
b2
 - 
b1
), 
iF
, 
iS
);

1353 
dx3
 = 
du3
 = 
dv3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

1356 i‡((
y2
 - 
y1
) != 0) {

1357 
dx3
 = 
	`GPU_FAST_DIV
((
x2
 - 
x1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

1358 
du3
 = 
	`GPU_FAST_DIV
((
u2
 - 
u1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

1359 
dv3
 = 
	`GPU_FAST_DIV
((
v2
 - 
v1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

1360 
dr3
 = 
	`GPU_FAST_DIV
((
r2
 - 
r1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

1361 
dg3
 = 
	`GPU_FAST_DIV
((
g2
 - 
g1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

1362 
db3
 = 
	`GPU_FAST_DIV
((
b2
 - 
b1
Ë<< 
FIXED_BITS
, (
y2
 - 
y1
));

1364 
dx3
 = 
du3
 = 
dv3
 = 
dr3
 = 
dg3
 = 
db3
 = 0;

1371 
s32
 
xmö
, 
xmax
, 
ymö
, 
ymax
;

1372 
xmö
 = 
gpu_u«i
.
DøwögAªa
[0]; 
xmax
 = gpu_unai.DrawingArea[2];

1373 
ymö
 = 
gpu_u«i
.
DøwögAªa
[1]; 
ymax
 = gpu_unai.DrawingArea[3];

1375 i‡((
ymö
 - 
ya
) > 0) {

1376 
x3
 +(
dx3
 * (
ymö
 - 
ya
));

1377 
x4
 +(
dx4
 * (
ymö
 - 
ya
));

1378 
u3
 +(
du3
 * (
ymö
 - 
ya
));

1379 
v3
 +(
dv3
 * (
ymö
 - 
ya
));

1380 
r3
 +(
dr3
 * (
ymö
 - 
ya
));

1381 
g3
 +(
dg3
 * (
ymö
 - 
ya
));

1382 
b3
 +(
db3
 * (
ymö
 - 
ya
));

1383 
ya
 = 
ymö
;

1386 i‡(
yb
 > 
ymax
) yb = ymax;

1388 
lo›1
 = 
yb
 - 
ya
;

1389 i‡(
lo›1
 <= 0)

1392 
u16
* 
PixñBa£
 = &((u16*)
gpu_u«i
.
vøm
)[
	`FRAME_OFFSET
(0, 
ya
)];

1393 
li
=
gpu_u«i
.
ûa˚_mask
;

1394 
pi
=(
	`ProgªssiveI¡îœ˚E«bÀd
()?(
gpu_u«i
.
ûa˚_mask
+1):0);

1395 
pif
=(
	`ProgªssiveI¡îœ˚E«bÀd
()?(
gpu_u«i
.
¥og_ûa˚_Êag
?(gpu_u«i.
ûa˚_mask
+1):0):1);

1397 ; 
lo›1
; --lo›1, ++
ya
, 
PixñBa£
 +
FRAME_WIDTH
,

1398 
x3
 +
dx3
, 
x4
 +
dx4
,

1399 
u3
 +
du3
, 
v3
 +
dv3
,

1400 
r3
 +
dr3
, 
g3
 +
dg3
, 
b3
 +
db3
 )

1402 i‡(
ya
&
li
) ;

1403 i‡((
ya
&
pi
)==
pif
) ;

1405 
u32
 
u4
, 
v4
;

1406 
u32
 
r4
, 
g4
, 
b4
;

1408 
xa
 = 
	`FixedCeûToI¡
(
x3
);

1409 
xb
 = 
	`FixedCeûToI¡
(
x4
);

1410 
u4
 = 
u3
; 
v4
 = 
v3
;

1411 
r4
 = 
r3
; 
g4
 = 
g3
; 
b4
 = 
b3
;

1413 
fixed
 
ômp
 = 
	`i2x
(
xa
Ë- 
x3
;

1414 i‡(
ômp
 != 0) {

1415 
u4
 +(
du4
 * 
ômp
Ë>> 
FIXED_BITS
;

1416 
v4
 +(
dv4
 * 
ômp
Ë>> 
FIXED_BITS
;

1417 
r4
 +(
dr4
 * 
ômp
Ë>> 
FIXED_BITS
;

1418 
g4
 +(
dg4
 * 
ômp
Ë>> 
FIXED_BITS
;

1419 
b4
 +(
db4
 * 
ômp
Ë>> 
FIXED_BITS
;

1422 
u4
 +
fixed_HALF
;

1423 
v4
 +
fixed_HALF
;

1424 
r4
 +
fixed_HALF
;

1425 
g4
 +
fixed_HALF
;

1426 
b4
 +
fixed_HALF
;

1428 i‡((
xmö
 - 
xa
) > 0) {

1429 
u4
 +
du4
 * (
xmö
 - 
xa
);

1430 
v4
 +
dv4
 * (
xmö
 - 
xa
);

1431 
r4
 +
dr4
 * (
xmö
 - 
xa
);

1432 
g4
 +
dg4
 * (
xmö
 - 
xa
);

1433 
b4
 +
db4
 * (
xmö
 - 
xa
);

1434 
xa
 = 
xmö
;

1438 
gpu_u«i
.
u
 = 
u4
;

1439 
gpu_u«i
.
v
 = 
v4
;

1440 
gpu_u«i
.
gCﬁ
 = 
	`gpuPackGouøudCﬁ
(
r4
, 
g4
, 
b4
);

1442 i‡(
xb
 > 
xmax
) xb = xmax;

1443 i‡((
xb
 - 
xa
) > 0)

1444 
	`gpuPﬁyS∑nDrivî
(
gpu_u«i
, 
PixñBa£
 + 
xa
, (
xb
 - xa));

1447 } ++
cur_∑ss
 < 
tŸÆ_∑s£s
);

1448 
	}
}

	@src/gpu/gpu_unai/gpu_raster_sprite.h

24 
	$gpuDøwS
(
PåUni⁄
 
∑ckë
, c⁄° 
PS
 
gpuS¥ôeS∑nDrivî
)

26 
s32
 
x0
, 
x1
, 
y0
, 
y1
;

27 
u32
 
u0
, 
v0
;

32 
x0
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[2] + 
gpu_u«i
.
DøwögOff£t
[0]);

33 
y0
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[3] + 
gpu_u«i
.
DøwögOff£t
[1]);

35 
u32
 
w
 = 
∑ckë
.
U2
[6] & 0x3ff;

36 
u32
 
h
 = 
∑ckë
.
U2
[7] & 0x1ff;

37 
x1
 = 
x0
 + 
w
;

38 
y1
 = 
y0
 + 
h
;

40 
s32
 
xmö
, 
xmax
, 
ymö
, 
ymax
;

41 
xmö
 = 
gpu_u«i
.
DøwögAªa
[0]; 
xmax
 = gpu_unai.DrawingArea[2];

42 
ymö
 = 
gpu_u«i
.
DøwögAªa
[1]; 
ymax
 = gpu_unai.DrawingArea[3];

44 
u0
 = 
∑ckë
.
U1
[8];

45 
v0
 = 
∑ckë
.
U1
[9];

47 
s32
 
ãmp
;

48 
ãmp
 = 
ymö
 - 
y0
;

49 i‡(
ãmp
 > 0Ë{ 
y0
 = 
ymö
; 
v0
 +=Åemp; }

50 i‡(
y1
 > 
ymax
) y1 = ymax;

51 i‡(
y1
 <
y0
) ;

53 
ãmp
 = 
xmö
 - 
x0
;

54 i‡(
ãmp
 > 0Ë{ 
x0
 = 
xmö
; 
u0
 +=Åemp; }

55 i‡(
x1
 > 
xmax
) x1 = xmax;

56 
x1
 -
x0
;

57 i‡(
x1
 <= 0) ;

59 
gpu_u«i
.
r5
 = 
∑ckë
.
U1
[0] >> 3;

60 
gpu_u«i
.
g5
 = 
∑ckë
.
U1
[1] >> 3;

61 
gpu_u«i
.
b5
 = 
∑ckë
.
U1
[2] >> 3;

63 
u16
 *
Pixñ
 = &((u16*)
gpu_u«i
.
vøm
)[
	`FRAME_OFFSET
(
x0
, 
y0
)];

64 c⁄° 
li
=
gpu_u«i
.
ûa˚_mask
;

65 c⁄° 
pi
=(
	`ProgªssiveI¡îœ˚E«bÀd
()?(
gpu_u«i
.
ûa˚_mask
+1):0);

66 c⁄° 
pif
=(
	`ProgªssiveI¡îœ˚E«bÀd
()?(
gpu_u«i
.
¥og_ûa˚_Êag
?(gpu_u«i.
ûa˚_mask
+1):0):1);

67 
tmode
 = 
gpu_u«i
.
TEXT_MODE
 >> 5;

68 c⁄° 
u32
 
v0_mask
 = 
gpu_u«i
.
TextuªWödow
[3];

69 
u8
* 
pTxt_ba£
 = (u8*)
gpu_u«i
.
TBA
;

72 i‡(
tmode
 =3Ë
u0
 <<= 1;

74 ; 
y0
<
y1
; ++y0) {

75 
u8
* 
pTxt
 = 
pTxt_ba£
 + ((
v0
 & 
v0_mask
) * 2048);

76 i‡(!(
y0
&
li
Ë&& (y0&
pi
)!=
pif
)

77 
	`gpuS¥ôeS∑nDrivî
(
Pixñ
, 
x1
, 
pTxt
, 
u0
);

78 
Pixñ
 +
FRAME_WIDTH
;

79 
v0
++;

81 
	}
}

83 #ifde‡
__¨m__


84 
	~"gpu_¨m.h
"

87 
	$gpuDøwS16
(
PåUni⁄
 
∑ckë
)

89 
s32
 
x0
, 
y0
;

90 
s32
 
u0
, 
v0
;

91 
s32
 
xmö
, 
xmax
;

92 
s32
 
ymö
, 
ymax
;

93 
u32
 
h
 = 16;

98 
x0
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[2] + 
gpu_u«i
.
DøwögOff£t
[0]);

99 
y0
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[3] + 
gpu_u«i
.
DøwögOff£t
[1]);

101 
xmö
 = 
gpu_u«i
.
DøwögAªa
[0]; 
xmax
 = gpu_unai.DrawingArea[2];

102 
ymö
 = 
gpu_u«i
.
DøwögAªa
[1]; 
ymax
 = gpu_unai.DrawingArea[3];

103 
u0
 = 
∑ckë
.
U1
[8];

104 
v0
 = 
∑ckë
.
U1
[9];

106 i‡(
x0
 > 
xmax
 - 16 || x0 < 
xmö
 ||

107 ((
u0
 | 
v0
Ë& 15Ë|| !(
gpu_u«i
.
TextuªWödow
[2] & gpu_unai.TextureWindow[3] & 8)) {

109 
∑ckë
.
U4
[3] = 0x00100010;

110 
	`gpuDøwS
(
gpuS¥ôeS∑nFn
<0x20>);

114 i‡(
y0
 >
ymax
 || y0 <
ymö
 - 16)

116 i‡(
y0
 < 
ymö
) {

117 
h
 -
ymö
 - 
y0
;

118 
v0
 +
ymö
 - 
y0
;

119 
y0
 = 
ymö
;

121 i‡(
ymax
 - 
y0
 < 16)

122 
h
 = 
ymax
 - 
y0
;

124 
	`døw_•r16_fuŒ
(&
gpu_u«i
.
vøm
[
	`FRAME_OFFSET
(
x0
, 
y0
)], &gpu_u«i.
TBA
[FRAME_OFFSET(
u0
/4, 
v0
)], gpu_u«i.
CBA
, 
h
);

125 
	}
}

128 
	$gpuDøwT
(
PåUni⁄
 
∑ckë
, c⁄° 
PT
 
gpuTûeS∑nDrivî
)

130 
s32
 
x0
, 
x1
, 
y0
, 
y1
;

133 
x0
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[2] + 
gpu_u«i
.
DøwögOff£t
[0]);

134 
y0
 = 
	`GPU_EXPANDSIGN
(
∑ckë
.
S2
[3] + 
gpu_u«i
.
DøwögOff£t
[1]);

136 
u32
 
w
 = 
∑ckë
.
U2
[4] & 0x3ff;

137 
u32
 
h
 = 
∑ckë
.
U2
[5] & 0x1ff;

138 
x1
 = 
x0
 + 
w
;

139 
y1
 = 
y0
 + 
h
;

141 
s32
 
xmö
, 
xmax
, 
ymö
, 
ymax
;

142 
xmö
 = 
gpu_u«i
.
DøwögAªa
[0]; 
xmax
 = gpu_unai.DrawingArea[2];

143 
ymö
 = 
gpu_u«i
.
DøwögAªa
[1]; 
ymax
 = gpu_unai.DrawingArea[3];

145 i‡(
y0
 < 
ymö
) y0 = ymin;

146 i‡(
y1
 > 
ymax
) y1 = ymax;

147 i‡(
y1
 <
y0
) ;

149 i‡(
x0
 < 
xmö
) x0 = xmin;

150 i‡(
x1
 > 
xmax
) x1 = xmax;

151 
x1
 -
x0
;

152 i‡(
x1
 <= 0) ;

154 c⁄° 
u16
 
D©a
 = 
	`GPU_RGB16
(
∑ckë
.
U4
[0]);

155 
u16
 *
Pixñ
 = &((u16*)
gpu_u«i
.
vøm
)[
	`FRAME_OFFSET
(
x0
, 
y0
)];

156 c⁄° 
li
=
gpu_u«i
.
ûa˚_mask
;

157 c⁄° 
pi
=(
	`ProgªssiveI¡îœ˚E«bÀd
()?(
gpu_u«i
.
ûa˚_mask
+1):0);

158 c⁄° 
pif
=(
	`ProgªssiveI¡îœ˚E«bÀd
()?(
gpu_u«i
.
¥og_ûa˚_Êag
?(gpu_u«i.
ûa˚_mask
+1):0):1);

160 ; 
y0
<
y1
; ++y0) {

161 i‡(!(
y0
&
li
Ë&& (y0&
pi
)!=
pif
)

162 
	`gpuTûeS∑nDrivî
(
Pixñ
,
x1
,
D©a
);

163 
Pixñ
 +
FRAME_WIDTH
;

165 
	}
}

	@src/gpu/gpu_unai/gpu_unai.h

22 #i‚de‡
GPU_UNAI_H


23 
	#GPU_UNAI_H


	)

25 
	~"gpu.h
"

46 
	#u8
 
uöt8_t


	)

47 
	#s8
 
öt8_t


	)

48 
	#u16
 
uöt16_t


	)

49 
	#s16
 
öt16_t


	)

50 
	#u32
 
uöt32_t


	)

51 
	#s32
 
öt32_t


	)

52 
	#s64
 
öt64_t


	)

54 
	uPåUni⁄


56 
u32
 *
	mU4
;

57 
s32
 *
	mS4
;

58 
u16
 *
	mU2
;

59 
s16
 *
	mS2
;

60 
u8
 *
	mU1
;

61 
s8
 *
	mS1
;

62 *
	m±r
;

65 
	uGPUPackë


67 
u32
 
	mU4
[16];

68 
s32
 
	mS4
[16];

69 
u16
 
	mU2
[32];

70 
s16
 
	mS2
[32];

71 
u8
 
	mU1
[64];

72 
s8
 
	mS1
[64];

75 
	gãm∂©e
<
˛ass
 
	gT
> 
ölöe
 
	$Sw≠VÆues
(
T
 &
x
, T &
y
)

77 
T
 
	`tmp
(
x
); x = 
y
; y = 
tmp
;

78 
	}
}

80 
	gãm∂©e
<
ty≥«me
 
	gT
>

81 
ölöe
 
T
 
	$Mö2
 (c⁄° 
T
 
a
, c⁄° T 
b
)

83  (
a
<
b
)?a:b;

84 
	}
}

86 
	gãm∂©e
<
ty≥«me
 
	gT
>

87 
ölöe
 
T
 
	$Mö3
 (c⁄° 
T
 
a
, c⁄° T 
b
, c⁄° T 
c
)

89  
	`Mö2
(Mö2(
a
,
b
),
c
);

90 
	}
}

92 
	gãm∂©e
<
ty≥«me
 
	gT
>

93 
ölöe
 
T
 
	$Max2
 (c⁄° 
T
 
a
, c⁄° T 
b
)

95  (
a
>
b
)?a:b;

96 
	}
}

98 
	gãm∂©e
<
ty≥«me
 
	gT
>

99 
ölöe
 
T
 
	$Max3
 (c⁄° 
T
 
a
, c⁄° T 
b
, c⁄° T 
c
)

101  
	`Max2
(Max2(
a
,
b
),
c
);

102 
	}
}

109 
	#GPU_RGB16
(
rgb
Ë(((‘gb)&0xF80000)>>9)|((‘gb)&0xF800)>>6)|((‘gb)&0xF8)>>3))

	)

112 
	#GPU_EXPANDSIGN
(
x
Ë(((
s32
)(x)<<(32-11))>>(32-11))

	)

115 
	#CHKMAX_X
 1024

	)

116 
	#CHKMAX_Y
 512

	)

118 
	#FRAME_BUFFER_SIZE
 (1024*512*2)

	)

119 
	#FRAME_WIDTH
 1024

	)

120 
	#FRAME_HEIGHT
 512

	)

121 
	#FRAME_OFFSET
(
x
,
y
Ë(((y)<<10)+(x))

	)

122 
	#FRAME_BYTE_STRIDE
 2048

	)

123 
	#FRAME_BYTES_PER_PIXEL
 2

	)

125 
ölöe
 
s32
 
	$GPU_DIV
(
s32
 
rs
, s32 
π
)

127  
π
 ? (
rs
 /Ñt) : (0);

128 
	}
}

131 
	#GPU_FAST_DIV
(
rs
, 
π
Ë((sig√d)‘sË/ (sig√d)‘t))

	)

133 
	sgpu_u«i_t
 {

134 
u32
 
	mGPU_GP1
;

135 
GPUPackë
 
	mPackëBuf„r
;

136 
u16
 *
	mvøm
;

140 #i‚de‡
USE_GPULIB


141 
u32
 
	mGPU_GP0
;

142 
u32
 
	mãx_wödow
;

143 
s32
 
	mPackëCou¡
;

144 
s32
 
	mPackëIndex
;

145 
boﬁ
 
	mfb_dúty
;

149 
u16
 
	mDi•œyAªa
[6];

159 
s32
 
	mpx
,
	mpy
;

160 
s32
 
	mx_íd
,
	my_íd
;

161 
u16
* 
	mpvøm
;

162 
u32
 *
	mœ°_dma
;

163 
boﬁ
 
	mFømeToRód
;

164 
boﬁ
 
	mFømeToWrôe
;

165 } 
	mdma
;

170 
	mskùCou¡
;

171 
boﬁ
 
	misSkù
;

172 
boﬁ
 
	mskùFøme
;

173 
boﬁ
 
	mwasSkù
;

174 
boﬁ
 
	mskùGPU
;

175 } 
	m‰ameskù
;

180 
u32
 
	mTextuªWödowCur
;

181 
u8
 
	mTextuªWödow
[4];

186 
u16
 
	mDøwögAªa
[4];

191 
s16
 
	mDøwögOff£t
[2];

194 
u16
* 
	mTBA
;

195 
u16
* 
	mCBA
;

203 
u32
 
	mu
, 
	mv
;

204 
u32
 
	mu_msk
, 
	mv_msk
;

205 
s32
 
	mu_öc
, 
	mv_öc
;

211 
u32
 
	mgCﬁ
;

212 
u32
 
	mgInc
;

215 
u8
 
	mr5
, 
	mg5
, 
	mb5
;

216 
u8
 
	mr8
, 
	mg8
, 
	mb8
;

219 
u16
 
	mPixñD©a
;

225 
u8
 
	mblô_mask
;

230 
u8
 
	mûa˚_mask
;

238 
boﬁ
 
	m¥og_ûa˚_Êag
;

240 
u8
 
	mBLEND_MODE
;

241 
u8
 
	mTEXT_MODE
;

242 
u8
 
	mMaskög
;

244 
u16
 
	mPixñMSB
;

246 
gpu_u«i_c⁄fig_t
 
	mc⁄fig
;

248 
u8
 
	mLightLUT
[32*32];

249 
u32
 
	mDôhîM©rix
[64];

252 
gpu_u«i_t
 
	ggpu_u«i
;

257 
gpu_u«i_c⁄fig_t
 
	ggpu_u«i_c⁄fig_ext
;

261 
ölöe
 
boﬁ
 
	$LightögE«bÀd
()

263  
gpu_u«i
.
c⁄fig
.
lightög
;

264 
	}
}

266 
ölöe
 
boﬁ
 
	$Fa°LightögE«bÀd
()

268  
gpu_u«i
.
c⁄fig
.
Á°_lightög
;

269 
	}
}

271 
ölöe
 
boﬁ
 
	$BÀndögE«bÀd
()

273  
gpu_u«i
.
c⁄fig
.
bÀndög
;

274 
	}
}

276 
ölöe
 
boﬁ
 
	$DôhîögE«bÀd
()

278  
gpu_u«i
.
c⁄fig
.
dôhîög
;

279 
	}
}

285 
ölöe
 
boﬁ
 
	$F‹˚dDôhîögE«bÀd
()

287  
Ál£
;

288 
	}
}

290 
ölöe
 
boﬁ
 
	$ProgªssiveI¡îœ˚E«bÀd
()

292 #ifde‡
USE_GPULIB


295  
Ál£
;

297  
gpu_u«i
.
c⁄fig
.
¥og_ûa˚
;

299 
	}
}

310 
ölöe
 
boﬁ
 
	$LöeSkùE«bÀd
()

312  
åue
;

313 
	}
}

	@src/gpu/gpu_unai/gpulib_if.cpp

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~"gpu/gpulib/gpu.h
"

28 
	~"p‹t.h
"

29 
	~"gpu_u«i.h
"

31 
	#GPU_INLINE
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

34 
	~"gpu_fixedpoöt.h
"

37 
	~"gpu_ö√r.h
"

40 
	~"gpu_ø°î_image.h
"

43 
	~"gpu_ø°î_löe.h
"

46 
	~"gpu_ø°î_pﬁyg⁄.h
"

49 
	~"gpu_ø°î_•rôe.h
"

52 
	~"gpu_comm™d.h
"

56 
	$ªndîî_öô
()

58 
	`mem£t
((*)&
gpu_u«i
, 0, (gpu_unai));

59 
gpu_u«i
.
vøm
 = (
u16
*)
gpu
.vram;

64 
gpu_u«i
.
TextuªWödow
[0] = 0;

65 
gpu_u«i
.
TextuªWödow
[1] = 0;

66 
gpu_u«i
.
TextuªWödow
[2] = 255;

67 
gpu_u«i
.
TextuªWödow
[3] = 255;

70 c⁄° 
u32
 
fb
 = 
FIXED_BITS
;

71 
gpu_u«i
.
u_msk
 = (((
u32
)gpu_u«i.
TextuªWödow
[2]Ë<< 
fb
) | ((1 << fb) - 1);

72 
gpu_u«i
.
v_msk
 = (((
u32
)gpu_u«i.
TextuªWödow
[3]Ë<< 
fb
) | ((1 << fb) - 1);

75 
gpu_u«i
.
c⁄fig
 = 
gpu_u«i_c⁄fig_ext
;

80 
gpu_u«i
.
ûa˚_mask
 = gpu_u«i.
c⁄fig
.
ûa˚_f‹˚
;

82 #ifde‡
GPU_UNAI_USE_INT_DIV_MULTINV


84 
i
=1;i<=(1<<
TABLE_BITS
);++i)

86 
v
 = 1.0 / (
i
);

87 #ifde‡
GPU_TABLE_10_BITS


88 
v
 *= (0xffffffff>>1);

90 
v
 *= (0x80000000);

92 
s_övTabÀ
[
i
-1]=
	`s32
(
v
);

96 
	`SëupLightLUT
();

97 
	`SëupDôhîögC⁄°™ts
();

100 
	}
}

102 
	$ªndîî_föish
()

104 
	}
}

106 
	$ªndîî_nŸify_ªs_ch™ge
()

120 
gpu_u«i
.
blô_mask
 = 0;

123 i‡(
	`LöeSkùE«bÀd
()) {

127 i‡(
gpu
.
s¸ìn
.
vªs
 == 480) {

128 i‡(
gpu_u«i
.
c⁄fig
.
ûa˚_f‹˚
) {

129 
gpu_u«i
.
ûa˚_mask
 = 3;

131 
gpu_u«i
.
ûa˚_mask
 = 1;

135 
gpu_u«i
.
ûa˚_mask
 = gpu_u«i.
c⁄fig
.
ûa˚_f‹˚
;

138 
gpu_u«i
.
ûa˚_mask
 = 0;

146 
	}
}

149 
	$gpuGP0Cmd_0xEx
(
gpu_u«i_t
 &
gpu_u«i
, 
u32
 
cmd_w‹d
)

152 
u8
 
num
 = (
cmd_w‹d
 >> 24) & 7;

153 
gpu
.
ex_ªgs
[
num
] = 
cmd_w‹d
;

154 
num
) {

157 
u32
 
cur_ãx∑ge
 = 
gpu_u«i
.
GPU_GP1
 & 0x7FF;

158 
u32
 
√w_ãx∑ge
 = 
cmd_w‹d
 & 0x7FF;

159 i‡(
cur_ãx∑ge
 !
√w_ãx∑ge
) {

160 
gpu_u«i
.
GPU_GP1
 = (gpu_u«i.GPU_GP1 & ~0x7FFË| 
√w_ãx∑ge
;

161 
	`gpuSëTextuª
(
gpu_u«i
.
GPU_GP1
);

167 i‡(
cmd_w‹d
 !
gpu_u«i
.
TextuªWödowCur
) {

168 c⁄° 
u8
 
TextuªMask
[32] = {

172 
gpu_u«i
.
TextuªWödowCur
 = 
cmd_w‹d
;

173 
gpu_u«i
.
TextuªWödow
[0] = ((
cmd_w‹d
 >> 10) & 0x1F) << 3;

174 
gpu_u«i
.
TextuªWödow
[1] = ((
cmd_w‹d
 >> 15) & 0x1F) << 3;

175 
gpu_u«i
.
TextuªWödow
[2] = 
TextuªMask
[(
cmd_w‹d
 >> 0) & 0x1F];

176 
gpu_u«i
.
TextuªWödow
[3] = 
TextuªMask
[(
cmd_w‹d
 >> 5) & 0x1F];

177 
gpu_u«i
.
TextuªWödow
[0] &= ~gpu_unai.TextureWindow[2];

178 
gpu_u«i
.
TextuªWödow
[1] &= ~gpu_unai.TextureWindow[3];

181 c⁄° 
u32
 
fb
 = 
FIXED_BITS
;

182 
gpu_u«i
.
u_msk
 = (((
u32
)gpu_u«i.
TextuªWödow
[2]Ë<< 
fb
) | ((1 << fb) - 1);

183 
gpu_u«i
.
v_msk
 = (((
u32
)gpu_u«i.
TextuªWödow
[3]Ë<< 
fb
) | ((1 << fb) - 1);

185 
	`gpuSëTextuª
(
gpu_u«i
.
GPU_GP1
);

191 
gpu_u«i
.
DøwögAªa
[0] = 
cmd_w‹d
 & 0x3FF;

192 
gpu_u«i
.
DøwögAªa
[1] = (
cmd_w‹d
 >> 10) & 0x3FF;

197 
gpu_u«i
.
DøwögAªa
[2] = (
cmd_w‹d
 & 0x3FF) + 1;

198 
gpu_u«i
.
DøwögAªa
[3] = ((
cmd_w‹d
 >> 10) & 0x3FF) + 1;

203 
gpu_u«i
.
DøwögOff£t
[0] = ((
s32
)
cmd_w‹d
<<(32-11))>>(32-11);

204 
gpu_u«i
.
DøwögOff£t
[1] = ((
s32
)
cmd_w‹d
<<(32-22))>>(32-11);

209 
gpu_u«i
.
Maskög
 = (
cmd_w‹d
 & 0x2) << 1;

210 
gpu_u«i
.
PixñMSB
 = (
cmd_w‹d
 & 0x1) << 8;

213 
	}
}

215 c⁄° 
cmd_Àngths
[256];

217 
	$do_cmd_li°
(*
li°
, 
li°_Àn
, *
œ°_cmd
)

219 
cmd
 = 0, 
Àn
, 
i
;

220 *
li°_°¨t
 = 
li°
;

221 *
li°_íd
 = 
li°
 + 
li°_Àn
;

225 
gpu_u«i
.
ûa˚_mask
 = gpu_u«i.
c⁄fig
.
ûa˚_f‹˚
;

227 #ifde‡
HAVE_PRE_ARMV7


228 
gpu_u«i
.
ûa˚_mask
 |
gpu
.
°©us
.
öãæa˚
;

231 ; 
li°
 < 
li°_íd
;Üi° +1 + 
Àn
)

233 
cmd
 = *
li°
 >> 24;

234 
Àn
 = 
cmd_Àngths
[
cmd
];

235 i‡(
li°
 + 1 + 
Àn
 > 
li°_íd
) {

236 
cmd
 = -1;

240 
	#PRIM
 
cmd


	)

241 
gpu_u«i
.
PackëBuf„r
.
U4
[0] = 
li°
[0];

242 
i
 = 1; i <
Àn
; i++)

243 
gpu_u«i
.
PackëBuf„r
.
U4
[
i
] = 
li°
[i];

245 
PåUni⁄
 
∑ckë
 = { .
±r
 = (*)&
gpu_u«i
.
PackëBuf„r
 };

247 
cmd
)

250 
	`gpuCÀ¨Image
(
∑ckë
);

257 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[

258 (
gpu_u«i
.
blô_mask
?1024:0) |

259 
BÀndög_Mode
 |

260 
gpu_u«i
.
Maskög
 | 
BÀndög
 | gpu_u«i.
PixñMSB


262 
	`gpuDøwPﬁyF
(
∑ckë
, 
drivî
, 
Ál£
);

269 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

270 
	`gpuSëTextuª
(
gpu_u«i
.
PackëBuf„r
.
U4
[4] >> 16);

272 
u32
 
drivî_idx
 =

273 (
gpu_u«i
.
blô_mask
?1024:0) |

274 
Dôhîög
 |

275 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 |

276 
gpu_u«i
.
Maskög
 | 
BÀndög
 | gpu_u«i.
PixñMSB
;

278 i‡(!
	`Fa°LightögE«bÀd
()) {

279 
drivî_idx
 |
Lightög
;

281 i‡(!((
gpu_u«i
.
PackëBuf„r
.
U1
[0]>0x5F) && (gpu_unai.PacketBuffer.U1[1]>0x5F) && (gpu_unai.PacketBuffer.U1[2]>0x5F)))

282 
drivî_idx
 |
Lightög
;

285 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[
drivî_idx
];

286 
	`gpuDøwPﬁyFT
(
∑ckë
, 
drivî
, 
Ál£
);

293 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[

294 (
gpu_u«i
.
blô_mask
?1024:0) |

295 
BÀndög_Mode
 |

296 
gpu_u«i
.
Maskög
 | 
BÀndög
 | gpu_u«i.
PixñMSB


298 
	`gpuDøwPﬁyF
(
∑ckë
, 
drivî
, 
åue
);

305 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

306 
	`gpuSëTextuª
(
gpu_u«i
.
PackëBuf„r
.
U4
[4] >> 16);

308 
u32
 
drivî_idx
 =

309 (
gpu_u«i
.
blô_mask
?1024:0) |

310 
Dôhîög
 |

311 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 |

312 
gpu_u«i
.
Maskög
 | 
BÀndög
 | gpu_u«i.
PixñMSB
;

314 i‡(!
	`Fa°LightögE«bÀd
()) {

315 
drivî_idx
 |
Lightög
;

317 i‡(!((
gpu_u«i
.
PackëBuf„r
.
U1
[0]>0x5F) && (gpu_unai.PacketBuffer.U1[1]>0x5F) && (gpu_unai.PacketBuffer.U1[2]>0x5F)))

318 
drivî_idx
 |
Lightög
;

321 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[
drivî_idx
];

322 
	`gpuDøwPﬁyFT
(
∑ckë
, 
drivî
, 
åue
);

333 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[

334 (
gpu_u«i
.
blô_mask
?1024:0) |

335 
Dôhîög
 |

336 
BÀndög_Mode
 |

337 
gpu_u«i
.
Maskög
 | 
BÀndög
 | 129 | gpu_u«i.
PixñMSB


339 
	`gpuDøwPﬁyG
(
∑ckë
, 
drivî
, 
Ál£
);

346 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

347 
	`gpuSëTextuª
 (
gpu_u«i
.
PackëBuf„r
.
U4
[5] >> 16);

348 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[

349 (
gpu_u«i
.
blô_mask
?1024:0) |

350 
Dôhîög
 |

351 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 |

352 
gpu_u«i
.
Maskög
 | 
BÀndög
 | ((
Lightög
)?129:0Ë| gpu_u«i.
PixñMSB


354 
	`gpuDøwPﬁyGT
(
∑ckë
, 
drivî
, 
Ál£
);

362 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[

363 (
gpu_u«i
.
blô_mask
?1024:0) |

364 
Dôhîög
 |

365 
BÀndög_Mode
 |

366 
gpu_u«i
.
Maskög
 | 
BÀndög
 | 129 | gpu_u«i.
PixñMSB


368 
	`gpuDøwPﬁyG
(
∑ckë
, 
drivî
, 
åue
);

375 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

376 
	`gpuSëTextuª
 (
gpu_u«i
.
PackëBuf„r
.
U4
[5] >> 16);

377 
PP
 
drivî
 = 
gpuPﬁyS∑nDrivîs
[

378 (
gpu_u«i
.
blô_mask
?1024:0) |

379 
Dôhîög
 |

380 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 |

381 
gpu_u«i
.
Maskög
 | 
BÀndög
 | ((
Lightög
)?129:0Ë| gpu_u«i.
PixñMSB


383 
	`gpuDøwPﬁyGT
(
∑ckë
, 
drivî
, 
åue
);

391 
u32
 
drivî_idx
 = (
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1;

392 
PSD
 
drivî
 = 
gpuPixñS∑nDrivîs
[
drivî_idx
];

393 
	`gpuDøwLöeF
(
∑ckë
, 
drivî
);

397 
u32
 
num_vîãxes
 = 1;

398 
u32
 *
li°_posôi⁄
 = &(
li°
[2]);

401 
u32
 
drivî_idx
 = (
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1;

402 
PSD
 
drivî
 = 
gpuPixñS∑nDrivîs
[
drivî_idx
];

403 
	`gpuDøwLöeF
(
∑ckë
, 
drivî
);

407 
gpu_u«i
.
PackëBuf„r
.
U4
[1] = gpu_unai.PacketBuffer.U4[2];

408 
gpu_u«i
.
PackëBuf„r
.
U4
[2] = *
li°_posôi⁄
++;

409 
	`gpuDøwLöeF
(
∑ckë
, 
drivî
);

411 
num_vîãxes
++;

412 if(
li°_posôi⁄
 >
li°_íd
) {

413 
cmd
 = -1;

414 
bªaklo›
;

416 if((*
li°_posôi⁄
 & 0xf000f000) == 0x50005000)

420 
Àn
 +(
num_vîãxes
 - 2);

428 
u32
 
drivî_idx
 = (
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1;

430 
drivî_idx
 |= (1 << 5);

431 
PSD
 
drivî
 = 
gpuPixñS∑nDrivîs
[
drivî_idx
];

432 
	`gpuDøwLöeG
(
∑ckë
, 
drivî
);

436 
u32
 
num_vîãxes
 = 1;

437 
u32
 *
li°_posôi⁄
 = &(
li°
[2]);

440 
u32
 
drivî_idx
 = (
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1;

442 
drivî_idx
 |= (1 << 5);

443 
PSD
 
drivî
 = 
gpuPixñS∑nDrivîs
[
drivî_idx
];

444 
	`gpuDøwLöeG
(
∑ckë
, 
drivî
);

448 
gpu_u«i
.
PackëBuf„r
.
U4
[0] = gpu_unai.PacketBuffer.U4[2];

449 
gpu_u«i
.
PackëBuf„r
.
U4
[1] = gpu_unai.PacketBuffer.U4[3];

450 
gpu_u«i
.
PackëBuf„r
.
U4
[2] = *
li°_posôi⁄
++;

451 
gpu_u«i
.
PackëBuf„r
.
U4
[3] = *
li°_posôi⁄
++;

452 
	`gpuDøwLöeG
(
∑ckë
, 
drivî
);

454 
num_vîãxes
++;

455 if(
li°_posôi⁄
 >
li°_íd
) {

456 
cmd
 = -1;

457 
bªaklo›
;

459 if((*
li°_posôi⁄
 & 0xf000f000) == 0x50005000)

463 
Àn
 +(
num_vîãxes
 - 2) * 2;

470 
PT
 
drivî
 = 
gpuTûeS∑nDrivîs
[(
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1];

471 
	`gpuDøwT
(
∑ckë
, 
drivî
);

478 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

479 
u32
 
drivî_idx
 = 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 | gpu_u«i.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>1);

495 i‡((
gpu_u«i
.
PackëBuf„r
.
U4
[0] & 0xF8F8F8) != 0x808080)

496 
drivî_idx
 |
Lightög
;

497 
PS
 
drivî
 = 
gpuS¥ôeS∑nDrivîs
[
drivî_idx
];

498 
	`gpuDøwS
(
∑ckë
, 
drivî
);

505 
gpu_u«i
.
PackëBuf„r
.
U4
[2] = 0x00010001;

506 
PT
 
drivî
 = 
gpuTûeS∑nDrivîs
[(
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1];

507 
	`gpuDøwT
(
∑ckë
, 
drivî
);

514 
gpu_u«i
.
PackëBuf„r
.
U4
[2] = 0x00080008;

515 
PT
 
drivî
 = 
gpuTûeS∑nDrivîs
[(
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1];

516 
	`gpuDøwT
(
∑ckë
, 
drivî
);

523 
gpu_u«i
.
PackëBuf„r
.
U4
[3] = 0x00080008;

524 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

525 
u32
 
drivî_idx
 = 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 | gpu_u«i.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>1);

530 i‡((
gpu_u«i
.
PackëBuf„r
.
U4
[0] & 0xF8F8F8) != 0x808080)

531 
drivî_idx
 |
Lightög
;

532 
PS
 
drivî
 = 
gpuS¥ôeS∑nDrivîs
[
drivî_idx
];

533 
	`gpuDøwS
(
∑ckë
, 
drivî
);

540 
gpu_u«i
.
PackëBuf„r
.
U4
[2] = 0x00100010;

541 
PT
 
drivî
 = 
gpuTûeS∑nDrivîs
[(
BÀndög_Mode
 | 
gpu_u«i
.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>3)) >> 1];

542 
	`gpuDøwT
(
∑ckë
, 
drivî
);

547 #ifde‡
__¨m__


548 i‡((
gpu_u«i
.
GPU_GP1
 & 0x180Ë=0 && (gpu_u«i.
Maskög
 | gpu_u«i.
PixñMSB
) == 0)

550 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

551 
	`gpuDøwS16
(
∑ckë
);

558 
gpu_u«i
.
PackëBuf„r
.
U4
[3] = 0x00100010;

559 
	`gpuSëCLUT
 (
gpu_u«i
.
PackëBuf„r
.
U4
[2] >> 16);

560 
u32
 
drivî_idx
 = 
BÀndög_Mode
 | 
gpu_u«i
.
TEXT_MODE
 | gpu_u«i.
Maskög
 | 
BÀndög
 | (gpu_u«i.
PixñMSB
>>1);

564 i‡((
gpu_u«i
.
PackëBuf„r
.
U4
[0] & 0xF8F8F8) != 0x808080)

565 
drivî_idx
 |
Lightög
;

566 
PS
 
drivî
 = 
gpuS¥ôeS∑nDrivîs
[
drivî_idx
];

567 
	`gpuDøwS
(
∑ckë
, 
drivî
);

571 
	`gpuMoveImage
(
∑ckë
);

574 #ifde‡
TEST


577 
u32
 
lﬂd_width
 = 
li°
[2] & 0xffff;

578 
u32
 
lﬂd_height
 = 
li°
[2] >> 16;

579 
u32
 
lﬂd_size
 = 
lﬂd_width
 * 
lﬂd_height
;

581 
Àn
 +
lﬂd_size
 / 2;

590 
bªaklo›
;

593 
	`gpuGP0Cmd_0xEx
(
gpu_u«i
, gpu_u«i.
PackëBuf„r
.
U4
[0]);

598 
bªaklo›
:

599 
gpu
.
ex_ªgs
[1] &= ~0x1ff;

600 
gpu
.
ex_ªgs
[1] |
gpu_u«i
.
GPU_GP1
 & 0x1ff;

602 *
œ°_cmd
 = 
cmd
;

603  
li°
 - 
li°_°¨t
;

604 
	}
}

606 
	$ªndîî_sync_ecmds
(
uöt32_t
 *
ecmds
)

608 
dummy
;

609 
	`do_cmd_li°
(&
ecmds
[1], 6, &
dummy
);

610 
	}
}

612 
	$ªndîî_upd©e_ˇches
(
x
, 
y
, 
w
, 
h
)

614 
	}
}

616 
	$ªndîî_Êush_queues
()

618 
	}
}

620 
	$ªndîî_£t_öãæa˚
(
íabÀ
, 
is_odd
)

622 
	}
}

625 
	$ªndîî_£t_c⁄fig
(c⁄° 
gpulib_c⁄fig_t
 *
c⁄fig
)

627 
gpu_u«i
.
vøm
 = (
u16
*)
gpu
.vram;

628 
	}
}

	@src/gpu/gpulib/gpu.cpp

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~"∂ugös.h
"

15 
	~"gpu.h
"

16 
	~"∂ugö_lib.h
"

18 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

19 #ifde‡
__GNUC__


20 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x), 0)

	)

21 
	#¥ñﬂd
 
__buûtö_¥e„tch


	)

22 
	#noölöe
 
	`__©åibuã__
((
noölöe
))

	)

24 
	#u∆ikñy
(
x
)

	)

25 
	#¥ñﬂd
(...)

	)

26 
	#noölöe


	)

29 
	#gpu_log
(
fmt
, ...) \

30 
	`¥ötf
("%d:%03d: " 
fmt
, *
gpu
.
°©e
.
‰ame_cou¡
, *gpu.°©e.
h˙t
, ##
__VA_ARGS__
)

	)

33 
	#log_io
(...)

	)

35 
	#log_™omÆy
(...)

	)

37 
psx_gpu
 
	ggpu
;

38 
gpulib_c⁄fig_t
 
	ggpulib_c⁄fig
;

40 
noölöe
 
do_cmd_buf„r
(
uöt32_t
 *
d©a
, 
cou¡
);

41 
föish_vøm_å™s„r
(
is_ªad
);

43 
noölöe
 
	$do_cmd_ª£t
()

45 i‡(
	`u∆ikñy
(
gpu
.
cmd_Àn
 > 0))

46 
	`do_cmd_buf„r
(
gpu
.
cmd_buf„r
, gpu.
cmd_Àn
);

47 
gpu
.
cmd_Àn
 = 0;

49 i‡(
	`u∆ikñy
(
gpu
.
dma
.
h
 > 0))

50 
	`föish_vøm_å™s„r
(
gpu
.
dma_°¨t
.
is_ªad
);

51 
gpu
.
dma
.
h
 = 0;

52 
	}
}

54 
noölöe
 
	$do_ª£t
()

56 
i
;

58 
	`do_cmd_ª£t
();

60 
	`mem£t
(
gpu
.
ªgs
, 0, (gpu.regs));

61 
i
 = 0; i < (
gpu
.
ex_ªgs
) / (gpu.ex_regs[0]); i++)

62 
gpu
.
ex_ªgs
[
i
] = (0xe0 + i) << 24;

63 
gpu
.
°©us
.
ªg
 = 0x14802000;

64 
gpu
.
gp0
 = 0;

65 
gpu
.
ªgs
[3] = 1;

66 
gpu
.
s¸ìn
.
hªs
 = gpu.s¸ìn.
w
 = 256;

67 
gpu
.
s¸ìn
.
vªs
 = gpu.s¸ìn.
h
 = 240;

68 
	}
}

70 
noölöe
 
	$upd©e_width
()

72 
ﬁd_width
 = 
gpu
.
s¸ìn
.
w
;

74 
sw
 = 
gpu
.
s¸ìn
.
x2
 - gpu.s¸ìn.
x1
;

75 i‡(
sw
 <= 0 || sw >= 2560)

77 
gpu
.
s¸ìn
.
w
 = gpu.s¸ìn.
hªs
;

79 
gpu
.
s¸ìn
.
w
 = 
sw
 * gpu.s¸ìn.
hªs
 / 2560;

81 i‡(
gpu
.
s¸ìn
.
w
 < 
ﬁd_width
) {

83 
	`∂_˛ór_b‹dîs
();

85 
	}
}

87 
noölöe
 
	$upd©e_height
()

90 
ﬁd_height
 = 
gpu
.
s¸ìn
.
h
;

91 
sh
 = 
gpu
.
s¸ìn
.
y2
 - gpu.s¸ìn.
y1
;

92 i‡(
gpu
.
°©us
.
dheight
)

93 
sh
 *= 2;

94 i‡(
sh
 <0 || sh > 
gpu
.
s¸ìn
.
vªs
)

95 
sh
 = 
gpu
.
s¸ìn
.
vªs
;

97 
gpu
.
s¸ìn
.
h
 = 
sh
;

99 i‡(
gpu
.
s¸ìn
.
h
 < 
ﬁd_height
) {

101 
	`∂_˛ór_b‹dîs
();

103 
	}
}

105 
noölöe
 
	$decide_‰ameskù
()

107 i‡(
gpu
.
‰ameskù
.
a˘ive
)

108 
gpu
.
‰ameskù
.
˙t
++;

110 
gpu
.
‰ameskù
.
˙t
 = 0;

111 
gpu
.
‰ameskù
.
‰ame_ªady
 = 1;

114 i‡(!
gpu
.
‰ameskù
.
a˘ive
 && 
	`∂_‰ameskù_advi˚
())

115 
gpu
.
‰ameskù
.
a˘ive
 = 1;

116 i‡(
gpu
.
‰ameskù
.
£t
 > 0 && gpu.‰ameskù.
˙t
 < gpu.frameskip.set)

117 
gpu
.
‰ameskù
.
a˘ive
 = 1;

119 
gpu
.
‰ameskù
.
a˘ive
 = 0;

121 i‡(!
gpu
.
‰ameskù
.
a˘ive
 && gpu.‰ameskù.
≥ndög_fûl
[0] != 0) {

122 
dummy
;

123 
	`do_cmd_li°
(
gpu
.
‰ameskù
.
≥ndög_fûl
, 3, &
dummy
);

124 
gpu
.
‰ameskù
.
≥ndög_fûl
[0] = 0;

126 
	}
}

128 
noölöe
 
	$decide_‰ameskù_Ælow
(
uöt32_t
 
cmd_e3
)

132 
uöt32_t
 
x
 = 
cmd_e3
 & 0x3ff;

133 
uöt32_t
 
y
 = (
cmd_e3
 >> 10) & 0x3ff;

134 
gpu
.
‰ameskù
.
Ælow
 = gpu.
°©us
.
öãæa˚
 ||

135 (
uöt32_t
)(
x
 - 
gpu
.
s¸ìn
.xË>(uöt32_t)gpu.s¸ìn.
w
 ||

136 (
uöt32_t
)(
y
 - 
gpu
.
s¸ìn
.yË>(uöt32_t)gpu.s¸ìn.
h
;

137  
gpu
.
‰ameskù
.
Ælow
;

138 
	}
}

140 
noölöe
 
	$gë_gpu_öfo
(
uöt32_t
 
d©a
)

142 
d©a
 & 0x0f) {

146 
gpu
.
gp0
 = gpu.
ex_ªgs
[
d©a
 & 7] & 0xfffff;

150 
gpu
.
gp0
 = gpu.
ex_ªgs
[5] & 0x3fffff;

153 
gpu
.
gp0
 = 2;

156 
gpu
.
gp0
 = 0;

159 
	}
}

162 
	#VRAM_SIZE
 ((1024 * 512 * 2 * 2Ë+ 4096)

	)

166 #ifde‡
GCW_ZERO


169 
	#VRAM_ALIGN
 8192

	)

171 
	#VRAM_ALIGN
 16

	)

175 
uöt16_t
 *
	gvøm_±r_‹ig
 = 
NULL
;

177 #ifde‡
GPULIB_USE_MMAP


178 
	$m≠_vøm
()

180 
gpu
.
vøm
 = 
vøm_±r_‹ig
 = gpu.
	`mm≠
(
VRAM_SIZE
 + (
VRAM_ALIGN
-1));

181 i‡(
gpu
.
vøm
 !
NULL
) {

183 
gpu
.
vøm
 += (4096 / 2);

185 
gpu
.
vøm
 = (
uöt16_t
*)(((
uöçå_t
)gpu.vøm + (
VRAM_ALIGN
-1)) & ~(VRAM_ALIGN-1));

189 
	`Ârötf
(
°dîr
, "couldÇot map vram,Éxpect crashes\n");

192 
	}
}

194 
	$Æloˇã_vøm
()

196 
gpu
.
vøm
 = 
vøm_±r_‹ig
 = (
uöt16_t
*)
	`ˇŒoc
(
VRAM_SIZE
 + (
VRAM_ALIGN
-1), 1);

197 i‡(
gpu
.
vøm
 !
NULL
) {

199 
gpu
.
vøm
 += (4096 / 2);

201 
gpu
.
vøm
 = (
uöt16_t
*)(((
uöçå_t
)gpu.vøm + (
VRAM_ALIGN
-1)) & ~(VRAM_ALIGN-1));

204 
	`Ârötf
(
°dîr
, "couldÇotállocate vram,Éxpect crashes\n");

207 
	}
}

210 
	$GPU_öô
()

212 #i‚de‡
GPULIB_USE_MMAP


213 i‡(
gpu
.
vøm
 =
NULL
) {

214 i‡(
	`Æloˇã_vøm
() != 0) {

215 
	`¥ötf
("ERROR: couldÇotállocate VRAM,Éxiting..\n");

216 
	`exô
(1);

221 
uöt32_t
 
hSyncCou¡
;

222 
uöt32_t
 
‰ame_cou¡î
;

223 
gpu
.
°©e
.
h˙t
 = &
hSyncCou¡
;

224 
gpu
.
°©e
.
‰ame_cou¡
 = &
‰ame_cou¡î
;

226 
	`gpulib_‰ameskù_¥ï¨e
(
C⁄fig
.
FømeSkù
);

228 
ªt
;

229 
ªt
 = 
	`vout_öô
();

230 
ªt
 |
	`ªndîî_öô
();

232 
gpu
.
‰ameskù
.
a˘ive
 = 0;

233 
gpu
.
cmd_Àn
 = 0;

234 
	`do_ª£t
();

236  
ªt
;

237 
	}
}

239 
	$GPU_shutdown
()

241 
	`ªndîî_föish
();

242 
ªt
 = 
	`vout_föish
();

244 i‡(
vøm_±r_‹ig
 !
NULL
) {

245 #ifde‡
GPULIB_USE_MMAP


246 
gpu
.
	`munm≠
(
vøm_±r_‹ig
, 
VRAM_SIZE
);

248 
	`‰ì
(
vøm_±r_‹ig
);

251 
vøm_±r_‹ig
 = 
gpu
.
vøm
 = 
NULL
;

253  
ªt
;

254 
	}
}

256 
	$GPU_wrôeSètus
(
uöt32_t
 
d©a
)

261 c⁄° 
hªs
[8] = { 256, 368, 320, 384, 512, 512, 640, 640 };

262 c⁄° 
vªs
[4] = { 240, 480, 256, 480 };

263 
uöt32_t
 
cmd
 = 
d©a
 >> 24;

265 i‡(
cmd
 < 
	`ARRAY_SIZE
(
gpu
.
ªgs
)) {

266 i‡(
cmd
 > 1 && cmd !5 && 
gpu
.
ªgs
[cmd] =
d©a
)

268 
gpu
.
ªgs
[
cmd
] = 
d©a
;

271 
gpu
.
°©e
.
fb_dúty
 = 1;

273 
cmd
) {

275 
	`do_ª£t
();

278 
	`do_cmd_ª£t
();

281 
gpu
.
°©us
.
bœnkög
 = 
d©a
 & 1;

284 
gpu
.
°©us
.
dma
 = 
d©a
 & 3;

287 
gpu
.
s¸ìn
.
x
 = 
d©a
 & 0x3ff;

288 
gpu
.
s¸ìn
.
y
 = (
d©a
 >> 10) & 0x1ff;

289 i‡(
gpu
.
‰ameskù
.
£t
) {

290 
	`decide_‰ameskù_Ælow
(
gpu
.
ex_ªgs
[3]);

291 i‡(
gpu
.
‰ameskù
.
œ°_Êù_‰ame
 !*gpu.
°©e
.
‰ame_cou¡
) {

292 
	`decide_‰ameskù
();

293 
gpu
.
‰ameskù
.
œ°_Êù_‰ame
 = *gpu.
°©e
.
‰ame_cou¡
;

298 
gpu
.
s¸ìn
.
x1
 = 
d©a
 & 0xfff;

299 
gpu
.
s¸ìn
.
x2
 = (
d©a
 >> 12) & 0xfff;

300 
	`upd©e_width
();

303 
gpu
.
s¸ìn
.
y1
 = 
d©a
 & 0x3ff;

304 
gpu
.
s¸ìn
.
y2
 = (
d©a
 >> 10) & 0x3ff;

305 
	`upd©e_height
();

308 
gpu
.
°©us
.
ªg
 = (gpu.°©us.ªg & ~0x7f0000Ë| ((
d©a
 & 0x3F) << 17) | ((data & 0x40) << 10);

310 
gpu
.
s¸ìn
.
hªs
 = hªs[(gpu.
°©us
.
ªg
 >> 16) & 7];

311 
gpu
.
s¸ìn
.
vªs
 = vªs[(gpu.
°©us
.
ªg
 >> 19) & 3];

312 
	`upd©e_width
();

313 
	`upd©e_height
();

314 
	`ªndîî_nŸify_ªs_ch™ge
();

317 i‡((
cmd
 & 0xf0) == 0x10)

318 
	`gë_gpu_öfo
(
d©a
);

322 #ifde‡
GPUwrôeSètus_ext


323 
	`GPUwrôeSètus_ext
(
d©a
);

325 
	}
}

327 c⁄° 
	gcmd_Àngths
[256] =

347 
	#VRAM_MEM_XY
(
x
, 
y
Ë&
gpu
.
vøm
[(yË* 1024 + (x)]

	)

349 
ölöe
 
	$do_vøm_löe
(
x
, 
y
, 
uöt16_t
 *
mem
, 
l
, 
is_ªad
)

351 
uöt16_t
 *
vøm
 = 
	`VRAM_MEM_XY
(
x
, 
y
);

352 if(
is_ªad
){

353 
	`mem˝y
(
mem
, 
vøm
, 
l
 * 2);

357 
	`vout_upd©e_löe
(
x
, 
y
, 
mem
);

359 
	}
}

361 
	$do_vøm_io
(
uöt32_t
 *
d©a
, 
cou¡
, 
is_ªad
)

363 
cou¡_öôül
 = 
cou¡
;

364 
uöt16_t
 *
sd©a
 = (uöt16_à*)
d©a
;

365 
x
 = 
gpu
.
dma
.x, 
y
 = gpu.dma.y;

366 
w
 = 
gpu
.
dma
.w, 
h
 = gpu.dma.h;

367 
o
 = 
gpu
.
dma
.
off£t
;

368 
l
;

369 
cou¡
 *= 2;

371 i‡(
gpu
.
dma
.
off£t
) {

372 
l
 = 
w
 - 
gpu
.
dma
.
off£t
;

373 i‡(
cou¡
 < 
l
)

374 
l
 = 
cou¡
;

376 
	`do_vøm_löe
(
x
 + 
o
, 
y
, 
sd©a
, 
l
, 
is_ªad
);

378 i‡(
o
 + 
l
 < 
w
)

379 
o
 +
l
;

381 
o
 = 0;

382 
y
++;

383 
h
--;

385 
sd©a
 +
l
;

386 
cou¡
 -
l
;

389 ; 
h
 > 0 && 
cou¡
 >
w
; 
sd©a
 +w, cou¡ -w, 
y
++, h--) {

390 
y
 &= 511;

391 
	`do_vøm_löe
(
x
, 
y
, 
sd©a
, 
w
, 
is_ªad
);

394 i‡(
h
 > 0) {

395 i‡(
cou¡
 > 0) {

396 
y
 &= 511;

397 
	`do_vøm_löe
(
x
, 
y
, 
sd©a
, 
cou¡
, 
is_ªad
);

398 
o
 = 
cou¡
;

399 
cou¡
 = 0;

403 
	`föish_vøm_å™s„r
(
is_ªad
);

404 
gpu
.
dma
.
y
 = y;

405 
gpu
.
dma
.
h
 = h;

406 
gpu
.
dma
.
off£t
 = 
o
;

408  
cou¡_öôül
 - 
cou¡
 / 2;

409 
	}
}

411 
	$°¨t_vøm_å™s„r
(
uöt32_t
 
pos_w‹d
, uöt32_à
size_w‹d
, 
is_ªad
)

413 i‡(
gpu
.
dma
.
h
)

414 
	`log_™omÆy
("start_vram_transfer while old unfinished\n");

416 
gpu
.
dma
.
x
 = 
pos_w‹d
 & 0x3ff;

417 
gpu
.
dma
.
y
 = (
pos_w‹d
 >> 16) & 0x1ff;

418 
gpu
.
dma
.
w
 = ((
size_w‹d
 - 1) & 0x3ff) + 1;

419 
gpu
.
dma
.
h
 = (((
size_w‹d
 >> 16) - 1) & 0x1ff) + 1;

420 
gpu
.
dma
.
off£t
 = 0;

421 
gpu
.
dma
.
is_ªad
 = is_read;

422 
gpu
.
dma_°¨t
 = gpu.
dma
;

424 
	`ªndîî_Êush_queues
();

425 i‡(
is_ªad
) {

426 
gpu
.
°©us
.
img
 = 1;

428 
	`mem˝y
(&
gpu
.
gp0
, 
	`VRAM_MEM_XY
(gpu.
dma
.
x
, gpu.dma.
y
), 4);

429 
gpu
.
°©e
.
œ°_vøm_ªad_‰ame
 = *gpu.°©e.
‰ame_cou¡
;

432 
	`log_io
("°¨t_vøm_å™s„∏%¯(%d, %dË%dx%d\n", 
is_ªad
 ? 'r' : 'w',

433 
gpu
.
dma
.
x
, gpu.dma.
y
, gpu.dma.
w
, gpu.dma.
h
);

434 
	}
}

436 
	$föish_vøm_å™s„r
(
is_ªad
)

438 i‡(
is_ªad
)

439 
gpu
.
°©us
.
img
 = 0;

441 
	`ªndîî_upd©e_ˇches
(
gpu
.
dma_°¨t
.
x
, gpu.dma_°¨t.
y
,

442 
gpu
.
dma_°¨t
.
w
, gpu.dma_°¨t.
h
);

443 
	}
}

445 
noölöe
 
	$do_cmd_li°_skù
(
uöt32_t
 *
d©a
, 
cou¡
, *
œ°_cmd
)

447 
cmd
 = 0, 
pos
 = 0, 
Àn
, 
dummy
, 
v
;

448 
skù
 = 1;

450 
gpu
.
‰ameskù
.
≥ndög_fûl
[0] = 0;

452 
pos
 < 
cou¡
 && 
skù
) {

453 
uöt32_t
 *
li°
 = 
d©a
 + 
pos
;

454 
cmd
 = 
li°
[0] >> 24;

455 
Àn
 = 1 + 
cmd_Àngths
[
cmd
];

457 
cmd
) {

459 i‡(()(
li°
[2] & 0x3ffË> 
gpu
.
s¸ìn
.
w
 || ()(÷i°[2] >> 16Ë& 0x1ffË> gpu.s¸ìn.
h
)

461 
	`do_cmd_li°
(
li°
, 3, &
dummy
);

463 
	`mem˝y
(
gpu
.
‰ameskù
.
≥ndög_fûl
, 
li°
, 3 * 4);

469 
gpu
.
ex_ªgs
[1] &= ~0x1ff;

470 
gpu
.
ex_ªgs
[1] |
li°
[4 + ((
cmd
 >> 4) & 1)] & 0x1ff;

473 
v
 = 3; 
pos
 + v < 
cou¡
; v++)

475 i‡((
li°
[
v
] & 0xf000f000) == 0x50005000)

478 
Àn
 +
v
 - 3;

481 
v
 = 4; 
pos
 + v < 
cou¡
; v += 2)

483 i‡((
li°
[
v
] & 0xf000f000) == 0x50005000)

486 
Àn
 +
v
 - 4;

489 i‡(
cmd
 == 0xe3)

490 
skù
 = 
	`decide_‰ameskù_Ælow
(
li°
[0]);

491 i‡((
cmd
 & 0xf8) == 0xe0)

492 
gpu
.
ex_ªgs
[
cmd
 & 7] = 
li°
[0];

496 i‡(
pos
 + 
Àn
 > 
cou¡
) {

497 
cmd
 = -1;

500 i‡(0xa0 <
cmd
 && cmd <= 0xdf)

503 
pos
 +
Àn
;

506 
	`ªndîî_sync_ecmds
(
gpu
.
ex_ªgs
);

507 *
œ°_cmd
 = 
cmd
;

508  
pos
;

509 
	}
}

511 
noölöe
 
	$do_cmd_buf„r
(
uöt32_t
 *
d©a
, 
cou¡
)

513 
cmd
, 
pos
;

514 
uöt32_t
 
ﬁd_e3
 = 
gpu
.
ex_ªgs
[3];

515 
vøm_dúty
 = 0;

518 
pos
 = 0;Öo†< 
cou¡
; )

520 i‡(
gpu
.
dma
.
h
 && !gpu.
dma_°¨t
.
is_ªad
) {

521 
vøm_dúty
 = 1;

522 
pos
 +
	`do_vøm_io
(
d©a
 +Öos, 
cou¡
 -Öos, 0);

523 i‡(
pos
 =
cou¡
)

527 
cmd
 = 
d©a
[
pos
] >> 24;

528 i‡(0xa0 <
cmd
 && cmd <= 0xdf) {

530 
	`°¨t_vøm_å™s„r
(
d©a
[
pos
 + 1], d©a[po†+ 2], (
cmd
 & 0xe0) == 0xc0);

531 
pos
 += 3;

536 i‡(
gpu
.
‰ameskù
.
a˘ive
 && (gpu.‰ameskù.
Ælow
 || ((
d©a
[
pos
] >> 24) & 0xf0) == 0xe0))

537 
pos
 +
	`do_cmd_li°_skù
(
d©a
 +Öos, 
cou¡
 -Öos, &
cmd
);

539 
pos
 +
	`do_cmd_li°
(
d©a
 +Öos, 
cou¡
 -Öos, &
cmd
);

540 
vøm_dúty
 = 1;

543 i‡(
cmd
 == -1)

548 
gpu
.
°©us
.
ªg
 &= ~0x1fff;

549 
gpu
.
°©us
.
ªg
 |gpu.
ex_ªgs
[1] & 0x7ff;

550 
gpu
.
°©us
.
ªg
 |(gpu.
ex_ªgs
[6] & 3) << 11;

552 
gpu
.
°©e
.
fb_dúty
 |
vøm_dúty
;

554 i‡(
ﬁd_e3
 !
gpu
.
ex_ªgs
[3])

555 
	`decide_‰ameskù_Ælow
(
gpu
.
ex_ªgs
[3]);

557  
cou¡
 - 
pos
;

558 
	}
}

560 
	$Êush_cmd_buf„r
()

562 
À·
 = 
	`do_cmd_buf„r
(
gpu
.
cmd_buf„r
, gpu.
cmd_Àn
);

563 i‡(
À·
 > 0)

564 
	`memmove
(
gpu
.
cmd_buf„r
, gpu.cmd_buf„∏+ gpu.
cmd_Àn
 - 
À·
,Üeft * 4);

565 
gpu
.
cmd_Àn
 = 
À·
;

566 
	}
}

568 
	$GPU_wrôeD©aMem
(
uöt32_t
 *
mem
, 
cou¡
)

570 
À·
;

572 
	`log_io
("gpu_dma_wrôê%∞%d\n", 
mem
, 
cou¡
);

574 i‡(
	`u∆ikñy
(
gpu
.
cmd_Àn
 > 0))

575 
	`Êush_cmd_buf„r
();

577 
À·
 = 
	`do_cmd_buf„r
(
mem
, 
cou¡
);

578 i‡(
À·
)

579 
	`log_™omÆy
("GPUwrôeD©aMem: disˇrded %d/%d w‹ds\n", 
À·
, 
cou¡
);

580 
	}
}

582 
	$GPU_wrôeD©a
(
uöt32_t
 
d©a
)

584 
	`log_io
("gpu_wrôê%08x\n", 
d©a
);

585 
gpu
.
cmd_buf„r
[gpu.
cmd_Àn
++] = 
d©a
;

586 i‡(
gpu
.
cmd_Àn
 >
CMD_BUFFER_LEN
)

587 
	`Êush_cmd_buf„r
();

588 
	}
}

590 
	$GPU_dmaChaö
(
uöt32_t
 *
ømba£
, uöt32_à
°¨t_addr
)

592 
uöt32_t
 
addr
, *
li°
, 
ld_addr
 = 0;

593 
Àn
, 
À·
, 
cou¡
;

594 
˝u_cy˛es
 = 0;

596 
	`¥ñﬂd
(
ømba£
 + (
°¨t_addr
 & 0x1fffff) / 4);

598 i‡(
	`u∆ikñy
(
gpu
.
cmd_Àn
 > 0))

599 
	`Êush_cmd_buf„r
();

601 
	`log_io
("gpu_dma_chain\n");

602 
addr
 = 
°¨t_addr
 & 0xffffff;

603 
cou¡
 = 0; (
addr
 & 0x800000) == 0; count++)

605 
li°
 = 
ømba£
 + (
addr
 & 0x1fffff) / 4;

606 
Àn
 = 
li°
[0] >> 24;

607 
addr
 = 
li°
[0] & 0xffffff;

608 
	`¥ñﬂd
(
ømba£
 + (
addr
 & 0x1fffff) / 4);

610 
˝u_cy˛es
 += 10;

611 i‡(
Àn
 > 0)

612 
˝u_cy˛es
 +5 + 
Àn
;

614 
	`log_io
(".chaö %08x #%d\n", (
li°
 - 
ømba£
Ë* 4, 
Àn
);

616 i‡(
Àn
) {

617 
À·
 = 
	`do_cmd_buf„r
(
li°
 + 1, 
Àn
);

618 i‡(
À·
)

619 
	`log_™omÆy
("GPUdmaChaö: disˇrded %d/%d w‹ds\n", 
À·
, 
Àn
);

622 
	#LD_THRESHOLD
 (8*1024)

	)

623 i‡(
cou¡
 >
LD_THRESHOLD
) {

624 i‡(
cou¡
 =
LD_THRESHOLD
) {

625 
ld_addr
 = 
addr
;

632 
li°
[0] |= 0x800000;

636 i‡(
ld_addr
 != 0) {

638 
cou¡
 -
LD_THRESHOLD
 + 2;

639 
addr
 = 
ld_addr
 & 0x1fffff;

640 
cou¡
-- > 0) {

641 
li°
 = 
ømba£
 + 
addr
 / 4;

642 
addr
 = 
li°
[0] & 0x1fffff;

643 
li°
[0] &= ~0x800000;

647 
gpu
.
°©e
.
œ°_li°
.
‰ame
 = *gpu.°©e.
‰ame_cou¡
;

648 
gpu
.
°©e
.
œ°_li°
.
h˙t
 = *gpu.state.hcnt;

649 
gpu
.
°©e
.
œ°_li°
.
cy˛es
 = 
˝u_cy˛es
;

650 
gpu
.
°©e
.
œ°_li°
.
addr
 = 
°¨t_addr
;

652  
˝u_cy˛es
;

653 
	}
}

655 
	$GPU_ªadD©aMem
(
uöt32_t
 *
mem
, 
cou¡
)

657 
	`log_io
("gpu_dma_ªad %∞%d\n", 
mem
, 
cou¡
);

659 i‡(
	`u∆ikñy
(
gpu
.
cmd_Àn
 > 0))

660 
	`Êush_cmd_buf„r
();

662 i‡(
gpu
.
dma
.
h
)

663 
	`do_vøm_io
(
mem
, 
cou¡
, 1);

664 
	}
}

666 
uöt32_t
 
	$GPU_ªadD©a
()

668 
uöt32_t
 
ªt
;

670 i‡(
	`u∆ikñy
(
gpu
.
cmd_Àn
 > 0))

671 
	`Êush_cmd_buf„r
();

673 
ªt
 = 
gpu
.
gp0
;

674 i‡(
gpu
.
dma
.
h
)

675 
	`do_vøm_io
(&
ªt
, 1, 1);

677 
	`log_io
("gpu_ªad %08x\n", 
ªt
);

678  
ªt
;

679 
	}
}

681 
uöt32_t
 
	$GPU_ªadSètus
()

683 
uöt32_t
 
ªt
;

685 i‡(
	`u∆ikñy
(
gpu
.
cmd_Àn
 > 0))

686 
	`Êush_cmd_buf„r
();

688 
ªt
 = 
gpu
.
°©us
.
ªg
;

689 
	`log_io
("gpu_ªad_°©u†%08x\n", 
ªt
);

690  
ªt
;

691 
	}
}

693 
	$GPU_‰ìze
(
uöt32_t
 
ty≥
, 
GPUFªeze_t
 *
‰ìze
)

695 
i
;

697 
ty≥
) {

699 i‡(
gpu
.
cmd_Àn
 > 0)

700 
	`Êush_cmd_buf„r
();

701 
	`mem˝y
(
‰ìze
->
psxVRam
, 
gpu
.
vøm
, 1024 * 512 * 2);

702 
	`mem˝y
(
‰ìze
->
ulC⁄åﬁ
, 
gpu
.
ªgs
, (gpu.regs));

703 
	`mem˝y
(
‰ìze
->
ulC⁄åﬁ
 + 0xe0, 
gpu
.
ex_ªgs
, (gpu.ex_regs));

704 
‰ìze
->
ulSètus
 = 
gpu
.
°©us
.
ªg
;

707 
	`mem˝y
(
gpu
.
vøm
, 
‰ìze
->
psxVRam
, 1024 * 512 * 2);

708 
	`mem˝y
(
gpu
.
ªgs
, 
‰ìze
->
ulC⁄åﬁ
, (gpu.regs));

709 
	`mem˝y
(
gpu
.
ex_ªgs
, 
‰ìze
->
ulC⁄åﬁ
 + 0xe0, (gpu.ex_regs));

710 
gpu
.
°©us
.
ªg
 = 
‰ìze
->
ulSètus
;

711 
gpu
.
cmd_Àn
 = 0;

712 
i
 = 8; i > 0; i--) {

713 
gpu
.
ªgs
[
i
] ^= 1;

714 
	`GPU_wrôeSètus
((
i
 << 24Ë| (
gpu
.
ªgs
[i] ^ 1));

716 
	`ªndîî_sync_ecmds
(
gpu
.
ex_ªgs
);

717 
	`ªndîî_upd©e_ˇches
(0, 0, 1024, 512);

722 
	}
}

724 
	$GPU_upd©eLa˚
()

726 i‡(
gpu
.
cmd_Àn
 > 0)

727 
	`Êush_cmd_buf„r
();

728 
	`ªndîî_Êush_queues
();

730 i‡(
gpu
.
°©us
.
bœnkög
) {

731 i‡(!
gpu
.
°©e
.
bœnked
) {

732 
	`vout_bœnk
();

733 
gpu
.
°©e
.
bœnked
 = 1;

734 
gpu
.
°©e
.
fb_dúty
 = 1;

739 i‡(!
gpu
.
°©e
.
fb_dúty
)

742 i‡(
gpu
.
‰ameskù
.
£t
) {

743 i‡(!
gpu
.
‰ameskù
.
‰ame_ªady
) {

744 i‡(*
gpu
.
°©e
.
‰ame_cou¡
 - gpu.
‰ameskù
.
œ°_Êù_‰ame
 < 9)

746 
gpu
.
‰ameskù
.
a˘ive
 = 0;

748 
gpu
.
‰ameskù
.
‰ame_ªady
 = 0;

753 
gpu
.
°©e
.
fb_dúty
 = 0;

754 
gpu
.
°©e
.
bœnked
 = 0;

755 
	}
}

757 
	$GPU_vBœnk
(
is_vbœnk
, 
lcf
)

759 
öãæa˚
 = 
gpu
.
°©e
.
Ælow_öãæa˚


760 && 
gpu
.
°©us
.
öãæa˚
 && gpu.°©us.
dheight
;

763 i‡(
gpu
.
°©e
.
Ælow_öãæa˚
 == 2

764 && *
gpu
.
°©e
.
‰ame_cou¡
 - gpu.°©e.
œ°_vøm_ªad_‰ame
 > 1)

766 
öãæa˚
 = 0;

768 i‡(
öãæa˚
 || i¡îœ˚ !
gpu
.
°©e
.
ﬁd_öãæa˚
) {

769 
gpu
.
°©e
.
ﬁd_öãæa˚
 = 
öãæa˚
;

771 i‡(
gpu
.
cmd_Àn
 > 0)

772 
	`Êush_cmd_buf„r
();

773 
	`ªndîî_Êush_queues
();

774 
	`ªndîî_£t_öãæa˚
(
öãæa˚
, !
lcf
);

776 
	}
}

779 
	$GPU_ªque°S¸ìnRedøw
()

781 
gpu
.
°©e
.
fb_dúty
 = 1;

782 
	`∂_˛ór_b‹dîs
();

783 
	}
}

785 
	$GPU_gëS¸ìnInfo
(
GPUS¸ìnInfo_t
 *
söfo
)

787 
söfo
->
vøm
 = (
uöt8_t
*)
gpu
.vram;

788 
söfo
->
x
 = (
uöt16_t
)
gpu
.
s¸ìn
.x;

789 
söfo
->
y
 = (
uöt16_t
)
gpu
.
s¸ìn
.y;

790 
söfo
->
w
 = (
uöt16_t
)
gpu
.
s¸ìn
.w;

791 
söfo
->
h
 = (
uöt16_t
)
gpu
.
s¸ìn
.h;

792 
söfo
->
hªs
 = (
uöt16_t
)
gpu
.
s¸ìn
.hres;

793 
söfo
->
vªs
 = (
uöt16_t
)
gpu
.
s¸ìn
.vres;

794 
söfo
->
dïth24
 = 
gpu
.
°©us
.
rgb24
;

795 
söfo
->
∑l
 = 
gpu
.
°©us
.
video
;

796 
	}
}

798 
	$gpulib_‰ameskù_¥ï¨e
(
s8
 
‰ameskù
)

800 
gpu
.
‰ameskù
.
£t
 = frameskip;

801 
gpu
.
‰ameskù
.
a˘ive
 = 0;

802 
gpu
.
‰ameskù
.
˙t
 = 0;

803 
gpu
.
‰ameskù
.
‰ame_ªady
 = 1;

804 
	}
}

806 
	$gpulib_£t_c⁄fig
(c⁄° 
gpulib_c⁄fig_t
 *
c⁄fig
)

808 #ifde‡
GPULIB_USE_MMAP


809 
gpu
.
mm≠
 = 
c⁄fig
->mmap;

810 
gpu
.
munm≠
 = 
c⁄fig
->munmap;

813 i‡(
gpu
.
vøm
 =
NULL
)

814 
	`m≠_vøm
();

817 
	`ªndîî_£t_c⁄fig
(
c⁄fig
);

818 
	`vout_£t_c⁄fig
(
c⁄fig
);

819 
	}
}

	@src/gpu/gpulib/gpu.h

11 #i‚de‡
GPULIB_GPU_H


12 
	#GPULIB_GPU_H


	)

14 
	~<°döt.h
>

16 #ifde‡
GPU_UNAI


17 
	~"gpu/gpu_u«i/gpu.h
"

20 
	#CMD_BUFFER_LEN
 1024

	)

22 
	spsx_gpu
 {

23 
uöt32_t
 
	mcmd_buf„r
[
CMD_BUFFER_LEN
];

24 
uöt32_t
 
	mªgs
[16];

25 
uöt16_t
 *
	mvøm
;

27 
uöt32_t
 
	mªg
;

29 
uöt32_t
 
	mtx
:4;

30 
uöt32_t
 
	mty
:1;

31 
uöt32_t
 
	mabr
:2;

32 
uöt32_t
 
	mç
:2;

33 
uöt32_t
 
	mdtd
:1;

34 
uöt32_t
 
	md„
:1;

35 
uöt32_t
 
	mmd
:1;

36 
uöt32_t
 
	mme
:1;

37 
uöt32_t
 
	munkn
:3;

38 
uöt32_t
 
	mwidth1
:1;

39 
uöt32_t
 
	mwidth0
:2;

40 
uöt32_t
 
	mdheight
:1;

41 
uöt32_t
 
	mvideo
:1;

42 
uöt32_t
 
	mrgb24
:1;

43 
uöt32_t
 
	möãæa˚
:1;

44 
uöt32_t
 
	mbœnkög
:1;

45 
uöt32_t
 
	munkn2
:2;

46 
uöt32_t
 
	mbusy
:1;

47 
uöt32_t
 
	mimg
:1;

48 
uöt32_t
 
	mcom
:1;

49 
uöt32_t
 
	mdma
:2;

50 
uöt32_t
 
	mlcf
:1;

52 } 
	m°©us
;

53 
uöt32_t
 
	mgp0
;

54 
uöt32_t
 
	mex_ªgs
[8];

56 
	mhªs
, 
	mvªs
;

57 
	mx
, 
	my
, 
	mw
, 
	mh
;

58 
	mx1
, 
	mx2
;

59 
	my1
, 
	my2
;

60 } 
	ms¸ìn
;

62 
	mx
, 
	my
, 
	mw
, 
	mh
;

63 
	moff£t
, 
	mis_ªad
;

64 } 
	mdma
, 
	mdma_°¨t
;

65 
	mcmd_Àn
;

66 
uöt32_t
 
	mzîo
;

68 
uöt32_t
 
	mfb_dúty
:1;

69 
uöt32_t
 
	mﬁd_öãæa˚
:1;

70 
uöt32_t
 
	mÆlow_öãæa˚
:2;

71 
uöt32_t
 
	mbœnked
:1;

72 
uöt32_t
 
	míh™˚mít_íabÀ
:1;

73 
uöt32_t
 
	míh™˚mít_a˘ive
:1;

74 
uöt32_t
 *
	m‰ame_cou¡
;

75 
uöt32_t
 *
	mh˙t
;

77 
uöt32_t
 
	maddr
;

78 
uöt32_t
 
	mcy˛es
;

79 
uöt32_t
 
	m‰ame
;

80 
uöt32_t
 
	mh˙t
;

81 } 
	mœ°_li°
;

82 
uöt32_t
 
	mœ°_vøm_ªad_‰ame
;

83 } 
	m°©e
;

85 
öt32_t
 
	m£t
:3;

86 
öt32_t
 
	m˙t
:3;

87 
uöt32_t
 
	ma˘ive
:1;

88 
uöt32_t
 
	mÆlow
:1;

89 
uöt32_t
 
	m‰ame_ªady
:1;

90 
uöt32_t
 
	mœ°_Êù_‰ame
;

91 
uöt32_t
 
	m≥ndög_fûl
[3];

92 } 
	m‰ameskù
;

93 #ifde‡
GPULIB_USE_MMAP


94 *(*
	mmm≠
)(
	msize
);

95 (*
	mmunm≠
)(*
	m±r
, 
	msize
);

99 
psx_gpu
 
gpu
;

101 c⁄° 
cmd_Àngths
[256];

103 
do_cmd_li°
(
uöt32_t
 *
li°
, 
cou¡
, *
œ°_cmd
);

105 
	sgpulib_c⁄fig_t
 {

106 #ifde‡
GPULIB_USE_MMAP


107 *(*
	mmm≠
)(
	msize
);

108 (*
	mmunm≠
)(*
	m±r
, 
	msize
);

112 
	miU£Dôhî
;

113 
	mdwA˘Fixes
;

114 
	mfFømeR©eHz
;

115 
	mdwFømeR©eTicks
;

116 } 
	mgpu_≥›s_c⁄fig
;

122 
boﬁ
 
	mno_light
, 
	mno_bÀnd
;

123 
	mlöeskù
;

124 } 
	mgpu_u«i_c⁄fig
;

127 
gpulib_c⁄fig_t
 
gpulib_c⁄fig
;

129 
gpulib_‰ameskù_¥ï¨e
(sig√d 
‰ameskù
);

130 
gpulib_£t_c⁄fig
(c⁄° 
gpulib_c⁄fig_t
 *
c⁄fig
);

132 
ªndîî_öô
();

133 
ªndîî_föish
();

134 
ªndîî_sync_ecmds
(
uöt32_t
 * 
ecmds
);

135 
ªndîî_upd©e_ˇches
(
x
, 
y
, 
w
, 
h
);

136 
ªndîî_Êush_queues
();

137 
ªndîî_£t_öãæa˚
(
íabÀ
, 
is_odd
);

138 
ªndîî_£t_c⁄fig
(c⁄° 
gpulib_c⁄fig_t
 *
c⁄fig
);

139 
ªndîî_nŸify_ªs_ch™ge
();

141 
vout_öô
();

142 
vout_föish
();

143 
vout_upd©e
();

144 
vout_upd©e_löe
(
x
, 
y
, 
uöt16_t
 *
mem
);

145 
vout_bœnk
();

146 
vout_£t_c⁄fig
(c⁄° 
gpulib_c⁄fig_t
 *
c⁄fig
);

	@src/gpu/gpulib/vout_port.cpp

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<f˙é.h
>

17 
	~<sys/mm™.h
>

19 
	~"p‹t.h
"

20 
	~"gpu.h
"

26 #i‚de‡
USE_BGR15


27 
	#RGB24
(
R
,
G
,
B
Ë(((((R)&0xF8)<<8)|(((G)&0xFC)<<3)|(((B)&0xF8)>>3)))

	)

28 
	#RGB16X2
(
C
Ë(((C)&(0x1f001f<<10))>>10Ë| (((C)&(0x1f001f<<5))<<1Ë| (((C)&(0x1f001f<<0))<<11)

	)

31 
	#RGB16
(
C
Ë–((CË& 0x7c00)>>10 | ((CË& 0x03e0)<<1 | ((CË& 0x1f)<<11 )

	)

33 
	#RGB24
(
R
,
G
,
B
Ë((((R)&0xF8)>>3)|(((G)&0xF8)<<2)|(((B)&0xF8)<<7))

	)

36 
	#u8
 
uöt8_t


	)

37 
	#s8
 
öt8_t


	)

38 
	#u16
 
uöt16_t


	)

39 
	#s16
 
öt16_t


	)

40 
	#u32
 
uöt32_t


	)

41 
	#s32
 
öt32_t


	)

42 
	#s64
 
öt64_t


	)

44 
boﬁ
 
	gu£_˛ù_368
;

46 
ölöe
 
u16
 
	$middÀ
(
u16
 
s1
, u16 
s2
, u16 
s3
)

48 
u16
 
x
, 
y
, 
ãmp
;

49 
u16
 
a
[] = {
s1
, 
s2
, 
s3
};

51 
y
=0; y<2; y++){

52 
x
=1; x<3; x++){

53 if(
a
[
x
] >á[
y
]){

54 
ãmp
 = 
a
[
x
];

55 
a
[
x
] =á[
y
];

56 
a
[
y
] = 
ãmp
;

60  
a
[1];

61 
	}
}

63 
ölöe
 
u16
 
	$mask_fûãr
(
u16
 *
s
)

80 
u16
 
c1
 = 
s
[0];

81 
u16
 
c2
 = 
s
[1];

82 
u16
 
r
 = (u16)((u16)(
c1
 & 0x7c00Ë+ (u16)(
c2
 & 0x7c00)) >> 11;

83 
u16
 
g
 = (u16)((u16)(
c1
 & 0x03e0Ë+ (u16)(
c2
 & 0x03e0));

84 
u16
 
b
 = (u16)((u16)(
c1
 & 0x001fË+ (u16)(
c2
 & 0x001f)) >> 1;

86  (
b
<<11Ë| (
g
Ë| 
r
;

87 
	}
}

89 
	gãm∂©e
<
ty≥«me
 
	gT
>

90 
INLINE
 
T
 
	$Mö2
 (c⁄° 
T
 
_a
, c⁄° T 
_b
Ë{  (_a<_b)?_a:_b; 
	}
}

93 
	$GPU_Blô320
(c⁄° * 
§c
, 
u16
* 
d°16
, 
boﬁ
 
isRGB24
)

95 
u32
 
uCou¡
;

96 i‡(!
isRGB24
)

98 #i‚de‡
USE_BGR15


99 
uCou¡
 = 20;

100 c⁄° 
u32
* 
§c32
 = (c⁄° u32*Ë
§c
;

101 
u32
* 
d°32
 = (u32*)(*Ë
d°16
;

103 
d°32
[0] = 
	`RGB16X2
(
§c32
[0]);

104 
d°32
[1] = 
	`RGB16X2
(
§c32
[1]);

105 
d°32
[2] = 
	`RGB16X2
(
§c32
[2]);

106 
d°32
[3] = 
	`RGB16X2
(
§c32
[3]);

107 
d°32
[4] = 
	`RGB16X2
(
§c32
[4]);

108 
d°32
[5] = 
	`RGB16X2
(
§c32
[5]);

109 
d°32
[6] = 
	`RGB16X2
(
§c32
[6]);

110 
d°32
[7] = 
	`RGB16X2
(
§c32
[7]);

111 
d°32
 += 8;

112 
§c32
 += 8;

113 } --
uCou¡
);

115 
	`mem˝y
(
d°16
, 
§c
, 640);

119 
uCou¡
 = 20;

120 
u8
* 
§c8
 = (u8*)
§c
;

122 
d°16
[ 0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

123 
d°16
[ 1] = 
	`RGB24
(
§c8
[ 3], src8[ 4], src8[ 5] );

124 
d°16
[ 2] = 
	`RGB24
(
§c8
[ 6], src8[ 7], src8[ 8] );

125 
d°16
[ 3] = 
	`RGB24
(
§c8
[ 9], src8[10], src8[11] );

126 
d°16
[ 4] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

127 
d°16
[ 5] = 
	`RGB24
(
§c8
[15], src8[16], src8[17] );

128 
d°16
[ 6] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

129 
d°16
[ 7] = 
	`RGB24
(
§c8
[21], src8[22], src8[23] );

131 
d°16
[ 8] = 
	`RGB24
(
§c8
[24], src8[25], src8[26] );

132 
d°16
[ 9] = 
	`RGB24
(
§c8
[27], src8[28], src8[29] );

133 
d°16
[10] = 
	`RGB24
(
§c8
[30], src8[31], src8[32] );

134 
d°16
[11] = 
	`RGB24
(
§c8
[33], src8[34], src8[35] );

135 
d°16
[12] = 
	`RGB24
(
§c8
[36], src8[37], src8[38] );

136 
d°16
[13] = 
	`RGB24
(
§c8
[39], src8[40], src8[41] );

137 
d°16
[14] = 
	`RGB24
(
§c8
[42], src8[43], src8[44] );

138 
d°16
[15] = 
	`RGB24
(
§c8
[45], src8[46], src8[47] );

139 
d°16
 += 16;

140 
§c8
 += 48;

141 } --
uCou¡
);

143 
	}
}

146 
ölöe
 
	$GPU_Blô512
(c⁄° * 
§c
, 
u16
* 
d°16
, 
boﬁ
 
isRGB24
)

148 
u32
 
uCou¡
;

149 i‡(!
isRGB24
)

151 #i‚de‡
USE_BGR15


152 
uCou¡
 = 32;

153 
u16
* 
§c16
 = (u16*)
§c
;

156 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

157 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

158 
d°16
[ 2] = 
	`RGB16
(
§c16
[3]);

159 
d°16
[ 3] = 
	`RGB16
(
§c16
[4]);

160 
d°16
[ 4] = 
	`RGB16
(
§c16
[6]);

161 
d°16
[ 5] = 
	`RGB16
(
§c16
[8]);

162 
d°16
[ 6] = 
	`RGB16
(
§c16
[9]);

163 
d°16
[ 7] = 
	`RGB16
(
§c16
[11]);

164 
d°16
[ 8] = 
	`RGB16
(
§c16
[12]);

165 
d°16
[ 9] = 
	`RGB16
(
§c16
[14]);

167 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

168 
d°16
[ 1] = 
	`mask_fûãr
(&
§c16
[1]);

169 
d°16
[ 2] = 
	`RGB16
(
§c16
[3]);

170 
d°16
[ 3] = 
	`mask_fûãr
(&
§c16
[4]);

171 
d°16
[ 4] = 
	`mask_fûãr
(&
§c16
[6]);

172 
d°16
[ 5] = 
	`RGB16
(
§c16
[8]);

173 
d°16
[ 6] = 
	`mask_fûãr
(&
§c16
[9]);

174 
d°16
[ 7] = 
	`RGB16
(
§c16
[11]);

175 
d°16
[ 8] = 
	`mask_fûãr
(&
§c16
[12]);

176 
d°16
[ 9] = 
	`mask_fûãr
(&
§c16
[14]);

178 
d°16
 += 10;

179 
§c16
 += 16;

180 } --
uCou¡
);

182 
uCou¡
 = 64;

183 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

185 *
d°16
++ = *
§c16
++;

186 *
d°16
++ = *
§c16
;

187 
§c16
 += 2;

188 *
d°16
++ = *
§c16
++;

189 *
d°16
++ = *
§c16
;

190 
§c16
 += 2;

191 *
d°16
++ = *
§c16
;

192 
§c16
 += 2;

193 } --
uCou¡
);

197 
uCou¡
 = 32;

198 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
;

200 
d°16
[ 0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

201 
d°16
[ 1] = 
	`RGB24
(
§c8
[ 3], src8[ 4], src8[ 5] );

202 
d°16
[ 2] = 
	`RGB24
(
§c8
[ 9], src8[10], src8[11] );

203 
d°16
[ 3] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

204 
d°16
[ 4] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

206 
d°16
[ 5] = 
	`RGB24
(
§c8
[24], src8[25], src8[26] );

207 
d°16
[ 6] = 
	`RGB24
(
§c8
[27], src8[28], src8[29] );

208 
d°16
[ 7] = 
	`RGB24
(
§c8
[33], src8[34], src8[35] );

209 
d°16
[ 8] = 
	`RGB24
(
§c8
[36], src8[37], src8[38] );

210 
d°16
[ 9] = 
	`RGB24
(
§c8
[42], src8[43], src8[44] );

212 
d°16
 += 10;

213 
§c8
 += 48;

214 } --
uCou¡
);

216 
	}
}

219 
ölöe
 
	$GPU_Blô384
(c⁄° * 
§c
, 
u16
* 
d°16
, 
boﬁ
 
isRGB24
)

221 
u32
 
uCou¡
;

222 i‡(!
isRGB24
)

224 #i‚de‡
USE_BGR15


225 
uCou¡
 = 32;

226 
u16
* 
§c16
 = (u16*)
§c
;

229 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

230 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

231 
d°16
[ 2] = 
	`RGB16
(
§c16
[2]);

232 
d°16
[ 3] = 
	`RGB16
(
§c16
[3]);

233 
d°16
[ 4] = 
	`RGB16
(
§c16
[4]);

234 
d°16
[ 5] = 
	`RGB16
(
§c16
[6]);

235 
d°16
[ 6] = 
	`RGB16
(
§c16
[7]);

236 
d°16
[ 7] = 
	`RGB16
(
§c16
[8]);

237 
d°16
[ 8] = 
	`RGB16
(
§c16
[9]);

238 
d°16
[ 9] = 
	`RGB16
(
§c16
[10]);

240 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

241 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

242 
d°16
[ 2] = 
	`RGB16
(
§c16
[2]);

243 
d°16
[ 3] = 
	`RGB16
(
§c16
[3]);

244 
d°16
[ 4] = 
	`mask_fûãr
(&
§c16
[4]);

245 
d°16
[ 5] = 
	`RGB16
(
§c16
[6]);

246 
d°16
[ 6] = 
	`RGB16
(
§c16
[7]);

247 
d°16
[ 7] = 
	`RGB16
(
§c16
[8]);

248 
d°16
[ 8] = 
	`RGB16
(
§c16
[9]);

249 
d°16
[ 9] = 
	`mask_fûãr
(&
§c16
[10]);

251 
d°16
 += 10;

252 
§c16
 += 12;

253 } --
uCou¡
);

255 
uCou¡
 = 64;

256 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

258 *
d°16
++ = *
§c16
++;

259 *
d°16
++ = *
§c16
++;

260 *
d°16
++ = *
§c16
++;

261 *
d°16
++ = *
§c16
++;

262 *
d°16
++ = *
§c16
;

263 
§c16
 += 2;

264 } --
uCou¡
);

268 
uCou¡
 = 32;

269 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
;

271 
d°16
[0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

272 
d°16
[1] = 
	`RGB24
(
§c8
[ 3], src8[ 4], src8[ 5] );

273 
d°16
[2] = 
	`RGB24
(
§c8
[ 6], src8[ 7], src8[ 8] );

274 
d°16
[3] = 
	`RGB24
(
§c8
[ 9], src8[10], src8[11] );

275 
d°16
[4] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

276 
d°16
[5] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

277 
d°16
[6] = 
	`RGB24
(
§c8
[21], src8[22], src8[23] );

278 
d°16
[7] = 
	`RGB24
(
§c8
[24], src8[25], src8[26] );

279 
d°16
[8] = 
	`RGB24
(
§c8
[27], src8[28], src8[29] );

280 
d°16
[9] = 
	`RGB24
(
§c8
[30], src8[31], src8[32] );

281 
d°16
 += 10;

282 
§c8
 += 36;

283 } --
uCou¡
);

285 
	}
}

288 
ölöe
 
	$GPU_Blô368_˛ù
(c⁄° * 
§c
, 
u16
* 
d°16
)

314 
u32
 
uCou¡
;

315 
u16
* 
§c16
 = ((u16*Ë
§c
);

316 
uCou¡
 = 32;

319 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

320 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

321 
d°16
[ 2] = 
	`RGB16
(
§c16
[2]);

322 
d°16
[ 3] = 
	`RGB16
(
§c16
[3]);

323 
d°16
[ 4] = 
	`RGB16
(
§c16
[4]);

324 
d°16
[ 5] = 
	`RGB16
(
§c16
[5]);

325 
d°16
[ 6] = 
	`RGB16
(
§c16
[6]);

326 
d°16
[ 7] = 
	`RGB16
(
§c16
[7]);

327 
d°16
[ 8] = 
	`RGB16
(
§c16
[8]);

328 
d°16
[ 9] = 
	`mask_fûãr
(&
§c16
[9]);

329 
d°16
 += 10;

330 
§c16
 += 11;

331 } --
uCou¡
);

332 
	}
}

336 
ölöe
 
	$GPU_Blô368
(c⁄° * 
§c
, 
u16
* 
d°16
, 
boﬁ
 
isRGB24
 )

338 
u32
 
uCou¡
;

339 i‡(!
isRGB24
)

341 #i‚de‡
USE_BGR15


342 
u16
* 
§c16
 = ((u16*Ë
§c
) ;

344 
uCou¡
 = 20;

346 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

347 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

348 
d°16
[ 2] = 
	`RGB16
(
§c16
[2]);

349 
d°16
[ 3] = 
	`RGB16
(
§c16
[3]);

350 
d°16
[ 4] = 
	`RGB16
(
§c16
[4]);

351 
d°16
[ 5] = 
	`RGB16
(
§c16
[5]);

352 
d°16
[ 6] = 
	`RGB16
(
§c16
[6]);

353 
d°16
[ 7] = 
	`RGB16
(
§c16
[7]);

354 
d°16
[ 8] = 
	`RGB16
(
§c16
[9]);

355 
d°16
[ 9] = 
	`RGB16
(
§c16
[10]);

356 
d°16
[10] = 
	`RGB16
(
§c16
[11]);

357 
d°16
[11] = 
	`RGB16
(
§c16
[12]);

358 
d°16
[12] = 
	`RGB16
(
§c16
[13]);

359 
d°16
[13] = 
	`RGB16
(
§c16
[14]);

360 
d°16
[14] = 
	`RGB16
(
§c16
[15]);

361 
d°16
[15] = 
	`RGB16
(
§c16
[16]);

362 
d°16
 += 16;

363 
§c16
 += 18;

364 } --
uCou¡
);

380 
uCou¡
 = 22;

381 
d°16
[0] = 
	`RGB16
(
§c16
[0]);

382 
d°16
++;

383 
§c16
++;

385 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

386 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

387 
d°16
[ 2] = 
	`RGB16
(
§c16
[2]);

388 
d°16
[ 3] = 
	`RGB16
(
§c16
[3]);

389 
d°16
[ 4] = 
	`RGB16
(
§c16
[4]);

390 
d°16
[ 5] = 
	`RGB16
(
§c16
[5]);

391 
d°16
[ 6] = 
	`mask_fûãr
(&
§c16
[6]);

392 
d°16
[ 7] = 
	`RGB16
(
§c16
[8]);

393 
d°16
[ 8] = 
	`RGB16
(
§c16
[9]);

394 
d°16
[ 9] = 
	`RGB16
(
§c16
[10]);

395 
d°16
[10] = 
	`RGB16
(
§c16
[11]);

396 
d°16
[11] = 
	`RGB16
(
§c16
[12]);

397 
d°16
[12] = 
	`RGB16
(
§c16
[13]);

398 
d°16
[13] = 
	`mask_fûãr
(&
§c16
[14]);

399 
d°16
 += 14;

400 
§c16
 += 16;

401 } --
uCou¡
);

403 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

404 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

405 
d°16
[ 2] = 
	`RGB16
(
§c16
[2]);

406 
d°16
[ 3] = 
	`RGB16
(
§c16
[3]);

407 
d°16
[ 4] = 
	`RGB16
(
§c16
[4]);

408 
d°16
[ 5] = 
	`RGB16
(
§c16
[5]);

409 
d°16
[ 6] = 
	`mask_fûãr
(&
§c16
[6]);

410 
d°16
[ 7] = 
	`RGB16
(
§c16
[8]);

411 
d°16
[ 8] = 
	`RGB16
(
§c16
[9]);

412 
d°16
[ 9] = 
	`RGB16
(
§c16
[10]);

413 
d°16
[10] = 
	`RGB16
(
§c16
[11]);

417 
uCou¡
 = 40;

418 c⁄° 
u16
* 
§c16
 = ((c⁄° u16*Ë
§c
) ;

420 *
d°16
++ = *
§c16
++;

421 *
d°16
++ = *
§c16
++;

422 *
d°16
++ = *
§c16
++;

423 *
d°16
++ = *
§c16
++;

424 *
d°16
++ = *
§c16
++;

425 *
d°16
++ = *
§c16
++;

426 *
d°16
++ = *
§c16
++;

427 *
d°16
++ = *
§c16
;

428 
§c16
 += 2;

429 } --
uCou¡
);

434 
uCou¡
 = 20;

435 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
 ;

437 
d°16
[ 0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

438 
d°16
[ 1] = 
	`RGB24
(
§c8
[ 3], src8[ 4], src8[ 5] );

439 
d°16
[ 2] = 
	`RGB24
(
§c8
[ 6], src8[ 7], src8[ 8] );

440 
d°16
[ 3] = 
	`RGB24
(
§c8
[ 9], src8[10], src8[11] );

441 
d°16
[ 4] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

442 
d°16
[ 5] = 
	`RGB24
(
§c8
[15], src8[16], src8[17] );

443 
d°16
[ 6] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

444 
d°16
[ 7] = 
	`RGB24
(
§c8
[21], src8[22], src8[23] );

446 
d°16
[ 8] = 
	`RGB24
(
§c8
[27], src8[28], src8[29] );

447 
d°16
[ 9] = 
	`RGB24
(
§c8
[30], src8[31], src8[32] );

448 
d°16
[10] = 
	`RGB24
(
§c8
[33], src8[34], src8[35] );

449 
d°16
[11] = 
	`RGB24
(
§c8
[36], src8[37], src8[38] );

450 
d°16
[12] = 
	`RGB24
(
§c8
[39], src8[40], src8[41] );

451 
d°16
[13] = 
	`RGB24
(
§c8
[42], src8[43], src8[44] );

452 
d°16
[14] = 
	`RGB24
(
§c8
[45], src8[46], src8[47] );

453 
d°16
[15] = 
	`RGB24
(
§c8
[48], src8[49], src8[50] );

454 
d°16
 += 16;

455 
§c8
 += 54;

456 } --
uCou¡
);

458 
	}
}

462 
ölöe
 
	$GPU_Blô256
(c⁄° * 
§c
, 
u16
* 
d°16
, 
boﬁ
 
isRGB24
)

464 
u32
 
uCou¡
;

465 i‡(!
isRGB24
)

467 #i‚de‡
USE_BGR15


468 
uCou¡
 = 32;

469 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

471 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

472 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

473 
d°16
[ 2] = dst16[1];

474 
d°16
[ 3] = 
	`RGB16
(
§c16
[2]);

475 
d°16
[ 4] = 
	`RGB16
(
§c16
[3]);

476 
d°16
[ 5] = 
	`RGB16
(
§c16
[4]);

477 
d°16
[ 6] = 
	`RGB16
(
§c16
[5]);

478 
d°16
[ 7] = dst16[6];

479 
d°16
[ 8] = 
	`RGB16
(
§c16
[6]);

480 
d°16
[ 9] = 
	`RGB16
(
§c16
[7]);

481 
d°16
 += 10;

482 
§c16
 += 8;

483 } --
uCou¡
);

485 
uCou¡
 = 64;

486 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

488 *
d°16
++ = *
§c16
++;

489 *
d°16
++ = *
§c16
;

490 *
d°16
++ = *
§c16
++;

491 *
d°16
++ = *
§c16
++;

492 *
d°16
++ = *
§c16
++;

493 } --
uCou¡
);

497 
uCou¡
 = 32;

498 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
;

500 
d°16
[ 0] = 
	`RGB24
(
§c8
[0], src8[ 1], src8[ 2] );

501 
d°16
[ 1] = 
	`RGB24
(
§c8
[3], src8[ 4], src8[ 5] );

502 
d°16
[ 2] = dst16[1];

503 
d°16
[ 3] = 
	`RGB24
(
§c8
[6], src8[ 7], src8[ 8] );

504 
d°16
[ 4] = 
	`RGB24
(
§c8
[9], src8[10], src8[11] );

506 
d°16
[ 5] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

507 
d°16
[ 6] = 
	`RGB24
(
§c8
[15], src8[16], src8[17] );

508 
d°16
[ 7] = dst16[6];

509 
d°16
[ 8] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

510 
d°16
[ 9] = 
	`RGB24
(
§c8
[21], src8[22], src8[23] );

511 
d°16
 += 10;

512 
§c8
 += 24;

513 } --
uCou¡
);

515 
	}
}

519 
ölöe
 
	$GPU_Blô640
(c⁄° * 
§c
, 
u16
* 
d°16
, 
boﬁ
 
isRGB24
)

521 
u32
 
uCou¡
;

522 i‡(!
isRGB24
) {

523 #i‚de‡
USE_BGR15


524 
uCou¡
 = 20;

525 
u16
* 
§c16
 = (u16*)
§c
;

528 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

529 
d°16
[ 1] = 
	`RGB16
(
§c16
[2]);

530 
d°16
[ 2] = 
	`RGB16
(
§c16
[4]);

531 
d°16
[ 3] = 
	`RGB16
(
§c16
[6]);

533 
d°16
[ 4] = 
	`RGB16
(
§c16
[8]);

534 
d°16
[ 5] = 
	`RGB16
(
§c16
[10]);

535 
d°16
[ 6] = 
	`RGB16
(
§c16
[12]);

536 
d°16
[ 7] = 
	`RGB16
(
§c16
[14]);

538 
d°16
[ 8] = 
	`RGB16
(
§c16
[16]);

539 
d°16
[ 9] = 
	`RGB16
(
§c16
[18]);

540 
d°16
[10] = 
	`RGB16
(
§c16
[20]);

541 
d°16
[11] = 
	`RGB16
(
§c16
[22]);

543 
d°16
[12] = 
	`RGB16
(
§c16
[24]);

544 
d°16
[13] = 
	`RGB16
(
§c16
[26]);

545 
d°16
[14] = 
	`RGB16
(
§c16
[28]);

546 
d°16
[15] = 
	`RGB16
(
§c16
[30]);

548 
d°16
[ 0] = 
	`mask_fûãr
(&
§c16
[0]);

549 
d°16
[ 1] = 
	`mask_fûãr
(&
§c16
[2]);

550 
d°16
[ 2] = 
	`mask_fûãr
(&
§c16
[4]);

551 
d°16
[ 3] = 
	`mask_fûãr
(&
§c16
[6]);

553 
d°16
[ 4] = 
	`mask_fûãr
(&
§c16
[8]);

554 
d°16
[ 5] = 
	`mask_fûãr
(&
§c16
[10]);

555 
d°16
[ 6] = 
	`mask_fûãr
(&
§c16
[12]);

556 
d°16
[ 7] = 
	`mask_fûãr
(&
§c16
[14]);

558 
d°16
[ 8] = 
	`mask_fûãr
(&
§c16
[16]);

559 
d°16
[ 9] = 
	`mask_fûãr
(&
§c16
[18]);

560 
d°16
[10] = 
	`mask_fûãr
(&
§c16
[20]);

561 
d°16
[11] = 
	`mask_fûãr
(&
§c16
[22]);

563 
d°16
[12] = 
	`mask_fûãr
(&
§c16
[24]);

564 
d°16
[13] = 
	`mask_fûãr
(&
§c16
[26]);

565 
d°16
[14] = 
	`mask_fûãr
(&
§c16
[28]);

566 
d°16
[15] = 
	`mask_fûãr
(&
§c16
[30]);

569 
d°16
 += 16;

570 
§c16
 += 32;

571 } --
uCou¡
);

573 
uCou¡
 = 320;

574 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

576 *
d°16
++ = *
§c16
;

577 
§c16
 += 2;

578 } --
uCou¡
);

582 
uCou¡
 = 20;

583 c⁄° 
u8
* 
§c8
 = (c⁄° u8*Ë
§c
;

585 
d°16
[ 0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

586 
d°16
[ 1] = 
	`RGB24
(
§c8
[ 6], src8[ 7], src8[ 8] );

587 
d°16
[ 2] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

588 
d°16
[ 3] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

590 
d°16
[ 4] = 
	`RGB24
(
§c8
[24], src8[25], src8[26] );

591 
d°16
[ 5] = 
	`RGB24
(
§c8
[30], src8[31], src8[32] );

592 
d°16
[ 6] = 
	`RGB24
(
§c8
[36], src8[37], src8[38] );

593 
d°16
[ 7] = 
	`RGB24
(
§c8
[42], src8[43], src8[44] );

595 
d°16
[ 8] = 
	`RGB24
(
§c8
[48], src8[49], src8[50] );

596 
d°16
[ 9] = 
	`RGB24
(
§c8
[54], src8[55], src8[56] );

597 
d°16
[10] = 
	`RGB24
(
§c8
[60], src8[61], src8[62] );

598 
d°16
[11] = 
	`RGB24
(
§c8
[66], src8[67], src8[68] );

600 
d°16
[12] = 
	`RGB24
(
§c8
[72], src8[73], src8[74] );

601 
d°16
[13] = 
	`RGB24
(
§c8
[78], src8[79], src8[80] );

602 
d°16
[14] = 
	`RGB24
(
§c8
[84], src8[85], src8[86] );

603 
d°16
[15] = 
	`RGB24
(
§c8
[90], src8[91], src8[92] );

605 
d°16
 += 16;

606 
§c8
 += 96;

607 } --
uCou¡
);

609 
	}
}

611 vﬁ©ûê
uöt16_t
 *
dma_±r
;

612 
	$vout_upd©e_löe
(
x
, 
y
, 
uöt16_t
 *
mem
)

614 c⁄° 
VIDEO_WIDTH
 = 320;

616 
x0
 = 
gpu
.
s¸ìn
.
x
;

617 
y0
 = 
gpu
.
s¸ìn
.
y
;

618 
w0
 = 
gpu
.
s¸ìn
.
hªs
;

619 
h0
 = 
gpu
.
s¸ìn
.
vªs
;

620 
h1
 = 
gpu
.
s¸ìn
.
h
;

622 i‡(
w0
 =0 || 
h0
 == 0)

625 
boﬁ
 
isRGB24
 = 
gpu
.
°©us
.
rgb24
;

626 
u16
* 
d°16
 = 
dma_±r
;

627 
u16
* 
§c16
 = (u16*)
gpu
.
vøm
;

630 
§c16_offs_msk
 = 1024*512-1;

631 
§c16_offs
 = (
x0
 + 
y0
*1024Ë& 
§c16_offs_msk
;

634 
sizeShi·
 = 1;

635 i‡(
h0
 == 256) {

636 
h0
 = 240;

637 } i‡(
h0
 == 480) {

638 
sizeShi·
 = 2;

640 i‡(
h1
 > 
h0
) {

641 
§c16_offs
 = (§c16_off†+ (((
h1
-
h0
Ë/ 2Ë* 1024)Ë& 
§c16_offs_msk
;

642 
h1
 = 
h0
;

643 } i‡(
h1
 < 
h0
) {

644 
d°16
 +(((
h0
-
h1
Ë>> 
sizeShi·
Ë* 
VIDEO_WIDTH
 * 2);

647 
öcY
 = (
h0
 == 480) ? 2 : 1;

648 
h0
 = ((h0 == 480) ? 2048 : 1024);

650  
w0
 )

653 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
) {

654 
	`GPU_Blô256
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

656 
d°16
 +
VIDEO_WIDTH
;

657 
d°16
 +
VIDEO_WIDTH
;

658 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

663 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
) {

664 i‡(
u£_˛ù_368
 =
Ál£
 || 
isRGB24
)

666 
	`GPU_Blô368
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
 );

671 
	`GPU_Blô368_˛ù
(
§c16
 + 
§c16_offs
, 
d°16
);

674 
d°16
 +
VIDEO_WIDTH
;

675 
d°16
 +
VIDEO_WIDTH
;

676 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

682 
§c16_offs
 &= ~1;

683 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
) {

684 
	`GPU_Blô320
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

686 
d°16
 +
VIDEO_WIDTH
;

687 
d°16
 +
VIDEO_WIDTH
;

688 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

693 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
) {

694 
	`GPU_Blô384
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

696 
d°16
 +
VIDEO_WIDTH
;

697 
d°16
 +
VIDEO_WIDTH
;

698 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

703 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
) {

704 
	`GPU_Blô512
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

706 
d°16
 +
VIDEO_WIDTH
;

707 
d°16
 +
VIDEO_WIDTH
;

708 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

713 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
) {

714 
	`GPU_Blô640
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

716 
d°16
 +
VIDEO_WIDTH
;

717 
d°16
 +
VIDEO_WIDTH
;

718 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

723 
	`dma_Êù
();

724 
	}
}

730 
	$vout_upd©e
()

732 c⁄° 
VIDEO_WIDTH
 = 320;

736 i‡(
gpu
.
s¸ìn
.
w
 !gpu.s¸ìn.
hªs
) {

737 
°¨t_x
 = (
gpu
.
s¸ìn
.
x1
 - 0x260Ë* gpu.s¸ìn.
hªs
 / 2560;

738 
íd_x
 = (
gpu
.
s¸ìn
.
x2
 - 0x260Ë* gpu.s¸ìn.
hªs
 / 2560;

739 
rounded_w
(((
gpu
.
s¸ìn
.
x2
 - gpu.s¸ìn.
x1
) / 2560) + 2) & (~3);

740 
	`¥ötf
("s¸ìn.w: %d s¸ìn.hªs: %dÑounded_w:%d\n", 
gpu
.
s¸ìn
.
w
, gpu.s¸ìn.
hªs
, 
rounded_w
);

741 
	`¥ötf
("°¨t_x: %dÉnd_x: %d x1: %d x2: %d\n", 
°¨t_x
, 
íd_x
, 
gpu
.
s¸ìn
.
x1
, gpu.s¸ìn.
x2
);

745 
x0
 = 
gpu
.
s¸ìn
.
x
;

746 
y0
 = 
gpu
.
s¸ìn
.
y
;

747 
w0
 = 
gpu
.
s¸ìn
.
hªs
;

748 
h0
 = 
gpu
.
s¸ìn
.
vªs
;

749 
h1
 = 
gpu
.
s¸ìn
.
h
;

751 i‡(
w0
 =0 || 
h0
 == 0)

754 
boﬁ
 
isRGB24
 = 
gpu
.
°©us
.
rgb24
;

755 
u16
* 
d°16
 = 
dma_±r
;

756 
u16
* 
§c16
 = (u16*)
gpu
.
vøm
;

759 
§c16_offs_msk
 = 1024*512-1;

760 
§c16_offs
 = (
x0
 + 
y0
*1024Ë& 
§c16_offs_msk
;

763 
sizeShi·
 = 1;

764 i‡(
h0
 == 256) {

765 
h0
 = 240;

766 } i‡(
h0
 == 480) {

767 
sizeShi·
 = 2;

769 i‡(
h1
 > 
h0
) {

770 
§c16_offs
 = (§c16_off†+ (((
h1
-
h0
Ë/ 2Ë* 1024)Ë& 
§c16_offs_msk
;

771 
h1
 = 
h0
;

772 } i‡(
h1
 < 
h0
) {

773 
d°16
 +(((
h0
-
h1
Ë>> 
sizeShi·
Ë* 
VIDEO_WIDTH
 * 2);

776 
öcY
 = (
h0
 == 480) ? 2 : 1;

777 
h0
 = ((h0 == 480) ? 2048 : 1024);

779  
w0
 )

782 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
) {

783 
	`GPU_Blô256
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

785 
d°16
 +
VIDEO_WIDTH
;

786 
d°16
 +
VIDEO_WIDTH
;

787 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

792 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
) {

793 i‡(
u£_˛ù_368
 =
Ál£
 || 
isRGB24
)

795 
	`GPU_Blô368
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
 );

800 
	`GPU_Blô368_˛ù
(
§c16
 + 
§c16_offs
, 
d°16
);

803 
d°16
 +
VIDEO_WIDTH
;

804 
d°16
 +
VIDEO_WIDTH
;

805 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

811 
§c16_offs
 &= ~1;

812 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
) {

813 
	`GPU_Blô320
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

815 
d°16
 +
VIDEO_WIDTH
;

816 
d°16
 +
VIDEO_WIDTH
;

817 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

822 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
) {

823 
	`GPU_Blô384
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

825 
d°16
 +
VIDEO_WIDTH
;

826 
d°16
 +
VIDEO_WIDTH
;

827 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

832 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
) {

833 
	`GPU_Blô512
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

835 
d°16
 +
VIDEO_WIDTH
;

836 
d°16
 +
VIDEO_WIDTH
;

837 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

842 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
) {

843 
	`GPU_Blô640
(
§c16
 + 
§c16_offs
, 
d°16
, 
isRGB24
);

845 
d°16
 +
VIDEO_WIDTH
;

846 
d°16
 +
VIDEO_WIDTH
;

847 
§c16_offs
 = (§c16_off†+ 
h0
Ë& 
§c16_offs_msk
;

852 
	`dma_Êù
();

853 
	}
}

855 
	$vout_öô
()

858 
	}
}

860 
	$vout_föish
()

863 
	}
}

866 
	$vout_bœnk
()

868 
	}
}

870 
	$vout_£t_c⁄fig
(c⁄° 
gpulib_c⁄fig_t
 *
c⁄fig
)

872 
	}
}

	@src/gte.cpp

22 
	~"gã.h
"

23 
	~"psxmem.h
"

26 #i‡
deföed
(
__mùs__
)

27 
	#GTE_USE_NATIVE_DIVIDE


	)

35 #i‡!(
deföed
(
__¨m__
Ë|| deföed(
__mùs__
))

36 
	#PARANOID_OVERFLOW_CHECKING


	)

39 
	#VX
(
n
Ë“ < 3 ? 
psxRegs
.
CP2D
.
p
[¿<< 1].
sw
.
l
 :ÖsxRegs.CP2D.p[9].sw.l)

	)

40 
	#VY
(
n
Ë“ < 3 ? 
psxRegs
.
CP2D
.
p
[¿<< 1].
sw
.
h
 :ÖsxRegs.CP2D.p[10].sw.
l
)

	)

41 
	#VZ
(
n
Ë“ < 3 ? 
psxRegs
.
CP2D
.
p
[“ << 1Ë+ 1].
sw
.
l
 :ÖsxRegs.CP2D.p[11].sw.l)

	)

42 
	#MX11
(
n
Ë“ < 3 ? 
psxRegs
.
CP2C
.
p
[“ << 3)].
sw
.
l
 : 0)

	)

43 
	#MX12
(
n
Ë“ < 3 ? 
psxRegs
.
CP2C
.
p
[“ << 3)].
sw
.
h
 : 0)

	)

44 
	#MX13
(
n
Ë“ < 3 ? 
psxRegs
.
CP2C
.
p
[“ << 3Ë+ 1].
sw
.
l
 : 0)

	)

45 
	#MX21
(
n
Ë“ < 3 ? 
psxRegs
.
CP2C
.
p
[“ << 3Ë+ 1].
sw
.
h
 : 0)

	)

46 
	#MX22
(
n
Ë“ < 3 ? 
psxRegs
.
CP2C
.
p
[“ << 3Ë+ 2].
sw
.
l
 : 0)

	)

47 
	#MX23
(
n
Ë“ < 3 ? 
psxRegs
.
CP2C
.
p
[“ << 3Ë+ 2].
sw
.
h
 : 0)

	)

48 
	#MX31
(
n
Ë“ < 3 ? 
psxRegs
.
CP2C
.
p
[“ << 3Ë+ 3].
sw
.
l
 : 0)

	)

49 
	#MX32
(
n
Ë“ < 3 ? 
psxRegs
.
CP2C
.
p
[“ << 3Ë+ 3].
sw
.
h
 : 0)

	)

50 
	#MX33
(
n
Ë“ < 3 ? 
psxRegs
.
CP2C
.
p
[“ << 3Ë+ 4].
sw
.
l
 : 0)

	)

51 
	#CV1
(
n
Ë“ < 3 ? (
s32
)
psxRegs
.
CP2C
.
r
[“ << 3Ë+ 5] : 0)

	)

52 
	#CV2
(
n
Ë“ < 3 ? (
s32
)
psxRegs
.
CP2C
.
r
[“ << 3Ë+ 6] : 0)

	)

53 
	#CV3
(
n
Ë“ < 3 ? (
s32
)
psxRegs
.
CP2C
.
r
[“ << 3Ë+ 7] : 0)

	)

55 
	#fSX
(
n
Ë((
psxRegs
.
CP2D
.
p
)[(“Ë+ 12)].
sw
.
l
)

	)

56 
	#fSY
(
n
Ë((
psxRegs
.
CP2D
.
p
)[(“Ë+ 12)].
sw
.
h
)

	)

57 
	#fSZ
(
n
Ë((
psxRegs
.
CP2D
.
p
)[(“Ë+ 17)].
w
.
l
Ë

	)

59 
	#gãVXY0
 (
psxRegs
.
CP2D
.
r
[0])

	)

60 
	#gãVX0
 (
psxRegs
.
CP2D
.
p
[0].
sw
.
l
)

	)

61 
	#gãVY0
 (
psxRegs
.
CP2D
.
p
[0].
sw
.
h
)

	)

62 
	#gãVZ0
 (
psxRegs
.
CP2D
.
p
[1].
sw
.
l
)

	)

63 
	#gãVXY1
 (
psxRegs
.
CP2D
.
r
[2])

	)

64 
	#gãVX1
 (
psxRegs
.
CP2D
.
p
[2].
sw
.
l
)

	)

65 
	#gãVY1
 (
psxRegs
.
CP2D
.
p
[2].
sw
.
h
)

	)

66 
	#gãVZ1
 (
psxRegs
.
CP2D
.
p
[3].
sw
.
l
)

	)

67 
	#gãVXY2
 (
psxRegs
.
CP2D
.
r
[4])

	)

68 
	#gãVX2
 (
psxRegs
.
CP2D
.
p
[4].
sw
.
l
)

	)

69 
	#gãVY2
 (
psxRegs
.
CP2D
.
p
[4].
sw
.
h
)

	)

70 
	#gãVZ2
 (
psxRegs
.
CP2D
.
p
[5].
sw
.
l
)

	)

71 
	#gãRGB
 (
psxRegs
.
CP2D
.
r
[6])

	)

72 
	#gãR
 (
psxRegs
.
CP2D
.
p
[6].
b
.
l
)

	)

73 
	#gãG
 (
psxRegs
.
CP2D
.
p
[6].
b
.
h
)

	)

74 
	#gãB
 (
psxRegs
.
CP2D
.
p
[6].
b
.
h2
)

	)

75 
	#gãCODE
 (
psxRegs
.
CP2D
.
p
[6].
b
.
h3
)

	)

76 
	#gãOTZ
 (
psxRegs
.
CP2D
.
p
[7].
w
.
l
)

	)

77 
	#gãIR0
 (
psxRegs
.
CP2D
.
p
[8].
sw
.
l
)

	)

78 
	#gãIR1
 (
psxRegs
.
CP2D
.
p
[9].
sw
.
l
)

	)

79 
	#gãIR2
 (
psxRegs
.
CP2D
.
p
[10].
sw
.
l
)

	)

80 
	#gãIR3
 (
psxRegs
.
CP2D
.
p
[11].
sw
.
l
)

	)

81 
	#gãSXY0
 (
psxRegs
.
CP2D
.
r
[12])

	)

82 
	#gãSX0
 (
psxRegs
.
CP2D
.
p
[12].
sw
.
l
)

	)

83 
	#gãSY0
 (
psxRegs
.
CP2D
.
p
[12].
sw
.
h
)

	)

84 
	#gãSXY1
 (
psxRegs
.
CP2D
.
r
[13])

	)

85 
	#gãSX1
 (
psxRegs
.
CP2D
.
p
[13].
sw
.
l
)

	)

86 
	#gãSY1
 (
psxRegs
.
CP2D
.
p
[13].
sw
.
h
)

	)

87 
	#gãSXY2
 (
psxRegs
.
CP2D
.
r
[14])

	)

88 
	#gãSX2
 (
psxRegs
.
CP2D
.
p
[14].
sw
.
l
)

	)

89 
	#gãSY2
 (
psxRegs
.
CP2D
.
p
[14].
sw
.
h
)

	)

90 
	#gãSXYP
 (
psxRegs
.
CP2D
.
r
[15])

	)

91 
	#gãSXP
 (
psxRegs
.
CP2D
.
p
[15].
sw
.
l
)

	)

92 
	#gãSYP
 (
psxRegs
.
CP2D
.
p
[15].
sw
.
h
)

	)

93 
	#gãSZ0
 (
psxRegs
.
CP2D
.
p
[16].
w
.
l
)

	)

94 
	#gãSZ1
 (
psxRegs
.
CP2D
.
p
[17].
w
.
l
)

	)

95 
	#gãSZ2
 (
psxRegs
.
CP2D
.
p
[18].
w
.
l
)

	)

96 
	#gãSZ3
 (
psxRegs
.
CP2D
.
p
[19].
w
.
l
)

	)

97 
	#gãRGB0
 (
psxRegs
.
CP2D
.
r
[20])

	)

98 
	#gãR0
 (
psxRegs
.
CP2D
.
p
[20].
b
.
l
)

	)

99 
	#gãG0
 (
psxRegs
.
CP2D
.
p
[20].
b
.
h
)

	)

100 
	#gãB0
 (
psxRegs
.
CP2D
.
p
[20].
b
.
h2
)

	)

101 
	#gãCODE0
 (
psxRegs
.
CP2D
.
p
[20].
b
.
h3
)

	)

102 
	#gãRGB1
 (
psxRegs
.
CP2D
.
r
[21])

	)

103 
	#gãR1
 (
psxRegs
.
CP2D
.
p
[21].
b
.
l
)

	)

104 
	#gãG1
 (
psxRegs
.
CP2D
.
p
[21].
b
.
h
)

	)

105 
	#gãB1
 (
psxRegs
.
CP2D
.
p
[21].
b
.
h2
)

	)

106 
	#gãCODE1
 (
psxRegs
.
CP2D
.
p
[21].
b
.
h3
)

	)

107 
	#gãRGB2
 (
psxRegs
.
CP2D
.
r
[22])

	)

108 
	#gãR2
 (
psxRegs
.
CP2D
.
p
[22].
b
.
l
)

	)

109 
	#gãG2
 (
psxRegs
.
CP2D
.
p
[22].
b
.
h
)

	)

110 
	#gãB2
 (
psxRegs
.
CP2D
.
p
[22].
b
.
h2
)

	)

111 
	#gãCODE2
 (
psxRegs
.
CP2D
.
p
[22].
b
.
h3
)

	)

112 
	#gãRES1
 (
psxRegs
.
CP2D
.
r
[23])

	)

113 
	#gãMAC0
 (((
s32
 *)
psxRegs
.
CP2D
.
r
)[24])

	)

114 
	#gãMAC1
 (((
s32
 *)
psxRegs
.
CP2D
.
r
)[25])

	)

115 
	#gãMAC2
 (((
s32
 *)
psxRegs
.
CP2D
.
r
)[26])

	)

116 
	#gãMAC3
 (((
s32
 *)
psxRegs
.
CP2D
.
r
)[27])

	)

117 
	#gãIRGB
 (
psxRegs
.
CP2D
.
r
[28])

	)

118 
	#gãORGB
 (
psxRegs
.
CP2D
.
r
[29])

	)

119 
	#gãLZCS
 (
psxRegs
.
CP2D
.
r
[30])

	)

120 
	#gãLZCR
 (
psxRegs
.
CP2D
.
r
[31])

	)

122 
	#gãR11R12
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[0])

	)

123 
	#gãR22R23
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[2])

	)

124 
	#gãR11
 (
psxRegs
.
CP2C
.
p
[0].
sw
.
l
)

	)

125 
	#gãR12
 (
psxRegs
.
CP2C
.
p
[0].
sw
.
h
)

	)

126 
	#gãR13
 (
psxRegs
.
CP2C
.
p
[1].
sw
.
l
)

	)

127 
	#gãR21
 (
psxRegs
.
CP2C
.
p
[1].
sw
.
h
)

	)

128 
	#gãR22
 (
psxRegs
.
CP2C
.
p
[2].
sw
.
l
)

	)

129 
	#gãR23
 (
psxRegs
.
CP2C
.
p
[2].
sw
.
h
)

	)

130 
	#gãR31
 (
psxRegs
.
CP2C
.
p
[3].
sw
.
l
)

	)

131 
	#gãR32
 (
psxRegs
.
CP2C
.
p
[3].
sw
.
h
)

	)

132 
	#gãR33
 (
psxRegs
.
CP2C
.
p
[4].
sw
.
l
)

	)

133 
	#gãTRX
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[5])

	)

134 
	#gãTRY
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[6])

	)

135 
	#gãTRZ
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[7])

	)

136 
	#gãL11
 (
psxRegs
.
CP2C
.
p
[8].
sw
.
l
)

	)

137 
	#gãL12
 (
psxRegs
.
CP2C
.
p
[8].
sw
.
h
)

	)

138 
	#gãL13
 (
psxRegs
.
CP2C
.
p
[9].
sw
.
l
)

	)

139 
	#gãL21
 (
psxRegs
.
CP2C
.
p
[9].
sw
.
h
)

	)

140 
	#gãL22
 (
psxRegs
.
CP2C
.
p
[10].
sw
.
l
)

	)

141 
	#gãL23
 (
psxRegs
.
CP2C
.
p
[10].
sw
.
h
)

	)

142 
	#gãL31
 (
psxRegs
.
CP2C
.
p
[11].
sw
.
l
)

	)

143 
	#gãL32
 (
psxRegs
.
CP2C
.
p
[11].
sw
.
h
)

	)

144 
	#gãL33
 (
psxRegs
.
CP2C
.
p
[12].
sw
.
l
)

	)

145 
	#gãRBK
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[13])

	)

146 
	#gãGBK
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[14])

	)

147 
	#gãBBK
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[15])

	)

148 
	#gãLR1
 (
psxRegs
.
CP2C
.
p
[16].
sw
.
l
)

	)

149 
	#gãLR2
 (
psxRegs
.
CP2C
.
p
[16].
sw
.
h
)

	)

150 
	#gãLR3
 (
psxRegs
.
CP2C
.
p
[17].
sw
.
l
)

	)

151 
	#gãLG1
 (
psxRegs
.
CP2C
.
p
[17].
sw
.
h
)

	)

152 
	#gãLG2
 (
psxRegs
.
CP2C
.
p
[18].
sw
.
l
)

	)

153 
	#gãLG3
 (
psxRegs
.
CP2C
.
p
[18].
sw
.
h
)

	)

154 
	#gãLB1
 (
psxRegs
.
CP2C
.
p
[19].
sw
.
l
)

	)

155 
	#gãLB2
 (
psxRegs
.
CP2C
.
p
[19].
sw
.
h
)

	)

156 
	#gãLB3
 (
psxRegs
.
CP2C
.
p
[20].
sw
.
l
)

	)

157 
	#gãRFC
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[21])

	)

158 
	#gãGFC
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[22])

	)

159 
	#gãBFC
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[23])

	)

160 
	#gãOFX
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[24])

	)

161 
	#gãOFY
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[25])

	)

169 
	#gãH
 (
psxRegs
.
CP2C
.
p
[26].
w
.
l
)

	)

171 
	#gãDQA
 (
psxRegs
.
CP2C
.
p
[27].
sw
.
l
)

	)

172 
	#gãDQB
 (((
s32
 *)
psxRegs
.
CP2C
.
r
)[28])

	)

173 
	#gãZSF3
 (
psxRegs
.
CP2C
.
p
[29].
sw
.
l
)

	)

174 
	#gãZSF4
 (
psxRegs
.
CP2C
.
p
[30].
sw
.
l
)

	)

175 
	#gãFLAG
 (
psxRegs
.
CP2C
.
r
[31])

	)

177 
	#GTE_OP
(
›
Ë((› >> 20Ë& 31)

	)

178 
	#GTE_SF
(
›
Ë((› >> 19Ë& 1)

	)

179 
	#GTE_MX
(
›
Ë((› >> 17Ë& 3)

	)

180 
	#GTE_V
(
›
Ë((› >> 15Ë& 3)

	)

181 
	#GTE_CV
(
›
Ë((› >> 13Ë& 3)

	)

182 
	#GTE_CD
(
›
Ë((› >> 11 ) & 3Ë

	)

183 
	#GTE_LM
(
›
Ë((› >> 10 ) & 1)

	)

184 
	#GTE_CT
(
›
Ë((› >> 6Ë& 15Ë

	)

185 
	#GTE_FUNCT
(
›
Ë(› & 63)

	)

187 
	#gã›
 (
psxRegs
.
code
 & 0x1ffffff)

	)

191 
INLINE
 
s64
 
	$BOUNDS
(
s64
 
n_vÆue
, s64 
n_max
, 
n_maxÊag
, s64 
n_mö
, 
n_möÊag
) {

192 i‡(
n_vÆue
 > 
n_max
) {

193 
gãFLAG
 |
n_maxÊag
;

194 } i‡(
n_vÆue
 < 
n_mö
) {

195 
gãFLAG
 |
n_möÊag
;

197  
n_vÆue
;

198 
	}
}

200 
INLINE
 
s32
 
	$LIM
(
s32
 
vÆue
, s32 
max
, s32 
mö
, 
u32
 
Êag
) {

201 
s32
 
ªt
 = 
vÆue
;

202 i‡(
vÆue
 > 
max
) {

203 
gãFLAG
 |
Êag
;

204 
ªt
 = 
max
;

205 } i‡(
vÆue
 < 
mö
) {

206 
gãFLAG
 |
Êag
;

207 
ªt
 = 
mö
;

209  
ªt
;

210 
	}
}

212 
	#A1
(
a
Ë
	`BOUNDS
(◊), 0x7fffffff, (1 << 30), -(
s64
)0x80000000, (1 << 31Ë| (1 << 27))

	)

213 
	#A2
(
a
Ë
	`BOUNDS
(◊), 0x7fffffff, (1 << 29), -(
s64
)0x80000000, (1 << 31Ë| (1 << 26))

	)

214 
	#A3
(
a
Ë
	`BOUNDS
(◊), 0x7fffffff, (1 << 28), -(
s64
)0x80000000, (1 << 31Ë| (1 << 25))

	)

215 
	#limB1
(
a
, 
l
Ë
	`LIM
(◊), 0x7fff, -0x8000 * !l, (1 << 31Ë| (1 << 24))

	)

216 
	#limB2
(
a
, 
l
Ë
	`LIM
(◊), 0x7fff, -0x8000 * !l, (1 << 31Ë| (1 << 23))

	)

217 
	#limB3
(
a
, 
l
Ë
	`LIM
(◊), 0x7fff, -0x8000 * !l, (1 << 22Ë)

	)

218 
	#limC1
(
a
Ë
	`LIM
(◊), 0x00ff, 0x0000, (1 << 21Ë)

	)

219 
	#limC2
(
a
Ë
	`LIM
(◊), 0x00ff, 0x0000, (1 << 20Ë)

	)

220 
	#limC3
(
a
Ë
	`LIM
(◊), 0x00ff, 0x0000, (1 << 19Ë)

	)

221 
	#limD
(
a
Ë
	`LIM
(◊), 0xffff, 0x0000, (1 << 31Ë| (1 << 18))

	)

223 
INLINE
 
u32
 
	$limE
(
u32
 
ªsu…
) {

224 i‡(
ªsu…
 > 0x1ffff) {

225 
gãFLAG
 |= (1 << 31) | (1 << 17);

229  
ªsu…
;

230 
	}
}

232 
	#F
(
a
Ë
	`BOUNDS
(◊), 0x7fffffff, (1 << 31Ë| (1 << 16), -(
s64
)0x80000000, (1 << 31Ë| (1 << 15))

	)

233 
	#limG1
(
a
Ë
	`LIM
(◊), 0x3ff, -0x400, (1 << 31Ë| (1 << 14))

	)

234 
	#limG2
(
a
Ë
	`LIM
(◊), 0x3ff, -0x400, (1 << 31Ë| (1 << 13))

	)

239 
	#limH
(
a
Ë
	`LIM
(◊), 0x1000, 0x0000, (1 << 12))

	)

242 #ifde‡
PARANOID_OVERFLOW_CHECKING


243 
	#A1U
 
A1


	)

244 
	#A2U
 
A2


	)

245 
	#A3U
 
A3


	)

249 
	#A1U
(
x
Ë(x)

	)

250 
	#A2U
(
x
Ë(x)

	)

251 
	#A3U
(
x
Ë(x)

	)

255 #ifde‡
GTE_USE_NATIVE_DIVIDE


256 
INLINE
 
u32
 
	$DIVIDE
(
u16
 
n
, u16 
d
) {

257 i‡(
n
 < 
d
 * 2) {

258  ((
u32
)
n
 << 16Ë/ 
d
;

261 
	}
}

263 
	~"gã_divide.h
"

269 
u32
 
	$gãˇlcMFC2
(
ªg
) {

270 
ªg
) {

278 
psxRegs
.
CP2D
.
r
[
ªg
] = (
s32
ÌsxRegs.CP2D.
p
[ªg].
sw
.
l
;

286 
psxRegs
.
CP2D
.
r
[
ªg
] = (
u32
ÌsxRegs.CP2D.
p
[ªg].
w
.
l
;

290 
psxRegs
.
CP2D
.
r
[
ªg
] = 
gãSXY2
;

295 
psxRegs
.
CP2D
.
r
[
ªg
] = 
	`LIM
(
gãIR1
 >> 7, 0x1f, 0, 0) |

296 (
	`LIM
(
gãIR2
 >> 7, 0x1f, 0, 0) << 5) |

297 (
	`LIM
(
gãIR3
 >> 7, 0x1f, 0, 0) << 10);

300  
psxRegs
.
CP2D
.
r
[
ªg
];

301 
	}
}

306 
	$gãˇlcMTC2
(
u32
 
vÆue
, 
ªg
) {

307 
ªg
) {

309 
gãSXY0
 = 
gãSXY1
;

310 
gãSXY1
 = 
gãSXY2
;

311 
gãSXY2
 = 
vÆue
;

312 
gãSXYP
 = 
vÆue
;

316 
gãIRGB
 = 
vÆue
;

317 
gãIR1
 = (
vÆue
 & 0x1f) << 7;

318 
gãIR2
 = (
vÆue
 & 0x3e0) << 2;

319 
gãIR3
 = (
vÆue
 & 0x7c00) >> 3;

324 
a
;

325 
gãLZCS
 = 
vÆue
;

327 
a
 = 
gãLZCS
;

328 i‡(
a
 > 0) {

329 
i
;

330 
i
 = 31; (
a
 & (1 << i)) == 0 && i >= 0; i--);

331 
gãLZCR
 = 31 - 
i
;

332 } i‡(
a
 < 0) {

333 
i
;

334 
a
 ^= 0xffffffff;

335 
i
=31; (
a
 & (1 << i)) == 0 && i >= 0; i--);

336 
gãLZCR
 = 31 - 
i
;

338 
gãLZCR
 = 32;

347 
psxRegs
.
CP2D
.
r
[
ªg
] = 
vÆue
;

349 
	}
}

351 
	$gãˇlcCTC2
(
u32
 
vÆue
, 
ªg
) {

352 
ªg
) {

360 
vÆue
 = (
s32
)(
s16
)value;

364 
vÆue
 = value & 0x7ffff000;

365 i‡(
vÆue
 & 0x7f87e000) value |= 0x80000000;

369 
psxRegs
.
CP2C
.
r
[
ªg
] = 
vÆue
;

370 
	}
}

372 
	$gãMFC2
() {

373 i‡(!
_Rt_
) ;

374 
psxRegs
.
GPR
.
r
[
_Rt_
] = 
	`gãˇlcMFC2
(
_Rd_
);

375 
	}
}

377 
	$gãCFC2
() {

378 i‡(!
_Rt_
) ;

379 
psxRegs
.
GPR
.
r
[
_Rt_
] =ÖsxRegs.
CP2C
.r[
_Rd_
];

380 
	}
}

382 
	$gãMTC2
() {

383 
	`gãˇlcMTC2
(
psxRegs
.
GPR
.
r
[
_Rt_
], 
_Rd_
);

384 
	}
}

386 
	$gãCTC2
() {

387 
	`gãˇlcCTC2
(
psxRegs
.
GPR
.
r
[
_Rt_
], 
_Rd_
);

388 
	}
}

390 
	#_oB_
 (
psxRegs
.
GPR
.
r
[
_Rs_
] + 
_Imm_
)

	)

392 
	$gãLWC2
() {

393 
	`gãˇlcMTC2
(
	`psxMemRód32
(
_oB_
), 
_Rt_
);

394 
	}
}

396 
	$gãSWC2
() {

397 
	`psxMemWrôe32
(
_oB_
, 
	`gãˇlcMFC2
(
_Rt_
));

398 
	}
}

400 
	$gãRTPS
() {

401 
quŸõ¡
;

403 #ifde‡
GTE_LOG


404 
	`GTE_LOG
("GTE RTPS\n");

406 
gãFLAG
 = 0;

408 
gãMAC1
 = 
	`A1
((((
s64
)
gãTRX
 << 12Ë+ (
gãR11
 * 
gãVX0
Ë+ (
gãR12
 * 
gãVY0
Ë+ (
gãR13
 * 
gãVZ0
)) >> 12);

409 
gãMAC2
 = 
	`A2
((((
s64
)
gãTRY
 << 12Ë+ (
gãR21
 * 
gãVX0
Ë+ (
gãR22
 * 
gãVY0
Ë+ (
gãR23
 * 
gãVZ0
)) >> 12);

410 
gãMAC3
 = 
	`A3
((((
s64
)
gãTRZ
 << 12Ë+ (
gãR31
 * 
gãVX0
Ë+ (
gãR32
 * 
gãVY0
Ë+ (
gãR33
 * 
gãVZ0
)) >> 12);

411 
gãIR1
 = 
	`limB1
(
gãMAC1
, 0);

412 
gãIR2
 = 
	`limB2
(
gãMAC2
, 0);

413 
gãIR3
 = 
	`limB3
(
gãMAC3
, 0);

414 
gãSZ0
 = 
gãSZ1
;

415 
gãSZ1
 = 
gãSZ2
;

416 
gãSZ2
 = 
gãSZ3
;

417 
gãSZ3
 = 
	`limD
(
gãMAC3
);

418 
quŸõ¡
 = 
	`limE
(
	`DIVIDE
(
gãH
, 
gãSZ3
));

419 
gãSXY0
 = 
gãSXY1
;

420 
gãSXY1
 = 
gãSXY2
;

421 
gãSX2
 = 
	`limG1
(
	`F
((
s64
)
gãOFX
 + ((s64)
gãIR1
 * 
quŸõ¡
)) >> 16);

422 
gãSY2
 = 
	`limG2
(
	`F
((
s64
)
gãOFY
 + ((s64)
gãIR2
 * 
quŸõ¡
)) >> 16);

428 
s64
 
tmp
 = (s64)
gãDQB
 + ((s64)
gãDQA
 * 
quŸõ¡
);

429 
gãMAC0
 = 
	`F
(
tmp
);

430 
gãIR0
 = 
	`limH
(
tmp
 >> 12);

431 
	}
}

433 
	$gãRTPT
() {

434 
quŸõ¡
;

435 
v
;

436 
s32
 
vx
, 
vy
, 
vz
;

438 #ifde‡
GTE_LOG


439 
	`GTE_LOG
("GTE RTPT\n");

441 
gãFLAG
 = 0;

443 
gãSZ0
 = 
gãSZ3
;

444 
v
 = 0; v < 3; v++) {

445 
vx
 = 
	`VX
(
v
);

446 
vy
 = 
	`VY
(
v
);

447 
vz
 = 
	`VZ
(
v
);

448 
gãMAC1
 = 
	`A1
((((
s64
)
gãTRX
 << 12Ë+ (
gãR11
 * 
vx
Ë+ (
gãR12
 * 
vy
Ë+ (
gãR13
 * 
vz
)) >> 12);

449 
gãMAC2
 = 
	`A2
((((
s64
)
gãTRY
 << 12Ë+ (
gãR21
 * 
vx
Ë+ (
gãR22
 * 
vy
Ë+ (
gãR23
 * 
vz
)) >> 12);

450 
gãMAC3
 = 
	`A3
((((
s64
)
gãTRZ
 << 12Ë+ (
gãR31
 * 
vx
Ë+ (
gãR32
 * 
vy
Ë+ (
gãR33
 * 
vz
)) >> 12);

451 
gãIR1
 = 
	`limB1
(
gãMAC1
, 0);

452 
gãIR2
 = 
	`limB2
(
gãMAC2
, 0);

453 
gãIR3
 = 
	`limB3
(
gãMAC3
, 0);

454 
	`fSZ
(
v
Ë
	`limD
(
gãMAC3
);

455 
quŸõ¡
 = 
	`limE
(
	`DIVIDE
(
gãH
, 
	`fSZ
(
v
)));

456 
	`fSX
(
v
Ë
	`limG1
(
	`F
((
s64
)
gãOFX
 + ((s64)
gãIR1
 * 
quŸõ¡
)) >> 16);

457 
	`fSY
(
v
Ë
	`limG2
(
	`F
((
s64
)
gãOFY
 + ((s64)
gãIR2
 * 
quŸõ¡
)) >> 16);

461 
s64
 
tmp
 = (s64)
gãDQB
 + ((s64)
gãDQA
 * 
quŸõ¡
);

462 
gãMAC0
 = 
	`F
(
tmp
);

463 
gãIR0
 = 
	`limH
(
tmp
 >> 12);

464 
	}
}

466 
	$gãMVMVA
() {

467 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

468 
mx
 = 
	`GTE_MX
(
gã›
);

469 
v
 = 
	`GTE_V
(
gã›
);

470 
cv
 = 
	`GTE_CV
(
gã›
);

471 
lm
 = 
	`GTE_LM
(
gã›
);

472 
s32
 
vx
 = 
	`VX
(
v
);

473 
s32
 
vy
 = 
	`VY
(
v
);

474 
s32
 
vz
 = 
	`VZ
(
v
);

476 #ifde‡
GTE_LOG


477 
	`GTE_LOG
("GTE MVMVA\n");

479 
gãFLAG
 = 0;

481 
gãMAC1
 = 
	`A1
((((
s64
)
	`CV1
(
cv
Ë<< 12Ë+ (
	`MX11
(
mx
Ë* 
vx
Ë+ (
	`MX12
(mxË* 
vy
Ë+ (
	`MX13
(mxË* 
vz
)Ë>> 
shi·
);

482 
gãMAC2
 = 
	`A2
((((
s64
)
	`CV2
(
cv
Ë<< 12Ë+ (
	`MX21
(
mx
Ë* 
vx
Ë+ (
	`MX22
(mxË* 
vy
Ë+ (
	`MX23
(mxË* 
vz
)Ë>> 
shi·
);

483 
gãMAC3
 = 
	`A3
((((
s64
)
	`CV3
(
cv
Ë<< 12Ë+ (
	`MX31
(
mx
Ë* 
vx
Ë+ (
	`MX32
(mxË* 
vy
Ë+ (
	`MX33
(mxË* 
vz
)Ë>> 
shi·
);

485 
gãIR1
 = 
	`limB1
(
gãMAC1
, 
lm
);

486 
gãIR2
 = 
	`limB2
(
gãMAC2
, 
lm
);

487 
gãIR3
 = 
	`limB3
(
gãMAC3
, 
lm
);

488 
	}
}

490 
	$gãNCLIP
() {

491 #ifde‡
GTE_LOG


492 
	`GTE_LOG
("GTE NCLIP\n");

494 
gãFLAG
 = 0;

496 
gãMAC0
 = 
	`F
((
s64
)
gãSX0
 * (
gãSY1
 - 
gãSY2
) +

497 
gãSX1
 * (
gãSY2
 - 
gãSY0
) +

498 
gãSX2
 * (
gãSY0
 - 
gãSY1
));

499 
	}
}

501 
	$gãAVSZ3
() {

502 #ifde‡
GTE_LOG


503 
	`GTE_LOG
("GTE AVSZ3\n");

505 
gãFLAG
 = 0;

507 
gãMAC0
 = 
	`F
((
s64
)
gãZSF3
 * (
gãSZ1
 + 
gãSZ2
 + 
gãSZ3
));

508 
gãOTZ
 = 
	`limD
(
gãMAC0
 >> 12);

509 
	}
}

511 
	$gãAVSZ4
() {

512 #ifde‡
GTE_LOG


513 
	`GTE_LOG
("GTE AVSZ4\n");

515 
gãFLAG
 = 0;

517 
gãMAC0
 = 
	`F
((
s64
)
gãZSF4
 * (
gãSZ0
 + 
gãSZ1
 + 
gãSZ2
 + 
gãSZ3
));

518 
gãOTZ
 = 
	`limD
(
gãMAC0
 >> 12);

519 
	}
}

521 
	$gãSQR
() {

522 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

523 
lm
 = 
	`GTE_LM
(
gã›
);

525 #ifde‡
GTE_LOG


526 
	`GTE_LOG
("GTE SQR\n");

528 
gãFLAG
 = 0;

530 
gãMAC1
 = (
gãIR1
 * gãIR1Ë>> 
shi·
;

531 
gãMAC2
 = (
gãIR2
 * gãIR2Ë>> 
shi·
;

532 
gãMAC3
 = (
gãIR3
 * gãIR3Ë>> 
shi·
;

533 
gãIR1
 = 
	`limB1
(
gãMAC1
, 
lm
);

534 
gãIR2
 = 
	`limB2
(
gãMAC2
, 
lm
);

535 
gãIR3
 = 
	`limB3
(
gãMAC3
, 
lm
);

536 
	}
}

538 
	$gãNCCS
() {

539 #ifde‡
GTE_LOG


540 
	`GTE_LOG
("GTE NCCS\n");

542 
gãFLAG
 = 0;

544 
gãMAC1
 = ((
s64
)(
gãL11
 * 
gãVX0
Ë+ (
gãL12
 * 
gãVY0
Ë+ (
gãL13
 * 
gãVZ0
)) >> 12;

545 
gãMAC2
 = ((
s64
)(
gãL21
 * 
gãVX0
Ë+ (
gãL22
 * 
gãVY0
Ë+ (
gãL23
 * 
gãVZ0
)) >> 12;

546 
gãMAC3
 = ((
s64
)(
gãL31
 * 
gãVX0
Ë+ (
gãL32
 * 
gãVY0
Ë+ (
gãL33
 * 
gãVZ0
)) >> 12;

547 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

548 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

549 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

550 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

551 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

552 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

553 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

554 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

555 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

556 
gãMAC1
 = ((
s32
)
gãR
 * 
gãIR1
) >> 8;

557 
gãMAC2
 = ((
s32
)
gãG
 * 
gãIR2
) >> 8;

558 
gãMAC3
 = ((
s32
)
gãB
 * 
gãIR3
) >> 8;

559 
gãIR1
 = 
gãMAC1
;

560 
gãIR2
 = 
gãMAC2
;

561 
gãIR3
 = 
gãMAC3
;

563 
gãRGB0
 = 
gãRGB1
;

564 
gãRGB1
 = 
gãRGB2
;

565 
gãCODE2
 = 
gãCODE
;

566 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

567 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

568 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

569 
	}
}

571 
	$gãNCCT
() {

572 
v
;

573 
s32
 
vx
, 
vy
, 
vz
;

575 #ifde‡
GTE_LOG


576 
	`GTE_LOG
("GTE NCCT\n");

578 
gãFLAG
 = 0;

580 
v
 = 0; v < 3; v++) {

581 
vx
 = 
	`VX
(
v
);

582 
vy
 = 
	`VY
(
v
);

583 
vz
 = 
	`VZ
(
v
);

584 
gãMAC1
 = ((
s64
)(
gãL11
 * 
vx
Ë+ (
gãL12
 * 
vy
Ë+ (
gãL13
 * 
vz
)) >> 12;

585 
gãMAC2
 = ((
s64
)(
gãL21
 * 
vx
Ë+ (
gãL22
 * 
vy
Ë+ (
gãL23
 * 
vz
)) >> 12;

586 
gãMAC3
 = ((
s64
)(
gãL31
 * 
vx
Ë+ (
gãL32
 * 
vy
Ë+ (
gãL33
 * 
vz
)) >> 12;

587 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

588 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

589 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

590 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

591 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

592 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

593 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

594 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

595 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

596 
gãMAC1
 = ((
s32
)
gãR
 * 
gãIR1
) >> 8;

597 
gãMAC2
 = ((
s32
)
gãG
 * 
gãIR2
) >> 8;

598 
gãMAC3
 = ((
s32
)
gãB
 * 
gãIR3
) >> 8;

600 
gãRGB0
 = 
gãRGB1
;

601 
gãRGB1
 = 
gãRGB2
;

602 
gãCODE2
 = 
gãCODE
;

603 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

604 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

605 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

607 
gãIR1
 = 
gãMAC1
;

608 
gãIR2
 = 
gãMAC2
;

609 
gãIR3
 = 
gãMAC3
;

610 
	}
}

612 
	$gãNCDS
() {

613 #ifde‡
GTE_LOG


614 
	`GTE_LOG
("GTE NCDS\n");

616 
gãFLAG
 = 0;

618 
gãMAC1
 = ((
s64
)(
gãL11
 * 
gãVX0
Ë+ (
gãL12
 * 
gãVY0
Ë+ (
gãL13
 * 
gãVZ0
)) >> 12;

619 
gãMAC2
 = ((
s64
)(
gãL21
 * 
gãVX0
Ë+ (
gãL22
 * 
gãVY0
Ë+ (
gãL23
 * 
gãVZ0
)) >> 12;

620 
gãMAC3
 = ((
s64
)(
gãL31
 * 
gãVX0
Ë+ (
gãL32
 * 
gãVY0
Ë+ (
gãL33
 * 
gãVZ0
)) >> 12;

621 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

622 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

623 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

624 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

625 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

626 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

627 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

628 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

629 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

630 
gãMAC1
 = (((
gãR
 << 4Ë* 
gãIR1
Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - ((gteR * gteIR1) >> 8)), 0))) >> 12;

631 
gãMAC2
 = (((
gãG
 << 4Ë* 
gãIR2
Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
((
s64
)
gãGFC
 - ((gteG * gteIR2) >> 8)), 0))) >> 12;

632 
gãMAC3
 = (((
gãB
 << 4Ë* 
gãIR3
Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
((
s64
)
gãBFC
 - ((gteB * gteIR3) >> 8)), 0))) >> 12;

633 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

634 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

635 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

637 
gãRGB0
 = 
gãRGB1
;

638 
gãRGB1
 = 
gãRGB2
;

639 
gãCODE2
 = 
gãCODE
;

640 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

641 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

642 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

643 
	}
}

645 
	$gãNCDT
() {

646 
v
;

647 
s32
 
vx
, 
vy
, 
vz
;

649 #ifde‡
GTE_LOG


650 
	`GTE_LOG
("GTE NCDT\n");

652 
gãFLAG
 = 0;

654 
v
 = 0; v < 3; v++) {

655 
vx
 = 
	`VX
(
v
);

656 
vy
 = 
	`VY
(
v
);

657 
vz
 = 
	`VZ
(
v
);

658 
gãMAC1
 = ((
s64
)(
gãL11
 * 
vx
Ë+ (
gãL12
 * 
vy
Ë+ (
gãL13
 * 
vz
)) >> 12;

659 
gãMAC2
 = ((
s64
)(
gãL21
 * 
vx
Ë+ (
gãL22
 * 
vy
Ë+ (
gãL23
 * 
vz
)) >> 12;

660 
gãMAC3
 = ((
s64
)(
gãL31
 * 
vx
Ë+ (
gãL32
 * 
vy
Ë+ (
gãL33
 * 
vz
)) >> 12;

661 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

662 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

663 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

664 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

665 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

666 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

667 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

668 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

669 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

670 
gãMAC1
 = (((
gãR
 << 4Ë* 
gãIR1
Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - ((gteR * gteIR1) >> 8)), 0))) >> 12;

671 
gãMAC2
 = (((
gãG
 << 4Ë* 
gãIR2
Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
((
s64
)
gãGFC
 - ((gteG * gteIR2) >> 8)), 0))) >> 12;

672 
gãMAC3
 = (((
gãB
 << 4Ë* 
gãIR3
Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
((
s64
)
gãBFC
 - ((gteB * gteIR3) >> 8)), 0))) >> 12;

674 
gãRGB0
 = 
gãRGB1
;

675 
gãRGB1
 = 
gãRGB2
;

676 
gãCODE2
 = 
gãCODE
;

677 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

678 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

679 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

681 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

682 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

683 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

684 
	}
}

686 
	$gãOP
() {

687 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

688 
lm
 = 
	`GTE_LM
(
gã›
);

690 #ifde‡
GTE_LOG


691 
	`GTE_LOG
("GTE OP\n");

693 
gãFLAG
 = 0;

695 
gãMAC1
 = ((
gãR22
 * 
gãIR3
Ë- (
gãR33
 * 
gãIR2
)Ë>> 
shi·
;

696 
gãMAC2
 = ((
gãR33
 * 
gãIR1
Ë- (
gãR11
 * 
gãIR3
)Ë>> 
shi·
;

697 
gãMAC3
 = ((
gãR11
 * 
gãIR2
Ë- (
gãR22
 * 
gãIR1
)Ë>> 
shi·
;

698 
gãIR1
 = 
	`limB1
(
gãMAC1
, 
lm
);

699 
gãIR2
 = 
	`limB2
(
gãMAC2
, 
lm
);

700 
gãIR3
 = 
	`limB3
(
gãMAC3
, 
lm
);

701 
	}
}

703 
	$gãDCPL
() {

704 
lm
 = 
	`GTE_LM
(
gã›
);

706 
s32
 
RIR1
 = ((s32)
gãR
 * 
gãIR1
) >> 8;

707 
s32
 
GIR2
 = ((s32)
gãG
 * 
gãIR2
) >> 8;

708 
s32
 
BIR3
 = ((s32)
gãB
 * 
gãIR3
) >> 8;

710 #ifde‡
GTE_LOG


711 
	`GTE_LOG
("GTE DCPL\n");

713 
gãFLAG
 = 0;

715 
gãMAC1
 = 
RIR1
 + ((
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - RIR1), 0)) >> 12);

716 
gãMAC2
 = 
GIR2
 + ((
gãIR0
 * 
	`limB1
(
	`A2U
((
s64
)
gãGFC
 - GIR2), 0)) >> 12);

717 
gãMAC3
 = 
BIR3
 + ((
gãIR0
 * 
	`limB1
(
	`A3U
((
s64
)
gãBFC
 - BIR3), 0)) >> 12);

719 
gãIR1
 = 
	`limB1
(
gãMAC1
, 
lm
);

720 
gãIR2
 = 
	`limB2
(
gãMAC2
, 
lm
);

721 
gãIR3
 = 
	`limB3
(
gãMAC3
, 
lm
);

723 
gãRGB0
 = 
gãRGB1
;

724 
gãRGB1
 = 
gãRGB2
;

725 
gãCODE2
 = 
gãCODE
;

726 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

727 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

728 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

729 
	}
}

731 
	$gãGPF
() {

732 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

734 #ifde‡
GTE_LOG


735 
	`GTE_LOG
("GTE GPF\n");

737 
gãFLAG
 = 0;

739 
gãMAC1
 = (
gãIR0
 * 
gãIR1
Ë>> 
shi·
;

740 
gãMAC2
 = (
gãIR0
 * 
gãIR2
Ë>> 
shi·
;

741 
gãMAC3
 = (
gãIR0
 * 
gãIR3
Ë>> 
shi·
;

742 
gãIR1
 = 
	`limB1
(
gãMAC1
, 0);

743 
gãIR2
 = 
	`limB2
(
gãMAC2
, 0);

744 
gãIR3
 = 
	`limB3
(
gãMAC3
, 0);

746 
gãRGB0
 = 
gãRGB1
;

747 
gãRGB1
 = 
gãRGB2
;

748 
gãCODE2
 = 
gãCODE
;

749 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

750 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

751 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

752 
	}
}

754 
	$gãGPL
() {

755 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

757 #ifde‡
GTE_LOG


758 
	`GTE_LOG
("GTE GPL\n");

760 
gãFLAG
 = 0;

762 
gãMAC1
 = 
	`A1
((((
s64
)gãMAC1 << 
shi·
Ë+ (
gãIR0
 * 
gãIR1
)) >> shift);

763 
gãMAC2
 = 
	`A2
((((
s64
)gãMAC2 << 
shi·
Ë+ (
gãIR0
 * 
gãIR2
)) >> shift);

764 
gãMAC3
 = 
	`A3
((((
s64
)gãMAC3 << 
shi·
Ë+ (
gãIR0
 * 
gãIR3
)) >> shift);

765 
gãIR1
 = 
	`limB1
(
gãMAC1
, 0);

766 
gãIR2
 = 
	`limB2
(
gãMAC2
, 0);

767 
gãIR3
 = 
	`limB3
(
gãMAC3
, 0);

769 
gãRGB0
 = 
gãRGB1
;

770 
gãRGB1
 = 
gãRGB2
;

771 
gãCODE2
 = 
gãCODE
;

772 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

773 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

774 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

775 
	}
}

777 
	$gãDPCS
() {

778 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

780 #ifde‡
GTE_LOG


781 
	`GTE_LOG
("GTE DPCS\n");

783 
gãFLAG
 = 0;

785 
gãMAC1
 = ((
gãR
 << 16Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
(((
s64
)
gãRFC
 - (gãR << 4)Ë<< (12 - 
shi·
)), 0))) >> 12;

786 
gãMAC2
 = ((
gãG
 << 16Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
(((
s64
)
gãGFC
 - (gãG << 4)Ë<< (12 - 
shi·
)), 0))) >> 12;

787 
gãMAC3
 = ((
gãB
 << 16Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
(((
s64
)
gãBFC
 - (gãB << 4)Ë<< (12 - 
shi·
)), 0))) >> 12;

789 
gãIR1
 = 
	`limB1
(
gãMAC1
, 0);

790 
gãIR2
 = 
	`limB2
(
gãMAC2
, 0);

791 
gãIR3
 = 
	`limB3
(
gãMAC3
, 0);

792 
gãRGB0
 = 
gãRGB1
;

793 
gãRGB1
 = 
gãRGB2
;

794 
gãCODE2
 = 
gãCODE
;

795 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

796 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

797 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

798 
	}
}

800 
	$gãDPCT
() {

801 
v
;

803 #ifde‡
GTE_LOG


804 
	`GTE_LOG
("GTE DPCT\n");

806 
gãFLAG
 = 0;

808 
v
 = 0; v < 3; v++) {

809 
gãMAC1
 = ((
gãR0
 << 16Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - (gteR0 << 4)), 0))) >> 12;

810 
gãMAC2
 = ((
gãG0
 << 16Ë+ (
gãIR0
 * 
	`limB1
(
	`A2U
((
s64
)
gãGFC
 - (gteG0 << 4)), 0))) >> 12;

811 
gãMAC3
 = ((
gãB0
 << 16Ë+ (
gãIR0
 * 
	`limB1
(
	`A3U
((
s64
)
gãBFC
 - (gteB0 << 4)), 0))) >> 12;

813 
gãRGB0
 = 
gãRGB1
;

814 
gãRGB1
 = 
gãRGB2
;

815 
gãCODE2
 = 
gãCODE
;

816 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

817 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

818 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

820 
gãIR1
 = 
	`limB1
(
gãMAC1
, 0);

821 
gãIR2
 = 
	`limB2
(
gãMAC2
, 0);

822 
gãIR3
 = 
	`limB3
(
gãMAC3
, 0);

823 
	}
}

825 
	$gãNCS
() {

826 #ifde‡
GTE_LOG


827 
	`GTE_LOG
("GTE NCS\n");

829 
gãFLAG
 = 0;

831 
gãMAC1
 = ((
s64
)(
gãL11
 * 
gãVX0
Ë+ (
gãL12
 * 
gãVY0
Ë+ (
gãL13
 * 
gãVZ0
)) >> 12;

832 
gãMAC2
 = ((
s64
)(
gãL21
 * 
gãVX0
Ë+ (
gãL22
 * 
gãVY0
Ë+ (
gãL23
 * 
gãVZ0
)) >> 12;

833 
gãMAC3
 = ((
s64
)(
gãL31
 * 
gãVX0
Ë+ (
gãL32
 * 
gãVY0
Ë+ (
gãL33
 * 
gãVZ0
)) >> 12;

834 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

835 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

836 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

837 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

838 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

839 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

840 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

841 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

842 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

844 
gãRGB0
 = 
gãRGB1
;

845 
gãRGB1
 = 
gãRGB2
;

846 
gãCODE2
 = 
gãCODE
;

847 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

848 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

849 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

850 
	}
}

852 
	$gãNCT
() {

853 
v
;

854 
s32
 
vx
, 
vy
, 
vz
;

856 #ifde‡
GTE_LOG


857 
	`GTE_LOG
("GTE NCT\n");

859 
gãFLAG
 = 0;

861 
v
 = 0; v < 3; v++) {

862 
vx
 = 
	`VX
(
v
);

863 
vy
 = 
	`VY
(
v
);

864 
vz
 = 
	`VZ
(
v
);

865 
gãMAC1
 = ((
s64
)(
gãL11
 * 
vx
Ë+ (
gãL12
 * 
vy
Ë+ (
gãL13
 * 
vz
)) >> 12;

866 
gãMAC2
 = ((
s64
)(
gãL21
 * 
vx
Ë+ (
gãL22
 * 
vy
Ë+ (
gãL23
 * 
vz
)) >> 12;

867 
gãMAC3
 = ((
s64
)(
gãL31
 * 
vx
Ë+ (
gãL32
 * 
vy
Ë+ (
gãL33
 * 
vz
)) >> 12;

868 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

869 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

870 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

871 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

872 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

873 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

874 
gãRGB0
 = 
gãRGB1
;

875 
gãRGB1
 = 
gãRGB2
;

876 
gãCODE2
 = 
gãCODE
;

877 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

878 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

879 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

881 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

882 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

883 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

884 
	}
}

886 
	$gãCC
() {

887 #ifde‡
GTE_LOG


888 
	`GTE_LOG
("GTE CC\n");

890 
gãFLAG
 = 0;

892 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

893 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

894 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

895 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

896 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

897 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

898 
gãMAC1
 = ((
s32
)
gãR
 * 
gãIR1
) >> 8;

899 
gãMAC2
 = ((
s32
)
gãG
 * 
gãIR2
) >> 8;

900 
gãMAC3
 = ((
s32
)
gãB
 * 
gãIR3
) >> 8;

901 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

902 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

903 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

905 
gãRGB0
 = 
gãRGB1
;

906 
gãRGB1
 = 
gãRGB2
;

907 
gãCODE2
 = 
gãCODE
;

908 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

909 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

910 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

911 
	}
}

913 
	$gãINTPL
() {

914 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

915 
lm
 = 
	`GTE_LM
(
gã›
);

917 #ifde‡
GTE_LOG


918 
	`GTE_LOG
("GTE INTPL\n");

920 
gãFLAG
 = 0;

922 
gãMAC1
 = ((
gãIR1
 << 12Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - gãIR1), 0))Ë>> 
shi·
;

923 
gãMAC2
 = ((
gãIR2
 << 12Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
((
s64
)
gãGFC
 - gãIR2), 0))Ë>> 
shi·
;

924 
gãMAC3
 = ((
gãIR3
 << 12Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
((
s64
)
gãBFC
 - gãIR3), 0))Ë>> 
shi·
;

925 
gãIR1
 = 
	`limB1
(
gãMAC1
, 
lm
);

926 
gãIR2
 = 
	`limB2
(
gãMAC2
, 
lm
);

927 
gãIR3
 = 
	`limB3
(
gãMAC3
, 
lm
);

928 
gãRGB0
 = 
gãRGB1
;

929 
gãRGB1
 = 
gãRGB2
;

930 
gãCODE2
 = 
gãCODE
;

931 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

932 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

933 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

934 
	}
}

936 
	$gãCDP
() {

937 #ifde‡
GTE_LOG


938 
	`GTE_LOG
("GTE CDP\n");

940 
gãFLAG
 = 0;

942 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

943 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

944 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

945 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

946 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

947 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

948 
gãMAC1
 = (((
gãR
 << 4Ë* 
gãIR1
Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - ((gteR * gteIR1) >> 8)), 0))) >> 12;

949 
gãMAC2
 = (((
gãG
 << 4Ë* 
gãIR2
Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
((
s64
)
gãGFC
 - ((gteG * gteIR2) >> 8)), 0))) >> 12;

950 
gãMAC3
 = (((
gãB
 << 4Ë* 
gãIR3
Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
((
s64
)
gãBFC
 - ((gteB * gteIR3) >> 8)), 0))) >> 12;

951 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

952 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

953 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

955 
gãRGB0
 = 
gãRGB1
;

956 
gãRGB1
 = 
gãRGB2
;

957 
gãCODE2
 = 
gãCODE
;

958 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

959 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

960 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

961 
	}
}

	@src/gte.h

21 #i‚de‡
__GTE_H__


22 
	#__GTE_H__


	)

24 
	~"psxcomm⁄.h
"

25 
	~"r3000a.h
"

27 
gãMFC2
();

28 
gãCFC2
();

29 
gãMTC2
();

30 
gãCTC2
();

31 
gãLWC2
();

32 
gãSWC2
();

34 
gãRTPS
();

35 
gãOP
();

36 
gãNCLIP
();

37 
gãDPCS
();

38 
gãINTPL
();

39 
gãMVMVA
();

40 
gãNCDS
();

41 
gãNCDT
();

42 
gãCDP
();

43 
gãNCCS
();

44 
gãCC
();

45 
gãNCS
();

46 
gãNCT
();

47 
gãSQR
();

48 
gãDCPL
();

49 
gãDPCT
();

50 
gãAVSZ3
();

51 
gãAVSZ4
();

52 
gãRTPT
();

53 
gãGPF
();

54 
gãGPL
();

55 
gãNCCT
();

58 
u32
 
gãˇlcMFC2
(
ªg
);

59 
gãˇlcMTC2
(
u32
 
vÆue
, 
ªg
);

60 
gãˇlcCTC2
(
u32
 
vÆue
, 
ªg
);

	@src/gte_divide.h

5 #i‚de‡
GTE_DIVIDE_H


6 
	#GTE_DIVIDE_H


	)

8 
	~"psxcomm⁄.h
"

10 c⁄° 
u16
 
	göôül_guess
[32768] = {

4111 
u32
 
	$DIVIDE
(
u16
 
n
, u16 
d
) {

4112 i‡(
n
 < 
d
 * 2) {

4113 
u32
 
off£t
 = 
d
;

4114 
shi·
 = 0;

4115 
u64
 
ªcùroˇl
;

4116 
u32
 
r
, 
s
;

4118 
off£t
 <= 0x8000) {

4119 
off£t
 <<= 1;

4120 
shi·
++;

4125 
r
 = 
öôül_guess
[
off£t
 & 0x7fff] | 0x10000;

4127 
s
 = (
u64
)
off£t
 * 
r
 >> 16;

4128 
r
 = (
u64
Ï * (0x20000 - 
s
) >> 16;

4130 
s
 = (
u64
)
off£t
 * 
r
 >> 16;

4131 
r
 = (
u64
Ï * (0x20000 - 
s
) >> 16;

4133 
ªcùroˇl
 = (
u64
)(
r
Ë<< 
shi·
;

4135  (
u32
)(((
ªcùroˇl
 * 
n
) + 0x8000) >> 16);

4139 
	}
}

	@src/mdec.cpp

21 
	~"mdec.h
"

35 
	#MDEC_BIAS
 6

	)

37 
	#DSIZE
 8

	)

38 
	#DSIZE2
 (
DSIZE
 * DSIZE)

	)

40 
	#SCALE
(
x
, 
n
Ë((xË>> (n))

	)

41 
	#SCALER
(
x
, 
n
Ë(((xË+ ((1 << (n)Ë>> 1)Ë>> (n))

	)

43 
	#AAN_CONST_BITS
 12

	)

44 
	#AAN_PRESCALE_BITS
 16

	)

46 
	#AAN_CONST_SIZE
 24

	)

47 
	#AAN_CONST_SCALE
 (
AAN_CONST_SIZE
 - 
AAN_CONST_BITS
)

	)

49 
	#AAN_PRESCALE_SIZE
 20

	)

50 
	#AAN_PRESCALE_SCALE
 (
AAN_PRESCALE_SIZE
-
AAN_PRESCALE_BITS
)

	)

51 
	#AAN_EXTRA
 12

	)

53 
	#FIX_1_082392200
 
	`SCALER
(18159528, 
AAN_CONST_SCALE
)

54 
	#FIX_1_414213562
 
	`SCALER
(23726566, 
AAN_CONST_SCALE
)

55 
	#FIX_1_847759065
 
	`SCALER
(31000253, 
AAN_CONST_SCALE
)

56 
	#FIX_2_613125930
 
	`SCALER
(43840978, 
AAN_CONST_SCALE
)

57 

	)

58 
	#MULS
(
v¨
, c⁄°Ë(
	`SCALE
((v¨Ë* (c⁄°), 
AAN_CONST_BITS
))

	)

60 
	#RLE_RUN
(
a
Ë(◊Ë>> 10)

	)

61 
	#RLE_VAL
(
a
Ë((()◊Ë<< ((Ë* 8 - 10)Ë>> ((Ë* 8 - 10))

	)

64 
	$¥ötm©rixu8
(
u8
 *
m
) {

65 
i
;

66 
i
 = 0; i < 
DSIZE2
; i++) {

67 
	`¥ötf
("%3d ",
m
[
i
]);

68 if((
i
+1Ë% 8 =0Ë
	`¥ötf
("\n");

70 
	}
}

73 
ölöe
 
	$fûlcﬁ
(*
blk
, 
vÆ
) {

74 
blk
[0 * 
DSIZE
] = blk[1 * DSIZE] = blk[2 * DSIZE] = blk[3 * DSIZE]

75 
blk
[4 * 
DSIZE
] = blk[5 * DSIZE] = blk[6 * DSIZE] = blk[7 * DSIZE] = 
vÆ
;

76 
	}
}

78 
ölöe
 
	$fûÃow
(*
blk
, 
vÆ
) {

79 
blk
[0] = blk[1] = blk[2] = blk[3]

80 
blk
[4] = blk[5] = blk[6] = blk[7] = 
vÆ
;

81 
	}
}

83 
	$id˘
(*
block
,
u£d_cﬁ
) {

84 
tmp0
, 
tmp1
, 
tmp2
, 
tmp3
, 
tmp4
, 
tmp5
, 
tmp6
, 
tmp7
;

85 
z5
, 
z10
, 
z11
, 
z12
, 
z13
;

86 *
±r
;

87 
i
;

90 i‡(
u£d_cﬁ
 == -1) {

91 
v
 = 
block
[0];

92 
i
 = 0; i < 
DSIZE2
; i++Ë
block
[i] = 
v
;

97 
±r
 = 
block
;

98 
i
 = 0; i < 
DSIZE
; i++, 
±r
++) {

99 i‡((
u£d_cﬁ
 & (1 << 
i
)) == 0) {

101 i‡(
±r
[
DSIZE
 * 0]) {

102 
	`fûlcﬁ
(
±r
,Ötr[0]);

103 
u£d_cﬁ
 |(1 << 
i
);

110 
z10
 = 
±r
[
DSIZE
 * 0] +Ötr[DSIZE * 4];

111 
z11
 = 
±r
[
DSIZE
 * 0] -Ötr[DSIZE * 4];

112 
z13
 = 
±r
[
DSIZE
 * 2] +Ötr[DSIZE * 6];

113 
z12
 = 
	`MULS
(
±r
[
DSIZE
 * 2] -Öå[DSIZE * 6], 
FIX_1_414213562
Ë- 
z13
;

116 
tmp0
 = 
z10
 + 
z13
;

117 
tmp3
 = 
z10
 - 
z13
;

118 
tmp1
 = 
z11
 + 
z12
;

119 
tmp2
 = 
z11
 - 
z12
;

121 
z13
 = 
±r
[
DSIZE
 * 3] +Ötr[DSIZE * 5];

122 
z10
 = 
±r
[
DSIZE
 * 3] -Ötr[DSIZE * 5];

123 
z11
 = 
±r
[
DSIZE
 * 1] +Ötr[DSIZE * 7];

124 
z12
 = 
±r
[
DSIZE
 * 1] -Ötr[DSIZE * 7];

126 
tmp7
 = 
z11
 + 
z13
;

128 
z5
 = (
z12
 - 
z10
Ë* (
FIX_1_847759065
);

129 
tmp6
 = 
	`SCALE
(
z10
*(
FIX_2_613125930
Ë+ 
z5
, 
AAN_CONST_BITS
Ë- 
tmp7
;

130 
tmp5
 = 
	`MULS
(
z11
 - 
z13
, 
FIX_1_414213562
Ë- 
tmp6
;

131 
tmp4
 = 
	`SCALE
(
z12
*(
FIX_1_082392200
Ë- 
z5
, 
AAN_CONST_BITS
Ë+ 
tmp5
;

153 
±r
[
DSIZE
 * 0] = (
tmp0
 + 
tmp7
);

154 
±r
[
DSIZE
 * 7] = (
tmp0
 - 
tmp7
);

155 
±r
[
DSIZE
 * 1] = (
tmp1
 + 
tmp6
);

156 
±r
[
DSIZE
 * 6] = (
tmp1
 - 
tmp6
);

157 
±r
[
DSIZE
 * 2] = (
tmp2
 + 
tmp5
);

158 
±r
[
DSIZE
 * 5] = (
tmp2
 - 
tmp5
);

159 
±r
[
DSIZE
 * 4] = (
tmp3
 + 
tmp4
);

160 
±r
[
DSIZE
 * 3] = (
tmp3
 - 
tmp4
);

163 
±r
 = 
block
;

164 i‡(
u£d_cﬁ
 == 1) {

165 
i
 = 0; i < 
DSIZE
; i++)

166 
	`fûÃow
(
block
 + 
DSIZE
 * 
i
, block[DSIZE * i]);

168 
i
 = 0; i < 
DSIZE
; i++, 
±r
 += DSIZE) {

169 
z10
 = 
±r
[0] +Ötr[4];

170 
z11
 = 
±r
[0] -Ötr[4];

171 
z13
 = 
±r
[2] +Ötr[6];

172 
z12
 = 
	`MULS
(
±r
[2] -Öå[6], 
FIX_1_414213562
Ë- 
z13
;

174 
tmp0
 = 
z10
 + 
z13
;

175 
tmp3
 = 
z10
 - 
z13
;

176 
tmp1
 = 
z11
 + 
z12
;

177 
tmp2
 = 
z11
 - 
z12
;

179 
z13
 = 
±r
[3] +Ötr[5];

180 
z10
 = 
±r
[3] -Ötr[5];

181 
z11
 = 
±r
[1] +Ötr[7];

182 
z12
 = 
±r
[1] -Ötr[7];

184 
tmp7
 = 
z11
 + 
z13
;

185 
z5
 = (
z12
 - 
z10
Ë* 
FIX_1_847759065
;

186 
tmp6
 = 
	`SCALE
(
z10
 * 
FIX_2_613125930
 + 
z5
, 
AAN_CONST_BITS
Ë- 
tmp7
;

187 
tmp5
 = 
	`MULS
(
z11
 - 
z13
, 
FIX_1_414213562
Ë- 
tmp6
;

188 
tmp4
 = 
	`SCALE
(
z12
 * 
FIX_1_082392200
 - 
z5
, 
AAN_CONST_BITS
Ë+ 
tmp5
;

190 
±r
[0] = 
tmp0
 + 
tmp7
;

192 
±r
[7] = 
tmp0
 - 
tmp7
;

193 
±r
[1] = 
tmp1
 + 
tmp6
;

194 
±r
[6] = 
tmp1
 - 
tmp6
;

195 
±r
[2] = 
tmp2
 + 
tmp5
;

196 
±r
[5] = 
tmp2
 - 
tmp5
;

197 
±r
[4] = 
tmp3
 + 
tmp4
;

198 
±r
[3] = 
tmp3
 - 
tmp4
;

201 
	}
}

204 
	#MDEC0_STP
 0x02000000

	)

205 
	#MDEC0_RGB24
 0x08000000

	)

206 
	#MDEC0_SIZE_MASK
 0x0000FFFF

	)

209 
	#MDEC1_BUSY
 0x20000000

	)

210 
	#MDEC1_DREQ
 0x18000000

	)

211 
	#MDEC1_FIFO
 0xc0000000

	)

212 
	#MDEC1_RGB24
 0x02000000

	)

213 
	#MDEC1_STP
 0x00800000

	)

214 
	#MDEC1_RESET
 0x80000000

	)

216 
	s_≥ndög_dma1
 {

217 
u32
 
	madr
;

218 
u32
 
	mb¸
;

219 
u32
 
	mch¸
;

223 
u32
 
	mªg0
;

224 
u32
 
	mªg1
;

225 
u16
 * 
	mæ
;

226 
u16
 * 
	mæ_íd
;

227 
u8
 * 
	mblock_buf„r_pos
;

228 
u8
 
	mblock_buf„r
[16*16*3];

229 
_≥ndög_dma1
 
	m≥ndög_dma1
;

230 } 
	gmdec
;

232 
	giq_y
[
DSIZE2
], 
	giq_uv
[DSIZE2];

234 
	gzsˇn
[
DSIZE2
] = {

245 
	gØnsˇÀs
[
DSIZE2
] = {

256 
	$iqèb_öô
(*
iqèb
, *
iq_y
) {

257 
i
;

259 
i
 = 0; i < 
DSIZE2
; i++) {

260 
iqèb
[
i
] = (
iq_y
[i] * 
	`SCALER
(
ØnsˇÀs
[
zsˇn
[i]], 
AAN_PRESCALE_SCALE
));

262 
	}
}

264 
	#MDEC_END_OF_DATA
 0x„00

	)

266 *
	$æ2blk
(*
blk
, *
mdec_æ
) {

267 
i
, 
k
, 
q_sˇÀ
, 
æ
, 
u£d_cﬁ
;

268 *
iqèb
;

270 
	`mem£t
(
blk
, 0, 6 * 
DSIZE2
 * ());

271 
iqèb
 = 
iq_uv
;

272 
i
 = 0; i < 6; i++) {

274 i‡(
i
 =2Ë
iqèb
 = 
iq_y
;

276 
æ
 = 
	`SWAP16
(*
mdec_æ
); mdec_rl++;

277 
q_sˇÀ
 = 
	`RLE_RUN
(
æ
);

278 
blk
[0] = 
	`SCALER
(
iqèb
[0] * 
	`RLE_VAL
(
æ
), 
AAN_EXTRA
 - 3);

279 
k
 = 0, 
u£d_cﬁ
 = 0;;) {

280 
æ
 = 
	`SWAP16
(*
mdec_æ
); mdec_rl++;

281 i‡(
æ
 =
MDEC_END_OF_DATA
) ;

282 
k
 +
	`RLE_RUN
(
æ
) + 1;

284 i‡(
k
 > 63) {

290 
blk
[
zsˇn
[
k
]] = 
	`SCALER
(
	`RLE_VAL
(
æ
Ë* 
iqèb
[k] * 
q_sˇÀ
, 
AAN_EXTRA
);

292 
u£d_cﬁ
 |(
zsˇn
[
k
] > 7) ? 1 << (zscan[k] & 7) : 0;

295 i‡(
k
 =0Ë
u£d_cﬁ
 = -1;

301 
	`id˘
(
blk
, 
u£d_cﬁ
);

302 
blk
 +
DSIZE2
;

304  
mdec_æ
;

305 
	}
}

312 
	#MULR
(
a
Ë((1434 * (a)))

	)

313 
	#MULB
(
a
Ë((1807 * (a)))

	)

314 
	#MULG2
(
a
, 
b
Ë((-351 * (aË- 728 * (b)))

	)

315 
	#MULY
(
a
Ë(◊Ë<< 10)

	)

317 
	#MAKERGB15
(
r
, 
g
, 
b
, 
a
Ë(
	`SWAP16
◊ | ((bË<< 10Ë| ((gË<< 5Ë| (r)))

	)

318 
	#SCALE8
(
c
Ë
	`SCALER
(c, 20)

	)

319 
	#SCALE5
(
c
Ë
	`SCALER
(c, 23)

	)

321 
	#CLAMP5
(
c
Ë–((cË< -16Ë? 0 : (((cË> (31 - 16)Ë? 31 : ((cË+ 16)Ë)

	)

322 
	#CLAMP8
(
c
Ë–((cË< -128Ë? 0 : (((cË> (255 - 128)Ë? 255 : ((cË+ 128)Ë)

	)

324 
	#CLAMP_SCALE8
(
a
Ë(
	`CLAMP8
(
	`SCALE8
◊)))

	)

325 
	#CLAMP_SCALE5
(
a
Ë(
	`CLAMP5
(
	`SCALE5
◊)))

	)

327 
ölöe
 
	$puéöebw15
(
u16
 *
image
, *
Yblk
) {

328 
i
;

329 
A
 = (
mdec
.
ªg0
 & 
MDEC0_STP
) ? 0x8000 : 0;

331 
i
 = 0; i < 8; i++, 
Yblk
++) {

332 
Y
 = *
Yblk
;

334 
image
[
i
] = 
	`SWAP16
((
	`CLAMP5
(
Y
 >> 3Ë* 0x421Ë| 
A
);

336 
	}
}

338 
ölöe
 
	$putquadrgb15
(
u16
 *
image
, *
Yblk
, 
Cr
, 
Cb
) {

339 
Y
, 
R
, 
G
, 
B
;

340 
A
 = (
mdec
.
ªg0
 & 
MDEC0_STP
) ? 0x8000 : 0;

341 
R
 = 
	`MULR
(
Cr
);

342 
G
 = 
	`MULG2
(
Cb
, 
Cr
);

343 
B
 = 
	`MULB
(
Cb
);

346 
Y
 = 
	`MULY
(
Yblk
[0]);

347 
image
[0] = 
	`MAKERGB15
(
	`CLAMP_SCALE5
(
Y
 + 
R
), CLAMP_SCALE5(Y + 
G
), CLAMP_SCALE5(Y + 
B
), 
A
);

348 
Y
 = 
	`MULY
(
Yblk
[1]);

349 
image
[1] = 
	`MAKERGB15
(
	`CLAMP_SCALE5
(
Y
 + 
R
), CLAMP_SCALE5(Y + 
G
), CLAMP_SCALE5(Y + 
B
), 
A
);

350 
Y
 = 
	`MULY
(
Yblk
[8]);

351 
image
[16] = 
	`MAKERGB15
(
	`CLAMP_SCALE5
(
Y
 + 
R
), CLAMP_SCALE5(Y + 
G
), CLAMP_SCALE5(Y + 
B
), 
A
);

352 
Y
 = 
	`MULY
(
Yblk
[9]);

353 
image
[17] = 
	`MAKERGB15
(
	`CLAMP_SCALE5
(
Y
 + 
R
), CLAMP_SCALE5(Y + 
G
), CLAMP_SCALE5(Y + 
B
), 
A
);

354 
	}
}

356 
ölöe
 
	$yuv2rgb15
(*
blk
, *
image
) {

357 
x
, 
y
;

358 *
Yblk
 = 
blk
 + 
DSIZE2
 * 2;

359 *
Crblk
 = 
blk
;

360 *
Cbblk
 = 
blk
 + 
DSIZE2
;

362 i‡(!
C⁄fig
.
Mdec
) {

363 
y
 = 0; y < 16; y +2, 
Crblk
 +4, 
Cbblk
 +4, 
Yblk
 +8, 
image
 += 24) {

364 i‡(
y
 =8Ë
Yblk
 +
DSIZE2
;

365 
x
 = 0; x < 4; x++, 
image
 +2, 
Crblk
++, 
Cbblk
++, 
Yblk
 += 2) {

366 
	`putquadrgb15
(
image
, 
Yblk
, *
Crblk
, *
Cbblk
);

367 
	`putquadrgb15
(
image
 + 8, 
Yblk
 + 
DSIZE2
, *(
Crblk
 + 4), *(
Cbblk
 + 4));

371 
y
 = 0; y < 16; y++, 
Yblk
 +8, 
image
 += 16) {

372 i‡(
y
 =8Ë
Yblk
 +
DSIZE2
;

373 
	`puéöebw15
(
image
, 
Yblk
);

374 
	`puéöebw15
(
image
 + 8, 
Yblk
 + 
DSIZE2
);

377 
	}
}

379 
ölöe
 
	$puéöebw24
(
u8
 * 
image
, *
Yblk
) {

380 
i
;

381 
Y
;

382 
i
 = 0; i < 8 * 3; i +3, 
Yblk
++) {

383 
Y
 = 
	`CLAMP8
(*
Yblk
);

384 
image
[
i
 + 0] = 
Y
;

385 
image
[
i
 + 1] = 
Y
;

386 
image
[
i
 + 2] = 
Y
;

388 
	}
}

390 
ölöe
 
	$putquadrgb24
(
u8
 * 
image
, *
Yblk
, 
Cr
, 
Cb
) {

391 
Y
, 
R
, 
G
, 
B
;

393 
R
 = 
	`MULR
(
Cr
);

394 
G
 = 
	`MULG2
(
Cb
,
Cr
);

395 
B
 = 
	`MULB
(
Cb
);

397 
Y
 = 
	`MULY
(
Yblk
[0]);

398 
image
[0 * 3 + 0] = 
	`CLAMP_SCALE8
(
Y
 + 
R
);

399 
image
[0 * 3 + 1] = 
	`CLAMP_SCALE8
(
Y
 + 
G
);

400 
image
[0 * 3 + 2] = 
	`CLAMP_SCALE8
(
Y
 + 
B
);

401 
Y
 = 
	`MULY
(
Yblk
[1]);

402 
image
[1 * 3 + 0] = 
	`CLAMP_SCALE8
(
Y
 + 
R
);

403 
image
[1 * 3 + 1] = 
	`CLAMP_SCALE8
(
Y
 + 
G
);

404 
image
[1 * 3 + 2] = 
	`CLAMP_SCALE8
(
Y
 + 
B
);

405 
Y
 = 
	`MULY
(
Yblk
[8]);

406 
image
[16 * 3 + 0] = 
	`CLAMP_SCALE8
(
Y
 + 
R
);

407 
image
[16 * 3 + 1] = 
	`CLAMP_SCALE8
(
Y
 + 
G
);

408 
image
[16 * 3 + 2] = 
	`CLAMP_SCALE8
(
Y
 + 
B
);

409 
Y
 = 
	`MULY
(
Yblk
[9]);

410 
image
[17 * 3 + 0] = 
	`CLAMP_SCALE8
(
Y
 + 
R
);

411 
image
[17 * 3 + 1] = 
	`CLAMP_SCALE8
(
Y
 + 
G
);

412 
image
[17 * 3 + 2] = 
	`CLAMP_SCALE8
(
Y
 + 
B
);

413 
	}
}

415 
	$yuv2rgb24
(*
blk
, 
u8
 *
image
) {

416 
x
, 
y
;

417 *
Yblk
 = 
blk
 + 
DSIZE2
 * 2;

418 *
Crblk
 = 
blk
;

419 *
Cbblk
 = 
blk
 + 
DSIZE2
;

421 i‡(!
C⁄fig
.
Mdec
) {

422 
y
 = 0; y < 16; y +2, 
Crblk
 +4, 
Cbblk
 +4, 
Yblk
 +8, 
image
 += 8 * 3 * 3) {

423 i‡(
y
 =8Ë
Yblk
 +
DSIZE2
;

424 
x
 = 0; x < 4; x++, 
image
 +6, 
Crblk
++, 
Cbblk
++, 
Yblk
 += 2) {

425 
	`putquadrgb24
(
image
, 
Yblk
, *
Crblk
, *
Cbblk
);

426 
	`putquadrgb24
(
image
 + 8 * 3, 
Yblk
 + 
DSIZE2
, *(
Crblk
 + 4), *(
Cbblk
 + 4));

430 
y
 = 0; y < 16; y++, 
Yblk
 +8, 
image
 += 16 * 3) {

431 i‡(
y
 =8Ë
Yblk
 +
DSIZE2
;

432 
	`puéöebw24
(
image
, 
Yblk
);

433 
	`puéöebw24
(
image
 + 8 * 3, 
Yblk
 + 
DSIZE2
);

436 
	}
}

438 
	$mdecInô
() {

439 
	`mem£t
(&
mdec
, 0, (mdec));

440 
	`mem£t
(
iq_y
, 0, (iq_y));

441 
	`mem£t
(
iq_uv
, 0, (iq_uv));

442 
mdec
.
æ
 = (
u16
 *)&
psxM
[0x100000];

443 
	}
}

446 
	$mdecWrôe0
(
u32
 
d©a
) {

447 
mdec
.
ªg0
 = 
d©a
;

448 
	}
}

450 
u32
 
	$mdecRód0
() {

451  
mdec
.
ªg0
;

452 
	}
}

455 
	$mdecWrôe1
(
u32
 
d©a
) {

456 i‡(
d©a
 & 
MDEC1_RESET
) {

457 
mdec
.
ªg0
 = 0;

458 
mdec
.
ªg1
 = 0;

459 
mdec
.
≥ndög_dma1
.
adr
 = 0;

460 
mdec
.
block_buf„r_pos
 = 0;

462 
	}
}

464 
u32
 
	$mdecRód1
() {

465 
u32
 
v
 = 
mdec
.
ªg1
;

466  
v
;

467 
	}
}

469 
	$psxDma0
(
u32
 
adr
, u32 
b¸
, u32 
ch¸
) {

470 
cmd
 = 
mdec
.
ªg0
;

471 
size
;

473 i‡(
ch¸
 != 0x01000201) {

478 
mdec
.
ªg1
 |
MDEC1_STP
;

480 
size
 = (
b¸
 >> 16) * (bcr & 0xffff);

482 
cmd
 >> 28) {

484 
mdec
.
æ
 = (
u16
 *Ë
	`PSXM
(
adr
);

486 
mdec
.
ªg1
 |
MDEC1_BUSY
;

488 
mdec
.
æ_íd
 = mdec.
æ
 + (
size
 * 2);

491 if(
mdec
.
æ_íd
 <mdec.
æ
) {

492 
	`MDECINDMA_INT
–
size
 / 4 );

497 if(
mdec
.
≥ndög_dma1
.
adr
){

498 
	`psxDma1
(
mdec
.
≥ndög_dma1
.
adr
, mdec.≥ndög_dma1.
b¸
, mdec.≥ndög_dma1.
ch¸
);

500 
mdec
.
≥ndög_dma1
.
adr
 = 0;

505 
u8
 *
p
 = (u8 *)
	`PSXM
(
adr
);

509 
	`iqèb_öô
(
iq_y
, 
p
);

510 
	`iqèb_öô
(
iq_uv
, 
p
 + 64);

513 
	`MDECINDMA_INT
–
size
 / 4 );

519 
	`MDECINDMA_INT
–
size
 / 4 );

527 
HW_DMA0_CHCR
 &
	`SWAP32
(~0x01000000);

528 
	`DMA_INTERRUPT
(0);

529 
	}
}

531 
	$mdec0I¡îru±
()

533 i‡(
HW_DMA0_CHCR
 & 
	`SWAP32
(0x01000000))

535 
HW_DMA0_CHCR
 &
	`SWAP32
(~0x01000000);

536 
	`DMA_INTERRUPT
(0);

538 
	}
}

540 
	#SIZE_OF_24B_BLOCK
 (16*16*3)

	)

541 
	#SIZE_OF_16B_BLOCK
 (16*16*2)

	)

543 
	$psxDma1
(
u32
 
adr
, u32 
b¸
, u32 
ch¸
) {

544 
blk
[
DSIZE2
 * 6];

545 
u8
 * 
image
;

546 
size
;

547 
u32
 
w‹ds
;

549 i‡(
ch¸
 != 0x01000200) ;

551 
w‹ds
 = (
b¸
 >> 16) * (bcr & 0xffff);

553 
size
 = 
w‹ds
 * 4;

555 i‡(!(
mdec
.
ªg1
 & 
MDEC1_BUSY
)) {

557 
mdec
.
≥ndög_dma1
.
adr
 =ádr;

558 
mdec
.
≥ndög_dma1
.
b¸
 = bcr;

559 
mdec
.
≥ndög_dma1
.
ch¸
 = chcr;

562 
image
 = (
u8
 *)
	`PSXM
(
adr
);

564 i‡(
mdec
.
ªg0
 & 
MDEC0_RGB24
) {

570 if(
mdec
.
block_buf„r_pos
 != 0) {

571 
n
 = 
mdec
.
block_buf„r
 - mdec.
block_buf„r_pos
 + 
SIZE_OF_16B_BLOCK
;

573 
	`mem˝y
(
image
, 
mdec
.
block_buf„r_pos
, 
n
);

574 
image
 +
n
;

575 
size
 -
n
;

576 
mdec
.
block_buf„r_pos
 = 0;

579 
size
 >
SIZE_OF_16B_BLOCK
) {

580 
mdec
.
æ
 = 
	`æ2blk
(
blk
, mdec.rl);

581 
	`yuv2rgb15
(
blk
, (
u16
 *)
image
);

582 
image
 +
SIZE_OF_16B_BLOCK
;

583 
size
 -
SIZE_OF_16B_BLOCK
;

586 if(
size
 != 0) {

587 
mdec
.
æ
 = 
	`æ2blk
(
blk
, mdec.rl);

588 
	`yuv2rgb15
(
blk
, (
u16
 *)
mdec
.
block_buf„r
);

589 
	`mem˝y
(
image
, 
mdec
.
block_buf„r
, 
size
);

590 
mdec
.
block_buf„r_pos
 = mdec.
block_buf„r
 + 
size
;

599 if(
mdec
.
block_buf„r_pos
 != 0) {

600 
n
 = 
mdec
.
block_buf„r
 - mdec.
block_buf„r_pos
 + 
SIZE_OF_24B_BLOCK
;

602 
	`mem˝y
(
image
, 
mdec
.
block_buf„r_pos
, 
n
);

603 
image
 +
n
;

604 
size
 -
n
;

605 
mdec
.
block_buf„r_pos
 = 0;

608 
size
 >
SIZE_OF_24B_BLOCK
) {

609 
mdec
.
æ
 = 
	`æ2blk
(
blk
, mdec.rl);

610 
	`yuv2rgb24
(
blk
, 
image
);

611 
image
 +
SIZE_OF_24B_BLOCK
;

612 
size
 -
SIZE_OF_24B_BLOCK
;

615 if(
size
 != 0) {

616 
mdec
.
æ
 = 
	`æ2blk
(
blk
, mdec.rl);

617 
	`yuv2rgb24
(
blk
, 
mdec
.
block_buf„r
);

618 
	`mem˝y
(
image
, 
mdec
.
block_buf„r
, 
size
);

619 
mdec
.
block_buf„r_pos
 = mdec.
block_buf„r
 + 
size
;

624 
	`MDECOUTDMA_INT
(
w‹ds
 * 
MDEC_BIAS
);

626 
	}
}

628 
	$mdec1I¡îru±
() {

654 i‡(
mdec
.
æ
 >mdec.
æ_íd
 || 
	`SWAP16
(*(mdec.æ)Ë=
MDEC_END_OF_DATA
) {

655 
mdec
.
ªg1
 &~(
MDEC1_STP
|
MDEC1_BUSY
);

656 i‡(
HW_DMA0_CHCR
 & 
	`SWAP32
(0x01000000))

658 
HW_DMA0_CHCR
 &
	`SWAP32
(~0x01000000);

659 
	`DMA_INTERRUPT
(0);

663 i‡(
HW_DMA1_CHCR
 & 
	`SWAP32
(0x01000000))

665 
HW_DMA1_CHCR
 &
	`SWAP32
(~0x01000000);

666 
	`DMA_INTERRUPT
(1);

668 
	}
}

670 
	$mdecFªeze
(* 
f
, 
FªezeMode
 
mode
)

672 
u8
 *
ba£
 = (u8 *)&
psxM
[0x100000];

673 
u32
 
v
;

675 i‡–
	`‰ìze_rw
(
f
, 
mode
, &
mdec
.
ªg0
, (mdec.reg0)) ||

676 
	`‰ìze_rw
(
f
, 
mode
, &
mdec
.
ªg1
, (mdec.reg1)) )

680 
v
 = (
u8
 *)
mdec
.
æ
 - 
ba£
;

681 i‡(
	`‰ìze_rw
(
f
, 
mode
, &
v
, (v)))

683 
mdec
.
æ
 = (
u16
 *)(
ba£
 + (
v
 & 0xffffe));

684 
v
 = (
u8
 *)
mdec
.
æ_íd
 - 
ba£
;

685 i‡(
	`‰ìze_rw
(
f
, 
mode
, &
v
, (v)))

687 
mdec
.
æ_íd
 = (
u16
 *)(
ba£
 + (
v
 & 0xffffe));

689 
v
 = 0;

690 i‡(
mdec
.
block_buf„r_pos
)

691 
v
 = 
mdec
.
block_buf„r_pos
 - 
ba£
;

692 i‡(
	`‰ìze_rw
(
f
, 
mode
, &
v
, (v)))

694 
mdec
.
block_buf„r_pos
 = 0;

695 i‡(
v
)

696 
mdec
.
block_buf„r_pos
 = 
ba£
 + (
v
 & 0xfffff);

698 i‡–
	`‰ìze_rw
(
f
, 
mode
, &
mdec
.
block_buf„r
, (mdec.block_buffer)) ||

699 
	`‰ìze_rw
(
f
, 
mode
, &
mdec
.
≥ndög_dma1
, (mdec.pending_dma1)) ||

700 
	`‰ìze_rw
(
f
, 
mode
, 
iq_y
, (iq_y)) ||

701 
	`‰ìze_rw
(
f
, 
mode
, 
iq_uv
, (iq_uv)) )

705 
	}
}

	@src/mdec.h

21 #i‚de‡
__MDEC_H__


22 
	#__MDEC_H__


	)

24 
	~"psxcomm⁄.h
"

25 
	~"r3000a.h
"

26 
	~"psxhw.h
"

27 
	~"psxdma.h
"

29 
mdecInô
();

30 
mdecWrôe0
(
u32
 
d©a
);

31 
mdecWrôe1
(
u32
 
d©a
);

32 
u32
 
mdecRód0
();

33 
u32
 
mdecRód1
();

34 
psxDma0
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
);

35 
psxDma1
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
);

36 
mdec0I¡îru±
();

37 
mdec1I¡îru±
();

38 
mdecFªeze
(* 
f
, 
FªezeMode
 
mode
);

	@src/misc.cpp

28 
	~"misc.h
"

29 
	~"cdrom.h
"

30 
	~"mdec.h
"

31 
	~"gpu.h
"

32 
	~"∂ugö_lib.h
"

33 
	~"µf.h
"

34 
	~"psxevíts.h
"

35 
	~<f˙é.h
>

36 
	~<sys/°©.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<time.h
>

39 
	~<zlib.h
>

40 #i‡!
deföed
(
O_BINARY
)

41 
	#O_BINARY
 0

	)

44 #ifde‡
_WIN32


45 
	#°∫ˇ£cmp
 
_°∫icmp


	)

48 
	gCdromId
[10] = "";

49 
	gCdromLabñ
[33] = "";

52 
	#PSX_EXE
 1

	)

53 
	#CPE_EXE
 2

	)

54 
	#COFF_EXE
 3

	)

55 
	#INVALID_EXE
 4

	)

57 
	#ISODCL
(
‰om
, 
to
Ë—ÿ- from + 1)

	)

59 
	siso_dúe˘‹y_ªc‹d
 {

60 
	mÀngth
 [
ISODCL
 (1, 1)];

61 
	mext_©å_Àngth
 [
ISODCL
 (2, 2)];

62 
	mexã¡
 [
ISODCL
 (3, 10)];

63 
	msize
 [
ISODCL
 (11, 18)];

64 
	md©e
 [
ISODCL
 (19, 25)];

65 
	mÊags
 [
ISODCL
 (26, 26)];

66 
	mfûe_unô_size
 [
ISODCL
 (27, 27)];

67 
	möãæóve
 [
ISODCL
 (28, 28)];

68 
	mvﬁume_£quí˚_numbî
 [
ISODCL
 (29, 32)];

69 
	m«me_Àn
 [
ISODCL
 (33, 33)];

70 
	m«me
 [1];

73 
	$mmssdd
–*
b
, *
p
 )

75 
m
, 
s
, 
d
;

76 #i‡
	`deföed
(
__¨m__
)

77 *
u
 = (*)
b
;

78 
block
 = (
u
[3] << 24) | (u[2] << 16) | (u[1] << 8) | u[0];

79 #ñi‡
	`deföed
(
__BIGENDIAN__
)

80 
block
 = (
b
[0] & 0xff) | ((b[1] & 0xff) << 8) | ((b[2] & 0xff) << 16) | (b[3] << 24);

82 
block
 = *((*)
b
);

85 
block
 += 150;

86 
m
 = 
block
 / 4500;

87 
block
 = block - 
m
 * 4500;

88 
s
 = 
block
 / 75;

89 
d
 = 
block
 - 
s
 * 75;

91 
m
 = ((m / 10) << 4) | m % 10;

92 
s
 = ((s / 10) << 4) | s % 10;

93 
d
 = ((d / 10) << 4) | d % 10;

95 
p
[0] = 
m
;

96 
p
[1] = 
s
;

97 
p
[2] = 
d
;

98 
	}
}

100 
	#öcTime
() \

101 
time
[0] = 
	`btoi
(time[0]);Åime[1] = btoi(time[1]);Åime[2] = btoi(time[2]); \

102 
time
[2]++; \

103 if(
time
[2] == 75) { \

104 
time
[2] = 0; \

105 
time
[1]++; \

106 i‡(
time
[1] == 60) { \

107 
time
[1] = 0; \

108 
time
[0]++; \

111 
time
[0] = 
	`ôob
—ime[0]);Åime[1] = itob—ime[1]);Åime[2] = itob—ime[2]);

	)

113 
	#READTRACK
() \

114 i‡(
	`CDR_ªadTøck
(
time
) == -1)  -1; \

115 
buf
 = 
	`CDR_gëBuf„r
(); \

116 i‡(
buf
 =
NULL
Ë -1; 
	`CheckPPFCache
(buf, 
time
[0],Åime[1],Åime[2]);

	)

118 
	#READDIR
(
_dú
) \

119 
	`READTRACK
(); \

120 
	`mem˝y
(
_dú
, 
buf
+12, 2048); \

122 
	`öcTime
(); \

123 
	`READTRACK
(); \

124 
	`mem˝y
(
_dú
+2048, 
buf
+12, 2048);

	)

126 
	$GëCdromFûe
(
u8
 *
mdú
, u8 *
time
, c⁄° *
fûíame
) {

127 
iso_dúe˘‹y_ªc‹d
 *
dú
;

128 
ªtvÆ
 = -1;

129 
u8
 
ddú
[4096];

130 
u8
 *
buf
;

131 
i
;

134 i‡(
fûíame
 =
NULL
 || filename[0] == '\0')  -1;

136 
i
 = 0;

137 
i
 < 4096) {

138 
dú
 = (
iso_dúe˘‹y_ªc‹d
*Ë&
mdú
[
i
];

139 i‡(
dú
->
Àngth
[0] == 0) {

142 
i
 +(
u8
)
dú
->
Àngth
[0];

144 i‡(
dú
->
Êags
[0] & 0x2) {

145 i‡(!
	`°∫ˇ£cmp
((*)&
dú
->
«me
[0], 
fûíame
, dú->
«me_Àn
[0])) {

146 i‡(
fûíame
[
dú
->
«me_Àn
[0]] != '\\') ;

148 
fûíame
 +
dú
->
«me_Àn
[0] + 1;

150 
	`mmssdd
(
dú
->
exã¡
, (*)
time
);

151 
	`READDIR
(
ddú
);

152 
i
 = 0;

153 
mdú
 = 
ddú
;

156 i‡(!
	`°∫ˇ£cmp
((*)&
dú
->
«me
[0], 
fûíame
, 
	`°æí
(filename))) {

157 
	`mmssdd
(
dú
->
exã¡
, (*)
time
);

158 
ªtvÆ
 = 0;

163  
ªtvÆ
;

164 
	}
}

168 c⁄° 
	ggpu_˘l_def
[] = {

173 c⁄° 
	ggpu_d©a_def
[] = {

179 
	$Áke_bios_gpu_£tup
()

181 
i
;

183 
i
 = 0; i < (
gpu_˘l_def
) / (gpu_ctl_def[0]); i++)

184 
	`GPU_wrôeSètus
(
gpu_˘l_def
[
i
]);

186 
i
 = 0; i < (
gpu_d©a_def
) / (gpu_data_def[0]); i++)

187 
	`GPU_wrôeD©a
(
gpu_d©a_def
[
i
]);

188 
	}
}

192 
	$LﬂdCdrom
() {

193 
EXE_HEADER
 
tmpHód
;

194 
iso_dúe˘‹y_ªc‹d
 *
dú
;

195 
u8
 
time
[4], *
buf
;

196 
u8
 
mdú
[4096];

197 
exíame
[256];

201 
	`Áke_bios_gpu_£tup
();

203 i‡(!
C⁄fig
.
HLE
) {

205 
psxRegs
.
pc
 =ÖsxRegs.
GPR
.
n
.
ø
;

209 
time
[0] = 
	`ôob
(0);Åime[1] = itob(2);Åime[2] = itob(0x10);

211 
	`READTRACK
();

214 
dú
 = (
iso_dúe˘‹y_ªc‹d
*Ë&
buf
[12+156];

216 
	`mmssdd
(
dú
->
exã¡
, (*)
time
);

218 
	`READDIR
(
mdú
);

221 i‡(
	`GëCdromFûe
(
mdú
, 
time
, "SYSTEM.CNF;1") == -1) {

223 i‡(
	`GëCdromFûe
(
mdú
, 
time
, "PSX.EXE;1") == -1)  -1;

225 
	`READTRACK
();

229 
	`READTRACK
();

231 
	`ssˇnf
((*)
buf
 + 12, "BOOT = cdrom:\\%255s", 
exíame
);

232 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1) {

233 
	`ssˇnf
((*)
buf
 + 12, "BOOT = cdrom:%255s", 
exíame
);

234 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1) {

235 *
±r
 = 
	`°r°r
((*)
buf
 + 12, "cdrom:");

236 i‡(
±r
 !
NULL
) {

237 
±r
 += 6;

238 *
±r
 == '\\' || *ptr == '/')Ötr++;

239 
	`°∫˝y
(
exíame
, 
±r
, 255);

240 
exíame
[255] = '\0';

241 
±r
 = 
exíame
;

242 *
±r
 != '\0' && *ptr != '\r' && *ptr != '\n')Ötr++;

243 *
±r
 = '\0';

244 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1)

252 
	`READTRACK
();

255 
	`mem˝y
(&
tmpHód
, 
buf
 + 12, (
EXE_HEADER
));

257 
psxRegs
.
pc
 = 
	`SWAP32
(
tmpHód
.
pc0
);

258 
psxRegs
.
GPR
.
n
.
gp
 = 
	`SWAP32
(
tmpHód
.
gp0
);

259 
psxRegs
.
GPR
.
n
.
•
 = 
	`SWAP32
(
tmpHód
.
s_addr
);

260 i‡(
psxRegs
.
GPR
.
n
.
•
 == 0)ÖsxRegs.GPR.n.sp = 0x801fff00;

262 
tmpHód
.
t_size
 = 
	`SWAP32
(tmpHead.t_size);

263 
tmpHód
.
t_addr
 = 
	`SWAP32
(tmpHead.t_addr);

265 #ifde‡
PSXREC


266 
psxCpu
->
	`CÀ¨
(
tmpHód
.
t_addr
,ÅmpHód.
t_size
 / 4);

270 
tmpHód
.
t_size
 & ~2047) {

271 *
±r
 = (*)
	`PSXM
(
tmpHód
.
t_addr
);

273 
	`öcTime
();

274 
	`READTRACK
();

276 i‡(
±r
 !
NULL
Ë
	`mem˝y
’å, 
buf
+12, 2048);

278 
tmpHód
.
t_size
 -= 2048;

279 
tmpHód
.
t_addr
 += 2048;

283 
	}
}

285 
	$LﬂdCdromFûe
(c⁄° *
fûíame
, 
EXE_HEADER
 *
hód
) {

286 
iso_dúe˘‹y_ªc‹d
 *
dú
;

287 
u8
 
time
[4],*
buf
;

288 
u8
 
mdú
[4096];

289 
exíame
[256];

290 
u32
 
size
, 
addr
;

291 *
mem
;

293 
	`ssˇnf
(
fûíame
, "cdrom:\\%255s", 
exíame
);

295 
time
[0] = 
	`ôob
(0);Åime[1] = itob(2);Åime[2] = itob(0x10);

297 
	`READTRACK
();

300 
dú
 = (
iso_dúe˘‹y_ªc‹d
 *)&
buf
[12 + 156];

302 
	`mmssdd
(
dú
->
exã¡
, (*)
time
);

304 
	`READDIR
(
mdú
);

306 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1)  -1;

308 
	`READTRACK
();

310 
	`mem˝y
(
hód
, 
buf
 + 12, (
EXE_HEADER
));

311 
size
 = 
hód
->
t_size
;

312 
addr
 = 
hód
->
t_addr
;

314 #ifde‡
PSXREC


315 
psxCpu
->
	`CÀ¨
(
addr
, 
size
 / 4);

318 
size
 & ~2047) {

319 
	`öcTime
();

320 
	`READTRACK
();

322 
mem
 = 
	`PSXM
(
addr
);

323 i‡(
mem
)

324 
	`mem˝y
(
mem
, 
buf
 + 12, 2048);

326 
size
 -= 2048;

327 
addr
 += 2048;

331 
	}
}

333 
	$CheckCdrom
() {

334 
iso_dúe˘‹y_ªc‹d
 *
dú
;

335 
time
[4], *
buf
;

336 
mdú
[4096];

337 
exíame
[256];

338 
i
, 
Àn
, 
c
;

340 
	`FªePPFCache
();

342 
time
[0] = 
	`ôob
(0);

343 
time
[1] = 
	`ôob
(2);

344 
time
[2] = 
	`ôob
(0x10);

346 
	`READTRACK
();

348 
	`mem£t
(
CdromLabñ
, 0, (CdromLabel));

349 
	`mem£t
(
CdromId
, 0, (CdromId));

350 
	`mem£t
(
exíame
, 0, (exename));

352 
	`°∫˝y
(
CdromLabñ
, (*)
buf
 + 52, 32);

355 
dú
 = (
iso_dúe˘‹y_ªc‹d
 *)&
buf
[12 + 156];

357 
	`mmssdd
(
dú
->
exã¡
, (*)
time
);

359 
	`READDIR
(
mdú
);

361 i‡(
	`GëCdromFûe
(
mdú
, 
time
, "SYSTEM.CNF;1") != -1) {

362 
	`READTRACK
();

364 
	`ssˇnf
((*)
buf
 + 12, "BOOT = cdrom:\\%255s", 
exíame
);

365 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1) {

366 
	`ssˇnf
((*)
buf
 + 12, "BOOT = cdrom:%255s", 
exíame
);

367 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1) {

368 *
±r
 = 
	`°r°r
((*)
buf
 + 12, "cdrom:");

369 i‡(
±r
 !
NULL
) {

370 
±r
 += 6;

371 *
±r
 == '\\' || *ptr == '/')Ötr++;

372 
	`°∫˝y
(
exíame
, 
±r
, 255);

373 
exíame
[255] = '\0';

374 
±r
 = 
exíame
;

375 *
±r
 != '\0' && *ptr != '\r' && *ptr != '\n')Ötr++;

376 *
±r
 = '\0';

377 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1)

383 } i‡(
	`GëCdromFûe
(
mdú
, 
time
, "PSX.EXE;1") != -1) {

384 
	`°r˝y
(
exíame
, "PSX.EXE;1");

385 
	`°r˝y
(
CdromId
, "SLUS99999");

389 i‡(
CdromId
[0] == '\0') {

390 
Àn
 = 
	`°æí
(
exíame
);

391 
c
 = 0;

392 
i
 = 0; i < 
Àn
; ++i) {

393 i‡(
exíame
[
i
] =';' || 
c
 >(
CdromId
) - 1)

395 i‡(
	`iß um
(
exíame
[
i
]))

396 
CdromId
[
c
++] = 
exíame
[
i
];

400 i‡(
CdromId
[0] == '\0')

401 
	`°r˝y
(
CdromId
, "SLUS99999");

403 i‡(
C⁄fig
.
PsxAuto
) {

404 i‡(
CdromId
[2] == 'e' || CdromId[2] == 'E')

405 
C⁄fig
.
PsxTy≥
 = 
PSX_TYPE_PAL
;

406 
C⁄fig
.
PsxTy≥
 = 
PSX_TYPE_NTSC
;

409 
	`SPU_ª£tUpd©eI¡îvÆ
();

412 i‡(
CdromLabñ
[0] == ' ') {

413 
	`°∫˝y
(
CdromLabñ
, 
CdromId
, 9);

416 
	`¥ötf
("CD-ROM Labñ: %.32s\n", 
CdromLabñ
);

417 
	`¥ötf
("CD-ROM ID: %.9s\n", 
CdromId
);

418 
	`¥ötf
("CD-ROM EXE Name: %.255s\n", 
exíame
);

420 
	`BuûdPPFCache
();

423 
	}
}

425 
	$PSXGëFûeTy≥
(
FILE
 *
f
) {

426 
cuºít
;

427 
u8
 
mybuf
[2048];

428 
EXE_HEADER
 *
exe_hdr
;

429 
FILHDR
 *
coff_hdr
;

431 
cuºít
 = 
	`·ñl
(
f
);

432 
	`f£ek
(
f
, 0L, 
SEEK_SET
);

433 i‡(
	`‰ód
(
mybuf
, 2048, 1, 
f
) != 1 ||

434 
	`f£ek
(
f
, 
cuºít
, 
SEEK_SET
) == -1)

435 
övÆid
;

437 
exe_hdr
 = (
EXE_HEADER
 *)
mybuf
;

438 i‡(
	`memcmp
(
exe_hdr
->
id
, "PS-X EXE", 8) == 0)

439  
PSX_EXE
;

441 i‡(
mybuf
[0] == 'C' && mybuf[1] == 'P' && mybuf[2] == 'E')

442  
CPE_EXE
;

444 
coff_hdr
 = (
FILHDR
 *)
mybuf
;

445 i‡(
	`SWAPu16
(
coff_hdr
->
f_magic
) == 0x0162)

446  
COFF_EXE
;

449 
övÆid
:

450  
INVALID_EXE
;

451 
	}
}

454 
	$Lﬂd
(c⁄° *
ExeP©h
) {

455 
FILE
 *
tmpFûe
;

456 
EXE_HEADER
 
tmpHód
;

457 
ty≥
;

458 
ªtvÆ
 = 0;

459 
u8
 
›code
;

460 
u32
 
£˘i⁄_addªss
, 
£˘i⁄_size
;

461 *
mem
;

463 
	`°∫˝y
(
CdromId
, "SLUS99999", 9);

464 
	`°∫˝y
(
CdromLabñ
, "SLUS_999.99", 11);

466 
tmpFûe
 = 
	`f›í
(
ExeP©h
, "rb");

467 i‡(
tmpFûe
 =
NULL
) {

468 
	`¥ötf
("Eº‹ o≥nög fûe: %s.\n", 
ExeP©h
);

469 
ªtvÆ
 = -1;

471 
ty≥
 = 
	`PSXGëFûeTy≥
(
tmpFûe
);

472 
ty≥
) {

473 
PSX_EXE
:

474 i‡(
	`‰ód
(&
tmpHód
,(
EXE_HEADER
),1,
tmpFûe
) != 1) {

475 
	`¥ötf
("ErrorÑeading PSX_EXEÉxecutable file\n");

476 
ªtvÆ
 = -1;

479 
£˘i⁄_addªss
 = 
	`SWAP32
(
tmpHód
.
t_addr
);

480 
£˘i⁄_size
 = 
	`SWAP32
(
tmpHód
.
t_size
);

481 
mem
 = 
	`PSXM
(
£˘i⁄_addªss
);

482 i‡(
mem
 !
NULL
) {

483 i‡(
	`f£ek
(
tmpFûe
, 0x800, 
SEEK_SET
) == -1 ||

484 
	`‰ód
(
mem
, 
£˘i⁄_size
, 1, 
tmpFûe
) != 1) {

485 
	`¥ötf
("ErrorÑeading PSX_EXEÉxecutable file\n");

486 
ªtvÆ
 = -1;

489 #ifde‡
PSXREC


490 
psxCpu
->
	`CÀ¨
(
£˘i⁄_addªss
, 
£˘i⁄_size
 / 4);

493 
psxRegs
.
pc
 = 
	`SWAP32
(
tmpHód
.
pc0
);

494 
psxRegs
.
GPR
.
n
.
gp
 = 
	`SWAP32
(
tmpHód
.
gp0
);

495 
psxRegs
.
GPR
.
n
.
•
 = 
	`SWAP32
(
tmpHód
.
s_addr
);

496 i‡(
psxRegs
.
GPR
.
n
.
•
 == 0)

497 
psxRegs
.
GPR
.
n
.
•
 = 0x801fff00;

498 
ªtvÆ
 = 0;

500 
CPE_EXE
:

502 i‡(
	`f£ek
(
tmpFûe
, 6, 
SEEK_SET
) == -1) {

503 
	`¥ötf
("ErrorÑeading CPE_EXEÉxecutable file\n");

504 
ªtvÆ
 = -1;

509 i‡(
	`‰ód
(&
›code
, 1, 1, 
tmpFûe
) != 1) {

510 
	`¥ötf
("ErrorÑeading CPE_EXEÉxecutable file\n");

511 
ªtvÆ
 = -1;

515 
›code
) {

517 i‡(
	`‰ód
(&
£˘i⁄_addªss
, 4, 1, 
tmpFûe
) != 1 ||

518 
	`‰ód
(&
£˘i⁄_size
, 4, 1, 
tmpFûe
) != 1) {

519 
	`¥ötf
("ErrorÑeading CPE_EXEÉxecutable file\n");

520 
ªtvÆ
 = -1;

524 
£˘i⁄_addªss
 = 
	`SWAPu32
(section_address);

525 
£˘i⁄_size
 = 
	`SWAPu32
(section_size);

526 #ifde‡
EMU_LOG


527 
	`EMU_LOG
("Lﬂdög %08X byã†‰om %08XÅÿ%08X\n", 
£˘i⁄_size
, 
	`·ñl
(
tmpFûe
), 
£˘i⁄_addªss
);

529 
mem
 = 
	`PSXM
(
£˘i⁄_addªss
);

530 i‡(
mem
 !
NULL
) {

531 i‡(
	`‰ód
(
mem
, 
£˘i⁄_size
, 1, 
tmpFûe
) != 1) {

532 
	`¥ötf
("ErrorÑeading CPE_EXEÉxecutable file\n");

533 
ªtvÆ
 = -1;

536 #ifde‡
PSXREC


537 
psxCpu
->
	`CÀ¨
(
£˘i⁄_addªss
, 
£˘i⁄_size
 / 4);

542 
u32
 
√w_pc
;

543 i‡(
	`f£ek
(
tmpFûe
, 2, 
SEEK_CUR
) == -1 ||

544 
	`‰ód
(&
√w_pc
, 4, 1, 
tmpFûe
) != 1) {

545 
	`¥ötf
("ErrorÑeading CPE_EXEÉxecutable file\n");

546 
ªtvÆ
 = -1;

549 
psxRegs
.
pc
 = 
	`SWAPu32
(
√w_pc
);

554 
	`¥ötf
("Unknow¿CPE opcodê%02xáàposôi⁄ %08lx.\n", 
›code
, 
	`·ñl
(
tmpFûe
) - 1);

555 
ªtvÆ
 = -1;

558 } 
›code
 !0 && 
ªtvÆ
 == 0);

560 
COFF_EXE
:

561 
	`¥ötf
("COFF filesÇot supported.\n");

562 
ªtvÆ
 = -1;

564 
INVALID_EXE
:

565 
	`¥ötf
("This file doesÇotáppearÅo beá valid PSX file.\n");

566 
ªtvÆ
 = -1;

571 i‡(
ªtvÆ
 != 0) {

572 
CdromId
[0] = '\0';

573 
CdromLabñ
[0] = '\0';

576 
	`f˛o£
(
tmpFûe
);

577  
ªtvÆ
;

578 
	}
}

585 *
	$zlib_›í
(c⁄° *
«me
, 
boﬁón
 
wrôög
)

587 * 
gzfûe_±r
 = 
NULL
;

589 c⁄° * 
zlib_mode
 = 
wrôög
 ? "rw4" : "r";

591 i‡(!
«me
 ||Çame[0] == '\0') {

592 
	`¥ötf
("Error: NULLÖtr orÉmpty filenameÖassedÅo zlib_open()\n");

593  
NULL
;

596 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
__CYGWIN__
)

599 i‡((
gzfûe_±r
 = (*)
	`gz›í
(
«me
, 
zlib_mode
)Ë=
NULL
)

600 
	`¥ötf
("Eº‹ i¿%s(Ë›íög fûê%s\n", 
__func__
, 
«me
);

601  
gzfûe_±r
;

604 
Êags
;

605 
mode_t
 
≥rm
;

606 i‡(
wrôög
) {

607 
Êags
 = 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
 | 
O_BINARY
;

609 
≥rm
 = 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IWGRP
 | 
S_IROTH
 | 
S_IWOTH
;

611 
Êags
 = 
O_RDONLY
 | 
O_BINARY
;

612 
≥rm
 = 0;

615 i‡((
SaveFuncs
.
fd
 = 
	`›í
(
«me
, 
Êags
, 
≥rm
)) == -1)

616 
îr‹
;

620 i‡((
SaveFuncs
.
lib_fd
 = 
	`dup
(SaveFuncs.
fd
)) == -1)

621 
îr‹
;

623 i‡((
gzfûe_±r
 = (*)
	`gzd›í
(
SaveFuncs
.
lib_fd
, 
zlib_mode
)Ë=
NULL
) {

624 
	`¥ötf
("ErrorÑeturned from gzdopen()\n");

625 
zlib_îr‹
;

628  
gzfûe_±r
;

630 
îr‹
:

631 
	`≥º‹
(
__func__
);

632 
zlib_îr‹
:

633 
	`¥ötf
("Eº‹ i¿%s(Ë›íög fûê%s\n", 
__func__
, 
«me
);

634 i‡(
SaveFuncs
.
lib_fd
 !-1Ë
	`˛o£
(SaveFuncs.lib_fd);

635 i‡(
SaveFuncs
.
fd
 !-1Ë
	`˛o£
(SaveFuncs.fd);

636 
SaveFuncs
.
fd
 = SaveFuncs.
lib_fd
 = -1;

637  
NULL
;

639 
	}
}

641 
	$zlib_ªad
(*
fûe
, *
buf
, 
u32
 
Àn
)

643  
	`gzªad
((
gzFûe
)
fûe
, 
buf
, 
Àn
);

644 
	}
}

646 
	$zlib_wrôe
(*
fûe
, c⁄° *
buf
, 
u32
 
Àn
)

648  
	`gzwrôe
((
gzFûe
)
fûe
, (*)
buf
, 
Àn
);

649 
	}
}

651 
	$zlib_£ek
(*
fûe
, 
offs
, 
whí˚
)

653  
	`gz£ek
((
gzFûe
)
fûe
, 
offs
, 
whí˚
);

654 
	}
}

656 
	$zlib_˛o£
(*
fûe
)

658 
ªtvÆ
 = 0;

659 i‡(
	`gz˛o£
((
gzFûe
)
fûe
Ë!
Z_OK
Ë
ªtvÆ
 = -1;

661 #i‡!(
	`deföed
(
_WIN32
Ë&& !deföed(
__CYGWIN__
))

662 i‡(
	`fsync
(
SaveFuncs
.
fd
)Ë
ªtvÆ
 = -1;

663 i‡(
	`˛o£
(
SaveFuncs
.
fd
)Ë
ªtvÆ
 = -1;

664 
SaveFuncs
.
fd
 = SaveFuncs.
lib_fd
 = -1;

667  
ªtvÆ
;

668 
	}
}

670 
	$‰ìze_rw
(*
fûe
, 
FªezeMode
 
mode
, *
buf
, 
Àn
)

672 i‡(
mode
 =
FREEZE_LOAD
) {

673 i‡(
SaveFuncs
.
	`ªad
(
fûe
, 
buf
, 
Àn
) !=Üen)  -1;

674 } i‡(
mode
 =
FREEZE_SAVE
) {

675 i‡(
SaveFuncs
.
	`wrôe
(
fûe
, 
buf
, 
Àn
) !=Üen)  -1;

678 
	}
}

680 
PcsxSaveFuncs
 
	gSaveFuncs
 = {

681 
zlib_›í
, 
zlib_ªad
, 
zlib_wrôe
, 
zlib_£ek
, 
zlib_˛o£


682 #i‡!(
deföed
(
_WIN32
Ë&& !deföed(
__CYGWIN__
))

687 c⁄° 
	gPcsxHódî
[32] = "STv4 PCSX v" 
PACKAGE_VERSION
;

691 c⁄° 
u32
 
	gSaveVîsi⁄
 = 0x8b410006;

692 c⁄° 
u32
 
	gSaveVîsi⁄E¨lõ°Suµ‹ãd
 = 0x8b410004;

716 
	$SaveSèã
(c⁄° *
fûe
) {

717 * 
f
;

718 
GPUFªeze_t
 *
gpufP
 = 
NULL
;

719 
SPUFªeze_t
 *
•ufP
 = 
NULL
;

720 *
pMem
 = 
NULL
;

721 
u32
 
Size
;

722 
boﬁ
 
˛o£_îr‹
 = 
Ál£
;

724 i‡((
f
 = 
SaveFuncs
.
	`›í
(
fûe
, 
åue
)Ë=
NULL
) {

725 
	`¥ötf
("Eº‹ o≥nög save°©êfûêf‹ wrôög: %s\n", 
fûe
);

729 i‡–
	`‰ìze_rw
(
f
, 
FREEZE_SAVE
, (*)
PcsxHódî
, 32) ||

730 
	`‰ìze_rw
(
f
, 
FREEZE_SAVE
, (*)&
SaveVîsi⁄
, (
u32
)) ||

731 
	`‰ìze_rw
(
f
, 
FREEZE_SAVE
, (*)&
C⁄fig
.
HLE
, (
boﬁón
)) )

732 
îr‹
;

735 i‡((
pMem
 = (*)
	`mÆloc
(160*120*2)Ë!
NULL
) {

736 
	`∂_s¸ìnshŸ_160x120_rgb565
((
u16
*)
pMem
);

737 i‡(
	`‰ìze_rw
(
f
, 
FREEZE_SAVE
, 
pMem
, 160*120*2))

738 
îr‹
;

739 
	`‰ì
(
pMem
);

740 
pMem
 = 
NULL
;

742 
	`¥ötf
("Warning: couldÇotállocate memory forÉmbedded screenshot.\n");

745 i‡(
C⁄fig
.
HLE
)

746 
	`psxBiosFªeze
(1);

748 i‡–
	`‰ìze_rw
(
f
, 
FREEZE_SAVE
, 
psxM
, 0x00200000) ||

749 
	`‰ìze_rw
(
f
, 
FREEZE_SAVE
, 
psxR
, 0x00080000) ||

750 
	`‰ìze_rw
(
f
, 
FREEZE_SAVE
, 
psxH
, 0x00010000) ||

751 
	`‰ìze_rw
(
f
, 
FREEZE_SAVE
, (*)&
psxRegs
, (psxRegs)) )

752 
îr‹
;

755 i‡((
gpufP
 = (
GPUFªeze_t
 *)
	`mÆloc
((GPUFªeze_t))Ë=
NULL
)

756 
îr‹
;

757 
gpufP
->
ulFªezeVîsi⁄
 = 1;

758 i‡–(!
	`GPU_‰ìze
(
FREEZE_SAVE
, 
gpufP
)) ||

759 
	`‰ìze_rw
(
f
, 
FREEZE_SAVE
, 
gpufP
, (
GPUFªeze_t
)) )

760 
îr‹
;

761 
	`‰ì
(
gpufP
);

762 
gpufP
 = 
NULL
;

765 i‡((
•ufP
 = (
SPUFªeze_t
 *)
	`mÆloc
(16)Ë=
NULL
)

766 
îr‹
;

767 
	`SPU_‰ìze
(
FREEZE_INFO
, 
•ufP
, 
psxRegs
.
cy˛e
);

768 
Size
 = 
•ufP
->Size;

769 
	`‰ì
(
•ufP
);

770 i‡(
	`‰ìze_rw
(
f
, 
FREEZE_SAVE
, &
Size
, 4))

771 
îr‹
;

772 i‡–(
•ufP
 = (
SPUFªeze_t
 *)
	`mÆloc
(
Size
)Ë=
NULL
 ||

773 (!
	`SPU_‰ìze
(
FREEZE_SAVE
, 
•ufP
, 
psxRegs
.
cy˛e
)) ||

774 
	`‰ìze_rw
(
f
, 
FREEZE_SAVE
, 
•ufP
, 
Size
) )

775 
îr‹
;

776 
	`‰ì
(
•ufP
);

777 
•ufP
 = 
NULL
;

779 i‡–
	`sioFªeze
(
f
, 
FREEZE_SAVE
)

780 || 
	`cdrFªeze
(
f
, 
FREEZE_SAVE
)

781 || 
	`psxHwFªeze
(
f
, 
FREEZE_SAVE
)

782 || 
	`psxR˙tFªeze
(
f
, 
FREEZE_SAVE
)

783 || 
	`mdecFªeze
(
f
, 
FREEZE_SAVE
) )

784 
îr‹
;

786 i‡(
SaveFuncs
.
	`˛o£
(
f
)) {

787 
˛o£_îr‹
 = 
åue
;

788 
îr‹
;

792 
îr‹
:

793 
	`¥ötf
("Eº‹ i¿SaveSèã(Ëwrôög fûê%s\n", 
fûe
);

794 
	`¥ötf
("..out of RAM orÇo free spaceÜeft on filesystem?\n");

795 i‡(!
˛o£_îr‹
) {

796 
	`‰ì
(
pMem
); fªe(
gpufP
); fªe(
•ufP
);

797 
SaveFuncs
.
	`˛o£
(
f
);

800 
	}
}

802 
	$LﬂdSèã
(c⁄° *
fûe
) {

803 * 
f
;

804 
GPUFªeze_t
 *
gpufP
 = 
NULL
;

805 
SPUFªeze_t
 *
•ufP
 = 
NULL
;

806 
u32
 
Size
;

807 
hódî
[32];

808 
u32
 
vîsi⁄
;

809 
boﬁón
 
hÀ
;

812 
sshŸ_image_size
 = 160*120*2;

814 i‡((
f
 = 
SaveFuncs
.
	`›í
(
fûe
, 
Ál£
)Ë=
NULL
) {

815 
	`¥ötf
("Eº‹ o≥nög save°©êfûêf‹Ñódög: %s\n", 
fûe
);

819 i‡–
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, 
hódî
, (header)) ||

820 
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, &
vîsi⁄
, (
u32
)) ||

821 
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, &
hÀ
, (
boﬁón
)) )

822 
îr‹
;

824 i‡(
	`°∫cmp
("STv4 PCSX", 
hódî
, 9) != 0 ||

825 
vîsi⁄
 < 
SaveVîsi⁄E¨lõ°Suµ‹ãd
 ||

826 
hÀ
 !
C⁄fig
.
HLE
)

827 
îr‹
;

829 
psxCpu
->
	`Re£t
();

833 i‡(
vîsi⁄
 <= 0x8b410005) {

834 
sshŸ_image_size
 = 128*96*3;

838 i‡(
SaveFuncs
.
	`£ek
(
f
, 
sshŸ_image_size
, 
SEEK_CUR
) == -1)

839 
îr‹
;

841 i‡–
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, 
psxM
, 0x00200000) ||

842 
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, 
psxR
, 0x00080000) ||

843 
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, 
psxH
, 0x00010000) )

844 
îr‹
;

846 i‡(
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, (*)&
psxRegs
, (psxRegs)))

847 
îr‹
;

848 
psxRegs
.
psxM
=psxM;

849 
psxRegs
.
psxP
=psxP;

850 
psxRegs
.
psxR
=psxR;

851 
psxRegs
.
psxH
=psxH;

852 
psxRegs
.
io_cy˛e_cou¡î
=0;

858 
	`psxEvqueueInôFromFªeze
();

860 i‡(
C⁄fig
.
HLE
)

861 
	`psxBiosFªeze
(0);

864 i‡((
gpufP
 = (
GPUFªeze_t
 *)
	`mÆloc
((GPUFªeze_t))Ë=
NULL
 ||

865 
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, 
gpufP
, (
GPUFªeze_t
)) ||

866 (!
	`GPU_‰ìze
(
FREEZE_LOAD
, 
gpufP
)))

867 
îr‹
;

868 
	`‰ì
(
gpufP
);

869 
gpufP
 = 
NULL
;

870 i‡(
HW_GPU_STATUS
 == 0)

871 
HW_GPU_STATUS
 = 
	`GPU_ªadSètus
();

874 i‡–
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, &
Size
, 4) ||

875 (
•ufP
 = (
SPUFªeze_t
 *)
	`mÆloc
(
Size
)Ë=
NULL
 ||

876 
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, 
•ufP
, 
Size
) ||

877 (!
	`SPU_‰ìze
(
FREEZE_LOAD
, 
•ufP
, 
psxRegs
.
cy˛e
)) )

878 
îr‹
;

879 
	`‰ì
(
•ufP
);

880 
•ufP
 = 
NULL
;

885 i‡(
vîsi⁄
 <= 0x8b410004) {

886 
	`¥ötf
("Warning: using buggy older savestate version,ÉxpectÖroblems.\n");

889 
	`psxR˙tInôFromFªeze
();

890 
skù_missög_d©a_hack
;

893 i‡–
	`sioFªeze
(
f
, 
FREEZE_LOAD
) ||

894 
	`cdrFªeze
(
f
, 
FREEZE_LOAD
) ||

895 
	`psxHwFªeze
(
f
, 
FREEZE_LOAD
) ||

896 
	`psxR˙tFªeze
(
f
, 
FREEZE_LOAD
) ||

897 
	`mdecFªeze
(
f
, 
FREEZE_LOAD
) )

898 
îr‹
;

901 
skù_missög_d©a_hack
:

903 
SaveFuncs
.
	`˛o£
(
f
);

904 
	`∂_ª£t
();

907 
îr‹
:

908 
	`¥ötf
("Eº‹ i¿LﬂdSèã(Ëlﬂdög fûê%s\n", 
fûe
);

909 
	`‰ì
(
gpufP
); fªe(
•ufP
);

910 
SaveFuncs
.
	`˛o£
(
f
);

912 
	}
}

919 
	$CheckSèã
(c⁄° *
fûe
, 
boﬁ
 *
u£s_hÀ
, boﬁ 
gë_sshŸ
, 
u16
 *
sshŸ_image
)

921 i‡(!
fûe
 || file[0] == '\0') {

922 
	`¥ötf
("Eº‹ i¿%s(): NULLÖå o∏em±y save°©êfûíamê°rög\n", 
__func__
);

926 *
f
 = 
NULL
;

927 
hódî
[32];

928 
u32
 
vîsi⁄
;

929 
boﬁ
 
hÀ
;

931 i‡((
f
 = 
SaveFuncs
.
	`›í
(
fûe
, 
Ál£
)Ë=
NULL
) {

932 
	`¥ötf
("Eº‹ i¿%s(Ë›íög save°©êfûe: %s\n", 
__func__
, 
fûe
);

933 
	`≥º‹
(
__func__
);

934  
CHECKSTATE_ERR_OPEN
;

937 i‡–
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, 
hódî
, (header)) ||

938 
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, &
vîsi⁄
, (
u32
)) ||

939 
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, &
hÀ
, (
boﬁón
)) ) {

940 
	`¥ötf
("Eº‹ i¿%†ªadög fûê%s\n", 
__func__
, 
fûe
);

941 
	`≥º‹
(
__func__
);

942 
SaveFuncs
.
	`˛o£
(
f
);

943  
CHECKSTATE_ERR_READ
;

946 i‡(
	`°∫cmp
("STv4 PCSX", 
hódî
, 9) != 0) {

947 
SaveFuncs
.
	`˛o£
(
f
);

948  
CHECKSTATE_ERR_HEADER
;

951 i‡(
vîsi⁄
 < 
SaveVîsi⁄E¨lõ°Suµ‹ãd
) {

952 
	`¥ötf
("Error in %s(): file %s isÅoo old,ÇoÜonger supported.\n"

954 
__func__
, 
fûe
, 
vîsi⁄
, 
SaveVîsi⁄E¨lõ°Suµ‹ãd
);

955 
SaveFuncs
.
	`˛o£
(
f
);

956  
CHECKSTATE_ERR_VERSION
;

960 i‡(
u£s_hÀ
)

961 *
u£s_hÀ
 = 
hÀ
;

964 i‡(
gë_sshŸ
) {

965 i‡(
vîsi⁄
 <= 0x8b410005) {

967 
SaveFuncs
.
	`˛o£
(
f
);

968  
CHECKSTATE_ERR_NO_SSHOT
;

971 i‡(!
sshŸ_image
) {

972 
SaveFuncs
.
	`˛o£
(
f
);

973  
CHECKSTATE_SUCCESS
;

976 i‡(
	`‰ìze_rw
(
f
, 
FREEZE_LOAD
, 
sshŸ_image
, 160*120*2)) {

977 
	`¥ötf
("Warning: %s() failedÑeadingÉmbedded screenshot in %s\n",

978 
__func__
, 
fûe
);

979 
SaveFuncs
.
	`˛o£
(
f
);

980  
CHECKSTATE_ERR_READ
;

984 
SaveFuncs
.
	`˛o£
(
f
);

985  
CHECKSTATE_SUCCESS
;

986 
	}
}

992 
boﬁ
 
	$FûeExi°s
(c⁄° * 
fûíame
)

994 i‡(!
fûíame
 || *filename == '\0')

995  
Ál£
;

996 
°©
 
°
;

997 
ªsu…
 = 
	`°©
(
fûíame
, &
°
);

998  
ªsu…
 == 0;

999 
	}
}

1004 
	$FûeD©e
(c⁄° * 
fûíame
, *
d©e_°r
, 
time_t
 *
m_time
)

1006 i‡(!
fûíame
 || *filename == '\0')

1008 
°©
 
°
;

1009 i‡(
	`°©
(
fûíame
, &
°
) < 0)

1012 i‡(
d©e_°r
) {

1013 #ifde‡
_WIN32


1014 *
tmp
 = 
	`˘ime
(&
°
.
°_mtime
);

1015 i‡(
tmp
)

1016 
	`°r˝y
(
d©e_°r
, 
tmp
);

1018 
d©e_°r
[0] = '\0';

1020 
	`˘ime_r
(&
°
.
°_mtime
, 
d©e_°r
);

1023 
Àn
 = 
	`°æí
(
d©e_°r
);

1024 i‡(
Àn
)

1025 
d©e_°r
[
Àn
-1] = '\0';

1028 i‡(
m_time
Ë*m_timê
°
.
°_mtime
;

1030 
	}
}

	@src/misc.h

21 #i‚de‡
__MISC_H__


22 
	#__MISC_H__


	)

24 
	~"psxcomm⁄.h
"

25 
	~"∂ugös.h
"

26 
	~"r3000a.h
"

27 
	~"psxmem.h
"

29 #unde‡
s_addr


32 
	mid
[8];

33 
u32
 
	mãxt
;

34 
u32
 
	md©a
;

35 
u32
 
	mpc0
;

36 
u32
 
	mgp0
;

37 
u32
 
	mt_addr
;

38 
u32
 
	mt_size
;

39 
u32
 
	md_addr
;

40 
u32
 
	md_size
;

41 
u32
 
	mb_addr
;

42 
u32
 
	mb_size
;

43 
u32
 
	ms_addr
;

44 
u32
 
	ms_size
;

45 
u32
 
	mSavedSP
;

46 
u32
 
	mSavedFP
;

47 
u32
 
	mSavedGP
;

48 
u32
 
	mSavedRA
;

49 
u32
 
	mSavedS0
;

50 } 
	tEXE_HEADER
;

52 
	sexã∫Æ_fûehdr
 {

53 
	mf_magic
;

54 
	mf_ns˙s
;

55 
	mf_timd©
;

56 
	mf_sym±r
;

57 
	mf_nsyms
;

58 
	mf_›thdr
;

59 
	mf_Êags
;

62 
	#FILHDR
 
exã∫Æ_fûehdr


	)

64 
CdromId
[10];

65 
CdromLabñ
[33];

67 
LﬂdCdrom
();

68 
LﬂdCdromFûe
(c⁄° *
fûíame
, 
EXE_HEADER
 *
hód
);

69 
CheckCdrom
();

70 
Lﬂd
(c⁄° *
ExeP©h
);

72 
SaveSèã
(c⁄° *
fûe
);

73 
LﬂdSèã
(c⁄° *
fûe
);

74 
CheckSèã
(c⁄° *
fûe
, 
boﬁ
 *
u£s_hÀ
, boﬁ 
gë_sshŸ
, 
u16
 *
sshŸ_image
);

77 
	mCHECKSTATE_SUCCESS
 = 0,

78 
	mCHECKSTATE_ERR_OPEN
 = -1,

79 
	mCHECKSTATE_ERR_HEADER
 = -2,

80 
	mCHECKSTATE_ERR_VERSION
 = -3,

81 
	mCHECKSTATE_ERR_NO_SSHOT
 = -4,

82 
	mCHECKSTATE_ERR_READ
 = -5

85 
boﬁ
 
FûeExi°s
(c⁄° * 
fûíame
);

86 
FûeD©e
(c⁄° * 
fûíame
, *
d©e_°r
, 
time_t
 *
m_time
);

	@src/pad.cpp

21 
	~"psxcomm⁄.h
"

22 
	~"psxmem.h
"

23 
	~"r3000a.h
"

25 
	sègGlobÆD©a


27 
uöt8_t
 
	mCurByã1
;

28 
uöt8_t
 
	mCmdLí1
;

29 
uöt8_t
 
	mCurByã2
;

30 
uöt8_t
 
	mCmdLí2
;

31 } 
	tGLOBALDATA
;

33 
GLOBALDATA
 
	gg
={0,0,0,0};

35 
	$PAD1_°¨tPﬁl
() {

36 
g
.
CurByã1
 = 0;  0xFF;

37 
	}
}

39 
	$PAD2_°¨tPﬁl
() {

40 
g
.
CurByã2
 = 0;  0xFF;

41 
	}
}

43 
	$PAD1_pﬁl
() {

44 
uöt8_t
 
buf
[8] = {0xFF, 0x5A, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80};

46 i‡(
g
.
CurByã1
 == 0) {

47 
uöt16_t
 
n
;

48 
g
.
CurByã1
++;

50 
n
 = 
	`∑d_ªad
(0);

52 
buf
[2] = 
n
 & 0xFF;

53 
buf
[3] = 
n
 >> 8;

55 
g
.
CmdLí1
 = 4;

60 i‡(
g
.
CurByã1
 >g.
CmdLí1
)  0xFF;

61  
buf
[
g
.
CurByã1
++];

62 
	}
}

64 
	$PAD2_pﬁl
() {

65 
uöt8_t
 
buf
[8] = {0xFF, 0x5A, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80};

67 i‡(
g
.
CurByã2
 == 0) {

68 
uöt16_t
 
n
;

69 
g
.
CurByã2
++;

71 
n
 = 
	`∑d_ªad
(1);

73 
buf
[2] = 
n
 & 0xFF;

74 
buf
[3] = 
n
 >> 8;

76 
g
.
CmdLí2
 = 4;

81 i‡(
g
.
CurByã2
 >g.
CmdLí2
)  0xFF;

82  
buf
[
g
.
CurByã2
++];

83 
	}
}

	@src/plugin_lib/perfmon.cpp

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<uni°d.h
>

29 #i‚de‡
_WIN32


30 
	~<sys/ªsour˚.h
>

31 
	#PERFMON_CPU_STATS


	)

34 #ifde‡
_WIN32


35 #i‚de‡
su£c⁄ds_t


36 
	#su£c⁄ds_t
 

	)

40 
	~"≥rfm⁄.h
"

41 
	~"psxcomm⁄.h
"

44 
timevÆ
 
	mtv_œ°
;

45 
	m‰ame_˘r
;

48 
	mnum_íåõs
;

49 
	mÂs
[5];

50 #ifde‡
PERFMON_CPU_STATS


51 
	m˝u
[5];

53 } 
	mbuf
;

55 
	mÂs_cur
, 
	mÂs_avg
, 
	mÂs_mö
, 
	mÂs_max
;

56 #ifde‡
PERFMON_CPU_STATS


57 
	m˝u_cur
, 
	m˝u_avg
, 
	m˝u_mö
, 
	m˝u_max
;

58 
timevÆ
 
	mtv_œ°_ru_utime
, 
	mtv_œ°_ru_°ime
;

60 } 
	gpm⁄
;

63 
ölöe
 
su£c⁄ds_t
 
	$tvdiff_u£c
(c⁄° 
timevÆ
 &
tv
, c⁄°ÅimevÆ &
tv_ﬁd
)

65  (
tv
.
tv_£c
 - 
tv_ﬁd
.tv_£cË* 1000000 +Åv.
tv_u£c
 -Åv_old.tv_usec;

66 
	}
}

69 
ölöe
 
su£c⁄ds_t
 
	$tvsum_u£c
(c⁄° 
timevÆ
 &
tv1
, c⁄°ÅimevÆ &
tv2
)

71  (
tv1
.
tv_£c
 + 
tv2
.tv_£cË* 1000000 +Åv1.
tv_u£c
 +Åv2.tv_usec;

72 
	}
}

74 #ifde‡
PERFMON_CPU_STATS


75 
	$pm⁄InôCpuUßge
()

77 
rußge
 
ru
;

78 i‡(
	`gërußge
(
RUSAGE_SELF
, &
ru
) < 0)

81 
pm⁄
.
tv_œ°_ru_utime
 = 
ru
.
ru_utime
;

82 
pm⁄
.
tv_œ°_ru_°ime
 = 
ru
.
ru_°ime
;

83 
	}
}

85 
	$pm⁄GëCpuUßge
(
su£c⁄ds_t
 
u£cs_•™
)

87 
rußge
 
ru
;

88 i‡(
u£cs_•™
 =0 || 
	`gërußge
(
RUSAGE_SELF
, &
ru
) < 0)

90 
su£c⁄ds_t
 
u£cs_u£d
 = 
	`tvdiff_u£c
(
ru
.
ru_utime
, 
pm⁄
.
tv_œ°_ru_utime
) +

91 
	`tvdiff_u£c
(
ru
.
ru_°ime
, 
pm⁄
.
tv_œ°_ru_°ime
);

92 
pm⁄
.
tv_œ°_ru_utime
 = 
ru
.
ru_utime
;

93 
pm⁄
.
tv_œ°_ru_°ime
 = 
ru
.
ru_°ime
;

94  ()(100 * 
u£cs_u£d
Ë/ ()
u£cs_•™
;

95 
	}
}

98 
	$pm⁄Re£t
()

100 
pm⁄
.
‰ame_˘r
 = 0;

101 
pm⁄
.
Âs_cur
 = 0;

102 
	`mem£t
(&
pm⁄
.
buf
, 0, (pmon.buf));

104 #ifde‡
PERFMON_CPU_STATS


105 
pm⁄
.
˝u_cur
 = 0;

106 
	`pm⁄InôCpuUßge
();

108 
	`gëtimeofday
(&
pm⁄
.
tv_œ°
, 0);

109 
	}
}

111 
boﬁ
 
	$pm⁄Upd©e
(
timevÆ
 *
tv_now
)

113 
boﬁ
 
ªt
 = 
Ál£
;

114 
pm⁄
.
‰ame_˘r
++;

115 
su£c⁄ds_t
 
diff
 = 
	`tvdiff_u£c
(*
tv_now
, 
pm⁄
.
tv_œ°
);

117 i‡(
diff
 >= 1000000) {

118 
ªt
 = 
åue
;

119 
pm⁄
.
Âs_cur
 = 1000000.0‡* (Ìm⁄.
‰ame_˘r
 / ()
diff
;

120 #ifde‡
PERFMON_CPU_STATS


121 
pm⁄
.
˝u_cur
 = 
	`pm⁄GëCpuUßge
(
diff
);

123 
pm⁄
.
tv_œ°
 = *
tv_now
;

124 
pm⁄
.
‰ame_˘r
 = 0;

126 
boﬁ
 
√w_dëaûed_°©s
 = 
Ál£
;

127 i‡(
C⁄fig
.
Pîfm⁄DëaûedSèts
) {

129 
pm⁄
.
buf
.
Âs
[pm⁄.buf.
num_íåõs
] =Öm⁄.
Âs_cur
;

130 #ifde‡
PERFMON_CPU_STATS


131 
pm⁄
.
buf
.
˝u
[pm⁄.buf.
num_íåõs
] =Öm⁄.
˝u_cur
;

133 
pm⁄
.
buf
.
num_íåõs
++;

135 i‡(
pm⁄
.
buf
.
num_íåõs
 >= 5) {

136 
√w_dëaûed_°©s
 = 
åue
;

137 
pm⁄
.
buf
.
num_íåõs
 = 0;

140 
pm⁄
.
Âs_mö
 = ()+1000000;

141 
pm⁄
.
Âs_max
 = ()-1000000;

142 
Âs_mö_idx
 = 0;

145 
i
=0; i < 5; ++i) {

146 i‡(
pm⁄
.
buf
.
Âs
[
i
] >Öm⁄.
Âs_max
) {

147 
pm⁄
.
Âs_max
 =Öm⁄.
buf
.
Âs
[
i
];

149 i‡(
pm⁄
.
buf
.
Âs
[
i
] <Öm⁄.
Âs_mö
) {

150 
pm⁄
.
Âs_mö
 =Öm⁄.
buf
.
Âs
[
i
];

151 
Âs_mö_idx
 = 
i
;

157 
pm⁄
.
Âs_avg
 = 0;

158 
i
=0; i < 5; ++i) {

159 i‡(
i
 !
Âs_mö_idx
Ë
pm⁄
.
Âs_avg
 +pm⁄.
buf
.
Âs
[i];

161 
pm⁄
.
Âs_avg
 *= 0.25f;

163 #ifde‡
PERFMON_CPU_STATS


165 
pm⁄
.
˝u_mö
 = ()+1000000;

166 
pm⁄
.
˝u_max
 = ()-1000000;

167 
˝u_max_idx
 = 0;

170 
i
=0; i < 5; ++i) {

171 i‡(
pm⁄
.
buf
.
˝u
[
i
] >Öm⁄.
˝u_max
) {

172 
pm⁄
.
˝u_max
 =Öm⁄.
buf
.
˝u
[
i
];

173 
˝u_max_idx
 = 
i
;

175 i‡(
pm⁄
.
buf
.
˝u
[
i
] <Öm⁄.
˝u_mö
) {

176 
pm⁄
.
˝u_mö
 =Öm⁄.
buf
.
˝u
[
i
];

182 
pm⁄
.
˝u_avg
 = 0;

183 
i
=0; i < 5; ++i) {

184 i‡(
i
 !
˝u_max_idx
Ë
pm⁄
.
˝u_avg
 +pm⁄.
buf
.
˝u
[i];

186 
pm⁄
.
˝u_avg
 *= 0.25f;

191 i‡(
C⁄fig
.
Pîfm⁄C⁄sﬁeOuçut
)

192 
	`pm⁄PrötSèts
(
√w_dëaûed_°©s
);

194  
ªt
;

195 
	}
}

197 
	$pm⁄Pau£
()

199 
	}
}

201 
	$pm⁄Resume
()

203 
pm⁄
.
‰ame_˘r
 = 0;

204 
	`gëtimeofday
(&
pm⁄
.
tv_œ°
, 0);

205 #ifde‡
PERFMON_CPU_STATS


206 
	`pm⁄InôCpuUßge
();

208 
	}
}

210 
	$pm⁄GëSèts
(*
Âs_cur
, *
˝u_cur
)

212 *
Âs_cur
 = 
pm⁄
.fps_cur;

213 #ifde‡
PERFMON_CPU_STATS


214 *
˝u_cur
 = 
pm⁄
.cpu_cur;

216 *
˝u_cur
 = 0;

218 
	}
}

220 
	$pm⁄PrötSèts
(
boﬁ
 
¥öt_dëaûed_°©s
)

222 #ifde‡
PERFMON_CPU_STATS


223 
	`¥ötf
("FPS: %6.1‡ CPU: %6.1f%%\n", 
pm⁄
.
Âs_cur
,Öm⁄.
˝u_cur
);

224 i‡(
¥öt_dëaûed_°©s
) {

225 
	`¥ötf
("FPS mö: %6.1‡ max: %6.1‡ávg: %6.1f\n", 
pm⁄
.
Âs_mö
,Öm⁄.
Âs_max
,Öm⁄.
Âs_avg
);

226 
	`¥ötf
("CPU mö: %6.1f%% max: %6.1f%%ávg: %6.1f%%\n", 
pm⁄
.
˝u_mö
,Öm⁄.
˝u_max
,Öm⁄.
˝u_avg
);

227 
	`¥ötf
("\n");

230 
	`¥ötf
("FPS: %6.1f\n", 
pm⁄
.
Âs_cur
);

231 i‡(
¥öt_dëaûed_°©s
) {

232 
	`¥ötf
("FPS mö: %6.1‡ max: %6.1‡ávg: %6.1f\n", 
pm⁄
.
Âs_mö
,Öm⁄.
Âs_max
,Öm⁄.
Âs_avg
);

233 
	`¥ötf
("\n");

236 
	}
}

	@src/plugin_lib/perfmon.h

24 #i‚de‡
PERFMON_H


25 
	#PERFMON_H


	)

27 
	~<sys/time.h
>

30 
pm⁄Re£t
();

34 
boﬁ
 
pm⁄Upd©e
(
timevÆ
 *
tv_now
);

37 
pm⁄GëSèts
(*
Âs_cur
, *
˝u_cur
);

40 
pm⁄PrötSèts
(
boﬁ
 
¥öt_dëaûed_°©s
);

43 
pm⁄Pau£
();

44 
pm⁄Resume
();

	@src/plugin_lib/pl_sshot.cpp

24 
	~<°döt.h
>

25 
	~<°rög.h
>

27 
	~"∂ugö_lib.h
"

29 
	#RGB16
(
C
Ë((((C)&(0x1f<<10))>>10Ë| (((C)&(0x1f<<5))<<1Ë| (((C)&(0x1f))<<11))

	)

30 
	#RGB24
(
R
,
G
,
B
Ë((((R)&0xF8)<<8)|(((G)&0xFC)<<3)|(((B)&0xF8)>>3))

	)

34 
	$∂_s¸ìnshŸ_160x120_rgb565
(
uöt16_t
 *
d°
)

36 
	`mem£t
((*)
d°
, 0, 160*120*2);

37 
x
 = 
∂_d©a
.
söfo
.x;

38 
y
 = 
∂_d©a
.
söfo
.y;

39 
w
 = 
∂_d©a
.
söfo
.w;

40 
h
 = 
∂_d©a
.
söfo
.h;

41 
hªs
 = 
∂_d©a
.
söfo
.hres;

42 
vªs
 = 
∂_d©a
.
söfo
.vres;

43 
boﬁ
 
dïth24
 = 
∂_d©a
.
söfo
.depth24;

44 
uöt16_t
 *
§c
 = (uöt16_t*)
∂_d©a
.
söfo
.
vøm
;

45 c⁄° 
vøm_h
 = 512;

47 i‡(
w
 =0 || 
h
 == 0)

50 i‡(
hªs
 > 640) hres = 640;

51 i‡(
vªs
 > 480) vres = 480;

52 i‡(
w
 > 
hªs
) w = hres;

53 i‡(
h
 > 
vªs
) h = vres;

55 i‡(
y
 + 
h
 > 
vøm_h
) {

56 i‡(
y
 + 
h
 - 
vøm_h
 > h / 2) {

58 
h
 -
vøm_h
 - 
y
;

59 
y
 = 0;

62 
h
 = 
vøm_h
 - 
y
;

67 i‡(
vªs
 == 480)

68 
y
 &= ~1;

70 
§c
 +
y
 * 1024 + 
x
;

73 c⁄° 
§c_°ride
 = (
vªs
 == 480) ? 1024 * 4 : 1024 * 2;

74 c⁄° 
d°_°ride
 = 160;

76 
sˇÀ_numî
, 
sˇÀ_díom
;

77 
hªs
) {

79 
sˇÀ_numî
 = 4; 
sˇÀ_díom
 = 5;

82 
sˇÀ_numî
 = 1; 
sˇÀ_díom
 = 1;

85 
sˇÀ_numî
 = 8; 
sˇÀ_díom
 = 7;

88 
sˇÀ_numî
 = 6; 
sˇÀ_díom
 = 5;

91 
sˇÀ_numî
 = 8; 
sˇÀ_díom
 = 5;

94 
sˇÀ_numî
 = 2; 
sˇÀ_díom
 = 1;

97 
	`¥ötf
("W¨nög: uƒecognized hª†%d i¿%s()\n", 
hªs
, 
__func__
);

101 
°¨t_i
 = 0, 
íd_i
 = 160;

102 
°¨t_j
 = 0, 
íd_j
 = 120;

105 i‡(
w
 < 
hªs
) {

106 
tmp
 = ((
hªs
 - 
w
Ë/ 2Ë* 
sˇÀ_díom
 / 
sˇÀ_numî
;

107 
°¨t_i
 +
tmp
 / 2;

108 
íd_i
 -
tmp
 / 2;

112 i‡(
h
 < 
vªs
) {

113 
tmp
 = ((
vªs
 - 
h
) / 2) / ((vres == 480) ? 2 : 1);

114 
°¨t_j
 +
tmp
 / 2;

115 
íd_j
 -
tmp
 / 2;

118 
d°
 +
°¨t_j
 * 
d°_°ride
 + 
°¨t_i
;

120 
j
=
°¨t_j
; j < 
íd_j
; ++j) {

121 i‡(
dïth24
) {

122 
i
=
°¨t_i
; i < 
íd_i
; ++i) {

123 
§c_off
 = 
i
 * 2 * 
sˇÀ_numî
 / 
sˇÀ_díom
;

124 
uöt8_t
 *
§˝ix8
 = (uöt8_t*)
§c
 + 
§c_off
 * 3;

125 
d°
[
i
] = 
	`RGB24
(
§˝ix8
[0], srcpix8[1], srcpix8[2]);

128 
i
=
°¨t_i
; i < 
íd_i
; ++i) {

129 
§c_off
 = 
i
 * 2 * 
sˇÀ_numî
 / 
sˇÀ_díom
;

130 
d°
[
i
] = 
	`RGB16
(
§c
[
§c_off
]);

133 
d°
 +
d°_°ride
;

134 
§c
 +
§c_°ride
;

136 
	}
}

	@src/plugin_lib/plugin_lib.cpp

29 
	~<uni°d.h
>

31 
	~"psxcomm⁄.h
"

32 
	~"∂ugö_lib.h
"

33 
	~"≥rfm⁄.h
"

34 
	~"∂ugös.h
"

36 #ifde‡
USE_GPULIB


37 
	~"gpu/gpulib/gpu.h
"

40 
∂_‰ameskù_¥ï¨e
(
s8
 
‰ameskù
);

41 
∂_°©s_upd©e
();

43 
	#MAX_LAG_FRAMES
 3

	)

45 
	#tvdiff
(
tv
, 
tv_ﬁd
) \

46 ((
tv
.
tv_£c
 - 
tv_ﬁd
.tv_£cË* 1000000 +Åv.
tv_u£c
 -Åv_ﬁd.tv_u£c)

	)

48 
∂_d©a_t
 
	g∂_d©a
;

50 
	$∂_˛ór_s¸ìn
()

52 
u16
 *
d°
 = 
SCREEN
;

53 
	`mem£t
((*)
d°
, 0, 320*240*2);

54 
	}
}

56 
	$∂_˛ór_b‹dîs
()

58 
	`gëtimeofday
(&
∂_d©a
.
tv_œ°_˛ór
, 0);

59 
	`∂_˛ór_s¸ìn
();

61 
∂_d©a
.
˛ór_˘r
 = 4;

62 
	}
}

64 
	$∂_‰ameskù_¥ï¨e
(
s8
 
‰ameskù
)

66 
∂_d©a
.
fskù_advi˚
 = 
Ál£
;

67 
∂_d©a
.
‰ameskù
 = frameskip;

68 
∂_d©a
.
is_∑l
 = (
C⁄fig
.
PsxTy≥
 =
PSXTYPE_PAL
);

69 
∂_d©a
.
‰ame_öãrvÆ
 =Öl_d©a.
is_∑l
 ? 20000 : 16667;

70 
∂_d©a
.
‰ame_öãrvÆ1024
 =Öl_d©a.
is_∑l
 ? 20000*1024 : 17066667;

72 
timevÆ
 
now
;

73 
	`gëtimeofday
(&
∂_d©a
.
tv_œ°_˛ór
, 0);

74 
	`gëtimeofday
(&
now
, 0);

75 
∂_d©a
.
vsync_u£c_time
 = 
now
.
tv_u£c
;

76 
∂_d©a
.
vsync_u£c_time
 >∂_d©a.
‰ame_öãrvÆ
)

77 
∂_d©a
.
vsync_u£c_time
 -∂_d©a.
‰ame_öãrvÆ
;

79 #ifde‡
USE_GPULIB


80 
	`gpulib_‰ameskù_¥ï¨e
(
‰ameskù
);

82 
	}
}

85 
	$∂_‰ame_limô
()

87 
timevÆ
 
now
;

88 
diff
, 
ußdj
;

90 
	`gëtimeofday
(&
now
, 0);

92 
	`GPU_gëS¸ìnInfo
(&
∂_d©a
.
söfo
);

94 i‡(
∂_d©a
.
˛ór_˘r
 > 0) {

95 
diff
 = 
	`tvdiff
(
now
, 
∂_d©a
.
tv_œ°_˛ór
);

96 i‡(
diff
 > 166667) {

97 
∂_d©a
.
˛ór_˘r
--;

98 
∂_d©a
.
tv_œ°_˛ór
 = 
now
;

99 
	`∂_˛ór_s¸ìn
();

105 
boﬁ
 
√w_°©s
 = 
	`pm⁄Upd©e
(&
now
);

106 i‡(
√w_°©s
) {

107 
	`pm⁄GëSèts
(&
∂_d©a
.
Âs_cur
, &∂_d©a.
˝u_cur
);

108 
	`∂_°©s_upd©e
();

110 
boﬁón
 
u£_•ìdup
;

111 
s8
 
‰amskù
 = 
u£_•ìdup
 =
Ál£
 ? 
C⁄fig
.
FømeSkù
 : 3;

113 i‡(
∂_d©a
.
‰ameskù
 !
‰amskù
 ||

114 
∂_d©a
.
is_∑l
 !(
C⁄fig
.
PsxTy≥
 =
PSXTYPE_PAL
))

116 
	`∂_‰ameskù_¥ï¨e
(
‰amskù
);

120 
∂_d©a
.
tv_ex≥˘
.
tv_u£c
 +∂_d©a.
‰ame_öãrvÆ1024
;

121 i‡(
∂_d©a
.
tv_ex≥˘
.
tv_u£c
 >= (1000000 << 10)) {

122 
∂_d©a
.
tv_ex≥˘
.
tv_u£c
 -= (1000000 << 10);

123 
∂_d©a
.
tv_ex≥˘
.
tv_£c
++;

125 
diff
 = (
∂_d©a
.
tv_ex≥˘
.
tv_£c
 - 
now
.tv_sec) * 1000000 +

126 (
∂_d©a
.
tv_ex≥˘
.
tv_u£c
 >> 10Ë- 
now
.tv_usec;

128 i‡(
diff
 > 
MAX_LAG_FRAMES
 * 
∂_d©a
.
‰ame_öãrvÆ
 ||

129 
diff
 < -
MAX_LAG_FRAMES
 * 
∂_d©a
.
‰ame_öãrvÆ
)

132 
∂_d©a
.
tv_ex≥˘
 = 
now
;

133 
diff
 = 0;

135 
ußdj
 = 
∂_d©a
.
vsync_u£c_time
;

136 
ußdj
 < 
∂_d©a
.
tv_ex≥˘
.
tv_u£c
 -Öl_d©a.
‰ame_öãrvÆ
)

137 
ußdj
 +
∂_d©a
.
‰ame_öãrvÆ
;

138 
∂_d©a
.
tv_ex≥˘
.
tv_u£c
 = 
ußdj
 << 10;

141 i‡((
C⁄fig
.
FømeLimô
 && !
u£_•ìdup
Ë&& (
diff
 > 
∂_d©a
.
‰ame_öãrvÆ
)) {

142 
	`u¶ìp
(
diff
 - 
∂_d©a
.
‰ame_öãrvÆ
);

145 i‡(
diff
 < -
∂_d©a
.
‰ame_öãrvÆ
) {

146 
∂_d©a
.
fskù_advi˚
 = 
åue
;

147 } i‡(
diff
 >= 0) {

148 
∂_d©a
.
fskù_advi˚
 = 
Ál£
;

153 i‡(
∂_d©a
.
dy«ªc_compûed
) {

154 i‡(
∂_d©a
.
dy«ªc_a˘ive_vsyncs
 < 32)

155 
∂_d©a
.
fskù_advi˚
 = 
Ál£
;

156 
∂_d©a
.
dy«ªc_a˘ive_vsyncs
++;

158 
∂_d©a
.
dy«ªc_a˘ive_vsyncs
 = 0;

160 
∂_d©a
.
dy«ªc_compûed
 = 
Ál£
;

161 
	}
}

163 
	$∂_öô
()

165 
	`∂_ª£t
();

167 #ifde‡
USE_GPULIB


168 
	`gpulib_£t_c⁄fig
(&
gpulib_c⁄fig
);

170 
	}
}

172 
	$∂_ª£t
()

174 
∂_d©a
.
˛ór_˘r
 = 0;

175 
∂_d©a
.
Âs_cur
 =Öl_d©a.
˝u_cur
 = 0;

176 
∂_d©a
.
dy«ªc_compûed
 = 
Ál£
;

177 
∂_d©a
.
dy«ªc_a˘ive_vsyncs
 = 0;

178 
	`∂_‰ameskù_¥ï¨e
(
C⁄fig
.
FømeSkù
);

179 
	`•rötf
(
∂_d©a
.
°©s_msg
, "000x000x00 CPU=000%% FPS=000/00");

180 
	`pm⁄Re£t
();

181 
	}
}

184 
	$∂_∑u£
()

186 
	`pm⁄Pau£
();

187 
	}
}

190 
	$∂_ªsume
()

192 
	`pm⁄Resume
();

193 
	`∂_‰ameskù_¥ï¨e
(
C⁄fig
.
FømeSkù
);

194 
	`GPU_ªque°S¸ìnRedøw
();

195 
	}
}

197 
	$∂_°©s_upd©e
()

201 
	`•rötf
(
∂_d©a
.
°©s_msg
, "%3ux%3ux%s CPU=%3u%% FPS=%3u/%u",

202 
∂_d©a
.
söfo
.
hªs
,

203 
∂_d©a
.
söfo
.
vªs
,

204 
∂_d©a
.
söfo
.
dïth24
 ? "24" : "15",

205 ()(
∂_d©a
.
˝u_cur
 + 0.5f),

206 ()(
∂_d©a
.
Âs_cur
 + 0.5f),

207 
∂_d©a
.
söfo
.
∑l
 ? 50 : 60);

208 
	}
}

	@src/plugin_lib/plugin_lib.h

29 #i‚de‡
PLUGIN_LIB_H


30 
	#PLUGIN_LIB_H


	)

32 
	~"∂ugös.h
"

33 
	~<sys/time.h
>

34 
	~<°döt.h
>

36 
	s∂_d©a_t
 {

37 
boﬁ
 
	mfskù_advi˚
, 
	mdy«ªc_compûed
, 
	mis_∑l
;

38 
öt8_t
 
	m‰ameskù
;

39 
	m‰ame_öãrvÆ
, 
	m‰ame_öãrvÆ1024
;

40 
	mvsync_u£c_time
;

41 
	mdy«ªc_a˘ive_vsyncs
;

42 
	mÂs_cur
, 
	m˝u_cur
;

43 
timevÆ
 
	mtv_ex≥˘
;

45 
timevÆ
 
	mtv_œ°_˛ór
;

46 
	m˛ór_˘r
;

48 
GPUS¸ìnInfo_t
 
	msöfo
, 
	msöfo_œ°
;

49 
	m°©s_msg
[80];

52 
∂_d©a_t
 
∂_d©a
;

54 
∂_‰ame_limô
();

55 
∂_öô
();

56 
∂_ª£t
();

57 
∂_∑u£
();

58 
∂_ªsume
();

60 
∂_˛ór_s¸ìn
();

61 
∂_˛ór_b‹dîs
();

63 
ölöe
 
boﬁ
 
	$∂_‰ameskù_advi˚
()

65  
∂_d©a
.
fskù_advi˚
;

66 
	}
}

69 
ölöe
 
	$∂_dy«ªc_nŸify
()

71 
∂_d©a
.
dy«ªc_compûed
 = 
åue
;

72 
	}
}

75 
∂_s¸ìnshŸ_160x120_rgb565
(
u16
 *
d°
);

	@src/plugins.cpp

25 
	~"∂ugös.h
"

26 
	~"psxevíts.h
"

27 
	~"∂ugö_lib.h
"

29 #ifde‡
SPU_PCSXREARMED


30 
	~"•u/•u_pcsxª¨med/•u_c⁄fig.h
"

33 
	$LﬂdPlugös
() {

34 
ªt
;

35 c⁄° *
cdrfûíame
=
NULL
;

37 
	`Rñó£Plugös
();

39 
	`LﬂdMcd
(
MCD1
, 
C⁄fig
.
Mcd1
);

40 
	`LﬂdMcd
(
MCD2
, 
C⁄fig
.
Mcd2
);

42 
ªt
 = 
	`CDR_öô
();

43 i‡(
ªt
 < 0Ë{ 
	`¥ötf
 ("Error initializing CD-ROMÖlugin: %d\n",Ñet);  -1; }

45 
ªt
 = 
	`GPU_öô
();

46 i‡(
ªt
 < 0Ë{ 
	`¥ötf
 ("Error initializing GPUÖlugin: %d\n",Ñet);  -1; }

48 
ªt
 = 
	`SPU_öô
();

49 i‡(
ªt
 < 0Ë{ 
	`¥ötf
 ("Error initializing SPUÖlugin: %d\n",Ñet);  -1; }

51 
cdrfûíame
=
	`GëIsoFûe
();

52 i‡(
cdrfûíame
[0] != '\0') {

53 
ªt
=
	`CDR_›í
();

54 i‡(
ªt
 < 0Ë{ 
	`¥ötf
 ("Eº‹ o≥nög CD-ROM: %s\n", 
cdrfûíame
);  -1; }

57 
	`¥ötf
("PluginsÜoaded.\n");

59 
	}
}

61 
	$Rñó£Plugös
() {

62 
	`CDR_shutdown
();

63 
	`GPU_shutdown
();

64 
	`SPU_shutdown
();

65 
	}
}

70 #ifde‡
__˝lu•lus


75 
CALLBACK
 
Triggî_SPU_IRQ
() {

76 
psxHu32ªf
(0x1070Ë|
SWAPu32
(0x200);

78 
Re£tIoCy˛e
();

86 
CALLBACK
 
ScheduÀ_SPU_IRQ
(
cy˛es_a·î
) {

87 i‡(
C⁄fig
.
SpuUpd©eFªq
 > 0 &&

88 
C⁄fig
.
SpuUpd©eFªq
 <
SPU_UPDATE_FREQ_MAX
)

89 
cy˛es_a·î
 >>
C⁄fig
.
SpuUpd©eFªq
;

92 i‡(
∂_‰ameskù_advi˚
())

93 
cy˛es_a·î
 >>= 1;

95 
psxEvqueueAdd
(
PSXINT_SPUIRQ
, 
cy˛es_a·î
);

98 #ifde‡
SPU_PCSXREARMED


101 
CALLBACK
 
SPU_öô
()

104 i‡(
•u_c⁄fig
.
iHaveC⁄figuøti⁄
 == 0) {

105 
¥ötf
("ERROR: SPUÖlugin 'spu_pcsxrearmed' configuration settingsÇot set,áborting.\n");

110 i‡(
SPUöô
() < 0) {

111 
¥ötf
("ERROR initializing SPUÖlugin 'spu_pcsxrearmed'");

116 i‡(
SPU›í
() < 0) {

117 
¥ötf
("ERROR openingáudio backend for SPU 'spu_pcsxrearmed'");

121 
¥ötf
("-> SPUÖlugin 'spu_pcsxrearmed' initialized successfully.\n");

123 c⁄° * 
öãΩﬁ_°r
[4] = { "none", "simple", "gaussian", "cubic" };

124 
as£π
(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 >= 0 && spu_config.iUseInterpolation <= 3);

125 
¥ötf
("-> SPUÖlugin using configuration settings:\n"

135 
•u_c⁄fig
.
iVﬁume
, spu_c⁄fig.
iDißbÀd
, spu_c⁄fig.
iXAPôch
, spu_c⁄fig.
iU£Revîb
,

136 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
, 
öãΩﬁ_°r
[spu_config.iUseInterpolation],

137 
•u_c⁄fig
.
iTempo
, spu_c⁄fig.
iU£Thªad
, spu_c⁄fig.
iU£FixedUpd©es
,

138 
C⁄fig
.
SyncAudio
);

142 i‡(
C⁄fig
.
SyncAudio
 && 
•u_c⁄fig
.
iDißbÀd
)

143 
¥ötf
("-> WARNING: '-silent' option inÉffect;Çullspu cannot syncÉmuÅoáudio (yet).\n");

145 
SPU_ªgi°îCÆlback
(
Triggî_SPU_IRQ
);

146 
SPU_ªgi°îScheduÀCb
(
ScheduÀ_SPU_IRQ
);

153 #ifde‡
__˝lu•lus


	@src/plugins.h

21 #i‚de‡
__PLUGINS_H__


22 
	#__PLUGINS_H__


	)

24 
	~"psxcomm⁄.h
"

25 
	~"r3000a.h
"

27 #i‚de‡
_WIN32


28 
	#CALLBACK


	)

30 
	#WIN32_LEAN_AND_MEAN


	)

31 
	~<wödows.h
>

34 
	~"p£mu_∂ugö_defs.h
"

35 
	~"decode_xa.h
"

37 
LﬂdPlugös
();

38 
Rñó£Plugös
();

43 
uöt32_t
 
	mulFªezeVîsi⁄
;

44 
uöt32_t
 
	mulSètus
;

45 
uöt32_t
 
	mulC⁄åﬁ
[256];

46 
	mpsxVRam
[1024*512*2];

47 } 
	tGPUFªeze_t
;

50 
uöt8_t
 *
	mvøm
;

51 
uöt16_t
 
	mx
, 
	my
, 
	mw
, 
	mh
, 
	mhªs
, 
	mvªs
;

52 
boﬁ
 
	mdïth24
, 
	m∑l
;

53 } 
	tGPUS¸ìnInfo_t
;

57 
GPU_öô
();

58 
GPU_shutdown
();

59 
GPU_wrôeSètus
(
uöt32_t
);

60 
GPU_wrôeD©a
(
uöt32_t
);

61 
GPU_wrôeD©aMem
(
uöt32_t
 *, );

62 
uöt32_t
 
GPU_ªadSètus
();

63 
uöt32_t
 
GPU_ªadD©a
();

64 
GPU_ªadD©aMem
(
uöt32_t
 *, );

65 
GPU_dmaChaö
(
uöt32_t
 *,uint32_t);

66 
GPU_upd©eLa˚
();

67 
GPU_‰ìze
(
uöt32_t
, 
GPUFªeze_t
 *);

68 
GPU_ªque°S¸ìnRedøw
();

69 
GPU_gëS¸ìnInfo
(
GPUS¸ìnInfo_t
 *
söfo
);

71 #ifde‡
USE_GPULIB


72 
GPU_vBœnk
(
is_vbœnk
, 
lcf
);

77 
	sCdrSèt
 {

78 
uöt32_t
 
	mTy≥
;

79 
uöt32_t
 
	mSètus
;

80 
	mTime
[3];

84 
	sSubQ
 {

85 
	mªs0
[12];

86 
	mC⁄åﬁAndADR
;

87 
	mTøckNumbî
;

88 
	mIndexNumbî
;

89 
	mTøckRñ©iveAddªss
[3];

90 
	mFûÀr
;

91 
	mAbsﬁuãAddªss
[3];

92 
	mCRC
[2];

93 
	mªs1
[72];

98 
CDR_öô
();

99 
CDR_shutdown
();

100 
CDR_›í
();

101 
CDR_˛o£
();

102 
CDR_gëTN
(*);

103 
CDR_gëTD
(, *);

104 
CDR_ªadTøck
(*);

105 *(*
CDR_gëBuf„r
)();

106 
CDR_∂ay
(*);

107 
CDR_°›
();

108 
CDR_gëSètus
(
CdrSèt
 *);

109 *
CDR_gëBuf„rSub
();

114 
	mPlugöName
[8];

115 
uöt32_t
 
	mPlugöVîsi⁄
;

116 
uöt32_t
 
	mSize
;

117 
	mSPUP‹ts
[0x200];

118 
	mSPURam
[0x80000];

119 
xa_decode_t
 
	mxa
;

120 *
	mSPUInfo
;

121 } 
	tSPUFªeze_t
;

124 #ifde‡
__˝lu•lus


129 
CALLBACK
 
Triggî_SPU_IRQ
();

130 
CALLBACK
 
ScheduÀ_SPU_IRQ
(
cy˛es_a·î
);

132 
CALLBACK
 
SPUöô
();

133 
CALLBACK
 
SPU›í
();

134 
CALLBACK
 
SPUshutdown
();

135 
CALLBACK
 
SPU˛o£
();

136 
CALLBACK
 
SPUwrôeRegi°î
(, , );

137 
CALLBACK
 
SPUªadRegi°î
();

138 
CALLBACK
 
SPUwrôeDMA
();

139 
CALLBACK
 
SPUªadDMA
();

140 
CALLBACK
 
SPUwrôeDMAMem
(*, , );

141 
CALLBACK
 
SPUªadDMAMem
(*, , );

142 
CALLBACK
 
SPU∂ayADPCMch™√l
(
xa_decode_t
 *);

143 
CALLBACK
 
SPUgëADPCMBuf„rRoom
();

144 
CALLBACK
 
SPU∂ayCDDAch™√l
(*, );

145 
CALLBACK
 
SPUc⁄figuª
();

146 
CALLBACK
 
SPU‰ìze
(
uöt32_t
, 
SPUFªeze_t
 *, uint32_t);

147 
CALLBACK
 
SPUasync
(
uöt32_t
, uint32_t);

149 #ifde‡
SPU_PCSXREARMED


150 
CALLBACK
 
SPUªgi°îCÆlback
(CALLBACK (*
ˇŒback
)());

151 
CALLBACK
 
SPUªgi°îScheduÀCb
(CALLBACK (*
ˇŒback
)());

155 
CALLBACK
 
SPU_öô
();

158 #ifde‡
__˝lu•lus


163 #i‚de‡
SPU_PCSXREARMED


164 
	#SPU_öô
 
SPUöô


	)

167 
	#SPU_›í
 
SPU›í


	)

168 
	#SPU_shutdown
 
SPUshutdown


	)

169 
	#SPU_˛o£
 
SPU˛o£


	)

170 
	#SPU_wrôeRegi°î
 
SPUwrôeRegi°î


	)

171 
	#SPU_ªadRegi°î
 
SPUªadRegi°î


	)

172 
	#SPU_wrôeDMA
 
SPUwrôeDMA


	)

173 
	#SPU_ªadDMA
 
SPUªadDMA


	)

174 
	#SPU_wrôeDMAMem
 
SPUwrôeDMAMem


	)

175 
	#SPU_ªadDMAMem
 
SPUªadDMAMem


	)

176 
	#SPU_∂ayADPCMch™√l
 
SPU∂ayADPCMch™√l


	)

177 
	#SPU_gëADPCMBuf„rRoom
 
SPUgëADPCMBuf„rRoom


	)

178 
	#SPU_∂ayCDDAch™√l
 
SPU∂ayCDDAch™√l


	)

179 
	#SPU_ªgi°îCÆlback
 
SPUªgi°îCÆlback


	)

180 
	#SPU_ªgi°îScheduÀCb
 
SPUªgi°îScheduÀCb


	)

181 
	#SPU_c⁄figuª
 
SPUc⁄figuª


	)

182 
	#SPU_‰ìze
 
SPU‰ìze


	)

183 
	#SPU_async
 
SPUasync


	)

188 
PAD1_°¨tPﬁl
();

189 
PAD2_°¨tPﬁl
();

190 
PAD1_pﬁl
();

191 
PAD2_pﬁl
();

195 
SëIsoFûe
(c⁄° *
fûíame
);

196 c⁄° *
GëIsoFûe
();

197 
boﬁón
 
UsögIso
();

198 
SëCdO≥nCa£Time
(
s64
 
time
);

199 
s64
 
GëCdO≥nCa£Time
();

200 
RñﬂdCdromPlugö
();

	@src/port/sdl/frontend.cpp

1 
	~<°d¨g.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<dúít.h
>

6 
	~<uni°d.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/ty≥s.h
>

10 
	~"p‹t.h
"

11 
	~"r3000a.h
"

12 
	~"∂ugös.h
"

13 
	~"cdrom.h
"

14 
	~"cdriso.h
"

15 
	~<SDL.h
>

18 #ifde‡
__MINGW32__


19 
	~<limôs.h
>

22 #ifde‡
SPU_PCSXREARMED


23 
	~"•u/•u_pcsxª¨med/•u_c⁄fig.h
"

27 #ifde‡
USE_GPULIB


28 
	~"gpu/gpulib/gpu.h
"

31 #ifde‡
GPU_UNAI


32 
	~"gpu/gpu_u«i/gpu.h
"

35 
	#timî_dñay
(
a
Ë
	`waô_ticks
◊*1000)

	)

38 
	mKEY_UP
=0x1, 
	mKEY_LEFT
=0x4, 
	mKEY_DOWN
=0x10, 
	mKEY_RIGHT
=0x40,

39 
	mKEY_START
=1<<8, 
	mKEY_SELECT
=1<<9, 
	mKEY_L
=1<<10, 
	mKEY_R
=1<<11,

40 
	mKEY_A
=1<<12, 
	mKEY_B
=1<<13, 
	mKEY_X
=1<<14, 
	mKEY_Y
=1<<15,

42 
	#_KEY_BACK
 (
KEY_SELECT
|
KEY_B
)

	)

43 
s°©esdú
[
PATH_MAX
];

44 
	gßve¶Ÿ
 = -1;

45 
uöt16_t
* 
	gsshŸ_img
;

46 
	gsshŸ_img_num
;

48 
u32
 
	gªt
 = 0;

50 
ölöe
 
	$key_ª£t
(Ë{ 
ªt
 = 0; 
	}
}

52 
	$key_ªad
()

54 
SDL_Evít
 
evít
;

56 
	`SDL_PﬁlEvít
(&
evít
)) {

57 
evít
.
ty≥
) {

58 
SDL_KEYDOWN
:

59 
evít
.
key
.
keysym
.
sym
) {

60 
SDLK_UP
: 
ªt
 |
KEY_UP
; ;

61 
SDLK_DOWN
: 
ªt
 |
KEY_DOWN
; ;

62 
SDLK_LEFT
: 
ªt
 |
KEY_LEFT
; ;

63 
SDLK_RIGHT
: 
ªt
 |
KEY_RIGHT
; ;

65 
SDLK_LCTRL
: 
ªt
 |
KEY_A
; ;

66 
SDLK_LALT
: 
ªt
 |
KEY_B
; ;

67 
SDLK_SPACE
: 
ªt
 |
KEY_X
; ;

68 
SDLK_LSHIFT
: 
ªt
 |
KEY_Y
; ;

70 
SDLK_TAB
: 
ªt
 |
KEY_L
; ;

71 
SDLK_BACKSPACE
: 
ªt
 |
KEY_R
; ;

73 
SDLK_RETURN
: 
ªt
 |
KEY_START
; ;

74 
SDLK_ESCAPE
: 
ªt
 |
KEY_SELECT
; ;

75 
SDLK_m
: 
ªt
 |
KEY_SELECT
 | 
KEY_Y
; ;

80 
SDL_KEYUP
:

81 
evít
.
key
.
keysym
.
sym
) {

82 
SDLK_UP
: 
ªt
 &~
KEY_UP
; ;

83 
SDLK_DOWN
: 
ªt
 &~
KEY_DOWN
; ;

84 
SDLK_LEFT
: 
ªt
 &~
KEY_LEFT
; ;

85 
SDLK_RIGHT
: 
ªt
 &~
KEY_RIGHT
; ;

87 
SDLK_LCTRL
: 
ªt
 &~
KEY_A
; ;

88 
SDLK_LALT
: 
ªt
 &~
KEY_B
; ;

89 
SDLK_SPACE
: 
ªt
 &~
KEY_X
; ;

90 
SDLK_LSHIFT
: 
ªt
 &~
KEY_Y
; ;

92 
SDLK_TAB
: 
ªt
 &~
KEY_L
; ;

93 
SDLK_BACKSPACE
: 
ªt
 &~
KEY_R
; ;

95 
SDLK_RETURN
: 
ªt
 &~
KEY_START
; ;

96 
SDLK_ESCAPE
: 
ªt
 &~
KEY_SELECT
; ;

97 
SDLK_m
: 
ªt
 &~(
KEY_SELECT
 | 
KEY_Y
); ;

107  
ªt
;

108 
	}
}

110 
	sdú_ôem
 {

111 *
	m«me
;

112 
s32
 
	mty≥
;

115 
	$com∑ª_«mes
(
dú_ôem
 *
a
, dú_ôem *
b
)

117 
boﬁ
 
aIsP¨ít
 = 
	`°rcmp
(
a
->
«me
, "..") == 0;

118 
boﬁ
 
bIsP¨ít
 = 
	`°rcmp
(
b
->
«me
, "..") == 0;

120 i‡(
aIsP¨ít
 && 
bIsP¨ít
)

122 i‡(
aIsP¨ít
)

124 i‡(
bIsP¨ít
)

127 i‡((
a
->
ty≥
 !
b
->type) && (a->type == 0 || b->type == 0)) {

128  
a
->
ty≥
 == 0 ? -1 : 1;

131  
	`°rˇ£cmp
(
a
->
«me
, 
b
->name);

132 
	}
}

134 
	$s‹t_dú
(
dú_ôem
 *
li°
, 
num_ôems
)

136 
	`qs‹t
((*)
li°
,
num_ôems
,(
dú_ôem
),((*)(c⁄° *, c⁄° *))
com∑ª_«mes
);

137 
	}
}

139 
	ggamï©h
[
PATH_MAX
] = "./";

140 
dú_ôem
 
	gfûîeq_dú_ôems
[1024] = { { 0, 0 }, };

142 
	#MENU_X
 8

	)

143 
	#MENU_Y
 8

	)

144 
	#MENU_LS
 (
MENU_Y
 + 10)

	)

145 
	#MENU_HEIGHT
 22

	)

147 
ölöe
 
	$ChDú
(*
dú
)

149 
unu£d
 = 
	`chdú
(
dú
);

150 ()
unu£d
;

151 
	}
}

153 
ölöe
 *
	$GëCwd
()

155 *
unu£d
 = 
	`gëcwd
(
gamï©h
, 
PATH_MAX
);

156 ()
unu£d
;

157 #ifde‡
__WIN32__


158 
i
 = 0; i < 
PATH_MAX
; i++) {

159 i‡(
gamï©h
[
i
] == 0)

161 i‡(
gamï©h
[
i
] == '\\')

162 
gamï©h
[
i
] = '/';

166  
gamï©h
;

167 
	}
}

169 
	#FREE_LIST
() \

171 
i
 = 0; i < 
num_ôems
; i++) \

172 i‡(
fûîeq_dú_ôems
[
i
].
«me
) { \

173 
	`‰ì
(
fûîeq_dú_ôems
[
i
].
«me
); \

174 
fûîeq_dú_ôems
[
i
].
«me
 = 
NULL
; \

176 
num_ôems
 = 0; \

177 } 0)

	)

179 c⁄° *
	gwûdˇrds
[] = {

185 "pbp", "cbn", 
NULL


188 
s32
 
	$check_ext
(c⁄° *
«me
)

190 c⁄° *
p
 = 
	`°ºchr
(
«me
, '.');

192 i‡(!
p
)

195 
i
 = 0; 
wûdˇrds
[i] !
NULL
; i++) {

196 i‡(
	`°rˇ£cmp
(
wûdˇrds
[
i
], 
p
 + 1) == 0)

201 
	}
}

203 
s32
 
	$gë_íåy_ty≥
(*
cwd
, *
d_«me
)

205 
s32
 
ty≥
;

206 
°©
 
ôem
;

207 *
∑th
 = (*)
	`mÆloc
(
	`°æí
(
cwd
Ë+ såÀn(
d_«me
) + 2);

209 
	`•rötf
(
∑th
, "%s/%s", 
cwd
, 
d_«me
);

210 i‡(!
	`°©
(
∑th
, &
ôem
)) {

211 i‡(
	`S_ISDIR
(
ôem
.
°_mode
)) {

212 
ty≥
 = 0;

214 
ty≥
 = 1;

217 
ty≥
 = 1;

220 
	`‰ì
(
∑th
);

221  
ty≥
;

222 
	}
}

224 *
	$FûeReq
(*
dú
, c⁄° *
ext
, *
ªsu…
)

226 *
cwd
 = 
NULL
;

227 
s32
 
curs‹_pos
 = 1;

228 
s32
 
fú°_visibÀ
;

229 
s32
 
num_ôems
 = 0;

230 
DIR
 *
dú°ªam
;

231 
dúít
 *
dúíåy
;

232 
s32
 
row
;

233 
tmp_°rög
[41];

234 
u32
 
keys
;

236 i‡(
dú
)

237 
	`ChDú
(
dú
);

239 
cwd
 = 
	`GëCwd
();

242 
keys
 = 
	`key_ªad
();

244 
	`video_˛ór
();

246 i‡(
keys
 & 
_KEY_BACK
) {

247 
	`FREE_LIST
();

248 
	`key_ª£t
();

249  
NULL
;

252 i‡(
num_ôems
 == 0) {

253 
dú°ªam
 = 
	`›ídú
(
cwd
);

254 i‡(
dú°ªam
 =
NULL
) {

255 
	`p‹t_¥ötf
(0, 20, "error opening directory");

256  
NULL
;

259 (
dúíåy
 = 
	`ªaddú
(
dú°ªam
))) {

260 
s32
 
ty≥
 = 
	`gë_íåy_ty≥
(
cwd
, 
dúíåy
->
d_«me
);

263 i‡((
ty≥
 =0 && 
	`°rcmp
(
dúíåy
->
d_«me
, ".")) ||

264 
	`check_ext
(
dúíåy
->
d_«me
) ||

265 (
ext
 && (
	`°æí
(
dúíåy
->
d_«me
Ë> 4 &&0 =
	`°∫ˇ£cmp
(direntry->d_name + (strlen(direntry->d_name) - strlen(ext)),Éxt, strlen(ext))))) {

267 i‡((!
	`°rcmp
(
dúíåy
->
d_«me
, ".."Ë&& såcmp(
cwd
, "/")) || direntry->d_name[0] != '.')

269 
fûîeq_dú_ôems
[
num_ôems
].
«me
 = (*)
	`mÆloc
(
	`°æí
(
dúíåy
->
d_«me
) + 1);

270 
	`°r˝y
(
fûîeq_dú_ôems
[
num_ôems
].
«me
, 
dúíåy
->
d_«me
);

271 
fûîeq_dú_ôems
[
num_ôems
].
ty≥
 =Åype;

272 
num_ôems
++;

273 i‡(
num_ôems
 > 1024) ;

277 
	`˛o£dú
(
dú°ªam
);

279 
	`s‹t_dú
(
fûîeq_dú_ôems
, 
num_ôems
);

280 
curs‹_pos
 = 0;

281 
fú°_visibÀ
 = 0;

285 
Àn
 = 
	`°æí
(
cwd
);

287 i‡(
Àn
 > 40) {

288 
	`°r˝y
(
tmp_°rög
, "..");

289 
	`°rˇt
(
tmp_°rög
, 
cwd
 + 
Àn
 - 38);

290 
	`p‹t_¥ötf
(0, 
MENU_Y
, 
tmp_°rög
);

292 
	`p‹t_¥ötf
(0, 
MENU_Y
, 
cwd
);

294 i‡(
keys
 & 
KEY_DOWN
) {

295 i‡(++
curs‹_pos
 >
num_ôems
) {

296 
curs‹_pos
 = 0;

297 
fú°_visibÀ
 = 0;

299 i‡((
curs‹_pos
 - 
fú°_visibÀ
Ë>
MENU_HEIGHT
) first_visible++;

300 } i‡(
keys
 & 
KEY_UP
) {

301 i‡(--
curs‹_pos
 < 0) {

302 
curs‹_pos
 = 
num_ôems
 - 1;

303 
fú°_visibÀ
 = 
curs‹_pos
 - 
MENU_HEIGHT
 + 1;

304 i‡(
fú°_visibÀ
 < 0) first_visible = 0;

306 i‡(
curs‹_pos
 < 
fú°_visibÀ
) first_visible--;

307 } i‡(
keys
 & 
KEY_LEFT
) {

308 i‡(
curs‹_pos
 >= 10) cursor_pos -= 10;

309 
curs‹_pos
 = 0;

310 i‡(
curs‹_pos
 < 
fú°_visibÀ
) first_visible = cursor_pos;

311 } i‡(
keys
 & 
KEY_RIGHT
) {

312 i‡(
curs‹_pos
 < (
num_ôems
 - 11)) cursor_pos += 10;

313 
curs‹_pos
 = 
num_ôems
 - 1;

314 i‡((
curs‹_pos
 - 
fú°_visibÀ
Ë>
MENU_HEIGHT
)

315 
fú°_visibÀ
 = 
curs‹_pos
 - (
MENU_HEIGHT
 - 1);

316 } i‡(
keys
 & 
KEY_A
) {

318 i‡(
fûîeq_dú_ôems
[
curs‹_pos
].
ty≥
 == 0) {

319 
	`°rˇt
(
cwd
, "/");

320 
	`°rˇt
(
cwd
, 
fûîeq_dú_ôems
[
curs‹_pos
].
«me
);

322 
	`ChDú
(
cwd
);

323 
cwd
 = 
	`GëCwd
();

325 
	`FREE_LIST
();

326 
	`key_ª£t
();

328 
	`•rötf
(
ªsu…
, "%s/%s", 
cwd
, 
fûîeq_dú_ôems
[
curs‹_pos
].
«me
);

329 i‡(
dú
)

330 
	`°r˝y
(
dú
, 
cwd
);

332 
	`video_˛ór
();

333 
	`p‹t_¥ötf
(16 * 8, 120, "LOADING");

334 
	`video_Êù
();

336 
	`FREE_LIST
();

337 
	`key_ª£t
();

338  
ªsu…
;

340 } i‡(
keys
 & 
KEY_B
) {

341 
curs‹_pos
 = 0;

342 
fú°_visibÀ
 = 0;

343 
	`key_ª£t
();

347 
row
 = 0;

348 
row
 < 
num_ôems
 &&Ñow < 
MENU_HEIGHT
) {

349 i‡(
row
 =(
curs‹_pos
 - 
fú°_visibÀ
)) {

351 
	`p‹t_¥ötf
(
MENU_X
 + 16, 
MENU_LS
 + (10 * 
row
), "-->");

354 i‡(
fûîeq_dú_ôems
[
row
 + 
fú°_visibÀ
].
ty≥
 == 0)

355 
	`p‹t_¥ötf
(
MENU_X
, 
MENU_LS
 + (10 * 
row
), "DIR");

356 
Àn
 = 
	`°æí
(
fûîeq_dú_ôems
[
row
 + 
fú°_visibÀ
].
«me
);

357 i‡(
Àn
 > 32) {

358 
	`¢¥ötf
(
tmp_°rög
, 16, "%s", 
fûîeq_dú_ôems
[
row
 + 
fú°_visibÀ
].
«me
);

359 
	`°rˇt
(
tmp_°rög
, "..");

360 
	`°rˇt
(
tmp_°rög
, &
fûîeq_dú_ôems
[
row
 + 
fú°_visibÀ
].
«me
[
Àn
 - 15]);

362 
	`¢¥ötf
(
tmp_°rög
, 33, "%s", 
fûîeq_dú_ôems
[
row
 + 
fú°_visibÀ
].
«me
);

363 
	`p‹t_¥ötf
(
MENU_X
 + (8 * 5), 
MENU_LS
 + (10 * 
row
), 
tmp_°rög
);

364 
row
++;

366 
row
 < 
MENU_HEIGHT
)

367 
row
++;

369 
	`video_Êù
();

370 
	`timî_dñay
(75);

372 i‡(
keys
 & (
KEY_A
 | 
KEY_B
 | 
KEY_X
 | 
KEY_Y
 | 
KEY_L
 | 
KEY_R
 |

373 
KEY_LEFT
 | 
KEY_RIGHT
 | 
KEY_UP
 | 
KEY_DOWN
))

374 
	`timî_dñay
(50);

377  
NULL
;

378 
	}
}

381 *
	m«me
;

382 (*
	m⁄_¥ess_a
)();

383 (*
	m⁄_¥ess
)(
u32
 
	mkeys
);

384 *(*
	mshowvÆ
)();

385 (*
	mhöt
)();

386 } 
	tMENUITEM
;

389 
	mnum
;

390 
	mcur
;

391 
	mx
, 
	my
;

392 
MENUITEM
 *
	mm
;

393 } 
	tMENU
;

396 
gui_RunMíu
(
MENU
 *
míu
);

397 
gui_LﬂdIso
();

398 
gui_Sëtögs
();

399 
gui_GPUSëtögs
();

400 
gui_SPUSëtögs
();

401 
gui_Quô
();

403 
	$gui_Cªdôs
()

406 
u32
 
keys
 = 
	`key_ªad
();

408 
	`video_˛ór
();

411 i‡(
keys
) {

412 
	`key_ª£t
();

417 
	`p‹t_¥ötf
(15 * 8 + 4, 10, "CREDITS:");

418 
	`p‹t_¥ötf
( 2 * 8, 30, "pcsxÅeam,Öcsx-dfÅeam,Öcsx-rÅeam");

420 
	`p‹t_¥ötf
( 6 * 8, 50, "Franxisánd Chui - PCSX4ALL");

421 
	`p‹t_¥ötf
( 4 * 8, 60, "Unai - fast PCSX4ALL GPUÖlugin");

423 
	`p‹t_¥ötf
( 5 * 8, 80, "Ulrich Hecht -Ösx4all-dingoo");

425 
	`p‹t_¥ötf
(10 * 8, 90, "notaz - PCSX-ReArmed");

427 
	`p‹t_¥ötf
( 0 * 8, 110, "Dmitry Smagin -Öortingánd optimizing");

428 
	`p‹t_¥ötf
( 0 * 8, 120, " of mipsÑecompiler,");

429 
	`p‹t_¥ötf
( 0 * 8, 130, " gui coding");

431 
	`p‹t_¥ötf
( 0 * 8, 150, "senquack - fixingÖolygons in gpu_unai,");

432 
	`p‹t_¥ötf
( 0 * 8, 160, "Öorting spuánd other stuff");

433 
	`p‹t_¥ötf
( 0 * 8, 170, " fromÖcsx_rearmedándÖcsx-r,");

434 
	`p‹t_¥ötf
( 0 * 8, 180, " many fixesánd improvements");

436 
	`p‹t_¥ötf
( 0 * 8, 195, "JohnnyonFlame - gpu_unai dithering");

437 
	`p‹t_¥ötf
( 0 * 8, 205, "ánd other fixes");

439 
	`p‹t_¥ötf
( 0 * 8, 220, "zear - gui fixingándÅesting");

441 
	`video_Êù
();

442 
	`timî_dñay
(75);

446 
	}
}

448 
MENUITEM
 
	ggui_MaöMíuIãms
[] = {

449 {(*)"Lﬂd game", &
gui_LﬂdIso
, 
NULL
, NULL, NULL},

450 {(*)"C‹ê£âögs", &
gui_Sëtögs
, 
NULL
, NULL, NULL},

451 {(*)"GPU sëtögs", &
gui_GPUSëtögs
, 
NULL
, NULL, NULL},

452 {(*)"SPU sëtögs", &
gui_SPUSëtögs
, 
NULL
, NULL, NULL},

453 {(*)"Cªdôs", &
gui_Cªdôs
, 
NULL
, NULL, NULL},

454 {(*)"Quô", &
gui_Quô
, 
NULL
, NULL, NULL},

458 
	#MENU_SIZE
 (((
gui_MaöMíuIãms
Ë/ (
MENUITEM
)Ë- 1)

	)

459 
MENU
 
	ggui_MaöMíu
 = { 
MENU_SIZE
, 0, 112, 140, (
MENUITEM
 *)&
gui_MaöMíuIãms
 };

461 
	$gui_°©e_ßve
(
¶Ÿ
)

463 i‡(
sshŸ_img
) {

464 
	`‰ì
(
sshŸ_img
);

465 
sshŸ_img
 = 
NULL
;

469 
ßve¶Ÿ
 = 
¶Ÿ
;

471 
	`video_˛ór
();

472 
	`p‹t_¥ötf
(160-(6*8/2), 120-(8/2), "SAVING");

473 
	`video_Êù
();

475 i‡(
	`°©e_ßve
(
¶Ÿ
) < 0) {

479 
u32
 
keys
 = 
	`key_ªad
();

480 
	`video_˛ór
();

482 i‡(
keys
) {

483 
	`key_ª£t
();

487 
	`p‹t_¥ötf
(160-(11*8/2), 120-12, "SAVE FAILED");

488 
	`p‹t_¥ötf
(160-(18*8/2), 120+12, "Out of disk space?");

489 
	`video_Êù
();

490 
	`timî_dñay
(75);

497 
	}
}

499 
	#GUI_STATE_SAVE
(
¶Ÿ
) \

500 
gui_°©e_ßve
##
	`¶Ÿ
() \

502  
	`gui_°©e_ßve
(
¶Ÿ
); \

503 }

	)

505 
	$GUI_STATE_SAVE
(0)

506 
	$GUI_STATE_SAVE
(1)

507 
	$GUI_STATE_SAVE
(2)

508 
	$GUI_STATE_SAVE
(3)

509 
	$GUI_STATE_SAVE
(4)

510 
	$GUI_STATE_SAVE
(5)

511 
	$GUI_STATE_SAVE
(6)

512 
	$GUI_STATE_SAVE
(7)

513 
	$GUI_STATE_SAVE
(8)

514 
	$GUI_STATE_SAVE
(9)

516 
	$gui_°©e_ßve_höt
(
¶Ÿ
)

518 
x
, 
y
, 
Àn
;

519 
fûíame
[128];

520 
fuŒ∑th
[512];

521 
	`•rötf
(
fûíame
, "%s.%d.ßv", 
CdromId
, 
¶Ÿ
);

522 
	`•rötf
(
fuŒ∑th
, "%s/%s", 
s°©esdú
, 
fûíame
);

525 i‡(!
	`FûeExi°s
(
fuŒ∑th
))

528 
check°©e
 = 
	`CheckSèã
(
fuŒ∑th
, 
NULL
, 
åue
, NULL);

533 i‡(
check°©e
 < 0 && check°©ê!
CHECKSTATE_ERR_NO_SSHOT
)

537 i‡(
check°©e
 =
CHECKSTATE_SUCCESS
) {

538 i‡(!
sshŸ_img
 || 
sshŸ_img_num
 !
¶Ÿ
) {

539 
	`‰ì
(
sshŸ_img
);

540 
sshŸ_img
 = (
uöt16_t
*)
	`mÆloc
(160*120*2);

541 i‡(
sshŸ_img
) {

543 
	`CheckSèã
(
fuŒ∑th
, 
NULL
, 
åue
, 
sshŸ_img
);

544 
sshŸ_img_num
 = 
¶Ÿ
;

546 
	`¥ötf
("W¨nög: mÆlo¯Áûed f‹ sshŸ imagêö %s\n", 
__func__
);

551 
	`‰ì
(
sshŸ_img
);

552 
sshŸ_img
 = 
NULL
;

556 i‡(
sshŸ_img
) {

557 
x
 = 160-8;

558 
y
 = 70;

559 
d°_°ride
 = 320;

560 
uöt16_t
 *
d°
 = (uöt16_t*)
SCREEN
 + 
y
 * 
d°_°ride
 + 
x
;

561 
j
=0; j < 120; ++j) {

562 
	`mem˝y
((*)
d°
, (*)(
sshŸ_img
 + 
j
*160), 160*2);

563 
d°
 +
d°_°ride
;

566 
	`p‹t_¥ötf
(320-135, 125 - 10, "No screenshot");

567 
	`p‹t_¥ötf
(320-135, 125, "ávailable ");

571 
d©e_°r
[128];

572 
d©e_°r
[0] = '\0';

573 i‡(
	`FûeD©e
(
fuŒ∑th
, 
d©e_°r
, 
NULL
) >= 0) {

574 
Àn
 = 
	`°æí
(
d©e_°r
);

575 
x
 = 320 - 8 - 
Àn
 * 8;

576 
y
 = 70 - 22;

577 
	`p‹t_¥ötf
(
x
, 
y
, 
d©e_°r
);

581 
Àn
 = 
	`°æí
(
fûíame
);

582 i‡(
Àn
 > 25)

583 
fûíame
[25] = '\0';

584 
x
 = 320 - 8 - 
Àn
 * 8;

585 
y
 = 70 - 11;

586 
	`p‹t_¥ötf
(
x
, 
y
, 
fûíame
);

587 
	}
}

589 
	#GUI_STATE_SAVE_HINT
(
¶Ÿ
) \

590 
gui_°©e_ßve_höt
##
	`¶Ÿ
() \

592 
	`gui_°©e_ßve_höt
(
¶Ÿ
); \

593 }

	)

595 
	$GUI_STATE_SAVE_HINT
(0)

596 
	$GUI_STATE_SAVE_HINT
(1)

597 
	$GUI_STATE_SAVE_HINT
(2)

598 
	$GUI_STATE_SAVE_HINT
(3)

599 
	$GUI_STATE_SAVE_HINT
(4)

600 
	$GUI_STATE_SAVE_HINT
(5)

601 
	$GUI_STATE_SAVE_HINT
(6)

602 
	$GUI_STATE_SAVE_HINT
(7)

603 
	$GUI_STATE_SAVE_HINT
(8)

604 
	$GUI_STATE_SAVE_HINT
(9)

606 
	$gui_°©e_ßve_back
()

608 i‡(
sshŸ_img
) {

609 
	`‰ì
(
sshŸ_img
);

610 
sshŸ_img
 = 
NULL
;

614 
	}
}

617 
	$gui_SèãSave
()

619 c⁄° * 
°r_¶Ÿ
[10];

620 c⁄° * 
°r_¶Ÿ_unu£d
[10] = {

624 c⁄° * 
°r_¶Ÿ_u£d
[10] = {

630 
öôül_pos
 = 
ßve¶Ÿ
;

631 i‡(
öôül_pos
 > 9)

632 
öôül_pos
 = 9;

634 
i
=0; i < 10; ++i) {

635 
ßvíame
[512];

636 
	`•rötf
(
ßvíame
, "%s/%s.%d.ßv", 
s°©esdú
, 
CdromId
, 
i
);

637 i‡(
	`FûeExi°s
(
ßvíame
)) {

638 
°r_¶Ÿ
[
i
] = 
°r_¶Ÿ_u£d
[i];

640 
°r_¶Ÿ
[
i
] = 
°r_¶Ÿ_unu£d
[i];

642 i‡(
öôül_pos
 =
i
)

643 
öôül_pos
 = -1;

647 
MENUITEM
 
gui_SèãSaveIãms
[] = {

648 {(*)
°r_¶Ÿ
[0], &
gui_°©e_ßve0
, 
NULL
, NULL, &
gui_°©e_ßve_höt0
},

649 {(*)
°r_¶Ÿ
[1], &
gui_°©e_ßve1
, 
NULL
, NULL, &
gui_°©e_ßve_höt1
},

650 {(*)
°r_¶Ÿ
[2], &
gui_°©e_ßve2
, 
NULL
, NULL, &
gui_°©e_ßve_höt2
},

651 {(*)
°r_¶Ÿ
[3], &
gui_°©e_ßve3
, 
NULL
, NULL, &
gui_°©e_ßve_höt3
},

652 {(*)
°r_¶Ÿ
[4], &
gui_°©e_ßve4
, 
NULL
, NULL, &
gui_°©e_ßve_höt4
},

653 {(*)
°r_¶Ÿ
[5], &
gui_°©e_ßve5
, 
NULL
, NULL, &
gui_°©e_ßve_höt5
},

654 {(*)
°r_¶Ÿ
[6], &
gui_°©e_ßve6
, 
NULL
, NULL, &
gui_°©e_ßve_höt6
},

655 {(*)
°r_¶Ÿ
[7], &
gui_°©e_ßve7
, 
NULL
, NULL, &
gui_°©e_ßve_höt7
},

656 {(*)
°r_¶Ÿ
[8], &
gui_°©e_ßve8
, 
NULL
, NULL, &
gui_°©e_ßve_höt8
},

657 {(*)
°r_¶Ÿ
[9], &
gui_°©e_ßve9
, 
NULL
, NULL, &
gui_°©e_ßve_höt9
},

658 {
NULL
, NULL, NULL, NULL, NULL},

659 {
NULL
, NULL, NULL, NULL, NULL},

660 {
NULL
, NULL, NULL, NULL, NULL},

661 {(*)"BackÅÿmaö míu ", &
gui_°©e_ßve_back
, 
NULL
, NULL, NULL},

665 c⁄° 
míu_size
 = ((
gui_SèãSaveIãms
Ë/ (
MENUITEM
)) - 1;

668 i‡(
öôül_pos
 < 0)

669 
öôül_pos
 = 
míu_size
-1;

671 
MENU
 
gui_SèãSaveMíu
 = { 
míu_size
, 
öôül_pos
, 30, 80, (
MENUITEM
 *)&
gui_SèãSaveIãms
 };

673 
ªt
 = 
	`gui_RunMíu
(&
gui_SèãSaveMíu
);

676 
	`‰ì
(
sshŸ_img
);

677 
sshŸ_img
 = 
NULL
;

679 i‡(
ªt
 >= 0) {

687 
	}
}

689 
	$gui_°©e_lﬂd
(
¶Ÿ
)

691 i‡(
sshŸ_img
) {

692 
	`‰ì
(
sshŸ_img
);

693 
sshŸ_img
 = 
NULL
;

697 
ßve¶Ÿ
 = 
¶Ÿ
;

698 i‡(
	`°©e_lﬂd
(
¶Ÿ
) < 0) {

706 
	}
}

708 
	#GUI_STATE_LOAD
(
¶Ÿ
) \

709 
gui_°©e_lﬂd
##
	`¶Ÿ
() \

711  
	`gui_°©e_lﬂd
(
¶Ÿ
); \

712 }

	)

714 
	$GUI_STATE_LOAD
(0)

715 
	$GUI_STATE_LOAD
(1)

716 
	$GUI_STATE_LOAD
(2)

717 
	$GUI_STATE_LOAD
(3)

718 
	$GUI_STATE_LOAD
(4)

719 
	$GUI_STATE_LOAD
(5)

720 
	$GUI_STATE_LOAD
(6)

721 
	$GUI_STATE_LOAD
(7)

722 
	$GUI_STATE_LOAD
(8)

723 
	$GUI_STATE_LOAD
(9)

725 
	$gui_°©e_lﬂd_höt
(
¶Ÿ
)

727 
x
, 
y
, 
Àn
;

728 
fûíame
[128];

729 
fuŒ∑th
[512];

730 
	`•rötf
(
fûíame
, "%s.%d.ßv", 
CdromId
, 
¶Ÿ
);

731 
	`•rötf
(
fuŒ∑th
, "%s/%s", 
s°©esdú
, 
fûíame
);

734 i‡(!
	`FûeExi°s
(
fuŒ∑th
))

737 
check°©e
 = 
	`CheckSèã
(
fuŒ∑th
, 
NULL
, 
åue
, NULL);

742 i‡(
check°©e
 < 0 && check°©ê!
CHECKSTATE_ERR_NO_SSHOT
)

746 i‡(
check°©e
 =
CHECKSTATE_SUCCESS
) {

747 i‡(!
sshŸ_img
 || 
sshŸ_img_num
 !
¶Ÿ
) {

748 
	`‰ì
(
sshŸ_img
);

749 
sshŸ_img
 = (
uöt16_t
*)
	`mÆloc
(160*120*2);

750 i‡(
sshŸ_img
) {

752 
	`CheckSèã
(
fuŒ∑th
, 
NULL
, 
åue
, 
sshŸ_img
);

753 
sshŸ_img_num
 = 
¶Ÿ
;

755 
	`¥ötf
("W¨nög: mÆlo¯Áûed f‹ sshŸ imagêö %s\n", 
__func__
);

760 
	`‰ì
(
sshŸ_img
);

761 
sshŸ_img
 = 
NULL
;

765 i‡(
sshŸ_img
) {

766 
x
 = 160-8;

767 
y
 = 70;

768 c⁄° 
d°_°ride
 = 320;

769 
uöt16_t
 *
d°
 = (uöt16_t*)
SCREEN
 + 
y
 * 
d°_°ride
 + 
x
;

770 
j
=0; j < 120; ++j) {

771 
	`mem˝y
((*)
d°
, (*)(
sshŸ_img
 + 
j
*160), 160*2);

772 
d°
 +
d°_°ride
;

775 
	`p‹t_¥ötf
(320-135, 125 - 10, "No screenshot");

776 
	`p‹t_¥ötf
(320-135, 125, "ávailable ");

780 
d©e_°r
[128];

781 
d©e_°r
[0] = '\0';

782 i‡(
	`FûeD©e
(
fuŒ∑th
, 
d©e_°r
, 
NULL
) >= 0) {

783 
Àn
 = 
	`°æí
(
d©e_°r
);

784 
x
 = 320 - 8 - 
Àn
 * 8;

785 
y
 = 70 - 22;

786 
	`p‹t_¥ötf
(
x
, 
y
, 
d©e_°r
);

790 
Àn
 = 
	`°æí
(
fûíame
);

791 i‡(
Àn
 > 25)

792 
fûíame
[25] = '\0';

793 
x
 = 320 - 8 - 
Àn
 * 8;

794 
y
 = 70 - 11;

795 
	`p‹t_¥ötf
(
x
, 
y
, 
fûíame
);

796 
	}
}

798 
	#GUI_STATE_LOAD_HINT
(
¶Ÿ
) \

799 
gui_°©e_lﬂd_höt
##
	`¶Ÿ
() \

801 
	`gui_°©e_lﬂd_höt
(
¶Ÿ
); \

802 }

	)

804 
	$GUI_STATE_LOAD_HINT
(0)

805 
	$GUI_STATE_LOAD_HINT
(1)

806 
	$GUI_STATE_LOAD_HINT
(2)

807 
	$GUI_STATE_LOAD_HINT
(3)

808 
	$GUI_STATE_LOAD_HINT
(4)

809 
	$GUI_STATE_LOAD_HINT
(5)

810 
	$GUI_STATE_LOAD_HINT
(6)

811 
	$GUI_STATE_LOAD_HINT
(7)

812 
	$GUI_STATE_LOAD_HINT
(8)

813 
	$GUI_STATE_LOAD_HINT
(9)

815 
	$gui_°©e_lﬂd_back
()

817 i‡(
sshŸ_img
) {

818 
	`‰ì
(
sshŸ_img
);

819 
sshŸ_img
 = 
NULL
;

823 
	}
}

826 
	$gui_SèãLﬂd
()

828 c⁄° * 
°r_¶Ÿ
[10] = {

834 
öôül_pos
 = 
ßve¶Ÿ
;

835 i‡(
öôül_pos
 > 9)

836 
öôül_pos
 = 9;

838 
√we°_fûe_pos
 = -1;

840 
time_t
 
√we°_mtime
 = 0;

841 
i
=0; i < 10; ++i) {

842 
ßvíame
[512];

843 
	`•rötf
(
ßvíame
, "%s/%s.%d.ßv", 
s°©esdú
, 
CdromId
, 
i
);

844 i‡(
	`FûeExi°s
(
ßvíame
)) {

845 
time_t
 
mtime
;

846 i‡(
	`FûeD©e
(
ßvíame
, 
NULL
, &
mtime
) >= 0) {

847 i‡(
mtime
 > 
√we°_mtime
) {

848 
√we°_fûe_pos
 = 
i
;

849 
√we°_mtime
 = 
mtime
;

853 
°r_¶Ÿ
[
i
] = 
NULL
;

855 i‡(
öôül_pos
 =
i
)

856 
öôül_pos
 = -1;

862 i‡(
öôül_pos
 < 0 && 
√we°_fûe_pos
 >= 0)

863 
öôül_pos
 = 
√we°_fûe_pos
;

865 
MENUITEM
 
gui_SèãLﬂdIãms
[] = {

866 {(*)
°r_¶Ÿ
[0], &
gui_°©e_lﬂd0
, 
NULL
, NULL, &
gui_°©e_lﬂd_höt0
},

867 {(*)
°r_¶Ÿ
[1], &
gui_°©e_lﬂd1
, 
NULL
, NULL, &
gui_°©e_lﬂd_höt1
},

868 {(*)
°r_¶Ÿ
[2], &
gui_°©e_lﬂd2
, 
NULL
, NULL, &
gui_°©e_lﬂd_höt2
},

869 {(*)
°r_¶Ÿ
[3], &
gui_°©e_lﬂd3
, 
NULL
, NULL, &
gui_°©e_lﬂd_höt3
},

870 {(*)
°r_¶Ÿ
[4], &
gui_°©e_lﬂd4
, 
NULL
, NULL, &
gui_°©e_lﬂd_höt4
},

871 {(*)
°r_¶Ÿ
[5], &
gui_°©e_lﬂd5
, 
NULL
, NULL, &
gui_°©e_lﬂd_höt5
},

872 {(*)
°r_¶Ÿ
[6], &
gui_°©e_lﬂd6
, 
NULL
, NULL, &
gui_°©e_lﬂd_höt6
},

873 {(*)
°r_¶Ÿ
[7], &
gui_°©e_lﬂd7
, 
NULL
, NULL, &
gui_°©e_lﬂd_höt7
},

874 {(*)
°r_¶Ÿ
[8], &
gui_°©e_lﬂd8
, 
NULL
, NULL, &
gui_°©e_lﬂd_höt8
},

875 {(*)
°r_¶Ÿ
[9], &
gui_°©e_lﬂd9
, 
NULL
, NULL, &
gui_°©e_lﬂd_höt9
},

876 {
NULL
, NULL, NULL, NULL, NULL},

877 {
NULL
, NULL, NULL, NULL, NULL},

878 {
NULL
, NULL, NULL, NULL, NULL},

879 {(*)"BackÅÿmaö míu ", &
gui_°©e_lﬂd_back
, 
NULL
, NULL, NULL},

883 c⁄° 
míu_size
 = ((
gui_SèãLﬂdIãms
Ë/ (
MENUITEM
)) - 1;

886 i‡(
öôül_pos
 < 0)

887 
öôül_pos
 = 
míu_size
-1;

889 
MENU
 
gui_SèãLﬂdMíu
 = { 
míu_size
, 
öôül_pos
, 30, 80, (
MENUITEM
 *)&
gui_SèãLﬂdIãms
 };

891 
ªt
 = 
	`gui_RunMíu
(&
gui_SèãLﬂdMíu
);

894 
	`‰ì
(
sshŸ_img
);

895 
sshŸ_img
 = 
NULL
;

897 i‡(
ªt
 >= 0) {

905 
	}
}

912 
	$gui_£À˘_mu…icd
(
boﬁ
 
sw≠pög_cd
)

914 i‡(
cdrIsoMu…idiskCou¡
 <= 1)

919 
num_rows
 = (
cdrIsoMu…idiskCou¡
 > 8) ? 8 : cdrIsoMultidiskCount;

921 
curs‹_pos
 = 
cdrIsoMu…idiskSñe˘
;

922 i‡((
curs‹_pos
 >
num_rows
) || (cursor_pos < 0))

923 
curs‹_pos
 = 0;

926 
	`video_˛ór
();

927 
u32
 
keys
 = 
	`key_ªad
();

929 i‡((
sw≠pög_cd
Ë&& (
keys
 & 
_KEY_BACK
)) {

930 
	`key_ª£t
();

934 i‡(!
sw≠pög_cd
)

935 
	`p‹t_¥ötf
(
MENU_X
, 
MENU_Y
, "Multi-CD image detected:");

937 
tmp_°rög
[41];

938 
row
=0;Ñow < 
num_rows
; ++row) {

939 i‡(
row
 =
curs‹_pos
) {

941 
	`p‹t_¥ötf
(
MENU_X
 + 16, 
MENU_LS
 + 10 + (10 * 
row
), "-->");

944 
	`•rötf
(
tmp_°rög
, "CD %d", (
row
+1));

946 i‡(
sw≠pög_cd
 && (
row
 =
cdrIsoMu…idiskSñe˘
)) {

948 
	`°rˇt
(
tmp_°rög
, " (inserted)");

951 
	`p‹t_¥ötf
(
MENU_X
 + (8 * 5), 
MENU_LS
 + 10 + (10 * 
row
), 
tmp_°rög
);

954 i‡(
keys
 & 
KEY_DOWN
) {

955 i‡(++
curs‹_pos
 >
num_rows
)

956 
curs‹_pos
 = 0;

957 } i‡(
keys
 & 
KEY_UP
) {

958 i‡(--
curs‹_pos
 < 0)

959 
curs‹_pos
 = 
num_rows
 - 1;

960 } i‡(
keys
 & 
KEY_LEFT
) {

961 
curs‹_pos
 = 0;

962 } i‡(
keys
 & 
KEY_RIGHT
) {

963 
curs‹_pos
 = 
num_rows
 - 1;

964 } i‡(
keys
 & 
KEY_A
) {

965 
	`key_ª£t
();

966 
cdrIsoMu…idiskSñe˘
 = 
curs‹_pos
;

967 
	`video_˛ór
();

968 
	`video_Êù
();

970 
ßve¶Ÿ
 = -1;

974 
	`video_Êù
();

975 
	`timî_dñay
(75);

977 i‡(
keys
 & (
KEY_A
 | 
KEY_B
 | 
KEY_X
 | 
KEY_Y
 | 
KEY_L
 | 
KEY_R
 |

978 
KEY_LEFT
 | 
KEY_RIGHT
 | 
KEY_UP
 | 
KEY_DOWN
))

979 
	`timî_dñay
(50);

982 
	}
}

989 
CALLBACK
 
	$gui_£À˘_mu…icd_to_boŸ_‰om
()

991 i‡(
cdrIsoMu…idiskSñe˘
 >
cdrIsoMu…idiskCou¡
)

992 
cdrIsoMu…idiskSñe˘
 = 0;

995 
	`gui_£À˘_mu…icd
(
Ál£
);

998 
	`video_˛ór
();

999 
	`video_Êù
();

1000 
	}
}

1002 
	$gui_sw≠_cd
()

1005 
boﬁ
 
usög_mu…icd
 = 
cdrIsoMu…idiskCou¡
 > 1;

1007 i‡(
usög_mu…icd
) {

1009 i‡(!
	`gui_£À˘_mu…icd
(
åue
)) {

1013 
	`¥ötf
("CD sw≠ sñe˘ed imagê%d o‡%d i¿mu…i-CD\n", 
cdrIsoMu…idiskSñe˘
+1, 
cdrIsoMu…idiskCou¡
);

1016 
is⁄ame
[
PATH_MAX
];

1017 c⁄° *
«me
 = 
	`FûeReq
(
C⁄fig
.
La°Dú
, 
NULL
, 
is⁄ame
);

1018 i‡(
«me
 =
NULL
)

1021 
	`SëIsoFûe
(
«me
);

1022 
	`¥ötf
("CD sw≠ sñe˘ed fûe: %s\n", 
«me
);

1025 
CdromId
[0] = '\0';

1026 
CdromLabñ
[0] = '\0';

1030 
cdrIsoMu…idiskCÆlback
 = 
NULL
;

1032 i‡(
	`RñﬂdCdromPlugö
() < 0) {

1033 
	`¥ötf
("FailedÅoÑe-initialize cdr\n");

1037 i‡(
	`CDR_›í
() < 0) {

1038 
	`¥ötf
("FailedÅo open cdr\n");

1042 
	`SëCdO≥nCa£Time
(
	`time
(
NULL
) + 2);

1043 
	`LidI¡îru±
();

1045 
	}
}

1047 
MENUITEM
 
	ggui_GameMíuIãms
[] = {

1048 {(*)"Sw≠ CD", &
gui_sw≠_cd
, 
NULL
, NULL, NULL},

1049 {(*)"Lﬂd sèã", &
gui_SèãLﬂd
, 
NULL
, NULL, NULL},

1050 {(*)"Savê°©e", &
gui_SèãSave
, 
NULL
, NULL, NULL},

1051 {(*)"GPU sëtögs", &
gui_GPUSëtögs
, 
NULL
, NULL, NULL},

1052 {(*)"SPU sëtögs", &
gui_SPUSëtögs
, 
NULL
, NULL, NULL},

1053 {(*)"C‹ê£âögs", &
gui_Sëtögs
, 
NULL
, NULL, NULL},

1054 {(*)"Quô", &
gui_Quô
, 
NULL
, NULL, NULL},

1058 
	#GMENU_SIZE
 (((
gui_GameMíuIãms
Ë/ (
MENUITEM
)Ë- 1)

	)

1059 
MENU
 
	ggui_GameMíu
 = { 
GMENU_SIZE
, 0, 112, 120, (
MENUITEM
 *)&
gui_GameMíuIãms
 };

1061 #ifde‡
PSXREC


1062 
	$emu_Æãr
(
u32
 
keys
)

1064 i‡(
keys
 & 
KEY_RIGHT
) {

1065 i‡(
C⁄fig
.
Cpu
 == 1) Config.Cpu = 0;

1066 } i‡(
keys
 & 
KEY_LEFT
) {

1067 i‡(
C⁄fig
.
Cpu
 == 0) Config.Cpu = 1;

1071 
	}
}

1073 *
	$emu_show
()

1075 
buf
[16] = "\0";

1076 
	`•rötf
(
buf
, "%s", 
C⁄fig
.
Cpu
 ? "int" : "rec");

1077  
buf
;

1078 
	}
}

1080 
u32
 
cy˛e_mu…ùlõr
;

1082 
	$cy˛e_Æãr
(
u32
 
keys
)

1084 i‡(
keys
 & 
KEY_RIGHT
) {

1085 i‡(
cy˛e_mu…ùlõr
 < 0x300) cycle_multiplier += 0x04;

1086 } i‡(
keys
 & 
KEY_LEFT
) {

1087 i‡(
cy˛e_mu…ùlõr
 > 0x050) cycle_multiplier -= 0x04;

1091 
	}
}

1093 *
	$cy˛e_show
()

1095 
buf
[16] = "\0";

1096 
	`•rötf
(
buf
, "%d.%02d", 
cy˛e_mu…ùlõr
 >> 8, (cycle_multiplier & 0xff) * 100 / 256);

1097  
buf
;

1098 
	}
}

1101 
	$bios_Æãr
(
u32
 
keys
)

1103 i‡(
keys
 & 
KEY_RIGHT
) {

1104 i‡(
C⁄fig
.
HLE
 == 0) Config.HLE = 1;

1105 } i‡(
keys
 & 
KEY_LEFT
) {

1106 i‡(
C⁄fig
.
HLE
 == 1) Config.HLE = 0;

1110 
	}
}

1112 *
	$bios_show
()

1114 
buf
[16] = "\0";

1115 
	`•rötf
(
buf
, "%s", 
C⁄fig
.
HLE
 ? "on" : "off");

1116  
buf
;

1117 
	}
}

1119 
	$bios_£t
()

1121 
bio¢ame
[
PATH_MAX
];

1122 c⁄° *
«me
 = 
	`FûeReq
(
C⁄fig
.
BiosDú
, 
NULL
, 
bio¢ame
);

1124 i‡(
«me
) {

1125 c⁄° *
p
 = 
	`°ºchr
(
«me
, '/');

1126 
	`°r˝y
(
C⁄fig
.
Bios
, 
p
 + 1);

1130 
	}
}

1132 
	$RC¡Fix_Æãr
(
u32
 
keys
)

1134 i‡(
keys
 & 
KEY_RIGHT
) {

1135 i‡(
C⁄fig
.
RC¡Fix
 < 1) Config.RCntFix = 1;

1136 } i‡(
keys
 & 
KEY_LEFT
) {

1137 i‡(
C⁄fig
.
RC¡Fix
 > 0) Config.RCntFix = 0;

1141 
	}
}

1143 *
	$RC¡Fix_show
()

1145 
buf
[16] = "\0";

1146 
	`•rötf
(
buf
, "%s", 
C⁄fig
.
RC¡Fix
 ? "on" : "off");

1147  
buf
;

1148 
	}
}

1150 
	$RC¡Fix_höt
()

1152 
	`p‹t_¥ötf
(2 * 8 - 4, 10 * 8, "Parasite Eve 2, Vandal Hearts 1/2 Fix");

1153 
	}
}

1155 
	$VSyncWA_Æãr
(
u32
 
keys
)

1157 i‡(
keys
 & 
KEY_RIGHT
) {

1158 i‡(
C⁄fig
.
VSyncWA
 < 1) Config.VSyncWA = 1;

1159 } i‡(
keys
 & 
KEY_LEFT
) {

1160 i‡(
C⁄fig
.
VSyncWA
 > 0) Config.VSyncWA = 0;

1164 
	}
}

1166 
	$VSyncWA_höt
()

1168 
	`p‹t_¥ötf
(6 * 8, 10 * 8, "InuYasha Sengoku Battle Fix");

1169 
	}
}

1171 *
	$VSyncWA_show
()

1173 
buf
[16] = "\0";

1174 
	`•rötf
(
buf
, "%s", 
C⁄fig
.
VSyncWA
 ? "on" : "off");

1175  
buf
;

1176 
	}
}

1178 
	$A«log1_Æãr
(
u32
 
keys
)

1180 i‡(
keys
 & 
KEY_RIGHT
) {

1181 i‡(
C⁄fig
.
A«logAºow
 < 1) Config.AnalogArrow = 1;

1182 } i‡(
keys
 & 
KEY_LEFT
) {

1183 i‡(
C⁄fig
.
A«logAºow
 > 0) Config.AnalogArrow = 0;

1187 
	}
}

1189 
	$A«log1_höt
()

1191 
	`p‹t_¥ötf
(6 * 8, 10 * 8, "Analog Stick -> Arrow Keys");

1192 
	}
}

1194 *
	$A«log1_show
()

1196 
buf
[16] = "\0";

1197 
	`•rötf
(
buf
, "%s", 
C⁄fig
.
A«logAºow
 ? "on" : "off");

1198  
buf
;

1199 
	}
}

1201 
	$£âögs_back
()

1204 
	}
}

1206 
	$£âögs_deÁu…s
()

1209 
C⁄fig
.
Mdec
 = 0;

1210 
C⁄fig
.
PsxAuto
 = 1;

1211 
C⁄fig
.
HLE
 = 1;

1212 
C⁄fig
.
RC¡Fix
 = 0;

1213 
C⁄fig
.
VSyncWA
 = 0;

1214 
C⁄fig
.
A«logAºow
 = 0;

1215 #ifde‡
PSXREC


1216 
C⁄fig
.
Cpu
 = 0;

1218 
C⁄fig
.
Cpu
 = 1;

1220 
C⁄fig
.
PsxTy≥
 = 0;

1221 #ifde‡
PSXREC


1222 
cy˛e_mu…ùlõr
 = 0x200;

1225 
	}
}

1227 
MENUITEM
 
	ggui_SëtögsIãms
[] = {

1228 #ifde‡
PSXREC


1229 {(*)"Emuœti⁄ c‹ê ", 
NULL
, &
emu_Æãr
, &
emu_show
, NULL},

1230 {(*)"Cy˛êmu…ùlõ∏ ", 
NULL
, &
cy˛e_Æãr
, &
cy˛e_show
, NULL},

1232 {(*)"HLEÉmuœãd BIOS ", 
NULL
, &
bios_Æãr
, &
bios_show
, NULL},

1233 {(*)"Së BIOS fûê ", &
bios_£t
, 
NULL
, NULL, NULL},

1234 {(*)"RC¡Fix ", 
NULL
, &
RC¡Fix_Æãr
, &
RC¡Fix_show
, &
RC¡Fix_höt
},

1235 {(*)"VSyncWA ", 
NULL
, &
VSyncWA_Æãr
, &
VSyncWA_show
, &
VSyncWA_höt
},

1236 {(*)"A«log Aºow Key† ", 
NULL
, &
A«log1_Æãr
, &
A«log1_show
, &
A«log1_höt
},

1237 {(*)"Re°‹êdeÁu…† ", &
£âögs_deÁu…s
, 
NULL
, NULL, NULL},

1238 {
NULL
, NULL, NULL, NULL, NULL},

1239 {(*)"BackÅÿmaö míu ", &
£âögs_back
, 
NULL
, NULL, NULL},

1243 
	#SET_SIZE
 (((
gui_SëtögsIãms
Ë/ (
MENUITEM
)Ë- 1)

	)

1244 
MENU
 
	ggui_SëtögsMíu
 = { 
SET_SIZE
, 0, 56, 112, (
MENUITEM
 *)&
gui_SëtögsIãms
 };

1246 
	$Âs_Æãr
(
u32
 
keys
)

1248 i‡(
keys
 & 
KEY_RIGHT
) {

1249 i‡(
C⁄fig
.
ShowFps
 =
Ál£
ËC⁄fig.ShowFp†
åue
;

1250 } i‡(
keys
 & 
KEY_LEFT
) {

1251 i‡(
C⁄fig
.
ShowFps
 =
åue
ËC⁄fig.ShowFp†
Ál£
;

1254 
	}
}

1256 *
	$Âs_show
()

1258 
buf
[16] = "\0";

1259 
	`•rötf
(
buf
, "%s", 
C⁄fig
.
ShowFps
 =
åue
 ? "on" : "off");

1260  
buf
;

1261 
	}
}

1263 
	$‰amñimô_Æãr
(
u32
 
keys
)

1265 i‡(
keys
 & 
KEY_RIGHT
) {

1266 i‡(
C⁄fig
.
FømeLimô
 =
Ál£
ËC⁄fig.FømeLimô = 
åue
;

1267 } i‡(
keys
 & 
KEY_LEFT
) {

1268 i‡(
C⁄fig
.
FømeLimô
 =
åue
ËC⁄fig.FømeLimô = 
Ál£
;

1272 
	}
}

1274 *
	$‰amñimô_show
()

1276 
idx
 = 
C⁄fig
.
FømeLimô
 ? 1 : 0;

1277 c⁄° * 
°r
[] = { "off", "on" };

1278  (*)
°r
[
idx
];

1279 
	}
}

1281 #ifde‡
USE_GPULIB


1282 
	$‰ameskù_Æãr
(
u32
 
keys
)

1289 i‡(
C⁄fig
.
FømeSkù
 < -1) Config.FrameSkip = -1;

1290 i‡(
C⁄fig
.
FømeSkù
 > 3) Config.FrameSkip = 3;

1292 
fs
 = 
C⁄fig
.
FømeSkù
 + 1;

1294 i‡(
fs
 == 0) fs = 1;

1295 i‡(
fs
 == 1) fs = 0;

1297 i‡(
keys
 & 
KEY_RIGHT
) {

1298 i‡(
fs
 < 4) fs++;

1299 } i‡(
keys
 & 
KEY_LEFT
) {

1300 i‡(
fs
 > 0) fs--;

1303 i‡(
fs
 == 0) fs = 1;

1304 i‡(
fs
 == 1) fs = 0;

1306 
C⁄fig
.
FømeSkù
 = 
fs
 - 1;

1308 
	}
}

1310 *
	$‰ameskù_show
()

1312 c⁄° * 
°r
[] = { "auto", "off", "1", "2", "3" };

1315 
fs
 = 
C⁄fig
.
FømeSkù
 + 1;

1316 i‡(
fs
 < 0) fs = 0;

1317 i‡(
fs
 > 4) fs = 4;

1318  (*)
°r
[
fs
];

1319 
	}
}

1322 #ifde‡
GPU_UNAI


1323 
	$öãæa˚_Æãr
(
u32
 
keys
)

1325 i‡(
keys
 & 
KEY_RIGHT
) {

1326 i‡(
gpu_u«i_c⁄fig_ext
.
ûa˚_f‹˚
 =
Ál£
)

1327 
gpu_u«i_c⁄fig_ext
.
ûa˚_f‹˚
 = 
åue
;

1328 } i‡(
keys
 & 
KEY_LEFT
) {

1329 i‡(
gpu_u«i_c⁄fig_ext
.
ûa˚_f‹˚
 =
åue
)

1330 
gpu_u«i_c⁄fig_ext
.
ûa˚_f‹˚
 = 
Ál£
;

1334 
	}
}

1336 *
	$öãæa˚_show
()

1338 
buf
[16] = "\0";

1339 
	`•rötf
(
buf
, "%s", 
gpu_u«i_c⁄fig_ext
.
ûa˚_f‹˚
 =
åue
 ? "on" : "off");

1340  
buf
;

1341 
	}
}

1343 
	$dôhîög_Æãr
(
u32
 
keys
)

1345 i‡(
keys
 & 
KEY_RIGHT
) {

1346 i‡(
gpu_u«i_c⁄fig_ext
.
dôhîög
 =
Ál£
)

1347 
gpu_u«i_c⁄fig_ext
.
dôhîög
 = 
åue
;

1348 } i‡(
keys
 & 
KEY_LEFT
) {

1349 i‡(
gpu_u«i_c⁄fig_ext
.
dôhîög
 =
åue
)

1350 
gpu_u«i_c⁄fig_ext
.
dôhîög
 = 
Ál£
;

1354 
	}
}

1356 *
	$dôhîög_show
()

1358 
buf
[16] = "\0";

1359 
	`•rötf
(
buf
, "%s", 
gpu_u«i_c⁄fig_ext
.
dôhîög
 =
åue
 ? "on" : "off");

1360  
buf
;

1361 
	}
}

1363 
	$lightög_Æãr
(
u32
 
keys
)

1365 i‡(
keys
 & 
KEY_RIGHT
) {

1366 i‡(
gpu_u«i_c⁄fig_ext
.
lightög
 =
Ál£
)

1367 
gpu_u«i_c⁄fig_ext
.
lightög
 = 
åue
;

1368 } i‡(
keys
 & 
KEY_LEFT
) {

1369 i‡(
gpu_u«i_c⁄fig_ext
.
lightög
 =
åue
)

1370 
gpu_u«i_c⁄fig_ext
.
lightög
 = 
Ál£
;

1374 
	}
}

1376 *
	$lightög_show
()

1378 
buf
[16] = "\0";

1379 
	`•rötf
(
buf
, "%s", 
gpu_u«i_c⁄fig_ext
.
lightög
 =
åue
 ? "on" : "off");

1380  
buf
;

1381 
	}
}

1383 
	$Á°_lightög_Æãr
(
u32
 
keys
)

1385 i‡(
keys
 & 
KEY_RIGHT
) {

1386 i‡(
gpu_u«i_c⁄fig_ext
.
Á°_lightög
 =
Ál£
)

1387 
gpu_u«i_c⁄fig_ext
.
Á°_lightög
 = 
åue
;

1388 } i‡(
keys
 & 
KEY_LEFT
) {

1389 i‡(
gpu_u«i_c⁄fig_ext
.
Á°_lightög
 =
åue
)

1390 
gpu_u«i_c⁄fig_ext
.
Á°_lightög
 = 
Ál£
;

1394 
	}
}

1396 *
	$Á°_lightög_show
()

1398 
buf
[16] = "\0";

1399 
	`•rötf
(
buf
, "%s", 
gpu_u«i_c⁄fig_ext
.
Á°_lightög
 =
åue
 ? "on" : "off");

1400  
buf
;

1401 
	}
}

1403 
	$bÀndög_Æãr
(
u32
 
keys
)

1405 i‡(
keys
 & 
KEY_RIGHT
) {

1406 i‡(
gpu_u«i_c⁄fig_ext
.
bÀndög
 =
Ál£
)

1407 
gpu_u«i_c⁄fig_ext
.
bÀndög
 = 
åue
;

1408 } i‡(
keys
 & 
KEY_LEFT
) {

1409 i‡(
gpu_u«i_c⁄fig_ext
.
bÀndög
 =
åue
)

1410 
gpu_u«i_c⁄fig_ext
.
bÀndög
 = 
Ál£
;

1414 
	}
}

1416 *
	$bÀndög_show
()

1418 
buf
[16] = "\0";

1419 
	`•rötf
(
buf
, "%s", 
gpu_u«i_c⁄fig_ext
.
bÀndög
 =
åue
 ? "on" : "off");

1420  
buf
;

1421 
	}
}

1423 
	$˛ù_368_Æãr
(
u32
 
keys
)

1425 i‡(
keys
 & 
KEY_RIGHT
) {

1426 i‡(
gpu_u«i_c⁄fig_ext
.
˛ù_368
 =
Ál£
)

1427 
gpu_u«i_c⁄fig_ext
.
˛ù_368
 = 
åue
;

1428 } i‡(
keys
 & 
KEY_LEFT
) {

1429 i‡(
gpu_u«i_c⁄fig_ext
.
˛ù_368
 =
åue
)

1430 
gpu_u«i_c⁄fig_ext
.
˛ù_368
 = 
Ál£
;

1434 
	}
}

1436 *
	$˛ù_368_show
()

1438 
buf
[16] = "\0";

1439 
	`•rötf
(
buf
, "%s", 
gpu_u«i_c⁄fig_ext
.
˛ù_368
 =
åue
 ? "on" : "off");

1440  
buf
;

1441 
	}
}

1444 
	$gpu_£âögs_deÁu…s
()

1446 
C⁄fig
.
ShowFps
 = 0;

1447 
C⁄fig
.
FømeLimô
 = 
åue
;

1448 
C⁄fig
.
FømeSkù
 = 
FRAMESKIP_OFF
;

1450 #ifde‡
GPU_UNAI


1451 #i‚de‡
USE_GPULIB


1452 
gpu_u«i_c⁄fig_ext
.
‰ameskù_cou¡
 = 0;

1454 
gpu_u«i_c⁄fig_ext
.
ûa˚_f‹˚
 = 0;

1455 
gpu_u«i_c⁄fig_ext
.
˛ù_368
 = 0;

1456 
gpu_u«i_c⁄fig_ext
.
lightög
 = 1;

1457 
gpu_u«i_c⁄fig_ext
.
Á°_lightög
 = 1;

1458 
gpu_u«i_c⁄fig_ext
.
bÀndög
 = 1;

1459 
gpu_u«i_c⁄fig_ext
.
dôhîög
 = 0;

1463 
	}
}

1465 
MENUITEM
 
	ggui_GPUSëtögsIãms
[] = {

1467 {(*)"Show FPS ", 
NULL
, &
Âs_Æãr
, &
Âs_show
, NULL},

1468 {(*)"Fømêlimôî ", 
NULL
, &
‰amñimô_Æãr
, &
‰amñimô_show
, NULL},

1469 #ifde‡
USE_GPULIB


1471 {(*)"Fømêskù ", 
NULL
, &
‰ameskù_Æãr
, &
‰ameskù_show
, NULL},

1473 #ifde‡
GPU_UNAI


1474 {(*)"I¡îœ˚ ", 
NULL
, &
öãæa˚_Æãr
, &
öãæa˚_show
, NULL},

1475 {(*)"Dôhîög ", 
NULL
, &
dôhîög_Æãr
, &
dôhîög_show
, NULL},

1476 {(*)"Lightög ", 
NULL
, &
lightög_Æãr
, &
lightög_show
, NULL},

1477 {(*)"Fa°Üightög ", 
NULL
, &
Á°_lightög_Æãr
, &
Á°_lightög_show
, NULL},

1478 {(*)"BÀndög ", 
NULL
, &
bÀndög_Æãr
, &
bÀndög_show
, NULL},

1479 {(*)"Clù 368 -> 352 ", 
NULL
, &
˛ù_368_Æãr
, &
˛ù_368_show
, NULL},

1481 {(*)"Re°‹êdeÁu…† ", &
gpu_£âögs_deÁu…s
, 
NULL
, NULL, NULL},

1482 {
NULL
, NULL, NULL, NULL, NULL},

1483 {(*)"BackÅÿmaö míu ", &
£âögs_back
, 
NULL
, NULL, NULL},

1487 
	#SET_GPUSIZE
 (((
gui_GPUSëtögsIãms
Ë/ (
MENUITEM
)Ë- 1)

	)

1488 
MENU
 
	ggui_GPUSëtögsMíu
 = { 
SET_GPUSIZE
, 0, 56, 112, (
MENUITEM
 *)&
gui_GPUSëtögsIãms
 };

1490 
	$xa_Æãr
(
u32
 
keys
)

1492 i‡(
keys
 & 
KEY_RIGHT
) {

1493 i‡(
C⁄fig
.
Xa
 == 1) Config.Xa = 0;

1494 } i‡(
keys
 & 
KEY_LEFT
) {

1495 i‡(
C⁄fig
.
Xa
 == 0) Config.Xa = 1;

1499 
	}
}

1501 *
	$xa_show
()

1503 
buf
[16] = "\0";

1504 
	`•rötf
(
buf
, "%s", 
C⁄fig
.
Xa
 ? "off" : "on");

1505  
buf
;

1506 
	}
}

1508 
	$cdda_Æãr
(
u32
 
keys
)

1510 i‡(
keys
 & 
KEY_RIGHT
) {

1511 i‡(
C⁄fig
.
Cdda
 == 1) Config.Cdda = 0;

1512 } i‡(
keys
 & 
KEY_LEFT
) {

1513 i‡(
C⁄fig
.
Cdda
 == 0) Config.Cdda = 1;

1517 
	}
}

1519 *
	$cdda_show
()

1521 
buf
[16] = "\0";

1522 
	`•rötf
(
buf
, "%s", 
C⁄fig
.
Cdda
 ? "off" : "on");

1523  
buf
;

1524 
	}
}

1526 
	$f‹˚dxa_Æãr
(
u32
 
keys
)

1528 i‡(
keys
 & 
KEY_RIGHT
) {

1529 i‡(
C⁄fig
.
F‹˚dXAUpd©es
 < 7) Config.ForcedXAUpdates++;

1530 } i‡(
keys
 & 
KEY_LEFT
) {

1531 i‡(
C⁄fig
.
F‹˚dXAUpd©es
 > 0) Config.ForcedXAUpdates--;

1535 
	}
}

1537 *
	$f‹˚dxa_show
()

1539 i‡(
C⁄fig
.
F‹˚dXAUpd©es
 < 0) Config.ForcedXAUpdates = 0;

1540 i‡(
C⁄fig
.
F‹˚dXAUpd©es
 > 7) Config.ForcedXAUpdates = 7;

1542 c⁄° * 
°r
[] = { "off", "auto", "1", "2", "4", "8", "16", "32" };

1543  (*)
°r
[
C⁄fig
.
F‹˚dXAUpd©es
];

1544 
	}
}

1546 
	$synˇudio_Æãr
(
u32
 
keys
)

1548 i‡(
keys
 & 
KEY_RIGHT
) {

1549 i‡(
C⁄fig
.
SyncAudio
 < 1) Config.SyncAudio = 1;

1550 } i‡(
keys
 & 
KEY_LEFT
) {

1551 i‡(
C⁄fig
.
SyncAudio
 > 0) Config.SyncAudio = 0;

1555 
	}
}

1557 *
	$synˇudio_show
()

1559 
buf
[16] = "\0";

1560 
	`•rötf
(
buf
, "%s", 
C⁄fig
.
SyncAudio
 ? "on" : "off");

1561  
buf
;

1562 
	}
}

1564 
	$•uupd©e‰eq_Æãr
(
u32
 
keys
)

1566 i‡(
keys
 & 
KEY_RIGHT
) {

1567 i‡(
C⁄fig
.
SpuUpd©eFªq
 < 5) Config.SpuUpdateFreq++;

1568 } i‡(
keys
 & 
KEY_LEFT
) {

1569 i‡(
C⁄fig
.
SpuUpd©eFªq
 > 0) Config.SpuUpdateFreq--;

1573 
	}
}

1575 *
	$•uupd©e‰eq_show
()

1577 i‡(
C⁄fig
.
SpuUpd©eFªq
 < 0) Config.SpuUpdateFreq = 0;

1578 i‡(
C⁄fig
.
SpuUpd©eFªq
 > 5) Config.SpuUpdateFreq = 5;

1580 c⁄° * 
°r
[] = { "1", "2", "4", "8", "16", "32" };

1581  (*)
°r
[
C⁄fig
.
SpuUpd©eFªq
];

1582 
	}
}

1584 
	$•uúq_Æãr
(
u32
 
keys
)

1586 i‡(
keys
 & 
KEY_RIGHT
) {

1587 i‡(
C⁄fig
.
SpuIrq
 < 1) Config.SpuIrq = 1;

1588 } i‡(
keys
 & 
KEY_LEFT
) {

1589 i‡(
C⁄fig
.
SpuIrq
 > 0) Config.SpuIrq = 0;

1593 
	}
}

1595 *
	$•uúq_show
()

1597 
buf
[16] = "\0";

1598 
	`•rötf
(
buf
, "%s", 
C⁄fig
.
SpuIrq
 ? "on" : "off");

1599  
buf
;

1600 
	}
}

1602 #ifde‡
SPU_PCSXREARMED


1603 
	$öãΩﬁ©i⁄_Æãr
(
u32
 
keys
)

1605 i‡(
keys
 & 
KEY_RIGHT
) {

1606 i‡(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 < 3) spu_config.iUseInterpolation++;

1607 } i‡(
keys
 & 
KEY_LEFT
) {

1608 i‡(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 > 0) spu_config.iUseInterpolation--;

1612 
	}
}

1614 *
	$öãΩﬁ©i⁄_show
()

1616 
buf
[16] = "\0";

1617 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
) {

1618 0: 
	`°r˝y
(
buf
, "none"); ;

1619 1: 
	`°r˝y
(
buf
, "simple"); ;

1620 2: 
	`°r˝y
(
buf
, "gaussian"); ;

1621 3: 
	`°r˝y
(
buf
, "cubic"); ;

1622 : 
buf
[0] = '\0'; ;

1624  
buf
;

1625 
	}
}

1627 
	$ªvîb_Æãr
(
u32
 
keys
)

1629 i‡(
keys
 & 
KEY_RIGHT
) {

1630 i‡(
•u_c⁄fig
.
iU£Revîb
 < 1) spu_config.iUseReverb = 1;

1631 } i‡(
keys
 & 
KEY_LEFT
) {

1632 i‡(
•u_c⁄fig
.
iU£Revîb
 > 0) spu_config.iUseReverb = 0;

1636 
	}
}

1638 *
	$ªvîb_show
()

1640 
vÆ
 = 
•u_c⁄fig
.
iU£Revîb
 ? 1 : 0;

1641 c⁄° * 
°r
[] = { "off", "on" };

1642  (*)
°r
[
vÆ
];

1643 
	}
}

1645 
	$vﬁume_Æãr
(
u32
 
keys
)

1648 
vÆ
 = 
•u_c⁄fig
.
iVﬁume
 / 64;

1649 i‡(
keys
 & 
KEY_RIGHT
) {

1650 i‡(
vÆ
 < 16) val++;

1651 } i‡(
keys
 & 
KEY_LEFT
) {

1652 i‡(
vÆ
 > 0) val--;

1654 
•u_c⁄fig
.
iVﬁume
 = 
vÆ
 * 64;

1656 
	}
}

1658 *
	$vﬁume_show
()

1660 
vÆ
 = 
•u_c⁄fig
.
iVﬁume
 / 64;

1661 
buf
[16] = "\0";

1662 
	`•rötf
(
buf
, "%d", 
vÆ
);

1663  
buf
;

1664 
	}
}

1667 
	$•u_£âögs_deÁu…s
()

1670 
C⁄fig
.
Xa
 = 0;

1671 
C⁄fig
.
Cdda
 = 0;

1672 
C⁄fig
.
SyncAudio
 = 0;

1673 
C⁄fig
.
SpuUpd©eFªq
 = 
SPU_UPDATE_FREQ_DEFAULT
;

1674 
C⁄fig
.
F‹˚dXAUpd©es
 = 
FORCED_XA_UPDATES_DEFAULT
;

1675 
C⁄fig
.
SpuIrq
 = 0;

1676 #ifde‡
SPU_PCSXREARMED


1677 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 = 0;

1678 
•u_c⁄fig
.
iU£Revîb
 = 0;

1679 
•u_c⁄fig
.
iVﬁume
 = 1024;

1682 
	}
}

1684 
MENUITEM
 
	ggui_SPUSëtögsIãms
[] = {

1685 {(*)"XAáudiÿ ", 
NULL
, &
xa_Æãr
, &
xa_show
, NULL},

1686 {(*)"CDDAáudiÿ ", 
NULL
, &
cdda_Æãr
, &
cdda_show
, NULL},

1687 {(*)"Audiÿsyn¯ ", 
NULL
, &
synˇudio_Æãr
, &
synˇudio_show
, NULL},

1688 {(*)"SPU upd©e†≥∏‰ame", 
NULL
, &
•uupd©e‰eq_Æãr
, &
•uupd©e‰eq_show
, NULL},

1689 {(*)"F‹˚d XA upd©e† ", 
NULL
, &
f‹˚dxa_Æãr
, &
f‹˚dxa_show
, NULL},

1690 {(*)"IRQ fix ", 
NULL
, &
•uúq_Æãr
, &
•uúq_show
, NULL},

1691 #ifde‡
SPU_PCSXREARMED


1692 {(*)"I¡îpﬁ©i⁄ ", 
NULL
, &
öãΩﬁ©i⁄_Æãr
, &
öãΩﬁ©i⁄_show
, NULL},

1693 {(*)"Revîb ", 
NULL
, &
ªvîb_Æãr
, &
ªvîb_show
, NULL},

1694 {(*)"Ma°î vﬁumê ", 
NULL
, &
vﬁume_Æãr
, &
vﬁume_show
, NULL},

1696 {(*)"Re°‹êdeÁu…† ", &
•u_£âögs_deÁu…s
, 
NULL
, NULL, NULL},

1697 {
NULL
, NULL, NULL, NULL, NULL},

1698 {(*)"BackÅÿmaö míu ", &
£âögs_back
, 
NULL
, NULL, NULL},

1702 
	#SET_SPUSIZE
 (((
gui_SPUSëtögsIãms
Ë/ (
MENUITEM
)Ë- 1)

	)

1703 
MENU
 
	ggui_SPUSëtögsMíu
 = { 
SET_SPUSIZE
, 0, 56, 112, (
MENUITEM
 *)&
gui_SPUSëtögsIãms
 };

1705 
	$gui_LﬂdIso
()

1707 
is⁄ame
[
PATH_MAX
];

1708 c⁄° *
«me
 = 
	`FûeReq
(
C⁄fig
.
La°Dú
, 
NULL
, 
is⁄ame
);

1710 i‡(
«me
) {

1711 
	`SëIsoFûe
(
«me
);

1715 
cdrIsoMu…idiskCÆlback
 = 
gui_£À˘_mu…icd_to_boŸ_‰om
;

1721 
	}
}

1723 
	$gui_Sëtögs
()

1725 
	`gui_RunMíu
(&
gui_SëtögsMíu
);

1728 
	}
}

1730 
	$gui_GPUSëtögs
()

1732 
	`gui_RunMíu
(&
gui_GPUSëtögsMíu
);

1735 
	}
}

1737 
	$gui_SPUSëtögs
()

1739 
	`gui_RunMíu
(&
gui_SPUSëtögsMíu
);

1742 
	}
}

1744 
	$gui_Quô
()

1746 
	`exô
(0);

1748 
	}
}

1750 
	$ShowMíuIãm
(
x
, 
y
, 
MENUITEM
 *
mi
)

1752 
°rög
[
PATH_MAX
];

1754 i‡(
mi
->
«me
) {

1755 i‡(
mi
->
showvÆ
) {

1756 
	`•rötf
(
°rög
, "%†%s", 
mi
->
«me
, (*mi->
showvÆ
)());

1757 
	`p‹t_¥ötf
(
x
, 
y
, 
°rög
);

1759 
	`p‹t_¥ötf
(
x
, 
y
, 
mi
->
«me
);

1761 
	}
}

1763 
	$ShowMíu
(
MENU
 *
míu
)

1765 
MENUITEM
 *
mi
 = 
míu
->
m
;

1768 
i
 = 0; i < 
míu
->
num
; i++, 
mi
++) {

1769 
	`ShowMíuIãm
(
míu
->
x
, míu->
y
 + 
i
 * 10, 
mi
);

1771 i‡(
mi
->
höt
 && 
i
 =
míu
->
cur
)

1772 
mi
->
	`höt
();

1776 
	`p‹t_¥ötf
(
míu
->
x
 - 3 * 8, míu->
y
 + míu->
cur
 * 10, "-->");

1779 
	`p‹t_¥ötf
( 8 * 8, 10, "pcsx4all 2.4 for GCW-Zero");

1780 
	`p‹t_¥ötf
–4 * 8, 20, "Buûà⁄ " 
__DATE__
 "áà" 
__TIME__
);

1781 
	}
}

1783 
	$gui_RunMíu
(
MENU
 *
míu
)

1785 
MENUITEM
 *
mi
;

1786 
u32
 
keys
;

1789 
mi
 = 
míu
->
m
 + míu->
cur
;

1790 
keys
 = 
	`key_ªad
();

1792 
	`video_˛ór
();

1795 i‡(
keys
 & 
_KEY_BACK
) {

1796 i‡(
míu
 =&
gui_GameMíu
)

1798 
	`key_ªad
() != 0)

1800 
	`timî_dñay
(50);

1803 
	`key_ª£t
();

1805 } i‡(
keys
 & 
KEY_UP
) {

1807 i‡(--
míu
->
cur
 < 0)

1808 
míu
->
cur
 = míu->
num
 - 1;

1809 } !(
míu
->
m
 + míu->
cur
)->
«me
);

1811 } i‡(
keys
 & 
KEY_DOWN
) {

1813 i‡(++
míu
->
cur
 =míu->
num
)

1814 
míu
->
cur
 = 0;

1815 } !(
míu
->
m
 + míu->
cur
)->
«me
);

1816 } i‡(
keys
 & 
KEY_A
) {

1817 i‡(
mi
->
⁄_¥ess_a
) {

1818 
	`key_ª£t
();

1819 
ªsu…
 = (*
mi
->
⁄_¥ess_a
)();

1820 i‡(
ªsu…
)

1821  
ªsu…
;

1823 } i‡(
keys
 & 
KEY_B
) {

1824 
míu
->
cur
 = míu->
num
 - 1;

1825 
	`key_ª£t
();

1828 i‡((
keys
 & (
KEY_LEFT
 | 
KEY_RIGHT
)Ë&& 
mi
->
⁄_¥ess
) {

1829 
ªsu…
 = (*
mi
->
⁄_¥ess
)(
keys
);

1830 i‡(
ªsu…
)

1831  
ªsu…
;

1835 
	`ShowMíu
(
míu
);

1837 
	`video_Êù
();

1838 
	`timî_dñay
(75);

1840 i‡(
keys
 & (
KEY_A
 | 
KEY_B
 | 
KEY_X
 | 
KEY_Y
 | 
KEY_L
 | 
KEY_R
 |

1841 
KEY_LEFT
 | 
KEY_RIGHT
 | 
KEY_UP
 | 
KEY_DOWN
))

1842 
	`timî_dñay
(50);

1846 
	}
}

1849 
	$Sñe˘Game
()

1851  
	`gui_RunMíu
(&
gui_MaöMíu
);

1852 
	}
}

1854 
	$GameMíu
()

1858  
	`gui_RunMíu
(&
gui_GameMíu
);

1859 
	}
}

	@src/port/sdl/port.cpp

1 
	~<dúít.h
>

2 
	~<uni°d.h
>

3 
	~<sys/°©.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<f˙é.h
>

6 
	~<sys/mm™.h
>

7 
	~<uni°d.h
>

9 
	~"p‹t.h
"

10 
	~"r3000a.h
"

11 
	~"∂ugös.h
"

12 
	~"∂ugö_lib.h
"

13 
	~"≥rfm⁄.h
"

14 
	~<SDL.h
>

17 #ifde‡
__MINGW32__


18 
	~<limôs.h
>

21 #ifde‡
SPU_PCSXREARMED


22 
	~"•u/•u_pcsxª¨med/•u_c⁄fig.h
"

26 #ifde‡
USE_GPULIB


27 
	~"gpu/gpulib/gpu.h
"

30 #ifde‡
GPU_UNAI


31 
	~"gpu/gpu_u«i/gpu.h
"

35 
	mDKEY_SELECT
 = 0,

36 
	mDKEY_L3
,

37 
	mDKEY_R3
,

38 
	mDKEY_START
,

39 
	mDKEY_UP
,

40 
	mDKEY_RIGHT
,

41 
	mDKEY_DOWN
,

42 
	mDKEY_LEFT
,

43 
	mDKEY_L2
,

44 
	mDKEY_R2
,

45 
	mDKEY_L1
,

46 
	mDKEY_R1
,

47 
	mDKEY_TRIANGLE
,

48 
	mDKEY_CIRCLE
,

49 
	mDKEY_CROSS
,

50 
	mDKEY_SQUARE
,

52 
	mDKEY_TOTAL


55 
SDL_SurÁ˚
 *
	gs¸ìn
;

56 *
	gSCREEN
;

58 
boﬁ
 
	gpcsx4Æl_öôãd
 = 
Ál£
;

59 
boﬁ
 
	gemu_ru¬ög
 = 
Ál£
;

61 
	gdma_fd
 = -1;

62 c⁄° 
uöt32_t
 
	gdma_size
=320*480*2;

63 vﬁ©ûê
uöt16_t
 *
	gdma_±r
 = 
NULL
;

65 
c⁄fig_lﬂd
();

66 
c⁄fig_ßve
();

68 
	$m≠_dma_buf„r
()

70 
dma_fd
 = 
	`›í
("/dev/mem", 
O_RDWR
 | 
O_SYNC
);

71 if(
dma_fd
 < 0){

72 
	`¥ötf
("failedÅo open /dev/mem\n");

75  
dma_±r
 = 
	`mm≠
(0, 
dma_size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
dma_fd
, 0x4200000);

76 
	}
}

78 
	$unm≠_dma_buf„r
()

80 if(
dma_±r
){

81 
	`munm≠
(
dma_±r
, 
dma_size
);

82 
	`˛o£
(
dma_fd
);

84 
	}
}

86 
	$pcsx4Æl_exô
()

88 i‡(
	`SDL_MUSTLOCK
(
s¸ìn
))

89 
	`SDL_U∆ockSurÁ˚
(
s¸ìn
);

91 
	`SDL_Quô
();

93 i‡(
pcsx4Æl_öôãd
 =
åue
) {

94 
	`Rñó£Plugös
();

95 
	`psxShutdown
();

99 
	`c⁄fig_ßve
();

101 
	`unm≠_dma_buf„r
();

102 
	}
}

104 *
	ghome
 = 
NULL
;

105 
	ghomedú
[
PATH_MAX
] = "./.pcsx4all";

106 
	gmemˇrdsdú
[
PATH_MAX
] = "./.pcsx4all/memcards";

107 
	gbiosdú
[
PATH_MAX
] = "./.pcsx4all/bios";

108 
	g∑tchesdú
[
PATH_MAX
] = "./.pcsx4all/patches";

109 
	gs°©esdú
[
PATH_MAX
] = "./.pcsx4all/sstates";

111 #ifde‡
__WIN32__


112 
	#MKDIR
(
A
Ë
	`mkdú
(A)

	)

114 
	#MKDIR
(
A
Ë
	`mkdú
(A, 0777)

	)

117 
	$£tup_∑ths
()

119 #i‚de‡
__WIN32__


120 
home
 = 
	`gëív
("HOME");

122 
buf
[
PATH_MAX
];

123 
home
 = 
	`gëcwd
(
buf
, 
PATH_MAX
);

125 i‡(
home
) {

126 
	`•rötf
(
homedú
, "%s/.pcsx4Æl", 
home
);

127 
	`•rötf
(
s°©esdú
, "%s/s°©es", 
homedú
);

128 
	`•rötf
(
memˇrdsdú
, "%s/memˇrds", 
homedú
);

129 
	`•rötf
(
biosdú
, "%s/bios", 
homedú
);

130 
	`•rötf
(
∑tchesdú
, "%s/∑tches", 
homedú
);

133 
	`MKDIR
(
homedú
);

134 
	`MKDIR
(
s°©esdú
);

135 
	`MKDIR
(
memˇrdsdú
);

136 
	`MKDIR
(
biosdú
);

137 
	`MKDIR
(
∑tchesdú
);

138 
	}
}

140 
	$¥obe_œ°dú
()

142 
DIR
 *
dú
;

143 i‡(!
C⁄fig
.
La°Dú
)

146 
dú
 = 
	`›ídú
(
C⁄fig
.
La°Dú
);

148 i‡(!
dú
) {

150 
	`°∫˝y
(
C⁄fig
.
La°Dú
, 
home
, 
MAXPATHLEN
);

151 
C⁄fig
.
La°Dú
[
MAXPATHLEN
-1] = '\0';

153 
	`˛o£dú
(
dú
);

155 
	}
}

157 #ifde‡
PSXREC


158 
u32
 
cy˛e_mu…ùlõr
;

161 
	$c⁄fig_lﬂd
()

163 
FILE
 *
f
;

164 *
c⁄fig
 = (*)
	`mÆloc
(
	`°æí
(
homedú
) + strlen("/pcsx4all.cfg") + 1);

165 
löe
[
	`°æí
("La°Dú "Ë+ 
MAXPATHLEN
 + 1];

166 
löeNum
 = 0;

168 i‡(!
c⁄fig
)

171 
	`•rötf
(
c⁄fig
, "%s/pcsx4Æl.cfg", 
homedú
);

173 
f
 = 
	`f›í
(
c⁄fig
, "r");

175 i‡(
f
 =
NULL
) {

176 
	`¥ötf
("FaûedÅÿ›í c⁄fig fûe: \"%s\" f‹Ñódög.\n", 
c⁄fig
);

177 
	`‰ì
(
c⁄fig
);

181 
	`fgës
(
löe
, ÷öe), 
f
)) {

182 *
¨g
 = 
	`°rchr
(
löe
, ' ');

183 
vÆue
;

185 ++
löeNum
;

187 i‡(!
¨g
) {

191 *
¨g
 = '\0';

192 
¨g
++;

194 i‡(
löeNum
 == 1) {

195 i‡(!
	`°rcmp
(
löe
, "CONFIG_VERSION")) {

196 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

197 i‡(
vÆue
 =
CONFIG_VERSION
) {

200 
	`¥ötf
("Incompatible config version for \"%s\"."

202 
c⁄fig
, 
CONFIG_VERSION
, 
vÆue
);

207 
	`¥ötf
("Incompatible config format for \"%s\"."

208 "Ign‹ög.\n", 
c⁄fig
);

212 i‡(!
	`°rcmp
(
löe
, "Xa")) {

213 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

214 
C⁄fig
.
Xa
 = 
vÆue
;

215 } i‡(!
	`°rcmp
(
löe
, "Mdec")) {

216 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

217 
C⁄fig
.
Mdec
 = 
vÆue
;

218 } i‡(!
	`°rcmp
(
löe
, "PsxAuto")) {

219 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

220 
C⁄fig
.
PsxAuto
 = 
vÆue
;

221 } i‡(!
	`°rcmp
(
löe
, "Cdda")) {

222 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

223 
C⁄fig
.
Cdda
 = 
vÆue
;

224 } i‡(!
	`°rcmp
(
löe
, "HLE")) {

225 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

226 
C⁄fig
.
HLE
 = 
vÆue
;

227 } i‡(!
	`°rcmp
(
löe
, "RCntFix")) {

228 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

229 
C⁄fig
.
RC¡Fix
 = 
vÆue
;

230 } i‡(!
	`°rcmp
(
löe
, "VSyncWA")) {

231 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

232 
C⁄fig
.
VSyncWA
 = 
vÆue
;

233 } i‡(!
	`°rcmp
(
löe
, "Cpu")) {

234 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

235 
C⁄fig
.
Cpu
 = 
vÆue
;

236 } i‡(!
	`°rcmp
(
löe
, "PsxType")) {

237 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

238 
C⁄fig
.
PsxTy≥
 = 
vÆue
;

239 } i‡(!
	`°rcmp
(
löe
, "SpuIrq")) {

240 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

241 
C⁄fig
.
SpuIrq
 = 
vÆue
;

242 } i‡(!
	`°rcmp
(
löe
, "SyncAudio")) {

243 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

244 
C⁄fig
.
SyncAudio
 = 
vÆue
;

245 } i‡(!
	`°rcmp
(
löe
, "SpuUpdateFreq")) {

246 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

247 i‡(
vÆue
 < 
SPU_UPDATE_FREQ_MIN
 || vÆuê> 
SPU_UPDATE_FREQ_MAX
)

248 
vÆue
 = 
SPU_UPDATE_FREQ_DEFAULT
;

249 
C⁄fig
.
SpuUpd©eFªq
 = 
vÆue
;

250 } i‡(!
	`°rcmp
(
löe
, "ForcedXAUpdates")) {

251 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

252 i‡(
vÆue
 < 
FORCED_XA_UPDATES_MIN
 || vÆuê> 
FORCED_XA_UPDATES_MAX
)

253 
vÆue
 = 
FORCED_XA_UPDATES_DEFAULT
;

254 
C⁄fig
.
F‹˚dXAUpd©es
 = 
vÆue
;

255 } i‡(!
	`°rcmp
(
löe
, "ShowFps")) {

256 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

257 
C⁄fig
.
ShowFps
 = 
vÆue
;

258 } i‡(!
	`°rcmp
(
löe
, "FrameLimit")) {

259 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

260 
C⁄fig
.
FømeLimô
 = 
vÆue
;

261 } i‡(!
	`°rcmp
(
löe
, "FrameSkip")) {

262 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

263 i‡(
vÆue
 < 
FRAMESKIP_MIN
 || vÆuê> 
FRAMESKIP_MAX
)

264 
vÆue
 = 
FRAMESKIP_OFF
;

265 
C⁄fig
.
FømeSkù
 = 
vÆue
;

266 } i‡(!
	`°rcmp
(
löe
, "AnalogArrow")) {

267 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

268 
C⁄fig
.
A«logAºow
 = 
vÆue
;

270 #ifde‡
SPU_PCSXREARMED


271 i‡(!
	`°rcmp
(
löe
, "SpuUseInterpolation")) {

272 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

273 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 = 
vÆue
;

274 } i‡(!
	`°rcmp
(
löe
, "SpuUseReverb")) {

275 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

276 
•u_c⁄fig
.
iU£Revîb
 = 
vÆue
;

277 } i‡(!
	`°rcmp
(
löe
, "SpuVolume")) {

278 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

279 i‡(
vÆue
 > 1024) value = 1024;

280 i‡(
vÆue
 < 0) value = 0;

281 
•u_c⁄fig
.
iVﬁume
 = 
vÆue
;

284 i‡(!
	`°rcmp
(
löe
, "LastDir")) {

285 
Àn
 = 
	`°æí
(
¨g
);

287 i‡(
Àn
 =0 ||Üí > (
C⁄fig
.
La°Dú
) - 1) {

291 i‡(
¨g
[
Àn
-1] == '\n') {

292 
¨g
[
Àn
-1] = '\0';

295 
	`°r˝y
(
C⁄fig
.
La°Dú
, 
¨g
);

296 } i‡(!
	`°rcmp
(
löe
, "BiosDir")) {

297 
Àn
 = 
	`°æí
(
¨g
);

299 i‡(
Àn
 =0 ||Üí > (
C⁄fig
.
BiosDú
) - 1) {

303 i‡(
¨g
[
Àn
-1] == '\n') {

304 
¨g
[
Àn
-1] = '\0';

307 
	`°r˝y
(
C⁄fig
.
BiosDú
, 
¨g
);

308 } i‡(!
	`°rcmp
(
löe
, "Bios")) {

309 
Àn
 = 
	`°æí
(
¨g
);

311 i‡(
Àn
 =0 ||Üí > (
C⁄fig
.
Bios
) - 1) {

315 i‡(
¨g
[
Àn
-1] == '\n') {

316 
¨g
[
Àn
-1] = '\0';

319 
	`°r˝y
(
C⁄fig
.
Bios
, 
¨g
);

321 #ifde‡
PSXREC


322 i‡(!
	`°rcmp
(
löe
, "CycleMultiplier")) {

323 
	`ssˇnf
(
¨g
, "%03x", &
vÆue
);

324 
cy˛e_mu…ùlõr
 = 
vÆue
;

327 #ifde‡
GPU_UNAI


328 i‡(!
	`°rcmp
(
löe
, "clip_368")) {

329 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

330 
gpu_u«i_c⁄fig_ext
.
˛ù_368
 = 
vÆue
;

331 } i‡(!
	`°rcmp
(
löe
, "lighting")) {

332 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

333 
gpu_u«i_c⁄fig_ext
.
lightög
 = 
vÆue
;

334 } i‡(!
	`°rcmp
(
löe
, "fast_lighting")) {

335 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

336 
gpu_u«i_c⁄fig_ext
.
Á°_lightög
 = 
vÆue
;

337 } i‡(!
	`°rcmp
(
löe
, "blending")) {

338 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

339 
gpu_u«i_c⁄fig_ext
.
bÀndög
 = 
vÆue
;

340 } i‡(!
	`°rcmp
(
löe
, "dithering")) {

341 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

342 
gpu_u«i_c⁄fig_ext
.
dôhîög
 = 
vÆue
;

343 } i‡(!
	`°rcmp
(
löe
, "interlace")) {

344 
	`ssˇnf
(
¨g
, "%d", &
vÆue
);

345 
gpu_u«i_c⁄fig_ext
.
ûa˚_f‹˚
 = 
vÆue
;

350 
	`f˛o£
(
f
);

351 
	`‰ì
(
c⁄fig
);

352 
	}
}

354 
	$c⁄fig_ßve
()

356 
FILE
 *
f
;

357 *
c⁄fig
 = (*)
	`mÆloc
(
	`°æí
(
homedú
) + strlen("/pcsx4all.cfg") + 1);

359 i‡(!
c⁄fig
)

362 
	`•rötf
(
c⁄fig
, "%s/pcsx4Æl.cfg", 
homedú
);

364 
f
 = 
	`f›í
(
c⁄fig
, "w");

366 i‡(
f
 =
NULL
) {

367 
	`¥ötf
("FaûedÅÿ›í c⁄fig fûe: \"%s\" f‹ wrôög.\n", 
c⁄fig
);

368 
	`‰ì
(
c⁄fig
);

372 
	`Ârötf
(
f
, "CONFIG_VERSION %d\n"

390 
CONFIG_VERSION
, 
C⁄fig
.
Xa
, C⁄fig.
Mdec
, C⁄fig.
PsxAuto
,

391 
C⁄fig
.
Cdda
, C⁄fig.
HLE
, C⁄fig.
RC¡Fix
, C⁄fig.
VSyncWA
,

392 
C⁄fig
.
Cpu
, C⁄fig.
PsxTy≥
, C⁄fig.
SpuIrq
, C⁄fig.
SyncAudio
,

393 
C⁄fig
.
SpuUpd©eFªq
, C⁄fig.
F‹˚dXAUpd©es
, C⁄fig.
ShowFps
, C⁄fig.
FømeLimô
,

394 
C⁄fig
.
FømeSkù
, C⁄fig.
A«logAºow
);

396 #ifde‡
SPU_PCSXREARMED


397 
	`Ârötf
(
f
, "SpuU£I¡îpﬁ©i⁄ %d\n", 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
);

398 
	`Ârötf
(
f
, "SpuU£Revîb %d\n", 
•u_c⁄fig
.
iU£Revîb
);

399 
	`Ârötf
(
f
, "SpuVﬁumê%d\n", 
•u_c⁄fig
.
iVﬁume
);

402 #ifde‡
PSXREC


403 
	`Ârötf
(
f
, "Cy˛eMu…ùlõ∏%03x\n", 
cy˛e_mu…ùlõr
);

406 #ifde‡
GPU_UNAI


407 
	`Ârötf
(
f
, "interlace %d\n"

413 
gpu_u«i_c⁄fig_ext
.
ûa˚_f‹˚
,

414 
gpu_u«i_c⁄fig_ext
.
˛ù_368
,

415 
gpu_u«i_c⁄fig_ext
.
lightög
,

416 
gpu_u«i_c⁄fig_ext
.
Á°_lightög
,

417 
gpu_u«i_c⁄fig_ext
.
bÀndög
,

418 
gpu_u«i_c⁄fig_ext
.
dôhîög
);

422 i‡(
C⁄fig
.
La°Dú
[0]) {

423 
	`Ârötf
(
f
, "La°Dú %s\n", 
C⁄fig
.
La°Dú
);

426 i‡(
C⁄fig
.
BiosDú
[0]) {

427 
	`Ârötf
(
f
, "BiosDú %s\n", 
C⁄fig
.
BiosDú
);

430 i‡(
C⁄fig
.
Bios
[0]) {

431 
	`Ârötf
(
f
, "Bio†%s\n", 
C⁄fig
.
Bios
);

434 
	`f˛o£
(
f
);

435 
	`‰ì
(
c⁄fig
);

436 
	}
}

439 
	$°©e_lﬂd
(
¶Ÿ
)

441 
ßvíame
[512];

442 
	`•rötf
(
ßvíame
, "%s/%s.%d.ßv", 
s°©esdú
, 
CdromId
, 
¶Ÿ
);

444 i‡(
	`FûeExi°s
(
ßvíame
)) {

445  
	`LﬂdSèã
(
ßvíame
);

449 
	}
}

452 
	$°©e_ßve
(
¶Ÿ
)

454 
ßvíame
[512];

455 
	`•rötf
(
ßvíame
, "%s/%s.%d.ßv", 
s°©esdú
, 
CdromId
, 
¶Ÿ
);

457  
	`SaveSèã
(
ßvíame
);

458 
	}
}

461 
	mkey
;

462 
	mbô
;

463 } 
	gkeym≠
[] = {

464 { 
SDLK_UP
, 
DKEY_UP
 },

465 { 
SDLK_DOWN
, 
DKEY_DOWN
 },

466 { 
SDLK_LEFT
, 
DKEY_LEFT
 },

467 { 
SDLK_RIGHT
, 
DKEY_RIGHT
 },

468 #ifde‡
GCW_ZERO


469 { 
SDLK_LSHIFT
, 
DKEY_SQUARE
 },

470 { 
SDLK_LCTRL
, 
DKEY_CIRCLE
 },

471 { 
SDLK_SPACE
, 
DKEY_TRIANGLE
 },

472 { 
SDLK_LALT
, 
DKEY_CROSS
 },

473 { 
SDLK_TAB
, 
DKEY_L1
 },

474 { 
SDLK_BACKSPACE
, 
DKEY_R1
 },

475 { 
SDLK_ESCAPE
, 
DKEY_SELECT
 },

477 { 
SDLK_a
, 
DKEY_SQUARE
 },

478 { 
SDLK_x
, 
DKEY_CIRCLE
 },

479 { 
SDLK_s
, 
DKEY_TRIANGLE
 },

480 { 
SDLK_z
, 
DKEY_CROSS
 },

481 { 
SDLK_q
, 
DKEY_L1
 },

482 { 
SDLK_w
, 
DKEY_R1
 },

483 { 
SDLK_e
, 
DKEY_L2
 },

484 { 
SDLK_r
, 
DKEY_R2
 },

485 { 
SDLK_BACKSPACE
, 
DKEY_SELECT
 },

487 { 
SDLK_RETURN
, 
DKEY_START
 },

491 
	g∑d1
 = 0xffff, 
	g_∑d1
 = 0xffff;

492 
	g∑d2
 = 0xffff;

493 
	g™Æog1
 = 0;

494 
	gmíu_check
 = 0;

495 
	g£À˘_cou¡
 = 0;

496 
boﬁón
 
	gu£_•ìdup
 = 
Ál£
;

497 
SDL_Joy°ick
 * 
	gsdl_joy
;

498 
	#joy_commô_ønge
 3276

	)

501 
	mANALOG_UP
 = 1,

502 
	mANALOG_DOWN
 = 2,

503 
	mANALOG_LEFT
 = 4,

504 
	mANALOG_RIGHT
 = 8

507 
	$joy_öô
()

509 
sdl_joy
 = 
	`SDL_Joy°ickO≥n
(0);

510 
	`SDL_Joy°ickEvítSèã
(
SDL_ENABLE
);

536 
	}
}

538 
	$∑d_upd©e
()

540 
axisvÆ
;

541 
SDL_Evít
 
evít
;

542 
Uöt8
 *
keys
 = 
	`SDL_GëKeySèã
(
NULL
);

544 
	`SDL_PﬁlEvít
(&
evít
))

546 
evít
.
ty≥
)

548 
SDL_QUIT
:

549 
	`exô
(0);

551 
SDL_KEYDOWN
:

552 
evít
.
key
.
keysym
.
sym
)

554 #i‚de‡
GCW_ZERO


555 
SDLK_ESCAPE
:

556 
evít
.
ty≥
 = 
SDL_QUIT
;

557 
	`SDL_PushEvít
(&
evít
);

560 
SDLK_v
: { 
C⁄fig
.
ShowFps
=!Config.ShowFps; } ;

564 
SDL_JOYAXISMOTION
:

565 
evít
.
jaxis
.
axis
)

568 
axisvÆ
 = 
evít
.
jaxis
.
vÆue
;

569 
™Æog1
 &~(
ANALOG_LEFT
 | 
ANALOG_RIGHT
);

570 i‡(
axisvÆ
 > 
joy_commô_ønge
)

572 
™Æog1
 |
ANALOG_RIGHT
;

574 i‡(
axisvÆ
 < -
joy_commô_ønge
)

576 
™Æog1
 |
ANALOG_LEFT
;

580 
axisvÆ
 = 
evít
.
jaxis
.
vÆue
;

581 
™Æog1
 &~(
ANALOG_UP
 | 
ANALOG_DOWN
);

582 i‡(
axisvÆ
 > 
joy_commô_ønge
)

584 
™Æog1
 |
ANALOG_DOWN
;

586 i‡(
axisvÆ
 < -
joy_commô_ønge
)

588 
™Æog1
 |
ANALOG_UP
;

593 
SDL_JOYBUTTONDOWN
:

599 
k
 = 0;

600 
keym≠
[
k
].
key
) {

601 i‡(
keys
[
keym≠
[
k
].
key
]) {

602 
_∑d1
 &~(1 << 
keym≠
[
k
].
bô
);

604 
_∑d1
 |(1 << 
keym≠
[
k
].
bô
);

606 
k
++;

608 
∑d1
 = 
_∑d1
;

611 #ifde‡
GCW_ZERO


613 i‡(
keys
[
SDLK_ESCAPE
])

615 i‡(!
keys
[
SDLK_RETURN
])

617 
míu_check
 = 1;

619 i‡(
míu_check
 == 1)

621 
míu_check
 = 2;

625 i‡(
u£_•ìdup
 =
Ál£
 && ++
£À˘_cou¡
 == 70)

627 
u£_•ìdup
 = 
åue
;

633 
míu_check
 = 0;

635 i‡(
u£_•ìdup
)

637 i‡(!
keys
[
SDLK_ESCAPE
] && !keys[
SDLK_RETURN
])

639 
£À˘_cou¡
 = 0;

641 i‡(
£À˘_cou¡
 == 0)

643 
u£_•ìdup
 = 
Ál£
;

647 i‡(
C⁄fig
.
A«logAºow
)

649 
∑d1
 |(1 << 
DKEY_SELECT
);

651 i‡(
keys
[
SDLK_ESCAPE
] && keys[
SDLK_LALT
])

653 
∑d1
 &~(1 << 
DKEY_SELECT
);

654 
∑d1
 |(1 << 
DKEY_CROSS
);

657 i‡(
keys
[
SDLK_ESCAPE
] && keys[
SDLK_TAB
])

659 
∑d1
 &~(1 << 
DKEY_L2
);

660 
∑d1
 |(1 << 
DKEY_L1
);

664 
∑d1
 |(1 << 
DKEY_L2
);

667 i‡(
keys
[
SDLK_ESCAPE
] && keys[
SDLK_BACKSPACE
])

669 
∑d1
 &~(1 << 
DKEY_R2
);

670 
∑d1
 |(1 << 
DKEY_R1
);

674 
∑d1
 |(1 << 
DKEY_R2
);

676 i‡((
_∑d1
 & (1 << 
DKEY_UP
)Ë&& (
™Æog1
 & 
ANALOG_UP
))

678 
∑d1
 &~(1 << 
DKEY_UP
);

680 i‡((
_∑d1
 & (1 << 
DKEY_DOWN
)Ë&& (
™Æog1
 & 
ANALOG_DOWN
))

682 
∑d1
 &~(1 << 
DKEY_DOWN
);

684 i‡((
_∑d1
 & (1 << 
DKEY_LEFT
)Ë&& (
™Æog1
 & 
ANALOG_LEFT
))

686 
∑d1
 &~(1 << 
DKEY_LEFT
);

688 i‡((
_∑d1
 & (1 << 
DKEY_RIGHT
)Ë&& (
™Æog1
 & 
ANALOG_RIGHT
))

690 
∑d1
 &~(1 << 
DKEY_RIGHT
);

695 
∑d1
 |(1 << 
DKEY_L2
Ë| (1 << 
DKEY_R2
);

696 i‡(
™Æog1
 =
ANALOG_UP
)

698 
∑d1
 &~((1 << 
DKEY_L2
Ë| (1 << 
DKEY_R2
));

700 i‡(
™Æog1
 =
ANALOG_DOWN
)

702 
míu_check
 = 2;

704 i‡(
™Æog1
 & 
ANALOG_LEFT
)

706 
∑d1
 &~(1 << 
DKEY_L2
);

708 i‡(
™Æog1
 & 
ANALOG_RIGHT
)

710 
∑d1
 &~(1 << 
DKEY_R2
);

715 i‡(
míu_check
 =2 && !
keys
[
SDLK_LALT
])

720 
	`sioSyncMcds
();

722 
emu_ru¬ög
 = 
Ál£
;

723 
	`∂_∑u£
();

724 
	`GameMíu
();

725 
emu_ru¬ög
 = 
åue
;

726 
u£_•ìdup
 = 
Ál£
;

727 
míu_check
 = 0;

728 
™Æog1
 = 0;

729 
∑d1
 |(1 << 
DKEY_START
Ë| (1 << 
DKEY_CROSS
Ë| (1 << 
DKEY_SELECT
);

730 
	`video_˛ór
();

731 
	`video_Êù
();

732 
	`video_˛ór
();

733 #ifde‡
SDL_TRIPLEBUF


734 
	`video_Êù
();

735 
	`video_˛ór
();

737 
	`∂_ªsume
();

740 
	}
}

742 
	$∑d_ªad
(
num
)

744  (
num
 =0 ? 
∑d1
 : 
∑d2
);

745 
	}
}

747 
	$dma_Êù
()

749 i‡(
emu_ru¬ög
 && 
C⁄fig
.
ShowFps
) {

750 
	`p‹t_¥ötf
(5, 5, 
∂_d©a
.
°©s_msg
);

752 
	}
}

754 
	$video_Êù
()

760 i‡(
	`SDL_MUSTLOCK
(
s¸ìn
))

761 
	`SDL_U∆ockSurÁ˚
(
s¸ìn
);

763 
	`SDL_Flù
(
s¸ìn
);

765 i‡(
	`SDL_MUSTLOCK
(
s¸ìn
))

766 
	`SDL_LockSurÁ˚
(
s¸ìn
);

768 
SCREEN
 = (
Uöt16
 *)
s¸ìn
->
pixñs
;

769 
	}
}

772 #ifde‡
GPU_DFXVIDEO


773 
	$video_£t
(*
pVideo
, 
width
, 
height
)

775 
y
;

776 *
±r
 = 
SCREEN
;

777 
w
 = (
width
 > 320 ? 320 : width);

778 
h
 = (
height
 > 240 ? 240 : height);

780 
y
 = 0; y < 
h
; y++) {

781 
	`mem˝y
(
±r
, 
pVideo
, 
w
 * 2);

782 
±r
 += 320;

783 
pVideo
 +
width
;

786 
	`video_Êù
();

787 
	}
}

790 
	$video_˛ór
()

792 
	`mem£t
(
s¸ìn
->
pixñs
, 0, s¸ìn->
pôch
*s¸ìn->
h
);

793 
	}
}

797 #ifde‡
UNDEF_MAIN


798 #unde‡
maö


801 
	$maö
 (
¨gc
, **
¨gv
)

803 
fûíame
[256];

804 c⁄° *
cdrfûíame
 = 
	`GëIsoFûe
();

806 
fûíame
[0] = '\0';

808 
	`£tup_∑ths
();

811 
	`•rötf
(
C⁄fig
.
Mcd1
, "%s/%s", 
memˇrdsdú
, "mcd001.mcr");

812 
	`•rötf
(
C⁄fig
.
Mcd2
, "%s/%s", 
memˇrdsdú
, "mcd002.mcr");

813 
	`°r˝y
(
C⁄fig
.
P©chesDú
, 
∑tchesdú
);

814 
	`°r˝y
(
C⁄fig
.
BiosDú
, 
biosdú
);

815 
	`°r˝y
(
C⁄fig
.
Bios
, "scph1001.bin");

817 
C⁄fig
.
Xa
=0;

818 
C⁄fig
.
Mdec
=0;

819 
C⁄fig
.
PsxAuto
=1;

820 
C⁄fig
.
PsxTy≥
=0;

821 
C⁄fig
.
Cdda
=0;

822 
C⁄fig
.
HLE
=1;

823 #i‡
	`deföed
 (
PSXREC
)

824 
C⁄fig
.
Cpu
=0;

826 
C⁄fig
.
Cpu
=1;

828 
C⁄fig
.
RC¡Fix
=0;

829 
C⁄fig
.
VSyncWA
=0;

830 
C⁄fig
.
SpuIrq
=0;

832 
C⁄fig
.
SyncAudio
=0;

838 
C⁄fig
.
SpuUpd©eFªq
 = 
SPU_UPDATE_FREQ_DEFAULT
;

843 
C⁄fig
.
F‹˚dXAUpd©es
 = 
FORCED_XA_UPDATES_DEFAULT
;

845 
C⁄fig
.
ShowFps
=0;

846 
C⁄fig
.
FømeLimô
 = 
åue
;

847 
C⁄fig
.
FømeSkù
 = 
FRAMESKIP_OFF
;

848 
C⁄fig
.
A«logAºow
 = 
Ál£
;

851 
	`°∫˝y
(
C⁄fig
.
La°Dú
, 
home
, 
MAXPATHLEN
);

852 
C⁄fig
.
La°Dú
[
MAXPATHLEN
-1] = '\0';

855 #ifde‡
SPU_PCSXREARMED


874 
•u_c⁄fig
.
iHaveC⁄figuøti⁄
 = 1;

875 
•u_c⁄fig
.
iU£Revîb
 = 0;

876 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 = 0;

877 
•u_c⁄fig
.
iXAPôch
 = 0;

878 
•u_c⁄fig
.
iVﬁume
 = 1024;

879 
•u_c⁄fig
.
iU£Thªad
 = 0;

880 
•u_c⁄fig
.
iU£FixedUpd©es
 = 1;

881 
•u_c⁄fig
.
iTempo
 = 1;

896 #ifde‡
GPU_DFXVIDEO


897 
U£FømeLimô
; UseFrameLimit=0;

898 
U£FømeSkù
; UseFrameSkip=0;

899 
iFømeLimô
; iFrameLimit=0;

901 
fFømeR©e
; fFrameRate=200.0f;

902 
iU£Dôhî
; iUseDither=0;

903 
iU£Fixes
; iUseFixes=0;

904 
uöt32_t
 
dwCfgFixes
; dwCfgFixes=0;

920 #ifde‡
GPU_DRHELL


921 
autoFømeSkù
;áutoFrameSkip=1;

922 sig√d 
‰amesToSkù
; framesToSkip=0;

926 #ifde‡
GPU_UNAI


927 
gpu_u«i_c⁄fig_ext
.
ûa˚_f‹˚
 = 0;

928 
gpu_u«i_c⁄fig_ext
.
˛ù_368
 = 0;

929 
gpu_u«i_c⁄fig_ext
.
lightög
 = 1;

930 
gpu_u«i_c⁄fig_ext
.
Á°_lightög
 = 1;

931 
gpu_u«i_c⁄fig_ext
.
bÀndög
 = 1;

932 
gpu_u«i_c⁄fig_ext
.
dôhîög
 = 0;

936 
	`c⁄fig_lﬂd
();

939 
	`¥obe_œ°dú
();

941 
	`m≠_dma_buf„r
();

942 
	`¥ötf
("dm®buf„r: 0x%x\n", 
dma_±r
);

945 
boﬁ
 
∑øm_∑r£_îr‹
 = 0;

946 
i
 = 1; i < 
¨gc
; i++) {

949 i‡(
	`°rcmp
(
¨gv
[
i
],"-noxa") == 0)

950 
C⁄fig
.
Xa
 = 1;

953 i‡(
	`°rcmp
(
¨gv
[
i
],"-bwmdec") == 0)

954 
C⁄fig
.
Mdec
 = 1;

957 i‡(
	`°rcmp
(
¨gv
[
i
],"-pal") == 0) {

958 
C⁄fig
.
PsxAuto
 = 0;

959 
C⁄fig
.
PsxTy≥
 = 1;

963 i‡(
	`°rcmp
(
¨gv
[
i
],"-ntsc") == 0) {

964 
C⁄fig
.
PsxAuto
 = 0;

965 
C⁄fig
.
PsxTy≥
 = 0;

969 i‡(
	`°rcmp
(
¨gv
[
i
],"-nocdda") == 0)

970 
C⁄fig
.
Cdda
 = 1;

973 i‡(
	`°rcmp
(
¨gv
[
i
],"-bios") == 0)

974 
C⁄fig
.
HLE
 = 0;

977 i‡(
	`°rcmp
(
¨gv
[
i
],"-interpreter") == 0)

978 
C⁄fig
.
Cpu
 = 1;

981 i‡(
	`°rcmp
(
¨gv
[
i
],"-rcntfix") == 0)

982 
C⁄fig
.
RC¡Fix
 = 1;

985 i‡(
	`°rcmp
(
¨gv
[
i
],"-vsyncwa") == 0)

986 
C⁄fig
.
VSyncWA
 = 1;

989 i‡(
	`°rcmp
(
¨gv
[
i
],"-spuirq") == 0)

990 
C⁄fig
.
SpuIrq
 = 1;

993 i‡(
	`°rcmp
(
¨gv
[
i
],"-iso") == 0)

994 
	`SëIsoFûe
(
¨gv
[
i
 + 1]);

997 i‡(
	`°rcmp
(
¨gv
[
i
],"-file") == 0)

998 
	`°r˝y
(
fûíame
, 
¨gv
[
i
 + 1]);

1002 i‡(
	`°rcmp
(
¨gv
[
i
],"-syncaudio") == 0)

1003 
C⁄fig
.
SyncAudio
 = 0;

1008 i‡(
	`°rcmp
(
¨gv
[
i
],"-spuupdatefreq") == 0) {

1009 
vÆ
 = -1;

1010 i‡(++
i
 < 
¨gc
) {

1011 
vÆ
 = 
	`©oi
(
¨gv
[
i
]);

1012 i‡(
vÆ
 >
SPU_UPDATE_FREQ_MIN
 && vÆ <
SPU_UPDATE_FREQ_MAX
) {

1013 
C⁄fig
.
SpuUpd©eFªq
 = 
vÆ
;

1014 } 
vÆ
 = -1;

1016 
	`¥ötf
("ERROR: missing value for -spuupdatefreq\n");

1019 i‡(
vÆ
 == -1) {

1020 
	`¥ötf
("ERROR: -spuupdatefreq value must be between %d..%d\n"

1022 
SPU_UPDATE_FREQ_MIN
, 
SPU_UPDATE_FREQ_MAX
, 
SPU_UPDATE_FREQ_1
);

1023 
∑øm_∑r£_îr‹
 = 
åue
;

1031 i‡(
	`°rcmp
(
¨gv
[
i
],"-forcedxaupdates") == 0) {

1032 
vÆ
 = -1;

1033 i‡(++
i
 < 
¨gc
) {

1034 
vÆ
 = 
	`©oi
(
¨gv
[
i
]);

1035 i‡(
vÆ
 >
FORCED_XA_UPDATES_MIN
 && vÆ <
FORCED_XA_UPDATES_MAX
) {

1036 
C⁄fig
.
F‹˚dXAUpd©es
 = 
vÆ
;

1037 } 
vÆ
 = -1;

1039 
	`¥ötf
("ERROR: missing value for -forcedxaupdates\n");

1042 i‡(
vÆ
 == -1) {

1043 
	`¥ötf
("ERROR: -forcedxaupdates value must be between %d..%d\n",

1044 
FORCED_XA_UPDATES_MIN
, 
FORCED_XA_UPDATES_MAX
);

1045 
∑øm_∑r£_îr‹
 = 
åue
;

1051 i‡(
	`°rcmp
(
¨gv
[
i
],"-perfmon") == 0) {

1053 
C⁄fig
.
Pîfm⁄C⁄sﬁeOuçut
 = 
åue
;

1054 
C⁄fig
.
Pîfm⁄DëaûedSèts
 = 
åue
;

1059 i‡(
	`°rcmp
(
¨gv
[
i
],"-showfps") == 0) {

1060 
C⁄fig
.
ShowFps
 = 
åue
;

1064 i‡(
	`°rcmp
(
¨gv
[
i
],"-noframelimit") == 0) {

1065 
C⁄fig
.
FømeLimô
 = 0;

1069 i‡(
	`°rcmp
(
¨gv
[
i
],"-frameskip") == 0) {

1070 
vÆ
 = -1000;

1071 i‡(++
i
 < 
¨gc
) {

1072 
vÆ
 = 
	`©oi
(
¨gv
[
i
]);

1073 i‡(
vÆ
 >= -1 && val <= 3) {

1074 
C⁄fig
.
FømeSkù
 = 
vÆ
;

1077 
	`¥ötf
("ERROR: missing value for -frameskip\n");

1080 i‡(
vÆ
 == -1000) {

1081 
	`¥ötf
("ERROR: -frameskip value must be between -1..3 (-1 is AUTO)\n");

1082 
∑øm_∑r£_îr‹
 = 
åue
;

1087 #ifde‡
GPU_UNAI


1089 i‡(
	`°rcmp
(
¨gv
[
i
],"-interlace") == 0) {

1090 
gpu_u«i_c⁄fig_ext
.
ûa˚_f‹˚
 = 1;

1094 i‡(
	`°rcmp
(
¨gv
[
i
],"-dither") == 0) {

1095 
gpu_u«i_c⁄fig_ext
.
dôhîög
 = 1;

1098 i‡(
	`°rcmp
(
¨gv
[
i
],"-nolight") == 0) {

1099 
gpu_u«i_c⁄fig_ext
.
lightög
 = 0;

1102 i‡(
	`°rcmp
(
¨gv
[
i
],"-noblend") == 0) {

1103 
gpu_u«i_c⁄fig_ext
.
bÀndög
 = 0;

1108 i‡(
	`°rcmp
(
¨gv
[
i
],"-nofastlight") == 0) {

1109 
gpu_u«i_c⁄fig_ext
.
Á°_lightög
 = 0;

1116 i‡(
	`°rcmp
(
¨gv
[
i
],"-nopixelskip") == 0) {

1117 
gpu_u«i_c⁄fig_ext
.
˛ù_368
 = 0;

1121 #i‚de‡
USE_GPULIB


1124 i‡(
	`°rcmp
(
¨gv
[
i
],"-progressive") == 0) {

1125 
gpu_u«i_c⁄fig_ext
.
¥og_ûa˚
 = 1;

1132 #i‚de‡
SPU_NULL


1135 #ifde‡
SPU_PCSXREARMED


1137 i‡(
	`°rcmp
(
¨gv
[
i
],"-silent") == 0) {

1138 
•u_c⁄fig
.
iDißbÀd
 = 1;

1141 i‡(
	`°rcmp
(
¨gv
[
i
],"-reverb") == 0) {

1142 
•u_c⁄fig
.
iU£Revîb
 = 1;

1145 i‡(
	`°rcmp
(
¨gv
[
i
],"-xapitch") == 0) {

1146 
•u_c⁄fig
.
iXAPôch
 = 1;

1154 i‡(
	`°rcmp
(
¨gv
[
i
],"-threaded_spu") == 0) {

1155 
•u_c⁄fig
.
iU£Thªad
 = 1;

1163 i‡(
	`°rcmp
(
¨gv
[
i
],"-nofixedupdates") == 0) {

1164 
•u_c⁄fig
.
iU£FixedUpd©es
 = 0;

1168 i‡(
	`°rcmp
(
¨gv
[
i
],"-interpolation") == 0) {

1169 
vÆ
 = -1;

1170 i‡(++
i
 < 
¨gc
) {

1171 i‡(
	`°rcmp
(
¨gv
[
i
],"n⁄e"Ë=0Ë
vÆ
=0;

1172 i‡(
	`°rcmp
(
¨gv
[
i
],"sim∂e"Ë=0Ë
vÆ
=1;

1173 i‡(
	`°rcmp
(
¨gv
[
i
],"gaussün"Ë=0Ë
vÆ
=2;

1174 i‡(
	`°rcmp
(
¨gv
[
i
],"cubic"Ë=0Ë
vÆ
=3;

1176 
	`¥ötf
("ERROR: missing value for -interpolation\n");

1179 i‡(
vÆ
 == -1) {

1180 
	`¥ötf
("ERROR: -interpolation value must be one of:Çone,simple,gaussian,cubic\n");

1181 
∑øm_∑r£_îr‹
 = 
åue
; ;

1184 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 = 
vÆ
;

1189 i‡(
	`°rcmp
(
¨gv
[
i
],"-volume") == 0) {

1190 
vÆ
 = -1;

1191 i‡(++
i
 < 
¨gc
)

1192 
vÆ
 = 
	`©oi
(
¨gv
[
i
]);

1194 
	`¥ötf
("ERROR: missing value for -volume\n");

1196 i‡(
vÆ
 < 0 || val > 1024) {

1197 
	`¥ötf
("ERROR: -volume value must be between 0-1024. Value of 0 will mute sound\n"

1200 
∑øm_∑r£_îr‹
 = 
åue
; ;

1203 
•u_c⁄fig
.
iVﬁume
 = 
vÆ
;

1213 i‡(
	`°rcmp
(
¨gv
[
i
],"-notempo") == 0) {

1214 
•u_c⁄fig
.
iTempo
 = 0;

1234 i‡(
∑øm_∑r£_îr‹
) {

1235 
	`¥ötf
("FailedÅoÖarse command-lineÖarameters,Éxiting.\n");

1236 
	`exô
(1);

1240 
	`SDL_Inô
(
SDL_INIT_VIDEO
 | 
SDL_INIT_JOYSTICK
 | 
SDL_INIT_NOPARACHUTE
);

1242 
	`©exô
(
pcsx4Æl_exô
);

1244 #ifde‡
SDL_TRIPLEBUF


1245 
Êags
 = 
SDL_HWSURFACE
 | 
SDL_TRIPLEBUF
;

1247 
Êags
 = 
SDL_HWSURFACE
 | 
SDL_DOUBLEBUF
;

1250 
s¸ìn
 = 
	`SDL_SëVideoMode
(320, 480, 16, 
Êags
);

1251 i‡(!
s¸ìn
) {

1252 
	`puts
("NO Set VideoMode 320x480x16");

1253 
	`exô
(0);

1256 i‡(
	`SDL_MUSTLOCK
(
s¸ìn
))

1257 
	`SDL_LockSurÁ˚
(
s¸ìn
);

1259 
	`SDL_WM_SëC≠ti⁄
("pcsx4all - SDL Version", "pcsx4all");

1261 
SCREEN
 = (
Uöt16
 *)
s¸ìn
->
pixñs
;

1263 i‡(
¨gc
 < 2 || 
cdrfûíame
[0] == '\0') {

1265 
emu_ru¬ög
 = 
Ál£
;

1266 i‡(!
	`Sñe˘Game
()) {

1267 
	`¥ötf
("ERROR: missing filename for -iso\n");

1268 
	`exô
(1);

1272 i‡(
	`psxInô
() == -1) {

1273 
	`¥ötf
("PSXÉmulator couldn't be initialized.\n");

1274 
	`exô
(1);

1277 i‡(
	`LﬂdPlugös
() == -1) {

1278 
	`¥ötf
("FailedÜoadingÖlugins.\n");

1279 
	`exô
(1);

1282 
pcsx4Æl_öôãd
 = 
åue
;

1283 
emu_ru¬ög
 = 
åue
;

1286 
	`∂_öô
();

1288 
	`psxRe£t
();

1290 i‡(
cdrfûíame
[0] != '\0') {

1291 i‡(
	`CheckCdrom
() == -1) {

1292 
	`¥ötf
("Failed checking ISO image.\n");

1293 
	`SëIsoFûe
(
NULL
);

1295 
	`¥ötf
("Ru¬ög ISO image: %s.\n", 
cdrfûíame
);

1296 i‡(
	`LﬂdCdrom
() == -1) {

1297 
	`¥ötf
("FailedÜoading ISO image.\n");

1298 
	`SëIsoFûe
(
NULL
);

1303 i‡(
fûíame
[0] != '\0') {

1304 i‡(
	`Lﬂd
(
fûíame
) == -1) {

1305 
	`¥ötf
("FailedÜoadingÉxecutable.\n");

1306 
fûíame
[0]='\0';

1310 
boﬁ
 
u£_˛ù_368
;

1311 
u£_˛ù_368
 = 
gpu_u«i_c⁄fig_ext
.
˛ù_368
;

1312 i‡(
	`°∫cmp
(
CdromId
, "SLPS02124", 9) == 0)

1314 
u£_˛ù_368
 = 
åue
;

1316 
	`joy_öô
();

1318 i‡(
fûíame
[0] != '\0') {

1319 
	`¥ötf
("Ru¬ögÉxecuèbÀ: %s.\n",
fûíame
);

1322 i‡((
cdrfûíame
[0] ='\0'Ë&& (
fûíame
[0] ='\0'Ë&& (
C⁄fig
.
HLE
 == 0)) {

1323 
	`¥ötf
("Running BIOS.\n");

1326 i‡((
cdrfûíame
[0] !'\0'Ë|| (
fûíame
[0] !'\0'Ë|| (
C⁄fig
.
HLE
 == 0)) {

1327 
psxCpu
->
	`Execuã
();

1331 
	}
}

1333 
	$gë_ticks
()

1335 #ifde‡
TIME_IN_MSEC


1336  
	`SDL_GëTicks
();

1338  (((()
	`˛ock
())*1000000ULL)/(()
CLOCKS_PER_SEC
));

1340 
	}
}

1342 
	$waô_ticks
(
s
)

1344 #ifde‡
TIME_IN_MSEC


1345 
	`SDL_Dñay
(
s
);

1347 
	`SDL_Dñay
(
s
/1000);

1349 
	}
}

1351 
	$p‹t_¥ötf
(
x
, 
y
, c⁄° *
ãxt
)

1353 c⁄° 
f⁄td©a8x8
[] =

1421 
y
*= 2;

1423 *
s¸ìn
 = (
dma_±r
 + 
x
 + 
y
 * 320);

1424 
i
 = 0; i < 
	`°æí
(
ãxt
); i++) {

1425 
l
 = 0;Ü < 8;Ü++) {

1426 
s¸ìn
[
l
*320*2+0]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x80)?0xffff:0x0000;

1427 
s¸ìn
[
l
*320*2+1]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x40)?0xffff:0x0000;

1428 
s¸ìn
[
l
*320*2+2]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x20)?0xffff:0x0000;

1429 
s¸ìn
[
l
*320*2+3]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x10)?0xffff:0x0000;

1430 
s¸ìn
[
l
*320*2+4]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x08)?0xffff:0x0000;

1431 
s¸ìn
[
l
*320*2+5]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x04)?0xffff:0x0000;

1432 
s¸ìn
[
l
*320*2+6]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x02)?0xffff:0x0000;

1433 
s¸ìn
[
l
*320*2+7]=(
f⁄td©a8x8
[((
ãxt
[
i
])*8)+l]&0x01)?0xffff:0x0000;

1435 
s¸ìn
 += 8;

1437 
	}
}

	@src/port/sdl/port.h

1 #i‚de‡
__PSXPORT_H__


2 
	#__PSXPORT_H__


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<°d¨g.h
>

7 
	~<°döt.h
>

8 
	~<°dlib.h
>

9 
	~<m©h.h
>

10 
	~<time.h
>

11 
	~<˘y≥.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<as£π.h
>

18 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__CYGWIN__
)

20 
ölöe
 
	$fsync
(
f
Ë{  0; 
	}
}

23 
	#CONFIG_VERSION
 0

	)

25 
gë_ticks
();

26 
waô_ticks
(
s
);

27 
∑d_upd©e
();

28 
∑d_ªad
(
num
);

30 
dma_Êù
();

31 
video_Êù
();

32 #ifde‡
GPU_DFXVIDEO


33 
video_£t
(* 
pVideo
,
width
,
height
);

35 
video_˛ór
();

36 
p‹t_¥ötf
(
x
, 
y
, c⁄° *
ãxt
);

38 *
SCREEN
;

40 
°©e_lﬂd
(
¶Ÿ
);

41 
°©e_ßve
(
¶Ÿ
);

43 
Sñe˘Game
();

44 
GameMíu
();

	@src/ppf.cpp

22 
	~"psxcomm⁄.h
"

23 
	~"µf.h
"

24 
	~"cdrom.h
"

26 
	sègPPF_DATA
 {

27 
s32
 
	maddr
;

28 
s32
 
	mpos
;

29 
s32
 
	m™z
;

30 
ègPPF_DATA
 *
	mpNext
;

31 } 
	tPPF_DATA
;

33 
	sègPPF_CACHE
 {

34 
s32
 
	maddr
;

35 
ègPPF_DATA
 *
	mpNext
;

36 } 
	tPPF_CACHE
;

38 
PPF_CACHE
 *
	gµfCache
 = 
NULL
;

39 
PPF_DATA
 *
	gµfHód
 = 
NULL
, *
	gµfLa°
 = NULL;

40 
	giPPFNum
 = 0;

43 
	$FûlPPFCache
() {

44 
PPF_DATA
 *
p
;

45 
PPF_CACHE
 *
pc
;

46 
s32
 
œ°addr
;

48 
p
 = 
µfHód
;

49 
œ°addr
 = -1;

50 
iPPFNum
 = 0;

52 
p
 !
NULL
) {

53 i‡(
p
->
addr
 !
œ°addr
Ë
iPPFNum
++;

54 
œ°addr
 = 
p
->
addr
;

55 
p
 =Ö->
pNext
;

58 i‡(
iPPFNum
 <= 0) ;

60 
pc
 = 
µfCache
 = (
PPF_CACHE
 *)
	`mÆloc
(
iPPFNum
 * (PPF_CACHE));

62 
iPPFNum
--;

63 
p
 = 
µfHód
;

64 
œ°addr
 = -1;

66 
p
 !
NULL
) {

67 i‡(
p
->
addr
 !
œ°addr
) {

68 
pc
->
addr
 = 
p
->addr;

69 
pc
->
pNext
 = 
p
;

70 
pc
++;

72 
œ°addr
 = 
p
->
addr
;

73 
p
 =Ö->
pNext
;

75 
	}
}

77 
	$FªePPFCache
() {

78 
PPF_DATA
 *
p
 = 
µfHód
;

79 *
≤
;

81 
p
 !
NULL
) {

82 
≤
 = 
p
->
pNext
;

83 
	`‰ì
(
p
);

84 
p
 = (
PPF_DATA
 *)
≤
;

86 
µfHód
 = 
NULL
;

87 
µfLa°
 = 
NULL
;

89 i‡(
µfCache
 !
NULL
Ë
	`‰ì
(ppfCache);

90 
µfCache
 = 
NULL
;

91 
	}
}

93 
	$CheckPPFCache
(*
pB
, 
m
, 
s
, 
f
) {

94 
PPF_CACHE
 *
pc°¨t
, *
p˚nd
, *
p˝os
;

95 
addr
 = 
	`MSF2SECT
(
	`btoi
(
m
), btoi(
s
), btoi(
f
)), 
pos
, 
™z
, 
°¨t
;

97 i‡(
µfCache
 =
NULL
) ;

99 
pc°¨t
 = 
µfCache
;

100 i‡(
addr
 < 
pc°¨t
->addr) ;

101 
p˚nd
 = 
µfCache
 + 
iPPFNum
;

102 i‡(
addr
 > 
p˚nd
->addr) ;

105 i‡(
addr
 =
p˚nd
->addrË{ 
p˝os
 =Öcend; ; }

107 
p˝os
 = 
pc°¨t
 + (
p˚nd
 -Öcstart) / 2;

108 i‡(
p˝os
 =
pc°¨t
) ;

109 i‡(
addr
 < 
p˝os
->addr) {

110 
p˚nd
 = 
p˝os
;

113 i‡(
addr
 > 
p˝os
->addr) {

114 
pc°¨t
 = 
p˝os
;

120 i‡(
addr
 =
p˝os
->addr) {

121 
PPF_DATA
 *
p
 = 
p˝os
->
pNext
;

122 
p
 !
NULL
 &&Ö->
addr
 ==áddr) {

123 
pos
 = 
p
->po†- (
CD_FRAMESIZE_RAW
 - 
DATA_SIZE
);

124 
™z
 = 
p
->anz;

125 i‡(
pos
 < 0Ë{ 
°¨t
 = -pos;Öo†0; 
™z
 -= start; }

126 
°¨t
 = 0;

127 
	`mem˝y
(
pB
 + 
pos
, (*)(
p
 + 1Ë+ 
°¨t
, 
™z
);

128 
p
 =Ö->
pNext
;

131 
	}
}

133 
	$AddToPPF
(
s32
 
œdr
, s32 
pos
, s32 
™z
, *
µfmem
) {

134 i‡(
µfHód
 =
NULL
) {

135 
µfHód
 = (
PPF_DATA
 *)
	`mÆloc
((PPF_DATAË+ 
™z
);

136 
µfHód
->
addr
 = 
œdr
;

137 
µfHód
->
pNext
 = 
NULL
;

138 
µfHód
->
pos
 =Öos;

139 
µfHód
->
™z
 =ánz;

140 
	`mem˝y
(
µfHód
 + 1, 
µfmem
, 
™z
);

141 
iPPFNum
 = 1;

142 
µfLa°
 = 
µfHód
;

144 
PPF_DATA
 *
p
 = 
µfHód
;

145 
PPF_DATA
 *
∂a°
 = 
NULL
;

146 
PPF_DATA
 *
∑dd
;

148 i‡(
œdr
 > 
µfLa°
->
addr
 || (œd∏=µfLa°->add∏&& 
pos
 >ÖpfLast->pos)) {

149 
p
 = 
NULL
;

150 
∂a°
 = 
µfLa°
;

152 
p
 !
NULL
) {

153 i‡(
œdr
 < 
p
->
addr
) ;

154 i‡(
œdr
 =
p
->
addr
) {

155 
p
 && 
œdr
 =p->
addr
 && 
pos
 >Ö->pos) {

156 
∂a°
 = 
p
;

157 
p
 =Ö->
pNext
;

161 
∂a°
 = 
p
;

162 
p
 =Ö->
pNext
;

166 
∑dd
 = (
PPF_DATA
 *)
	`mÆloc
((PPF_DATAË+ 
™z
);

167 
∑dd
->
addr
 = 
œdr
;

168 
∑dd
->
pNext
 = 
p
;

169 
∑dd
->
pos
 =Öos;

170 
∑dd
->
™z
 =ánz;

171 
	`mem˝y
(
∑dd
 + 1, 
µfmem
, 
™z
);

172 
iPPFNum
++;

173 i‡(
∂a°
 =
NULL
Ë
µfHód
 = 
∑dd
;

174 
∂a°
->
pNext
 = 
∑dd
;

176 i‡(
∑dd
->
pNext
 =
NULL
Ë
µfLa°
 =Öadd;

178 
	}
}

180 
	$BuûdPPFCache
() {

181 
FILE
 *
µffûe
;

182 
buf„r
[12];

183 
mëhod
, 
undo
 = 0, 
blockcheck
 = 0;

184 
dizÀn
, 
dizyn
;

185 
µfmem
[512];

186 
szPPF
[
MAXPATHLEN
];

187 
cou¡
, 
£ekpos
, 
pos
;

188 
u32
 
™z
;

189 
s32
 
œdr
, 
off
, 
™x
;

191 
	`FªePPFCache
();

193 i‡(
CdromId
[0] == '\0') ;

196 
buf„r
[0] = 
	`touµî
(
CdromId
[0]);

197 
buf„r
[1] = 
	`touµî
(
CdromId
[1]);

198 
buf„r
[2] = 
	`touµî
(
CdromId
[2]);

199 
buf„r
[3] = 
	`touµî
(
CdromId
[3]);

200 
buf„r
[4] = '_';

201 
buf„r
[5] = 
CdromId
[4];

202 
buf„r
[6] = 
CdromId
[5];

203 
buf„r
[7] = 
CdromId
[6];

204 
buf„r
[8] = '.';

205 
buf„r
[9] = 
CdromId
[7];

206 
buf„r
[10] = 
CdromId
[8];

207 
buf„r
[11] = '\0';

209 
	`•rötf
(
szPPF
, "%s/%s", 
C⁄fig
.
P©chesDú
, 
buf„r
);

211 
	`¥ötf
("Lookög f‹Ö©ch %s\n", 
szPPF
);

213 
µffûe
 = 
	`f›í
(
szPPF
, "rb");

214 i‡(
µffûe
 =
NULL
) ;

216 
	`mem£t
(
buf„r
, 0, 5);

217 i‡(
	`‰ód
(
buf„r
, 3, 1, 
µffûe
) != 1)

218 
îr‹
;

220 i‡(
	`°rcmp
(
buf„r
, "PPF") != 0) {

221 
	`¥ötf
("Invalid PPFÖatch file (header mismatch).\n");

222 
îr‹
;

225 i‡(
	`f£ek
(
µffûe
, 5, 
SEEK_SET
) == -1)

226 
îr‹
;

228 
mëhod
 = 
	`fgëc
(
µffûe
);

230 
mëhod
) {

232 
	`f£ek
(
µffûe
, 0, 
SEEK_END
);

233 
cou¡
 = 
	`·ñl
(
µffûe
);

234 
cou¡
 -= 56;

235 
£ekpos
 = 56;

239 
	`mem£t
(
buf„r
, 0, 5);

240 i‡(
	`f£ek
(
µffûe
, -8, 
SEEK_END
) == -1 ||

241 
	`‰ód
(
buf„r
, 4, 1, 
µffûe
) != 1)

242 
îr‹
;

244 i‡(
	`°rcmp
(".DIZ", 
buf„r
) != 0) {

245 
dizyn
 = 0;

247 i‡(
	`‰ód
(&
dizÀn
, 4, 1, 
µffûe
) != 1)

248 
îr‹
;

250 
dizÀn
 = 
	`SWAP32
(dizlen);

251 
dizyn
 = 1;

254 
	`f£ek
(
µffûe
, 0, 
SEEK_END
);

255 
cou¡
 = 
	`·ñl
(
µffûe
);

257 i‡(
dizyn
 == 0) {

258 
cou¡
 -= 1084;

259 
£ekpos
 = 1084;

261 
cou¡
 -= 1084;

262 
cou¡
 -= 38;

263 
cou¡
 -
dizÀn
;

264 
£ekpos
 = 1084;

269 i‡(
	`f£ek
(
µffûe
, 57, 
SEEK_SET
) == -1)

270 
îr‹
;

272 i‡((
blockcheck
 = 
	`fgëc
(
µffûe
)Ë=
EOF
 ||

273 (
undo
 = 
	`fgëc
(
µffûe
)Ë=
EOF
)

274 
îr‹
;

276 
	`mem£t
(
buf„r
, 0, 5);

277 i‡(
	`f£ek
(
µffûe
, -6, 
SEEK_END
) == -1 ||

278 
	`‰ód
(
buf„r
, 4, 1, 
µffûe
) != 1)

279 
îr‹
;

281 
dizÀn
 = 0;

283 i‡(
	`°rcmp
(".DIZ", 
buf„r
) == 0) {

284 i‡(
	`f£ek
(
µffûe
, -2, 
SEEK_END
) == -1 ||

285 
	`‰ód
(&
dizÀn
, 2, 1, 
µffûe
) != 1)

286 
îr‹
;

287 
dizÀn
 = 
	`SWAP32
(dizlen);

288 
dizÀn
 += 36;

291 
	`f£ek
(
µffûe
, 0, 
SEEK_END
);

292 
cou¡
 = 
	`·ñl
(
µffûe
);

293 
cou¡
 -
dizÀn
;

295 i‡(
blockcheck
) {

296 
£ekpos
 = 1084;

297 
cou¡
 -= 1084;

299 
£ekpos
 = 60;

300 
cou¡
 -= 60;

304 
EOF
:

305 
îr‹
;

308 
	`¥ötf
("Unsuµ‹ãd PPF vîsi⁄ (%d).\n", 
mëhod
 + 1);

309 
îr‹
;

314 i‡(
	`f£ek
(
µffûe
, 
£ekpos
, 
SEEK_SET
) == -1 ||

315 
	`‰ód
(&
pos
, 4, 1, 
µffûe
) != 1)

316 
îr‹
;

318 
pos
 = 
	`SWAP32
(pos);

320 i‡(
mëhod
 == 2)

321 i‡(
	`‰ód
(
buf„r
, 4, 1, 
µffûe
) != 1)

322 
îr‹
;

324 i‡((
™z
 = 
	`fgëc
(
µffûe
)Ë=
EOF
)

325 
îr‹
;

327 i‡(
	`‰ód
(
µfmem
, 
™z
, 1, 
µffûe
) != 1)

328 
îr‹
;

330 
œdr
 = 
pos
 / 
CD_FRAMESIZE_RAW
;

331 
off
 = 
pos
 % 
CD_FRAMESIZE_RAW
;

333 i‡(
off
 + 
™z
 > 
CD_FRAMESIZE_RAW
) {

334 
™x
 = 
off
 + 
™z
 - 
CD_FRAMESIZE_RAW
;

335 
™z
 -()
™x
;

336 
	`AddToPPF
(
œdr
 + 1, 0, 
™x
, &
µfmem
[
™z
]);

339 
	`AddToPPF
(
œdr
, 
off
, 
™z
, 
µfmem
);

341 i‡(
mëhod
 == 2) {

342 i‡(
undo
Ë
™z
 +=ánz;

343 
™z
 += 4;

346 
£ekpos
 = sìkpo†+ 5 + 
™z
;

347 
cou¡
 = cou¡ - 5 - 
™z
;

348 } 
cou¡
 != 0);

350 
	`f˛o£
(
µffûe
);

352 
	`FûlPPFCache
();

354 
	`¥ötf
("Lﬂded PPF %d.0Ö©ch: %s.\n", 
mëhod
 + 1, 
szPPF
);

357 
îr‹
:

358 
	`f˛o£
(
µffûe
);

359 
	`¥ötf
("Eº‹ÑódögÖ©ch fûê%†ö BuûdPPFCache()!\n", 
szPPF
);

361 
	}
}

364 *
	gsbi_£˘‹s
;

366 
	$LﬂdSBI
(c⁄° *
‚ame
, 
£˘‹_cou¡
) {

367 
buf„r
[16];

368 
FILE
 *
sbih™dÀ
;

369 
u8
 
sbôime
[3], 
t
;

370 
s
;

372 
sbih™dÀ
 = 
	`f›í
(
‚ame
, "rb");

373 i‡(
sbih™dÀ
 =
NULL
)

376 
sbi_£˘‹s
 = (*)
	`ˇŒoc
(1, 
£˘‹_cou¡
 / 8);

377 i‡(
sbi_£˘‹s
 =
NULL
)

378 
îr‹
;

381 i‡(
	`‰ód
(
buf„r
, 1, 4, 
sbih™dÀ
) != 4)

382 
îr‹
;

384 i‡(
	`‰ód
(
sbôime
, 1, 3, 
sbih™dÀ
) != 3)

386 i‡(
	`‰ód
(&
t
, 1, 1, 
sbih™dÀ
) != 1)

387 
îr‹
;

388 
t
) {

391 
s
 = 10;

395 
s
 = 3;

398 i‡(
	`f£ek
(
sbih™dÀ
, 
s
, 
SEEK_CUR
) == -1)

399 
îr‹
;

401 
s
 = 
	`MSF2SECT
(
	`btoi
(
sbôime
[0]), btoi(sbitime[1]), btoi(sbitime[2]));

402 i‡(
s
 < 
£˘‹_cou¡
)

403 
sbi_£˘‹s
[
s
 >> 3] |= 1 << (s&7);

405 
	`¥ötf
("SBI se˘‹ %d >%d?\n", 
s
, 
£˘‹_cou¡
);

408 
	`f˛o£
(
sbih™dÀ
);

411 
îr‹
:

412 
	`f˛o£
(
sbih™dÀ
);

413 
	`¥ötf
("Eº‹Ñódög fûê%†ö LﬂdSBI()!\n", 
‚ame
);

415 
	}
}

417 
	$U∆ﬂdSBI
() {

418 i‡(
sbi_£˘‹s
) {

419 
	`‰ì
(
sbi_£˘‹s
);

420 
sbi_£˘‹s
 = 
NULL
;

422 
	}
}

	@src/ppf.h

19 #i‚de‡
__PPF_H__


20 
	#__PPF_H__


	)

22 
BuûdPPFCache
();

23 
FªePPFCache
();

24 
CheckPPFCache
(*
pB
, 
m
, 
s
, 
f
);

26 
LﬂdSBI
(c⁄° *
‚ame
, 
£˘‹_cou¡
);

27 
U∆ﬂdSBI
();

29 *
sbi_£˘‹s
;

31 
	~"cdrom.h
"

33 
ölöe
 
	$CheckSBI
(c⁄° 
u8
 *
t
)

35 
s
;

36 i‡(
sbi_£˘‹s
 =
NULL
)

39 
s
 = 
	`MSF2SECT
(
t
[0],Å[1],Å[2]);

40  (
sbi_£˘‹s
[
s
 >> 3] >> (s & 7)) & 1;

41 
	}
}

	@src/psemu_plugin_defs.h

1 #i‚de‡
_PSEMU_PLUGIN_DEFS_H


2 
	#_PSEMU_PLUGIN_DEFS_H


	)

5 
	#_PPDK_HEADER_VERSION
 3

	)

7 
	#PLUGIN_VERSION
 1

	)

10 
	#PSE_ERR_SUCCESS
 0

11 
	#PSE_ERR_FATAL
 -1

12 

	)

17 
	#PSE_INIT_ERR_SUCCESS
 0

18 
	#PSE_INIT_ERR_NOTCONFIGURED
 -2

19 
	#PSE_INIT_ERR_NOHARDWARE
 -3

20 

	)

26 
	#PSE_GPU_ERR_SUCCESS
 0

	)

30 
	#PSE_GPU_ERR
 -20

	)

34 
	#PSE_GPU_ERR_NOTCONFIGURED
 
PSE_GPU_ERR
 - 1

	)

36 
	#PSE_GPU_ERR_INIT
 
PSE_GPU_ERR
 - 2

	)

40 
	#PSE_GPU_WARN
 20

	)

46 
uöt32_t
 
	mÊags
;

47 
uöt32_t
 
	m°©us
;

48 * 
	mwödow
;

49 
	mª£rved
[100];

50 } 
	tgpuQuîyS
;

54 
	#PSE_GPU_FLAGS_FULLSCREEN
 1

55 
	#PSE_GPU_FLAGS_WINDOWED
 2

56 

	)

58 
	#PSE_GPU_STATUS_WINDOWWRONG
 1

59 

	)

68 
	#PSE_CDR_ERR_SUCCESS
 0

	)

71 
	#PSE_CDR_ERR_FAILURE
 -1

	)

74 
	#PSE_CDR_ERR
 -40

	)

76 
	#PSE_CDR_ERR_NOTCONFIGURED
 
PSE_CDR_ERR
 - 0

	)

78 
	#PSE_CDR_ERR_NOREAD
 
PSE_CDR_ERR
 - 1

	)

81 
	#PSE_CDR_WARN
 40

	)

84 
	#PSE_CDR_WARN_LAMECD
 
PSE_CDR_WARN
 + 0

	)

94 
	#PSE_SPU_ERR_SUCCESS
 0

	)

98 
	#PSE_SPU_ERR
 -60

	)

101 
	#PSE_SPU_ERR_NOTCONFIGURED
 
PSE_SPU_ERR
 - 1

	)

103 
	#PSE_SPU_ERR_INIT
 
PSE_SPU_ERR
 - 2

	)

108 
	#PSE_SPU_WARN
 60

	)

	@src/psxbios.cpp

25 
	~"psxbios.h
"

26 
	~"psxhw.h
"

27 
	~"gpu.h
"

28 
	~<zlib.h
>

33 #ifde‡
PSXBIOS_LOG


35 *
	gbiosA0n
[256] = {

96 *
	gbiosB0n
[256] = {

129 *
	gbiosC0n
[256] = {

145 
	#©
 (
psxRegs
.
GPR
.
n
.
©
)

	)

146 
	#v0
 (
psxRegs
.
GPR
.
n
.
v0
)

	)

147 
	#v1
 (
psxRegs
.
GPR
.
n
.
v1
)

	)

148 
	#a0
 (
psxRegs
.
GPR
.
n
.
a0
)

	)

149 
	#a1
 (
psxRegs
.
GPR
.
n
.
a1
)

	)

150 
	#a2
 (
psxRegs
.
GPR
.
n
.
a2
)

	)

151 
	#a3
 (
psxRegs
.
GPR
.
n
.
a3
)

	)

152 
	#t0
 (
psxRegs
.
GPR
.
n
.
t0
)

	)

153 
	#t1
 (
psxRegs
.
GPR
.
n
.
t1
)

	)

154 
	#t2
 (
psxRegs
.
GPR
.
n
.
t2
)

	)

155 
	#t3
 (
psxRegs
.
GPR
.
n
.
t3
)

	)

156 
	#t4
 (
psxRegs
.
GPR
.
n
.
t4
)

	)

157 
	#t5
 (
psxRegs
.
GPR
.
n
.
t5
)

	)

158 
	#t6
 (
psxRegs
.
GPR
.
n
.
t6
)

	)

159 
	#t7
 (
psxRegs
.
GPR
.
n
.
t7
)

	)

160 
	#t8
 (
psxRegs
.
GPR
.
n
.
t8
)

	)

161 
	#t9
 (
psxRegs
.
GPR
.
n
.
t9
)

	)

162 
	#s0
 (
psxRegs
.
GPR
.
n
.
s0
)

	)

163 
	#s1
 (
psxRegs
.
GPR
.
n
.
s1
)

	)

164 
	#s2
 (
psxRegs
.
GPR
.
n
.
s2
)

	)

165 
	#s3
 (
psxRegs
.
GPR
.
n
.
s3
)

	)

166 
	#s4
 (
psxRegs
.
GPR
.
n
.
s4
)

	)

167 
	#s5
 (
psxRegs
.
GPR
.
n
.
s5
)

	)

168 
	#s6
 (
psxRegs
.
GPR
.
n
.
s6
)

	)

169 
	#s7
 (
psxRegs
.
GPR
.
n
.
s7
)

	)

170 
	#k0
 (
psxRegs
.
GPR
.
n
.
k0
)

	)

171 
	#k1
 (
psxRegs
.
GPR
.
n
.
k1
)

	)

172 
	#gp
 (
psxRegs
.
GPR
.
n
.
gp
)

	)

173 
	#•
 (
psxRegs
.
GPR
.
n
.
•
)

	)

174 
	#Â
 (
psxRegs
.
GPR
.
n
.
s8
)

	)

175 
	#ø
 (
psxRegs
.
GPR
.
n
.
ø
)

	)

176 
	#pc0
 (
psxRegs
.
pc
)

	)

178 
	#Ra0
 ((*)
	`PSXM
(
a0
))

	)

179 
	#Ra1
 ((*)
	`PSXM
(
a1
))

	)

180 
	#Ra2
 ((*)
	`PSXM
(
a2
))

	)

181 
	#Ra3
 ((*)
	`PSXM
(
a3
))

	)

182 
	#Rv0
 ((*)
	`PSXM
(
v0
))

	)

183 
	#R•
 ((*)
	`PSXM
(
•
))

	)

187 
u32
 
	mdesc
;

188 
s32
 
	m°©us
;

189 
s32
 
	mmode
;

190 
u32
 
	mfh™dÀr
;

191 } 
	tEvCB
[32];

193 
	#EvStUNUSED
 0x0000

	)

194 
	#EvStWAIT
 0x1000

	)

195 
	#EvStACTIVE
 0x2000

	)

196 
	#EvStALREADY
 0x4000

	)

198 
	#EvMdINTR
 0x1000

	)

199 
	#EvMdNOINTR
 0x2000

	)

202 
s32
 
	m°©us
;

203 
s32
 
	mmode
;

204 
u32
 
	mªg
[32];

205 
u32
 
	mfunc
;

206 } 
	tTCB
;

209 
u32
 
	m_pc0
;

210 
u32
 
	mgp0
;

211 
u32
 
	mt_addr
;

212 
u32
 
	mt_size
;

213 
u32
 
	md_addr
;

214 
u32
 
	md_size
;

215 
u32
 
	mb_addr
;

216 
u32
 
	mb_size
;

217 
u32
 
	mS_addr
;

218 
u32
 
	ms_size
;

219 
u32
 
	m_•
,
	m_Â
,
	m_gp
,
	mªt
,
	mba£
;

220 } 
	tEXEC
;

222 
	sDIRENTRY
 {

223 
	m«me
[20];

224 
s32
 
	m©å
;

225 
s32
 
	msize
;

226 
u32
 
	m√xt
;

227 
s32
 
	mhód
;

228 
	msy°em
[4];

232 
	m«me
[32];

233 
u32
 
	mmode
;

234 
u32
 
	moff£t
;

235 
u32
 
	msize
;

236 
u32
 
	mmcfûe
;

237 } 
	tFûeDesc
;

239 
u32
 *
	gjmp_öt
 = 
NULL
;

240 *
	g∑d_buf
 = 
NULL
;

241 *
	g∑d_buf1
 = 
NULL
, *
	g∑d_buf2
 = NULL;

242 
	g∑d_buf1Àn
, 
	g∑d_buf2Àn
;

243 
	g∑d_°›≥d
 = 0;

245 
u32
 
	gªgs
[35];

246 
EvCB
 *
	gEvít
;

247 
EvCB
 *
	gHwEV
;

248 
EvCB
 *
	gEvEV
;

249 
EvCB
 *
	gRcEV
;

250 
EvCB
 *
	gUeEV
;

251 
EvCB
 *
	gSwEV
;

252 
EvCB
 *
	gThEV
;

253 
u32
 *
	ghóp_addr
 = 
NULL
;

254 
u32
 *
	ghóp_íd
 = 
NULL
;

255 
u32
 
	gSysI¡RP
[8];

256 
	gC¨dSèã
 = -1;

257 
TCB
 
	gThªad
[8];

258 
	gCurThªad
 = 0;

259 
FûeDesc
 
	gFDesc
[32];

260 
u32
 
	gˇrd_a˘ive_ch™
;

262 
INLINE
 
	$so·CÆl
(
u32
 
pc
) {

263 
pc0
 = 
pc
;

264 
ø
 = 0x80001000;

266 
pc0
 !0x80001000Ë
psxCpu
->
	`ExecuãBlock
(0x80001000);

267 
	}
}

269 
INLINE
 
	$so·CÆl2
(
u32
 
pc
) {

270 
u32
 
§a
 = 
ø
;

271 
pc0
 = 
pc
;

272 
ø
 = 0x80001000;

274 
pc0
 !0x80001000Ë
psxCpu
->
	`ExecuãBlock
(0x80001000);

275 
ø
 = 
§a
;

276 
	}
}

278 
INLINE
 
	$DñivîEvít
(
u32
 
ev
, u32 
•ec
) {

279 i‡(
Evít
[
ev
][
•ec
].
°©us
 !
EvStACTIVE
) ;

282 i‡(
Evít
[
ev
][
•ec
].
mode
 =
EvMdINTR
) {

283 
	`so·CÆl2
(
Evít
[
ev
][
•ec
].
fh™dÀr
);

284 } 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStALREADY
;

285 
	}
}

287 
	göãºu±_r26
=0x8004E8B0;

289 
INLINE
 
	$SaveRegs
() {

290 
	`mem˝y
(
ªgs
, 
psxRegs
.
GPR
.
r
, 32*4);

291 
ªgs
[32] = 
psxRegs
.
GPR
.
n
.
lo
;

292 
ªgs
[33] = 
psxRegs
.
GPR
.
n
.
hi
;

293 
ªgs
[34] = 
psxRegs
.
pc
;

294 
	}
}

296 
INLINE
 
	$LﬂdRegs
() {

297 
	`mem˝y
(
psxRegs
.
GPR
.
r
, 
ªgs
, 32*4);

298 
psxRegs
.
GPR
.
n
.
lo
 = 
ªgs
[32];

299 
psxRegs
.
GPR
.
n
.
hi
 = 
ªgs
[33];

300 
	}
}

308 
	$psxBios_abs
() {

309 i‡((
s32
)
a0
 < 0Ë
v0
 = -(s32)a0;

310 
v0
 = 
a0
;

311 
pc0
 = 
ø
;

312 
	}
}

314 
	$psxBios_œbs
() {

315 
	`psxBios_abs
();

316 
	}
}

318 
	$psxBios_©oi
() {

319 
s32
 
n
 = 0, 
f
 = 0;

320 *
p
 = (*)
Ra0
;

322 ;;
p
++) {

323 *
p
) {

325 '-': 
f
++;

326 '+': 
p
++;

331 *
p
 >= '0' && *p <= '9') {

332 
n
 =Ç * 10 + *
p
++ - '0';

335 
v0
 = (
f
 ? -
n
 :Ç);

336 
pc0
 = 
ø
;

337 
	}
}

339 
	$psxBios_©ﬁ
() {

340 
	`psxBios_©oi
();

341 
	}
}

343 
	$psxBios_£tjmp
() {

344 
u32
 *
jmp_buf
(u32*)
Ra0
;

345 
i
;

347 #ifde‡
PSXBIOS_LOG


348 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x13]);

351 
jmp_buf
[0] = 
ø
;

352 
jmp_buf
[1] = 
•
;

353 
jmp_buf
[2] = 
Â
;

354 
i
=0; i<8; i++)

355 
jmp_buf
[3+
i
] = 
psxRegs
.
GPR
.
r
[16+i];

356 
jmp_buf
[11] = 
gp
;

358 
v0
 = 0; 
pc0
 = 
ø
;

359 
	}
}

361 
	$psxBios_l⁄gjmp
() {

362 
u32
 *
jmp_buf
(u32*)
Ra0
;

363 
i
;

365 #ifde‡
PSXBIOS_LOG


366 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x14]);

369 
ø
 = 
jmp_buf
[0];

370 
•
 = 
jmp_buf
[1];

371 
Â
 = 
jmp_buf
[2];

372 
i
=0; i<8; i++)

373 
psxRegs
.
GPR
.
r
[16+
i
] = 
jmp_buf
[3+i];

374 
gp
 = 
jmp_buf
[11];

376 
v0
 = 
a1
; 
pc0
 = 
ø
;

377 
	}
}

379 
	$psxBios_°rˇt
() {

380 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

382 #ifde‡
PSXBIOS_LOG


383 
	`PSXBIOS_LOG
("psxBios_%s: %s, %s\n", 
biosA0n
[0x15], 
Ra0
, 
Ra1
);

386 *
p1
++);

387 --
p1
;

388 (*
p1
++ = *
p2
++) != '\0');

390 
v0
 = 
a0
; 
pc0
 = 
ø
;

391 
	}
}

393 
	$psxBios_°∫ˇt
() {

394 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

395 
s32
 
n
 = 
a2
;

397 #ifde‡
PSXBIOS_LOG


398 
	`PSXBIOS_LOG
("psxBios_%s: %†(%x), %†(%x), %d\n", 
biosA0n
[0x16], 
Ra0
, 
a0
, 
Ra1
, 
a1
, 
a2
);

401 *
p1
++);

402 --
p1
;

403 (*
p1
++ = *
p2
++) != '\0') {

404 i‡(--
n
 < 0) {

405 *--
p1
 = '\0';

410 
v0
 = 
a0
; 
pc0
 = 
ø
;

411 
	}
}

413 
	$psxBios_°rcmp
() {

414 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

415 
s32
 
n
=0;

417 #ifde‡
PSXBIOS_LOG


418 
	`PSXBIOS_LOG
("psxBios_%s: %†(%x), %†(%x)\n", 
biosA0n
[0x17], 
Ra0
, 
a0
, 
Ra1
, 
a1
);

421 *
p1
 =*
p2
++) {

422 
n
++;

423 i‡(*
p1
++ == '\0') {

424 
v1
=
n
-1;

425 
a0
+=
n
;

426 
a1
+=
n
;

427 
v0
 = 0;

428 
pc0
 = 
ø
;

433 
v0
 = (*
p1
 - *--
p2
);

434 
v1
 = 
n
;

435 
a0
+=
n
;

436 
a1
+=
n
;

437 
pc0
 = 
ø
;

438 
	}
}

440 
	$psxBios_°∫cmp
() {

441 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

442 
s32
 
n
 = 
a2
;

444 #ifde‡
PSXBIOS_LOG


445 
	`PSXBIOS_LOG
("psxBios_%s: %†(%x), %†(%x), %d\n", 
biosA0n
[0x18], 
Ra0
, 
a0
, 
Ra1
, 
a1
, 
a2
);

448 --
n
 >0 && *
p1
 =*
p2
++) {

449 i‡(*
p1
++ == '\0') {

450 
v0
 = 0;

451 
pc0
 = 
ø
;

452 
v1
 = 
a2
 - (◊2-
n
) - 1);

453 
a0
 +(
a2
-
n
) - 1;

454 
a1
 +(
a2
-
n
) - 1;

455 
a2
 = 
n
;

460 
v0
 = (
n
 < 0 ? 0 : *
p1
 - *--
p2
);

461 
pc0
 = 
ø
;

462 
v1
 = 
a2
 - (◊2-
n
) - 1);

463 
a0
 +(
a2
-
n
) - 1;

464 
a1
 +(
a2
-
n
) - 1;

465 
a2
 = 
n
;

466 
	}
}

468 
	$psxBios_°r˝y
() {

469 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

470 (*
p1
++ = *
p2
++) != '\0');

472 
v0
 = 
a0
; 
pc0
 = 
ø
;

473 
	}
}

475 
	$psxBios_°∫˝y
() {

476 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

477 
s32
 
n
 = 
a2
, 
i
;

479 
i
 = 0; i < 
n
; i++) {

480 i‡((*
p1
++ = *
p2
++) == '\0') {

481 ++
i
 < 
n
) {

482 *
p1
++ = '\0';

484 
v0
 = 
a0
; 
pc0
 = 
ø
;

489 
v0
 = 
a0
; 
pc0
 = 
ø
;

490 
	}
}

492 
	$psxBios_°æí
() {

493 *
p
 = (*)
Ra0
;

494 
v0
 = 0;

495 *
p
++Ë
v0
++;

496 
pc0
 = 
ø
;

497 
	}
}

499 
	$psxBios_ödex
() {

500 *
p
 = (*)
Ra0
;

503 i‡(*
p
 =
a1
) {

504 
v0
 = 
a0
 + (
p
 - (*)
Ra0
);

505 
pc0
 = 
ø
;

508 } *
p
++ != '\0');

510 
v0
 = 0; 
pc0
 = 
ø
;

511 
	}
}

513 
	$psxBios_rödex
() {

514 *
p
 = (*)
Ra0
;

516 
v0
 = 0;

519 i‡(*
p
 =
a1
)

520 
v0
 = 
a0
 + (
p
 - (*)
Ra0
);

521 } *
p
++ != '\0');

523 
pc0
 = 
ø
;

524 
	}
}

526 
	$psxBios_°rchr
() {

527 
	`psxBios_ödex
();

528 
	}
}

530 
	$psxBios_°ºchr
() {

531 
	`psxBios_rödex
();

532 
	}
}

534 
	$psxBios_°Ωbrk
() {

535 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
, *
sˇ≈
, 
c
, 
sc
;

537 (
c
 = *
p1
++) != '\0') {

538 
sˇ≈
 = 
p2
; (
sc
 = *scanp++) != '\0';) {

539 i‡(
sc
 =
c
) {

540 
v0
 = 
a0
 + (
p1
 - 1 - (*)
Ra0
);

541 
pc0
 = 
ø
;

548 
v0
 = 
a0
; 
pc0
 = 
ø
;

549 
	}
}

551 
	$psxBios_°r•n
() {

552 *
p1
, *
p2
;

554 
p1
 = (*)
Ra0
; *p1 != '\0';Ö1++) {

555 
p2
 = (*)
Ra1
; *p2 !'\0' && *p2 !*
p1
;Ö2++);

556 i‡(*
p2
 == '\0') ;

559 
v0
 = 
p1
 - (*)
Ra0
; 
pc0
 = 
ø
;

560 
	}
}

562 
	$psxBios_°rc•n
() {

563 *
p1
, *
p2
;

565 
p1
 = (*)
Ra0
; *p1 != '\0';Ö1++) {

566 
p2
 = (*)
Ra1
; *p2 !'\0' && *p2 !*
p1
;Ö2++);

567 i‡(*
p2
 != '\0') ;

570 
v0
 = 
p1
 - (*)
Ra0
; 
pc0
 = 
ø
;

571 
	}
}

573 
	$psxBios_°πok
() {

574 *
pcA0
 = (*)
Ra0
;

575 *
pcRë
 = 
	`°πok
(
pcA0
, (*)
Ra1
);

576 if(
pcRë
)

577 
v0
 = 
a0
 + 
pcRë
 - 
pcA0
;

579 
v0
 = 0;

580 
pc0
 = 
ø
;

581 
	}
}

583 
	$psxBios_°r°r
() {

584 *
p
 = (*)
Ra0
, *
p1
, *
p2
;

586 *
p
 != '\0') {

587 
p1
 = 
p
;

588 
p2
 = (*)
Ra1
;

590 *
p1
 !'\0' && *
p2
 != '\0' && *p1 == *p2) {

591 
p1
++; 
p2
++;

594 i‡(*
p2
 == '\0') {

595 
v0
 = 
a0
 + (
p
 - (*)
Ra0
);

596 
pc0
 = 
ø
;

600 
p
++;

603 
v0
 = 0; 
pc0
 = 
ø
;

604 
	}
}

606 
	$psxBios_touµî
() {

607 
v0
 = (
s8
)(
a0
 & 0xff);

608 i‡(
v0
 >= 'a' && v0 <= 'z') v0 -= 'a' - 'A';

609 
pc0
 = 
ø
;

610 
	}
}

612 
	$psxBios_tﬁowî
() {

613 
v0
 = (
s8
)(
a0
 & 0xff);

614 i‡(
v0
 >= 'A' && v0 <= 'Z') v0 += 'a' - 'A';

615 
pc0
 = 
ø
;

616 
	}
}

618 
	$psxBios_bc›y
() {

619 *
p1
 = (*)
Ra1
, *
p2
 = (*)
Ra0
;

620 (
s32
)
a2
-- > 0Ë*
p1
++ = *
p2
++;

622 
pc0
 = 
ø
;

623 
	}
}

625 
	$psxBios_bzîo
() {

626 *
p
 = (*)
Ra0
;

627 (
s32
)
a1
-- > 0Ë*
p
++ = '\0';

629 
pc0
 = 
ø
;

630 
	}
}

632 
	$psxBios_bcmp
() {

633 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

635 i‡(
a0
 =0 || 
a1
 =0Ë{ 
v0
 = 0; 
pc0
 = 
ø
; ; }

637 (
s32
)
a2
-- > 0) {

638 i‡(*
p1
++ !*
p2
++) {

639 
v0
 = *
p1
 - *
p2
;

640 
pc0
 = 
ø
;

645 
v0
 = 0; 
pc0
 = 
ø
;

646 
	}
}

648 
	$psxBios_mem˝y
() {

649 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

650 
s32
 
n
=0;

651 (
s32
)
a2
-- > 0) {

652 
n
++;

653 *
p1
++ = *
p2
++;

656 
v0
 = 
a0
;

657 
pc0
 = 
ø
;

658 
	}
}

660 
	$psxBios_mem£t
() {

661 *
p
 = (*)
Ra0
;

662 (
s32
)
a2
-- > 0Ë*
p
++ = ()
a1
;

664 
v0
 = 
a0
; 
pc0
 = 
ø
;

665 
	}
}

667 
	$psxBios_memmove
() {

668 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

670 i‡(
p2
 <
p1
 &&Ö2 + 
a2
 >Ö1) {

671 
a2
++;

672 
p1
 +
a2
;

673 
p2
 +
a2
;

674 (
s32
)
a2
-- > 0Ë*--
p1
 = *--
p2
;

676 (
s32
)
a2
-- > 0Ë*
p1
++ = *
p2
++;

679 
v0
 = 
a0
; 
pc0
 = 
ø
;

680 
	}
}

682 
	$psxBios_memcmp
() {

683 
	`psxBios_bcmp
();

684 
	}
}

686 
	$psxBios_memchr
() {

687 *
p
 = (*)
Ra0
;

689 (
s32
)
a2
-- > 0) {

690 i‡(*
p
++ !(
s8
)
a1
) ;

691 
v0
 = 
a0
 + (
p
 - (*)
Ra0
 - 1);

692 
pc0
 = 
ø
;

696 
v0
 = 0; 
pc0
 = 
ø
;

697 
	}
}

699 
	$psxBios_ønd
() {

700 
u32
 
s
 = 
	`psxMu32
(0x9010) * 1103515245 + 12345;

701 
v0
 = (
s
 >> 16) & 0x7fff;

702 
	`psxMu32ªf
(0x9010Ë
	`SWAPu32
(
s
);

703 
pc0
 = 
ø
;

704 
	}
}

706 
	$psxBios_§™d
() {

707 
	`psxMu32ªf
(0x9010Ë
	`SWAPu32
(
a0
);

708 
pc0
 = 
ø
;

709 
	}
}

711 
u32
 
	gqscmpfunc
, 
	gqswidth
;

713 
ölöe
 
	$qscmp
(*
a
, *
b
) {

714 
u32
 
ß0
 = 
a0
;

716 
a0
 = 
ß0
 + (
a
 - (*)
	`PSXM
(sa0));

717 
a1
 = 
ß0
 + (
b
 - (*)
	`PSXM
(sa0));

719 
	`so·CÆl2
(
qscmpfunc
);

721 
a0
 = 
ß0
;

722  (
s32
)
v0
;

723 
	}
}

725 
ölöe
 
	$qexch™ge
(*
i
, *
j
) {

726 
t
;

727 
n
 = 
qswidth
;

730 
t
 = *
i
;

731 *
i
++ = *
j
;

732 *
j
++ = 
t
;

733 } --
n
);

734 
	}
}

736 
ölöe
 
	$q3exch™ge
(*
i
, *
j
, *
k
) {

737 
t
;

738 
n
 = 
qswidth
;

741 
t
 = *
i
;

742 *
i
++ = *
k
;

743 *
k
++ = *
j
;

744 *
j
++ = 
t
;

745 } --
n
);

746 
	}
}

748 
	$qs‹t_maö
(*
a
, *
l
) {

749 *
i
, *
j
, *
Õ
, *
hp
;

750 
c
;

751 
n
;

753 
°¨t
:

754 i‡((
n
 = 
l
 - 
a
Ë<
qswidth
)

756 
n
 = 
qswidth
 * (n / (2 * qswidth));

757 
hp
 = 
Õ
 = 
a
 + 
n
;

758 
i
 = 
a
;

759 
j
 = 
l
 - 
qswidth
;

760 
TRUE
) {

761 i‡(
i
 < 
Õ
) {

762 i‡((
c
 = 
	`qscmp
(
i
, 
Õ
)) == 0) {

763 
	`qexch™ge
(
i
, 
Õ
 -
qswidth
);

766 i‡(
c
 < 0) {

767 
i
 +
qswidth
;

772 
lo›
:

773 i‡(
j
 > 
hp
) {

774 i‡((
c
 = 
	`qscmp
(
hp
, 
j
)) == 0) {

775 
	`qexch™ge
(
hp
 +
qswidth
, 
j
);

776 
lo›
;

778 i‡(
c
 > 0) {

779 i‡(
i
 =
Õ
) {

780 
	`q3exch™ge
(
i
, 
hp
 +
qswidth
, 
j
);

781 
i
 = 
Õ
 +
qswidth
;

782 
lo›
;

784 
	`qexch™ge
(
i
, 
j
);

785 
j
 -
qswidth
;

786 
i
 +
qswidth
;

789 
j
 -
qswidth
;

790 
lo›
;

793 i‡(
i
 =
Õ
) {

794 i‡(
Õ
 - 
a
 >
l
 - 
hp
) {

795 
	`qs‹t_maö
(
hp
 + 
qswidth
, 
l
);

796 
l
 = 
Õ
;

798 
	`qs‹t_maö
(
a
, 
Õ
);

799 
a
 = 
hp
 + 
qswidth
;

801 
°¨t
;

804 
	`q3exch™ge
(
j
, 
Õ
 -
qswidth
, 
i
);

805 
j
 = 
hp
 -
qswidth
;

807 
	}
}

809 
	$psxBios_qs‹t
() {

810 
qswidth
 = 
a2
;

811 
qscmpfunc
 = 
a3
;

812 
	`qs‹t_maö
((*)
Ra0
, (*)Ra0 + 
a1
 * 
a2
);

814 
pc0
 = 
ø
;

815 
	}
}

817 
	$psxBios_mÆloc
() {

818 *
chunk
, *
√wchunk
 = 
NULL
;

819 
dsize
 = 0, 
csize
, 
c°©
;

820 
cﬁÊag
;

821 #ifde‡
PSXBIOS_LOG


822 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x33]);

824 i‡(!
a0
) {

825 
v0
 = 0;

826 
pc0
 = 
ø
;

831 
chunk
 = 
hóp_addr
;

832 
cﬁÊag
 = 0;

833 
chunk
 < 
hóp_íd
) {

835 
csize
 = ((
u32
)*
chunk
) & 0xfffffffc;

836 
c°©
 = ((
u32
)*
chunk
) & 1;

840 i‡(*
chunk
 == 0) {

841 
√wchunk
 = 
chunk
;

842 
dsize
 = ((
u±r
)
hóp_íd
 - (u±r)
chunk
) - 4;

843 
cﬁÊag
 = 1;

848 if(
c°©
 == 1) {

849 if(
cﬁÊag
 == 0) {

850 
√wchunk
 = 
chunk
;

851 
dsize
 = 
csize
;

852 
cﬁÊag
 = 1;

854 
dsize
 +(
csize
+4);

858 if(
cﬁÊag
 == 1) {

859 
cﬁÊag
 = 0;

860 *
√wchunk
 = 
	`SWAP32
(
dsize
 | 1);

865 
chunk
 = (
u32
*)((
u±r
)chunk + 
csize
 + 4);

868 i‡(
cﬁÊag
 == 1)

869 *
√wchunk
 = 
	`SWAP32
(
dsize
 | 1);

871 
chunk
 = 
hóp_addr
;

872 
csize
 = ((
u32
)*
chunk
) & 0xfffffffc;

873 
c°©
 = ((
u32
)*
chunk
) & 1;

874 
dsize
 = (
a0
 + 3) & 0xfffffffc;

877 i‡(
chunk
 =
NULL
) {

878 
	`¥ötf
("mÆlo¯%x,%x: Unöôülized Hóp!\n", 
v0
, 
a0
);

879 
v0
 = 0;

880 
pc0
 = 
ø
;

885 (
dsize
 > 
csize
 || 
c°©
==0Ë&& 
chunk
 < 
hóp_íd
 ) {

886 
chunk
 = (
u32
*)((
u±r
)chunk + 
csize
 + 4);

889 if(
chunk
 >
hóp_íd
) {

890 
	`¥ötf
("malloc %x,%x: Out of memoryÉrror!\n",

891 
v0
, 
a0
);

892 
v0
 = 0; 
pc0
 = 
ø
;

896 
csize
 = ((
u32
)*
chunk
) & 0xfffffffc;

897 
c°©
 = ((
u32
)*
chunk
) & 1;

901 if(
dsize
 =
csize
) {

903 *
chunk
 &= 0xfffffffc;

904 } i‡(
dsize
 > 
csize
) {

905 
v0
 = 0; 
pc0
 = 
ø
;

909 *
chunk
 = 
	`SWAP32
(
dsize
);

910 
√wchunk
 = (
u32
*)((
u±r
)
chunk
 + 
dsize
 + 4);

911 *
√wchunk
 = 
	`SWAP32
(((
csize
 - 
dsize
 - 4) & 0xfffffffc) | 1);

915 
v0
 = ((
u±r
)
chunk
 - (u±r)
psxM
) + 4;

916 
v0
|= 0x80000000;

918 
pc0
 = 
ø
;

919 
	}
}

921 
	$psxBios_‰ì
() {

923 #ifde‡
PSXBIOS_LOG


924 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x34]);

929 i‡(
a0
)

930 *(
u32
*)(
Ra0
-4) |= 1;

931 
pc0
 = 
ø
;

932 
	}
}

934 
	$psxBios_ˇŒoc
() {

935 *
pv0
;

936 #ifde‡
PSXBIOS_LOG


937 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x37]);

940 
a0
 =á0 * 
a1
;

941 
	`psxBios_mÆloc
();

942 
pv0
 = 
Rv0
;

943 i‡(
pv0
)

944 
	`mem£t
(
pv0
, 0, 
a0
);

945 
	}
}

947 
	$psxBios_ªÆloc
() {

948 
u32
 
block
 = 
a0
;

949 
u32
 
size
 = 
a1
;

950 #ifde‡
PSXBIOS_LOG


951 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x38]);

954 
a0
 = 
block
;

955 
	`psxBios_‰ì
();

956 
a0
 = 
size
;

957 
	`psxBios_mÆloc
();

958 
	}
}

962 
	$psxBios_InôHóp
() {

963 
size
;

965 #ifde‡
PSXBIOS_LOG


966 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x39]);

969 i‡(((
a0
 & 0x1fffffË+ 
a1
)>0x200000Ë
size
 = 0x1ffffc - (a0 & 0x1fffff);

970 
size
 = 
a1
;

972 
size
 &= 0xfffffffc;

974 
hóp_addr
 = (
u32
 *)
Ra0
;

975 
hóp_íd
 = (
u32
 *)((
u8
 *)
hóp_addr
 + 
size
);

981 
pc0
 = 
ø
;

982 
	}
}

984 
	$psxBios_gëch¨
() {

985 
v0
 = 
	`gëch¨
(); 
pc0
 = 
ø
;

986 
	}
}

988 
	$psxBios_¥ötf
() {

989 
tmp
[1024];

990 
tmp2
[1024];

991 
u32
 
ßve
[4];

992 *
±mp
 = 
tmp
;

993 
n
=1, 
i
=0, 
j
, 
k
=0;

994 *
p•
;

996 
p•
 = 
	`PSXM
(
•
);

997 i‡(
p•
) {

998 
	`mem˝y
(
ßve
, 
p•
, 4 * 4);

999 
	`psxMu32ªf
(
•
Ë
	`SWAP32
((
u32
)
a0
);

1000 
	`psxMu32ªf
(
•
 + 4Ë
	`SWAP32
((
u32
)
a1
);

1001 
	`psxMu32ªf
(
•
 + 8Ë
	`SWAP32
((
u32
)
a2
);

1002 
	`psxMu32ªf
(
•
 + 12Ë
	`SWAP32
((
u32
)
a3
);

1005 
Ra0
[
i
]) {

1006 
Ra0
[
i
]) {

1008 
j
 = 0;

1009 
tmp2
[
j
++] = '%';

1010 
k
++;

1011 
_°¨t
:

1012 
Ra0
[++
i
]) {

1015 
tmp2
[
j
++] = 
Ra0
[
i
]; 
_°¨t
;

1017 i‡(
Ra0
[
i
] >= '0' && Ra0[i] <= '9') {

1018 
tmp2
[
j
++] = 
Ra0
[
i
];

1019 
_°¨t
;

1023 
tmp2
[
j
++] = 
Ra0
[
i
];

1024 
tmp2
[
j
] = 0;

1026 
Ra0
[
i
]) {

1028 
±mp
+
	`•rötf
’tmp, 
tmp2
, ()
	`psxMu32
(
•
 + 
n
 * 4));Ç++; ;

1032 
±mp
+
	`•rötf
’tmp, 
tmp2
, ()
	`psxMu32
(
•
 + 
n
 * 4));Ç++; ;

1038 
±mp
+
	`•rötf
’tmp, 
tmp2
, ()
	`psxMu32
(
•
 + 
n
 * 4));Ç++; ;

1040 
±mp
+
	`•rötf
’tmp, 
tmp2
, ()
	`psxMu32
(
•
 + 
n
 * 4));Ç++; ;

1042 
±mp
+
	`•rötf
’tmp, 
tmp2
, (*)
	`PSXM
(
	`psxMu32
(
•
 + 
n
 * 4)));Ç++; ;

1044 *
±mp
++ = 
Ra0
[
i
]; ;

1046 
i
++;

1049 *
±mp
++ = 
Ra0
[
i
++];

1052 *
±mp
 = 0;

1054 i‡(
p•
)

1055 
	`mem˝y
(
p•
, 
ßve
, 4 * 4);

1060 
pc0
 = 
ø
;

1061 
psxRegs
.
GPR
.
n
.
hi
 = 0x00000008;

1062 
	}
}

1064 
	$psxBios_f‹m©
() {

1065 i‡(
	`°rcmp
(
Ra0
, "bu00:") == 0) {

1066 
	`sioMcdF‹m©
(
MCD1
);

1067 
v0
 = 1;

1068 } i‡(
	`°rcmp
(
Ra0
, "bu10:") == 0) {

1069 
	`sioMcdF‹m©
(
MCD2
);

1070 
v0
 = 1;

1072 
v0
 = 0;

1074 
pc0
 = 
ø
;

1075 
	}
}

1081 
	$psxBios_Lﬂd
() {

1082 
EXE_HEADER
 
ehódî
;

1083 *
∑1
;

1085 #ifde‡
PSXBIOS_LOG


1086 
	`PSXBIOS_LOG
("psxBios_%s: %s, %x\n", 
biosA0n
[0x42], 
Ra0
, 
a1
);

1089 
∑1
 = 
Ra1
;

1090 i‡(
∑1
 && 
	`LﬂdCdromFûe
(
Ra0
, &
ehódî
) == 0) {

1091 
	`mem˝y
(
∑1
, ((*)&
ehódî
)+16, (
EXEC
));

1092 
v0
 = 1;

1093 } 
v0
 = 0;

1095 
pc0
 = 
ø
;

1096 
	}
}

1102 
	$psxBios_Exec
() {

1103 
EXEC
 *
hódî
 = (EXEC*)
Ra0
;

1104 
u32
 
tmp
;

1106 #ifde‡
PSXBIOS_LOG


1107 
	`PSXBIOS_LOG
("psxBios_%s: %x, %x, %x\n", 
biosA0n
[0x43], 
a0
, 
a1
, 
a2
);

1110 
hódî
->
_•
 = 
•
;

1111 
hódî
->
_Â
 = 
Â
;

1112 
hódî
->
_•
 = 
•
;

1113 
hódî
->
_gp
 = 
gp
;

1114 
hódî
->
ªt
 = 
ø
;

1115 
hódî
->
ba£
 = 
s0
;

1117 i‡(
hódî
->
S_addr
 != 0) {

1118 
tmp
 = 
hódî
->
S_addr
 + hódî->
s_size
;

1119 
•
 = 
tmp
;

1120 
Â
 = 
•
;

1123 
gp
 = 
hódî
->
gp0
;

1125 
s0
 = 
a0
;

1127 
a0
 = 
a1
;

1128 
a1
 = 
a2
;

1130 
ø
 = 0x8000;

1131 
pc0
 = 
hódî
->
_pc0
;

1132 
	}
}

1134 
	$psxBios_FlushCache
() {

1135 #ifde‡
PSXBIOS_LOG


1136 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x44]);

1139 
pc0
 = 
ø
;

1140 
	}
}

1142 
	$psxBios_GPU_dw
() {

1143 
size
;

1144 
s32
 *
±r
;

1146 #ifde‡
PSXBIOS_LOG


1147 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x46]);

1150 
	`GPU_wrôeD©a
(0xa0000000);

1151 
	`GPU_wrôeD©a
((
a1
<<16)|(
a0
&0xffff));

1152 
	`GPU_wrôeD©a
((
a3
<<16)|(
a2
&0xffff));

1153 
size
 = (
a2
*
a3
+1)/2;

1154 
±r
 = (
s32
*)
	`PSXM
(
R•
[4]);

1155 #i‚de‡
__¨m__


1157 
	`GPU_wrôeD©a
(
	`SWAP32
(*
±r
));

1158 
±r
++;

1159 } --
size
);

1161 
	`GPU_wrôeD©aMem
((
u32
*)
±r
,
size
);

1163 
pc0
 = 
ø
;

1164 
	}
}

1166 
	$psxBios_mem2vøm
() {

1167 
size
;

1169 
	`GPU_wrôeD©a
(0xa0000000);

1170 
	`GPU_wrôeD©a
((
a1
<<16)|(
a0
&0xffff));

1171 
	`GPU_wrôeD©a
((
a3
<<16)|(
a2
&0xffff));

1172 
size
 = (
a2
*
a3
+1)/2;

1173 
	`GPU_wrôeSètus
(0x04000002);

1174 
	`psxHwWrôe32
(0x1f8010f4,0);

1175 
	`psxHwWrôe32
(0x1f8010f0,
	`psxHwRód32
(0x1f8010f0)|0x800);

1176 
	`psxHwWrôe32
(0x1f8010a0,
R•
[4]);

1177 
	`psxHwWrôe32
(0x1f8010a4,((
size
/16)<<16)|16);

1178 
	`psxHwWrôe32
(0x1f8010a8,0x01000201);

1180 
pc0
 = 
ø
;

1181 
	}
}

1183 
	$psxBios_SídGPU
() {

1184 
	`GPU_wrôeSètus
(
a0
);

1185 
	`gpuSyncPlugöSR
();

1186 
pc0
 = 
ø
;

1187 
	}
}

1189 
	$psxBios_GPU_cw
() {

1190 
	`GPU_wrôeD©a
(
a0
);

1191 
pc0
 = 
ø
;

1192 
	}
}

1194 
	$psxBios_GPU_cwb
() {

1195 
s32
 *
±r
 = (s32*)
Ra0
;

1196 
size
 = 
a1
;

1197 #i‚de‡
__¨m__


1198 
size
--) {

1199 
	`GPU_wrôeD©a
(
	`SWAP32
(*
±r
));

1200 
±r
++;

1203 
	`GPU_wrôeD©aMem
((
u32
*)
±r
,
size
);

1205 
pc0
 = 
ø
;

1206 
	}
}

1208 
	$psxBios_GPU_SídPackës
() {

1209 
	`GPU_wrôeSètus
(0x04000002);

1210 
	`psxHwWrôe32
(0x1f8010f4,0);

1211 
	`psxHwWrôe32
(0x1f8010f0,
	`psxHwRód32
(0x1f8010f0)|0x800);

1212 
	`psxHwWrôe32
(0x1f8010a0,
a0
);

1213 
	`psxHwWrôe32
(0x1f8010a4,0);

1214 
	`psxHwWrôe32
(0x1f8010a8,0x010000401);

1215 
pc0
 = 
ø
;

1216 
	}
}

1218 
	$psxBios_sys_a0_4c
() {

1219 
	`psxHwWrôe32
(0x1f8010a8,0x00000401);

1220 
	`GPU_wrôeD©a
(0x0400000);

1221 
	`GPU_wrôeD©a
(0x0200000);

1222 
	`GPU_wrôeD©a
(0x0100000);

1224 
pc0
 = 
ø
;

1225 
	}
}

1227 
	$psxBios_GPU_GëGPUSètus
() {

1228 
v0
 = 
	`GPU_ªadSètus
();

1229 
pc0
 = 
ø
;

1230 
	}
}

1232 #unde‡
s_addr


1234 
	$psxBios_LﬂdExec
() {

1235 
EXEC
 *
hódî
 = (EXEC*)
	`PSXM
(0xf000);

1236 
u32
 
s_addr
, 
s_size
;

1238 #ifde‡
PSXBIOS_LOG


1239 
	`PSXBIOS_LOG
("psxBios_%s: %s: %x,%x\n", 
biosA0n
[0x51], 
Ra0
, 
a1
, 
a2
);

1241 
s_addr
 = 
a1
; 
s_size
 = 
a2
;

1243 
a1
 = 0xf000;

1244 
	`psxBios_Lﬂd
();

1246 
hódî
->
S_addr
 = 
s_addr
;

1247 
hódî
->
s_size
 = s_size;

1249 
a0
 = 0xf000; 
a1
 = 0; 
a2
 = 0;

1250 
	`psxBios_Exec
();

1251 
	}
}

1254 
	$psxBios__bu_öô
() {

1255 #ifde‡
PSXBIOS_LOG


1256 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x70]);

1259 
	`DñivîEvít
(0x11, 0x2);

1260 
	`DñivîEvít
(0x81, 0x2);

1262 
pc0
 = 
ø
;

1263 
	}
}

1265 
	$psxBios__96_öô
() {

1266 #ifde‡
PSXBIOS_LOG


1267 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x71]);

1270 
pc0
 = 
ø
;

1271 
	}
}

1273 
	$psxBios__96_ªmove
() {

1274 #ifde‡
PSXBIOS_LOG


1275 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x72]);

1278 
pc0
 = 
ø
;

1279 
	`Re£tIoCy˛e
();

1280 
	}
}

1282 
	$psxBios_SëMem
() {

1283 
u32
 
_√w
 = 
	`psxHu32
(0x1060);

1285 #ifde‡
PSXBIOS_LOG


1286 
	`PSXBIOS_LOG
("psxBios_%s: %x, %x\n", 
biosA0n
[0x9f], 
a0
, 
a1
);

1289 
a0
) {

1291 
	`psxHu32ªf
(0x1060Ë
	`SWAP32
(
_√w
);

1292 
	`psxMu32ªf
(0x060Ë
a0
;

1297 
	`psxHu32ªf
(0x1060Ë
	`SWAP32
(
_√w
 | 0x300);

1298 
	`psxMu32ªf
(0x060Ë
a0
;

1306 
pc0
 = 
ø
;

1307 
	}
}

1309 
	$psxBios__ˇrd_öfo
() {

1310 #ifde‡
PSXBIOS_LOG


1311 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosA0n
[0xab], 
a0
);

1314 
ˇrd_a˘ive_ch™
 = 
a0
;

1317 
	`DñivîEvít
(0x81, 0x2);

1319 
v0
 = 1;

1320 
pc0
 = 
ø
;

1321 
	}
}

1323 
	$psxBios__ˇrd_lﬂd
() {

1324 #ifde‡
PSXBIOS_LOG


1325 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosA0n
[0xac], 
a0
);

1328 
ˇrd_a˘ive_ch™
 = 
a0
;

1331 
	`DñivîEvít
(0x81, 0x2);

1333 
v0
 = 1;

1334 
pc0
 = 
ø
;

1335 
	}
}

1339 
	$psxBios_SëRC¡
() {

1340 #ifde‡
PSXBIOS_LOG


1341 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x02]);

1344 
a0
&= 0x3;

1345 i‡(
a0
 != 3) {

1346 
u32
 
mode
=0;

1348 
	`psxR˙tWèrgë
(
a0
, 
a1
);

1349 i‡(
a2
&0x1000Ë
mode
|= 0x050;

1350 i‡(
a2
&0x0100Ë
mode
|= 0x008;

1351 i‡(
a2
&0x0010Ë
mode
|= 0x001;

1352 i‡(
a0
 =2Ë{ i‡(
a2
&0x0001Ë
mode
|= 0x200; }

1353 { i‡(
a2
&0x0001Ë
mode
|= 0x100; }

1355 
	`psxR˙tWmode
(
a0
, 
mode
);

1357 
pc0
 = 
ø
;

1358 
	}
}

1360 
	$psxBios_GëRC¡
() {

1361 #ifde‡
PSXBIOS_LOG


1362 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x03]);

1365 
a0
&= 0x3;

1366 i‡(
a0
 !3Ë
v0
 = 
	`psxR˙tRcou¡
(a0);

1367 
v0
 = 0;

1368 
pc0
 = 
ø
;

1369 
	}
}

1371 
	$psxBios_SèπRC¡
() {

1372 #ifde‡
PSXBIOS_LOG


1373 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x04]);

1376 
a0
&= 0x3;

1377 
	`Re£tIoCy˛e
();

1378 i‡(
a0
 !3Ë
	`psxHu32ªf
(0x1074)|
	`SWAP32
((
u32
)((1<<(a0+4))));

1379 
	`psxHu32ªf
(0x1074)|
	`SWAPu32
(0x1);

1380 
v0
 = 1; 
pc0
 = 
ø
;

1381 
	}
}

1383 
	$psxBios_St›RC¡
() {

1384 #ifde‡
PSXBIOS_LOG


1385 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x05]);

1388 
a0
&= 0x3;

1389 
	`Re£tIoCy˛e
();

1390 i‡(
a0
 !3Ë
	`psxHu32ªf
(0x1074)&
	`SWAP32
((
u32
)(~(1<<(a0+4))));

1391 
	`psxHu32ªf
(0x1074)&
	`SWAPu32
(~0x1);

1392 
pc0
 = 
ø
;

1393 
	}
}

1395 
	$psxBios_Re£tRC¡
() {

1396 #ifde‡
PSXBIOS_LOG


1397 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x06]);

1400 
a0
&= 0x3;

1401 i‡(
a0
 != 3) {

1402 
	`psxR˙tWmode
(
a0
, 0);

1403 
	`psxR˙tWèrgë
(
a0
, 0);

1404 
	`psxR˙tWcou¡
(
a0
, 0);

1406 
pc0
 = 
ø
;

1407 
	}
}

1411 
	#GëEv
() \

1412 
ev
 = (
a0
 >> 24) & 0xf; \

1413 i‡(
ev
 == 0xf)Év = 0x5; \

1414 
ev
*= 32; \

1415 
ev
+
a0
&0x1f;

	)

1418 
	#GëS≥c
() \

1419 
•ec
 = 0; \

1420 
a1
) { \

1421 0x0301: 
•ec
 = 16; ; \

1422 0x0302: 
•ec
 = 17; ; \

1424 
i
=0; i<16; i++Ëi‡(
a1
 & (1 << i)Ë{ 
•ec
 = i; ; } \

1426 }

	)

1428 
	$psxBios_DñivîEvít
() {

1429 
ev
, 
•ec
;

1430 
i
;

1432 
	`GëEv
();

1433 
	`GëS≥c
();

1435 #ifde‡
PSXBIOS_LOG


1436 
	`PSXBIOS_LOG
("psxBios_%†%x,%x\n", 
biosB0n
[0x07], 
ev
, 
•ec
);

1439 
	`DñivîEvít
(
ev
, 
•ec
);

1441 
pc0
 = 
ø
;

1442 
	}
}

1444 
	$psxBios_O≥nEvít
() {

1445 
ev
, 
•ec
;

1446 
i
;

1448 
	`GëEv
();

1449 
	`GëS≥c
();

1451 #ifde‡
PSXBIOS_LOG


1452 
	`PSXBIOS_LOG
("psxBios_%†%x,%x (˛ass:%x, s≥c:%x, mode:%x, func:%x)\n", 
biosB0n
[0x08], 
ev
, 
•ec
, 
a0
, 
a1
, 
a2
, 
a3
);

1455 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStWAIT
;

1456 
Evít
[
ev
][
•ec
].
mode
 = 
a2
;

1457 
Evít
[
ev
][
•ec
].
fh™dÀr
 = 
a3
;

1459 
v0
 = 
ev
 | (
•ec
 << 8);

1460 
pc0
 = 
ø
;

1461 
	}
}

1463 
	$psxBios_Clo£Evít
() {

1464 
ev
, 
•ec
;

1466 
ev
 = 
a0
 & 0xff;

1467 
•ec
 = (
a0
 >> 8) & 0xff;

1469 #ifde‡
PSXBIOS_LOG


1470 
	`PSXBIOS_LOG
("psxBios_%†%x,%x\n", 
biosB0n
[0x09], 
ev
, 
•ec
);

1473 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStUNUSED
;

1475 
v0
 = 1;

1476 
pc0
 = 
ø
;

1477 
	}
}

1479 
	$psxBios_WaôEvít
() {

1480 
ev
, 
•ec
;

1482 
ev
 = 
a0
 & 0xff;

1483 
•ec
 = (
a0
 >> 8) & 0xff;

1485 #ifde‡
PSXBIOS_LOG


1486 
	`PSXBIOS_LOG
("psxBios_%†%x,%x\n", 
biosB0n
[0x0a], 
ev
, 
•ec
);

1489 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStACTIVE
;

1491 
v0
 = 1;

1492 
pc0
 = 
ø
;

1493 
	`Re£tIoCy˛e
();

1494 
	}
}

1496 
	$psxBios_Te°Evít
() {

1497 
ev
, 
•ec
;

1499 
ev
 = 
a0
 & 0xff;

1500 
•ec
 = (
a0
 >> 8) & 0xff;

1502 i‡(
Evít
[
ev
][
•ec
].
°©us
 =
EvStALREADY
) {

1503 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStACTIVE
; 
v0
 = 1;

1504 } 
v0
 = 0;

1506 #ifde‡
PSXBIOS_LOG


1507 
	`PSXBIOS_LOG
("psxBios_%†%x,%x: %x\n", 
biosB0n
[0x0b], 
ev
, 
•ec
, 
v0
);

1510 
pc0
 = 
ø
;

1511 
	}
}

1513 
	$psxBios_E«bÀEvít
() {

1514 
ev
, 
•ec
;

1516 
ev
 = 
a0
 & 0xff;

1517 
•ec
 = (
a0
 >> 8) & 0xff;

1519 #ifde‡
PSXBIOS_LOG


1520 
	`PSXBIOS_LOG
("psxBios_%†%x,%x\n", 
biosB0n
[0x0c], 
ev
, 
•ec
);

1523 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStACTIVE
;

1525 
v0
 = 1;

1526 
pc0
 = 
ø
;

1527 
	}
}

1529 
	$psxBios_DißbÀEvít
() {

1530 
ev
, 
•ec
;

1532 
ev
 = 
a0
 & 0xff;

1533 
•ec
 = (
a0
 >> 8) & 0xff;

1535 #ifde‡
PSXBIOS_LOG


1536 
	`PSXBIOS_LOG
("psxBios_%†%x,%x\n", 
biosB0n
[0x0d], 
ev
, 
•ec
);

1539 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStWAIT
;

1541 
v0
 = 1;

1542 
pc0
 = 
ø
;

1543 
	}
}

1549 
	$psxBios_O≥nTh
() {

1550 
th
;

1552 
th
=1;Åh<8;Åh++)

1553 i‡(
Thªad
[
th
].
°©us
 == 0) ;

1555 #ifde‡
PSXBIOS_LOG


1556 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosB0n
[0x0e], 
th
);

1559 
Thªad
[
th
].
°©us
 = 1;

1560 
Thªad
[
th
].
func
 = 
a0
;

1561 
Thªad
[
th
].
ªg
[29] = 
a1
;

1562 
Thªad
[
th
].
ªg
[28] = 
a2
;

1564 
v0
 = 
th
; 
pc0
 = 
ø
;

1565 
	}
}

1571 
	$psxBios_Clo£Th
() {

1572 
th
 = 
a0
 & 0xff;

1574 #ifde‡
PSXBIOS_LOG


1575 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosB0n
[0x0f], 
th
);

1578 i‡(
Thªad
[
th
].
°©us
 == 0) {

1579 
v0
 = 0;

1581 
Thªad
[
th
].
°©us
 = 0;

1582 
v0
 = 1;

1585 
pc0
 = 
ø
;

1586 
	}
}

1592 
	$psxBios_Ch™geTh
() {

1593 
th
 = 
a0
 & 0xff;

1595 #ifde‡
PSXBIOS_LOG


1599 i‡(
Thªad
[
th
].
°©us
 =0 || 
CurThªad
 ==Åh) {

1600 
v0
 = 0;

1602 
pc0
 = 
ø
;

1604 
v0
 = 1;

1606 i‡(
Thªad
[
CurThªad
].
°©us
 == 2) {

1607 
Thªad
[
CurThªad
].
°©us
 = 1;

1608 
Thªad
[
CurThªad
].
func
 = 
ø
;

1609 
	`mem˝y
(
Thªad
[
CurThªad
].
ªg
, 
psxRegs
.
GPR
.
r
, 32*4);

1612 
	`mem˝y
(
psxRegs
.
GPR
.
r
, 
Thªad
[
th
].
ªg
, 32*4);

1613 
pc0
 = 
Thªad
[
th
].
func
;

1614 
Thªad
[
th
].
°©us
 = 2;

1615 
CurThªad
 = 
th
;

1617 
	}
}

1619 
	$psxBios_InôPAD
() {

1620 #ifde‡
PSXBIOS_LOG


1621 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x12]);

1624 
∑d_buf1
 = (*)
Ra0
;

1625 
∑d_buf1Àn
 = 
a1
;

1626 
∑d_buf2
 = (*)
Ra2
;

1627 
∑d_buf2Àn
 = 
a3
;

1629 
v0
 = 1; 
pc0
 = 
ø
;

1630 
	}
}

1632 
	$psxBios_SèπPAD
() {

1633 #ifde‡
PSXBIOS_LOG


1634 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x13]);

1637 
∑d_°›≥d
 = 0;

1638 
	`Re£tIoCy˛e
();

1639 
	`psxHwWrôe16
(0x1f801074, ()(
	`psxHwRód16
(0x1f801074) | 0x1));

1640 
psxRegs
.
CP0
.
n
.
Sètus
 |= 0x401;

1641 
pc0
 = 
ø
;

1642 
	}
}

1644 
	$psxBios_St›PAD
() {

1645 #ifde‡
PSXBIOS_LOG


1646 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x14]);

1649 
∑d_°›≥d
 = 1;

1650 
∑d_buf1
 = 
NULL
;

1651 
∑d_buf2
 = 
NULL
;

1652 
pc0
 = 
ø
;

1653 
	}
}

1655 
	$psxBios_PAD_öô
() {

1656 #ifde‡
PSXBIOS_LOG


1657 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x15]);

1660 
	`Re£tIoCy˛e
();

1661 
	`psxHwWrôe16
(0x1f801074, (
u16
)(
	`psxHwRód16
(0x1f801074) | 0x1));

1662 
∑d_buf
 = (*)
Ra1
;

1663 *
∑d_buf
 = -1;

1664 
psxRegs
.
CP0
.
n
.
Sètus
 |= 0x401;

1665 
pc0
 = 
ø
;

1666 
	}
}

1668 
	$psxBios_PAD_dr
() {

1669 #ifde‡
PSXBIOS_LOG


1670 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x16]);

1673 
v0
 = -1;

1674 
pc0
 = 
ø
;

1675 
	}
}

1677 
	$psxBios_Rëu∫FromEx˚±i⁄
() {

1678 
	`LﬂdRegs
();

1680 
pc0
 = 
psxRegs
.
CP0
.
n
.
EPC
;

1681 
k0
 = 
öãºu±_r26
;

1683 i‡(
psxRegs
.
CP0
.
n
.
Cau£
 & 0x80000000Ë
pc0
+=4;

1685 
psxRegs
.
CP0
.
n
.
Sètus
 = (psxRegs.CP0.n.Status & 0xfffffff0) |

1686 ((
psxRegs
.
CP0
.
n
.
Sètus
 & 0x3c) >> 2);

1687 
	`Re£tIoCy˛e
();

1688 
	}
}

1690 
	$psxBios_Re£tE¡ryI¡
() {

1691 #ifde‡
PSXBIOS_LOG


1692 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x18]);

1695 
jmp_öt
 = 
NULL
;

1696 
pc0
 = 
ø
;

1697 
	}
}

1699 
	$psxBios_HookE¡ryI¡
() {

1700 #ifde‡
PSXBIOS_LOG


1701 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x19]);

1704 
jmp_öt
 = (
u32
*)
Ra0
;

1705 
pc0
 = 
ø
;

1706 
	}
}

1708 
	$psxBios_UnDñivîEvít
() {

1709 
ev
, 
•ec
;

1710 
i
;

1712 
	`GëEv
();

1713 
	`GëS≥c
();

1715 #ifde‡
PSXBIOS_LOG


1716 
	`PSXBIOS_LOG
("psxBios_%†%x,%x\n", 
biosB0n
[0x20], 
ev
, 
•ec
);

1719 i‡(
Evít
[
ev
][
•ec
].
°©us
 =
EvStALREADY
 &&

1720 
Evít
[
ev
][
•ec
].
mode
 =
EvMdNOINTR
)

1721 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStACTIVE
;

1723 
pc0
 = 
ø
;

1724 
	}
}

1726 
	#bu›í
(
mcd
) { \

1727 
i
; \

1728 
MemˇrdNum
 
mcd_num
 = (
mcd
 =1Ë? 
MCD1
 : 
MCD2
; \

1729 *
mcd_d©a
 = 
	`sioMcdD©aPå
(
mcd_num
); \

1730 
	`°r˝y
(
FDesc
[1 + 
mcd
].
«me
, 
Ra0
+5); \

1731 
FDesc
[1 + 
mcd
].
off£t
 = 0; \

1732 
FDesc
[1 + 
mcd
].
mode
 = 
a1
; \

1734 
i
=1; i<16; i++) { \

1735 c⁄° *
±r
 = 
mcd_d©a
 + 128 * 
i
; \

1736 i‡((*
±r
 & 0xF0) != 0x50) ; \

1737 i‡(
	`°rcmp
(
FDesc
[1 + 
mcd
].
«me
, 
±r
+0xa)) ; \

1738 
FDesc
[1 + 
mcd
].
mcfûe
 = 
i
; \

1740 
v0
 = 1 + 
mcd
; \

1743 i‡(
a1
 & 0x200 && 
v0
 == -1) { \

1744 
i
=1; i<16; i++) { \

1745 
j
, 
cx‹
 = 0; \

1747 *
±r
 = 
mcd_d©a
 + 128 * 
i
; \

1748 i‡((*
±r
 & 0xF0) == 0x50) ; \

1749 
±r
[0] = 0x50 | (
u8
)(
a1
 >> 16); \

1750 
±r
[4] = 0x00; \

1751 
±r
[5] = 0x20; \

1752 
±r
[6] = 0x00; \

1753 
±r
[7] = 0x00; \

1754 
±r
[8] = 'B'; \

1755 
±r
[9] = 'I'; \

1756 
	`°r˝y
(
±r
+0xa, 
FDesc
[1 + 
mcd
].
«me
); \

1757 
j
=0; j<127; j++Ë
cx‹
^
±r
[j]; \

1758 
±r
[127] = 
cx‹
; \

1759 
FDesc
[1 + 
mcd
].
mcfûe
 = 
i
; \

1761 
v0
 = 1 + 
mcd
; \

1762 
	`sioMcdWrôe
(
mcd_num
, 
NULL
, 128 * 
i
, 128); \

1766 }

	)

1772 
	$psxBios_›í
() {

1773 c⁄° *
∑0
 = 
Ra0
;

1775 #ifde‡
PSXBIOS_LOG


1776 
	`PSXBIOS_LOG
("psxBios_%s: %s,%x\n", 
biosB0n
[0x32], 
Ra0
, 
a1
);

1779 
v0
 = -1;

1781 i‡(
∑0
) {

1782 i‡(!
	`°∫cmp
(
∑0
, "bu00", 4)) {

1783 
	`bu›í
(1);

1786 i‡(!
	`°∫cmp
(
∑0
, "bu10", 4)) {

1787 
	`bu›í
(2);

1791 
pc0
 = 
ø
;

1792 
	}
}

1798 
	$psxBios_l£ek
() {

1799 #ifde‡
PSXBIOS_LOG


1800 
	`PSXBIOS_LOG
("psxBios_%s: %x, %x, %x\n", 
biosB0n
[0x33], 
a0
, 
a1
, 
a2
);

1803 
a2
) {

1805 
FDesc
[
a0
].
off£t
 = 
a1
;

1806 
v0
 = 
a1
;

1812 
FDesc
[
a0
].
off£t
+
a1
;

1813 
v0
 = 
FDesc
[
a0
].
off£t
;

1817 
pc0
 = 
ø
;

1818 
	}
}

1820 
	#buªad
(
Ra1
, 
mcd
) { \

1822 
off£t
 = 8192 * 
FDesc
[1 + 
mcd
].
mcfûe
 + FDesc[1 + mcd].offset; \

1823 
	`sioMcdRód
(((
mcd
 =1Ë? 
MCD1
 : 
MCD2
), (*)
Ra1
, 
off£t
, 
a2
); \

1824 i‡(
FDesc
[1 + 
mcd
].
mode
 & 0x8000Ë
v0
 = 0; \

1825 
v0
 = 
a2
; \

1826 
FDesc
[1 + 
mcd
].
off£t
 +
v0
; \

1827 
	`DñivîEvít
(0x11, 0x2); \

1828 
	`DñivîEvít
(0x81, 0x2); \

1829 }

	)

1835 
	$psxBios_ªad
() {

1836 *
∑1
 = 
Ra1
;

1838 #ifde‡
PSXBIOS_LOG


1839 
	`PSXBIOS_LOG
("psxBios_%s: %x, %x, %x\n", 
biosB0n
[0x34], 
a0
, 
a1
, 
a2
);

1842 
v0
 = -1;

1844 i‡(
∑1
) {

1845 
a0
) {

1846 2: 
	`buªad
(
∑1
, 1); ;

1847 3: 
	`buªad
(
∑1
, 2); ;

1851 
pc0
 = 
ø
;

1852 
	}
}

1854 
	#buwrôe
(
Ra1
, 
mcd
) { \

1855 
off£t
 = 8192 * 
FDesc
[1 + 
mcd
].
mcfûe
 + FDesc[1 + mcd].offset; \

1857 
	`sioMcdWrôe
((
mcd
==1Ë? 
MCD1
 : 
MCD2
, (c⁄° *)
Ra1
, 
off£t
, 
a2
); \

1858 
FDesc
[1 + 
mcd
].
off£t
 +
a2
; \

1859 i‡(
FDesc
[1 + 
mcd
].
mode
 & 0x8000Ë
v0
 = 0; \

1860 
v0
 = 
a2
; \

1861 
	`DñivîEvít
(0x11, 0x2); \

1862 
	`DñivîEvít
(0x81, 0x2); \

1863 }

	)

1869 
	$psxBios_wrôe
() {

1870 *
∑1
 = 
Ra1
;

1872 #ifde‡
PSXBIOS_LOG


1873 
	`PSXBIOS_LOG
("psxBios_%s: %x,%x,%x\n", 
biosB0n
[0x35], 
a0
, 
a1
, 
a2
);

1876 
v0
 = -1;

1877 i‡(!
∑1
) {

1878 
pc0
 = 
ø
;

1882 i‡(
a0
 == 1) {

1883 *
±r
 = (*)
∑1
;

1885 
v0
 = 
a2
;

1886 
a2
 > 0) {

1887 
	`¥ötf
("%c", *
±r
++); 
a2
--;

1889 
pc0
 = 
ø
; ;

1892 
a0
) {

1893 2: 
	`buwrôe
(
∑1
, 1); ;

1894 3: 
	`buwrôe
(
∑1
, 2); ;

1897 
pc0
 = 
ø
;

1899 
	}
}

1905 
	$psxBios_˛o£
() {

1906 #ifde‡
PSXBIOS_LOG


1907 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosB0n
[0x36], 
a0
);

1910 
v0
 = 
a0
;

1911 
pc0
 = 
ø
;

1912 
	}
}

1914 
	$psxBios_putch¨
() {

1916 
pc0
 = 
ø
;

1917 
	}
}

1919 
	$psxBios_puts
() {

1921 
pc0
 = 
ø
;

1922 
	}
}

1924 
	gffûe
[64], *
	gpfûe
;

1925 
	gnfûe
;

1927 
	#bufûe
(
mcd
) { \

1928 
i
; \

1929 c⁄° *
mcd_d©a
 = 
	`sioMcdD©aPå
((
mcd
==1Ë? 
MCD1
 : 
MCD2
); \

1930 
nfûe
 < 16) { \

1931 
m©ch
=1; \

1933 c⁄° *
±r
 = 
mcd_d©a
 + 128 * 
nfûe
; \

1934 
nfûe
++; \

1935 i‡((*
±r
 & 0xF0) != 0x50) ; \

1936 
±r
+= 0xa; \

1937 i‡(
pfûe
[0] == 0) { \

1938 
	`°∫˝y
(
dú
->
«me
, 
±r
, (dir->name)); \

1939 
dú
->
«me
[(dir->name) - 1] = '\0'; \

1940 } 
i
=0; i<20; i++) { \

1941 i‡(
pfûe
[
i
] =
±r
[i]) { \

1942 
dú
->
«me
[
i
] = 
±r
[i]; \

1943 i‡(
±r
[
i
] == 0) ; ; } \

1944 i‡(
pfûe
[
i
] == '?') { \

1945 
dú
->
«me
[
i
] = 
±r
[i]; ; } \

1946 i‡(
pfûe
[
i
] == '*') { \

1947 
	`°r˝y
(
dú
->
«me
+
i
, 
±r
+i); ; } \

1948 
m©ch
 = 0; ; \

1951 i‡(
m©ch
 == 0) ; \

1952 
dú
->
size
 = 8192; \

1953 
v0
 = 
_dú
; \

1956 }

	)

1962 
	$psxBios_fú°fûe
() {

1963 
DIRENTRY
 *
dú
 = (DIRENTRY *)
Ra1
;

1964 c⁄° *
∑0
 = 
Ra0
;

1965 
u32
 
_dú
 = 
a1
;

1967 #ifde‡
PSXBIOS_LOG


1968 
	`PSXBIOS_LOG
("psxBios_%s: %s\n", 
biosB0n
[0x42], 
Ra0
);

1971 
v0
 = 0;

1973 i‡(
∑0
) {

1974 
	`°r˝y
(
ffûe
, 
∑0
);

1975 
pfûe
 = 
ffûe
+5;

1976 
nfûe
 = 1;

1977 i‡(!
	`°∫cmp
(
∑0
, "bu00", 4)) {

1978 
	`bufûe
(1);

1979 } i‡(!
	`°∫cmp
(
∑0
, "bu10", 4)) {

1980 
	`bufûe
(2);

1985 
	`DñivîEvít
(0x11, 0x2);

1987 
pc0
 = 
ø
;

1988 
	}
}

1994 
	$psxBios_√xtfûe
() {

1995 
DIRENTRY
 *
dú
 = (DIRENTRY *)
Ra0
;

1996 
u32
 
_dú
 = 
a0
;

1998 #ifde‡
PSXBIOS_LOG


1999 
	`PSXBIOS_LOG
("psxBios_%s: %s\n", 
biosB0n
[0x43], 
dú
->
«me
);

2002 
v0
 = 0;

2004 i‡(!
	`°∫cmp
(
ffûe
, "bu00", 4)) {

2005 
	`bufûe
(1);

2008 i‡(!
	`°∫cmp
(
ffûe
, "bu10", 4)) {

2009 
	`bufûe
(2);

2012 
pc0
 = 
ø
;

2013 
	}
}

2015 
	#buª«me
(
mcd
) { \

2016 
i
; \

2017 
MemˇrdNum
 
mcd_num
 = (
mcd
 =1Ë? 
MCD1
 : 
MCD2
; \

2018 *
mcd_d©a
 = 
	`sioMcdD©aPå
(
mcd_num
); \

2019 
i
=1; i<16; i++) { \

2020 
«mñí
, 
j
, 
cx‹
 = 0; \

2021 *
±r
 = 
mcd_d©a
 + 128 * 
i
; \

2022 i‡((*
±r
 & 0xF0) != 0x50) ; \

2023 i‡(
	`°rcmp
(
Ra0
+5, 
±r
+0xa)) ; \

2024 
«mñí
 = 
	`°æí
(
Ra1
+5); \

2025 
	`mem˝y
(
±r
+0xa, 
Ra1
+5, 
«mñí
); \

2026 
	`mem£t
(
±r
+0xa+
«mñí
, 0, 0x75-namelen); \

2027 
j
=0; j<127; j++Ë
cx‹
^
±r
[j]; \

2028 
±r
[127] = 
cx‹
; \

2029 
	`sioMcdWrôe
(
mcd_num
, 
NULL
, 128 * 
i
 + 0xa, 0x76); \

2030 
v0
 = 1; \

2033 }

	)

2039 
	$psxBios_ª«me
() {

2040 c⁄° *
∑0
 = 
Ra0
;

2041 c⁄° *
∑1
 = 
Ra1
;

2043 #ifde‡
PSXBIOS_LOG


2044 
	`PSXBIOS_LOG
("psxBios_%s: %s,%s\n", 
biosB0n
[0x44], 
Ra0
, 
Ra1
);

2047 
v0
 = 0;

2049 i‡(
∑0
 && 
∑1
) {

2050 i‡(!
	`°∫cmp
(
∑0
, "bu00", 4Ë&& !°∫cmp(
∑1
, "bu00", 4)) {

2051 
	`buª«me
(1);

2054 i‡(!
	`°∫cmp
(
∑0
, "bu10", 4Ë&& !°∫cmp(
∑1
, "bu10", 4)) {

2055 
	`buª«me
(2);

2059 
pc0
 = 
ø
;

2060 
	}
}

2062 
	#budñëe
(
mcd
) { \

2063 
MemˇrdNum
 
mcd_num
 = (
mcd
 =1Ë? 
MCD1
 : 
MCD2
; \

2064 *
mcd_d©a
 = 
	`sioMcdD©aPå
(
mcd_num
); \

2065 
i
; \

2066 
i
=1; i<16; i++) { \

2067 *
±r
 = 
mcd_d©a
 + 128 * 
i
; \

2068 i‡((*
±r
 & 0xF0) != 0x50) ; \

2069 i‡(
	`°rcmp
(
Ra0
+5, 
±r
+0xa)) ; \

2070 *
±r
 = (*ptr & 0xf) | 0xA0; \

2071 
	`sioMcdWrôe
(
mcd_num
, 
NULL
, 128 * 
i
, 1); \

2073 
v0
 = 1; \

2076 }

	)

2082 
	$psxBios_dñëe
() {

2083 c⁄° *
∑0
 = 
Ra0
;

2085 #ifde‡
PSXBIOS_LOG


2086 
	`PSXBIOS_LOG
("psxBios_%s: %s\n", 
biosB0n
[0x45], 
Ra0
);

2089 
v0
 = 0;

2091 i‡(
∑0
) {

2092 i‡(!
	`°∫cmp
(
∑0
, "bu00", 4)) {

2093 
	`budñëe
(1);

2096 i‡(!
	`°∫cmp
(
∑0
, "bu10", 4)) {

2097 
	`budñëe
(2);

2101 
pc0
 = 
ø
;

2102 
	}
}

2104 
	$psxBios_InôCARD
() {

2105 #ifde‡
PSXBIOS_LOG


2106 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosB0n
[0x4a], 
a0
);

2109 
C¨dSèã
 = 0;

2111 
pc0
 = 
ø
;

2112 
	}
}

2114 
	$psxBios_SèπCARD
() {

2115 #ifde‡
PSXBIOS_LOG


2116 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x4b]);

2119 i‡(
C¨dSèã
 == 0) CardState = 1;

2121 
pc0
 = 
ø
;

2122 
	`Re£tIoCy˛e
();

2123 
	}
}

2125 
	$psxBios_St›CARD
() {

2126 #ifde‡
PSXBIOS_LOG


2127 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x4c]);

2130 i‡(
C¨dSèã
 == 1) CardState = 0;

2132 
pc0
 = 
ø
;

2133 
	}
}

2135 
	$psxBios__ˇrd_wrôe
() {

2136 c⁄° *
∑2
 = 
Ra2
;

2137 
p‹t
;

2139 #ifde‡
PSXBIOS_LOG


2140 
	`PSXBIOS_LOG
("psxBios_%s: %x,%x,%x\n", 
biosB0n
[0x4e], 
a0
, 
a1
, 
a2
);

2143 
ˇrd_a˘ive_ch™
 = 
a0
;

2144 
p‹t
 = 
a0
 >> 4;

2146 i‡(
∑2
) {

2147 
	`sioMcdWrôe
(((
p‹t
 =0Ë? 
MCD1
 : 
MCD2
), 
∑2
, 
a1
 * 128, 128);

2150 
	`DñivîEvít
(0x11, 0x2);

2153 
v0
 = 1; 
pc0
 = 
ø
;

2154 
	}
}

2156 
	$psxBios__ˇrd_ªad
() {

2157 *
∑2
 = 
Ra2
;

2158 
p‹t
;

2160 #ifde‡
PSXBIOS_LOG


2161 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x4f]);

2164 
ˇrd_a˘ive_ch™
 = 
a0
;

2165 
p‹t
 = 
a0
 >> 4;

2167 i‡(
∑2
) {

2168 
	`sioMcdRód
(((
p‹t
 =0Ë? 
MCD1
 : 
MCD2
), 
∑2
, 
a1
 * 128, 128);

2171 
	`DñivîEvít
(0x11, 0x2);

2174 
v0
 = 1; 
pc0
 = 
ø
;

2175 
	}
}

2177 
	$psxBios__√w_ˇrd
() {

2178 #ifde‡
PSXBIOS_LOG


2179 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x50]);

2182 
pc0
 = 
ø
;

2183 
	}
}

2185 
	$psxBios_Krom2RawAdd
() {

2186 
i
 = 0;

2188 c⁄° 
u32
 
èbÀ_8140
[][2] = {

2201 c⁄° 
u32
 
èbÀ_889f
[][2] = {

2213 i‡(
a0
 >= 0x8140 &&á0 <= 0x84be) {

2214 
èbÀ_8140
[
i
][0] <
a0
) i++;

2215 
a0
 -
èbÀ_8140
[
i
 - 1][0];

2216 
v0
 = 0xbfc66000 + (
a0
 * 0x1ê+ 
èbÀ_8140
[
i
 - 1][1]);

2217 } i‡(
a0
 >= 0x889f &&á0 <= 0x9872) {

2218 
èbÀ_889f
[
i
][0] <
a0
) i++;

2219 
a0
 -
èbÀ_889f
[
i
 - 1][0];

2220 
v0
 = 0xbfc66000 + (
a0
 * 0x1ê+ 
èbÀ_889f
[
i
 - 1][1]);

2222 
v0
 = 0xffffffff;

2225 
pc0
 = 
ø
;

2226 
	}
}

2228 
	$psxBios_GëC0TabÀ
() {

2229 #ifde‡
PSXBIOS_LOG


2230 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x56]);

2233 
v0
 = 0x674;

2234 
pc0
 = 
ø
;

2235 
	}
}

2237 
	$psxBios_GëB0TabÀ
() {

2238 #ifde‡
PSXBIOS_LOG


2239 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x57]);

2242 
v0
 = 0x874;

2243 
pc0
 = 
ø
;

2244 
	}
}

2246 
	$psxBios__ˇrd_ch™
() {

2247 #ifde‡
PSXBIOS_LOG


2248 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x58]);

2251 
v0
 = 
ˇrd_a˘ive_ch™
;

2252 
pc0
 = 
ø
;

2253 
	}
}

2255 
	$psxBios__ˇrd_waô
() {

2256 #ifde‡
PSXBIOS_LOG


2257 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x5d]);

2260 
pc0
 = 
ø
;

2261 
	}
}

2264 
	$psxBios_Ch™geCÀ¨Pad
() {

2265 #ifde‡
PSXBIOS_LOG


2266 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosB0n
[0x5b], 
a0
);

2269 
pc0
 = 
ø
;

2270 
	}
}

2272 
	$psxBios__ˇrd_°©us
() {

2273 #ifde‡
PSXBIOS_LOG


2274 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosB0n
[0x5c], 
a0
);

2277 
v0
 = 1;

2278 
pc0
 = 
ø
;

2279 
	}
}

2287 
	$psxBios_SysEnqI¡RP
() {

2288 #ifde‡
PSXBIOS_LOG


2289 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosC0n
[0x02] ,
a0
);

2292 
SysI¡RP
[
a0
] = 
a1
;

2294 
v0
 = 0;

2295 
pc0
 = 
ø
;

2296 
	}
}

2302 
	$psxBios_SysDeqI¡RP
() {

2303 #ifde‡
PSXBIOS_LOG


2304 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosC0n
[0x03], 
a0
);

2307 
SysI¡RP
[
a0
] = 0;

2309 
v0
 = 0;

2310 
pc0
 = 
ø
;

2311 
	}
}

2313 
	$psxBios_Ch™geCÀ¨RC¡
() {

2314 
u32
 *
±r
;

2316 #ifde‡
PSXBIOS_LOG


2317 
	`PSXBIOS_LOG
("psxBios_%s: %x, %x\n", 
biosC0n
[0x0a], 
a0
, 
a1
);

2320 
±r
 = (
u32
*)
	`PSXM
((
a0
 << 2) + 0x8600);

2321 
v0
 = *
±r
;

2322 *
±r
 = 
a1
;

2325 
pc0
 = 
ø
;

2327 
	}
}

2329 
	$psxBios_dummy
() {

2330 #ifde‡
PSXBIOS_LOG


2331 
	`PSXBIOS_LOG
("unk %x cÆl: %x\n", 
pc0
 & 0x1fffff, 
t1
);

2333 
pc0
 = 
ø
;

2334 
	}
}

2336 (*
biosA0
[256])();

2337 (*
biosB0
[256])();

2338 (*
biosC0
[256])();

2340 
	~"sjisf⁄t.h
"

2342 
	$psxBiosInô
() {

2343 
u32
 
ba£
, 
size
;

2344 
u32
 *
±r
;

2345 
i
;

2346 
uL⁄gf
 
Àn
;

2348 
i
 = 0; i < 256; i++) {

2349 
biosA0
[
i
] = 
NULL
;

2350 
biosB0
[
i
] = 
NULL
;

2351 
biosC0
[
i
] = 
NULL
;

2353 
biosA0
[0x3e] = 
psxBios_puts
;

2354 
biosA0
[0x3f] = 
psxBios_¥ötf
;

2356 
biosB0
[0x3d] = 
psxBios_putch¨
;

2357 
biosB0
[0x3f] = 
psxBios_puts
;

2359 i‡(!
C⁄fig
.
HLE
) ;

2361 
i
 = 0; i < 256; i++) {

2362 i‡(
biosA0
[
i
] =
NULL
ËbiosA0[i] = 
psxBios_dummy
;

2363 i‡(
biosB0
[
i
] =
NULL
ËbiosB0[i] = 
psxBios_dummy
;

2364 i‡(
biosC0
[
i
] =
NULL
ËbiosC0[i] = 
psxBios_dummy
;

2367 
biosA0
[0x00] = 
psxBios_›í
;

2368 
biosA0
[0x01] = 
psxBios_l£ek
;

2369 
biosA0
[0x02] = 
psxBios_ªad
;

2370 
biosA0
[0x03] = 
psxBios_wrôe
;

2371 
biosA0
[0x04] = 
psxBios_˛o£
;

2381 
biosA0
[0x0e] = 
psxBios_abs
;

2382 
biosA0
[0x0f] = 
psxBios_œbs
;

2383 
biosA0
[0x10] = 
psxBios_©oi
;

2384 
biosA0
[0x11] = 
psxBios_©ﬁ
;

2386 
biosA0
[0x13] = 
psxBios_£tjmp
;

2387 
biosA0
[0x14] = 
psxBios_l⁄gjmp
;

2388 
biosA0
[0x15] = 
psxBios_°rˇt
;

2389 
biosA0
[0x16] = 
psxBios_°∫ˇt
;

2390 
biosA0
[0x17] = 
psxBios_°rcmp
;

2391 
biosA0
[0x18] = 
psxBios_°∫cmp
;

2392 
biosA0
[0x19] = 
psxBios_°r˝y
;

2393 
biosA0
[0x1a] = 
psxBios_°∫˝y
;

2394 
biosA0
[0x1b] = 
psxBios_°æí
;

2395 
biosA0
[0x1c] = 
psxBios_ödex
;

2396 
biosA0
[0x1d] = 
psxBios_rödex
;

2397 
biosA0
[0x1e] = 
psxBios_°rchr
;

2398 
biosA0
[0x1f] = 
psxBios_°ºchr
;

2399 
biosA0
[0x20] = 
psxBios_°Ωbrk
;

2400 
biosA0
[0x21] = 
psxBios_°r•n
;

2401 
biosA0
[0x22] = 
psxBios_°rc•n
;

2402 
biosA0
[0x23] = 
psxBios_°πok
;

2403 
biosA0
[0x24] = 
psxBios_°r°r
;

2404 
biosA0
[0x25] = 
psxBios_touµî
;

2405 
biosA0
[0x26] = 
psxBios_tﬁowî
;

2406 
biosA0
[0x27] = 
psxBios_bc›y
;

2407 
biosA0
[0x28] = 
psxBios_bzîo
;

2408 
biosA0
[0x29] = 
psxBios_bcmp
;

2409 
biosA0
[0x2a] = 
psxBios_mem˝y
;

2410 
biosA0
[0x2b] = 
psxBios_mem£t
;

2411 
biosA0
[0x2c] = 
psxBios_memmove
;

2412 
biosA0
[0x2d] = 
psxBios_memcmp
;

2413 
biosA0
[0x2e] = 
psxBios_memchr
;

2414 
biosA0
[0x2f] = 
psxBios_ønd
;

2415 
biosA0
[0x30] = 
psxBios_§™d
;

2416 
biosA0
[0x31] = 
psxBios_qs‹t
;

2418 
biosA0
[0x33] = 
psxBios_mÆloc
;

2419 
biosA0
[0x34] = 
psxBios_‰ì
;

2422 
biosA0
[0x37] = 
psxBios_ˇŒoc
;

2423 
biosA0
[0x38] = 
psxBios_ªÆloc
;

2424 
biosA0
[0x39] = 
psxBios_InôHóp
;

2426 
biosA0
[0x3b] = 
psxBios_gëch¨
;

2427 
biosA0
[0x3c] = 
psxBios_putch¨
;

2431 
biosA0
[0x42] = 
psxBios_Lﬂd
;

2432 
biosA0
[0x43] = 
psxBios_Exec
;

2433 
biosA0
[0x44] = 
psxBios_FlushCache
;

2435 
biosA0
[0x46] = 
psxBios_GPU_dw
;

2436 
biosA0
[0x47] = 
psxBios_mem2vøm
;

2437 
biosA0
[0x48] = 
psxBios_SídGPU
;

2438 
biosA0
[0x49] = 
psxBios_GPU_cw
;

2439 
biosA0
[0x4a] = 
psxBios_GPU_cwb
;

2440 
biosA0
[0x4b] = 
psxBios_GPU_SídPackës
;

2441 
biosA0
[0x4c] = 
psxBios_sys_a0_4c
;

2442 
biosA0
[0x4d] = 
psxBios_GPU_GëGPUSètus
;

2446 
biosA0
[0x51] = 
psxBios_LﬂdExec
;

2477 
biosA0
[0x70] = 
psxBios__bu_öô
;

2478 
biosA0
[0x71] = 
psxBios__96_öô
;

2479 
biosA0
[0x72] = 
psxBios__96_ªmove
;

2524 
biosA0
[0x9f] = 
psxBios_SëMem
;

2536 
biosA0
[0xab] = 
psxBios__ˇrd_öfo
;

2537 
biosA0
[0xac] = 
psxBios__ˇrd_lﬂd
;

2549 
biosB0
[0x02] = 
psxBios_SëRC¡
;

2550 
biosB0
[0x03] = 
psxBios_GëRC¡
;

2551 
biosB0
[0x04] = 
psxBios_SèπRC¡
;

2552 
biosB0
[0x05] = 
psxBios_St›RC¡
;

2553 
biosB0
[0x06] = 
psxBios_Re£tRC¡
;

2554 
biosB0
[0x07] = 
psxBios_DñivîEvít
;

2555 
biosB0
[0x08] = 
psxBios_O≥nEvít
;

2556 
biosB0
[0x09] = 
psxBios_Clo£Evít
;

2557 
biosB0
[0x0a] = 
psxBios_WaôEvít
;

2558 
biosB0
[0x0b] = 
psxBios_Te°Evít
;

2559 
biosB0
[0x0c] = 
psxBios_E«bÀEvít
;

2560 
biosB0
[0x0d] = 
psxBios_DißbÀEvít
;

2561 
biosB0
[0x0e] = 
psxBios_O≥nTh
;

2562 
biosB0
[0x0f] = 
psxBios_Clo£Th
;

2563 
biosB0
[0x10] = 
psxBios_Ch™geTh
;

2565 
biosB0
[0x12] = 
psxBios_InôPAD
;

2566 
biosB0
[0x13] = 
psxBios_SèπPAD
;

2567 
biosB0
[0x14] = 
psxBios_St›PAD
;

2568 
biosB0
[0x15] = 
psxBios_PAD_öô
;

2569 
biosB0
[0x16] = 
psxBios_PAD_dr
;

2570 
biosB0
[0x17] = 
psxBios_Rëu∫FromEx˚±i⁄
;

2571 
biosB0
[0x18] = 
psxBios_Re£tE¡ryI¡
;

2572 
biosB0
[0x19] = 
psxBios_HookE¡ryI¡
;

2579 
biosB0
[0x20] = 
psxBios_UnDñivîEvít
;

2597 
biosB0
[0x32] = 
psxBios_›í
;

2598 
biosB0
[0x33] = 
psxBios_l£ek
;

2599 
biosB0
[0x34] = 
psxBios_ªad
;

2600 
biosB0
[0x35] = 
psxBios_wrôe
;

2601 
biosB0
[0x36] = 
psxBios_˛o£
;

2607 
biosB0
[0x3c] = 
psxBios_gëch¨
;

2610 
biosB0
[0x41] = 
psxBios_f‹m©
;

2611 
biosB0
[0x42] = 
psxBios_fú°fûe
;

2612 
biosB0
[0x43] = 
psxBios_√xtfûe
;

2613 
biosB0
[0x44] = 
psxBios_ª«me
;

2614 
biosB0
[0x45] = 
psxBios_dñëe
;

2619 
biosB0
[0x4a] = 
psxBios_InôCARD
;

2620 
biosB0
[0x4b] = 
psxBios_SèπCARD
;

2621 
biosB0
[0x4c] = 
psxBios_St›CARD
;

2623 
biosB0
[0x4e] = 
psxBios__ˇrd_wrôe
;

2624 
biosB0
[0x4f] = 
psxBios__ˇrd_ªad
;

2625 
biosB0
[0x50] = 
psxBios__√w_ˇrd
;

2626 
biosB0
[0x51] = 
psxBios_Krom2RawAdd
;

2631 
biosB0
[0x56] = 
psxBios_GëC0TabÀ
;

2632 
biosB0
[0x57] = 
psxBios_GëB0TabÀ
;

2633 
biosB0
[0x58] = 
psxBios__ˇrd_ch™
;

2636 
biosB0
[0x5b] = 
psxBios_Ch™geCÀ¨Pad
;

2637 
biosB0
[0x5c] = 
psxBios__ˇrd_°©us
;

2638 
biosB0
[0x5d] = 
psxBios__ˇrd_waô
;

2642 
biosC0
[0x02] = 
psxBios_SysEnqI¡RP
;

2643 
biosC0
[0x03] = 
psxBios_SysDeqI¡RP
;

2650 
biosC0
[0x0a] = 
psxBios_Ch™geCÀ¨RC¡
;

2671 
ba£
 = 0x1000;

2672 
size
 = (
EvCB
) * 32;

2673 
Evít
 = (
EvCB
 *)&
psxR
[
ba£
]; ba£+
size
*6;

2674 
	`mem£t
(
Evít
, 0, 
size
 * 6);

2675 
HwEV
 = 
Evít
;

2676 
EvEV
 = 
Evít
 + 32;

2677 
RcEV
 = 
Evít
 + 32*2;

2678 
UeEV
 = 
Evít
 + 32*3;

2679 
SwEV
 = 
Evít
 + 32*4;

2680 
ThEV
 = 
Evít
 + 32*5;

2682 
±r
 = (
u32
*)&
psxM
[0x0874];

2683 
±r
[0] = 
	`SWAPu32
(0x4c54 - 0x884);

2685 
±r
 = (
u32
*)&
psxM
[0x0674];

2686 
±r
[6] = 
	`SWAPu32
(0xc80);

2688 
	`mem£t
(
SysI¡RP
, 0, (SysIntRP));

2689 
	`mem£t
(
Thªad
, 0, (Thread));

2690 
Thªad
[0].
°©us
 = 2;

2692 
jmp_öt
 = 
NULL
;

2693 
∑d_buf
 = 
NULL
;

2694 
∑d_buf1
 = 
NULL
;

2695 
∑d_buf2
 = 
NULL
;

2696 
∑d_buf1Àn
 = 
∑d_buf2Àn
 = 0;

2697 
hóp_addr
 = 
NULL
;

2698 
hóp_íd
 = 
NULL
;

2699 
C¨dSèã
 = -1;

2700 
CurThªad
 = 0;

2701 
	`mem£t
(
FDesc
, 0, (FDesc));

2702 
ˇrd_a˘ive_ch™
 = 0;

2704 
	`psxMu32ªf
(0x0150Ë
	`SWAPu32
(0x160);

2705 
	`psxMu32ªf
(0x0154Ë
	`SWAPu32
(0x320);

2706 
	`psxMu32ªf
(0x0160Ë
	`SWAPu32
(0x248);

2707 
	`°r˝y
((*)&
psxM
[0x248], "bu");

2715 
	`psxRu32ªf
(0x0000Ë
	`SWAPu32
((0x3b << 26) | 4);

2716 
	`psxMu32ªf
(0x0000Ë
	`SWAPu32
((0x3b << 26) | 0);

2717 
	`psxMu32ªf
(0x00a0Ë
	`SWAPu32
((0x3b << 26) | 1);

2718 
	`psxMu32ªf
(0x00b0Ë
	`SWAPu32
((0x3b << 26) | 2);

2719 
	`psxMu32ªf
(0x00c0Ë
	`SWAPu32
((0x3b << 26) | 3);

2720 
	`psxMu32ªf
(0x4c54Ë
	`SWAPu32
((0x3b << 26) | 0);

2721 
	`psxMu32ªf
(0x8000Ë
	`SWAPu32
((0x3b << 26) | 5);

2722 
	`psxMu32ªf
(0x07a0Ë
	`SWAPu32
((0x3b << 26) | 0);

2723 
	`psxMu32ªf
(0x0884Ë
	`SWAPu32
((0x3b << 26) | 0);

2724 
	`psxMu32ªf
(0x0894Ë
	`SWAPu32
((0x3b << 26) | 0);

2727 
	`psxMu32ªf
(0x6c80Ë
	`SWAPu32
(0x000085c8);

2730 
	`psxMu32ªf
(0x9010Ë
	`SWAPu32
(0xac20cc00);

2733 
Àn
 = 0x80000 - 0x66000;

2734 
	`uncom¥ess
((
Byãf
 *)(
psxR
 + 0x66000), &
Àn
, 
f⁄t_8140
, (font_8140));

2735 
Àn
 = 0x80000 - 0x69d68;

2736 
	`uncom¥ess
((
Byãf
 *)(
psxR
 + 0x69d68), &
Àn
, 
f⁄t_889f
, (font_889f));

2739 
	`psxHu32ªf
(0x1060Ë
	`SWAPu32
(0x00000b88);

2740 
	}
}

2742 
	$psxBiosShutdown
() {

2743 
	}
}

2746 
	#psxBios_PADpﬁl
(
∑d
) { \

2747 
PAD
##
∑d
##
	`_°¨tPﬁl
(); \

2748 
∑d_buf
##
∑d
[0] = 0; \

2749 
∑d_buf
##
∑d
[1] = 
PAD
##∑d##
	`_pﬁl
(); \

2750 i‡(!(
∑d_buf
##
∑d
[1] & 0x0f)) { \

2751 
bufcou¡
 = 32; \

2753 
bufcou¡
 = (
∑d_buf
##
∑d
[1] & 0x0f) * 2; \

2755 
PAD
##
∑d
##
	`_pﬁl
(); \

2756 
i
 = 2; \

2757 
bufcou¡
--) { \

2758 
∑d_buf
##
∑d
[
i
++] = 
PAD
##∑d##
	`_pﬁl
(); \

2760 }

	)

2762 
	$biosI¡îru±
() {

2763 
i
,
bufcou¡
;

2765 i‡(
∑d_buf
 !
NULL
) {

2766 
u32
 *
buf
 = (u32*)
∑d_buf
;

2768 
	`PAD1_°¨tPﬁl
();

2769 i‡(
	`PAD1_pﬁl
() == 0x23) {

2770 
	`PAD1_pﬁl
();

2771 *
buf
 = 
	`PAD1_pﬁl
() << 8;

2772 *
buf
|
	`PAD1_pﬁl
();

2773 
	`PAD1_pﬁl
();

2774 *
buf
&~((
	`PAD1_pﬁl
()>0x20)?1<<6:0);

2775 *
buf
&~((
	`PAD1_pﬁl
()>0x20)?1<<7:0);

2777 
	`PAD1_pﬁl
();

2778 *
buf
 = 
	`PAD1_pﬁl
() << 8;

2779 *
buf
|
	`PAD1_pﬁl
();

2782 
	`PAD2_°¨tPﬁl
();

2783 i‡(
	`PAD2_pﬁl
() == 0x23) {

2784 
	`PAD2_pﬁl
();

2785 *
buf
|
	`PAD2_pﬁl
() << 24;

2786 *
buf
|
	`PAD2_pﬁl
() << 16;

2787 
	`PAD2_pﬁl
();

2788 *
buf
&~((
	`PAD2_pﬁl
()>0x20)?1<<22:0);

2789 *
buf
&~((
	`PAD2_pﬁl
()>0x20)?1<<23:0);

2791 
	`PAD2_pﬁl
();

2792 *
buf
|
	`PAD2_pﬁl
() << 24;

2793 *
buf
|
	`PAD2_pﬁl
() << 16;

2797 i‡(!
∑d_°›≥d
) {

2798 i‡(
∑d_buf1
) {

2799 
	`psxBios_PADpﬁl
(1);

2802 i‡(
∑d_buf2
) {

2803 
	`psxBios_PADpﬁl
(2);

2807 i‡(
	`psxHu32
(0x1070) & 0x1) {

2808 i‡(
RcEV
[3][1].
°©us
 =
EvStACTIVE
) {

2809 
	`so·CÆl
(
RcEV
[3][1].
fh™dÀr
);

2813 i‡(
	`psxHu32
(0x1070) & 0x70) {

2814 
i
=0; i<3; i++) {

2815 i‡(
	`psxHu32
(0x1070Ë& (1 << (
i
+4))) {

2816 i‡(
RcEV
[
i
][1].
°©us
 =
EvStACTIVE
) {

2817 
	`so·CÆl
(
RcEV
[
i
][1].
fh™dÀr
);

2819 
	`psxHwWrôe32
(0x1f801070, ~(1 << (
i
+4)));

2820 
	`Re£tIoCy˛e
();

2824 
	}
}

2826 
	$psxBiosEx˚±i⁄
() {

2827 
i
;

2829 
psxRegs
.
CP0
.
n
.
Cau£
 & 0x3c) {

2831 
öãºu±_r26
=
psxRegs
.
CP0
.
n
.
EPC
;

2832 
	`SaveRegs
();

2834 
•
 = 
	`psxMu32
(0x6c80);

2836 
	`biosI¡îru±
();

2838 
i
=0; i<8; i++) {

2839 i‡(
SysI¡RP
[
i
]) {

2840 
u32
 *
queue
 = (u32*)
	`PSXM
(
SysI¡RP
[
i
]);

2842 
s0
 = 
queue
[2];

2843 
	`so·CÆl
(
queue
[1]);

2847 i‡(
jmp_öt
 !
NULL
) {

2849 
	`psxHwWrôe32
(0x1f801070, 0xffffffff);

2850 
	`Re£tIoCy˛e
();

2852 
ø
 = 
jmp_öt
[0];

2853 
•
 = 
jmp_öt
[1];

2854 
Â
 = 
jmp_öt
[2];

2855 
i
=0; i<8; i++)

2856 
psxRegs
.
GPR
.
r
[16+
i
] = 
jmp_öt
[3+i];

2857 
gp
 = 
jmp_öt
[11];

2859 
v0
 = 1;

2860 
pc0
 = 
ø
;

2863 
	`psxHwWrôe16
(0x1f801070, 0);

2864 
	`Re£tIoCy˛e
();

2868 
a0
) {

2870 
psxRegs
.
CP0
.
n
.
Sètus
&=~0x404;

2875 
psxRegs
.
CP0
.
n
.
Sètus
|= 0x404;

2878 
	`Re£tIoCy˛e
();

2879 
pc0
 = 
psxRegs
.
CP0
.
n
.
EPC
 + 4;

2880 
k0
 = 
pc0
;

2882 
psxRegs
.
CP0
.
n
.
Sètus
 = (psxRegs.CP0.n.Status & 0xfffffff0) |

2883 ((
psxRegs
.
CP0
.
n
.
Sètus
 & 0x3c) >> 2);

2884 
	`Re£tIoCy˛e
();

2891 
pc0
 = 
psxRegs
.
CP0
.
n
.
EPC
;

2892 i‡(
psxRegs
.
CP0
.
n
.
Cau£
 & 0x80000000Ë
pc0
+=4;

2894 
psxRegs
.
CP0
.
n
.
Sètus
 = (psxRegs.CP0.n.Status & 0xfffffff0) |

2895 ((
psxRegs
.
CP0
.
n
.
Sètus
 & 0x3c) >> 2);

2896 
	`Re£tIoCy˛e
();

2897 
	}
}

2899 
	#b‰ìze
(
±r
, 
size
) { \

2900 i‡(
Mode
 =1Ë
	`mem˝y
(&
psxR
[
ba£
], 
±r
, 
size
); \

2901 i‡(
Mode
 =0Ë
	`mem˝y
(
±r
, &
psxR
[
ba£
], 
size
); \

2902 
ba£
 +
size
; \

2903 }

	)

2905 
	#b‰ìzes
(
±r
Ë
	`b‰ìze
’å, ’å))

	)

2906 
	#b‰ìzñ
(
±r
Ë
	`b‰ìze
’å, (*±r))

	)

2908 
	#b‰ìzïsxM±r
(
±r
, 
ty≥
) { \

2909 i‡(
Mode
 == 1) { \

2910 i‡(
±r
Ë
	`psxRu32ªf
(
ba£
Ë
	`SWAPu32
((
s8
 *)’åË- 
psxM
); \

2911 
	`psxRu32ªf
(
ba£
) = 0; \

2913 i‡(
	`psxRu32
(
ba£
Ë!0Ë
±r
 = (
ty≥
 *)(
psxM
 +ÖsxRu32(base)); \

2914 (
±r
Ë
NULL
; \

2916 
ba£
 +(
u32
); \

2917 }

	)

2919 
	$psxBiosFªeze
(
Mode
) {

2920 
u32
 
ba£
 = 0x40000;

2922 
∑d_°›≥d
 = 0;

2923 
	`b‰ìzïsxM±r
(
jmp_öt
, 
u32
);

2924 
	`b‰ìzïsxM±r
(
∑d_buf
, );

2925 
	`b‰ìzïsxM±r
(
∑d_buf1
, );

2926 
	`b‰ìzïsxM±r
(
∑d_buf2
, );

2927 
	`b‰ìzïsxM±r
(
hóp_addr
, 
u32
);

2928 
	`b‰ìzñ
(&
∑d_buf1Àn
);

2929 
	`b‰ìzñ
(&
∑d_buf2Àn
);

2930 
	`b‰ìzes
(
ªgs
);

2931 
	`b‰ìzes
(
SysI¡RP
);

2932 
	`b‰ìzñ
(&
C¨dSèã
);

2933 
	`b‰ìzes
(
Thªad
);

2934 
	`b‰ìzñ
(&
CurThªad
);

2935 
	`b‰ìzes
(
FDesc
);

2936 
	`b‰ìzñ
(&
ˇrd_a˘ive_ch™
);

2937 
	}
}

	@src/psxbios.h

21 #i‚de‡
__PSXBIOS_H__


22 
	#__PSXBIOS_H__


	)

24 
	~"psxcomm⁄.h
"

25 
	~"r3000a.h
"

26 
	~"psxmem.h
"

27 
	~"misc.h
"

28 
	~"sio.h
"

30 #ifde‡
PSXBIOS_LOG


31 *
biosA0n
[256];

32 *
biosB0n
[256];

33 *
biosC0n
[256];

36 
psxBiosInô
();

37 
psxBiosShutdown
();

38 
psxBiosEx˚±i⁄
();

39 
psxBiosFªeze
(
Mode
);

41 (*
biosA0
[256])();

42 (*
biosB0
[256])();

43 (*
biosC0
[256])();

	@src/psxcommon.cpp

21 
	~"psxcomm⁄.h
"

22 
	~"∂ugö_lib/∂ugö_lib.h
"

24 
	$EmuUpd©e
()

26 
	`∂_‰ame_limô
();

30 
	`∑d_upd©e
();

31 
	}
}

	@src/psxcommon.h

26 #i‚de‡
__PSXCOMMON_H__


27 
	#__PSXCOMMON_H__


	)

30 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<°d¨g.h
>

33 
	~<°döt.h
>

34 
	~<°dlib.h
>

35 
	~<m©h.h
>

36 
	~<time.h
>

37 
	~<˘y≥.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<as£π.h
>

42 
	~"p‹t.h
"

45 
öt8_t
 
	ts8
;

46 
öt16_t
 
	ts16
;

47 
öt32_t
 
	ts32
;

48 
öt64_t
 
	ts64
;

49 
öçå_t
 
	t•å
;

51 
uöt8_t
 
	tu8
;

52 
uöt16_t
 
	tu16
;

53 
uöt32_t
 
	tu32
;

54 
uöt64_t
 
	tu64
;

55 
uöçå_t
 
	tu±r
;

57 
uöt8_t
 
	tboﬁón
;

59 #i‚de‡
TRUE


60 
	#TRUE
 1

	)

63 #i‚de‡
FALSE


64 
	#FALSE
 0

	)

67 #i‚de‡
PACKAGE_VERSION


68 
	#PACKAGE_VERSION
 "1.9"

	)

71 #i‚de‡
MAXPATHLEN


72 
	#MAXPATHLEN
 256

	)

76 
	mPSXTYPE_NTSC
 = 0,

77 
	mPSXTYPE_PAL
 = 1

84 
	mSPU_UPDATE_FREQ_MIN
 = 0,

85 
	mSPU_UPDATE_FREQ_1
 = 0,

86 
	mSPU_UPDATE_FREQ_2
 = 1,

87 
	mSPU_UPDATE_FREQ_4
 = 2,

88 
	mSPU_UPDATE_FREQ_8
 = 3,

89 
	mSPU_UPDATE_FREQ_16
 = 4,

90 
	mSPU_UPDATE_FREQ_32
 = 5,

91 
	mSPU_UPDATE_FREQ_MAX
 = 
SPU_UPDATE_FREQ_32


94 #i‚de‡
SPU_UPDATE_FREQ_DEFAULT


95 
	#SPU_UPDATE_FREQ_DEFAULT
 
SPU_UPDATE_FREQ_1


	)

101 
	mFORCED_XA_UPDATES_MIN
 = 0,

102 
	mFORCED_XA_UPDATES_OFF
 = 0,

103 
	mFORCED_XA_UPDATES_AUTO
 = 1,

104 
	mFORCED_XA_UPDATES_2
 = 2,

105 
	mFORCED_XA_UPDATES_4
 = 3,

106 
	mFORCED_XA_UPDATES_8
 = 4,

107 
	mFORCED_XA_UPDATES_16
 = 5,

108 
	mFORCED_XA_UPDATES_32
 = 6,

109 
	mFORCED_XA_UPDATES_MAX
 = 
FORCED_XA_UPDATES_32


112 #i‚de‡
FORCED_XA_UPDATES_DEFAULT


113 
	#FORCED_XA_UPDATES_DEFAULT
 
FORCED_XA_UPDATES_OFF


	)

117 
	mFRAMESKIP_MIN
 = -1,

118 
	mFRAMESKIP_AUTO
 = -1,

119 
	mFRAMESKIP_OFF
 = 0,

120 
	mFRAMESKIP_MAX
 = 3

124 
	mMcd1
[
MAXPATHLEN
];

125 
	mMcd2
[
MAXPATHLEN
];

126 
	mBios
[
MAXPATHLEN
];

127 
	mBiosDú
[
MAXPATHLEN
];

128 
	mLa°Dú
[
MAXPATHLEN
];

129 
	mP©chesDú
[
MAXPATHLEN
];

130 
boﬁón
 
	mXa
;

131 
boﬁón
 
	mMdec
;

132 
boﬁón
 
	mPsxAuto
;

133 
boﬁón
 
	mCdda
;

134 
boﬁón
 
	mHLE
;

135 
boﬁón
 
	mRC¡Fix
;

136 
boﬁón
 
	mVSyncWA
;

137 
u8
 
	mCpu
;

138 
u8
 
	mPsxTy≥
;

141 
boﬁón
 
	mSpuIrq
;

145 
boﬁón
 
	mSyncAudio
;

147 
s8
 
	mSpuUpd©eFªq
;

154 
s8
 
	mF‹˚dXAUpd©es
;

156 
boﬁón
 
	mShowFps
;

157 
boﬁón
 
	mFømeLimô
;

159 
s8
 
	mFømeSkù
;

162 
boﬁón
 
	mPîfm⁄C⁄sﬁeOuçut
;

163 
boﬁón
 
	mPîfm⁄DëaûedSèts
;

165 
boﬁón
 
	mA«logAºow
;

166 } 
	tPcsxC⁄fig
;

168 
PcsxC⁄fig
 
C⁄fig
;

173 
	sPcsxSaveFuncs
 {

174 *(*
	m›í
)(c⁄° *
	m«me
, 
boﬁón
 
	mwrôög
);

175 (*
	mªad
)(*
	mfûe
, *
	mbuf
, 
u32
 
	mÀn
);

176 (*
	mwrôe
)(*
	mfûe
, c⁄° *
	mbuf
, 
u32
 
	mÀn
);

177 (*
	m£ek
)(*
	mfûe
, 
	moffs
, 
	mwhí˚
);

178 (*
	m˛o£
)(*
	mfûe
);

180 #i‡!(
deföed
(
_WIN32
Ë&& !deföed(
__CYGWIN__
))

181 
	mfd
;

182 
	mlib_fd
;

187 #ifde‡
_˝lu•lus


190 
	eFªezeMode
 {

191 
FREEZE_LOAD
 = 0,

192 
FREEZE_SAVE
 = 1,

193 
FREEZE_INFO
 = 2

195 
‰ìze_rw
(*
fûe
, 
FªezeMode
 
mode
, *
buf
, 
Àn
);

196 #ifde‡
_˝lu•lus


200 
PcsxSaveFuncs
 
SaveFuncs
;

202 
	#BIAS
 2

	)

203 
	#PSXCLK
 33868800

	)

206 
	mPSX_TYPE_NTSC
 = 0,

207 
	mPSX_TYPE_PAL


211 
	mCPU_DYNAREC
 = 0,

212 
	mCPU_INTERPRETER


215 
EmuUpd©e
();

	@src/psxcounters.cpp

40 
	~"psxcou¡îs.h
"

41 
	~"psxevíts.h
"

42 
	~"gpu.h
"

48 
	mRc0G©e
 = 0x0001,

49 
	mRc1G©e
 = 0x0001,

50 
	mRc2DißbÀ
 = 0x0001,

51 
	mRcUnknown1
 = 0x0002,

52 
	mRcUnknown2
 = 0x0004,

53 
	mRcCou¡ToT¨gë
 = 0x0008,

54 
	mRcIrqOnT¨gë
 = 0x0010,

55 
	mRcIrqOnOvîÊow
 = 0x0020,

56 
	mRcIrqRegíî©e
 = 0x0040,

57 
	mRcUnknown7
 = 0x0080,

58 
	mRc0PixñClock
 = 0x0100,

59 
	mRc1HSyncClock
 = 0x0100,

60 
	mRc2Unknown8
 = 0x0100,

61 
	mRc0Unknown9
 = 0x0200,

62 
	mRc1Unknown9
 = 0x0200,

63 
	mRc2O√EighthClock
 = 0x0200,

64 
	mRcUnknown10
 = 0x0400,

65 
	mRcCou¡EqT¨gë
 = 0x0800,

66 
	mRcOvîÊow
 = 0x1000,

67 
	mRcUnknown13
 = 0x2000,

68 
	mRcUnknown14
 = 0x4000,

69 
	mRcUnknown15
 = 0x8000,

72 c⁄° 
u32
 
	gCou¡îQu™tôy
 = 4;

73 c⁄° 
u32
 
	gCou¡ToOvîÊow
 = 0;

74 c⁄° 
u32
 
	gCou¡ToT¨gë
 = 1;

76 c⁄° 
u32
 
	gFømeR©e
[2] = { 60, 50 };

79 c⁄° 
u32
 
	gHSyncTŸÆ
[2] = { 263, 313 };

84 c⁄° 
u32
 
	gVBœnkSèπ
 = 240;

88 
R˙t
 
	gr˙ts
[ 
Cou¡îQu™tôy
 ];

90 
u32
 
	ghSyncCou¡
 = 0;

92 
u32
 
	g‰ame_cou¡î
 = 0;

93 
u32
 
	ghsync_°ïs
 = 0;

94 
u32
 
	gba£_cy˛e
 = 0;

95 
boﬁ
 
	gr˙tFªezeLﬂded
 = 
Ál£
;

99 
	#psxNextCou¡î
 
psxRegs
.
ötCy˛e
[
PSXINT_RCNT
].
cy˛e


	)

100 
	#psxNextsCou¡î
 
psxRegs
.
ötCy˛e
[
PSXINT_RCNT
].
sCy˛e


	)

104 
ölöe
 
	$£tIrq
–
u32
 
úq
 )

106 
	`psxHu32ªf
(0x1070Ë|
	`SWAPu32
(
úq
);

107 
	`Re£tIoCy˛e
();

108 
	}
}

111 
	#VERBOSE_LEVEL
 0

	)

113 
	$vîbo£Log
–
u32
 
Àvñ
, c⁄° *
°r
, ... )

115 #i‡
VERBOSE_LEVEL
 > 0

116 if–
Àvñ
 <
Vîbo£Levñ
 )

118 
va_li°
 
va
;

119 
buf
[ 4096 ];

121 
	`va_°¨t
–
va
, 
°r
 );

122 
	`v•rötf
–
buf
, 
°r
, 
va
 );

123 
	`va_íd
–
va
 );

125 
	`¥ötf
–"%s", 
buf
 );

126 
	`fÊush
–
°dout
 );

129 
	}
}

133 
INLINE
 
	$_psxR˙tWcou¡
–
u32
 
ödex
, u32 
vÆue
 )

135 if–
vÆue
 > 0xffff )

137 
	`vîbo£Log
–1, "[RCNT %i] wcou¡ > 0xffff: %x\n", 
ödex
, 
vÆue
 );

138 
vÆue
 &= 0xffff;

141 
r˙ts
[
ödex
].
cy˛eSèπ
 = 
psxRegs
.
cy˛e
;

142 
r˙ts
[
ödex
].
cy˛eSèπ
 -
vÆue
 *Ñ˙ts[ödex].
øã
;

145 if–
vÆue
 < 
r˙ts
[
ödex
].
èrgë
 )

147 
r˙ts
[
ödex
].
cy˛e
 =Ñ˙ts[ödex].
èrgë
 *Ñ˙ts[ödex].
øã
;

148 
r˙ts
[
ödex
].
cou¡îSèã
 = 
Cou¡ToT¨gë
;

152 
r˙ts
[
ödex
].
cy˛e
 = 0x10000 *Ñ˙ts[ödex].
øã
;

153 
r˙ts
[
ödex
].
cou¡îSèã
 = 
Cou¡ToOvîÊow
;

155 
	}
}

157 
ölöe
 
u32
 
	$_psxR˙tRcou¡
–
u32
 
ödex
 )

159 
u32
 
cou¡
;

161 
cou¡
 = 
psxRegs
.
cy˛e
;

162 
cou¡
 -
r˙ts
[
ödex
].
cy˛eSèπ
;

163 i‡(
r˙ts
[
ödex
].
øã
 > 1)

164 
cou¡
 /
r˙ts
[
ödex
].
øã
;

166 if–
cou¡
 > 0x10000 )

168 
	`vîbo£Log
–1, "[RCNT %i]Ñcou¡ > 0x10000: %x\n", 
ödex
, 
cou¡
 );

170 
cou¡
 &= 0xffff;

172  
cou¡
;

173 
	}
}

176 
	$_psxR˙tWmode
–
u32
 
ödex
, u32 
vÆue
 )

178 
r˙ts
[
ödex
].
mode
 = 
vÆue
;

180  
ödex
 )

183 if–
vÆue
 & 
Rc0PixñClock
 )

185 
r˙ts
[
ödex
].
øã
 = 5;

189 
r˙ts
[
ödex
].
øã
 = 1;

193 if–
vÆue
 & 
Rc1HSyncClock
 )

195 
r˙ts
[
ödex
].
øã
 = (
PSXCLK
 / (
FømeR©e
[
C⁄fig
.
PsxTy≥
] * 
HSyncTŸÆ
[Config.PsxType]));

199 
r˙ts
[
ödex
].
øã
 = 1;

203 if–
vÆue
 & 
Rc2O√EighthClock
 )

205 
r˙ts
[
ödex
].
øã
 = 8;

209 
r˙ts
[
ödex
].
øã
 = 1;

213 if–
vÆue
 & 
Rc2DißbÀ
 )

215 
r˙ts
[
ödex
].
øã
 = 0xffffffff;

219 
	}
}

223 
	$psxR˙tSë
()

225 
s32
 
cou¡ToUpd©e
;

226 
u32
 
i
;

228 
psxNextsCou¡î
 = 
psxRegs
.
cy˛e
;

229 
psxNextCou¡î
 = 0x7fffffff;

231  
i
 = 0; i < 
Cou¡îQu™tôy
; ++i )

233 
cou¡ToUpd©e
 = 
r˙ts
[
i
].
cy˛e
 - (
psxNextsCou¡î
 -Ñ˙ts[i].
cy˛eSèπ
);

235 if–
cou¡ToUpd©e
 < 0 )

237 
psxNextCou¡î
 = 0;

241 if–
cou¡ToUpd©e
 < (
s32
)
psxNextCou¡î
 )

243 
psxNextCou¡î
 = 
cou¡ToUpd©e
;

248 
	`psxEvqueueAdd
(
PSXINT_RCNT
, 
psxNextCou¡î
);

249 
	}
}

253 
	$psxR˙tRe£t
–
u32
 
ödex
 )

255 
u32
 
rcy˛es
;

257 
r˙ts
[
ödex
].
mode
 |
RcUnknown10
;

259 if–
r˙ts
[
ödex
].
cou¡îSèã
 =
Cou¡ToT¨gë
 )

261 
rcy˛es
 = 
psxRegs
.
cy˛e
 - 
r˙ts
[
ödex
].
cy˛eSèπ
;

262 if–
r˙ts
[
ödex
].
mode
 & 
RcCou¡ToT¨gë
 )

264 
rcy˛es
 -
r˙ts
[
ödex
].
èrgë
 *Ñ˙ts[ödex].
øã
;

265 
r˙ts
[
ödex
].
cy˛eSèπ
 = 
psxRegs
.
cy˛e
 - 
rcy˛es
;

269 
r˙ts
[
ödex
].
cy˛e
 = 0x10000 *Ñ˙ts[ödex].
øã
;

270 
r˙ts
[
ödex
].
cou¡îSèã
 = 
Cou¡ToOvîÊow
;

273 if–
r˙ts
[
ödex
].
mode
 & 
RcIrqOnT¨gë
 )

275 if–(
r˙ts
[
ödex
].
mode
 & 
RcIrqRegíî©e
Ë|| (!r˙ts[ödex].
úqSèã
) )

277 
	`vîbo£Log
–3, "[RCNT %i] irq\n", 
ödex
 );

278 
	`£tIrq
–
r˙ts
[
ödex
].
úq
 );

279 
r˙ts
[
ödex
].
úqSèã
 = 1;

283 
r˙ts
[
ödex
].
mode
 |
RcCou¡EqT¨gë
;

285 if–
rcy˛es
 < 0x10000 * 
r˙ts
[
ödex
].
øã
 )

289 if–
r˙ts
[
ödex
].
cou¡îSèã
 =
Cou¡ToOvîÊow
 )

291 
rcy˛es
 = 
psxRegs
.
cy˛e
 - 
r˙ts
[
ödex
].
cy˛eSèπ
;

292 
rcy˛es
 -0x10000 * 
r˙ts
[
ödex
].
øã
;

294 
r˙ts
[
ödex
].
cy˛eSèπ
 = 
psxRegs
.
cy˛e
 - 
rcy˛es
;

296 if–
rcy˛es
 < 
r˙ts
[
ödex
].
èrgë
 *Ñ˙ts[ödex].
øã
 )

298 
r˙ts
[
ödex
].
cy˛e
 =Ñ˙ts[ödex].
èrgë
 *Ñ˙ts[ödex].
øã
;

299 
r˙ts
[
ödex
].
cou¡îSèã
 = 
Cou¡ToT¨gë
;

302 if–
r˙ts
[
ödex
].
mode
 & 
RcIrqOnOvîÊow
 )

304 if–(
r˙ts
[
ödex
].
mode
 & 
RcIrqRegíî©e
Ë|| (!r˙ts[ödex].
úqSèã
) )

306 
	`vîbo£Log
–3, "[RCNT %i] irq\n", 
ödex
 );

307 
	`£tIrq
–
r˙ts
[
ödex
].
úq
 );

308 
r˙ts
[
ödex
].
úqSèã
 = 1;

312 
r˙ts
[
ödex
].
mode
 |
RcOvîÊow
;

314 
	}
}

316 
	$psxR˙tUpd©e
()

318 
u32
 
cy˛e
;

320 
cy˛e
 = 
psxRegs
.cycle;

323 if–
cy˛e
 - 
r˙ts
[0].
cy˛eSèπ
 >=Ñcnts[0].cycle )

325 
	`psxR˙tRe£t
( 0 );

329 if–
cy˛e
 - 
r˙ts
[1].
cy˛eSèπ
 >=Ñcnts[1].cycle )

331 
	`psxR˙tRe£t
( 1 );

335 if–
cy˛e
 - 
r˙ts
[2].
cy˛eSèπ
 >=Ñcnts[2].cycle )

337 
	`psxR˙tRe£t
( 2 );

341 if–
cy˛e
 - 
r˙ts
[3].
cy˛eSèπ
 >=Ñcnts[3].cycle )

343 
u32
 
À·ovî_cy˛es
 = 
cy˛e
 - 
r˙ts
[3].
cy˛eSèπ
 -Ñcnts[3].cycle;

344 
u32
 
√xt_vsync
;

346 
hSyncCou¡
 +
hsync_°ïs
;

349 if–
hSyncCou¡
 =
VBœnkSèπ
 )

351 
HW_GPU_STATUS
 &~
PSXGPU_LCF
;

353 #ifde‡
USE_GPULIB


354 
	`GPU_vBœnk
( 1, 0 );

356 
	`£tIrq
( 0x01 );

360 
	`EmuUpd©e
();

364 i‡(
r˙tFªezeLﬂded
) {

365 
r˙tFªezeLﬂded
 = 
Ál£
;

369 
	`GPU_upd©eLa˚
();

374 i‡(
C⁄fig
.
SpuUpd©eFªq
 =
SPU_UPDATE_FREQ_1
)

375 
	`SPU_async
(
cy˛e
, 1);

379 if–
hSyncCou¡
 >(
C⁄fig
.
VSyncWA
 ? 
HSyncTŸÆ
[C⁄fig.
PsxTy≥
]/
BIAS
 : HSyncTotal[Config.PsxType]) )

381 
hSyncCou¡
 = 0;

382 
‰ame_cou¡î
++;

384 
	`gpuSyncPlugöSR
();

385 if–(
HW_GPU_STATUS
 & 
PSXGPU_ILACE_BITS
) == PSXGPU_ILACE_BITS )

386 
HW_GPU_STATUS
 |
‰ame_cou¡î
 << 31;

388 #ifde‡
USE_GPULIB


389 
	`GPU_vBœnk
–0, 
HW_GPU_STATUS
 >> 31 );

394 
hsync_°ïs
 = 
HSyncTŸÆ
[
C⁄fig
.
PsxTy≥
] - 
hSyncCou¡
;

395 
√xt_vsync
 = 
VBœnkSèπ
 - 
hSyncCou¡
;

396 if–
√xt_vsync
 &&Çext_vsyn¯< 
hsync_°ïs
 )

397 
hsync_°ïs
 = 
√xt_vsync
;

399 
r˙ts
[3].
cy˛eSèπ
 = 
cy˛e
 - 
À·ovî_cy˛es
;

400 i‡(
C⁄fig
.
PsxTy≥
)

402 
ba£_cy˛e
 +
hsync_°ïs
 * 8864320;

405 
ba£_cy˛e
 +
hsync_°ïs
 * 8791293;

406 
r˙ts
[3].
cy˛e
 = 
ba£_cy˛e
 >> 12;

407 
ba£_cy˛e
 &= 0xfff;

410 
	`psxR˙tSë
();

411 
	}
}

415 
	$psxR˙tWcou¡
–
u32
 
ödex
, u32 
vÆue
 )

417 
	`vîbo£Log
–2, "[RCNT %i] wcou¡: %x\n", 
ödex
, 
vÆue
 );

419 
	`_psxR˙tWcou¡
–
ödex
, 
vÆue
 );

420 
	`psxR˙tSë
();

421 
	}
}

423 
	$psxR˙tWmode
–
u32
 
ödex
, u32 
vÆue
 )

425 
	`vîbo£Log
–1, "[RCNT %i] wmode: %x\n", 
ödex
, 
vÆue
 );

427 
	`_psxR˙tWmode
–
ödex
, 
vÆue
 );

428 
	`_psxR˙tWcou¡
–
ödex
, 0 );

430 
r˙ts
[
ödex
].
úqSèã
 = 0;

431 
	`psxR˙tSë
();

432 
	}
}

434 
	$psxR˙tWèrgë
–
u32
 
ödex
, u32 
vÆue
 )

436 
	`vîbo£Log
–1, "[RCNT %i] wèrgë: %x\n", 
ödex
, 
vÆue
 );

438 
r˙ts
[
ödex
].
èrgë
 = 
vÆue
;

440 
	`_psxR˙tWcou¡
–
ödex
, 
	`_psxR˙tRcou¡
( index ) );

441 
	`psxR˙tSë
();

442 
	}
}

446 
u32
 
	$psxR˙tRcou¡
–
u32
 
ödex
 )

448 
u32
 
cou¡
;

450 
cou¡
 = 
	`_psxR˙tRcou¡
–
ödex
 );

453 if–
C⁄fig
.
RC¡Fix
 ) {

454 if–
ödex
 == 2 ) {

455 if–
r˙ts
[
ödex
].
cou¡îSèã
 =
Cou¡ToT¨gë
 )

456 
cou¡
 /
BIAS
;

460 
	`vîbo£Log
–2, "[RCNT %i]Ñcou¡: %x\n", 
ödex
, 
cou¡
 );

462  
cou¡
;

463 
	}
}

465 
u32
 
	$psxR˙tRmode
–
u32
 
ödex
 )

467 
u16
 
mode
;

469 
mode
 = 
r˙ts
[
ödex
].mode;

470 
r˙ts
[
ödex
].
mode
 &= 0xe7ff;

472 
	`vîbo£Log
–2, "[RCNT %i]Ñmode: %x\n", 
ödex
, 
mode
 );

474  
mode
;

475 
	}
}

477 
u32
 
	$psxR˙tRèrgë
–
u32
 
ödex
 )

479 
	`vîbo£Log
–2, "[RCNT %i]Ñèrgë: %x\n", 
ödex
, 
r˙ts
[ödex].
èrgë
 );

481  
r˙ts
[
ödex
].
èrgë
;

482 
	}
}

486 
	$psxR˙tInô
()

488 
s32
 
i
;

491 
r˙ts
[0].
øã
 = 1;

492 
r˙ts
[0].
úq
 = 0x10;

495 
r˙ts
[1].
øã
 = 1;

496 
r˙ts
[1].
úq
 = 0x20;

499 
r˙ts
[2].
øã
 = 1;

500 
r˙ts
[2].
úq
 = 0x40;

503 
r˙ts
[3].
øã
 = 1;

504 
r˙ts
[3].
mode
 = 
RcCou¡ToT¨gë
;

505 
r˙ts
[3].
èrgë
 = (
PSXCLK
 / (
FømeR©e
[
C⁄fig
.
PsxTy≥
] * 
HSyncTŸÆ
[Config.PsxType]));

507  
i
 = 0; i < 
Cou¡îQu™tôy
; ++i )

509 
	`_psxR˙tWcou¡
–
i
, 0 );

512 
hSyncCou¡
 = 0;

513 
hsync_°ïs
 = 1;

515 
	`psxR˙tSë
();

516 
	}
}

520 
	$psxR˙tFªeze
(*
f
, 
FªezeMode
 
mode
)

524 
u32
 
•uSyncCou¡
 = 0;

526 i‡–
	`‰ìze_rw
(
f
, 
mode
, &
r˙ts
, (rcnts))

527 || 
	`‰ìze_rw
(
f
, 
mode
, &
hSyncCou¡
, (hSyncCount))

528 || 
	`‰ìze_rw
(
f
, 
mode
, &
•uSyncCou¡
, (spuSyncCount))

529 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxNextCou¡î
, (psxNextCounter))

530 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxNextsCou¡î
, (psxNextsCounter)) )

533 i‡(
mode
 =
FREEZE_LOAD
)

534 
	`psxR˙tInôFromFªeze
();

537 
	}
}

543 
	$psxR˙tInôFromFªeze
()

546 
i
 = 0; i < 
Cou¡îQu™tôy
; ++i)

548 
	`_psxR˙tWmode
–
i
, 
r˙ts
[i].
mode
 );

549 
u32
 
cou¡
 = (
psxRegs
.
cy˛e
 - 
r˙ts
[
i
].
cy˛eSèπ
Ë/Ñ˙ts[i].
øã
;

550 
	`_psxR˙tWcou¡
–
i
, 
cou¡
 );

552 
hsync_°ïs
 = (
psxRegs
.
cy˛e
 - 
r˙ts
[3].
cy˛eSèπ
Ë/Ñ˙ts[3].
èrgë
;

553 
	`psxR˙tSë
();

555 
ba£_cy˛e
 = 0;

558 
r˙tFªezeLﬂded
 = 
åue
;

559 
	}
}

564 
	$psxR˙tAdju°Time°amps
(c⁄° 
uöt32_t
 
¥ev_cy˛e_vÆ
)

566 
i
=0; i < 
Cou¡îQu™tôy
; ++i) {

567 
r˙ts
[
i
].
cy˛eSèπ
 -
¥ev_cy˛e_vÆ
;

569 
	}
}

	@src/psxcounters.h

22 #i‚de‡
__PSXCOUNTERS_H__


23 
	#__PSXCOUNTERS_H__


	)

25 
	~"psxcomm⁄.h
"

26 
	~"r3000a.h
"

27 
	~"psxmem.h
"

28 
	~"∂ugös.h
"

30 
u32
 
hSyncCou¡
, 
‰ame_cou¡î
;

32 c⁄° 
u32
 
FømeR©e
[2];

33 c⁄° 
u32
 
HSyncTŸÆ
[2];

35 
	sR˙t


37 
u16
 
	mmode
, 
	mèrgë
;

38 
u32
 
	møã
, 
	múq
, 
	mcou¡îSèã
, 
	múqSèã
;

39 
u32
 
	mcy˛e
, 
	mcy˛eSèπ
;

40 } 
	tR˙t
;

42 
psxR˙tInô
();

43 
psxR˙tUpd©e
();

45 
psxR˙tWcou¡
(
u32
 
ödex
, u32 
vÆue
);

46 
psxR˙tWmode
(
u32
 
ödex
, u32 
vÆue
);

47 
psxR˙tWèrgë
(
u32
 
ödex
, u32 
vÆue
);

49 
u32
 
psxR˙tRcou¡
(u32 
ödex
);

50 
u32
 
psxR˙tRmode
(u32 
ödex
);

51 
u32
 
psxR˙tRèrgë
(u32 
ödex
);

53 
psxR˙tFªeze
(* 
f
, 
FªezeMode
 
mode
);

54 
psxR˙tInôFromFªeze
();

56 
psxR˙tAdju°Time°amps
(c⁄° 
uöt32_t
 
¥ev_cy˛e_vÆ
);

	@src/psxdma.cpp

25 
	~"psxdma.h
"

26 
	~"gpu.h
"

32 
	$•uI¡îru±
() {

33 i‡(
HW_DMA4_CHCR
 & 
	`SWAP32
(0x01000000))

35 
HW_DMA4_CHCR
 &
	`SWAP32
(~0x01000000);

36 
	`DMA_INTERRUPT
(4);

38 
	}
}

41 
	$psxDma4
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
) {

42 
u16
 *
±r
;

43 
u32
 
w‹ds
;

45 
ch¸
) {

47 #ifde‡
PSXDMA_LOG


48 
	`PSXDMA_LOG
("*** DMA4 SPU - mem2•u *** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

50 
±r
 = (
u16
 *)
	`PSXM
(
madr
);

51 i‡(
±r
 =
NULL
) {

52 #ifde‡
CPU_LOG


53 
	`CPU_LOG
("*** DMA4 SPU - mem2spu *** NULL Pointer!!!\n");

57 
w‹ds
 = (
b¸
 >> 16) * (bcr & 0xffff);

59 
	`SPU_wrôeDMAMem
(
±r
, 
w‹ds
 * 2, 
psxRegs
.
cy˛e
);

61 
HW_DMA4_MADR
 = 
	`SWAPu32
(
madr
 + 
w‹ds
 * 4);

62 
	`SPUDMA_INT
(
w‹ds
 / 2);

66 #ifde‡
PSXDMA_LOG


67 
	`PSXDMA_LOG
("*** DMA4 SPU - spu2mem *** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

69 
±r
 = (
u16
 *)
	`PSXM
(
madr
);

70 i‡(
±r
 =
NULL
) {

71 #ifde‡
CPU_LOG


72 
	`CPU_LOG
("*** DMA4 SPU - spu2mem *** NULL Pointer!!!\n");

76 
w‹ds
 = (
b¸
 >> 16) * (bcr & 0xffff);

78 
	`SPU_ªadDMAMem
(
±r
, 
w‹ds
 * 2, 
psxRegs
.
cy˛e
);

80 #ifde‡
PSXREC


81 
psxCpu
->
	`CÀ¨
(
madr
, 
w‹ds
);

84 
HW_DMA4_MADR
 = 
	`SWAPu32
(
madr
 + 
w‹ds
 * 4);

85 
	`SPUDMA_INT
(
w‹ds
 / 2);

88 #ifde‡
PSXDMA_LOG


90 
	`PSXDMA_LOG
("*** DMA4 SPU - unknow¿*** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

95 
HW_DMA4_CHCR
 &
	`SWAP32
(~0x01000000);

96 
	`DMA_INTERRUPT
(4);

97 
	}
}

100 
ölöe
 
boﬁón
 
	$CheckF‹EndÀssLo›
(
u32
 
œddr
, u32 *
lU£dAddr
) {

101 i‡(
œddr
 =
lU£dAddr
[1]Ë 
TRUE
;

102 i‡(
œddr
 =
lU£dAddr
[2]Ë 
TRUE
;

104 i‡(
œddr
 < 
lU£dAddr
[0])ÜUsedAddr[1] =Üaddr;

105 
lU£dAddr
[2] = 
œddr
;

107 
lU£dAddr
[0] = 
œddr
;

109  
FALSE
;

110 
	}
}

112 
u32
 
	$gpuDmaChaöSize
(
u32
 
addr
) {

113 
u32
 
size
;

114 
u32
 
DMAComm™dCou¡î
 = 0;

115 
u32
 
lU£dAddr
[3];

117 
lU£dAddr
[0] =ÜUsedAddr[1] =ÜUsedAddr[2] = 0xffffff;

120 
size
 = 1;

123 
addr
 &= 0x1ffffc;

125 i‡(
DMAComm™dCou¡î
++ > 2000000) ;

126 i‡(
	`CheckF‹EndÀssLo›
(
addr
, 
lU£dAddr
)) ;

129 
size
 +
	`psxMu8
–
addr
 + 3 );

132 
addr
 = 
	`psxMu32
(áddr & ~0x3 ) & 0xffffff;

133 
size
 += 1;

134 } 
addr
 != 0xffffff);

136  
size
;

137 
	}
}

140 
	$psxDma2
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
) {

141 
u32
 *
±r
;

142 
u32
 
w‹ds
;

143 
u32
 
size
;

145 
ch¸
) {

147 #ifde‡
PSXDMA_LOG


148 
	`PSXDMA_LOG
("*** DMA2 GPU - vøm2mem *** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

150 
±r
 = (
u32
 *)
	`PSXM
(
madr
);

151 i‡(
±r
 =
NULL
) {

152 #ifde‡
CPU_LOG


153 
	`CPU_LOG
("*** DMA2 GPU - vram2mem *** NULL Pointer!!!\n");

158 
w‹ds
 = (
b¸
 >> 16) * (bcr & 0xffff);

159 
	`GPU_ªadD©aMem
(
±r
, 
w‹ds
);

160 #ifde‡
PSXREC


161 
psxCpu
->
	`CÀ¨
(
madr
, 
w‹ds
);

164 
HW_DMA2_MADR
 = 
	`SWAPu32
(
madr
 + 
w‹ds
 * 4);

167 
	`GPUDMA_INT
(
w‹ds
 / 4);

171 #ifde‡
PSXDMA_LOG


172 
	`PSXDMA_LOG
("*** DMA 2 - GPU mem2vøm *** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

174 
±r
 = (
u32
 *)
	`PSXM
(
madr
);

175 i‡(
±r
 =
NULL
) {

176 #ifde‡
CPU_LOG


177 
	`CPU_LOG
("*** DMA2 GPU - mem2vram *** NULL Pointer!!!\n");

182 
w‹ds
 = (
b¸
 >> 16) * (bcr & 0xffff);

183 
	`GPU_wrôeD©aMem
(
±r
, 
w‹ds
);

185 
HW_DMA2_MADR
 = 
	`SWAPu32
(
madr
 + 
w‹ds
 * 4);

188 
	`GPUDMA_INT
(
w‹ds
 / 4);

192 #ifde‡
PSXDMA_LOG


193 
	`PSXDMA_LOG
("*** DMA 2 - GPU dm®chaö *** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

195 
size
 = 
	`GPU_dmaChaö
((
u32
 *)
psxM
, 
madr
 & 0x1fffff);

196 i‡(()
size
 <= 0)

197 
size
 = 
	`gpuDmaChaöSize
(
madr
);

198 
HW_GPU_STATUS
 &~
PSXGPU_nBUSY
;

202 
HW_DMA2_MADR
 = 
	`SWAPu32
(0xffffff);

210 
	`GPUDMA_INT
(
size
);

213 #ifde‡
PSXDMA_LOG


215 
	`PSXDMA_LOG
("*** DMA 2 - GPU unknow¿*** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

220 
HW_DMA2_CHCR
 &
	`SWAP32
(~0x01000000);

221 
	`DMA_INTERRUPT
(2);

222 
	}
}

225 
	$gpuI¡îru±
() {

226 i‡(
HW_DMA2_CHCR
 & 
	`SWAP32
(0x01000000))

228 
HW_DMA2_CHCR
 &
	`SWAP32
(~0x01000000);

229 
	`DMA_INTERRUPT
(2);

231 
HW_GPU_STATUS
 |
PSXGPU_nBUSY
;

232 
	}
}

234 
	$psxDma6
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
) {

235 
u32
 
w‹ds
;

236 
u32
 *
mem
 = (u32 *)
	`PSXM
(
madr
);

238 #ifde‡
PSXDMA_LOG


239 
	`PSXDMA_LOG
("*** DMA6 OT *** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

242 i‡(
ch¸
 == 0x11000002) {

243 i‡(
mem
 =
NULL
) {

244 #ifde‡
CPU_LOG


245 
	`CPU_LOG
("*** DMA6 OT *** NULL Pointer!!!\n");

247 
HW_DMA6_CHCR
 &
	`SWAP32
(~0x01000000);

248 
	`DMA_INTERRUPT
(6);

253 
w‹ds
 = 
b¸
;

255 
b¸
--) {

256 *
mem
-- = 
	`SWAP32
((
madr
 - 4) & 0xffffff);

257 
madr
 -= 4;

259 
mem
++; *mem = 0xffffff;

263 
psxRegs
.
cy˛e
 +
w‹ds
;

264 
	`GPUOTCDMA_INT
(16);

267 #ifde‡
PSXDMA_LOG


270 
	`PSXDMA_LOG
("*** DMA6 OT - unknow¿*** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

274 
HW_DMA6_CHCR
 &
	`SWAP32
(~0x01000000);

275 
	`DMA_INTERRUPT
(6);

276 
	}
}

279 
	$gpuŸcI¡îru±
()

281 i‡(
HW_DMA6_CHCR
 & 
	`SWAP32
(0x01000000))

283 
HW_DMA6_CHCR
 &
	`SWAP32
(~0x01000000);

284 
	`DMA_INTERRUPT
(6);

286 
	}
}

	@src/psxdma.h

21 #i‚de‡
__PSXDMA_H__


22 
	#__PSXDMA_H__


	)

24 
	~"psxcomm⁄.h
"

25 
	~"r3000a.h
"

26 
	~"psxevíts.h
"

27 
	~"psxhw.h
"

28 
	~"psxmem.h
"

33 
	#GPUDMA_INT
(
eCy˛e
) { \

34 
	`psxEvqueueAdd
(
PSXINT_GPUDMA
, 
eCy˛e
); \

35 }

	)

37 
	#SPUDMA_INT
(
eCy˛e
) { \

38 
	`psxEvqueueAdd
(
PSXINT_SPUDMA
, 
eCy˛e
); \

39 }

	)

41 
	#MDECOUTDMA_INT
(
eCy˛e
) { \

42 
	`psxEvqueueAdd
(
PSXINT_MDECOUTDMA
, 
eCy˛e
); \

43 }

	)

45 
	#MDECINDMA_INT
(
eCy˛e
) { \

46 
	`psxEvqueueAdd
(
PSXINT_MDECINDMA
, 
eCy˛e
); \

47 }

	)

49 
	#GPUOTCDMA_INT
(
eCy˛e
) { \

50 
	`psxEvqueueAdd
(
PSXINT_GPUOTCDMA
, 
eCy˛e
); \

51 }

	)

53 
	#CDRDMA_INT
(
eCy˛e
) { \

54 
	`psxEvqueueAdd
(
PSXINT_CDRDMA
, 
eCy˛e
); \

55 }

	)

57 
psxDma2
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
);

58 
psxDma3
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
);

59 
psxDma4
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
);

60 
psxDma6
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
);

61 
gpuI¡îru±
();

62 
•uI¡îru±
();

63 
gpuŸcI¡îru±
();

	@src/psxevents.cpp

32 
	~"psxevíts.h
"

33 
	~"r3000a.h
"

34 
	~"∂ugö_lib.h
"

37 
	~"cdrom.h
"

38 
	~"∂ugös.h
"

39 
	~"psxdma.h
"

40 
	~"mdec.h
"

43 c⁄° 
u32
 
	gª£t_cy˛e_vÆ_©
 = 2000000000;

48 
psxEvqueueRe£tCy˛eVÆ
();

49 
psxEvqueueScheduÀPîsi°ítEvíts
();

50 
psxEvqueueAdju°Time°amps
(
u32
 
¥ev_cy˛e_vÆ
);

55 
SPU_ª£tUpd©eI¡îvÆ
();

56 
SPU_upd©e
();

57 
SPU_h™dÀIRQ
();

62 c⁄° 
	gEVQUEUE_CAPACITY
 = 
PSXINT_COUNT
;

64 (*
	tEvítFunc
)();

67 
u8
 
u£BegöIdx
;

68 
u8
 
u£EndIdx
;

70 
u8
 
queue
[
EVQUEUE_CAPACITY
];

71 
EvítFunc
 
funcs
[
EVQUEUE_CAPACITY
];

72 
u32
 
•uUpd©eI¡îvÆ
;

73 } 
evqueue
;

76 
	$EvítStubFunc
()

78 
	}
}

80 
ölöe
 
boﬁ
 
EvítM‹eImmöít
(
u8
 
lh_ev
, u8 
rh_ev
);

81 
ölöe
 
evqueueCÀ¨
();

82 
ölöe
 
size_t
 
evqueueSize
();

83 
ölöe
 
boﬁ
 
evqueueEm±y
();

84 
ölöe
 
u8
 
evqueueFr⁄t
();

85 
ölöe
 
u8
* 
evqueueFr⁄tPå
();

86 
ölöe
 
u8
* 
evqueueEndPå
();

87 
ölöe
 
evqueueAdd
(
u8
 
ev
);

88 
ölöe
 
boﬁ
 
evqueueRemove
(
u8
 
ev
);

89 
ölöe
 
evqueueRemoveFr⁄t
();

90 
ölöe
 
evqueueMoveTow¨dsFr⁄t
(
u8
 *
°¨t
, u8 *
íd
);

91 
ölöe
 
evqueueMoveTow¨dsBack
(
u8
 *
°¨t
, u8 *
íd
);

92 
ölöe
 
evqueueIn£πFr⁄t
(
u8
 *
pos
, u8 
ev
);

93 
ölöe
 
evqueueIn£πBack
(
u8
 *
pos
, u8 
ev
);

94 #ifde‡
DEBUG_EVENTS


95 
boﬁ
 
evqueueC⁄si°ícyCheck
();

96 
evqueuePrötQueue
();

99 
	$psxEvqueueInô
()

101 
evqueue
.
funcs
[
PSXINT_SIO
] = 
sioI¡îru±
;

102 
evqueue
.
funcs
[
PSXINT_CDR
] = 
cdrI¡îru±
;

103 
evqueue
.
funcs
[
PSXINT_CDREAD
] = 
cdrRódI¡îru±
;

104 
evqueue
.
funcs
[
PSXINT_GPUDMA
] = 
gpuI¡îru±
;

105 
evqueue
.
funcs
[
PSXINT_MDECOUTDMA
] = 
mdec1I¡îru±
;

106 
evqueue
.
funcs
[
PSXINT_SPUDMA
] = 
•uI¡îru±
;

107 
evqueue
.
funcs
[
PSXINT_GPUBUSY
] = 
EvítStubFunc
;

108 
evqueue
.
funcs
[
PSXINT_MDECINDMA
] = 
mdec0I¡îru±
;

109 
evqueue
.
funcs
[
PSXINT_GPUOTCDMA
] = 
gpuŸcI¡îru±
;

110 
evqueue
.
funcs
[
PSXINT_CDRDMA
] = 
cdrDmaI¡îru±
;

111 
evqueue
.
funcs
[
PSXINT_NEWDRC_CHECK
] = 
EvítStubFunc
;

112 
evqueue
.
funcs
[
PSXINT_RCNT
] = 
psxR˙tUpd©e
;

113 
evqueue
.
funcs
[
PSXINT_CDRLID
] = 
cdrLidSìkI¡îru±
;

114 
evqueue
.
funcs
[
PSXINT_CDRPLAY
] = 
cdrPœyI¡îru±
;

115 
evqueue
.
funcs
[
PSXINT_SPUIRQ
] = 
SPU_h™dÀIRQ
;

116 
evqueue
.
funcs
[
PSXINT_SPU_UPDATE
] = 
SPU_upd©e
;

117 
evqueue
.
funcs
[
PSXINT_RESET_CYCLE_VAL
] = 
psxEvqueueRe£tCy˛eVÆ
;

118 
evqueue
.
funcs
[
PSXINT_SIO_SYNC_MCD
] = 
sioSyncMcds
;

120 
	`evqueueCÀ¨
();

121 
	`psxEvqueueScheduÀPîsi°ítEvíts
();

122 
	}
}

125 
	$psxEvqueueInôFromFªeze
()

127 
	`evqueueCÀ¨
();

128 
ev
=0;Év < 
PSXINT_COUNT
; ++ev)

129 i‡(
psxRegs
.
öãºu±
 & (1 << 
ev
))

130 
	`evqueueAdd
(
ev
);

132 
psxRegs
.
ötCy˛e
[
PSXINT_NEXT_EVENT
] =ÖsxRegs.ötCy˛e[
	`evqueueFr⁄t
()];

133 
	`psxEvqueueScheduÀPîsi°ítEvíts
();

137 
psxRegs
.
io_cy˛e_cou¡î
 = 0;

138 
	}
}

144 
	$psxEvqueueRe£tCy˛eVÆ
()

146 #ifde‡
DEBUG_EVENTS


147 
	`¥ötf
("\n------------------------------------------------------\n");

148 
	`¥ötf
("%s(Ëqueuê°©ê⁄É¡ry:\n", 
__func__
);

149 
	`evqueuePrötQueue
();

153 
	`psxEvqueueAdju°Time°amps
(
psxRegs
.
cy˛e
);

156 
	`psxR˙tAdju°Time°amps
(
psxRegs
.
cy˛e
);

159 
psxRegs
.
cy˛e
 = 0;

160 
	`psxEvqueueAdd
(
PSXINT_RESET_CYCLE_VAL
, 
ª£t_cy˛e_vÆ_©
);

162 #ifde‡
DEBUG_EVENTS


163 
	`¥ötf
("%s(Ëqueuê°©ê⁄Éxô:\n", 
__func__
);

164 
	`evqueuePrötQueue
();

165 
	`¥ötf
("io_cy˛e_cou¡î: %u\n", 
psxRegs
.
io_cy˛e_cou¡î
);

166 
	`¥ötf
("------------------------------------------------------\n\n");

168 
	}
}

170 
	$psxEvqueueScheduÀPîsi°ítEvíts
()

177 
	`psxEvqueueRe£tCy˛eVÆ
();

180 
	`SPU_ª£tUpd©eI¡îvÆ
();

181 
	}
}

186 
	$psxEvqueueAdju°Time°amps
(
u32
 
¥ev_cy˛e_vÆ
)

188 
u8
 *
ev
 = 
	`evqueueFr⁄tPå
();Év !
	`evqueueEndPå
(); ++ev) {

189 
psxRegs
.
ötCy˛e
[*
ev
].
sCy˛e
 -
¥ev_cy˛e_vÆ
;

192 
psxRegs
.
ötCy˛e
[
PSXINT_NEXT_EVENT
].
sCy˛e
 -
¥ev_cy˛e_vÆ
;

193 
	}
}

195 
	$psxEvqueueAdd
(
psxEvítNum
 
ev
, 
u32
 
cy˛es_a·î
)

198 i‡(
psxRegs
.
öãºu±
 & (1 << 
ev
))

199 
	`evqueueRemove
(
ev
);

201 
psxRegs
.
öãºu±
 |(1 << 
ev
);

202 
psxRegs
.
ötCy˛e
[
ev
].
sCy˛e
 =ÖsxRegs.
cy˛e
;

203 
psxRegs
.
ötCy˛e
[
ev
].
cy˛e
 = 
cy˛es_a·î
;

204 
	`evqueueAdd
(
ev
);

205 
psxRegs
.
ötCy˛e
[
PSXINT_NEXT_EVENT
] =ÖsxRegs.ötCy˛e[
	`evqueueFr⁄t
()];

208 
psxRegs
.
io_cy˛e_cou¡î
 =ÖsxRegs.
ötCy˛e
[
PSXINT_NEXT_EVENT
].
sCy˛e
 +

209 
psxRegs
.
ötCy˛e
[
PSXINT_NEXT_EVENT
].
cy˛e
;

210 
	}
}

212 
	$psxEvqueueRemove
(
psxEvítNum
 
ev
)

214 i‡(!(
psxRegs
.
öãºu±
 & (1 << 
ev
)))

217 
psxRegs
.
öãºu±
 &~(1 << 
ev
);

218 
	`evqueueRemove
(
ev
);

220 #ifde‡
DEBUG_EVENTS


221 i‡(
	`evqueueEm±y
()) {

222 
	`¥ötf
("ERROR:Ém±y queuêö %s()\n", 
__func__
);

224 
psxRegs
.
io_cy˛e_cou¡î
 = 0;

231 
psxRegs
.
ötCy˛e
[
PSXINT_NEXT_EVENT
] =ÖsxRegs.ötCy˛e[
	`evqueueFr⁄t
()];

234 
psxRegs
.
io_cy˛e_cou¡î
 =ÖsxRegs.
ötCy˛e
[
PSXINT_NEXT_EVENT
].
sCy˛e
 +

235 
psxRegs
.
ötCy˛e
[
PSXINT_NEXT_EVENT
].
cy˛e
;

236 
	}
}

239 
	$psxEvqueueDi•©chAndRemoveFr⁄t
(
psxRegi°îs
 *
¥
)

241 #ifde‡
DEBUG_EVENTS


242 i‡(
	`evqueueEm±y
()) {

243 
	`¥ötf
("ERROR: %s(ËˇŒed, buàqueuêi†em±y\n", 
__func__
);

248 
u8
 
ev
 = 
	`evqueueFr⁄t
();

249 
	`evqueueRemoveFr⁄t
();

250 
¥
->
öãºu±
 &~(1 << 
ev
);

252 #ifde‡
DEBUG_EVENTS


253 i‡(
evqueue
.
funcs
[
ev
] =
EvítStubFunc
) {

254 
	`¥ötf
("WARNING: EvítStubFunc(ËˇŒed f‹ unim∂emíãdÉvíà%u\n", 
ev
);

258 
evqueue
.
funcs
[
ev
]();

262 #ifde‡
DEBUG_EVENTS


263 i‡(
	`evqueueEm±y
())

264 
	`¥ötf
("ERROR:Ém±y queuêö %s()\n", 
__func__
);

269 
¥
->
ötCy˛e
[
PSXINT_NEXT_EVENT
] =Ör->ötCy˛e[
	`evqueueFr⁄t
()];

273 
	}
}

276 
	$SPU_ª£tUpd©eI¡îvÆ
()

278 
evqueue
.
•uUpd©eI¡îvÆ
 = 
PSXCLK
 / (
FømeR©e
[
C⁄fig
.
PsxTy≥
]);

283 i‡(
C⁄fig
.
SpuUpd©eFªq
 > 
SPU_UPDATE_FREQ_1
) {

284 
evqueue
.
•uUpd©eI¡îvÆ
 >>
C⁄fig
.
SpuUpd©eFªq
;

285 
	`psxEvqueueAdd
(
PSXINT_SPU_UPDATE
, 
evqueue
.
•uUpd©eI¡îvÆ
);

287 
	}
}

291 
	$SPU_upd©e
()

295 
	`psxEvqueueRemove
(
PSXINT_SPUIRQ
);

297 
	`SPU_async
(
psxRegs
.
cy˛e
, 1);

300 i‡(
C⁄fig
.
SpuUpd©eFªq
 > 
SPU_UPDATE_FREQ_1
) {

301 
u32
 
öãrvÆ
 = 
evqueue
.
•uUpd©eI¡îvÆ
;

302 i‡(
	`∂_‰ameskù_advi˚
(Ë&& 
C⁄fig
.
SpuUpd©eFªq
 < 
SPU_UPDATE_FREQ_MAX
)

303 
öãrvÆ
 /= 2;

304 
	`psxEvqueueAdd
(
PSXINT_SPU_UPDATE
, 
öãrvÆ
);

306 
	}
}

310 
	$SPU_h™dÀIRQ
()

312 
	`SPU_async
(
psxRegs
.
cy˛e
, 0);

313 
	}
}

316 
ölöe
 
boﬁ
 
	$EvítM‹eImmöít
(
u8
 
lh_ev
, u8 
rh_ev
)

320 
lh_tmp
 = 
psxRegs
.
ötCy˛e
[
lh_ev
].
sCy˛e
 +ÖsxRegs.ötCy˛e[lh_ev].
cy˛e


321 - 
psxRegs
.
cy˛e
;

322 
rh_tmp
 = 
psxRegs
.
ötCy˛e
[
rh_ev
].
sCy˛e
 +ÖsxRegs.ötCy˛e[rh_ev].
cy˛e


323 - 
psxRegs
.
cy˛e
;

324  
lh_tmp
 < 
rh_tmp
;

325 
	}
}

327 
ölöe
 
	$evqueueCÀ¨
()

329 
evqueue
.
u£EndIdx
 =Évqueue.
u£BegöIdx
 = 0;

330 
	}
}

332 
ölöe
 
size_t
 
	$evqueueSize
()

334  
evqueue
.
u£EndIdx
 -Évqueue.
u£BegöIdx
;

335 
	}
}

337 
ölöe
 
boﬁ
 
	$evqueueEm±y
()

339  
evqueue
.
u£EndIdx
 =evqueue.
u£BegöIdx
;

340 
	}
}

342 
ölöe
 
u8
 
	$evqueueFr⁄t
()

344  
evqueue
.
queue
[evqueue.
u£BegöIdx
];

345 
	}
}

348 
ölöe
 
u8
* 
	$evqueueFr⁄tPå
()

350  
evqueue
.
queue
 +Évqueue.
u£BegöIdx
;

351 
	}
}

355 
ölöe
 
u8
* 
	$evqueueEndPå
()

357  
evqueue
.
queue
 +Évqueue.
u£EndIdx
;

358 
	}
}

364 
ölöe
 
	$evqueueAdd
(
u8
 
ev
)

366 #ifde‡
DEBUG_EVENTS


367 i‡(
	`evqueueSize
(Ë=
EVQUEUE_CAPACITY
) {

368 
	`¥ötf
("ERROR: %s(ËcouldÇŸ föd s∑˚ i¿ô†¨øy\n", 
__func__
);

372 i‡(!
	`evqueueC⁄si°ícyCheck
()) {

373 
	`¥ötf
("ERROR: Queue consistent ordering check failed in %s(),\n"

374 "bef‹êaddögÉvíà%u\n", 
__func__
, 
ev
);

375 
	`evqueuePrötQueue
();

379 
u8
 *
ô
 = 
	`evqueueFr⁄tPå
();

381 (
ô
 !
	`evqueueEndPå
()Ë&& !
	`EvítM‹eImmöít
(
ev
, *it))

382 ++
ô
;

387 i‡(
evqueue
.
u£BegöIdx
 > 0) {

389 
	`evqueueIn£πFr⁄t
(
ô
-1, 
ev
);

392 
	`evqueueIn£πBack
(
ô
, 
ev
);

395 #ifde‡
DEBUG_EVENTS


396 i‡(!
	`evqueueC⁄si°ícyCheck
()) {

397 
	`¥ötf
("ERROR: Queue consistent ordering check failed in %s(),\n"

398 "a·îáddögÉvíà%u\n", 
__func__
, 
ev
);

399 
	`evqueuePrötQueue
();

402 
	}
}

405 
boﬁ
 
	$evqueueRemove
(
u8
 
ev
)

407 
u8
 *
ô
 = 
	`evqueueFr⁄tPå
();

408 (
ô
 !
	`evqueueEndPå
()Ë&& (*ô !
ev
))

409 ++
ô
;

411 i‡(
ô
 =
	`evqueueEndPå
())

412  
Ál£
;

416 --
evqueue
.
u£EndIdx
;

417 
	`evqueueMoveTow¨dsFr⁄t
(
ô
+1, 
	`evqueueEndPå
());

419 #ifde‡
DEBUG_EVENTS


420 i‡(!
	`evqueueC⁄si°ícyCheck
()) {

421 
	`¥ötf
("ERROR: Queue consistent ordering check failed in %s(),\n"

422 "a·îÑemovögÉvíà%u\n", 
__func__
, 
ev
);

423 
	`evqueuePrötQueue
();

427  
åue
;

428 
	}
}

430 
ölöe
 
	$evqueueRemoveFr⁄t
()

432 #ifde‡
DEBUG_EVENTS


433 i‡(
	`evqueueEm±y
()) {

434 
	`¥ötf
("ERROR: %s(ËˇŒed whí queuêi†em±y\n", 
__func__
);

439 ++
evqueue
.
u£BegöIdx
;

440 
	}
}

444 
ölöe
 
	$evqueueMoveTow¨dsBack
(
u8
 *
°¨t
, u8 *
íd
)

446 
u8
 *
±r
 = 
íd
;Öå >
°¨t
; --ptr)

447 *(
±r
+1) = *ptr;

448 
	}
}

452 
ölöe
 
	$evqueueMoveTow¨dsFr⁄t
(
u8
 *
°¨t
, u8 *
íd
)

454 
u8
 *
±r
 = 
°¨t
;Öå <
íd
; ++ptr)

455 *(
±r
-1) = *ptr;

456 
	}
}

460 
ölöe
 
	$evqueueIn£πFr⁄t
(
u8
 *
pos
, u8 
ev
)

462 
	`evqueueMoveTow¨dsFr⁄t
(
	`evqueueFr⁄tPå
(), 
pos
);

463 --
evqueue
.
u£BegöIdx
;

464 *
pos
 = 
ev
;

465 
	}
}

469 
ölöe
 
	$evqueueIn£πBack
(
u8
 *
pos
, u8 
ev
)

471 
	`evqueueMoveTow¨dsBack
(
pos
, 
	`evqueueEndPå
()-1);

472 ++
evqueue
.
u£EndIdx
;

473 *
pos
 = 
ev
;

474 
	}
}

476 #ifde‡
DEBUG_EVENTS


477 
boﬁ
 
	$evqueueC⁄si°ícyCheck
()

479 i‡(
	`evqueueSize
() < 2)

480  
åue
;

482 
u8
 *
ev
 = 
	`evqueueFr⁄tPå
();Év < (
	`evqueueEndPå
()-1); ++ev) {

483 i‡(!
	`EvítM‹eImmöít
(*
ev
, *(ev+1))) {

484 i‡((
psxRegs
.
ötCy˛e
[*
ev
].
sCy˛e
 +ÖsxRegs.ötCy˛e[*ev].
cy˛e
) !=

485 (
psxRegs
.
ötCy˛e
[*(
ev
+1)].
sCy˛e
 +ÖsxRegs.ötCy˛e[*”v+1)].
cy˛e
)) {

486 
	`¥ötf
("ERROR: %s(ËÁûed: EV %u > EV %u\n", 
__func__
, *
ev
, *(ev+1));

487  
Ál£
;

491  
åue
;

492 
	}
}

494 
	$evqueuePrötQueue
()

496 
	`¥ötf
("Queue contains %zuÉvents, useBeginIdx: %u useEndIdx: %u\n",

497 
	`evqueueSize
(), 
evqueue
.
u£BegöIdx
,Évqueue.
u£EndIdx
);

498 
u8
 *
ev
 = 
	`evqueueFr⁄tPå
();Év !
	`evqueueEndPå
(); ++ev) {

499 
	`¥ötf
("EV: %u SCYCLE: %u CYCLE: %u\n",

500 *
ev
, 
psxRegs
.
ötCy˛e
[*ev].
sCy˛e
,ÖsxRegs.ötCy˛e[*ev].
cy˛e
);

503 i‡(
	`evqueueC⁄si°ícyCheck
())

504 
	`¥ötf
("Queue consistent ordering checkÖasses.\n");

505 
	}
}

	@src/psxevents.h

25 #i‚de‡
PSXEVENTS_H


26 
	#PSXEVENTS_H


	)

28 
	~<°dio.h
>

29 
	~<°döt.h
>

30 
	~"r3000a.h
"

32 
	epsxEvítNum
 {

33 
	mPSXINT_SIO
 = 0,

34 
	mPSXINT_CDR
,

35 
	mPSXINT_CDREAD
,

36 
	mPSXINT_GPUDMA
,

37 
	mPSXINT_MDECOUTDMA
,

38 
	mPSXINT_SPUDMA
,

39 
	mPSXINT_GPUBUSY
,

40 
	mPSXINT_MDECINDMA
,

41 
	mPSXINT_GPUOTCDMA
,

42 
	mPSXINT_CDRDMA
,

43 
	mPSXINT_NEWDRC_CHECK
,

44 
	mPSXINT_RCNT
,

45 
	mPSXINT_CDRLID
,

46 
	mPSXINT_CDRPLAY
,

47 
	mPSXINT_SPUIRQ
,

48 
	mPSXINT_SPU_UPDATE
,

52 
	mPSXINT_RESET_CYCLE_VAL
,

54 
	mPSXINT_SIO_SYNC_MCD
,

55 
	mPSXINT_COUNT
,

56 
	mPSXINT_NEXT_EVENT
 = 
PSXINT_COUNT


61 
psxEvqueueInô
();

62 
psxEvqueueInôFromFªeze
();

63 
psxEvqueueAdd
(
psxEvítNum
 
ev
, 
u32
 
cy˛es_a·î
);

64 
psxEvqueueRemove
(
psxEvítNum
 
ev
);

65 
psxEvqueueDi•©chAndRemoveFr⁄t
(
psxRegi°îs
 *
¥
);

68 
SPU_ª£tUpd©eI¡îvÆ
();

	@src/psxhle.cpp

25 
	~"psxhÀ.h
"

27 
	$hÀDummy
() {

28 
psxRegs
.
pc
 =ÖsxRegs.
GPR
.
n
.
ø
;

30 
	`psxBønchTe°
();

31 
	}
}

33 
	$hÀA0
() {

34 
u32
 
ˇŒ
 = 
psxRegs
.
GPR
.
n
.
t1
 & 0xff;

36 i‡(
biosA0
[
ˇŒ
]) biosA0[call]();

38 
	`psxBønchTe°
();

39 
	}
}

41 
	$hÀB0
() {

42 
u32
 
ˇŒ
 = 
psxRegs
.
GPR
.
n
.
t1
 & 0xff;

44 i‡(
biosB0
[
ˇŒ
]) biosB0[call]();

46 
	`psxBønchTe°
();

47 
	}
}

49 
	$hÀC0
() {

50 
u32
 
ˇŒ
 = 
psxRegs
.
GPR
.
n
.
t1
 & 0xff;

52 i‡(
biosC0
[
ˇŒ
]) biosC0[call]();

54 
	`psxBønchTe°
();

55 
	}
}

57 
	$hÀBoŸ°øp
() {

58 
	`¥ötf
("hleBootstrap\n");

59 
	`CheckCdrom
();

60 
	`LﬂdCdrom
();

61 
	`¥ötf
("CdromLabñ: \"%s\": PC = %8.8x (SP = %8.8x)\n", 
CdromLabñ
, 
psxRegs
.
pc
,ÖsxRegs.
GPR
.
n
.
•
);

62 
	}
}

65 
u32
 
	m_pc0
;

66 
u32
 
	mgp0
;

67 
u32
 
	mt_addr
;

68 
u32
 
	mt_size
;

69 
u32
 
	md_addr
;

70 
u32
 
	md_size
;

71 
u32
 
	mb_addr
;

72 
u32
 
	mb_size
;

73 
u32
 
	mS_addr
;

74 
u32
 
	ms_size
;

75 
u32
 
	m_•
,
	m_Â
,
	m_gp
,
	mªt
,
	mba£
;

76 } 
	tEXEC
;

78 
	$hÀExecRë
() {

79 
EXEC
 *
hódî
 = (EXEC*)
	`PSXM
(
psxRegs
.
GPR
.
n
.
s0
);

81 
psxRegs
.
GPR
.
n
.
ø
 = 
hódî
->
ªt
;

82 
psxRegs
.
GPR
.
n
.
•
 = 
hódî
->
_•
;

83 
psxRegs
.
GPR
.
n
.
s8
 = 
hódî
->
_Â
;

84 
psxRegs
.
GPR
.
n
.
gp
 = 
hódî
->
_gp
;

85 
psxRegs
.
GPR
.
n
.
s0
 = 
hódî
->
ba£
;

87 
psxRegs
.
GPR
.
n
.
v0
 = 1;

88 
psxRegs
.
pc
 =ÖsxRegs.
GPR
.
n
.
ø
;

89 
	}
}

91 (*
psxHLEt
[256])() = {

92 
hÀDummy
, 
hÀA0
, 
hÀB0
, 
hÀC0
,

93 
hÀBoŸ°øp
, 
hÀExecRë
,

94 
hÀDummy
, hleDummy

95 
	}
};

	@src/psxhle.h

21 #i‚de‡
__PSXHLE_H__


22 
	#__PSXHLE_H__


	)

24 
	~"psxcomm⁄.h
"

25 
	~"r3000a.h
"

26 
	~"∂ugös.h
"

28 (*
psxHLEt
[256])();

	@src/psxhw.cpp

25 
	~"psxhw.h
"

26 
	~"mdec.h
"

27 
	~"cdrom.h
"

28 
	~"gpu.h
"

30 
	$psxHwRe£t
() {

32 i‡(
C⁄fig
.
SpuIrq
Ë
	`psxHu32ªf
(0x1070Ë|
	`SWAP32
(0x200);

34 
	`mem£t
(
psxH
, 0, 0x10000);

36 
	`mdecInô
();

37 
	`sioInô
();

38 
	`cdrRe£t
();

39 
	`psxR˙tInô
();

40 
HW_GPU_STATUS
 = 0x14802000;

41 
	}
}

43 
u8
 
	$psxHwRód8
(
u32
 
add
) {

44 
h¨d
;

46 
add
) {

47 0x1f801040: 
h¨d
 = 
	`sioRód8
();;

49 0x1f801800: 
h¨d
 = 
	`cdrRód0
(); ;

50 0x1f801801: 
h¨d
 = 
	`cdrRód1
(); ;

51 0x1f801802: 
h¨d
 = 
	`cdrRód2
(); ;

52 0x1f801803: 
h¨d
 = 
	`cdrRód3
(); ;

54 
h¨d
 = 
	`psxHu8
(
add
);

55 #ifde‡
PSXHW_LOG


56 
	`PSXHW_LOG
("*Unkwnow¿8bôÑódáàaddªs†%x\n", 
add
);

58  
h¨d
;

61 #ifde‡
PSXHW_LOG


62 
	`PSXHW_LOG
("*Know¿8bôÑódáàaddªs†%x vÆuê%x\n", 
add
, 
h¨d
);

64  
h¨d
;

65 
	}
}

67 
u16
 
	$psxHwRód16
(
u32
 
add
) {

68 
h¨d
;

70 
add
) {

71 #ifde‡
PSXHW_LOG


72 0x1f801070: 
	`PSXHW_LOG
("IREG 16bôÑód %x\n", 
	`psxHu16
(0x1070));

73  
	`psxHu16
(0x1070);

75 #ifde‡
PSXHW_LOG


76 0x1f801074: 
	`PSXHW_LOG
("IMASK 16bôÑód %x\n", 
	`psxHu16
(0x1074));

77  
	`psxHu16
(0x1074);

81 
h¨d
 = 
	`sioRód8
();

82 
h¨d
|
	`sioRód8
() << 8;

83 #ifde‡
PAD_LOG


84 
	`PAD_LOG
("siÿªad16 %x;Ñë = %x\n", 
add
&0xf, 
h¨d
);

86  
h¨d
;

88 
h¨d
 = 
	`sioRódSèt16
();

89 #ifde‡
PAD_LOG


90 
	`PAD_LOG
("siÿªad16 %x;Ñë = %x\n", 
add
&0xf, 
h¨d
);

92  
h¨d
;

94 
h¨d
 = 
	`sioRódMode16
();

95 #ifde‡
PAD_LOG


96 
	`PAD_LOG
("siÿªad16 %x;Ñë = %x\n", 
add
&0xf, 
h¨d
);

98  
h¨d
;

100 
h¨d
 = 
	`sioRódCål16
();

101 #ifde‡
PAD_LOG


102 
	`PAD_LOG
("siÿªad16 %x;Ñë = %x\n", 
add
&0xf, 
h¨d
);

104  
h¨d
;

106 
h¨d
 = 
	`sioRódBaud16
();

107 #ifde‡
PAD_LOG


108 
	`PAD_LOG
("siÿªad16 %x;Ñë = %x\n", 
add
&0xf, 
h¨d
);

110  
h¨d
;

119 
h¨d
 = 
	`psxR˙tRcou¡
(0);

120 #ifde‡
PSXHW_LOG


121 
	`PSXHW_LOG
("T0 cou¡Ñód16: %x\n", 
h¨d
);

123  
h¨d
;

125 
h¨d
 = 
	`psxR˙tRmode
(0);

126 #ifde‡
PSXHW_LOG


127 
	`PSXHW_LOG
("T0 modêªad16: %x\n", 
h¨d
);

129  
h¨d
;

131 
h¨d
 = 
	`psxR˙tRèrgë
(0);

132 #ifde‡
PSXHW_LOG


133 
	`PSXHW_LOG
("T0Å¨gëÑód16: %x\n", 
h¨d
);

135  
h¨d
;

137 
h¨d
 = 
	`psxR˙tRcou¡
(1);

138 #ifde‡
PSXHW_LOG


139 
	`PSXHW_LOG
("T1 cou¡Ñód16: %x\n", 
h¨d
);

141  
h¨d
;

143 
h¨d
 = 
	`psxR˙tRmode
(1);

144 #ifde‡
PSXHW_LOG


145 
	`PSXHW_LOG
("T1 modêªad16: %x\n", 
h¨d
);

147  
h¨d
;

149 
h¨d
 = 
	`psxR˙tRèrgë
(1);

150 #ifde‡
PSXHW_LOG


151 
	`PSXHW_LOG
("T1Å¨gëÑód16: %x\n", 
h¨d
);

153  
h¨d
;

155 
h¨d
 = 
	`psxR˙tRcou¡
(2);

156 #ifde‡
PSXHW_LOG


157 
	`PSXHW_LOG
("T2 cou¡Ñód16: %x\n", 
h¨d
);

159  
h¨d
;

161 
h¨d
 = 
	`psxR˙tRmode
(2);

162 #ifde‡
PSXHW_LOG


163 
	`PSXHW_LOG
("T2 modêªad16: %x\n", 
h¨d
);

165  
h¨d
;

167 
h¨d
 = 
	`psxR˙tRèrgë
(2);

168 #ifde‡
PSXHW_LOG


169 
	`PSXHW_LOG
("T2Å¨gëÑód16: %x\n", 
h¨d
);

171  
h¨d
;

177 i‡(
add
 >= 0x1f801c00 &&ádd < 0x1f801e00) {

178 
h¨d
 = 
	`SPU_ªadRegi°î
(
add
);

180 
h¨d
 = 
	`psxHu16
(
add
);

181 #ifde‡
PSXHW_LOG


182 
	`PSXHW_LOG
("*Unkwnow¿16bôÑódáàaddªs†%x\n", 
add
);

185  
h¨d
;

188 #ifde‡
PSXHW_LOG


189 
	`PSXHW_LOG
("*Know¿16bôÑódáàaddªs†%x vÆuê%x\n", 
add
, 
h¨d
);

191  
h¨d
;

192 
	}
}

194 
u32
 
	$psxHwRód32
(
u32
 
add
) {

195 
u32
 
h¨d
;

197 
add
) {

199 
h¨d
 = 
	`sioRód8
();

200 
h¨d
 |
	`sioRód8
() << 8;

201 
h¨d
 |
	`sioRód8
() << 16;

202 
h¨d
 |
	`sioRód8
() << 24;

203 #ifde‡
PAD_LOG


204 
	`PAD_LOG
("siÿªad32 ;ªà%x\n", 
h¨d
);

206  
h¨d
;

209 #ifde‡
PSXHW_LOG


211 
	`PSXHW_LOG
("RAM sizêªad %x\n", 
	`psxHu32
(0x1060));

212  
	`psxHu32
(0x1060);

214 #ifde‡
PSXHW_LOG


215 0x1f801070: 
	`PSXHW_LOG
("IREG 32bôÑód %x\n", 
	`psxHu32
(0x1070));

216  
	`psxHu32
(0x1070);

218 #ifde‡
PSXHW_LOG


219 0x1f801074: 
	`PSXHW_LOG
("IMASK 32bôÑód %x\n", 
	`psxHu32
(0x1074));

220  
	`psxHu32
(0x1074);

224 
h¨d
 = 
	`GPU_ªadD©a
();

225 #ifde‡
PSXHW_LOG


226 
	`PSXHW_LOG
("GPU DATA 32bôÑód %x\n", 
h¨d
);

228  
h¨d
;

231 
	`gpuSyncPlugöSR
();

232 
h¨d
 = 
HW_GPU_STATUS
;

233 i‡(
hSyncCou¡
 < 240 && (
HW_GPU_STATUS
 & 
PSXGPU_ILACE_BITS
) != PSXGPU_ILACE_BITS)

234 
h¨d
 |
PSXGPU_LCF
 & (
psxRegs
.
cy˛e
 << 20);

235 #ifde‡
PSXHW_LOG


236 
	`PSXHW_LOG
("GPU STATUS 32bôÑód %x\n", 
h¨d
);

238  
h¨d
;

240 0x1f801820: 
h¨d
 = 
	`mdecRód0
(); ;

241 0x1f801824: 
h¨d
 = 
	`mdecRód1
(); ;

243 #ifde‡
PSXHW_LOG


245 
	`PSXHW_LOG
("DMA2 MADR 32bôÑód %x\n", 
	`psxHu32
(0x10a0));

246  
	`SWAPu32
(
HW_DMA2_MADR
);

248 
	`PSXHW_LOG
("DMA2 BCR 32bôÑód %x\n", 
	`psxHu32
(0x10a4));

249  
	`SWAPu32
(
HW_DMA2_BCR
);

251 
	`PSXHW_LOG
("DMA2 CHCR 32bôÑód %x\n", 
	`psxHu32
(0x10a8));

252  
	`SWAPu32
(
HW_DMA2_CHCR
);

255 #ifde‡
PSXHW_LOG


257 
	`PSXHW_LOG
("DMA3 MADR 32bôÑód %x\n", 
	`psxHu32
(0x10b0));

258  
	`SWAPu32
(
HW_DMA3_MADR
);

260 
	`PSXHW_LOG
("DMA3 BCR 32bôÑód %x\n", 
	`psxHu32
(0x10b4));

261  
	`SWAPu32
(
HW_DMA3_BCR
);

263 
	`PSXHW_LOG
("DMA3 CHCR 32bôÑód %x\n", 
	`psxHu32
(0x10b8));

264  
	`SWAPu32
(
HW_DMA3_CHCR
);

269 
h¨d
 = 
	`psxR˙tRcou¡
(0);

270 #ifde‡
PSXHW_LOG


271 
	`PSXHW_LOG
("T0 cou¡Ñód32: %x\n", 
h¨d
);

273  
h¨d
;

275 
h¨d
 = 
	`psxR˙tRmode
(0);

276 #ifde‡
PSXHW_LOG


277 
	`PSXHW_LOG
("T0 modêªad32: %x\n", 
h¨d
);

279  
h¨d
;

281 
h¨d
 = 
	`psxR˙tRèrgë
(0);

282 #ifde‡
PSXHW_LOG


283 
	`PSXHW_LOG
("T0Å¨gëÑód32: %x\n", 
h¨d
);

285  
h¨d
;

287 
h¨d
 = 
	`psxR˙tRcou¡
(1);

288 #ifde‡
PSXHW_LOG


289 
	`PSXHW_LOG
("T1 cou¡Ñód32: %x\n", 
h¨d
);

291  
h¨d
;

293 
h¨d
 = 
	`psxR˙tRmode
(1);

294 #ifde‡
PSXHW_LOG


295 
	`PSXHW_LOG
("T1 modêªad32: %x\n", 
h¨d
);

297  
h¨d
;

299 
h¨d
 = 
	`psxR˙tRèrgë
(1);

300 #ifde‡
PSXHW_LOG


301 
	`PSXHW_LOG
("T1Å¨gëÑód32: %x\n", 
h¨d
);

303  
h¨d
;

305 
h¨d
 = 
	`psxR˙tRcou¡
(2);

306 #ifde‡
PSXHW_LOG


307 
	`PSXHW_LOG
("T2 cou¡Ñód32: %x\n", 
h¨d
);

309  
h¨d
;

311 
h¨d
 = 
	`psxR˙tRmode
(2);

312 #ifde‡
PSXHW_LOG


313 
	`PSXHW_LOG
("T2 modêªad32: %x\n", 
h¨d
);

315  
h¨d
;

317 
h¨d
 = 
	`psxR˙tRèrgë
(2);

318 #ifde‡
PSXHW_LOG


319 
	`PSXHW_LOG
("T2Å¨gëÑód32: %x\n", 
h¨d
);

321  
h¨d
;

324 
h¨d
 = 
	`psxHu32
(
add
);

325 #ifde‡
PSXHW_LOG


326 
	`PSXHW_LOG
("*Unkwnow¿32bôÑódáàaddªs†%x\n", 
add
);

328  
h¨d
;

330 #ifde‡
PSXHW_LOG


331 
	`PSXHW_LOG
("*Know¿32bôÑódáàaddªs†%x\n", 
add
);

333  
h¨d
;

334 
	}
}

336 
	$psxHwWrôe8
(
u32
 
add
, 
u8
 
vÆue
) {

337 
add
) {

338 0x1f801040: 
	`sioWrôe8
(
vÆue
); ;

340 0x1f801800: 
	`cdrWrôe0
(
vÆue
); ;

341 0x1f801801: 
	`cdrWrôe1
(
vÆue
); ;

342 0x1f801802: 
	`cdrWrôe2
(
vÆue
); ;

343 0x1f801803: 
	`cdrWrôe3
(
vÆue
); ;

346 
	`psxHu8
(
add
Ë
vÆue
;

347 #ifde‡
PSXHW_LOG


348 
	`PSXHW_LOG
("*Unknow¿8bô wrôê©áddªs†%x vÆuê%x\n", 
add
, 
vÆue
);

352 
	`psxHu8
(
add
Ë
vÆue
;

353 #ifde‡
PSXHW_LOG


354 
	`PSXHW_LOG
("*Know¿8bô wrôê©áddªs†%x vÆuê%x\n", 
add
, 
vÆue
);

356 
	}
}

358 
	$psxHwWrôe16
(
u32
 
add
, 
u16
 
vÆue
) {

359 
add
) {

361 
	`sioWrôe8
(()
vÆue
);

362 
	`sioWrôe8
(()(
vÆue
>>8));

363 #ifde‡
PAD_LOG


364 
	`PAD_LOG
 ("siÿwrôe16 %x, %x\n", 
add
&0xf, 
vÆue
);

368 
	`sioWrôeSèt16
(
vÆue
);

369 #ifde‡
PAD_LOG


370 
	`PAD_LOG
 ("siÿwrôe16 %x, %x\n", 
add
&0xf, 
vÆue
);

374 
	`sioWrôeMode16
(
vÆue
);

375 #ifde‡
PAD_LOG


376 
	`PAD_LOG
 ("siÿwrôe16 %x, %x\n", 
add
&0xf, 
vÆue
);

380 
	`sioWrôeCål16
(
vÆue
);

381 #ifde‡
PAD_LOG


382 
	`PAD_LOG
 ("siÿwrôe16 %x, %x\n", 
add
&0xf, 
vÆue
);

386 
	`sioWrôeBaud16
(
vÆue
);

387 #ifde‡
PAD_LOG


388 
	`PAD_LOG
 ("siÿwrôe16 %x, %x\n", 
add
&0xf, 
vÆue
);

399 #ifde‡
PSXHW_LOG


400 
	`PSXHW_LOG
("IREG 16bô wrôê%x\n", 
vÆue
);

403 
vÆue
 &= 0x7ff;

406 i‡(
C⁄fig
.
SpuIrq
Ë
	`psxHu16ªf
(0x1070Ë|
	`SWAPu16
(0x200);

408 
	`psxHu16ªf
(0x1070Ë&
	`SWAPu16
(
vÆue
);

412 i‡(
	`psxHu16
(0x1070) &ÖsxHu16(0x1074))

413 
	`Re£tIoCy˛e
();

418 #ifde‡
PSXHW_LOG


419 
	`PSXHW_LOG
("IMASK 16bô wrôê%x\n", 
vÆue
);

422 
vÆue
 &= 0x7ff;

424 
	`psxHu16ªf
(0x1074Ë
	`SWAPu16
(
vÆue
);

428 i‡(
	`psxHu16
(0x1070) &ÖsxHu16(0x1074))

429 
	`Re£tIoCy˛e
();

434 #ifde‡
PSXHW_LOG


435 
	`PSXHW_LOG
("COUNTER 0 COUNT 16bô wrôê%x\n", 
vÆue
);

437 
	`psxR˙tWcou¡
(0, 
vÆue
);

440 #ifde‡
PSXHW_LOG


441 
	`PSXHW_LOG
("COUNTER 0 MODE 16bô wrôê%x\n", 
vÆue
);

443 
	`psxR˙tWmode
(0, 
vÆue
);

446 #ifde‡
PSXHW_LOG


447 
	`PSXHW_LOG
("COUNTER 0 TARGET 16bô wrôê%x\n", 
vÆue
);

449 
	`psxR˙tWèrgë
(0, 
vÆue
);

453 #ifde‡
PSXHW_LOG


454 
	`PSXHW_LOG
("COUNTER 1 COUNT 16bô wrôê%x\n", 
vÆue
);

456 
	`psxR˙tWcou¡
(1, 
vÆue
);

459 #ifde‡
PSXHW_LOG


460 
	`PSXHW_LOG
("COUNTER 1 MODE 16bô wrôê%x\n", 
vÆue
);

462 
	`psxR˙tWmode
(1, 
vÆue
);

465 #ifde‡
PSXHW_LOG


466 
	`PSXHW_LOG
("COUNTER 1 TARGET 16bô wrôê%x\n", 
vÆue
);

468 
	`psxR˙tWèrgë
(1, 
vÆue
);

472 #ifde‡
PSXHW_LOG


473 
	`PSXHW_LOG
("COUNTER 2 COUNT 16bô wrôê%x\n", 
vÆue
);

475 
	`psxR˙tWcou¡
(2, 
vÆue
);

478 #ifde‡
PSXHW_LOG


479 
	`PSXHW_LOG
("COUNTER 2 MODE 16bô wrôê%x\n", 
vÆue
);

481 
	`psxR˙tWmode
(2, 
vÆue
);

484 #ifde‡
PSXHW_LOG


485 
	`PSXHW_LOG
("COUNTER 2 TARGET 16bô wrôê%x\n", 
vÆue
);

487 
	`psxR˙tWèrgë
(2, 
vÆue
);

491 i‡(
add
>=0x1f801c00 &&ádd<0x1f801e00) {

492 
	`SPU_wrôeRegi°î
(
add
, 
vÆue
, 
psxRegs
.
cy˛e
);

496 
	`psxHu16ªf
(
add
Ë
	`SWAPu16
(
vÆue
);

497 #ifde‡
PSXHW_LOG


498 
	`PSXHW_LOG
("*Unknow¿16bô wrôê©áddªs†%x vÆuê%x\n", 
add
, 
vÆue
);

502 
	`psxHu16ªf
(
add
Ë
	`SWAPu16
(
vÆue
);

503 #ifde‡
PSXHW_LOG


504 
	`PSXHW_LOG
("*Know¿16bô wrôê©áddªs†%x vÆuê%x\n", 
add
, 
vÆue
);

506 
	}
}

508 
	#DmaExec
(
n
) { \

509 
HW_DMA
##
n
##
_CHCR
 = 
	`SWAPu32
(
vÆue
); \

511 i‡(
	`SWAPu32
(
HW_DMA
##
n
##
_CHCR
Ë& 0x01000000 && SWAPu32(
HW_DMA_PCR
) & (8 << (n * 4))) { \

512 
psxDma
##
	`n
(
	`SWAPu32
(
HW_DMA
##
n
##
_MADR
), SWAPu32(HW_DMA##n##
_BCR
), SWAPu32(HW_DMA##n##
_CHCR
)); \

514 }

	)

516 
	$psxHwWrôe32
(
u32
 
add
, u32 
vÆue
) {

517 
add
) {

519 
	`sioWrôe8
(()
vÆue
);

520 
	`sioWrôe8
(()((
vÆue
&0xff) >> 8));

521 
	`sioWrôe8
(()((
vÆue
&0xff) >> 16));

522 
	`sioWrôe8
(()((
vÆue
&0xff) >> 24));

523 #ifde‡
PAD_LOG


524 
	`PAD_LOG
("siÿwrôe32 %x\n", 
vÆue
);

528 #ifde‡
PSXHW_LOG


530 
	`PSXHW_LOG
("RAM sizêwrôê%x\n", 
vÆue
);

531 
	`psxHu32ªf
(
add
Ë
	`SWAPu32
(
vÆue
);

536 #ifde‡
PSXHW_LOG


537 
	`PSXHW_LOG
("IREG 32bô wrôê%x\n", 
vÆue
);

540 
vÆue
 &= 0x7ff;

543 i‡(
C⁄fig
.
SpuIrq
Ë
	`psxHu32ªf
(0x1070Ë|
	`SWAPu32
(0x200);

545 
	`psxHu32ªf
(0x1070Ë&
	`SWAPu32
(
vÆue
);

549 i‡(
	`psxHu32
(0x1070) &ÖsxHu32(0x1074))

550 
	`Re£tIoCy˛e
();

554 #ifde‡
PSXHW_LOG


555 
	`PSXHW_LOG
("IMASK 32bô wrôê%x\n", 
vÆue
);

558 
vÆue
 &= 0x7ff;

560 
	`psxHu32ªf
(0x1074Ë
	`SWAPu32
(
vÆue
);

564 i‡(
	`psxHu32
(0x1070) &ÖsxHu32(0x1074))

565 
	`Re£tIoCy˛e
();

569 #ifde‡
PSXHW_LOG


571 
	`PSXHW_LOG
("DMA0 MADR 32bô wrôê%x\n", 
vÆue
);

572 
HW_DMA0_MADR
 = 
	`SWAPu32
(
vÆue
);

575 
	`PSXHW_LOG
("DMA0 BCR 32bô wrôê%x\n", 
vÆue
);

576 
HW_DMA0_BCR
 = 
	`SWAPu32
(
vÆue
);

580 #ifde‡
PSXHW_LOG


581 
	`PSXHW_LOG
("DMA0 CHCR 32bô wrôê%x\n", 
vÆue
);

583 
	`DmaExec
(0);

586 #ifde‡
PSXHW_LOG


588 
	`PSXHW_LOG
("DMA1 MADR 32bô wrôê%x\n", 
vÆue
);

589 
HW_DMA1_MADR
 = 
	`SWAPu32
(
vÆue
);

592 
	`PSXHW_LOG
("DMA1 BCR 32bô wrôê%x\n", 
vÆue
);

593 
HW_DMA1_BCR
 = 
	`SWAPu32
(
vÆue
);

597 #ifde‡
PSXHW_LOG


598 
	`PSXHW_LOG
("DMA1 CHCR 32bô wrôê%x\n", 
vÆue
);

600 
	`DmaExec
(1);

603 #ifde‡
PSXHW_LOG


605 
	`PSXHW_LOG
("DMA2 MADR 32bô wrôê%x\n", 
vÆue
);

606 
HW_DMA2_MADR
 = 
	`SWAPu32
(
vÆue
);

609 
	`PSXHW_LOG
("DMA2 BCR 32bô wrôê%x\n", 
vÆue
);

610 
HW_DMA2_BCR
 = 
	`SWAPu32
(
vÆue
);

614 #ifde‡
PSXHW_LOG


615 
	`PSXHW_LOG
("DMA2 CHCR 32bô wrôê%x\n", 
vÆue
);

617 
	`DmaExec
(2);

620 #ifde‡
PSXHW_LOG


622 
	`PSXHW_LOG
("DMA3 MADR 32bô wrôê%x\n", 
vÆue
);

623 
HW_DMA3_MADR
 = 
	`SWAPu32
(
vÆue
);

626 
	`PSXHW_LOG
("DMA3 BCR 32bô wrôê%x\n", 
vÆue
);

627 
HW_DMA3_BCR
 = 
	`SWAPu32
(
vÆue
);

631 #ifde‡
PSXHW_LOG


632 
	`PSXHW_LOG
("DMA3 CHCR 32bô wrôê%x\n", 
vÆue
);

634 
	`DmaExec
(3);

638 #ifde‡
PSXHW_LOG


640 
	`PSXHW_LOG
("DMA4 MADR 32bô wrôê%x\n", 
vÆue
);

641 
HW_DMA4_MADR
 = 
	`SWAPu32
(
vÆue
);

644 
	`PSXHW_LOG
("DMA4 BCR 32bô wrôê%x\n", 
vÆue
);

645 
HW_DMA4_BCR
 = 
	`SWAPu32
(
vÆue
);

649 #ifde‡
PSXHW_LOG


650 
	`PSXHW_LOG
("DMA4 CHCR 32bô wrôê%x\n", 
vÆue
);

652 
	`DmaExec
(4);

655 #ifde‡
PSXHW_LOG


657 
	`PSXHW_LOG
("DMA6 MADR 32bô wrôê%x\n", 
vÆue
);

658 
HW_DMA6_MADR
 = 
	`SWAPu32
(
vÆue
);

661 
	`PSXHW_LOG
("DMA6 BCR 32bô wrôê%x\n", 
vÆue
);

662 
HW_DMA6_BCR
 = 
	`SWAPu32
(
vÆue
);

666 #ifde‡
PSXHW_LOG


667 
	`PSXHW_LOG
("DMA6 CHCR 32bô wrôê%x\n", 
vÆue
);

669 
	`DmaExec
(6);

672 #ifde‡
PSXHW_LOG


674 
	`PSXHW_LOG
("DMA PCR 32bô wrôê%x\n", 
vÆue
);

675 
HW_DMA_PCR
 = 
	`SWAPu32
(
vÆue
);

680 #ifde‡
PSXHW_LOG


681 
	`PSXHW_LOG
("DMA ICR 32bô wrôê%x\n", 
vÆue
);

684 
u32
 
tmp
 = 
vÆue
 & 0x00ff803f;

685 
tmp
 |(
	`SWAPu32
(
HW_DMA_ICR
Ë& ~
vÆue
) & 0x7f000000;

686 i‡((
tmp
 & 
HW_DMA_ICR_GLOBAL_ENABLE
 &&Åmp & 0x7f000000)

687 || 
tmp
 & 
HW_DMA_ICR_BUS_ERROR
) {

688 i‡(!(
	`SWAPu32
(
HW_DMA_ICR
Ë& 
HW_DMA_ICR_IRQ_SENT
))

689 
	`psxHu32ªf
(0x1070Ë|
	`SWAP32
(8);

690 
tmp
 |
HW_DMA_ICR_IRQ_SENT
;

692 
HW_DMA_ICR
 = 
	`SWAPu32
(
tmp
);

697 #ifde‡
PSXHW_LOG


698 
	`PSXHW_LOG
("GPU DATA 32bô wrôê%x\n", 
vÆue
);

700 
	`GPU_wrôeD©a
(
vÆue
);

704 #ifde‡
PSXHW_LOG


705 
	`PSXHW_LOG
("GPU STATUS 32bô wrôê%x\n", 
vÆue
);

707 
	`GPU_wrôeSètus
(
vÆue
);

708 
	`gpuSyncPlugöSR
();

713 
	`mdecWrôe0
(
vÆue
); ;

715 
	`mdecWrôe1
(
vÆue
); ;

718 #ifde‡
PSXHW_LOG


719 
	`PSXHW_LOG
("COUNTER 0 COUNT 32bô wrôê%x\n", 
vÆue
);

721 
	`psxR˙tWcou¡
(0, 
vÆue
 & 0xffff);

724 #ifde‡
PSXHW_LOG


725 
	`PSXHW_LOG
("COUNTER 0 MODE 32bô wrôê%x\n", 
vÆue
);

727 
	`psxR˙tWmode
(0, 
vÆue
);

730 #ifde‡
PSXHW_LOG


731 
	`PSXHW_LOG
("COUNTER 0 TARGET 32bô wrôê%x\n", 
vÆue
);

733 
	`psxR˙tWèrgë
(0, 
vÆue
 & 0xffff);

737 #ifde‡
PSXHW_LOG


738 
	`PSXHW_LOG
("COUNTER 1 COUNT 32bô wrôê%x\n", 
vÆue
);

740 
	`psxR˙tWcou¡
(1, 
vÆue
 & 0xffff);

743 #ifde‡
PSXHW_LOG


744 
	`PSXHW_LOG
("COUNTER 1 MODE 32bô wrôê%x\n", 
vÆue
);

746 
	`psxR˙tWmode
(1, 
vÆue
);

749 #ifde‡
PSXHW_LOG


750 
	`PSXHW_LOG
("COUNTER 1 TARGET 32bô wrôê%x\n", 
vÆue
);

752 
	`psxR˙tWèrgë
(1, 
vÆue
 & 0xffff);

756 #ifde‡
PSXHW_LOG


757 
	`PSXHW_LOG
("COUNTER 2 COUNT 32bô wrôê%x\n", 
vÆue
);

759 
	`psxR˙tWcou¡
(2, 
vÆue
 & 0xffff);

762 #ifde‡
PSXHW_LOG


763 
	`PSXHW_LOG
("COUNTER 2 MODE 32bô wrôê%x\n", 
vÆue
);

765 
	`psxR˙tWmode
(2, 
vÆue
);

768 #ifde‡
PSXHW_LOG


769 
	`PSXHW_LOG
("COUNTER 2 TARGET 32bô wrôê%x\n", 
vÆue
);

771 
	`psxR˙tWèrgë
(2, 
vÆue
 & 0xffff);

775 
	`psxHu32ªf
(
add
Ë
	`SWAPu32
(
vÆue
);

776 #ifde‡
PSXHW_LOG


777 
	`PSXHW_LOG
("*Unknow¿32bô wrôê©áddªs†%x vÆuê%x\n", 
add
, 
vÆue
);

781 
	`psxHu32ªf
(
add
Ë
	`SWAPu32
(
vÆue
);

782 #ifde‡
PSXHW_LOG


783 
	`PSXHW_LOG
("*Know¿32bô wrôê©áddªs†%x vÆuê%x\n", 
add
, 
vÆue
);

785 
	}
}

787 
	$psxHwFªeze
(* 
f
, 
FªezeMode
 
mode
) {

789 
	}
}

	@src/psxhw.h

21 #i‚de‡
__PSXHW_H__


22 
	#__PSXHW_H__


	)

24 
	~"psxcomm⁄.h
"

25 
	~"r3000a.h
"

26 
	~"psxmem.h
"

27 
	~"sio.h
"

28 
	~"psxcou¡îs.h
"

30 
	#HW_DMA0_MADR
 (
	`psxHu32ªf
(0x1080))

31 
	#HW_DMA0_BCR
 (
	`psxHu32ªf
(0x1084))

	)

32 
	#HW_DMA0_CHCR
 (
	`psxHu32ªf
(0x1088))

	)

34 
	#HW_DMA1_MADR
 (
	`psxHu32ªf
(0x1090))

35 
	#HW_DMA1_BCR
 (
	`psxHu32ªf
(0x1094))

	)

36 
	#HW_DMA1_CHCR
 (
	`psxHu32ªf
(0x1098))

	)

38 
	#HW_DMA2_MADR
 (
	`psxHu32ªf
(0x10a0))

39 
	#HW_DMA2_BCR
 (
	`psxHu32ªf
(0x10a4))

	)

40 
	#HW_DMA2_CHCR
 (
	`psxHu32ªf
(0x10a8))

	)

42 
	#HW_DMA3_MADR
 (
	`psxHu32ªf
(0x10b0))

43 
	#HW_DMA3_BCR
 (
	`psxHu32ªf
(0x10b4))

	)

44 
	#HW_DMA3_CHCR
 (
	`psxHu32ªf
(0x10b8))

	)

46 
	#HW_DMA4_MADR
 (
	`psxHu32ªf
(0x10c0))

47 
	#HW_DMA4_BCR
 (
	`psxHu32ªf
(0x10c4))

	)

48 
	#HW_DMA4_CHCR
 (
	`psxHu32ªf
(0x10c8))

	)

50 
	#HW_DMA6_MADR
 (
	`psxHu32ªf
(0x10e0))

51 
	#HW_DMA6_BCR
 (
	`psxHu32ªf
(0x10e4))

	)

52 
	#HW_DMA6_CHCR
 (
	`psxHu32ªf
(0x10e8))

	)

54 
	#HW_DMA_PCR
 (
	`psxHu32ªf
(0x10f0))

	)

55 
	#HW_DMA_ICR
 (
	`psxHu32ªf
(0x10f4))

	)

57 
	#HW_DMA_ICR_BUS_ERROR
 (1<<15)

	)

58 
	#HW_DMA_ICR_GLOBAL_ENABLE
 (1<<23)

	)

59 
	#HW_DMA_ICR_IRQ_SENT
 (1<<31)

	)

61 
	#DMA_INTERRUPT
(
n
) { \

62 
u32
 
i¸
 = 
	`SWAPu32
(
HW_DMA_ICR
); \

63 i‡(
i¸
 & (1 << (16 + 
n
))) { \

64 
i¸
 |1 << (24 + 
n
); \

65 i‡(
i¸
 & 
HW_DMA_ICR_GLOBAL_ENABLE
 && !(i¸ & 
HW_DMA_ICR_IRQ_SENT
)) { \

66 
	`psxHu32ªf
(0x1070Ë|
	`SWAP32
(8); \

67 
i¸
 |
HW_DMA_ICR_IRQ_SENT
; \

69 
HW_DMA_ICR
 = 
	`SWAP32
(
i¸
); \

70 
	`Re£tIoCy˛e
(); \

72 }

	)

74 
psxHwRe£t
();

75 
u8
 
psxHwRód8
 (
u32
 
add
);

76 
u16
 
psxHwRód16
(
u32
 
add
);

77 
u32
 
psxHwRód32
(u32 
add
);

78 
psxHwWrôe8
 (
u32
 
add
, 
u8
 
vÆue
);

79 
psxHwWrôe16
(
u32
 
add
, 
u16
 
vÆue
);

80 
psxHwWrôe32
(
u32
 
add
, u32 
vÆue
);

81 
psxHwFªeze
(* 
f
, 
FªezeMode
 
mode
);

	@src/psxinterpreter.cpp

24 
	~"psxcomm⁄.h
"

25 
	~"r3000a.h
"

26 
	~"gã.h
"

27 
	~"psxhÀ.h
"

29 
	gbønch
 = 0;

30 
	gbønch2
 = 0;

31 
u32
 
	gbønchPC
;

35 #ifde‡
PSXCPU_LOG


36 
	#debugI
(Ë
	`PSXCPU_LOG
("%s\n", 
	`disR3000AF
(
psxRegs
.
code
,ÖsxRegs.
pc
));

	)

38 
	#debugI
()

	)

41 
execI
();

43 
	$psxJumpTe°
() {

44 i‡(!
C⁄fig
.
HLE
) {

45 
u32
 
ˇŒ
 = 
psxRegs
.
GPR
.
n
.
t1
 & 0xff;

46 
psxRegs
.
pc
 & 0x1fffff) {

48 i‡(
biosA0
[
ˇŒ
])

49 
biosA0
[
ˇŒ
]();

52 i‡(
biosB0
[
ˇŒ
])

53 
biosB0
[
ˇŒ
]();

56 i‡(
biosC0
[
ˇŒ
])

57 
biosC0
[
ˇŒ
]();

61 
	}
}

64 (*
psxBSC
[64])();

65 (*
psxSPC
[64])();

66 (*
psxREG
[32])();

67 (*
psxCP0
[32])();

68 (*
psxCP2
[64])();

69 (*
psxCP2BSC
[32])();

71 
	$dñayRód
(
ªg
, 
u32
 
bpc
) {

72 
u32
 
rﬁd
, 
∫ew
;

76 
rﬁd
 = 
psxRegs
.
GPR
.
r
[
ªg
];

77 
psxBSC
[
psxRegs
.
code
 >> 26]();

78 
∫ew
 = 
psxRegs
.
GPR
.
r
[
ªg
];

80 
psxRegs
.
pc
 = 
bpc
;

82 
bønch
 = 0;

84 
psxRegs
.
GPR
.
r
[
ªg
] = 
rﬁd
;

85 
	`execI
();

86 
psxRegs
.
GPR
.
r
[
ªg
] = 
∫ew
;

88 
	`psxBønchTe°
();

89 
	}
}

91 
	$dñayWrôe
(
ªg
, 
u32
 
bpc
) {

100 
psxBSC
[
psxRegs
.
code
 >> 26]();

102 
bønch
 = 0;

103 
psxRegs
.
pc
 = 
bpc
;

105 
	`psxBønchTe°
();

106 
	}
}

108 
	$dñayRódWrôe
(
ªg
, 
u32
 
bpc
) {

114 
bønch
 = 0;

115 
psxRegs
.
pc
 = 
bpc
;

117 
	`psxBønchTe°
();

118 
	}
}

122 
	#_tFun˘_
 ((
tmp
 ) & 0x3F)

123 
	#_tRd_
 ((
tmp
 >> 11) & 0x1F)

124 
	#_tRt_
 ((
tmp
 >> 16) & 0x1F)

125 
	#_tRs_
 ((
tmp
 >> 21) & 0x1F)

126 
	#_tSa_
 ((
tmp
 >> 6) & 0x1F)

127 

	)

128 
	$psxTe°LﬂdDñay
(
ªg
, 
u32
 
tmp
) {

129 i‡(
tmp
 == 0)  0;

130 
tmp
 >> 26) {

132 
_tFun˘_
) {

135 i‡(
_tRd_
 =
ªg
 && 
_tRt_
 ==Ñeg)  1; 

136 i‡(
_tRt_
 =
ªg
)  2; 

137 i‡(
_tRd_
 =
ªg
)  3;

141 i‡(
_tRs_
 =
ªg
)  2;

144 i‡(
_tRd_
 =
ªg
 && 
_tRs_
 ==Ñeg)  1; 

145 i‡(
_tRs_
 =
ªg
)  2; 

146 i‡(
_tRd_
 =
ªg
)  3;

155 i‡(
_tRd_
 =
ªg
 && (
_tRt_
 =ªg || 
_tRs_
 ==Ñeg))  1; 

156 i‡(
_tRt_
 =
ªg
 || 
_tRs_
 ==Ñeg)  2; 

157 i‡(
_tRd_
 =
ªg
)  3;

161 i‡(
_tRd_
 =
ªg
)  3;

164 i‡(
_tRs_
 =
ªg
)  2;

169 i‡(
_tRt_
 =
ªg
 || 
_tRs_
 ==Ñeg)  2;

175 
_tRt_
) {

182 i‡(
_tRs_
 =
ªg
)  2;

189 i‡(31 =
ªg
)  3;

197 i‡(
_tRs_
 =
ªg
 || 
_tRt_
 ==Ñeg)  2;

205 i‡(
_tRs_
 =
ªg
)  2;

210 i‡(
_tRt_
 =
ªg
 && 
_tRs_
 ==Ñeg)  1; 

211 i‡(
_tRs_
 =
ªg
)  2; 

212 i‡(
_tRt_
 =
ªg
)  3;

216 i‡(
_tRt_
 =
ªg
)  3;

220 
_tFun˘_
) {

222 i‡(
_tRt_
 =
ªg
)  3;

225 i‡(
_tRt_
 =
ªg
)  3;

228 i‡(
_tRt_
 =
ªg
)  2;

231 i‡(
_tRt_
 =
ªg
)  2;

238 
_tFun˘_
) {

240 
_tRs_
) {

242 i‡(
_tRt_
 =
ªg
)  3;

245 i‡(
_tRt_
 =
ªg
)  3;

248 i‡(
_tRt_
 =
ªg
)  2;

251 i‡(
_tRt_
 =
ªg
)  2;

260 i‡(
_tRt_
 =
ªg
)  3; 

261 i‡(
_tRs_
 =
ªg
)  2;

266 i‡(
_tRt_
 =
ªg
 && 
_tRs_
 ==Ñeg)  1; 

267 i‡(
_tRs_
 =
ªg
)  2; 

268 i‡(
_tRt_
 =
ªg
)  3;

273 i‡(
_tRt_
 =
ªg
 || 
_tRs_
 ==Ñeg)  2;

277 i‡(
_tRs_
 =
ªg
)  2;

282 
	}
}

284 
	$psxDñayTe°
(
ªg
, 
u32
 
bpc
) {

285 
u32
 *
code
;

286 
u32
 
tmp
;

288 
code
 = (
u32
 *)
	`PSXM
(
bpc
);

289 
tmp
 = ((
code
 =
NULL
Ë? 0 : 
	`SWAP32
(*code));

290 
bønch
 = 1;

292 
	`psxTe°LﬂdDñay
(
ªg
, 
tmp
)) {

294 
	`dñayRódWrôe
(
ªg
, 
bpc
); ;

296 
	`dñayRód
(
ªg
, 
bpc
); ;

298 
	`dñayWrôe
(
ªg
, 
bpc
); ;

300 
psxBSC
[
psxRegs
.
code
 >> 26]();

302 
bønch
 = 0;

303 
psxRegs
.
pc
 = 
bpc
;

305 
	`psxBønchTe°
();

306 
	}
}

308 
u32
 
	$psxBønchNoDñay
() {

309 
u32
 *
code
;

310 
u32
 
ãmp
;

312 
code
 = (
u32
 *)
	`PSXM
(
psxRegs
.
pc
);

313 
psxRegs
.
code
 = ((codê=
NULL
Ë? 0 : 
	`SWAP32
(*code));

314 
_Op_
) {

316 
_Fun˘_
) {

318  
	`_u32
(
_rRs_
);

320 
ãmp
 = 
	`_u32
(
_rRs_
);

321 i‡(
_Rd_
Ë{ 
	`_SëLök
(_Rd_); }

322  
ãmp
;

326 
_Rt_
) {

328 i‡(
	`_i32
(
_rRs_
) < 0)

329  
_BønchT¨gë_
;

332 i‡(
	`_i32
(
_rRs_
) >= 0)

333  
_BønchT¨gë_
;

336 i‡(
	`_i32
(
_rRs_
) < 0) {

337 
	`_SëLök
(31);

338  
_BønchT¨gë_
;

342 i‡(
	`_i32
(
_rRs_
) >= 0) {

343 
	`_SëLök
(31);

344  
_BønchT¨gë_
;

350  
_JumpT¨gë_
;

352 
	`_SëLök
(31);

353  
_JumpT¨gë_
;

355 i‡(
	`_i32
(
_rRs_
Ë=_i32(
_rRt_
))

356  
_BønchT¨gë_
;

359 i‡(
	`_i32
(
_rRs_
Ë!_i32(
_rRt_
))

360  
_BønchT¨gë_
;

363 i‡(
	`_i32
(
_rRs_
) <= 0)

364  
_BønchT¨gë_
;

367 i‡(
	`_i32
(
_rRs_
) > 0)

368  
_BønchT¨gë_
;

372  (
u32
)-1;

373 
	}
}

375 
	$psxDñayBønchExec
(
u32
 
èr
) {

376 
	`execI
();

378 
bønch
 = 0;

379 
psxRegs
.
pc
 = 
èr
;

380 
psxRegs
.
cy˛e
 +
BIAS
;

381 
	`psxBønchTe°
();

383 
	}
}

385 
	$psxDñayBønchTe°
(
u32
 
èr1
) {

386 
u32
 
èr2
, 
tmp1
, 
tmp2
;

388 
èr2
 = 
	`psxBønchNoDñay
();

389 i‡(
èr2
 =(
u32
)-1)

392 
	`debugI
();

400 
psxRegs
.
pc
 = 
èr1
;

401 
tmp1
 = 
	`psxBønchNoDñay
();

402 i‡(
tmp1
 =(
u32
)-1) {

403  
	`psxDñayBønchExec
(
èr2
);

405 
	`debugI
();

406 
psxRegs
.
cy˛e
 +
BIAS
;

413 
psxRegs
.
pc
 = 
èr2
;

414 
tmp2
 = 
	`psxBønchNoDñay
();

415 i‡(
tmp2
 =(
u32
)-1) {

416  
	`psxDñayBønchExec
(
tmp1
);

418 
	`debugI
();

419 
psxRegs
.
cy˛e
 +
BIAS
;

426 
psxRegs
.
pc
 = 
tmp1
;

427  
	`psxDñayBønchExec
(
tmp2
);

428 
	}
}

430 
	$doBønch
(
u32
 
èr
) {

431 
u32
 *
code
;

432 
u32
 
tmp
;

434 
bønch2
 = 
bønch
 = 1;

435 
bønchPC
 = 
èr
;

438 i‡(
	`psxDñayBønchTe°
(
èr
))

441 
code
 = (
u32
 *)
	`PSXM
(
psxRegs
.
pc
);

442 
psxRegs
.
code
 = ((codê=
NULL
Ë? 0 : 
	`SWAP32
(*code));

444 
	`debugI
();

446 
psxRegs
.
pc
 += 4;

447 
psxRegs
.
cy˛e
 +
BIAS
;

450 
tmp
 = 
psxRegs
.
code
 >> 26;

451 
tmp
) {

453 
_Rs_
) {

456 
	`psxDñayTe°
(
_Rt_
, 
bønchPC
);

461 
_Fun˘_
) {

463 
_Rs_
) {

466 
	`psxDñayTe°
(
_Rt_
, 
bønchPC
);

473 
	`psxDñayTe°
(
_Rt_
, 
bønchPC
);

476 i‡(
tmp
 >= 0x20 &&Åmp <= 0x26) {

477 
	`psxDñayTe°
(
_Rt_
, 
bønchPC
);

483 
psxBSC
[
psxRegs
.
code
 >> 26]();

485 
bønch
 = 0;

486 
psxRegs
.
pc
 = 
bønchPC
;

488 
	`psxBønchTe°
();

489 
	}
}

495 
	$psxADDI
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_u32
(
_rRs_
Ë+ 
_Imm_
 ; 
	}
}

496 
	$psxADDIU
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_u32
(
_rRs_
Ë+ 
_Imm_
 ; 
	}
}

497 
	$psxANDI
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_u32
(
_rRs_
Ë& 
_ImmU_
; 
	}
}

498 
	$psxORI
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_u32
(
_rRs_
Ë| 
_ImmU_
; 
	}
}

499 
	$psxXORI
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_u32
(
_rRs_
Ë^ 
_ImmU_
; 
	}
}

500 
	$psxSLTI
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_i32
(
_rRs_
Ë< 
_Imm_
 ; 
	}
}

501 
	$psxSLTIU
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_u32
(
_rRs_
Ë< ((
u32
)
_Imm_
); 
	}
}

507 
	$psxADD
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë+ _u32(
_rRt_
); 
	}
}

508 
	$psxADDU
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë+ _u32(
_rRt_
); 
	}
}

509 
	$psxSUB
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë- _u32(
_rRt_
); 
	}
}

510 
	$psxSUBU
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë- _u32(
_rRt_
); 
	}
}

511 
	$psxAND
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë& _u32(
_rRt_
); 
	}
}

512 
	$psxOR
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë| _u32(
_rRt_
); 
	}
}

513 
	$psxXOR
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë^ _u32(
_rRt_
); 
	}
}

514 
	$psxNOR
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 =~(
	`_u32
(
_rRs_
Ë| _u32(
_rRt_
)); 
	}
}

515 
	$psxSLT
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_i32
(
_rRs_
Ë< _i32(
_rRt_
); 
	}
}

516 
	$psxSLTU
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë< _u32(
_rRt_
); 
	}
}

522 
	$psxDIV
() {

523 i‡(
	`_i32
(
_rRt_
) != 0) {

524 
	`_i32
(
_rLo_
Ë_i32(
_rRs_
Ë/ _i32(
_rRt_
);

525 
	`_i32
(
_rHi_
Ë_i32(
_rRs_
Ë% _i32(
_rRt_
);

528 
	`_i32
(
_rLo_
Ë_i32(
_rRs_
) >= 0 ? 0xffffffff : 1;

529 
	`_i32
(
_rHi_
Ë_i32(
_rRs_
);

531 
	}
}

533 
	$psxDIVU
() {

534 i‡(
_rRt_
 != 0) {

535 
_rLo_
 = 
_rRs_
 / 
_rRt_
;

536 
_rHi_
 = 
_rRs_
 % 
_rRt_
;

539 
	`_i32
(
_rLo_
) = 0xffffffff;

540 
	`_i32
(
_rHi_
Ë_i32(
_rRs_
);

542 
	}
}

544 
	$psxMULT
() {

545 
u64
 
ªs
 = (
s64
)((s64)
	`_i32
(
_rRs_
Ë* (s64)_i32(
_rRt_
));

547 
psxRegs
.
GPR
.
n
.
lo
 = (
u32
)(
ªs
 & 0xffffffff);

548 
psxRegs
.
GPR
.
n
.
hi
 = (
u32
)((
ªs
 >> 32) & 0xffffffff);

549 
	}
}

551 
	$psxMULTU
() {

552 
u64
 
ªs
 = (u64)((u64)
	`_u32
(
_rRs_
Ë* (u64)_u32(
_rRt_
));

554 
psxRegs
.
GPR
.
n
.
lo
 = (
u32
)(
ªs
 & 0xffffffff);

555 
psxRegs
.
GPR
.
n
.
hi
 = (
u32
)((
ªs
 >> 32) & 0xffffffff);

556 
	}
}

562 
	#RïZBønchi32
(
›
Ëif(
	`_i32
(
_rRs_
Ë› 0Ë
	`doBønch
(
_BønchT¨gë_
);

	)

563 
	#RïZBønchLöki32
(
›
Ëif(
	`_i32
(
_rRs_
Ë› 0Ë{ 
	`_SëLök
(31); 
	`doBønch
(
_BønchT¨gë_
); }

	)

565 
	$psxBGEZ
(Ë{ 
	`RïZBønchi32
(>=Ë
	}
}

566 
	$psxBGEZAL
(Ë{ 
	`RïZBønchLöki32
(>=Ë
	}
}

567 
	$psxBGTZ
(Ë{ 
	`RïZBønchi32
(>Ë
	}
}

568 
	$psxBLEZ
(Ë{ 
	`RïZBønchi32
(<=Ë
	}
}

569 
	$psxBLTZ
(Ë{ 
	`RïZBønchi32
(<Ë
	}
}

570 
	$psxBLTZAL
(Ë{ 
	`RïZBønchLöki32
(<Ë
	}
}

576 
	$psxSLL
(Ë{ i‡(!
_Rd_
Ë; 
	`_u32
(
_rRd_
Ë_u32(
_rRt_
Ë<< 
_Sa_
; 
	}
}

577 
	$psxSRA
(Ë{ i‡(!
_Rd_
Ë; 
	`_i32
(
_rRd_
Ë_i32(
_rRt_
Ë>> 
_Sa_
; 
	}
}

578 
	$psxSRL
(Ë{ i‡(!
_Rd_
Ë; 
	`_u32
(
_rRd_
Ë_u32(
_rRt_
Ë>> 
_Sa_
; 
	}
}

584 
	$psxSLLV
(Ë{ i‡(!
_Rd_
Ë; 
	`_u32
(
_rRd_
Ë_u32(
_rRt_
Ë<< _u32(
_rRs_
); 
	}
}

585 
	$psxSRAV
(Ë{ i‡(!
_Rd_
Ë; 
	`_i32
(
_rRd_
Ë_i32(
_rRt_
Ë>> 
	`_u32
(
_rRs_
); 
	}
}

586 
	$psxSRLV
(Ë{ i‡(!
_Rd_
Ë; 
	`_u32
(
_rRd_
Ë_u32(
_rRt_
Ë>> _u32(
_rRs_
); 
	}
}

592 
	$psxLUI
(Ë{ i‡(!
_Rt_
Ë; 
	`_u32
(
_rRt_
Ë
psxRegs
.
code
 << 16; 
	}
}

598 
	$psxMFHI
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
_rHi_
; 
	}
}

599 
	$psxMFLO
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
_rLo_
; 
	}
}

605 
	$psxMTHI
(Ë{ 
_rHi_
 = 
_rRs_
; 
	}
}

606 
	$psxMTLO
(Ë{ 
_rLo_
 = 
_rRs_
; 
	}
}

612 
	$psxBREAK
() {

614 
	}
}

616 
	$psxSYSCALL
() {

617 
psxRegs
.
pc
 -= 4;

618 
	`psxEx˚±i⁄
(0x20, 
bønch
);

619 
	}
}

621 
	$psxRFE
() {

623 
psxRegs
.
CP0
.
n
.
Sètus
 = (psxRegs.CP0.n.Status & 0xfffffff0) |

624 ((
psxRegs
.
CP0
.
n
.
Sètus
 & 0x3c) >> 2);

625 
	}
}

631 
	#RïBønchi32
(
›
Ëif(
	`_i32
(
_rRs_
Ë› _i32(
_rRt_
)Ë
	`doBønch
(
_BønchT¨gë_
);

	)

633 
	$psxBEQ
(Ë{ 
	`RïBønchi32
(==Ë
	}
}

634 
	$psxBNE
(Ë{ 
	`RïBønchi32
(!=Ë
	}
}

640 
	$psxJ
(Ë{ 
	`doBønch
(
_JumpT¨gë_
); 
	}
}

641 
	$psxJAL
(Ë{ 
	`_SëLök
(31); 
	`doBønch
(
_JumpT¨gë_
); 
	}
}

647 
	$psxJR
() {

648 
	`doBønch
(
	`_u32
(
_rRs_
));

649 
	`psxJumpTe°
();

650 
	}
}

652 
	$psxJALR
() {

653 
u32
 
ãmp
 = 
	`_u32
(
_rRs_
);

654 i‡(
_Rd_
Ë{ 
	`_SëLök
(_Rd_); }

655 
	`doBønch
(
ãmp
);

656 
	}
}

663 
	#_oB_
 (
	`_u32
(
_rRs_
Ë+ 
_Imm_
)

	)

665 
	$psxLB
() {

666 i‡(
_Rt_
) {

667 
	`_i32
(
_rRt_
Ë(sig√d )
	`psxMemRód8
(
_oB_
);

669 
	`psxMemRód8
(
_oB_
);

671 
	}
}

673 
	$psxLBU
() {

674 i‡(
_Rt_
) {

675 
	`_u32
(
_rRt_
Ë
	`psxMemRód8
(
_oB_
);

677 
	`psxMemRód8
(
_oB_
);

679 
	}
}

681 
	$psxLH
() {

682 i‡(
_Rt_
) {

683 
	`_i32
(
_rRt_
Ë()
	`psxMemRód16
(
_oB_
);

685 
	`psxMemRód16
(
_oB_
);

687 
	}
}

689 
	$psxLHU
() {

690 i‡(
_Rt_
) {

691 
	`_u32
(
_rRt_
Ë
	`psxMemRód16
(
_oB_
);

693 
	`psxMemRód16
(
_oB_
);

695 
	}
}

697 
	$psxLW
() {

698 i‡(
_Rt_
) {

699 
	`_u32
(
_rRt_
Ë
	`psxMemRód32
(
_oB_
);

701 
	`psxMemRód32
(
_oB_
);

703 
	}
}

705 
u32
 
	gLWL_MASK
[4] = { 0xffffff, 0xffff, 0xff, 0 };

706 
u32
 
	gLWL_SHIFT
[4] = { 24, 16, 8, 0 };

708 
	$psxLWL
() {

709 
u32
 
addr
 = 
_oB_
;

710 
u32
 
shi·
 = 
addr
 & 3;

711 
u32
 
mem
 = 
	`psxMemRód32
(
addr
 & ~3);

713 i‡(!
_Rt_
) ;

714 
	`_u32
(
_rRt_
Ë–_u32(_rRt_Ë& 
LWL_MASK
[
shi·
]) |

715 –
mem
 << 
LWL_SHIFT
[
shi·
]);

725 
	}
}

727 
u32
 
	gLWR_MASK
[4] = { 0, 0xff000000, 0xffff0000, 0xffffff00 };

728 
u32
 
	gLWR_SHIFT
[4] = { 0, 8, 16, 24 };

730 
	$psxLWR
() {

731 
u32
 
addr
 = 
_oB_
;

732 
u32
 
shi·
 = 
addr
 & 3;

733 
u32
 
mem
 = 
	`psxMemRód32
(
addr
 & ~3);

735 i‡(!
_Rt_
) ;

736 
	`_u32
(
_rRt_
Ë–_u32(_rRt_Ë& 
LWR_MASK
[
shi·
]) |

737 –
mem
 >> 
LWR_SHIFT
[
shi·
]);

747 
	}
}

749 
	$psxSB
(Ë{ 
	`psxMemWrôe8
 (
_oB_
, 
_rRt_
 & 0xff); 
	}
}

750 
	$psxSH
(Ë{ 
	`psxMemWrôe16
(
_oB_
, 
_rRt_
 & 0xffff); 
	}
}

751 
	$psxSW
(Ë{ 
	`psxMemWrôe32
(
_oB_
, 
_rRt_
); 
	}
}

753 
u32
 
	gSWL_MASK
[4] = { 0xffffff00, 0xffff0000, 0xff000000, 0 };

754 
u32
 
	gSWL_SHIFT
[4] = { 24, 16, 8, 0 };

756 
	$psxSWL
() {

757 
u32
 
addr
 = 
_oB_
;

758 
u32
 
shi·
 = 
addr
 & 3;

759 
u32
 
mem
 = 
	`psxMemRód32
(
addr
 & ~3);

761 
	`psxMemWrôe32
(
addr
 & ~3, (
	`_u32
(
_rRt_
Ë>> 
SWL_SHIFT
[
shi·
]) |

762 –
mem
 & 
SWL_MASK
[
shi·
]) );

771 
	}
}

773 
u32
 
	gSWR_MASK
[4] = { 0, 0xff, 0xffff, 0xffffff };

774 
u32
 
	gSWR_SHIFT
[4] = { 0, 8, 16, 24 };

776 
	$psxSWR
() {

777 
u32
 
addr
 = 
_oB_
;

778 
u32
 
shi·
 = 
addr
 & 3;

779 
u32
 
mem
 = 
	`psxMemRód32
(
addr
 & ~3);

781 
	`psxMemWrôe32
(
addr
 & ~3, (
	`_u32
(
_rRt_
Ë<< 
SWR_SHIFT
[
shi·
]) |

782 –
mem
 & 
SWR_MASK
[
shi·
]) );

792 
	}
}

798 
	$psxMFC0
(Ë{ i‡(!
_Rt_
Ë; 
	`_i32
(
_rRt_
Ë()
_rFs_
; 
	}
}

799 
	$psxCFC0
(Ë{ i‡(!
_Rt_
Ë; 
	`_i32
(
_rRt_
Ë()
_rFs_
; 
	}
}

801 
	$psxTe°SWI¡s
() {

802 i‡(
psxRegs
.
CP0
.
n
.
Cau£
 &ÖsxRegs.CP0.n.
Sètus
 & 0x0300 &&

803 
psxRegs
.
CP0
.
n
.
Sètus
 & 0x1) {

804 
psxRegs
.
CP0
.
n
.
Cau£
 &= ~0x7c;

805 
	`psxEx˚±i⁄
(
psxRegs
.
CP0
.
n
.
Cau£
, 
bønch
);

807 
	}
}

809 
	$MTC0
(
ªg
, 
u32
 
vÆ
) {

811 
ªg
) {

813 
psxRegs
.
CP0
.
r
[12] = 
vÆ
;

814 
	`psxTe°SWI¡s
();

818 
psxRegs
.
CP0
.
n
.
Cau£
 &= ~0x0300;

819 
psxRegs
.
CP0
.
n
.
Cau£
 |
vÆ
 & 0x0300;

820 
	`psxTe°SWI¡s
();

824 
psxRegs
.
CP0
.
r
[
ªg
] = 
vÆ
;

827 
	}
}

829 
	$psxMTC0
(Ë{ 
	`MTC0
(
_Rd_
, 
	`_u32
(
_rRt_
)); 
	}
}

830 
	$psxCTC0
(Ë{ 
	`MTC0
(
_Rd_
, 
	`_u32
(
_rRt_
)); 
	}
}

836 
	$psxNULL
() {

837 #ifde‡
PSXCPU_LOG


838 
	`PSXCPU_LOG
("psx: Unim∂emíãd o∞%x\n", 
psxRegs
.
code
);

840 
	}
}

842 
	$psxSPECIAL
() {

843 
psxSPC
[
_Fun˘_
]();

844 
	}
}

846 
	$psxREGIMM
() {

847 
psxREG
[
_Rt_
]();

848 
	}
}

850 
	$psxCOP0
() {

851 
psxCP0
[
_Rs_
]();

852 
	}
}

854 
	$psxCOP2
() {

855 
psxCP2
[
_Fun˘_
]();

856 
	}
}

858 
	$psxBASIC
() {

859 
psxCP2BSC
[
_Rs_
]();

860 
	}
}

862 
	$psxHLE
() {

864 
psxHLEt
[
psxRegs
.
code
 & 0x07]();

865 
	}
}

867 (*
psxBSC
[64])() = {

868 
psxSPECIAL
, 
psxREGIMM
, 
psxJ
 , 
psxJAL
 , 
psxBEQ
 , 
psxBNE
 , 
psxBLEZ
, 
psxBGTZ
,

869 
psxADDI
 , 
psxADDIU
 , 
psxSLTI
, 
psxSLTIU
, 
psxANDI
, 
psxORI
 , 
psxXORI
, 
psxLUI
 ,

870 
psxCOP0
 , 
psxNULL
 , 
psxCOP2
,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

871 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

872 
psxLB
 , 
psxLH
 , 
psxLWL
 , 
psxLW
 , 
psxLBU
 , 
psxLHU
 , 
psxLWR
 , 
psxNULL
,

873 
psxSB
 , 
psxSH
 , 
psxSWL
 , 
psxSW
 , 
psxNULL
,ÖsxNULL, 
psxSWR
 ,ÖsxNULL,

874 
psxNULL
 ,ÖsxNULL , 
gãLWC2
,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

875 
psxNULL
 ,ÖsxNULL , 
gãSWC2
, 
psxHLE
 ,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL

876 
	}
};

879 (*
psxSPC
[64])() = {

880 
psxSLL
 , 
psxNULL
 , 
psxSRL
 , 
psxSRA
 , 
psxSLLV
 ,ÖsxNULL , 
psxSRLV
, 
psxSRAV
,

881 
psxJR
 , 
psxJALR
 , 
psxNULL
,ÖsxNULL, 
psxSYSCALL
, 
psxBREAK
,ÖsxNULL,ÖsxNULL,

882 
psxMFHI
, 
psxMTHI
 , 
psxMFLO
, 
psxMTLO
, 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,

883 
psxMULT
, 
psxMULTU
, 
psxDIV
 , 
psxDIVU
, 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,

884 
psxADD
 , 
psxADDU
 , 
psxSUB
 , 
psxSUBU
, 
psxAND
 , 
psxOR
 , 
psxXOR
 , 
psxNOR
 ,

885 
psxNULL
,ÖsxNULL , 
psxSLT
 , 
psxSLTU
,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,

886 
psxNULL
,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,

887 
psxNULL
,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,ÖsxNULL

888 
	}
};

890 (*
psxREG
[32])() = {

891 
psxBLTZ
 , 
psxBGEZ
 , 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

892 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

893 
psxBLTZAL
, 
psxBGEZAL
, 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

894 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL

895 
	}
};

897 (*
psxCP0
[32])() = {

898 
psxMFC0
, 
psxNULL
, 
psxCFC0
,ÖsxNULL, 
psxMTC0
,ÖsxNULL, 
psxCTC0
,ÖsxNULL,

899 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

900 
psxRFE
 , 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

901 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL

902 
	}
};

904 (*
psxCP2
[64])() = {

905 
psxBASIC
, 
gãRTPS
 , 
psxNULL
 ,ÖsxNULL,ÖsxNULL,ÖsxNULL , 
gãNCLIP
,ÖsxNULL,

906 
psxNULL
 ,ÖsxNULL ,ÖsxNULL ,ÖsxNULL, 
gãOP
 ,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,

907 
gãDPCS
 , 
gãINTPL
, 
gãMVMVA
, 
gãNCDS
, 
gãCDP
 , 
psxNULL
 , 
gãNCDT
 ,ÖsxNULL,

908 
psxNULL
 ,ÖsxNULL ,ÖsxNULL , 
gãNCCS
, 
gãCC
 ,ÖsxNULL , 
gãNCS
 ,ÖsxNULL,

909 
gãNCT
 , 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,

910 
gãSQR
 , 
gãDCPL
 , 
gãDPCT
 , 
psxNULL
,ÖsxNULL, 
gãAVSZ3
, 
gãAVSZ4
,ÖsxNULL,

911 
gãRTPT
 , 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,

912 
psxNULL
 ,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,ÖsxNULL, 
gãGPF
 , 
gãGPL
 , 
gãNCCT


913 
	}
};

915 (*
psxCP2BSC
[32])() = {

916 
gãMFC2
, 
psxNULL
, 
gãCFC2
,ÖsxNULL, 
gãMTC2
,ÖsxNULL, 
gãCTC2
,ÖsxNULL,

917 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

918 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

919 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL

920 
	}
};

925 
	$ötInô
() {

927 
	}
}

929 
	$ötRe£t
() {

930 
	}
}

932 
	$ötExecuã
() {

934 
	`execI
();

935 
	}
}

937 
	$ötExecuãBlock
(
èrgë_pc
) {

938 
bønch2
 = 0;

939 do{ 
	`execI
(); }
psxRegs
.
pc
!=
èrgë_pc
);

940 
	}
}

942 
	$ötCÀ¨
(
u32
 
Addr
, u32 
Size
) {

943 
	}
}

945 
	$ötShutdown
() {

946 
	}
}

949 
	$execI
() {

950 
u32
 *
code
 = (u32 *)
	`PSXM
(
psxRegs
.
pc
);

951 
psxRegs
.
code
 = ((codê=
NULL
Ë? 0 : 
	`SWAP32
(*code));

953 
	`debugI
();

957 
psxRegs
.
pc
 += 4;

958 
psxRegs
.
cy˛e
 +
BIAS
;

960 
psxBSC
[
psxRegs
.
code
 >> 26]();

961 
	}
}

963 
R3000A˝u
 
	gpsxI¡
 = {

964 
ötInô
,

965 
ötRe£t
,

966 
ötExecuã
,

967 
ötExecuãBlock
,

968 
ötCÀ¨
,

969 
ötShutdown


	@src/psxmem.cpp

25 
	~<sys/ty≥s.h
>

26 
	~<dúít.h
>

28 
	~"psxmem.h
"

29 
	~"r3000a.h
"

30 
	~"psxhw.h
"

31 #i‚de‡
WIN32


32 
	~<sys/mm™.h
>

37 #i‡
deföed
(
PSXREC
) && \

38 (
deföed
(
SHMEM_MIRRORING
Ë|| 
	$deföed
(
TMPFS_MIRRORING
))

39 
	~<f˙é.h
>

40 
	~<uni°d.h
>

41 
	~<sys/ty≥s.h
>

42 #ifde‡
SHMEM_MIRRORING


43 
	~<sys/shm.h
>

45 
boﬁ
 
psxM_múr‹ed
 = 
Ál£
;

46 
boﬁ
 
psxM_m≠≥d
 = 
Ál£
;

47 
boﬁ
 
psxM_lowî_múr‹
 = 
Ál£
;

48 
boﬁ
 
psxM_uµî_múr‹
 = 
Ál£
;

49 
s8
* 
	`mm≠_psxM
();

50 
	`munm≠_psxM
();

54 
s8
 *
psxM
 = 
NULL
;

55 
s8
 *
psxP
 = 
NULL
;

56 
s8
 *
psxR
 = 
NULL
;

57 
s8
 *
psxH
 = 
NULL
;

59 
u8
 **
psxMemWLUT
 = 
NULL
;

60 
u8
 **
psxMemRLUT
 = 
NULL
;

61 
u8
 *
psxNULLªad
=
NULL
;

80 
	$psxMemInô
() {

81 
i
;

83 
psxMemRLUT
 = (
u8
 **)
	`mÆloc
(0x10000 * (*));

84 
psxMemWLUT
 = (
u8
 **)
	`mÆloc
(0x10000 * (*));

85 
	`mem£t
(
psxMemRLUT
, 0, 0x10000 * (*));

86 
	`mem£t
(
psxMemWLUT
, 0, 0x10000 * (*));

88 #i‡
	`deföed
(
PSXREC
) && \

89 (
	`deföed
(
SHMEM_MIRRORING
Ë|| deföed(
TMPFS_MIRRORING
))

90 
psxM
 = 
	`mm≠_psxM
();

93 i‡(
psxM
 =
NULL
)

94 
psxM
 = (
s8
 *)
	`mÆloc
(0x200000);

97 i‡(
psxP
 =
NULL
)

98 
psxP
 = (
s8
 *)
	`mÆloc
(0x10000);

99 i‡(
psxH
 =
NULL
)

100 
psxH
 = (
s8
 *)
	`mÆloc
(0x10000);

102 i‡(
psxR
 =
NULL
)

103 
psxR
 = (
s8
 *)
	`mÆloc
(0x80000);

105 i‡(
psxNULLªad
 =
NULL
)

106 
psxNULLªad
=(
u8
*)
	`mÆloc
(0x10000);

108 
	`mem£t
(
psxNULLªad
, 0, 0x10000);

110 i‡(
psxMemRLUT
 =
NULL
 || 
psxMemWLUT
 == NULL ||

111 
psxM
 =
NULL
 || 
psxP
 =NULL || 
psxH
 == NULL ||

112 
psxNULLªad
 =
NULL
) {

113 
	`¥ötf
("Errorállocating memory!");

118 
i
 = 0; i< 0x10000; i++Ë
psxMemRLUT
[i]=
psxNULLªad
;

119 
i
 = 0; i < 0x80; i++Ë
psxMemRLUT
[ò+ 0x0000] = (
u8
 *)&
psxM
[(i & 0x1f) << 16];

121 
	`mem˝y
(
psxMemRLUT
 + 0x8000,ÖsxMemRLUT, 0x80 * (*));

122 
	`mem˝y
(
psxMemRLUT
 + 0xa000,ÖsxMemRLUT, 0x80 * (*));

124 
psxMemRLUT
[0x1f00] = (
u8
 *)
psxP
;

125 
psxMemRLUT
[0x1f80] = (
u8
 *)
psxH
;

127 
i
 = 0; i < 0x08; i++Ë
psxMemRLUT
[ò+ 0x1fc0] = (
u8
 *)&
psxR
[i << 16];

129 
	`mem˝y
(
psxMemRLUT
 + 0x9fc0,ÖsxMemRLUT + 0x1fc0, 0x08 * (*));

130 
	`mem˝y
(
psxMemRLUT
 + 0xbfc0,ÖsxMemRLUT + 0x1fc0, 0x08 * (*));

133 
i
 = 0; i < 0x80; i++Ë
psxMemWLUT
[ò+ 0x0000] = (
u8
 *)&
psxM
[(i & 0x1f) << 16];

134 
	`mem˝y
(
psxMemWLUT
 + 0x8000,ÖsxMemWLUT, 0x80 * (*));

135 
	`mem˝y
(
psxMemWLUT
 + 0xa000,ÖsxMemWLUT, 0x80 * (*));

137 
psxMemWLUT
[0x1f00] = (
u8
 *)
psxP
;

138 
psxMemWLUT
[0x1f80] = (
u8
 *)
psxH
;

141 
	}
}

143 
	$psxMemRe£t
() {

144 
DIR
 *
dú°ªam
 = 
NULL
;

145 
dúít
 *
dúíåy
;

146 
boﬁón
 
biosfound
 = 
FALSE
;

147 
FILE
 *
f
 = 
NULL
;

148 
bios
[
MAXPATHLEN
];

150 
	`mem£t
(
psxM
, 0, 0x200000);

151 
	`mem£t
(
psxP
, 0, 0x10000);

152 
	`mem£t
(
psxR
, 0, 0x80000);

154 i‡(
C⁄fig
.
HLE
==
FALSE
) {

155 
dú°ªam
 = 
	`›ídú
(
C⁄fig
.
BiosDú
);

156 i‡(
dú°ªam
 =
NULL
) {

157 
	`¥ötf
("CouldÇŸ o≥¿BIOS dúe˘‹y: \"%s\". E«blög HLE Bios!\n", 
C⁄fig
.
BiosDú
);

158 
C⁄fig
.
HLE
 = 
TRUE
;

162 (
dúíåy
 = 
	`ªaddú
(
dú°ªam
))) {

163 i‡(!
	`°rˇ£cmp
(
dúíåy
->
d_«me
, 
C⁄fig
.
Bios
)) {

164 i‡(
	`¢¥ötf
(
bios
, 
MAXPATHLEN
, "%s/%s", 
C⁄fig
.
BiosDú
, 
dúíåy
->
d_«me
) >= MAXPATHLEN)

167 
f
 = 
	`f›í
(
bios
, "rb");

169 i‡(
f
 =
NULL
) {

172 
size_t
 
byãs_ªad
, 
byãs_ex≥˘ed
 = 0x80000;

173 
byãs_ªad
 = 
	`‰ód
(
psxR
, 1, 
byãs_ex≥˘ed
, 
f
);

174 i‡(
byãs_ªad
 == 0) {

175 
	`¥ötf
("Eº‹: skùpögÉm±y BIOS fûê%s!\n", 
bios
);

176 
	`f˛o£
(
f
);

178 } i‡(
byãs_ªad
 < 
byãs_ex≥˘ed
) {

179 
	`¥ötf
("W¨nög: sizêo‡BIOS fûê%†i†smÆÀ∏th™Éx≥˘ed!\n", 
bios
);

180 
	`¥ötf
("Ex≥˘ed %zu byã†™d gŸ o∆y %zu\n", 
byãs_ex≥˘ed
, 
byãs_ªad
);

182 
	`¥ötf
("Lﬂded BIOS image: %s\n", 
bios
);

185 
	`f˛o£
(
f
);

186 
C⁄fig
.
HLE
 = 
FALSE
;

187 
biosfound
 = 
TRUE
;

192 
	`˛o£dú
(
dú°ªam
);

194 i‡(!
biosfound
) {

195 
	`¥ötf
("CouldÇŸÜoˇã BIOS: \"%s\". E«blög HLE BIOS!\n", 
C⁄fig
.
Bios
);

196 
C⁄fig
.
HLE
 = 
TRUE
;

200 i‡(
C⁄fig
.
HLE
)

201 
	`¥ötf
("Using HLEÉmulated BIOS functions. Expect incompatibilities.\n");

202 
	}
}

204 
	$psxMemShutdown
()

206 #i‡
	`deföed
(
PSXREC
) && \

207 (
	`deföed
(
SHMEM_MIRRORING
Ë|| deföed(
TMPFS_MIRRORING
))

208 
	`munm≠_psxM
();

211 
	`‰ì
(
psxM
);ÖsxM = 
NULL
;

212 
	`‰ì
(
psxP
);ÖsxP = 
NULL
;

213 
	`‰ì
(
psxH
);ÖsxH = 
NULL
;

214 
	`‰ì
(
psxR
);ÖsxR = 
NULL
;

215 
	`‰ì
(
psxMemRLUT
);ÖsxMemRLUT = 
NULL
;

216 
	`‰ì
(
psxMemWLUT
);ÖsxMemWLUT = 
NULL
;

217 
	`‰ì
(
psxNULLªad
);ÖsxNULLªad = 
NULL
;

218 
	}
}

220 
u8
 
	$psxMemRód8
(
u32
 
mem
)

222 
u8
 
ªt
;

223 
u32
 
t
 = 
mem
 >> 16;

224 
u32
 
m
 = 
mem
 & 0xffff;

225 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

226 i‡(
m
 < 0x400)

227 
ªt
 = 
	`psxHu8
(
mem
);

229 
ªt
 = 
	`psxHwRód8
(
mem
);

231 
u8
 *
p
 = (u8*)(
psxMemRLUT
[
t
]);

232 i‡(
p
 !
NULL
) {

233  *(
u8
*)(
p
 + 
m
);

235 #ifde‡
PSXMEM_LOG


236 
	`PSXMEM_LOG
("î∏lb %8.8lx\n", 
mem
);

238 
ªt
 = 0;

242  
ªt
;

243 
	}
}

245 
u16
 
	$psxMemRód16
(
u32
 
mem
)

247 
u16
 
ªt
;

248 
u32
 
t
 = 
mem
 >> 16;

249 
u32
 
m
 = 
mem
 & 0xffff;

250 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

251 i‡(
m
 < 0x400)

252 
ªt
 = 
	`psxHu16
(
mem
);

254 
ªt
 = 
	`psxHwRód16
(
mem
);

256 
u8
 *
p
 = (u8*)(
psxMemRLUT
[
t
]);

257 i‡(
p
 !
NULL
) {

258 
ªt
 = 
	`SWAPu16
(*(
u16
*)(
p
 + 
m
));

260 #ifde‡
PSXMEM_LOG


261 
	`PSXMEM_LOG
("î∏lh %8.8lx\n", 
mem
);

263 
ªt
 = 0;

267  
ªt
;

268 
	}
}

270 
u32
 
	$psxMemRód32
(
u32
 
mem
)

272 
u32
 
ªt
;

273 
u32
 
t
 = 
mem
 >> 16;

274 
u32
 
m
 = 
mem
 & 0xffff;

275 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

276 i‡(
m
 < 0x400)

277 
ªt
 = 
	`psxHu32
(
mem
);

279 
ªt
 = 
	`psxHwRód32
(
mem
);

281 
u8
 *
p
 = (u8*)(
psxMemRLUT
[
t
]);

282 i‡(
p
 !
NULL
) {

283 
ªt
 = 
	`SWAPu32
(*(
u32
*)(
p
 + 
m
));

285 #ifde‡
PSXMEM_LOG


286 i‡(
psxRegs
.
wrôeok
Ë{ 
	`PSXMEM_LOG
("î∏lw %8.8lx\n", 
mem
); }

288 
ªt
 = 0;

292  
ªt
;

293 
	}
}

295 
	$psxMemWrôe8
(
u32
 
mem
, 
u8
 
vÆue
)

297 
u32
 
t
 = 
mem
 >> 16;

298 
u32
 
m
 = 
mem
 & 0xffff;

299 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

300 i‡(
m
 < 0x400)

301 
	`psxHu8
(
mem
Ë
vÆue
;

303 
	`psxHwWrôe8
(
mem
, 
vÆue
);

305 
u8
 *
p
 = (u8*)(
psxMemWLUT
[
t
]);

306 i‡(
p
 !
NULL
) {

307 *(
u8
*)(
p
 + 
m
Ë
vÆue
;

308 #ifde‡
PSXREC


309 
psxCpu
->
	`CÀ¨
((
mem
 & (~3)), 1);

312 #ifde‡
PSXMEM_LOG


313 
	`PSXMEM_LOG
("î∏sb %8.8lx\n", 
mem
);

317 
	}
}

319 
	$psxMemWrôe16
(
u32
 
mem
, 
u16
 
vÆue
)

321 
u32
 
t
 = 
mem
 >> 16;

322 
u32
 
m
 = 
mem
 & 0xffff;

323 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

324 i‡(
m
 < 0x400)

325 
	`psxHu16ªf
(
mem
Ë
	`SWAPu16
(
vÆue
);

327 
	`psxHwWrôe16
(
mem
, 
vÆue
);

329 
u8
 *
p
 = (u8*)(
psxMemWLUT
[
t
]);

330 i‡(
p
 !
NULL
) {

331 *(
u16
*)(
p
 + 
m
Ë
	`SWAPu16
(
vÆue
);

332 #ifde‡
PSXREC


333 
psxCpu
->
	`CÀ¨
((
mem
 & (~3)), 1);

336 #ifde‡
PSXMEM_LOG


337 
	`PSXMEM_LOG
("î∏sh %8.8lx\n", 
mem
);

341 
	}
}

343 
	$psxMemWrôe32
(
u32
 
mem
, u32 
vÆue
)

345 
u32
 
t
 = 
mem
 >> 16;

346 
u32
 
m
 = 
mem
 & 0xffff;

347 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

348 i‡(
m
 < 0x400)

349 
	`psxHu32ªf
(
mem
Ë
	`SWAPu32
(
vÆue
);

351 
	`psxHwWrôe32
(
mem
, 
vÆue
);

353 
u8
 *
p
 = (u8*)(
psxMemWLUT
[
t
]);

354 i‡(
p
 !
NULL
) {

355 *(
u32
*)(
p
 + 
m
Ë
	`SWAPu32
(
vÆue
);

356 #ifde‡
PSXREC


357 
psxCpu
->
	`CÀ¨
(
mem
, 1);

360 i‡(
mem
 != 0xfffe0130) {

361 #ifde‡
PSXREC


362 i‡(!
psxRegs
.
wrôeok
Ë
psxCpu
->
	`CÀ¨
(
mem
, 1);

365 #ifde‡
PSXMEM_LOG


366 i‡(
psxRegs
.
wrôeok
Ë{ 
	`PSXMEM_LOG
("î∏sw %8.8lx\n", 
mem
); }

370 
vÆue
) {

372 i‡(
psxRegs
.
wrôeok
 == 0) ;

373 
psxRegs
.
wrôeok
 = 0;

374 
	`mem£t
(
psxMemWLUT
 + 0x0000, 0, 0x80 * (*));

375 
	`mem£t
(
psxMemWLUT
 + 0x8000, 0, 0x80 * (*));

376 
	`mem£t
(
psxMemWLUT
 + 0xa000, 0, 0x80 * (*));

379 i‡(
psxRegs
.
wrôeok
 == 1) ;

380 
psxRegs
.
wrôeok
 = 1;

381 
i
 = 0; i < 0x80; i++Ë
psxMemWLUT
[ò+ 0x0000] = (
u8
*)&
psxM
[(i & 0x1f) << 16];

382 
	`mem˝y
(
psxMemWLUT
 + 0x8000,ÖsxMemWLUT, 0x80 * (*));

383 
	`mem˝y
(
psxMemWLUT
 + 0xa000,ÖsxMemWLUT, 0x80 * (*));

386 #ifde‡
PSXMEM_LOG


387 
	`PSXMEM_LOG
("unk %8.8lx = %x\n", 
mem
, 
vÆue
);

394 
	}
}

400 #i‡
deföed
(
PSXREC
) && \

401 (
deföed
(
SHMEM_MIRRORING
Ë|| 
	$deföed
(
TMPFS_MIRRORING
))

403 
s8
* 
	$mm≠_psxM
()

406 i‡(
psxM_m≠≥d
)

407  
psxM
;

409 
boﬁ
 
suc˚ss
 = 
åue
;

410 
memfd
 = -1;

411 
s8
* 
±r
 = 
NULL
;

412 * 
mm≠_ªtvÆ
 = 
NULL
;

414 #ifde‡
SHMEM_MIRRORING


416 
	`¥ötf
("Mapping/mirroring 2MB PSX RAM using POSIX shared mem\n");

417 c⁄° * 
mem_‚ame
 = "/pcsx4all_psxmem";

418 
memfd
 = 
	`shm_›í
(
mem_‚ame
, 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 
S_IRUSR
|
S_IWUSR
);

422 c⁄° * 
mem_‚ame
 = 
TMPFS_DIR
 "/pcsx4all_psxmem";

423 
	`¥ötf
("M≠pög/múr‹ög 2MB PSX RAM usögÅmpf†fûê%s\n", 
mem_‚ame
);

424 
memfd
 = 
	`›í
(
mem_‚ame
, 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 
S_IRUSR
|
S_IWUSR
);

427 i‡(
memfd
 < 0) {

428 #ifde‡
SHMEM_MIRRORING


429 
	`¥ötf
("Errorácquiring POSIX shared memory file descriptor\n");

431 
	`¥ötf
("Eº‹ cª©ögÅmpf†fûe: %s\n", 
mem_‚ame
);

433 
suc˚ss
 = 
Ál£
;

434 
exô
;

438 i‡(
	`·runˇã
(
memfd
, 0x200000) < 0) {

439 
	`¥ötf
("Error in callÅo ftruncate(), couldÇot get 2MB of PSX RAM\n");

440 
suc˚ss
 = 
Ál£
;

441 
exô
;

445 
mm≠_ªtvÆ
 = 
	`mm≠
((*)0x10000000, 0x200000,

446 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
|
MAP_FIXED
, 
memfd
, 0);

447 i‡(
mm≠_ªtvÆ
 =
MAP_FAILED
) {

448 
	`¥ötf
("Warning: mmap()Åo 0x10000000 of 2MB PSX RAM mmap fd failed.\n"

450 
suc˚ss
 = 
Ál£
;

451 
exô
;

453 
±r
 = (
s8
*)
mm≠_ªtvÆ
;

454 
psxM_m≠≥d
 = 
åue
;

467 
mm≠_ªtvÆ
 = 
	`mm≠
((*)(
±r
-0x10000), 0x10000,

468 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
|
MAP_FIXED
, 
memfd
, 0x200000-0x10000);

469 i‡(
mm≠_ªtvÆ
 =
MAP_FAILED
) {

470 
	`¥ötf
("Warning: creating mmap() mirror of upper 64KB of PSX RAM failed.\n");

472 
psxM_uµî_múr‹
 = 
åue
;

477 
mm≠_ªtvÆ
 = 
	`mm≠
((*)(
±r
+0x200000), 0x10000,

478 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
|
MAP_FIXED
, 
memfd
, 0);

479 i‡(
mm≠_ªtvÆ
 =
MAP_FAILED
) {

480 
	`¥ötf
("Warning: creating mmap() mirror ofÜower 64KB of PSX RAM failed.\n");

482 
psxM_lowî_múr‹
 = 
åue
;

485 
exô
:

486 i‡(
suc˚ss
) {

487 
psxM_múr‹ed
 = (
psxM_lowî_múr‹
 && 
psxM_uµî_múr‹
);

488 
	`¥ötf
(" ..success!\n");

490 
	`≥º‹
(
__func__
);

491 
	`¥ötf
("ERROR: FailedÅo mmap() 2MB PSX RAM, falling backÅo malloc()\n");

492 
±r
 = 
NULL
;

496 #ifde‡
SHMEM_MIRRORING


497 
	`shm_u∆ök
(
mem_‚ame
);

499 i‡(
memfd
 >= 0)

500 
	`˛o£
(
memfd
);

501 
	`u∆ök
(
mem_‚ame
);

504 
psxM_m≠≥d
 = 
suc˚ss
;

505  
±r
;

506 
	}
}

508 
	$munm≠_psxM
()

510 i‡(!
psxM_m≠≥d
)

513 i‡(
psxM_uµî_múr‹
)

514 
	`munm≠
((*)((
u8
*)
psxM
-0x10000), 0x10000);

515 i‡(
psxM_lowî_múr‹
)

516 
	`munm≠
((*)((
u8
*)
psxM
+0x200000), 0x10000);

517 
	`munm≠
((*)
psxM
, 0x200000);

518 
psxM_m≠≥d
 = 
psxM_múr‹ed
 = 
psxM_uµî_múr‹
 = 
psxM_lowî_múr‹
 = 
Ál£
;

519 
psxM
 = 
NULL
;

520 
	}
}

531 
u8
 
	$psxMemRód8_dúe˘
(
u32
 
mem
,*
_ªgs
) {

532 c⁄° 
psxRegi°îs
 *
ªgs
=’sxRegi°î†*)
_ªgs
;

533 
u32
 
m
 = 
mem
 & 0xffff;

534 
mem
>>16) {

536 i‡(
m
<0x1000)

537  (*(
u8
*Ë&
ªgs
->
psxH
[
m
]);

538  
	`psxHwRód8
(
mem
);

540  (*(
u8
*Ë&
ªgs
->
psxP
[
m
]);

542 
m
|=
mem
&0x70000;

543  (*(
u8
*Ë&
ªgs
->
psxR
[
m
]);

545 
	}
}

547 
u16
 
	$psxMemRód16_dúe˘
(
u32
 
mem
,*
_ªgs
) {

548 c⁄° 
psxRegi°îs
 *
ªgs
=’sxRegi°î†*)
_ªgs
;

549 
u32
 
m
 = 
mem
 & 0xffff;

550 
mem
>>16) {

552 i‡(
m
<0x1000)

553  (*(
u16
*Ë&
ªgs
->
psxH
[
m
]);

554  
	`psxHwRód16
(
mem
);

556  (*(
u16
*Ë&
ªgs
->
psxP
[
m
]);

558 
m
|=
mem
&0x70000;

559  (*(
u16
*Ë&
ªgs
->
psxR
[
m
]);

561 
	}
}

563 
u32
 
	$psxMemRód32_dúe˘
(
u32
 
mem
,*
_ªgs
) {

564 c⁄° 
psxRegi°îs
 *
ªgs
=’sxRegi°î†*)
_ªgs
;

565 
u32
 
m
 = 
mem
 & 0xffff;

566 
mem
>>16) {

568 i‡(
m
<0x1000)

569  (*(
u32
*Ë&
ªgs
->
psxH
[
m
]);

570  
	`psxHwRód32
(
mem
);

572  (*(
u32
*Ë&
ªgs
->
psxP
[
m
]);

574 
m
|=
mem
&0x70000;

575  (*(
u32
*Ë&
ªgs
->
psxR
[
m
]);

577 
	}
}

579 
	$psxMemWrôe8_dúe˘
(
u32
 
mem
, 
u8
 
vÆue
,*
_ªgs
) {

580 c⁄° 
psxRegi°îs
 *
ªgs
=’sxRegi°î†*)
_ªgs
;

581 
u32
 
m
 = 
mem
 & 0xffff;

582 
mem
>>16) {

584 i‡(
m
<0x1000Ë*((
u8
 *)&
ªgs
->
psxH
[m]Ë
vÆue
;

585 
	`psxHwWrôe8
(
mem
,
vÆue
);

588 *((
u8
 *)&
ªgs
->
psxP
[
m
]Ë
vÆue
;

591 
	}
}

593 
	$psxMemWrôe16_dúe˘
(
u32
 
mem
, 
u16
 
vÆue
,*
_ªgs
) {

594 c⁄° 
psxRegi°îs
 *
ªgs
=’sxRegi°î†*)
_ªgs
;

595 
u32
 
m
 = 
mem
 & 0xffff;

596 
mem
>>16) {

598 i‡(
m
<0x1000Ë*((
u16
 *)&
ªgs
->
psxH
[m]Ë
vÆue
;

599 
	`psxHwWrôe16
(
mem
,
vÆue
);

602 *((
u16
 *)&
ªgs
->
psxP
[
m
]Ë
vÆue
;

604 
	}
}

606 
	$psxMemWrôe32_dúe˘
(
u32
 
mem
, u32 
vÆue
,*
_ªgs
) {

607 c⁄° 
psxRegi°îs
 *
ªgs
=’sxRegi°î†*)
_ªgs
;

608 
u32
 
m
 = 
mem
 & 0xffff;

609 
mem
>>16) {

611 i‡(
m
<0x1000Ë*((
u32
 *)&
ªgs
->
psxH
[m]Ë
vÆue
;

612 
	`psxHwWrôe32
(
mem
,
vÆue
);

615 *((
u32
 *)&
ªgs
->
psxP
[
m
]Ë
vÆue
;

617 
	}
}

	@src/psxmem.h

21 #i‚de‡
__PSXMEMORY_H__


22 
	#__PSXMEMORY_H__


	)

24 
	~"psxcomm⁄.h
"

26 #i‡
deföed
(
__BIGENDIAN__
)

28 
	#_SWAP16
(
b
Ë((((*)&(b))[0]&0xffË| (((*)&(b))[1]&0xff)<<8)

	)

29 
	#_SWAP32
(
b
Ë((((*)&(b))[0]&0xffË| ((((*)&(b))[1]&0xff)<<8Ë| ((((*)&(b))[2]&0xff)<<16Ë| (((*)&(b))[3]<<24))

	)

31 
	#SWAP16
(
v
Ë((((v)&0xff00)>>8Ë+(((v)&0xff)<<8))

	)

32 
	#SWAP32
(
v
Ë((((v)&0xff000000ul)>>24Ë+ (((v)&0xff0000ul)>>8Ë+ (((v)&0xff00ul)<<8Ë+(((v)&0xfful)<<24))

	)

33 
	#SWAPu32
(
v
Ë
	`SWAP32
((
u32
)(v))

	)

34 
	#SWAPs32
(
v
Ë
	`SWAP32
((
s32
)(v))

	)

36 
	#SWAPu16
(
v
Ë
	`SWAP16
((
u16
)(v))

	)

37 
	#SWAPs16
(
v
Ë
	`SWAP16
((
s16
)(v))

	)

41 
	#SWAP16
(
b
Ë(b)

	)

42 
	#SWAP32
(
b
Ë(b)

	)

44 
	#SWAPu16
(
b
Ë(b)

	)

45 
	#SWAPu32
(
b
Ë(b)

	)

50 #i‡
deföed
(
PSXREC
) && \

51 (
deföed
(
SHMEM_MIRRORING
Ë|| 
	$deföed
(
TMPFS_MIRRORING
))

52 
boﬁ
 
psxM_múr‹ed
;

55 
s8
 *
psxM
;

56 
	#psxMs8
(
mem
Ë
psxM
[(memË& 0x1fffff]

	)

57 
	#psxMs16
(
mem
Ë(
	`SWAP16
(*(
s16
*)&
psxM
[(memË& 0x1fffff]))

	)

58 
	#psxMs32
(
mem
Ë(
	`SWAP32
(*(
s32
*)&
psxM
[(memË& 0x1fffff]))

	)

59 
	#psxMu8
(
mem
Ë(*(
u8
*)&
psxM
[(memË& 0x1fffff])

	)

60 
	#psxMu16
(
mem
Ë(
	`SWAP16
(*(
u16
*)&
psxM
[(memË& 0x1fffff]))

	)

61 
	#psxMu32
(
mem
Ë(
	`SWAP32
(*(
u32
*)&
psxM
[(memË& 0x1fffff]))

	)

63 
	#psxMs8ªf
(
mem
Ë
psxM
[(memË& 0x1fffff]

	)

64 
	#psxMs16ªf
(
mem
Ë(*(
s16
*)&
psxM
[(memË& 0x1fffff])

	)

65 
	#psxMs32ªf
(
mem
Ë(*(
s32
*)&
psxM
[(memË& 0x1fffff])

	)

66 
	#psxMu8ªf
(
mem
Ë(*(
u8
*Ë&
psxM
[(memË& 0x1fffff])

	)

67 
	#psxMu16ªf
(
mem
Ë(*(
u16
*)&
psxM
[(memË& 0x1fffff])

	)

68 
	#psxMu32ªf
(
mem
Ë(*(
u32
*)&
psxM
[(memË& 0x1fffff])

	)

70 
s8
 *
psxP
;

71 
	#psxPs8
(
mem
Ë
psxP
[(memË& 0xffff]

	)

72 
	#psxPs16
(
mem
Ë(
	`SWAP16
(*(
s16
*)&
psxP
[(memË& 0xffff]))

	)

73 
	#psxPs32
(
mem
Ë(
	`SWAP32
(*(
s32
*)&
psxP
[(memË& 0xffff]))

	)

74 
	#psxPu8
(
mem
Ë(*(
u8
*Ë&
psxP
[(memË& 0xffff])

	)

75 
	#psxPu16
(
mem
Ë(
	`SWAP16
(*(
u16
*)&
psxP
[(memË& 0xffff]))

	)

76 
	#psxPu32
(
mem
Ë(
	`SWAP32
(*(
u32
*)&
psxP
[(memË& 0xffff]))

	)

78 
	#psxPs8ªf
(
mem
Ë
psxP
[(memË& 0xffff]

	)

79 
	#psxPs16ªf
(
mem
Ë(*(
s16
*)&
psxP
[(memË& 0xffff])

	)

80 
	#psxPs32ªf
(
mem
Ë(*(
s32
*)&
psxP
[(memË& 0xffff])

	)

81 
	#psxPu8ªf
(
mem
Ë(*(
u8
*Ë&
psxP
[(memË& 0xffff])

	)

82 
	#psxPu16ªf
(
mem
Ë(*(
u16
*)&
psxP
[(memË& 0xffff])

	)

83 
	#psxPu32ªf
(
mem
Ë(*(
u32
*)&
psxP
[(memË& 0xffff])

	)

85 
s8
 *
psxR
;

86 
	#psxRs8
(
mem
Ë
psxR
[(memË& 0x7ffff]

	)

87 
	#psxRs16
(
mem
Ë(
	`SWAP16
(*(
s16
*)&
psxR
[(memË& 0x7ffff]))

	)

88 
	#psxRs32
(
mem
Ë(
	`SWAP32
(*(
s32
*)&
psxR
[(memË& 0x7ffff]))

	)

89 
	#psxRu8
(
mem
Ë(*(
u8
* )&
psxR
[(memË& 0x7ffff])

	)

90 
	#psxRu16
(
mem
Ë(
	`SWAP16
(*(
u16
*)&
psxR
[(memË& 0x7ffff]))

	)

91 
	#psxRu32
(
mem
Ë(
	`SWAP32
(*(
u32
*)&
psxR
[(memË& 0x7ffff]))

	)

93 
	#psxRs8ªf
(
mem
Ë
psxR
[(memË& 0x7ffff]

	)

94 
	#psxRs16ªf
(
mem
Ë(*(
s16
*)&
psxR
[(memË& 0x7ffff])

	)

95 
	#psxRs32ªf
(
mem
Ë(*(
s32
*)&
psxR
[(memË& 0x7ffff])

	)

96 
	#psxRu8ªf
(
mem
Ë(*(
u8
* )&
psxR
[(memË& 0x7ffff])

	)

97 
	#psxRu16ªf
(
mem
Ë(*(
u16
*)&
psxR
[(memË& 0x7ffff])

	)

98 
	#psxRu32ªf
(
mem
Ë(*(
u32
*)&
psxR
[(memË& 0x7ffff])

	)

100 
s8
 *
psxH
;

101 
	#psxHs8
(
mem
Ë
psxH
[(memË& 0xffff]

	)

102 
	#psxHs16
(
mem
Ë(
	`SWAP16
(*(
s16
*)&
psxH
[(memË& 0xffff]))

	)

103 
	#psxHs32
(
mem
Ë(
	`SWAP32
(*(
s32
*)&
psxH
[(memË& 0xffff]))

	)

104 
	#psxHu8
(
mem
Ë(*(
u8
*Ë&
psxH
[(memË& 0xffff])

	)

105 
	#psxHu16
(
mem
Ë(
	`SWAP16
(*(
u16
*)&
psxH
[(memË& 0xffff]))

	)

106 
	#psxHu32
(
mem
Ë(
	`SWAP32
(*(
u32
*)&
psxH
[(memË& 0xffff]))

	)

108 
	#psxHs8ªf
(
mem
Ë
psxH
[(memË& 0xffff]

	)

109 
	#psxHs16ªf
(
mem
Ë(*(
s16
*)&
psxH
[(memË& 0xffff])

	)

110 
	#psxHs32ªf
(
mem
Ë(*(
s32
*)&
psxH
[(memË& 0xffff])

	)

111 
	#psxHu8ªf
(
mem
Ë(*(
u8
*Ë&
psxH
[(memË& 0xffff])

	)

112 
	#psxHu16ªf
(
mem
Ë(*(
u16
*)&
psxH
[(memË& 0xffff])

	)

113 
	#psxHu32ªf
(
mem
Ë(*(
u32
*)&
psxH
[(memË& 0xffff])

	)

115 
u8
 **
psxMemWLUT
;

116 
u8
 **
psxMemRLUT
;

118 
	#PSXM
(
mem
Ë(
u8
*)(
psxMemRLUT
[(memË>> 16] + ((memË& 0xffff))

	)

119 
	#PSXMs8
(
mem
Ë(*(
s8
 *)
	`PSXM
(mem))

	)

120 
	#PSXMs16
(
mem
Ë(
	`SWAP16
(*(
s16
*)
	`PSXM
(mem)))

	)

121 
	#PSXMs32
(
mem
Ë(
	`SWAP32
(*(
s32
*)
	`PSXM
(mem)))

	)

122 
	#PSXMu8
(
mem
Ë(*(
u8
 *)
	`PSXM
(mem))

	)

123 
	#PSXMu16
(
mem
Ë(
	`SWAP16
(*(
u16
*)
	`PSXM
(mem)))

	)

124 
	#PSXMu32
(
mem
Ë(
	`SWAP32
(*(
u32
*)
	`PSXM
(mem)))

	)

126 
	#PSXMu32ªf
(
mem
Ë(*(
u32
*)
	`PSXM
(mem))

	)

128 
	`psxMemInô
();

129 
	`psxMemRe£t
();

130 
	`psxMemShutdown
();

132 
u8
 
	`psxMemRód8
(
u32
 
mem
);

133 
u8
 
	`psxMemRód8_dúe˘
(
u32
 
mem
,*
ªgs
);

134 
u16
 
	`psxMemRód16
(
u32
 
mem
);

135 
u16
 
	`psxMemRód16_dúe˘
(
u32
 
mem
,*
ªgs
);

136 
u32
 
	`psxMemRód32
(u32 
mem
);

137 
u32
 
	`psxMemRód32_dúe˘
(u32 
mem
,*
ªgs
);

138 
	`psxMemWrôe8
(
u32
 
mem
, 
u8
 
vÆue
);

139 
	`psxMemWrôe8_dúe˘
(
u32
 
mem
, 
u8
 
vÆue
,*
ªgs
);

140 
	`psxMemWrôe16
(
u32
 
mem
, 
u16
 
vÆue
);

141 
	`psxMemWrôe16_dúe˘
(
u32
 
mem
, 
u16
 
vÆue
,*
ªgs
);

142 
	`psxMemWrôe32
(
u32
 
mem
, u32 
vÆue
);

143 
	`psxMemWrôe32_dúe˘
(
u32
 
mem
, u32 
vÆue
,*
ªgs
);

144 *
	`psxMemPoöãr
(
u32
 
mem
);

	@src/r3000a.cpp

29 
	~"r3000a.h
"

30 
	~"cdrom.h
"

31 
	~"mdec.h
"

32 
	~"gã.h
"

33 
	~"psxevíts.h
"

35 
PcsxC⁄fig
 
	gC⁄fig
;

36 
R3000A˝u
 *
	gpsxCpu
=
NULL
;

37 
psxRegi°îs
 
	gpsxRegs
;

39 
	$psxInô
() {

40 
	`¥ötf
("Ru¬ög PCSX Vîsi⁄ %†(%s).\n", 
PACKAGE_VERSION
, 
__DATE__
);

42 #ifde‡
PSXREC


43 #i‚de‡
öãΩªãr_n⁄e


44 i‡(
C⁄fig
.
Cpu
 =
CPU_INTERPRETER
) {

45 
psxCpu
 = &
psxI¡
;

48 
psxCpu
 = &
psxRec
;

50 
psxCpu
 = &
psxI¡
;

53 i‡(
	`psxMemInô
() == -1)  -1;

55  
psxCpu
->
	`Inô
();

56 
	}
}

58 
	$psxRe£t
() {

60 
psxCpu
->
	`Re£t
();

62 
	`psxMemRe£t
();

64 
	`mem£t
(&
psxRegs
, 0, (psxRegs));

66 
psxRegs
.
wrôeok
 = 1;

68 
psxRegs
.
pc
 = 0xbfc00000;

70 
psxRegs
.
psxM
 =ÖsxM;

71 
psxRegs
.
psxP
 =ÖsxP;

72 
psxRegs
.
psxR
 =ÖsxR;

73 
psxRegs
.
psxH
 =ÖsxH;

75 
psxRegs
.
CP0
.
r
[12] = 0x10900000;

76 
psxRegs
.
CP0
.
r
[15] = 0x00000002;

78 
	`psxEvqueueInô
();

79 
	`psxHwRe£t
();

80 
	`psxBiosInô
();

82 i‡(!
C⁄fig
.
HLE
)

83 
	`psxExecuãBios
();

84 
	}
}

86 
	$psxShutdown
() {

87 
	`psxMemShutdown
();

88 
	`psxBiosShutdown
();

90 
psxCpu
->
	`Shutdown
();

91 
	}
}

93 
	$psxEx˚±i⁄
(
u32
 
code
, u32 
bd
) {

96 
psxRegs
.
CP0
.
n
.
Cau£
 = (psxRegs.CP0.n.Cau£ & 0x300Ë| 
code
;

99 i‡(
bd
) {

100 
psxRegs
.
CP0
.
n
.
Cau£
|= 0x80000000;

101 
psxRegs
.
CP0
.
n
.
EPC
 = (psxRegs.
pc
 - 4);

103 
psxRegs
.
CP0
.
n
.
EPC
 = (psxRegs.
pc
);

105 i‡(
psxRegs
.
CP0
.
n
.
Sètus
 & 0x400000)

106 
psxRegs
.
pc
 = 0xbfc00180;

108 
psxRegs
.
pc
 = 0x80000080;

111 
psxRegs
.
CP0
.
n
.
Sètus
 = (psxRegs.CP0.n.Status &~0x3f) |

112 ((
psxRegs
.
CP0
.
n
.
Sètus
 & 0xf) << 2);

114 i‡(!
C⁄fig
.
HLE
 && (((
	`PSXMu32
(
psxRegs
.
CP0
.
n
.
EPC
) >> 24) & 0xfe) == 0x4a)) {

116 
	`PSXMu32ªf
(
psxRegs
.
CP0
.
n
.
EPC
)&
	`SWAPu32
(~0x02000000);

119 i‡(
C⁄fig
.
HLE
) {

120 
	`psxBiosEx˚±i⁄
();

122 
	}
}

124 
	$psxBønchTe°
()

132 (
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_NEXT_EVENT
].
sCy˛e
) >=

133 
psxRegs
.
ötCy˛e
[
PSXINT_NEXT_EVENT
].
cy˛e
) {

136 
	`psxEvqueueDi•©chAndRemoveFr⁄t
(&
psxRegs
);

139 
psxRegs
.
io_cy˛e_cou¡î
 =ÖsxRegs.
ötCy˛e
[
PSXINT_NEXT_EVENT
].
sCy˛e
 +

140 
psxRegs
.
ötCy˛e
[
PSXINT_NEXT_EVENT
].
cy˛e
;

143 i‡(
	`psxHu32
(0x1070) &ÖsxHu32(0x1074)) {

145 i‡((
psxRegs
.
CP0
.
n
.
Sètus
 & 0x401) == 0x401) {

146 
	`psxEx˚±i⁄
(0x400, 0);

156 
	}
}

158 
	$psxExecuãBios
() {

159 
psxRegs
.
pc
 != 0x80030000)

160 
psxCpu
->
	`ExecuãBlock
(0x80030000);

161 
	}
}

	@src/r3000a.h

21 #i‚de‡
__R3000A_H__


22 
	#__R3000A_H__


	)

24 
	~"psxcomm⁄.h
"

25 
	~"psxmem.h
"

26 
	~"psxcou¡îs.h
"

27 
	~"psxbios.h
"

30 (*
	mInô
)();

31 (*
	mRe£t
)();

32 (*
	mExecuã
)();

33 (*
	mExecuãBlock
)(
	mèrgë_pc
);

34 (*
	mCÀ¨
)(
u32
 
	mAddr
, u32 
	mSize
);

35 (*
	mShutdown
)();

36 } 
	tR3000A˝u
;

38 
R3000A˝u
 *
psxCpu
;

39 
R3000A˝u
 
psxI¡
;

40 #ifde‡
PSXREC


41 
R3000A˝u
 
psxRec
;

45 #i‡
deföed
(
__BIGENDIAN__
)

46 °ru˘ { 
u8
 
	mh3
, 
	mh2
, 
	mh
, 
	ml
; } 
	mb
;

47 °ru˘ { 
s8
 
	mh3
, 
	mh2
, 
	mh
, 
	ml
; } 
	msb
;

48 °ru˘ { 
u16
 
	mh
, 
	ml
; } 
	mw
;

49 °ru˘ { 
s16
 
	mh
, 
	ml
; } 
	msw
;

51 °ru˘ { 
u8
 
	ml
, 
	mh
, 
	mh2
, 
	mh3
; } 
	mb
;

52 °ru˘ { 
u16
 
	ml
, 
	mh
; } 
	mw
;

53 °ru˘ { 
s8
 
	ml
, 
	mh
, 
	mh2
, 
	mh3
; } 
	msb
;

54 °ru˘ { 
s16
 
	ml
, 
	mh
; } 
	msw
;

56 } 
	tPAIR
;

60 
u32
 
	mr0
, 
	m©
, 
	mv0
, 
	mv1
, 
	ma0
, 
	ma1
, 
	ma2
, 
	ma3
,

61 
	mt0
, 
	mt1
, 
	mt2
, 
	mt3
, 
	mt4
, 
	mt5
, 
	mt6
, 
	mt7
,

62 
	ms0
, 
	ms1
, 
	ms2
, 
	ms3
, 
	ms4
, 
	ms5
, 
	ms6
, 
	ms7
,

63 
	mt8
, 
	mt9
, 
	mk0
, 
	mk1
, 
	mgp
, 
	m•
, 
	ms8
, 
	mø
, 
	mlo
, 
	mhi
;

64 } 
	mn
;

65 
u32
 
	mr
[34];

66 
PAIR
 
	mp
[34];

67 } 
	tpsxGPRRegs
;

71 
u32
 
	mIndex
, 
	mR™dom
, 
	mE¡ryLo0
, 
	mE¡ryLo1
,

72 
	mC⁄ãxt
, 
	mPageMask
, 
	mWúed
, 
	mRe£rved0
,

73 
	mBadVAddr
, 
	mCou¡
, 
	mE¡ryHi
, 
	mCom∑ª
,

74 
	mSètus
, 
	mCau£
, 
	mEPC
, 
	mPRid
,

75 
	mC⁄fig
, 
	mLLAddr
, 
	mW©chLO
, 
	mW©chHI
,

76 
	mXC⁄ãxt
, 
	mRe£rved1
, 
	mRe£rved2
, 
	mRe£rved3
,

77 
	mRe£rved4
, 
	mRe£rved5
, 
	mECC
, 
	mCacheEº
,

78 
	mTagLo
, 
	mTagHi
, 
	mEº‹EPC
, 
	mRe£rved6
;

79 } 
	mn
;

80 
u32
 
	mr
[32];

81 
PAIR
 
	mp
[32];

82 } 
	tpsxCP0Regs
;

85 
	mx
, 
	my
;

86 } 
	tSVe˘‹2D
;

89 
	mz
, 
	m∑d
;

90 } 
	tSVe˘‹2Dz
;

93 
	mx
, 
	my
, 
	mz
, 
	m∑d
;

94 } 
	tSVe˘‹3D
;

97 
	mx
, 
	my
, 
	mz
, 
	m∑d
;

98 } 
	tLVe˘‹3D
;

101 
	mr
, 
	mg
, 
	mb
, 
	mc
;

102 } 
	tCBGR
;

105 
	mm11
, 
	mm12
, 
	mm13
, 
	mm21
, 
	mm22
, 
	mm23
, 
	mm31
, 
	mm32
, 
	mm33
, 
	m∑d
;

106 } 
	tSM©rix3D
;

110 
SVe˘‹3D
 
	mv0
, 
	mv1
, 
	mv2
;

111 
CBGR
 
	mrgb
;

112 
s32
 
	mŸz
;

113 
s32
 
	mú0
, 
	mú1
, 
	mú2
, 
	mú3
;

114 
SVe˘‹2D
 
	msxy0
, 
	msxy1
, 
	msxy2
, 
	msxyp
;

115 
SVe˘‹2Dz
 
	msz0
, 
	msz1
, 
	msz2
, 
	msz3
;

116 
CBGR
 
	mrgb0
, 
	mrgb1
, 
	mrgb2
;

117 
s32
 
	mª£rved
;

118 
s32
 
	mmac0
, 
	mmac1
, 
	mmac2
, 
	mmac3
;

119 
u32
 
	múgb
, 
	m‹gb
;

120 
s32
 
	mlzcs
, 
	mlz¸
;

121 } 
	mn
;

122 
u32
 
	mr
[32];

123 
PAIR
 
	mp
[32];

124 } 
	tpsxCP2D©a
;

128 
SM©rix3D
 
	mrM©rix
;

129 
s32
 
	måX
, 
	måY
, 
	måZ
;

130 
SM©rix3D
 
	mlM©rix
;

131 
s32
 
	mrbk
, 
	mgbk
, 
	mbbk
;

132 
SM©rix3D
 
	mcM©rix
;

133 
s32
 
	mrfc
, 
	mgfc
, 
	mbfc
;

134 
s32
 
	mofx
, 
	mofy
;

135 
s32
 
	mh
;

136 
s32
 
	mdqa
, 
	mdqb
;

137 
s32
 
	mzsf3
, 
	mzsf4
;

138 
s32
 
	mÊag
;

139 } 
	mn
;

140 
u32
 
	mr
[32];

141 
PAIR
 
	mp
[32];

142 } 
	tpsxCP2Cål
;

145 
	sötCy˛e_t
 {

146 
u32
 
	msCy˛e
;

147 
u32
 
	mcy˛e
;

151 
psxGPRRegs
 
	mGPR
;

152 
psxCP0Regs
 
	mCP0
;

153 
psxCP2D©a
 
	mCP2D
;

154 
psxCP2Cål
 
	mCP2C
;

155 
u32
 
	mpc
;

156 
u32
 
	mcode
;

157 
u32
 
	mcy˛e
;

158 
u32
 
	möãºu±
;

160 
ötCy˛e_t
 
	mötCy˛e
[32];

162 
u32
 
	mio_cy˛e_cou¡î
;

164 
s8
 *
	mpsxM
;

165 
s8
 *
	mpsxP
;

166 
s8
 *
	mpsxR
;

167 
s8
 *
	mpsxH
;

169 *
	mª£rved
;

170 
	mwrôeok
;

171 } 
	tpsxRegi°îs
;

173 
psxRegi°îs
 
psxRegs
;

175 #i‡
deföed
(
__BIGENDIAN__
)

177 
	#_i32
(
x
Ë*(
s32
 *)&
	)
x

178 
	#_u32
(
x
Ë
	)
x

180 
	#_i16
(
x
Ë(((*)&x)[1])

	)

181 
	#_u16
(
x
Ë(((*)&x)[1])

	)

183 
	#_i8
(
x
Ë(((*)&x)[3])

	)

184 
	#_u8
(
x
Ë(((*)&x)[3])

	)

188 
	#_i32
(
x
Ë*(
s32
 *)&
	)
x

189 
	#_u32
(
x
Ë
	)
x

191 
	#_i16
(
x
Ë*(*)&
	)
x

192 
	#_u16
(
x
Ë*(*)&
	)
x

194 
	#_i8
(
x
Ë*(*)&
	)
x

195 
	#_u8
(
x
Ë*(*)&
	)
x

200 
	#_PC_
 
psxRegs
.
pc


201 

	)

202 
	#_fOp_
(
code
) ((code >> 26) )

203 
	#_fFun˘_
(
code
) ((code ) & 0x3F)

204 
	#_fRd_
(
code
) ((code >> 11) & 0x1F)

205 
	#_fRt_
(
code
) ((code >> 16) & 0x1F)

206 
	#_fRs_
(
code
) ((code >> 21) & 0x1F)

207 
	#_fSa_
(
code
) ((code >> 6) & 0x1F)

208 
	#_fIm_
(
code
Ë((
u16
)code)

209 
	#_fT¨gë_
(
code
) (code & 0x03ffffff)

210 

	)

211 
	#_fImm_
(
code
Ë((
s16
)code)

212 
	#_fImmU_
(
code
) (code&0xffff)

213 

	)

214 
	#_Op_
 
	`_fOp_
(
psxRegs
.
code
)

	)

215 
	#_Fun˘_
 
	`_fFun˘_
(
psxRegs
.
code
)

	)

216 
	#_Rd_
 
	`_fRd_
(
psxRegs
.
code
)

	)

217 
	#_Rt_
 
	`_fRt_
(
psxRegs
.
code
)

	)

218 
	#_Rs_
 
	`_fRs_
(
psxRegs
.
code
)

	)

219 
	#_Sa_
 
	`_fSa_
(
psxRegs
.
code
)

	)

220 
	#_Im_
 
	`_fIm_
(
psxRegs
.
code
)

	)

221 
	#_T¨gë_
 
	`_fT¨gë_
(
psxRegs
.
code
)

	)

223 
	#_Imm_
 
	`_fImm_
(
psxRegs
.
code
)

	)

224 
	#_ImmU_
 
	`_fImmU_
(
psxRegs
.
code
)

	)

226 
	#_rRs_
 
psxRegs
.
GPR
.
r
[
_Rs_
]

227 
	#_rRt_
 
psxRegs
.
GPR
.
r
[
_Rt_
]

228 
	#_rRd_
 
psxRegs
.
GPR
.
r
[
_Rd_
]

229 
	#_rSa_
 
psxRegs
.
GPR
.
r
[
_Sa_
]

230 
	#_rFs_
 
psxRegs
.
CP0
.
r
[
_Rd_
]

231 

	)

232 
	#_c2dRs_
 
psxRegs
.
CP2D
.
r
[
_Rs_
]

233 
	#_c2dRt_
 
psxRegs
.
CP2D
.
r
[
_Rt_
]

234 
	#_c2dRd_
 
psxRegs
.
CP2D
.
r
[
_Rd_
]

235 
	#_c2dSa_
 
psxRegs
.
CP2D
.
r
[
_Sa_
]

236 

	)

237 
	#_rHi_
 
psxRegs
.
GPR
.
n
.
hi


238 
	#_rLo_
 
psxRegs
.
GPR
.
n
.
lo


239 

	)

240 
	#_JumpT¨gë_
 ((
_T¨gë_
 * 4Ë+ (
_PC_
 & 0xf0000000))

241 
	#_BønchT¨gë_
 ((
s16
)
_Im_
 * 4 + 
_PC_
)

242 

	)

243 
	#_SëLök
(
x
Ë
psxRegs
.
GPR
.
r
[x] = 
_PC_
 + 4;

244 

	)

245 
	#Re£tIoCy˛e
(Ëdÿ{ 
psxRegs
.
io_cy˛e_cou¡î
 = 0; } 0)

	)

247 
psxInô
();

248 
psxRe£t
();

249 
psxShutdown
();

250 
psxEx˚±i⁄
(
u32
 
code
, u32 
bd
);

251 
psxBønchTe°
();

252 
psxExecuãBios
();

253 
psxTe°LﬂdDñay
(
ªg
, 
u32
 
tmp
);

254 
psxDñayTe°
(
ªg
, 
u32
 
bpc
);

255 
psxTe°SWI¡s
();

	@src/recompiler/arm/arm.h

21 #i‚de‡
__ARMREC_H__


22 
	#__ARMREC_H__


	)

25 
	~"../psxcomm⁄.h
"

26 
	~"../r3000a.h
"

27 
	~"../psxhÀ.h
"

29 #ifde‡
__˝lu•lus


32 
sys_ˇcheÊush
(*
°¨t_addr
, *
íd_addr
);

33 #ifde‡
__˝lu•lus


37 #ifde‡
__˝lu•lus


40 
ªcRun
(
±r
, 
ªgs
);

41 #ifde‡
__˝lu•lus


45 
u32
 *
	g¨mPå
;

46 
u32
 *
	gj32På
[32];

49 
	#IMM_MAX
 1024

	)

50 
	gimmPå
[
IMM_MAX
];

51 
	gimmD©a
[
IMM_MAX
];

52 
	gimmPåVÆue
[
IMM_MAX
];

53 
	gimmCou¡
=0;

55 
	#wrôe32
(
vÆ
) { \

56 i‡(
ªc_pha£
) { \

57 *
¨mPå
 = (
vÆ
); \

58 
	`dißrm
(()
¨mPå
,4); \

59 
¨mPå
++; \

61 }

	)

63 
	tRól64
;

64 
	tBô8u
;

65 sig√d 
	tBô8s
;

66 
	tBô16u
;

67 sig√d 
	tBô16s
;

68 
	tBô32u
;

69 sig√d 
	tBô32s
;

70 
uöt64_t
 
	tBô64u
;

71 
öt64_t
 
	tBô64s
;

72 
	tBôu
;

73 sig√d 
	tBôs
;

74 
	~"risc_¨mv4À.h
"

76 
	#CALLFunc
(
addr
Ë{ i‡(
ªc_pha£
Ë{ 
u32
 
off£t
=((((u32)◊ddrË- ((u32)(
¨mPå
Ë+ (8))Ë>> 2Ë& 0xFFFFFF); 
	`wrôe32
(
	`BL_FWD
(off£t)); } }

	)

77 
	#CALLFuncCC
(
addr
Ë{ i‡(
ªc_pha£
Ë{ 
u32
 
off£t
=((((u32)◊ddrË- ((u32)(
¨mPå
Ë+ (8))Ë>> 2Ë& 0xFFFFFF); 
	`wrôe32
(
	`BLCC_FWD
(off£t)); } }

	)

78 
	#CALLFuncCS
(
addr
Ë{ i‡(
ªc_pha£
Ë{ 
u32
 
off£t
=((((u32)◊ddrË- ((u32)(
¨mPå
Ë+ (8))Ë>> 2Ë& 0xFFFFFF); 
	`wrôe32
(
	`BLCS_FWD
(off£t)); } }

	)

79 
	#JUMPFunc
(
addr
Ë{ i‡(
ªc_pha£
Ë{ 
u32
 
off£t
=((((u32)◊ddrË- ((u32)(
¨mPå
Ë+ (8))Ë>> 2Ë& 0xFFFFFF); 
	`wrôe32
(
	`B_FWD_
(off£t)); } }

	)

80 
	#JUMPFuncNE
(
addr
Ë{ i‡(
ªc_pha£
Ë{ 
u32
 
off£t
=((((u32)◊ddrË- ((u32)(
¨mPå
Ë+ (8))Ë>> 2Ë& 0xFFFFFF); 
	`wrôe32
(
	`BNE_FWD_
(off£t)); } }

	)

81 
	#MOV32RtoR
(
d°
,
§c
Ë
	`gí_mov_ªgs
(d°,§c)

	)

82 
	#MOV32MtoR
(
ªg
,
mem
Ë
	`gí_mov_w‹d_to_ªg
‘eg,(*)mem,
åue
)

	)

83 
	#MOV32ItoR
(
ªg
,
imm
Ë
	`gí_mov_dw‹d_to_ªg_imm
‘eg,imm)

	)

84 
	#MOV32RtoM
(
mem
,
ªg
Ë
	`gí_mov_w‹d_‰om_ªg
‘eg,(*)mem,
åue
)

	)

85 
	#MOV32ItoM
(
addr
,
vÆue
Ë
	`gí_mov_dúe˘_dw‹d
((*Ôddr,vÆue)

	)

86 
	#ADD32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`ADD_REG_LSL_IMM
‘es,›1,›2,0))

	)

87 
	#ADD32ItoR
(
ªg
,
vÆue
Ë
	`gí_add_imm
‘eg,ªg,vÆue)

	)

88 
	#MOVADD32ItoR
(
ªg_de°
,
ªg_§c
,
vÆue
Ë
	`gí_add_imm
‘eg_de°,ªg_§c,vÆue)

	)

89 
	#ADD32ItoM
(
addr
,
vÆue
Ë
	`gí_add_dúe˘_w‹d
((*Ôddr,vÆue,
åue
)

	)

90 
	#SUB32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`SUB_REG_LSL_IMM
‘es,›1,›2,0))

	)

91 
	#SUB32ItoR
(
ªg
,
vÆue
Ë
	`gí_sub_imm
‘eg,ªg,vÆue)

	)

92 
	#MOVSUB32ItoR
(
ªg_d°
,
ªg_§c
,
vÆue
Ë
	`gí_sub_imm
‘eg_d°,ªg_§c,vÆue)

	)

93 
	#AND32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`AND_REG_LSL_IMM
‘es,›1,›2,0))

	)

94 
	#AND32ItoR
(
ªg
,
imm
Ë
	`gí_™d_imm
‘eg,imm)

	)

95 
	#OR32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`ORR_REG_LSL_IMM
‘es,›1,›2,0))

	)

96 
	#XOR32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`EOR_REG_LSL_IMM
‘es,›1,›2,0))

	)

97 
	#SHR32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`MOV_REG_LSR_REG
‘es,›1,›2))

	)

98 
	#SHL32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`MOV_REG_LSL_REG
‘es,›1,›2))

	)

99 
	#SAR32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`MOV_REG_ASR_REG
‘es,›1,›2))

	)

100 
	#SHRI32
(
ªs
,
›
,
imm
Ë
	`wrôe32
(
	`MOV_REG_LSR_IMM
‘es,›,imm))

	)

101 
	#SHLI32
(
ªs
,
›
,
imm
Ë
	`wrôe32
(
	`MOV_REG_LSL_IMM
‘es,›,imm))

	)

102 
	#SARI32
(
ªs
,
›
,
imm
Ë
	`wrôe32
(
	`MOV_REG_ASR_IMM
‘es,›,imm))

	)

104 
	#MOVSX32M8toR
(
ªg
,
mem
Ë
	`gí_mov_byã_to_ªg_low_ˇnu£w‹d
‘eg,(*)mem);
	`gí_exãnd_byã
(
åue
,ªg)

	)

105 
	#MOVSX32R8toR
(
ªg
Ë
	`gí_exãnd_byã
(
åue
,ªg)

	)

106 
	#MOVZX32M8toR
(
ªg
,
mem
Ë
	`gí_mov_byã_to_ªg_low_ˇnu£w‹d
‘eg,(*)mem);
	`gí_exãnd_byã
(
Ál£
,ªg)

	)

107 
	#MOVZX32R8toR
(
ªg
Ë
	`gí_exãnd_byã
(
Ál£
,ªg)

	)

108 
	#MOVSX32M16toR
(
ªg
,
mem
Ë
	`gí_mov_w‹d_to_ªg
‘eg,(*)mem,
Ál£
);
	`gí_exãnd_w‹d
(
åue
,ªg)

	)

109 
	#MOVSX32R16toR
(
ªg
Ë
	`gí_exãnd_w‹d
(
åue
,ªg)

	)

110 
	#MOVZX32M16toR
(
ªg
,
mem
Ë
	`gí_mov_w‹d_to_ªg
‘eg,(*)mem,
Ál£
);
	`gí_exãnd_w‹d
(Ál£,ªg)

	)

111 
	#MOVZX32R16toR
(
ªg
Ë
	`gí_exãnd_w‹d
(
Ál£
,ªg)

	)

112 
	#MOV8ItoM
(
mem
,
imm
Ë
	`gí_mov_byã_to_ªg_low_imm_ˇnu£w‹d
(
HOST_r0
,imm);
	`gí_mov_byã_‰om_ªg_low
(HOST_r0,(*)mem)

	)

113 
	#MOV8MtoR
(
ªg
,
mem
Ë
	`gí_mov_byã_to_ªg_low_ˇnu£w‹d
‘eg,(*)mem)

	)

114 
	#MOV8RtoM
(
mem
,
ªg
Ë
	`gí_mov_byã_‰om_ªg_low
‘eg,(*)mem)

	)

115 
	#MOV16ItoM
(
mem
,
imm
Ë
	`gí_mov_w‹d_to_ªg_imm
(
HOST_r0
,imm);
	`gí_mov_w‹d_‰om_ªg
(HOST_r0,(*)mem,
Ál£
)

	)

116 
	#MOV16MtoR
(
ªg
,
mem
Ë
	`gí_mov_w‹d_to_ªg
‘eg,(*)mem,
Ál£
)

	)

117 
	#MOV16RtoM
(
mem
,
ªg
Ë
	`gí_mov_w‹d_‰om_ªg
‘eg,(*)mem,
Ál£
)

	)

119 
	#JEZ8
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_zîo
‘eg,
åue
)

	)

120 
	#JNZ8
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_n⁄zîo
‘eg,
åue
)

	)

121 
	#¨mSëJ32
(
addr
Ë
	`gí_fûl_bønch
((
Bô32u
Ôddr)

	)

122 
	#JEZ32
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_zîo
‘eg,
åue
)

	)

123 
	#JNZ32
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_n⁄zîo
‘eg,
åue
)

	)

124 
	#JLTZ32
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_…z
‘eg,
åue
)

	)

125 
	#JGTZ32
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_gtz
‘eg,
åue
)

	)

126 
	#JLEZ32
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_Àtz
‘eg,
åue
)

	)

127 
	#JGEZ32
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_gëz
‘eg,
åue
)

	)

129 
	#MOV32MtoR_ªgs
(
ªg
,
mem
Ë
	`wrôe32
–
	`LDR_IMM
(‘eg), 11, (((
u32
)(mem))-((u32)&
psxRegs
))Ë)

	)

130 
	#MOV16MtoR_ªgs
(
ªg
,
mem
) { \

131 i‡(
ªc_pha£
) { \

132 i‡((((
u32
)(
mem
))-((u32)&
psxRegs
))<256) { \

133 
	`wrôe32
–
	`LDRH_IMM
((
ªg
), 11, (((
u32
)(
mem
))-((u32)&
psxRegs
)))); \

135 
	`MOV32ItoR
(
ãmp2
,(((
u32
)(
mem
))-((u32)&
psxRegs
))); \

136 
	`wrôe32
–
	`LDRH_REG
((
ªg
), 11, (
ãmp2
)) ); \

139 }

	)

140 
	#MOV16sMtoR_ªgs
(
ªg
,
mem
) { \

141 i‡(
ªc_pha£
) { \

142 i‡((((
u32
)(
mem
))-((u32)&
psxRegs
))<256) { \

143 
	`wrôe32
–
	`LDRSH_IMM
((
ªg
),11, (((
u32
)(
mem
))-((u32)&
psxRegs
)))); \

145 
	`MOV32ItoR
(
ãmp2
,(((
u32
)(
mem
))-((u32)&
psxRegs
))); \

146 
	`wrôe32
–
	`LDRSH_REG
((
ªg
), 11, (
ãmp2
)) ); \

149 }

	)

150 
	#MOV8MtoR_ªgs
(
ªg
,
mem
Ë
	`wrôe32
–
	`LDRB_IMM
(‘eg), 11, (((
u32
)(mem))-((u32)&
psxRegs
))Ë)

	)

151 
	#MOV16sRtoR_ªgs
(
ªg1
,
mem2
Ë
	`wrôe32
–
	`LDRSH_REG
(‘eg1), 11, (
ªg2
)Ë)

	)

152 
	#MOV32RtoM_ªgs
(
mem
,
ªg
Ë
	`wrôe32
–
	`STR_IMM
(‘eg), 11, (((
u32
)(mem))-((u32)&
psxRegs
))Ë)

	)

153 
	#MOV16RtoM_ªgs
(
mem
,
ªg
) { \

154 i‡(
ªc_pha£
) { \

155 i‡((((
u32
)(
mem
))-((u32)&
psxRegs
))<256) { \

156 
	`wrôe32
–
	`STRH_IMM
((
ªg
), 11, (((
u32
)(
mem
))-((u32)&
psxRegs
)))); \

158 
	`MOV32ItoR
(
ãmp2
,(((
u32
)(
mem
))-((u32)&
psxRegs
))); \

159 
	`wrôe32
–
	`STRH_REG
((
ªg
), 11, (
ãmp2
)) ); \

162 }

	)

163 
	#MOV8RtoM_ªgs
(
mem
,
ªg
Ë
	`wrôe32
–
	`STRB_IMM
(‘eg), 11, (((
u32
)(mem))-((u32)&
psxRegs
))Ë)

	)

164 
	#MOV32ItoM_ªgs
(
mem
,
vÆue
Ë
	`MOV32ItoR
(
HOST_ù
,vÆue);
	`MOV32RtoM_ªgs
(mem,HOST_ù)

	)

165 
	#MOV16ItoM_ªgs
(
mem
,
vÆue
Ë
	`MOV32ItoR
(
ãmp1
,vÆue);
	`MOV16RtoM_ªgs
(mem,ãmp1)

	)

166 
	#MOV8ItoM_ªgs
(
mem
,
vÆue
Ë
	`MOV32ItoR
(
ãmp1
,vÆue);
	`MOV8RtoM_ªgs
(mem,ãmp1)

	)

168 
INLINE
 
ADD8ItoM_ªgs
(
u32
 
de°
,
Bô8s
 
imm
) {

169 if(!
	gimm
 || !
	gªc_pha£
) ;

170 
MOV32MtoR_ªgs
(
ãmp1
,
de°
);

171 i‡(
	gimm
 >= 0) {

172 
wrôe32
–
ADD_IMM
(
ãmp1
,Åemp1, (
Bô32s
)
imm
, 0) );

174 
wrôe32
–
SUB_IMM
(
ãmp1
,Åemp1, -((
Bô32s
)
imm
), 0) );

176 
MOV32RtoM_ªgs
(
de°
,
ãmp1
);

179 
INLINE
 
ADD32ItoM_ªgs
(
u32
 
de°
,
Bô32u
 
imm
) {

180 if(!
	gimm
 || !
	gªc_pha£
) ;

181 i‡–(
	gimm
<128) || (imm>=0xffffff80) ) {

182 
ADD8ItoM_ªgs
(
de°
,(
Bô8s
)
imm
);

185 
MOV32MtoR_ªgs
(
ãmp1
,
de°
);

186 
gí_mov_dw‹d_to_ªg_imm
(
ãmp2
, 
imm
);

187 
wrôe32
–
ADD_REG_LSL_IMM
(
ãmp1
,Åemp1, 
ãmp2
, 0) );

188 
MOV32RtoM_ªgs
(
de°
,
ãmp1
);

192 
INLINE
 
Upd©eImmedüã
(
f‹˚d
) {

193 
	gi
,
	gj
,
	g±rBa£
=()
¨mPå
;

194 i‡(!
	gªc_pha£
 || (!
	gf‹˚d
 && ((()
	g¨mPå
)-
	gimmPå
[0] < 
	gREC_MAX_IMMEDIATE_LONG
))) ;

195 #ifde‡
DEBUG_CPU


196 
	g›å
=()
¨mPå
;

197 
dbg
("\t\t\tUpdateImmediate");

199 
	gdißrm_immedüãs
=1;

200 
	gi
 = 0; i < 
	gimmCou¡
; i++) {

201 
	gimmPåVÆue
[
i
]=()
¨mPå
;

202 
	gj
=0;j<
	gi
;j++)

203 i‡(
	gimmD©a
[
i
]==
immD©a
[
j
])

205 
	gvÆue
=
immPåVÆue
[
j
]-
immPå
[
i
]-8;

206 #ifde‡
DEBUG_CPU


207 i‡(
	gvÆue
>4095)

208 
dbgf
("\t\t\t\tVALUE %òOVERFLOW!!!!\n",
vÆue
);

210 *(*)(
	gimmPå
[
i
])|=
vÆue
;

211 i‡(
	gj
==
i
)

212 
wrôe32
(
immD©a
[
i
])

214 
immPåVÆue
[
i
]=immPåVÆue[
j
];

217 #ifde‡
DEBUG_CPU


218 
	gimmsize
+=((()
¨mPå
)-
›å
);

219 
dbgf
("\t\t\t!Upd©eImmedüã %i\n",((()
¨mPå
)-
›å
));

221 
	gdißrm_immedüãs
=0;

222 
	gimmCou¡
 = 0;

225 
INLINE
 
GET_PTR
() {

226 
wrôe32
(0xe1a0c820);

227 
wrôe32
(0xe791210c);

228 
wrôe32
(0xe1a01800);

229 
wrôe32
(0xe1a00821);

230 
wrôe32
(0xe0923000);

231 
wrôe32
(0xe1a01003);

232 
wrôe32
(0x17921000);

235 
INLINE
 
RET_NC
() {

236 #ifde‡
DEBUG_CPU


237 
dbg
("\t\t\tRET_NC");

239 
wrôe32
(0xe8bd0ff0);

240 
wrôe32
(0xe8bd8000);

241 
Upd©eImmedüã
(0);

244 #ifde‡
REC_USE_RETURN_FUNCS


245 
	#RET_RETURN
() \

246 
	`JUMPFunc
(
func_Rëu∫_±r
); \

247 
	`Upd©eImmedüã
(0)

	)

248 
	#RET_RETURN_wôh_HOST_r0
() \

249 
	`JUMPFunc
(
func_Rëu∫_±r
+4); \

250 
	`Upd©eImmedüã
(0)

	)

252 
	#RET_RETURN
() \

253 
	`ªcRëu∫
(0)

	)

254 
	#RET_RETURN_wôh_HOST_r0
() \

255 
	`ªcRëu∫
(1)

	)

258 
	#RET
() { \

259 i‡(
block
) \

260 
	`RET_NC
(); \

263 
	`RET_RETURN
(); \

265 }

	)

267 
	#RET_wôh_HOST_r0
() { \

268 i‡(
block
) \

269 
	`RET_NC
(); \

272 
	`RET_RETURN_wôh_HOST_r0
(); \

274 }

	)

277 #ifde‡
REC_USE_RETURN_FUNCS


278 
	#ExôPCh™ge
() { \

279 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
); \

280 
	`MOV32ItoR
(
HOST_r1
,
pc
); \

281 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_r1
)); \

282 
	`JUMPFuncNE
(
func_Rëu∫_±r
+4); \

283 }

	)

285 
	#ExôPCh™ge
() { \

286 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
); \

287 
	`MOV32ItoR
(
HOST_r1
,
pc
); \

288 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_r1
)); \

289 
j32På
[11]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0)); \

290 
	`RET_wôh_HOST_r0
(); \

291 
	`¨mSëJ32
(
j32På
[11]); \

292 }

	)

295 
	#RET_cy˛es
() { \

296 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
)); \

297 
cy˛es_≥ndög
=0; \

298 
	`RET
(); \

299 }

	)

	@src/recompiler/arm/disarm.h

21 
	gdißrm_immedüãs
=0;

23 #i‚de‡
DEBUG_CPU


24 
	#dißrm
(
PTR
,
SIZE
)

	)

89 
	~<°dio.h
>

90 
	~<°dlib.h
>

91 
	~<°rög.h
>

93 
	tw‹d
;

94 
	taddªss
;

95 
	taddrdiff
;

96 
	#W
(
x
Ë((
w‹d
*)(x))

	)

98 
	#de˛°ru˘
(
«me
Ë«mê
	ts
##
	t«me
, * 
	tp
##
	)
name

99 
	tdef°ru˘
(
	t«me
Ë
	)
name

100 
	tde„quiv
(
	t√w
,
	tﬁd
Ë
ﬁd
 
	ts
##√w, * 
	tp
##
	)
new

102 
	tde˛°ru˘
(
	tDisO±i⁄s
);

103 
de˛°ru˘
(
In°ru˘i⁄
);

106 
	mèrgë_N⁄e
,

107 
	mèrgë_D©a
,

108 
	mèrgë_FlﬂtS
,

109 
	mèrgë_FlﬂtD
,

110 
	mèrgë_FlﬂtE
,

111 
	mèrgë_FlﬂtP
,

112 
	mèrgë_Code
,

113 
	mèrgë_Unknown


114 } 
	teT¨gëTy≥
;

116 
	$def°ru˘
(
In°ru˘i⁄
) {

117 
ãxt
[128];

118 
undeföed
;

119 
badbôs
;

120 
oddbôs
;

121 
is_SWI
;

122 
w‹d
 
swöum
;

123 
addªss
 
èrgë
;

124 
eT¨gëTy≥
 
èrgë_ty≥
;

125 
off£t
;

126 * 
addr°¨t
;

127 
	}
};

129 
	#dis›t_SWI«mes
 1

	)

130 
	#dis›t_CommaS∑˚
 2

	)

131 
	#dis›t_FIXS
 4

	)

132 
	#dis›t_Revî£Byãs
 8

	)

134 
	$def°ru˘
(
DisO±i⁄s
) {

135 
w‹d
 
Êags
;

136 * * 
ªg«mes
;

137 
	}
};

139 
pIn°ru˘i⁄
 
ö°r_dißs£mbÀ
(
w‹d
, 
addªss
, 
pDisO±i⁄s
);

141 
	#INSTR_grok_v4


	)

151 
	#Sbô
 (1<<20Ë

	)

152 
	#Lbô
 (1<<20Ë

	)

153 
	#Wbô
 (1<<21Ë

	)

154 
	#Bbô
 (1<<22Ë

	)

155 
	#Ubô
 (1<<23Ë

	)

156 
	#Pbô
 (1<<24Ë

	)

157 
	#Ibô
 (1<<25Ë

	)

159 
	#SPSRbô
 (1<<22Ë

	)

163 
	#RD
(
x
Ë((x)<<12Ë

	)

164 
	#RN
(
x
Ë((x)<<16Ë

	)

165 
	#CP
(
x
Ë((x)<<8Ë

	)

166 
	#RDbôs
 
	`RD
(15)

	)

167 
	#RNbôs
 
	`RN
(15)

	)

168 
	#CPbôs
 
	`CP
(15)

	)

169 
	#RD_is
(
x
Ë((
ö°r
&
RDbôs
)==
	`RD
(x))

	)

170 
	#RN_is
(
x
Ë((
ö°r
&
RNbôs
)==
	`RN
(x))

	)

171 
	#CP_is
(
x
Ë((
ö°r
&
CPbôs
)==
	`CP
(x))

	)

176 
	#BôsDif„r
(
a
,
b
Ë((
ö°r
^(ö°r>>(b-a)))&(1<<a))

	)

178 
	$swöame
(
w‹d
 
w
, * 
s
, 
size_t
 
sz
Ë{ ; 
	}
}

183 * 
	$≠≥nd
(* 
›
, c⁄° *
ù
) {

184 
c
;

185 (
c
=*
ù
++)!=0Ë*
›
++=c;

186  
›
;

187 
	}
}

191 * 
	$hex8
(* 
›
, 
w‹d
 
w
) {

192 
i
;

193 *
›
++='&';

194 
i
=28; i>=0; i-=4Ë*
›
++ = "0123456789ABCDEF"[(
w
>>i)&15];

195  
›
;

196 
	}
}

200 * 
	$ªg
(* 
›
, 
c
, 
w‹d
 
n
) {

201 *
›
++=
c
;

202 
n
&=15;

203 i‡(
n
>=10Ë{ *
›
++='1';Ç+='0'-10; } n+='0';

204 *
›
++=()
n
;

205  
›
;

206 
	}
}

211 * 
	$num
(* 
›
, 
w‹d
 
w
) {

212 i‡(
w
>=100) {

213 
i
;

214 
w‹d
 
t
;

215 *
›
++='&';

216 
i
=28; (
t
=(
w
>>i)&15)==0; i-=4) ;

217 ; 
i
>=0; i-=4Ë*
›
++ = "0123456789ABCDEF"[(
w
>>i)&15];

221 
w‹d
 
t
 = 
w
-(w>>2);Å=(t+(t>>4)) >> 3;

222 { 
w‹d
 
u
 = 
w
-10*
t
;

223 i‡(
u
==10Ë{ u=0; ++
t
; }

224 i‡(
t
Ë*
›
++=()(t+'0');

225 *
›
++=()(
u
+'0');

228  
›
;

229 
	}
}

314 
pIn°ru˘i⁄


315 
	$ö°r_dißs£mbÀ
(
w‹d
 
ö°r
, 
addªss
 
addr
, 
pDisO±i⁄s
 
›ts
) {

316 
Êagch¨s
[4];

317 
sIn°ru˘i⁄
 
ªsu…
;

318 c⁄° * 
m√m⁄ic
 = 0;

319 * 
Êagp
 = 
Êagch¨s
;

320 c⁄° * 
f‹m©
 = 0;

321 
w‹d
 
Ân
;

322 
eT¨gëTy≥
 
poss_â
 = 
èrgë_N⁄e
;

323 #ifde‡
INSTR_grok_v4


324 
is_v4
 = 0;

329 i‡(
›ts
->
Êags
 & 
dis›t_Revî£Byãs
) {

330 
ö°r
 = ((instr & 0xFF00FF00) >> 8) | ((instr & 0x00FF00FF) << 8);

331 
ö°r
 = (instr >> 16) | (instr << 16);

334 
Ân
 = ((
ö°r
>>15)&1) + ((instr>>21)&2);

336 
ªsu…
.
undeföed
 =

337 
ªsu…
.
badbôs
 =

338 
ªsu…
.
oddbôs
 =

339 
ªsu…
.
is_SWI
 = 0;

340 
ªsu…
.
èrgë_ty≥
 = 
èrgë_N⁄e
;

341 
ªsu…
.
off£t
 = 0x80000000;

342 
ªsu…
.
addr°¨t
 = 0;

346 (
ö°r
>>24)&15) {

349 i‡((
ö°r
&(15<<4))!=(9<<4)Ë
lMaybeLDRHëc
;

351 i‡(
ö°r
&(1<<23)) {

353 
m√m⁄ic
 = "UMULL\0UMLAL\0SMULL\0SMLAL" + 6*((
ö°r
>>21)&3);

354 
f‹m©
 = "3,4,0,2";

357 i‡(
ö°r
&(1<<22)Ë
lUndeföed
;

359 i‡(
ö°r
&(1<<21)) {

360 
m√m⁄ic
 = "MLA";

361 
f‹m©
 = "4,0,2,3";

364 
m√m⁄ic
 = "MUL";

365 
f‹m©
 = "4,0,2";

368 i‡(
ö°r
&
Sbô
Ë*
Êagp
++='S';

373 i‡((
ö°r
&0x02B00FF0)==0x00000090) {

375 
m√m⁄ic
 = "SWP";

376 
f‹m©
 = "3,0,[4]";

377 i‡(
ö°r
&
Bbô
Ë*
Êagp
++='B';

380 i‡((
ö°r
&0x02BF0FFF)==0x000F0000) {

382 
m√m⁄ic
 = "MRS";

383 
f‹m©
 = (
ö°r
&
SPSRbô
) ? "3,SPSR" : "3,CPSR";

386 i‡((
ö°r
&0x02BFFFF0)==0x0029F000) {

388 
m√m⁄ic
 = "MSR";

389 
f‹m©
 = (
ö°r
&
SPSRbô
) ? "SPSR,0" : "CPSR,0";

392 i‡((
ö°r
&0x00BFF000)==0x0028F000) {

394 
m√m⁄ic
 = "MSR";

395 
f‹m©
 = (
ö°r
&
SPSRbô
) ? "SPSR_flg,*" : "CPSR_flg,*";

396 i‡(!(
ö°r
&
Ibô
) && (instr&(15<<4)))

397 #ifde‡
INSTR_grok_v4


398 
lMaybeLDRHëc
;

400 
lUndeföed
;

405 
lMaybeLDRHëc
:

406 #ifde‡
INSTR_grok_v4


407 i‡((
ö°r
&(14<<24))==0

408 && ((
ö°r
&(9<<4))==(9<<4))) {

410 i‡((
ö°r
&(
Wbô
+
Pbô
))==WbôË
lUndeföed
;

411 i‡((
ö°r
&(
Lbô
+(1<<6)))==(1<<6)Ë
lUndeföed
;

412 
m√m⁄ic
 = "STR\0LDR" + ((
ö°r
&
Lbô
) >> 18);

413 i‡(
ö°r
&(1<<6)Ë*
Êagp
++='S';

414 *
Êagp
++ = (
ö°r
&(1<<5)) ? 'B' : 'H';

415 
f‹m©
 = "3,/";

417 i‡(!(
ö°r
&(1<<22))Ëö°∏|
Ibô
;

418 
is_v4
=1;

424 { 
w‹d
 
›21
 = 
ö°r
&(15<<21);

425 i‡((
›21
==(2<<21) || (op21==(4<<21)))

426 && ((
ö°r
&(
RNbôs
+
Ibô
+
Sbô
))==
	`RN
(15)+Ibit)

429 
m√m⁄ic
 = "ADR";

430 
f‹m©
 = "3,.";

431 i‡((
ö°r
&(30<<7))!=0 && !(ö°r&3)Ë
ªsu…
.
oddbôs
=1;

434 
m√m⁄ic
 = "AND\0EOR\0SUB\0RSB\0ADD\0ADC\0SBC\0RSC\0"

436 + (
›21
 >> 19);

439 i‡(
›21
 < ( 8<<21)Ë
f‹m©
 = "3,4,*";

440 i‡(
›21
 < (12<<21)) {

441 
f‹m©
 = "4,*";

442 i‡(
ö°r
&
RDbôs
) {

443 i‡((
ö°r
&
Sbô
Ë&& 
	`RD_is
(15))

444 *
Êagp
++='P';

445 
ªsu…
.
oddbôs
=1;

447 i‡(!(
ö°r
&
Sbô
)Ë
lUndeföed
;

449 i‡(
›21
 & (1<<21)) {

450 
f‹m©
 = "3,*";

451 i‡(
ö°r
&
RNbôs
Ë
ªsu…
.
oddbôs
=1;

453 
f‹m©
 = "3,4,*";

454 i‡(
ö°r
&
Sbô
 && (
›21
<(8<<21Ë|| op21>=(12<<21))Ë*
Êagp
++='S';

462 i‡((
ö°r
&
Ibô
Ë&& (ö°r&(1<<4))Ë
lUndeföed
;

463 
m√m⁄ic
 = "STR\0LDR" + ((
ö°r
&
Lbô
) >> 18);

464 
f‹m©
 = "3,/";

465 i‡(
ö°r
&
Bbô
Ë*
Êagp
++='B';

466 i‡((
ö°r
&(
Wbô
+
Pbô
))==WbôË*
Êagp
++='T';

467 
poss_â
 = 
èrgë_D©a
;

472 
m√m⁄ic
 = "STM\0LDM" + ((
ö°r
&
Lbô
) >> 18);

473 i‡(
	`RN_is
(13)) {

475 
w‹d
 
x
 = (
ö°r
&(3<<23)) >> 22;

476 i‡(
ö°r
&
Lbô
Ë
x
^=6;

477 { c⁄° * 
foo
 = "EDEAFDFA"+
x
;

478 *
Êagp
++ = *
foo
++;

479 *
Êagp
++ = *
foo
;

484 *
Êagp
++ = (
ö°r
&
Ubô
) ? 'I' : 'D';

485 *
Êagp
++ = (
ö°r
&
Pbô
) ? 'B' : 'A';

487 
f‹m©
 = "4',%";

492 
m√m⁄ic
 = "B\0BL"+((
ö°r
&(1<<24))>>23);

493 
f‹m©
 = "&";

498 i‡(
	`CP_is
(1)) {

500 
m√m⁄ic
 = "STF\0LDF" + ((
ö°r
&
Lbô
) >> 18);

501 
f‹m©
 = "8,/";

502 *
Êagp
++ = "SDEP"[
Ân
];

503 
poss_â
 = (
eT¨gëTy≥
)(
èrgë_FlﬂtS
+
Ân
);

505 i‡(
	`CP_is
(2)) {

507 
m√m⁄ic
 = "SFM\0LFM" + ((
ö°r
&
Lbô
) >> 18);

508 i‡(!
Ân
) fpn=4;

509 i‡(
	`RN_is
(13Ë&& 
	`BôsDif„r
(23,24)) {

510 i‡((
ö°r
&255)!=
Ân
Ë
lN⁄SèckLFM
;

512 i‡(
	`BôsDif„r
(20,24)) {

514 *
Êagp
++ = 'F'; *flagp++ = 'D';

518 *
Êagp
++ = 'E'; *flagp++ = 'A';

520 
f‹m©
 = "8,(,[4]'";

523 
lN⁄SèckLFM
:

525 
f‹m©
 = "8,(,/";

526 
poss_â
 = 
èrgë_FlﬂtE
;

531 
m√m⁄ic
 = "STC\0LDC" + ((
ö°r
&
Lbô
) >> 18);

532 
f‹m©
 = ";,\004,/";

533 i‡(
ö°r
&(1<<22)Ë*
Êagp
++ = 'L';

534 
poss_â
 = 
èrgë_Unknown
;

539 i‡(
ö°r
&(1<<4)) {

541 i‡(
	`CP_is
(1)) {

543 i‡((
ö°r
&
Lbô
Ë&& 
	`RD_is
(15)) {

545 i‡(!(
ö°r
&(1<<23))Ë
lUndeföed
;

546 
m√m⁄ic
 = "CMF\0\0CNF\0\0CMFE\0CNFE" + (5*(
ö°r
&(3<<21)) >> 21);

547 
f‹m©
 = "9,+";

548 i‡(
ö°r
&((1<<19)+(7<<5)))

549 
ªsu…
.
badbôs
=1;

553 
w‹d
 
›20
 = 
ö°r
&(15<<20);

554 i‡(
›20
>=6<<20Ë
lUndeföed
;

555 
m√m⁄ic
 = "FLT\0FIX\0WFS\0RFS\0WFC\0RFC" + (
›20
>>18);

556 i‡(
›20
==0) {

558 
f‹m©
 = "9,3";

559 { 
c
 = "SDE*"[((
ö°r
>>7)&1) + ((instr>>18)&2)];

560 i‡(
c
=='*'Ë
lUndeföed
; *
Êagp
++=c;

562 i‡(
ö°r
&15Ë
ªsu…
.
oddbôs
=1;

566 i‡(
ö°r
&((1<<7)+(1<<19)))

567 
ªsu…
.
badbôs
=1;

568 i‡(
›20
==1<<20) {

570 
f‹m©
 = "3,+";

571 i‡(
›ts
->
Êags
&
dis›t_FIXS
)

572 *
Êagp
++ = "SDEP"[((
ö°r
>>7)&1) + ((instr>>18)&2)];

573 *
Êagp
++ = "\0PMZ"[(
ö°r
&(3<<5))>>5];

574 i‡(
ö°r
&(7<<15)Ë
ªsu…
.
oddbôs
=1;

575 i‡(
ö°r
&(1<<3)Ë
ªsu…
.
badbôs
=1;

579 
f‹m©
 = "3";

580 i‡(
ö°r
&(3<<5)Ë
ªsu…
.
badbôs
=1;

581 i‡(
ö°r
&(15+(7<<15))Ë
ªsu…
.
oddbôs
=1;

590 
m√m⁄ic
 = "MCR\0MRC";

591 
m√m⁄ic
 +(
ö°r
&
Lbô
) >> 18;

592 
f‹m©
 = ";,:,3,\005,\001-";

597 i‡(
	`CP_is
(1)) {

599 
m√m⁄ic
 =

609 + ((
ö°r
&(15<<20)) >> 18)

610 + ((
ö°r
&(1<<15)) >> 9);

611 
f‹m©
 = (
ö°r
&(1<<15)) ? "8,+" : "8,9,+";

612 *
Êagp
++ = "SDE*"[((
ö°r
>>7)&1) + ((instr>>18)&2)];

613 *
Êagp
++ = "\0PMZ"[(
ö°r
&(3<<5))>>5];

615 i‡(*
m√m⁄ic
=='*' || *
Êagch¨s
=='*'Ë
lUndeföed
;

619 
m√m⁄ic
 = "CDP";

620 
f‹m©
 = ";,),\004,\005,\001-";

626 
m√m⁄ic
 = "SWI";

627 
f‹m©
 = "$";

633 
lUndeföed
:

634 
	`°r˝y
(
ªsu…
.
ãxt
, "Undefined instruction");

635 
ªsu…
.
undeföed
 = 1;

636  &
ªsu…
;

638 *
Êagp
=0;

642 { * 
›
 = 
ªsu…
.
ãxt
;

646 
›
 = 
	`≠≥nd
(›,
m√m⁄ic
);

650 { 
w‹d
 
c⁄d
 = 
ö°r
>>28;

651 i‡(
c⁄d
!=14) {

652 c⁄° * 
ù
 = "EQNECSCCMIPLVSVCHILSGELTGTLEALNV"+2*
c⁄d
;

653 *
›
++ = *
ù
++;

654 *
›
++ = *
ù
;

660 { c⁄° * 
ù
 = 
Êagch¨s
;

661 *
ù
Ë*
›
++ = *ip++;

666 *
›
++ = '\t';

670 { c⁄° * 
ù
 = 
f‹m©
;

671 
c
;

673 * * 
ªg«mes
 = 
›ts
->regnames;

674 
w‹d
 
oÊags
 = 
›ts
->
Êags
;

676 (
c
=*
ù
++) != 0) {

677 
c
) {

679 
ªsu…
.
is_SWI
 = 1;

680 
ªsu…
.
swöum
 = 
ö°r
&0x00FFFFFF;

681 
ªsu…
.
addr°¨t
 = 
›
;

682 i‡(
oÊags
&
dis›t_SWI«mes
) {

683 
	`swöame
(
ªsu…
.
swöum
, 
›
, 128-(›-ªsu….
ãxt
));

684 
›
 +
	`°æí
(op);

687 
›
 +
	`•rötf
(›, "&%lX", 
ªsu…
.
swöum
);

690 *
›
++='{';

691 { 
w‹d
 
w
 = 
ö°r
&0xFFFF;

692 
i
=0;

693 
w
) {

694 
j
;

695 !(
w
&(1ul<<
i
))) ++i;

696 
j
=
i
+1; 
w
&(1ul<<j); ++j) ;

697 --
j
;

699 
›
 = 
	`≠≥nd
(›, 
ªg«mes
[
i
]);

700 i‡(
j
-
i
) {

701 *
›
++ = (
j
-
i
>1) ? '-' : ',';

702 
›
 = 
	`≠≥nd
(›, 
ªg«mes
[
j
]);

704 
i
=
j
; 
w
=(w>>(j+1))<<(j+1);

705 i‡(
w
Ë*
›
++=',';

708 *
›
++='}';

709 i‡(
ö°r
&(1<<22)Ë*
›
++='^';

712 { 
addªss
 
èrgë
 = (
addr
+8 + (((()
ö°r
)<<8)>>6)) & 0x03FFFFFC;

713 
ªsu…
.
addr°¨t
 = 
›
;

714 
›
 = 
	`hex8
(›, 
èrgë
);

715 
ªsu…
.
èrgë_ty≥
 = 
èrgë_Code
;

716 
ªsu…
.
èrgë
 =Åarget;

720 
lPlög
:

721 i‡(
ö°r
&
Wbô
Ë*
›
++='!';

724 *
›
++ = ()('0'+
Ân
);

727 { 
w‹d
 
w
 = (
ö°r
>>20)&15;

728 i‡(
w
>=10Ë{ *
›
++='1'; *op++=()('0'-10+w); }

729 *
›
++=()(
w
+'0');

734 i‡(
ö°r
&
Ibô
) {

736 
w‹d
 
imm8
 = (
ö°r
&255);

737 
w‹d
 
rŸ
 = (
ö°r
>>7)&30;

738 i‡(
rŸ
 && !(
imm8
&3Ë&& 
c
=='*') {

740 *
›
++='#'; *op++='&';

741 *
›
++="0123456789ABCDEF"[
imm8
>>4];

742 *
›
++="0123456789ABCDEF"[
imm8
&15];

743 *
›
++=',';

744 
›
 = 
	`num
(›, 
rŸ
);

747 
imm8
 = (imm8>>
rŸ
) | (imm8<<(32-rot));

748 i‡(
c
=='*') {

749 *
›
++='#';

750 i‡(
imm8
>256 && ((imm8&(imm8-1))==0)) {

754 
›
 = 
	`≠≥nd
(op,"1<<");

755 { 
n
=0;

756 !(
imm8
&15)Ë{ 
n
+=4; imm8=imm8>>4; }

758 
n
 +(0x30002010 >> 4*(
imm8
-1))&15;

759 
›
 = 
	`num
(›, 
n
);

763 i‡((()
imm8
)<0 && (()imm8)>-100) {

764 *
›
++='-'; 
imm8
=-imm8;

766 
›
 = 
	`num
(›, 
imm8
);

770 
addªss
 
a
 = 
addr
+8;

771 i‡(
ö°r
&(1<<22)Ë
a
-=
imm8
; a+=imm8;

772 
ªsu…
.
addr°¨t
=
›
;

773 
›
 = 
	`hex8
(›, 
a
);

774 
ªsu…
.
èrgë
=
a
;Ñesu….
èrgë_ty≥
=
èrgë_Unknown
;

780 c⁄° * 
rŸ
 = "LSL\0LSR\0ASR\0ROR" + ((
ö°r
&(3<<5)) >> 3);

781 
›
 = 
	`≠≥nd
(›, 
ªg«mes
[
ö°r
&15]);

782 i‡(
ö°r
&(1<<4)) {

784 i‡(
ö°r
&(1<<7)Ë
lUndeföed
;

785 *
›
++=','; i‡(
oÊags
&
dis›t_CommaS∑˚
) *op++=' ';

786 
›
 = 
	`≠≥nd
(›,
rŸ
); *op++=' ';

787 
›
 = 
	`≠≥nd
(›,
ªg«mes
[(
ö°r
&(15<<8))>>8]);

791 
w‹d
 
n
 = 
ö°r
&(31<<7);

792 i‡(!
n
) {

793 i‡(!(
ö°r
&(3<<5))) ;

794 i‡((
ö°r
&(3<<5))==(3<<5)) {

795 
›
 = 
	`≠≥nd
(op, ",RRX");

798 
n
=32<<7;

800 *
›
++ = ','; i‡(
oÊags
&
dis›t_CommaS∑˚
) *op++=' ';

801 
›
 = 
	`num
(
	`≠≥nd
◊µíd(›,
rŸ
)," #"),
n
>>7);

806 i‡(
ö°r
&(1<<3)) {

807 
w‹d
 
w
 = 
ö°r
&7;

808 *
›
++='#';

809 i‡(
w
<6Ë*
›
++=()('0'+w);

810 
›
 = 
	`≠≥nd
(›, 
w
==6 ? "0.5" : "10");

813 *
›
++='f';

814 *
›
++=()('0'+(
ö°r
&7));

818 *
›
++=',';

819 i‡(
oÊags
&
dis›t_CommaS∑˚
Ë*
›
++=' ';

822 { 
w‹d
 
w
 = 
ö°r
&(7<<5);

823 i‡(
w
) {

824 *
›
++=',';

825 i‡(
oÊags
&
dis›t_CommaS∑˚
Ë*
›
++=' ';

826 *
›
++ = ()('0'+(
w
>>5));

831 
ªsu…
.
addr°¨t
 = 
›
;

832 *
›
++='[';

833 
›
 = 
	`≠≥nd
(›, 
ªg«mes
[(
ö°r
&
RNbôs
)>>16]);

834 i‡(!(
ö°r
&
Pbô
)Ë*
›
++=']';

835 *
›
++=','; i‡(
oÊags
&
dis›t_CommaS∑˚
) *op++=' ';

837 i‡(
ö°r
&
Ibô
) {

839 i‡(!(
ö°r
&
Ubô
)Ë*
›
++='-';

844 
ö°r
 ^
Ibô
;

845 i‡(
ö°r
&(1<<4)) {

846 #ifde‡
INSTR_grok_v4


847 i‡(
is_v4
 && !(
ö°r
&(15<<8))) {

848 
ù
 = (
ö°r
&
Pbô
) ? "0]" : "0";

852 
lUndeföed
;

859 i‡(
ö°r
&
Pbô
Ë
ù
="*]'";

860 i‡(
ö°r
&(1<<27)) {

861 i‡(
	`CP_is
(1) || CP_is(2)) {

862 i‡(!(
ö°r
&
Wbô
)Ë
lUndeföed
;

863 
ù
="*";

865 
ù
="*'";

867 
ù
="*";

871 
w‹d
 
off£t
;

872 i‡(
ö°r
&(1<<27)) {

874 
off£t
 = (
ö°r
&255)<<2;

876 #ifde‡
INSTR_grok_v4


877 i‡(
is_v4
Ë
off£t
 = (
ö°r
&15) + ((instr&(15<<8))>>4);

881 
off£t
 = 
ö°r
&0xFFF;

883 *
›
++='#';

884 i‡(!(
ö°r
&
Ubô
)) {

885 i‡(
off£t
Ë*
›
++='-';

886 
ªsu…
.
oddbôs
=1;

887 
ªsu…
.
off£t
 = -offset;

889 
ªsu…
.
off£t
 = offset;

890 
›
 = 
	`num
(›, 
off£t
);

891 i‡(
	`RN_is
(15Ë&& (
ö°r
&
Pbô
)) {

893 
ªsu…
.
èrgë_ty≥
 = 
poss_â
;

894 
ªsu…
.
èrgë
 = (
ö°r
&
Ubô
Ë? 
addr
+8 + 
off£t


895 : 
addr
+8 - 
off£t
;

896 i‡(!(
ö°r
&
Wbô
)) {

898 
›
 = 
	`hex8
(
ªsu…
.
addr°¨t
,Ñesu….
èrgë
);

902 i‡(
ö°r
&
Pbô
Ë{ *
›
++=']'; 
lPlög
; }

903 i‡(
ö°r
&(1<<27)) {

904 i‡(
	`CP_is
(1) || CP_is(2)) {

905 i‡(!(
ö°r
&
Wbô
)Ë
lUndeföed
;

907 
lPlög
;

912 
›
 = 
	`≠≥nd
(›, 
ªg«mes
[(
ö°r
>>(4*(
c
-'0')))&15]);

915 *
›
++='f';

916 *
›
++=()('0' + ((
ö°r
>>(4*(
c
-'5')))&7));

919 *
›
++ = ()('0' + ((
ö°r
>>21)&7));

922 
›
 = 
	`ªg
(›, 'p', 
ö°r
>>8);

925 i‡(
c
<=5)

926 
›
 = 
	`ªg
(›, 'c', 
ö°r
 >> (4*(
c
-1)));

927 *
›
++ = 
c
;

930 *
›
=0;

936  &
ªsu…
;

937 
	}
}

939 * 
ªg_«mes
[16] = {

944 
sDisO±i⁄s
 
	g›ti⁄s
 = {

945 
dis›t_CommaS∑˚
,

946 
ªg_«mes


949 
	$dißrm
(
±r
, 
size
) {

950 
addr
=
±r
;

951 
size
/=4;

952 
size
--) {

953 
w‹d
 
w
=*((*)
addr
);

954 i‡(
dißrm_immedüãs
) {

955 
	`¥ötf
("%.8lX",
w
);

957 
pIn°ru˘i⁄
 
ö°r
 = 
	`ö°r_dißs£mbÀ
(
w
, 
addr
, &
›ti⁄s
);

958 
	`¥ötf
("%.8lX : %s", 
w
, 
ö°r
->
ãxt
);

959 i‡(
ö°r
->
undeföed
 || in°r->
badbôs
 || in°r->
oddbôs
) {

960 
	`¥ötf
(" ;");

961 i‡(
ö°r
->
undeföed
Ë
	`¥ötf
(" ILLEGAL [undefined instr]");

962 i‡(
ö°r
->
badbôs
Ë
	`¥ötf
(" ILLEGAL [illegal bits]");

963 i‡(
ö°r
->
oddbôs
Ë
	`¥ötf
(" ILLEGAL [unexpected bits]");

966 
	`puts
("");

968 
addr
 += 4;

970 
	}
}

	@src/recompiler/arm/opcodes.h

21 
	$ªcNULL
(Ë{ 
	}
}

22 
	$ªcSPECIAL
(Ë{ 
ªcSPC
[
_Fun˘_
](); 
	}
}

23 
	$ªcREGIMM
(Ë{ 
ªcREG
[
_Rt_
](); 
	}
}

24 
	$ªcCOP0
(Ë{ 
ªcCP0
[
_Rs_
](); 
	}
}

25 #ifde‡
DEBUG_CPU_OPCODES


26 
	$ªcCOP2
(Ë{ 
ªcCP2
[
_Fun˘_
]();

28 
	}
}

30 
	$ªcCOP2
(Ë{ 
ªcCP2
[
_Fun˘_
](); 
	}
}

32 
	$ªcBASIC
(Ë{ 
ªcCP2BSC
[
_Rs_
](); 
	}
}

34 
	~"ªc_Æu.h
"

35 
	~"ªc_mem.h
"

36 
	~"ªc_bønch.h
"

37 
	~"ªc_gã.h
"

38 
	~"ªc_misc.h
"

40 (*
	gªcBSC
[64])() = {

41 
ªcSPECIAL
, 
ªcREGIMM
, 
ªcJ
 , 
ªcJAL
 , 
ªcBEQ
 , 
ªcBNE
 , 
ªcBLEZ
, 
ªcBGTZ
,

42 
ªcADDI
 , 
ªcADDIU
 , 
ªcSLTI
, 
ªcSLTIU
, 
ªcANDI
, 
ªcORI
 , 
ªcXORI
, 
ªcLUI
 ,

43 
ªcCOP0
 , 
ªcNULL
 , 
ªcCOP2
,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

44 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

45 
ªcLB
 , 
ªcLH
 , 
ªcLWL
 , 
ªcLW
 , 
ªcLBU
 , 
ªcLHU
 , 
ªcLWR
 , 
ªcNULL
,

46 
ªcSB
 , 
ªcSH
 , 
ªcSWL
 , 
ªcSW
 , 
ªcNULL
,ÑecNULL, 
ªcSWR
 ,ÑecNULL,

47 
ªcNULL
 ,ÑecNULL , 
ªcLWC2
,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

48 
ªcNULL
 ,ÑecNULL , 
ªcSWC2
, 
ªcHLE
 ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL

51 (*
	gªcSPC
[64])() = {

52 
ªcSLL
 , 
ªcNULL
, 
ªcSRL
 , 
ªcSRA
 , 
ªcSLLV
 ,ÑecNULL , 
ªcSRLV
, 
ªcSRAV
,

53 
ªcJR
 , 
ªcJALR
, 
ªcNULL
,ÑecNULL, 
ªcSYSCALL
, 
ªcBREAK
,ÑecNULL,ÑecNULL,

54 
ªcMFHI
, 
ªcMTHI
, 
ªcMFLO
, 
ªcMTLO
, 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,

55 
ªcMULT
, 
ªcMULTU
, 
ªcDIV
, 
ªcDIVU
, 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,

56 
ªcADD
 , 
ªcADDU
, 
ªcSUB
 , 
ªcSUBU
, 
ªcAND
 , 
ªcOR
 , 
ªcXOR
 , 
ªcNOR
 ,

57 
ªcNULL
,ÑecNULL, 
ªcSLT
 , 
ªcSLTU
,ÑecNULL ,ÑecNULL ,ÑecNULL,ÑecNULL,

58 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL ,ÑecNULL ,ÑecNULL,ÑecNULL,

59 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL ,ÑecNULL ,ÑecNULL,ÑecNULL

62 (*
	gªcREG
[32])() = {

63 
ªcBLTZ
 , 
ªcBGEZ
 , 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

64 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

65 
ªcBLTZAL
, 
ªcBGEZAL
, 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

66 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL

69 (*
	gªcCP0
[32])() = {

70 
ªcMFC0
, 
ªcNULL
, 
ªcCFC0
,ÑecNULL, 
ªcMTC0
,ÑecNULL, 
ªcCTC0
,ÑecNULL,

71 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

72 
ªcRFE
 , 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

73 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL

76 (*
	gªcCP2
[64])() = {

77 
ªcBASIC
, 
ªcRTPS
 , 
ªcNULL
 ,ÑecNULL,ÑecNULL,ÑecNULL , 
ªcNCLIP
,ÑecNULL,

78 
ªcNULL
 ,ÑecNULL ,ÑecNULL ,ÑecNULL, 
ªcOP
 ,ÑecNULL ,ÑecNULL ,ÑecNULL,

79 
ªcDPCS
 , 
ªcINTPL
, 
ªcMVMVA
, 
ªcNCDS
, 
ªcCDP
 , 
ªcNULL
 , 
ªcNCDT
 ,ÑecNULL,

80 
ªcNULL
 ,ÑecNULL ,ÑecNULL , 
ªcNCCS
, 
ªcCC
 ,ÑecNULL , 
ªcNCS
 ,ÑecNULL,

81 
ªcNCT
 , 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL ,ÑecNULL ,ÑecNULL,

82 
ªcSQR
 , 
ªcDCPL
 , 
ªcDPCT
 , 
ªcNULL
,ÑecNULL, 
ªcAVSZ3
, 
ªcAVSZ4
,ÑecNULL,

83 
ªcRTPT
 , 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL ,ÑecNULL ,ÑecNULL,

84 
ªcNULL
 ,ÑecNULL ,ÑecNULL ,ÑecNULL,ÑecNULL, 
ªcGPF
 , 
ªcGPL
 , 
ªcNCCT


87 (*
	gªcCP2BSC
[32])() = {

88 
ªcMFC2
, 
ªcNULL
, 
ªcCFC2
,ÑecNULL, 
ªcMTC2
,ÑecNULL, 
ªcCTC2
,ÑecNULL,

89 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

90 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

91 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL

	@src/recompiler/arm/rec_alu.h

22 
	$ªcADDIU
() {

24 #ifde‡
DEBUG_CPU


25 i‡(
ªc_pha£
) {

26 
	`dbgf
("\t\åecADDIU R%òR%ò+ %i\n",
_Rt_
,
_Rs_
,
_Imm_
);

29 i‡(
_Rt_
)

31 i‡(
_Rs_
 =
_Rt_
) {

32 i‡(
	`IsC⁄°
(
_Rt_
)) {

33 
	`M≠C⁄°
(
_Rt_
,
iRegs
[_Rt_].
k
+ 
_Imm_
);

35 i‡(
_Imm_
) {

36 
u32
 
π
=
	`RódWrôeReg
(
_Rt_
);

37 
	`ADD32ItoR
(
π
, 
_Imm_
);

41 i‡(
	`IsC⁄°
(
_Rs_
)) {

42 
	`M≠C⁄°
(
_Rt_
, 
iRegs
[
_Rs_
].
k
 + 
_Imm_
);

44 
u32
 
rs
=
	`RódReg
(
_Rs_
);

45 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

46 i‡(
_Imm_
) {

47 
	`MOVADD32ItoR
(
π
,
rs
,
_Imm_
);

49 
	`MOV32RtoR
(
π
,
rs
);

54 
	}
}

57 
	$ªcADDI
() {

59 
	`ªcADDIU
();

60 
	}
}

63 
	$ªcANDI
() {

65 #ifde‡
DEBUG_CPU


66 i‡(
ªc_pha£
) {

67 
	`dbgf
("\t\åecANDI R%òR%òAnd %i\n",
_Rt_
,
_Rs_
,
_Imm_
);

70 i‡(
_Rt_
)

72 i‡(
_Rs_
 =
_Rt_
) {

73 i‡(
	`IsC⁄°
(
_Rt_
)) {

74 
	`M≠C⁄°
(
_Rt_
,
iRegs
[_Rt_].
k
&
_ImmU_
);

76 
u32
 
π
=
	`RódWrôeReg
(
_Rt_
);

77 
	`AND32ItoR
(
π
, 
_ImmU_
);

80 i‡(
	`IsC⁄°
(
_Rs_
)) {

81 
	`M≠C⁄°
(
_Rt_
, 
iRegs
[
_Rs_
].
k
 & 
_ImmU_
);

83 
u32
 
rs
=
	`RódReg
(
_Rs_
);

84 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

85 
	`MOV32RtoR
(
π
,
rs
);

86 
	`AND32ItoR
(
π
,
_ImmU_
);

90 
	}
}

93 
	$ªcORI
() {

95 #ifde‡
DEBUG_CPU


96 i‡(
ªc_pha£
) {

97 
	`dbgf
("\t\åecORI R%òR%òO∏%i\n",
_Rt_
,
_Rs_
,
_Imm_
);

100 i‡(
_Rt_
) {

101 i‡(
_Rs_
 =
_Rt_
) {

102 i‡(
	`IsC⁄°
(
_Rt_
)) {

103 
	`M≠C⁄°
(
_Rt_
,
iRegs
[_Rt_].
k
|
_ImmU_
);

105 
u32
 
π
=
	`RódWrôeReg
(
_Rt_
);

106 
	`MOV32ItoR
(
HOST_r0
,
_ImmU_
);

107 
	`OR32
(
π
,π,
HOST_r0
);

110 i‡(
	`IsC⁄°
(
_Rs_
)) {

111 
	`M≠C⁄°
(
_Rt_
, 
iRegs
[
_Rs_
].
k
 | 
_ImmU_
);

113 
u32
 
rs
=
	`RódReg
(
_Rs_
);

114 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

115 
	`MOV32RtoR
(
π
,
rs
);

116 i‡(
_ImmU_
)

118 
	`MOV32ItoR
(
HOST_r0
,
_ImmU_
);

119 
	`OR32
(
π
,π,
HOST_r0
);

124 
	}
}

127 
	$ªcXORI
() {

129 #ifde‡
DEBUG_CPU


130 i‡(
ªc_pha£
) {

131 
	`dbgf
("\t\åecXORI R%òR%òX‹ %i\n",
_Rt_
,
_Rs_
,
_Imm_
);

134 i‡(
_Rt_
) {

135 i‡(
_Rs_
 =
_Rt_
) {

136 i‡(
	`IsC⁄°
(
_Rt_
)) {

137 
	`M≠C⁄°
(
_Rt_
,
iRegs
[_Rt_].
k
^
_ImmU_
);

139 
u32
 
π
=
	`RódWrôeReg
(
_Rt_
);

140 
	`MOV32ItoR
(
HOST_r0
,
_ImmU_
);

141 
	`XOR32
(
π
,π,
HOST_r0
);

144 i‡(
	`IsC⁄°
(
_Rs_
)) {

145 
	`M≠C⁄°
(
_Rt_
, 
iRegs
[
_Rs_
].
k
 ^ 
_ImmU_
);

147 
u32
 
rs
=
	`RódReg
(
_Rs_
);

148 
	`MOV32ItoR
(
HOST_r0
, 
_ImmU_
);

149 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

150 
	`XOR32
(
π
,
rs
,
HOST_r0
);

154 
	}
}

156 
	#SLT
(
d°
,
›1
,
›2
Ë
	`wrôe32
(
	`CMP_REGS
(›1,›2));wrôe32(
	`MOVGE_IMM
(d°, 0, 0));wrôe32(
	`MOVLT_IMM
(d°, 1, 0))

	)

157 
	#SLTU
(
d°
,
›1
,
›2
Ë
	`wrôe32
(
	`CMP_REGS
(›1,›2));wrôe32(
	`MOVCS_IMM
(d°, 0, 0));wrôe32(
	`MOVCC_IMM
(d°, 1, 0))

	)

160 
	$ªcSLTI
() {

162 #ifde‡
DEBUG_CPU


163 i‡(
ªc_pha£
) {

164 
	`dbgf
("\t\åecSLTI R%òR%ò< %i\n",
_Rt_
,
_Rs_
,
_Imm_
);

167 i‡(
_Rt_
) {

168 i‡(
	`IsC⁄°
(
_Rs_
)) {

169 
	`M≠C⁄°
(
_Rt_
, (
s32
)
iRegs
[
_Rs_
].
k
 < 
_Imm_
);

171 
u32
 
rs
=
	`RódReg
(
_Rs_
);

172 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

173 
	`MOV32ItoR
(
HOST_r1
, 
_Imm_
);

174 
	`SLT
(
π
,
rs
,
HOST_r1
);

177 
	}
}

180 
	$ªcSLTIU
() {

182 #ifde‡
DEBUG_CPU


183 i‡(
ªc_pha£
) {

184 
	`dbgf
("\t\åecSLTIU R%òR%ò< %i\n",
_Rt_
,
_Rs_
,
_Imm_
);

187 i‡(
_Rt_
) {

188 i‡(
	`IsC⁄°
(
_Rs_
)) {

189 
	`M≠C⁄°
(
_Rt_
, 
iRegs
[
_Rs_
].
k
 < 
_ImmU_
);

191 
u32
 
rs
=
	`RódReg
(
_Rs_
);

192 
	`MOV32ItoR
(
HOST_r1
, 
_Imm_
);

193 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

194 
	`SLTU
(
π
,
rs
,
HOST_r1
);

197 
	}
}

200 
	$ªcLUI
() {

202 #ifde‡
DEBUG_CPU


203 i‡(
ªc_pha£
) {

204 
	`dbgf
("\t\åecLUI R%ò%ò<< 16 = %.8X\n",
_Rt_
,
_Imm_
,
psxRegs
.
code
 << 16);

207 i‡(
_Rt_
Ë
	`M≠C⁄°
(_Rt_, 
psxRegs
.
code
 << 16);

208 
	}
}

211 
	$ªcADDU
() {

213 #ifde‡
DEBUG_CPU


214 i‡(
ªc_pha£
) {

215 
	`dbgf
("\t\åecADDU R%òR%ò+ R%i\n",
_Rd_
,
_Rs_
,
_Rt_
);

218 i‡(
_Rd_
) {

219 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

220 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rs_
].
k
 + iRegs[
_Rt_
].k);

221 } i‡(
	`IsC⁄°
(
_Rs_
)) {

222 i‡(
_Rt_
 =
_Rd_
) {

223 i‡(
iRegs
[
_Rs_
].
k
) {

224 
u32
 
rd
=
	`RódWrôeReg
(
_Rd_
);

225 
	`ADD32ItoR
(
rd
, 
iRegs
[
_Rs_
].
k
);

228 
u32
 
π
=
	`RódReg
(
_Rt_
);

229 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

230 i‡(
iRegs
[
_Rs_
].
k
) {

231 
	`MOVADD32ItoR
(
rd
,
π
,
iRegs
[
_Rs_
].
k
);

233 
	`MOV32RtoR
(
rd
,
π
);

236 } i‡(
	`IsC⁄°
(
_Rt_
)) {

237 i‡(
_Rs_
 =
_Rd_
) {

238 i‡(
iRegs
[
_Rt_
].
k
) {

239 
u32
 
rd
=
	`RódWrôeReg
(
_Rd_
);

240 
	`ADD32ItoR
(
rd
, 
iRegs
[
_Rt_
].
k
);

243 
u32
 
rs
=
	`RódReg
(
_Rs_
);

244 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

245 i‡(
iRegs
[
_Rt_
].
k
) {

246 
	`MOVADD32ItoR
(
rd
,
rs
,
iRegs
[
_Rt_
].
k
);

248 
	`MOV32RtoR
(
rd
,
rs
);

252 i‡(
_Rs_
 =
_Rd_
) {

253 
u32
 
π
=
	`RódReg
(
_Rt_
);

254 
u32
 
rd
=
	`RódWrôeReg
(
_Rd_
);

255 
	`ADD32
(
rd
,rd,
π
);

256 } i‡(
_Rt_
 =
_Rd_
) {

257 
u32
 
rs
=
	`RódReg
(
_Rs_
);

258 
u32
 
rd
=
	`RódWrôeReg
(
_Rd_
);

259 
	`ADD32
(
rd
,rd,
rs
);

261 
u32
 
rs
=
	`RódReg
(
_Rs_
);

262 
u32
 
π
=
	`RódReg
(
_Rt_
);

263 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

264 
	`ADD32
(
rd
,
rs
,
π
);

268 
	}
}

271 
	$ªcADD
() {

273 
	`ªcADDU
();

274 
	}
}

277 
	$ªcSUBU
() {

279 #ifde‡
DEBUG_CPU


280 i‡(
ªc_pha£
) {

281 
	`dbgf
("\t\åecSUBU R%òR%ò- R%i\n",
_Rd_
,
_Rs_
,
_Rt_
);

284 i‡(
_Rd_
) {

285 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

286 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rs_
].
k
 - iRegs[
_Rt_
].k);

287 } i‡(
	`IsC⁄°
(
_Rs_
)) {

288 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rs_
].
k
);

289 
u32
 
π
=
	`RódReg
(
_Rt_
);

290 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

291 
	`SUB32
(
rd
,
HOST_r0
,
π
);

292 } i‡(
	`IsC⁄°
(
_Rt_
)) {

293 
u32
 
rs
=
	`RódReg
(
_Rs_
);

294 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

295 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

296 
	`SUB32
(
rd
,
rs
,
HOST_r1
);

298 
u32
 
rs
=
	`RódReg
(
_Rs_
);

299 
u32
 
π
=
	`RódReg
(
_Rt_
);

300 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

301 
	`SUB32
(
rd
,
rs
,
π
);

304 
	}
}

307 
	$ªcSUB
() {

309 
	`ªcSUBU
();

310 
	}
}

313 
	$ªcAND
() {

315 #ifde‡
DEBUG_CPU


316 i‡(
ªc_pha£
) {

317 
	`dbgf
("\t\åecAND R%òR%òAnd R%i\n",
_Rd_
,
_Rs_
,
_Rt_
);

320 i‡(
_Rd_
) {

321 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

322 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rs_
].
k
 & iRegs[
_Rt_
].k);

323 } i‡(
	`IsC⁄°
(
_Rs_
)) {

324 i‡(
_Rd_
 =
_Rt_
) {

325 
u32
 
rd
=
	`RódWrôeReg
(
_Rd_
);

326 
	`AND32ItoR
(
rd
,
iRegs
[
_Rs_
].
k
);

328 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rs_
].
k
);

329 
u32
 
π
=
	`RódReg
(
_Rt_
);

330 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

331 
	`AND32
(
rd
,
HOST_r0
,
π
);

333 } i‡(
	`IsC⁄°
(
_Rt_
)) {

334 i‡(
_Rd_
 =
_Rs_
) {

335 
u32
 
rd
=
	`RódWrôeReg
(
_Rd_
);

336 
	`AND32ItoR
(
rd
,
iRegs
[
_Rt_
].
k
);

338 
u32
 
rs
=
	`RódReg
(
_Rs_
);

339 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

340 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

341 
	`AND32
(
rd
,
rs
,
HOST_r1
);

344 
u32
 
rs
=
	`RódReg
(
_Rs_
);

345 
u32
 
π
=
	`RódReg
(
_Rt_
);

346 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

347 
	`AND32
(
rd
,
rs
,
π
);

350 
	}
}

353 
	$ªcOR
() {

355 #ifde‡
DEBUG_CPU


356 i‡(
ªc_pha£
) {

357 
	`dbgf
("\t\åecOR R%òR%òO∏R%i\n",
_Rd_
,
_Rs_
,
_Rt_
);

360 i‡(
_Rd_
) {

361 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

362 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rs_
].
k
 | iRegs[
_Rt_
].k);

363 } i‡(
	`IsC⁄°
(
_Rs_
)) {

364 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rs_
].
k
);

365 
u32
 
π
=
	`RódReg
(
_Rt_
);

366 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

367 
	`OR32
(
rd
,
HOST_r0
,
π
);

368 } i‡(
	`IsC⁄°
(
_Rt_
)) {

369 
u32
 
rs
=
	`RódReg
(
_Rs_
);

370 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

371 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

372 
	`OR32
(
rd
,
rs
,
HOST_r1
);

374 
u32
 
rs
=
	`RódReg
(
_Rs_
);

375 
u32
 
π
=
	`RódReg
(
_Rt_
);

376 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

377 
	`OR32
(
rd
,
rs
,
π
);

380 
	}
}

383 
	$ªcXOR
() {

385 #ifde‡
DEBUG_CPU


386 i‡(
ªc_pha£
) {

387 
	`dbgf
("\t\åecXOR R%òR%òX‹ R%i\n",
_Rd_
,
_Rs_
,
_Rt_
);

390 i‡(
_Rd_
)

392 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

393 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rs_
].
k
 ^ iRegs[
_Rt_
].k);

394 } i‡(
	`IsC⁄°
(
_Rs_
)) {

395 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rs_
].
k
);

396 
u32
 
π
=
	`RódReg
(
_Rt_
);

397 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

398 
	`XOR32
(
rd
,
HOST_r0
,
π
);

399 } i‡(
	`IsC⁄°
(
_Rt_
)) {

400 
u32
 
rs
=
	`RódReg
(
_Rs_
);

401 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

402 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

403 
	`XOR32
(
rd
,
rs
,
HOST_r1
);

405 
u32
 
rs
=
	`RódReg
(
_Rs_
);

406 
u32
 
π
=
	`RódReg
(
_Rt_
);

407 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

408 
	`XOR32
(
rd
,
rs
,
π
);

411 
	}
}

414 
	$ªcNOR
() {

416 #ifde‡
DEBUG_CPU


417 i‡(
ªc_pha£
) {

418 
	`dbgf
("\t\åecNOR R%òR%òN‹ R%i\n",
_Rd_
,
_Rs_
,
_Rt_
);

421 i‡(
_Rd_
) {

422 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

423 
	`M≠C⁄°
(
_Rd_
, ~(
iRegs
[
_Rs_
].
k
 | iRegs[
_Rt_
].k));

424 } i‡(
	`IsC⁄°
(
_Rs_
)) {

425 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rs_
].
k
);

426 
u32
 
π
=
	`RódReg
(
_Rt_
);

427 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

428 
	`OR32
(
rd
,
HOST_r0
,
π
);

429 
	`MOV32ItoR
(
HOST_r1
,0xffffffff);

430 
	`XOR32
(
rd
,rd,
HOST_r1
);

431 } i‡(
	`IsC⁄°
(
_Rt_
)) {

432 
u32
 
rs
=
	`RódReg
(
_Rs_
);

433 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

434 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

435 
	`OR32
(
rd
,
rs
,
HOST_r1
);

436 
	`MOV32ItoR
(
HOST_r1
,0xffffffff);

437 
	`XOR32
(
rd
,rd,
HOST_r1
);

439 
u32
 
rs
=
	`RódReg
(
_Rs_
);

440 
u32
 
π
=
	`RódReg
(
_Rt_
);

441 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

442 
	`OR32
(
rd
,
rs
,
π
);

443 
	`MOV32ItoR
(
HOST_r1
,0xffffffff);

444 
	`XOR32
(
rd
,rd,
HOST_r1
);

447 
	}
}

450 
	$ªcSLT
() {

452 #ifde‡
DEBUG_CPU


453 i‡(
ªc_pha£
) {

454 
	`dbgf
("\t\åecSLT R%òR%ò< R%i\n",
_Rd_
,
_Rs_
,
_Rt_
);

457 i‡(
_Rd_
) {

458 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

459 
	`M≠C⁄°
(
_Rd_
, (
s32
)
iRegs
[
_Rs_
].
k
 < (s32)iRegs[
_Rt_
].k);

460 } i‡(
	`IsC⁄°
(
_Rs_
)) {

461 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rs_
].
k
);

462 
u32
 
π
=
	`RódReg
(
_Rt_
);

463 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

464 
	`SLT
(
rd
,
HOST_r0
,
π
);

465 } i‡(
	`IsC⁄°
(
_Rt_
)) {

466 
u32
 
rs
=
	`RódReg
(
_Rs_
);

467 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

468 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

469 
	`SLT
(
rd
,
rs
,
HOST_r1
);

471 
u32
 
rs
=
	`RódReg
(
_Rs_
);

472 
u32
 
π
=
	`RódReg
(
_Rt_
);

473 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

474 
	`SLT
(
rd
,
rs
,
π
);

477 
	}
}

480 
	$ªcSLTU
() {

482 #ifde‡
DEBUG_CPU


483 i‡(
ªc_pha£
) {

484 
	`dbgf
("\t\åecSLTU R%òR%ò< R%i\n",
_Rd_
,
_Rs_
,
_Rt_
);

487 i‡(
_Rd_
) {

488 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

489 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rs_
].
k
 < iRegs[
_Rt_
].k);

490 } i‡(
	`IsC⁄°
(
_Rs_
)) {

491 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rs_
].
k
);

492 
u32
 
π
=
	`RódReg
(
_Rt_
);

493 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

494 
	`SLTU
(
rd
,
HOST_r0
,
π
);

495 } i‡(
	`IsC⁄°
(
_Rt_
)) {

496 
u32
 
rs
=
	`RódReg
(
_Rs_
);

497 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

498 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

499 
	`SLTU
(
rd
,
rs
,
HOST_r1
);

501 
u32
 
rs
=
	`RódReg
(
_Rs_
);

502 
u32
 
π
=
	`RódReg
(
_Rt_
);

503 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

504 
	`SLTU
(
rd
,
rs
,
π
);

507 
	}
}

509 
	#SMULL
(
lo
,
hi
,
›1
,
›2
Ë
	`wrôe32
((0xe0c00090 + ((hi)<<16Ë+ (÷o)<<12Ë+ ((›2)<<8Ë+ (›1Ë))

	)

512 
	$ªcMULT
() {

514 #ifde‡
DEBUG_CPU


515 i‡(
ªc_pha£
) {

516 
	`dbgf
("\t\åecMULT Lo/HòR%ò* R%i\n",
_Rs_
,
_Rt_
);

519 i‡(
autobüs
Ë
cy˛es_≥ndög
+=11;

520 i‡((
	`IsC⁄°
(
_Rs_
Ë&& 
iRegs
[_Rs_].
k
 == 0) ||

521 (
	`IsC⁄°
(
_Rt_
Ë&& 
iRegs
[_Rt_].
k
 == 0)) {

522 
	`M≠C⁄°
(32,0);

523 
	`M≠C⁄°
(33,0);

527 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

528 #i‚de‡
__¨m__


529 
u64
 
ªs
 = (
s64
)((s64)(
s32
)
iRegs
[
_Rs_
].
k
 * (s64)(s32)iRegs[
_Rt_
].k);

530 
	`M≠C⁄°
(32,(
u32
)(
ªs
 & 0xffffffff));

531 
	`M≠C⁄°
(33,(
u32
)((
ªs
 >> 32) & 0xffffffff));

533 
u64
 
ªs
;

534 
	`asm
 ("smuŒ %Q0, %R0, %1, %2" : "=&r" (
ªs
Ë: "r"(
iRegs
[
_Rs_
].
k
Ë, "r"(iRegs[
_Rt_
].k));

535 
	`M≠C⁄°
(32,(
u32
)
ªs
);

536 
	`M≠C⁄°
(33,(
ªs
>>32));

541 
u32
 
lo
=
	`WrôeReg
(32);

542 
u32
 
hi
=
	`WrôeReg
(33);

544 i‡(
	`IsC⁄°
(
_Rs_
)) {

545 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rs_
].
k
);

546 
u32
 
π
=
	`RódReg
(
_Rt_
);

547 
	`SMULL
(
lo
,
hi
,
HOST_r0
,
π
);

548 } i‡(
	`IsC⁄°
(
_Rt_
)) {

549 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rt_
].
k
);

550 
u32
 
rs
=
	`RódReg
(
_Rs_
);

551 
	`SMULL
(
lo
,
hi
,
HOST_r0
,
rs
);

553 
u32
 
rs
=
	`RódReg
(
_Rs_
);

554 
u32
 
π
=
	`RódReg
(
_Rt_
);

555 
	`SMULL
(
lo
,
hi
,
rs
,
π
);

557 
	}
}

559 
	#UMULL
(
lo
,
hi
,
›1
,
›2
Ë
	`wrôe32
((0xe0800090 + ((hi)<<16Ë+ (÷o)<<12Ë+ ((›2)<<8Ë+ (›1Ë))

	)

562 
	$ªcMULTU
() {

564 #ifde‡
DEBUG_CPU


565 i‡(
ªc_pha£
) {

566 
	`dbgf
("\t\åecMULTU Lo/HòR%ò* R%i\n",
_Rs_
,
_Rt_
);

569 i‡(
autobüs
Ë
cy˛es_≥ndög
+=11;

570 i‡((
	`IsC⁄°
(
_Rs_
Ë&& 
iRegs
[_Rs_].
k
 == 0) ||

571 (
	`IsC⁄°
(
_Rt_
Ë&& 
iRegs
[_Rt_].
k
 == 0)) {

572 
	`M≠C⁄°
(32,0);

573 
	`M≠C⁄°
(33,0);

577 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

578 #i‚de‡
__¨m__


579 
u64
 
ªs
 = (u64)((u64)(
u32
)
iRegs
[
_Rs_
].
k
 * (u64)(u32)iRegs[
_Rt_
].k);

580 
	`M≠C⁄°
(32,(
u32
)(
ªs
 & 0xffffffff));

581 
	`M≠C⁄°
(33,(
u32
)((
ªs
 >> 32) & 0xffffffff));

583 
u64
 
ªs
;

584 
	`asm
 ("umuŒ %Q0, %R0, %1, %2" : "=&r" (
ªs
Ë: "r"(
iRegs
[
_Rs_
].
k
Ë, "r"(iRegs[
_Rt_
].k));

585 
	`M≠C⁄°
(32,(
u32
)
ªs
);

586 
	`M≠C⁄°
(33,(
ªs
>>32));

591 
u32
 
lo
=
	`WrôeReg
(32);

592 
u32
 
hi
=
	`WrôeReg
(33);

594 i‡(
	`IsC⁄°
(
_Rs_
)) {

595 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rs_
].
k
);

596 
u32
 
π
=
	`RódReg
(
_Rt_
);

597 
	`UMULL
(
lo
,
hi
,
HOST_r0
,
π
);

598 } i‡(
	`IsC⁄°
(
_Rt_
)) {

599 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rt_
].
k
);

600 
u32
 
rs
=
	`RódReg
(
_Rs_
);

601 
	`UMULL
(
lo
,
hi
,
HOST_r0
,
rs
);

603 
u32
 
rs
=
	`RódReg
(
_Rs_
);

604 
u32
 
π
=
	`RódReg
(
_Rt_
);

605 
	`UMULL
(
lo
,
hi
,
rs
,
π
);

607 
	}
}

610 
	$ªcDIV
() {

612 #ifde‡
DEBUG_CPU


613 i‡(
ªc_pha£
) {

614 
	`dbgf
("\t\åecDIV Lo/HòR%ò/ R%i\n",
_Rs_
,
_Rt_
);

617 i‡(
autobüs
Ë
cy˛es_≥ndög
+=34;

618 i‡(
	`IsC⁄°
(
_Rt_
Ë&& IsC⁄°(
_Rs_
)) {

619 i‡(
iRegs
[
_Rt_
].
k
) {

620 #i‚de‡
__¨m__


621 
	`M≠C⁄°
(32, (
s32
)
iRegs
[
_Rs_
].
k
 / (s32)iRegs[
_Rt_
].k);

622 
	`M≠C⁄°
(33, (
s32
)
iRegs
[
_Rs_
].
k
 % (s32)iRegs[
_Rt_
].k);

624 
s64
 
ªs
=
	`LSDIV
((
s32
)
iRegs
[
_Rs_
].
k
,(s32)iRegs[
_Rt_
].k);

625 
	`M≠C⁄°
(32,(
u32
)
ªs
);

626 
	`M≠C⁄°
(33,(
ªs
>>32));

632 i‡(
	`IsC⁄°
(
_Rt_
)) {

633 i‡(
iRegs
[
_Rt_
].
k
 == 0) ;

634 
	`iLockReg
(3);

635 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rt_
].
k
);

637 
	`iLockReg
(3);

638 
u32
 
π
=
	`RódReg
(
_Rt_
);

639 
	`MOV32RtoR
(
HOST_r0
, 
π
);

641 i‡(
	`IsC⁄°
(
_Rs_
)) {

642 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rs_
].
k
);

644 
u32
 
rs
=
	`RódReg
(
_Rs_
);

645 
	`MOV32RtoR
(
HOST_r1
, 
rs
);

648 
u32
 
lo
=
	`WrôeReg
(32);

649 
u32
 
hi
=
	`WrôeReg
(33);

650 
	`CALLFunc
((
u32
)
lsdiv_32by32_¨m9e
);

651 
	`MOV32RtoR
(
lo
,
HOST_r0
);

652 
	`MOV32RtoR
(
hi
,
HOST_r1
);

653 
	`iU∆ockReg
(3);

654 
r2_is_dúty
=1;

655 
	}
}

658 
	$ªcDIVU
() {

660 #ifde‡
DEBUG_CPU


661 i‡(
ªc_pha£
) {

662 
	`dbgf
("\t\åecDIVU Lo/HòR%ò/ R%i\n",
_Rs_
,
_Rt_
);

665 i‡(
autobüs
Ë
cy˛es_≥ndög
+=34;

666 i‡(
	`IsC⁄°
(
_Rt_
Ë&& IsC⁄°(
_Rs_
)) {

667 i‡(
iRegs
[
_Rt_
].
k
) {

668 #i‚de‡
__¨m__


669 
	`M≠C⁄°
(32, (
u32
)
iRegs
[
_Rs_
].
k
 / (u32)iRegs[
_Rt_
].k);

670 
	`M≠C⁄°
(33, (
u32
)
iRegs
[
_Rs_
].
k
 % (u32)iRegs[
_Rt_
].k);

672 
u64
 
ªs
=
	`LUDIV
((
u32
)
iRegs
[
_Rs_
].
k
,(u32)iRegs[
_Rt_
].k);

673 
	`M≠C⁄°
(32,(
u32
)
ªs
);

674 
	`M≠C⁄°
(33,(
ªs
>>32));

680 i‡(
	`IsC⁄°
(
_Rt_
)) {

681 i‡(
iRegs
[
_Rt_
].
k
 == 0) ;

682 
	`iLockReg
(3);

683 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rt_
].
k
);

685 
	`iLockReg
(3);

686 
u32
 
π
=
	`RódReg
(
_Rt_
);

687 
	`MOV32RtoR
(
HOST_r0
, 
π
);

689 i‡(
	`IsC⁄°
(
_Rs_
)) {

690 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rs_
].
k
);

692 
u32
 
rs
=
	`RódReg
(
_Rs_
);

693 
	`MOV32RtoR
(
HOST_r1
, 
rs
);

695 
u32
 
lo
=
	`WrôeReg
(32);

696 
u32
 
hi
=
	`WrôeReg
(33);

697 
	`CALLFunc
((
u32
)
ludiv_32by32_¨m9e
);

698 
	`MOV32RtoR
(
lo
,
HOST_r0
);

699 
	`MOV32RtoR
(
hi
,
HOST_r1
);

700 
	`iU∆ockReg
(3);

701 
r2_is_dúty
 = 1;

702 
	}
}

705 
	$ªcSLL
() {

707 #ifde‡
DEBUG_CPU


708 i‡(
ªc_pha£
) {

709 
	`dbgf
("\t\åecSLL R%òR%ò<< %i\n",
_Rd_
,
_Rt_
,
_Sa_
);

712 i‡(
_Rd_
) {

713 i‡(
	`IsC⁄°
(
_Rt_
)) {

714 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rt_
].
k
 << 
_Sa_
);

716 i‡(
_Sa_
) {

717 
u32
 
π
=
	`RódReg
(
_Rt_
);

718 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

719 
	`SHLI32
(
rd
,
π
,
_Sa_
);

720 } i‡(
_Rd_
!=
_Rt_
) {

721 
u32
 
π
=
	`RódReg
(
_Rt_
);

722 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

723 
	`MOV32RtoR
(
rd
,
π
);

727 
	}
}

730 
	$ªcSRL
() {

732 #ifde‡
DEBUG_CPU


733 i‡(
ªc_pha£
) {

734 
	`dbgf
("\t\åecSRL R%òR%ò>> %i\n",
_Rd_
,
_Rt_
,
_Sa_
);

737 i‡(
_Rd_
) {

738 i‡(
	`IsC⁄°
(
_Rt_
)) {

739 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rt_
].
k
 >> 
_Sa_
);

741 i‡(
_Sa_
) {

742 
u32
 
π
=
	`RódReg
(
_Rt_
);

743 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

744 
	`SHRI32
(
rd
,
π
,
_Sa_
);

745 } i‡(
_Rd_
!=
_Rt_
) {

746 
u32
 
π
=
	`RódReg
(
_Rt_
);

747 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

748 
	`MOV32RtoR
(
rd
,
π
);

752 
	}
}

755 
	$ªcSRA
() {

757 #ifde‡
DEBUG_CPU


758 i‡(
ªc_pha£
) {

759 
	`dbgf
("\t\åecSRA R%òR%ò>> %i\n",
_Rd_
,
_Rt_
,
_Sa_
);

762 i‡(
_Rd_
) {

763 i‡(
	`IsC⁄°
(
_Rt_
)) {

764 
	`M≠C⁄°
(
_Rd_
, (
s32
)
iRegs
[
_Rt_
].
k
 >> 
_Sa_
);

766 i‡(
_Sa_
) {

767 
u32
 
π
=
	`RódReg
(
_Rt_
);

768 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

769 
	`SARI32
(
rd
,
π
,
_Sa_
);

770 } i‡(
_Rd_
!=
_Rt_
) {

771 
u32
 
π
=
	`RódReg
(
_Rt_
);

772 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

773 
	`MOV32RtoR
(
rd
,
π
);

777 
	}
}

780 
	$ªcSLLV
() {

782 #ifde‡
DEBUG_CPU


783 i‡(
ªc_pha£
) {

784 
	`dbgf
("\t\åecSLLV R%òR%ò<< R%i\n",
_Rd_
,
_Rt_
,
_Rs_
);

787 i‡(
_Rd_
) {

788 i‡(
	`IsC⁄°
(
_Rt_
Ë&& IsC⁄°(
_Rs_
)) {

789 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rt_
].
k
 << iRegs[
_Rs_
].k);

790 } i‡(
	`IsC⁄°
(
_Rs_
)) {

791 
u32
 
π
=
	`RódReg
(
_Rt_
);

792 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

793 
	`SHLI32
(
rd
,
π
,
iRegs
[
_Rs_
].
k
);

794 } i‡(
	`IsC⁄°
(
_Rt_
)) {

795 
u32
 
rs
=
	`RódReg
(
_Rs_
);

796 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rt_
].
k
);

797 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

798 
	`SHL32
(
rd
,
HOST_r0
,
rs
);

800 
u32
 
rs
=
	`RódReg
(
_Rs_
);

801 
u32
 
π
=
	`RódReg
(
_Rt_
);

802 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

803 
	`SHL32
(
rd
,
π
,
rs
);

806 
	}
}

809 
	$ªcSRLV
() {

811 #ifde‡
DEBUG_CPU


812 i‡(
ªc_pha£
) {

813 
	`dbgf
("\t\åecSRLV R%òR%ò>> R%i\n",
_Rd_
,
_Rt_
,
_Rs_
);

816 i‡(
_Rd_
) {

817 i‡(
	`IsC⁄°
(
_Rt_
Ë&& IsC⁄°(
_Rs_
)) {

818 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rt_
].
k
 >> iRegs[
_Rs_
].k);

819 } i‡(
	`IsC⁄°
(
_Rs_
)) {

820 
u32
 
π
=
	`RódReg
(
_Rt_
);

821 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

822 
	`SHRI32
(
rd
,
π
,
iRegs
[
_Rs_
].
k
);

823 } i‡(
	`IsC⁄°
(
_Rt_
)) {

824 
u32
 
rs
=
	`RódReg
(
_Rs_
);

825 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rt_
].
k
);

826 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

827 
	`SHR32
(
rd
,
HOST_r0
,
rs
);

829 
u32
 
rs
=
	`RódReg
(
_Rs_
);

830 
u32
 
π
=
	`RódReg
(
_Rt_
);

831 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

832 
	`SHR32
(
rd
,
π
,
rs
);

835 
	}
}

838 
	$ªcSRAV
() {

840 #ifde‡
DEBUG_CPU


841 i‡(
ªc_pha£
) {

842 
	`dbgf
("\t\åecSRAV R%òR%ò>> R%i\n",
_Rd_
,
_Rt_
,
_Rs_
);

845 i‡(
_Rd_
) {

846 i‡(
	`IsC⁄°
(
_Rt_
Ë&& IsC⁄°(
_Rs_
)) {

847 
	`M≠C⁄°
(
_Rd_
, (
s32
)
iRegs
[
_Rt_
].
k
 >> iRegs[
_Rs_
].k);

848 } i‡(
	`IsC⁄°
(
_Rs_
)) {

849 
u32
 
π
=
	`RódReg
(
_Rt_
);

850 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

851 
	`SARI32
(
rd
,
π
,
iRegs
[
_Rs_
].
k
);

852 } i‡(
	`IsC⁄°
(
_Rt_
)) {

853 
u32
 
rs
=
	`RódReg
(
_Rs_
);

854 
	`MOV32ItoR
(
HOST_r0
, 
iRegs
[
_Rt_
].
k
);

855 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

856 
	`SAR32
(
rd
,
HOST_r0
,
rs
);

858 
u32
 
rs
=
	`RódReg
(
_Rs_
);

859 
u32
 
π
=
	`RódReg
(
_Rt_
);

860 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

861 
	`SAR32
(
rd
,
π
,
rs
);

864 
	}
}

	@src/recompiler/arm/rec_branch.h

22 #i‡
deföed
 (
öãΩªãr_√w
Ë|| deföed (
öãΩªãr_n⁄e
)

25 
	#_tFun˘_
 ((
tmp
 ) & 0x3F)

26 
	#_tRd_
 ((
tmp
 >> 11) & 0x1F)

27 
	#_tRt_
 ((
tmp
 >> 16) & 0x1F)

28 
	#_tRs_
 ((
tmp
 >> 21) & 0x1F)

29 
	#_tSa_
 ((
tmp
 >> 6) & 0x1F)

30 

	)

31 
	$psxTe°LﬂdDñay
(
ªg
, 
u32
 
tmp
) {

32 i‡(
tmp
 == 0)  0;

33 
tmp
 >> 26) {

35 
_tFun˘_
) {

38 i‡(
_tRd_
 =
ªg
 && 
_tRt_
 ==Ñeg)  1; 

39 i‡(
_tRt_
 =
ªg
)  2; 

40 i‡(
_tRd_
 =
ªg
)  3;

44 i‡(
_tRs_
 =
ªg
)  2;

47 i‡(
_tRd_
 =
ªg
 && 
_tRs_
 ==Ñeg)  1; 

48 i‡(
_tRs_
 =
ªg
)  2; 

49 i‡(
_tRd_
 =
ªg
)  3;

58 i‡(
_tRd_
 =
ªg
 && (
_tRt_
 =ªg || 
_tRs_
 ==Ñeg))  1; 

59 i‡(
_tRt_
 =
ªg
 || 
_tRs_
 ==Ñeg)  2; 

60 i‡(
_tRd_
 =
ªg
)  3;

64 i‡(
_tRd_
 =
ªg
)  3;

67 i‡(
_tRs_
 =
ªg
)  2;

72 i‡(
_tRt_
 =
ªg
 || 
_tRs_
 ==Ñeg)  2;

78 
_tRt_
) {

81 i‡(
_tRs_
 =
ªg
)  2;

88 i‡(31 =
ªg
)  3;

92 i‡(
_tRs_
 =
ªg
 || 
_tRt_
 ==Ñeg)  2;

96 i‡(
_tRs_
 =
ªg
)  2;

101 i‡(
_tRt_
 =
ªg
 && 
_tRs_
 ==Ñeg)  1; 

102 i‡(
_tRs_
 =
ªg
)  2; 

103 i‡(
_tRt_
 =
ªg
)  3;

107 i‡(
_tRt_
 =
ªg
)  3;

111 
_tFun˘_
) {

113 i‡(
_tRt_
 =
ªg
)  3;

116 i‡(
_tRt_
 =
ªg
)  3;

119 i‡(
_tRt_
 =
ªg
)  2;

122 i‡(
_tRt_
 =
ªg
)  2;

129 
_tFun˘_
) {

131 
_tRs_
) {

133 i‡(
_tRt_
 =
ªg
)  3;

136 i‡(
_tRt_
 =
ªg
)  3;

139 i‡(
_tRt_
 =
ªg
)  2;

142 i‡(
_tRt_
 =
ªg
)  2;

151 i‡(
_tRt_
 =
ªg
)  3; 

152 i‡(
_tRs_
 =
ªg
)  2;

157 i‡(
_tRt_
 =
ªg
 && 
_tRs_
 ==Ñeg)  1; 

158 i‡(
_tRs_
 =
ªg
)  2; 

159 i‡(
_tRt_
 =
ªg
)  3;

164 i‡(
_tRt_
 =
ªg
 || 
_tRs_
 ==Ñeg)  2;

168 i‡(
_tRs_
 =
ªg
)  2;

173 
	}
}

178 
	$ªcJ
() {

180 #ifde‡
DEBUG_CPU


181 i‡(
ªc_pha£
) {

182 
	`dbgf
("\t\åecJ %p\n",
_T¨gë_
 * 4 + (
pc
 & 0xf0000000));

186 
	`iJump
(
_T¨gë_
 * 4 + (
pc
 & 0xf0000000));

187 
	}
}

190 
	$ªcJR
() {

192 #ifde‡
DEBUG_CPU


193 i‡(
ªc_pha£
) {

194 
	`dbgf
("\t\åecJR R%i\n",
_Rs_
);

198 i‡(
	`IsC⁄°
(
_Rs_
)) {

199 
	`iJump
(
iRegs
[
_Rs_
].
k
);

201 
u32
 
rs
=
	`RódReg
(
_Rs_
);

202 
	`MOV32RtoM
((
u32
)&
èrgë
, 
rs
);

203 
	`SëBønch
();

205 
	}
}

208 
	$ªcJAL
() {

210 #ifde‡
DEBUG_CPU


211 i‡(
ªc_pha£
) {

212 
	`dbgf
("\t\åecJAL %p\n",
_T¨gë_
 * 4 + (
pc
 & 0xf0000000));

215 
	`M≠C⁄°
(31, 
pc
+4);

218 
	`iJump
(
_T¨gë_
 * 4 + (
pc
 & 0xf0000000));

219 
	}
}

222 
	$ªcJALR
() {

224 #ifde‡
DEBUG_CPU


225 i‡(
ªc_pha£
) {

226 
	`dbgf
("\t\åecJALR R%i\n",
_Rs_
);

229 i‡(
_Rd_
) {

230 
	`M≠C⁄°
(
_Rd_
, 
pc
+4);

233 i‡(
	`IsC⁄°
(
_Rs_
)) {

234 
	`iJump
(
iRegs
[
_Rs_
].
k
);

236 
u32
 
rs
=
	`RódReg
(
_Rs_
);

237 
	`MOV32RtoM
((
u32
)&
èrgë
, 
rs
);

238 
	`SëBønch
();

240 
	}
}

243 
	$ªcBLTZ
() {

245 #ifde‡
DEBUG_CPU


246 i‡(
ªc_pha£
) {

247 
	`dbgf
("\t\åecBLTZ %∞i‡R%ò< 0\n",
_Imm_
 * 4 + 
pc
,
_Rs_
);

250 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

252 i‡(
bpc
 =
pc
+4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

256 i‡(
	`IsC⁄°
(
_Rs_
)) {

257 i‡((
s32
)
iRegs
[
_Rs_
].
k
 < 0) {

259 
	`iBønch
(
bpc
,0);

260 
pc
+=4;

266 
u32
 
rs
=
	`RódReg
(
_Rs_
);

267 #i‚de‡
REC_USE_2ND_PHASE


269 i‡(
bpc
 =
pcöô
 && 
ªc_ölo›
<
REC_MAX_LOOPS
 && 
	`pˇbs
(
pc
,bpc)<
REC_MAX_TO_TEST
 && 
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
) {

270 
ªc_ölo›
++;

271 
j32På
[4] = 
	`JLTZ32
(
rs
);

272 
	`iLo›
();

273 
	`¨mSëJ32
(
j32På
[4]);

274 
	`iBønch
(
bpc
, 0);

278 
u32
 
pcback
=
pc
;

279 i‡(
ªc_pha£
) {

280 
j32På
[4] = 
	`JGEZ32
(
rs
);

282 
	`iBønch
(
bpc
, 1);

283 i‡(
ªc_pha£
) {

284 
	`¨mSëJ32
(
j32På
[4]);

287 
pc
=
pcback
-4;

288 
bønch
=0;

290 
pc
 += 4;

291 
	}
}

295 
	$ªcBGTZ
() {

297 #ifde‡
DEBUG_CPU


298 i‡(
ªc_pha£
) {

299 
	`dbgf
("\t\åecBGTZ %∞i‡R%ò> 0\n",
_Imm_
 * 4 + 
pc
,
_Rs_
);

302 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

304 i‡(
bpc
 =
pc
+4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

308 i‡(
	`IsC⁄°
(
_Rs_
)) {

309 i‡((
s32
)
iRegs
[
_Rs_
].
k
 > 0) {

311 
	`iBønch
(
bpc
,0);

312 
pc
+=4;

318 
u32
 
rs
=
	`RódReg
(
_Rs_
);

319 #i‚de‡
REC_USE_2ND_PHASE


321 i‡(
bpc
 =
pcöô
 && 
ªc_ölo›
<
REC_MAX_LOOPS
 && 
	`pˇbs
(
pc
,bpc)<
REC_MAX_TO_TEST
 && 
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
) {

322 
ªc_ölo›
++;

323 
j32På
[4] = 
	`JGTZ32
(
rs
);

324 
	`iLo›
();

325 
	`¨mSëJ32
(
j32På
[4]);

326 
	`iBønch
(
bpc
, 0);

330 
u32
 
pcback
=
pc
;

331 i‡(
ªc_pha£
) {

332 
j32På
[4] = 
	`JLEZ32
(
rs
);

334 
	`iBønch
(
bpc
, 1);

335 i‡(
ªc_pha£
) {

336 
	`¨mSëJ32
(
j32På
[4]);

339 
pc
=
pcback
-4;

340 
bønch
=0;

342 
pc
+=4;

343 
	}
}

347 
	$ªcBLTZAL
() {

349 #ifde‡
DEBUG_CPU


350 i‡(
ªc_pha£
) {

351 
	`dbgf
("\t\åecBLTZAL %∞i‡R%ò< 0\n",
_Imm_
 * 4 + 
pc
,
_Rs_
);

354 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

356 i‡(
bpc
 =
pc
+4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

360 i‡(
	`IsC⁄°
(
_Rs_
)) {

361 i‡((
s32
)
iRegs
[
_Rs_
].
k
 < 0) {

362 
u32
 
r31
=
	`WrôeReg
(31);

363 
	`MOV32ItoR
(
r31
, 
pc
+4);

365 
	`iBønch
(
bpc
,0);

366 
pc
+=4;

373 
u32
 
rs
=
	`RódReg
(
_Rs_
);

374 #i‚de‡
REC_USE_2ND_PHASE


376 i‡(
bpc
 =
pcöô
 && 
ªc_ölo›
<
REC_MAX_LOOPS
 && 
	`pˇbs
(
pc
,bpc)<
REC_MAX_TO_TEST
 && 
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
) {

377 
ªc_ölo›
++;

378 
j32På
[4] = 
	`JLTZ32
(
rs
);

379 
	`iLo›
();

380 
	`¨mSëJ32
(
j32På
[4]);

381 
u32
 
r31
=
	`WrôeReg
(31);

382 
	`MOV32ItoR
(
r31
, 
pc
+4);

383 
	`iBønch
(
bpc
, 0);

387 
u32
 
pcback
=
pc
;

388 i‡(
ªc_pha£
) {

389 
j32På
[4] = 
	`JGEZ32
(
rs
);

391 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

392 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

393 #ifde‡
REC_USE_2ND_PHASE


394 i‡(!
ªc_pha£
) {

395 
	`mem˝y
(
ªcPªv_tŸÆS
, 
ªcPªv_tŸÆ
, (recPrev_total));

398 
u32
 
r31
=
	`WrôeReg
(31);

399 
	`MOV32ItoR
(
r31
, 
pc
+4);

400 
	`iBønch
(
bpc
, 2);

401 i‡(
ªc_pha£
) {

402 
	`¨mSëJ32
(
j32På
[4]);

405 
pc
=
pcback
-4;

406 
bønch
=0;

408 
pc
 += 4;

409 
	}
}

412 
	$ªcBGEZAL
() {

414 #ifde‡
DEBUG_CPU


415 i‡(
ªc_pha£
) {

416 
	`dbgf
("\t\åecBGEZAL %∞i‡R%ò>0\n",
_Imm_
 * 4 + 
pc
,
_Rs_
);

419 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

421 i‡(
bpc
 =
pc
+4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

425 i‡(
	`IsC⁄°
(
_Rs_
)) {

426 i‡((
s32
)
iRegs
[
_Rs_
].
k
 >= 0) {

427 
u32
 
r31
=
	`WrôeReg
(31);

428 
	`MOV32ItoR
(
r31
, 
pc
+4);

430 
	`iBønch
(
bpc
,0);

431 
pc
+=4;

438 
u32
 
rs
=
	`RódReg
(
_Rs_
);

439 #i‚de‡
REC_USE_2ND_PHASE


441 i‡(
bpc
 =
pcöô
 && 
ªc_ölo›
<
REC_MAX_LOOPS
 && 
	`pˇbs
(
pc
,bpc)<
REC_MAX_TO_TEST
 && 
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
) {

442 
ªc_ölo›
++;

443 
j32På
[4] = 
	`JGEZ32
(
rs
);

444 
	`iLo›
();

445 
	`¨mSëJ32
(
j32På
[4]);

446 
u32
 
r31
=
	`WrôeReg
(31);

447 
	`MOV32ItoR
(
r31
, 
pc
+4);

448 
	`iBønch
(
bpc
, 0);

452 
u32
 
pcback
=
pc
;

453 i‡(
ªc_pha£
) {

454 
j32På
[4] = 
	`JLTZ32
(
rs
);

456 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

457 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

458 #ifde‡
REC_USE_2ND_PHASE


459 i‡(!
ªc_pha£
) {

460 
	`mem˝y
(
ªcPªv_tŸÆS
, 
ªcPªv_tŸÆ
, (recPrev_total));

463 
u32
 
r31
=
	`WrôeReg
(31);

464 
	`MOV32ItoR
(
r31
, 
pc
+4);

465 
	`iBønch
(
bpc
, 2);

466 i‡(
ªc_pha£
) {

467 
	`¨mSëJ32
(
j32På
[4]);

470 
pc
=
pcback
-4;

471 
bønch
=0;

473 
pc
+=4;

474 
	}
}

477 
	$ªcBNE
() {

479 #ifde‡
DEBUG_CPU


480 i‡(
ªc_pha£
) {

481 
	`dbgf
("\t\åecBNE %∞i‡R%ò!R%i\n",
_Imm_
 * 4 + 
pc
,
_Rs_
,
_Rt_
);

484 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

486 i‡(
bpc
 =
pc
+4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

490 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

491 i‡(
iRegs
[
_Rs_
].
k
 !iRegs[
_Rt_
].k) {

493 
	`iBønch
(
bpc
,0);

494 
pc
+=4;

501 
u32
 
rs
,
π
;

503 i‡(
	`IsC⁄°
(
_Rs_
)) {

504 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rs_
].
k
);

505 
rs
=
HOST_r0
;

507 
rs
=
	`RódReg
(
_Rs_
);

510 i‡(
	`IsC⁄°
(
_Rt_
)) {

511 
	`MOV32ItoR
(
HOST_r1
,
iRegs
[
_Rt_
].
k
);

512 
π
=
HOST_r1
;

514 
π
=
	`RódReg
(
_Rt_
);

517 
	`wrôe32
(
	`CMP_REGS
(
rs
,
π
));

518 #i‚de‡
REC_USE_2ND_PHASE


520 i‡(
bpc
 =
pcöô
 && 
ªc_ölo›
<
REC_MAX_LOOPS
 && 
	`pˇbs
(
pc
,bpc)<
REC_MAX_TO_TEST
 && 
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
) {

521 
ªc_ölo›
++;

522 
j32På
[4] = 
¨mPå
; 
	`wrôe32
(
	`BNE_FWD
(0));

523 
	`iLo›
();

524 
	`¨mSëJ32
(
j32På
[4]);

525 
	`iBønch
(
bpc
, 0);

529 
u32
 
pcback
=
pc
;

530 i‡(
ªc_pha£
) {

531 
j32På
[4] = 
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

533 
	`iBønch
(
bpc
, 1);

534 i‡(
ªc_pha£
) {

535 
	`¨mSëJ32
(
j32På
[4]);

538 
pc
=
pcback
-4;

539 
bønch
=0;

541 
pc
 += 4;

542 
	}
}

545 
	$ªcBEQ
() {

547 #ifde‡
DEBUG_CPU


548 i‡(
ªc_pha£
) {

549 
	`dbgf
("\t\åecBEQ %∞i‡R%ò=R%i\n",
_Imm_
 * 4 + 
pc
,
_Rs_
,
_Rt_
);

552 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

554 i‡(
bpc
 =
pc
+4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

558 i‡(
_Rs_
 =
_Rt_
) {

560 
	`iBønch
(
bpc
,0);

561 
pc
+=4;

564 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

565 i‡(
iRegs
[
_Rs_
].
k
 =iRegs[
_Rt_
].k) {

566 
	`iBønch
(
bpc
,0);

567 
pc
+=4;

574 
u32
 
rs
,
π
;

576 i‡(
	`IsC⁄°
(
_Rs_
)) {

577 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rs_
].
k
);

578 
rs
=
HOST_r0
;

580 
rs
=
	`RódReg
(
_Rs_
);

583 i‡(
	`IsC⁄°
(
_Rt_
)) {

584 
	`MOV32ItoR
(
HOST_r1
,
iRegs
[
_Rt_
].
k
);

585 
π
=
HOST_r1
;

587 
π
=
	`RódReg
(
_Rt_
);

589 
	`wrôe32
(
	`CMP_REGS
(
rs
,
π
));

590 #i‚de‡
REC_USE_2ND_PHASE


592 i‡(
bpc
 =
pcöô
 && 
ªc_ölo›
<
REC_MAX_LOOPS
 && 
	`pˇbs
(
pc
,bpc)<
REC_MAX_TO_TEST
 && 
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
) {

593 
ªc_ölo›
++;

594 
j32På
[4] = 
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

595 
	`iLo›
();

596 
	`¨mSëJ32
(
j32På
[4]);

597 
	`iBønch
(
bpc
, 0);

601 
u32
 
pcback
=
pc
;

602 i‡(
ªc_pha£
) {

603 
j32På
[4] = 
¨mPå
; 
	`wrôe32
(
	`BNE_FWD
(0));

605 
	`iBønch
(
bpc
, 1);

606 i‡(
ªc_pha£
) {

607 
	`¨mSëJ32
(
j32På
[4]);

610 
pc
=
pcback
-4;

611 
bønch
=0;

613 
pc
 += 4;

615 
	}
}

618 
	$ªcBLEZ
() {

620 #ifde‡
DEBUG_CPU


621 i‡(
ªc_pha£
) {

622 
	`dbgf
("\t\åecBLEZ %∞i‡R%ò<0\n",
_Imm_
 * 4 + 
pc
,
_Rs_
);

625 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

627 i‡(
bpc
 =
pc
+4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

631 i‡(
	`IsC⁄°
(
_Rs_
)) {

632 i‡((
s32
)
iRegs
[
_Rs_
].
k
 <= 0) {

633 
	`iBønch
(
bpc
,0);

634 
pc
+=4;

641 
u32
 
rs
=
	`RódReg
(
_Rs_
);

642 #i‚de‡
REC_USE_2ND_PHASE


644 i‡(
bpc
 =
pcöô
 && 
ªc_ölo›
<
REC_MAX_LOOPS
 && 
	`pˇbs
(
pc
,bpc)<
REC_MAX_TO_TEST
 && 
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
) {

645 
ªc_ölo›
++;

646 
j32På
[4] = 
	`JLEZ32
(
rs
);

647 
	`iLo›
();

648 
	`¨mSëJ32
(
j32På
[4]);

649 
	`iBønch
(
bpc
, 0);

653 
u32
 
pcback
=
pc
;

654 i‡(
ªc_pha£
) {

655 
j32På
[4] = 
	`JGTZ32
(
rs
);

657 
	`iBønch
(
bpc
, 1);

658 i‡(
ªc_pha£
) {

659 
	`¨mSëJ32
(
j32På
[4]);

662 
pc
=
pcback
-4;

663 
bønch
=0;

665 
pc
 += 4;

666 
	}
}

669 
	$ªcBGEZ
() {

671 #ifde‡
DEBUG_CPU


672 i‡(
ªc_pha£
) {

673 
	`dbgf
("\t\åecBGEZ %∞i‡R%ò>0\n",
_Imm_
 * 4 + 
pc
,
_Rs_
);

676 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

678 i‡(
bpc
 =
pc
+4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

682 i‡(
	`IsC⁄°
(
_Rs_
)) {

683 i‡((
s32
)
iRegs
[
_Rs_
].
k
 >= 0) {

684 
	`iBønch
(
bpc
,0);

685 
pc
+=4;

692 
u32
 
rs
=
	`RódReg
(
_Rs_
);

693 #i‚de‡
REC_USE_2ND_PHASE


695 i‡(
bpc
 =
pcöô
 && 
ªc_ölo›
<
REC_MAX_LOOPS
 && 
	`pˇbs
(
pc
,bpc)<
REC_MAX_TO_TEST
 && 
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
) {

696 
ªc_ölo›
++;

697 
j32På
[4] = 
	`JGEZ32
(
rs
);

698 
	`iLo›
();

699 
	`¨mSëJ32
(
j32På
[4]);

700 
	`iBønch
(
bpc
, 0);

704 
u32
 
pcback
=
pc
;

705 i‡(
ªc_pha£
) {

706 
j32På
[4] = 
	`JLTZ32
(
rs
);

708 
	`iBønch
(
bpc
, 1);

709 i‡(
ªc_pha£
) {

710 
	`¨mSëJ32
(
j32På
[4]);

713 
pc
=
pcback
-4;

714 
bønch
=0;

716 
pc
 += 4;

717 
	}
}

	@src/recompiler/arm/rec_gte.h

21 
	~"gã.h
"

23 #ifde‡
DEBUG_CPU


24 
	#dbgã
(
«me
Ë
	`dbg
("\t\åec"Çame)

	)

26 
	#dbgã
(
«me
)

	)

31 
	gfunc_GTE_upd©eMACs_lm0_±r
=0;

32 
	gfunc_GTE_upd©eMACs_lm1_±r
=0;

33 
	gfunc_GTE_upd©eMACs_lm0_shi·12_±r
=0;

34 
	gfunc_GTE_upd©eMACs_lm1_shi·12_±r
=0;

35 
	gfunc_GTE_upd©eMAC3_lm0_Êag_±r
=0;

36 #ifde‡
USE_GTE_FLAG


37 
	#ªcGTE_upd©eMACs
(
LM
,
SHIFT
Ë
	`ªcGTE_upd©eMACs_Êag
(LM,SHIFT,1)

	)

38 
	#func_GTE_upd©eMACs_lm0_Êag_±r
 
func_GTE_upd©eMACs_lm0_±r


	)

39 
	#func_GTE_upd©eMACs_lm1_Êag_±r
 
func_GTE_upd©eMACs_lm1_±r


	)

41 
	#ªcGTE_upd©eMACs
(
LM
,
SHIFT
Ë
	`ªcGTE_upd©eMACs_Êag
(LM,SHIFT,0)

	)

42 
	gfunc_GTE_upd©eMACs_lm0_Êag_±r
=0;

43 
	gfunc_GTE_upd©eMACs_lm1_Êag_±r
=0;

47 
	#M≠CålGã
(
CREG
,
GREG
Ë
	`M≠Gã
((CREG),(GREG))

	)

48 
	#M≠D©aGã
(
CREG
,
GREG
Ë
	`M≠Gã
((CREG),(GREG)+32)

	)

49 
	#GëGãCålM≠≥d
(
GREG
Ë
	`GëGãM≠≥d
((GREG))

	)

50 
	#GëGãD©aM≠≥d
(
GREG
Ë
	`GëGãM≠≥d
((GREG)+32)

	)

51 
	#Unm≠CålGã
(
GREG
Ë
	`Unm≠Gã
((GREG))

	)

52 
	#Unm≠D©aGã
(
GREG
Ë
	`Unm≠Gã
((GREG)+32)

	)

53 
	#PuŒGãCålM≠≥d
(
CREG
, 
GREG
, 
HREG
Ë
	`PuŒGãM≠≥d
((CREG), (GREG), (HREG))

	)

54 
	#PuŒGãD©aM≠≥d
(
CREG
, 
GREG
, 
HREG
Ë
	`PuŒGãM≠≥d
((CREG), (GREG)+32, (HREG))

	)

56 #i‡(!
deföed
(
gã_√w
Ë|| !deföed(
REC_USE_GTECALC_INLINE
)Ë&& deföed(
REC_USE_GTE_MAP_REGS
)

57 #unde‡
REC_USE_GTE_MAP_REGS


60 #ifde‡
REC_USE_GTE_MAP_REGS


62 
u8
 
	giM≠GãReg
[64];

64 
u32
 
	$GëGãM≠≥d
(
u32
 
gã_ªg
) {

65  
iM≠GãReg
[
gã_ªg
];

66 
	}
}

68 
u32
 
	$GëGãM≠≥dReg
(
u32
 
˝u_ªg
) {

69 
u32
 
i
;

70 
i
=0;i<64;i++) {

71 i‡(
iM≠GãReg
[
i
] =
˝u_ªg
)

72  
i
;

75 
	}
}

77 
	$M≠Gã
(
u32
 
˝u_ªg
, u32 
gã_ªg
) {

78 
iM≠GãReg
[
gã_ªg
]=
˝u_ªg
;

79 
	}
}

81 
	$Unm≠Gã
(
u32
 
gã_ªg
) {

82 
iM≠GãReg
[
gã_ªg
]=0;

83 
	}
}

85 
	$Unm≠GãReg
(
u32
 
˝u_ªg
) {

86 
u32
 
i
;

87 
i
=0;i<64;i++) {

88 i‡(
iM≠GãReg
[
i
]==
˝u_ªg
)

89 
iM≠GãReg
[
i
]=0;

91 
	}
}

93 
	$Re£tM≠GãRegs
() {

94 
u32
 
i
;

95 
i
=0;i<64;i++)

96 
iM≠GãReg
[
i
]=0;

97 
	}
}

99 
	$Unm≠D©aGãMACs
() {

100 
	`Unm≠D©aGã
(9);

101 
	`Unm≠D©aGã
(10);

102 
	`Unm≠D©aGã
(11);

103 
	`Unm≠D©aGã
(25);

104 
	`Unm≠D©aGã
(26);

105 
	`Unm≠D©aGã
(27);

106 
	}
}

108 
	$Unm≠D©aGãCODEs
() {

109 
u32
 
rm≠1
=
	`GëGãD©aM≠≥d
(21);

110 
u32
 
rm≠2
=
	`GëGãD©aM≠≥d
(22);

111 i‡(
rm≠1
 &&Ñm≠1!=
rm≠2
) {

112 
	`M≠D©aGã
(
rm≠1
,20);

114 
	`Unm≠D©aGã
(20);

116 i‡(
rm≠2
 && 
rm≠1
!=rmap2) {

117 
	`M≠D©aGã
(
rm≠2
,21);

119 
	`Unm≠D©aGã
(21);

121 
	`Unm≠D©aGã
(22);

122 
	}
}

124 
	$PuŒGãM≠≥d
(
u32
 
˝u_ªg
, u32 
gã_ªg
, u32 
ho°_ªg
) {

125 i‡(
˝u_ªg
 && (
	`IsC⁄°
(˝u_ªg)||
	`IsM≠≥d
(cpu_reg))) {

126 i‡(
	`IsC⁄°
(
˝u_ªg
)) {

127 
	`MOV32ItoR
(
ho°_ªg
,
iRegs
[
˝u_ªg
].
k
);

129 
	`MOV32RtoR
(
ho°_ªg
,
iRegs
[
˝u_ªg
].
ªg
);

132 i‡(
˝u_ªg
) {

133 
	`MOV32MtoR_ªgs
(
ho°_ªg
,(
u32
)&
psxRegs
.
GPR
.
r
[
˝u_ªg
]);

135 i‡(
gã_ªg
<32) {

136 
	`MOV32MtoR_ªgs
(
ho°_ªg
,(
u32
)&
psxRegs
.
CP2C
.
r
[
gã_ªg
]);

138 
	`MOV32MtoR_ªgs
(
ho°_ªg
,(
u32
)&
psxRegs
.
CP2D
.
r
[
gã_ªg
-32]);

142 
	}
}

145 
u32
 
	$GëGãM≠≥d
(
u32
 
gã_ªg
Ë{  0; 
	}
}

146 
u32
 
	$GëGãM≠≥dReg
(
u32
 
˝u_ªg
Ë{  0xff; 
	}
}

147 
	$M≠Gã
(
u32
 
˝u_ªg
, u32 
gã_ªg
Ë{ 
	}
}

148 
	$Unm≠Gã
(
u32
 
gã_ªg
Ë{ 
	}
}

149 
	$Unm≠GãReg
(
u32
 
˝u_ªg
Ë{ 
	}
}

150 
	$Re£tM≠GãRegs
(Ë{ 
	}
}

151 
	$Unm≠D©aGãMACs
(Ë{ 
	}
}

152 
	$Unm≠D©aGãCODEs
(Ë{ 
	}
}

153 
	$PuŒGãM≠≥d
(
u32
 
˝u_ªg
, u32 
gã_ªg
, u32 
ho°_ªg
) {

154 i‡(
gã_ªg
<32) {

155 
	`MOV32MtoR_ªgs
(
ho°_ªg
,(
u32
)&
psxRegs
.
CP2C
.
r
[
gã_ªg
]);

157 
	`MOV32MtoR_ªgs
(
ho°_ªg
,(
u32
)&
psxRegs
.
CP2D
.
r
[
gã_ªg
-32]);

159 
	}
}

162 #i‡!
deföed
(
gã_√w
Ë|| !deföed(
REC_USE_GTE_FUNCS
Ë|| !deföed(
REC_USE_GTECALC_INLINE
Ë|| deföed(
USE_GTE_FLAG
)

163 #ifde‡
REC_USE_GTE_DELAY_CALC


164 #unde‡
REC_USE_GTE_DELAY_CALC


166 
	$Upd©eGãDñay
(
˛ór
){ 
	}
}

168 #ifde‡
REC_USE_GTE_DELAY_CALC


169 
	$Upd©eGãDñay
(
˛ór
){

170 i‡(
func_GTE_dñay_±r
) {

171 
hﬁded
=(
HWRegs
[3].
°©e
==
ST_HOLD
);

172 i‡(!
hﬁded
)

173 
	`iLockReg
(3);

174 
	`CALLFunc
(
func_GTE_dñay_±r
);

175 i‡(
˛ór
)

176 
func_GTE_dñay_±r
=0;

177 i‡(!
hﬁded
)

178 
	`iU∆ockReg
(3);

179 
r2_is_dúty
=1;

181 
	}
}

183 
	$Upd©eGãDñay
(
˛ór
){ 
	}
}

187 #ifde‡
gã_√w


188 
	#CP2_FUNC
(
f
,
«me
,
cy˛e
) \

189 
ªc
##
	`f
() { \

190 i‡(
autobüs
Ë
cy˛es_≥ndög
+=
cy˛e
; \

191 i‡(
ªc_pha£
) { \

193 
	`dbgã
(
«me
) \

194 
	`iLockReg
(3); \

195 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
, (u32)psxRegs.code); \

196 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
); \

197 
	`CALLFunc
((
u32
)
_gã
##
f
); \

198 
	`iU∆ockReg
(3); \

199 
r2_is_dúty
 = 1; \

202 }

	)

204 
	#CP2_FUNCNC
(
f
,
«me
,
cy˛e
) \

205 
ªc
##
	`f
() { \

206 i‡(
autobüs
Ë
cy˛es_≥ndög
+=
cy˛e
; \

207 i‡(
ªc_pha£
) { \

209 
	`dbgã
(
«me
) \

210 
	`iLockReg
(3); \

211 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
); \

212 
	`CALLFunc
((
u32
)
_gã
##
f
); \

213 
	`iU∆ockReg
(3); \

214 
r2_is_dúty
 = 1; \

217 }

	)

219 
	#CP2_FUNC
(
f
,
«me
,
cy˛e
) \

220 
gã
##
	`f
(); \

221 
ªc
##
	`f
() { \

222 i‡(
autobüs
Ë
cy˛es_≥ndög
+=
cy˛e
; \

223 i‡(
ªc_pha£
) { \

225 
	`dbgã
(
«me
) \

226 
	`iLockReg
(3); \

227 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
, (u32)psxRegs.code); \

228 
	`CALLFunc
((
u32
)
gã
##
f
); \

229 
	`iU∆ockReg
(3); \

230 
r2_is_dúty
 = 1; \

233 }

	)

235 
	#CP2_FUNCNC
(
f
,
«me
,
cy˛e
) \

236 
gã
##
	`f
(); \

237 
ªc
##
	`f
() { \

238 i‡(
autobüs
Ë
cy˛es_≥ndög
+=
cy˛e
; \

239 i‡(
ªc_pha£
) { \

241 
	`dbgã
(
«me
) \

242 
	`iLockReg
(3); \

243 
	`CALLFunc
((
u32
)
gã
##
f
); \

244 
	`iU∆ockReg
(3); \

245 
r2_is_dúty
 = 1; \

248 }

	)

251 
	gfunc_GTE_MFC2_29_±r
=0;

252 
ªcGTE_MFC2_29
(
u32
 
π
);

254 
	$ªcMFC2
() {

255 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

256 i‡(!
ªc_pha£
) {

257 
	`WrôeReg
(
_Rt_
);

258 #ifde‡
REC_USE_GTECALC_INLINE


259 i‡(
_Rd_
==30 || _Rd_==28) {

260 
	`M≠C⁄°
(
_Rt_
,0);

265 #ifde‡
DEBUG_CPU


266 
	`dbgf
("\t\åecMFC2 R%i=CP2D%i\n",
_Rt_
,
_Rd_
);

268 #i‚de‡
gã_√w


269 i‡(
_Rt_
) {

270 
	`iLockReg
(3);

271 
	`MOV32ItoR
(
HOST_r0
,
_Rd_
);

272 
	`CALLFunc
((
u32
)
gãˇlcMFC2
);

273 
	`iU∆ockReg
(3);

274 
r2_is_dúty
=1;

275 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

276 
	`MOV32RtoR
(
π
,
HOST_r0
);

279 #ifde‡
REC_USE_GTECALC_INLINE


280 i‡(!
_Rt_
) ;

281 #ifde‡
REC_USE_GTE_DELAY_CALC


282 #ifde‡
USE_OLD_GTE_WITHOUT_PATCH


283 i‡(
_Rd_
==29 || _Rd_==9 || _Rd_==10 || _Rd_==11) {

285 i‡(
_Rd_
==29 || _Rd_==28 || _Rd_==9 || _Rd_==10 || _Rd_==11) {

287 
	`iLockReg
(3);

290 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

291 
	`Unm≠GãReg
(
_Rt_
);

292 
_Rd_
) {

296 
	`Upd©eGãDñay
(1);

301 
	`MOV16sMtoR_ªgs
(
π
,(
u32
)&
psxRegs
.
CP2D
.
p
[
_Rd_
].
sw
.
l
);

302 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[
_Rd_
],
π
);

303 
	`Unm≠D©aGã
(
_Rd_
);

310 
	`MOV16MtoR_ªgs
(
π
,(
u32
)&
psxRegs
.
CP2D
.
p
[
_Rd_
].
sw
.
l
);

311 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[
_Rd_
],
π
);

312 
	`Unm≠D©aGã
(
_Rd_
);

316 #ifde‡
REC_USE_GTE_MAP_REGS


317 
u32
 
rm≠
=
	`GëGãD©aM≠≥d
(14);

318 i‡(
rm≠
 &&Ñm≠!=
π
) {

319 
	`MOV32RtoR
(
π
,
rm≠
);

324 
	`MOV32MtoR_ªgs
(
π
,(
u32
)&
psxRegs
.
CP2D
.
r
[14]);

326 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[
_Rd_
],
π
);

327 
	`Unm≠D©aGã
(
_Rd_
);

331 #ifde‡
USE_OLD_GTE_WITHOUT_PATCH


333 
	`M≠C⁄°
(
_Rt_
,0);

337 
	`Upd©eGãDñay
(1);

338 #ifde‡
REC_USE_GTE_FUNCS


339 
	`CALLFunc
(
func_GTE_MFC2_29_±r
);

340 
	`MOV32RtoR
(
π
,
HOST_r0
);

342 
	`ªcGTE_MFC2_29
(
π
);

344 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[
_Rd_
],
π
);

345 
	`Unm≠D©aGã
(
_Rd_
);

349 #ifde‡
REC_USE_GTE_MAP_REGS


350 
u32
 
rm≠
=
	`GëGãD©aM≠≥d
(
_Rd_
);

351 #ifde‡
REC_USE_GTE_DELAY_CALC


352 #ifde‡
USE_OLD_GTE_WITHOUT_PATCH


353 i‡(
rm≠
 && (!(
_Rd_
==29 || _Rd_==9 || _Rd_==10 || _Rd_==11)Ë&& (
	`IsC⁄°
‘m≠Ë|| 
	`IsM≠≥d
(rmap)) ) {

355 i‡(
rm≠
 && (!(
_Rd_
==29 || _Rd_==28 || _Rd_==9 || _Rd_==10 || _Rd_==11)Ë&& (
	`IsC⁄°
‘m≠Ë|| 
	`IsM≠≥d
(rmap)) ) {

358 i‡(
rm≠
 && (
	`IsC⁄°
‘m≠Ë|| 
	`IsM≠≥d
(rmap)) ) {

360 i‡(
	`IsC⁄°
(
rm≠
)) {

361 
	`MOV32ItoR
(
π
,
iRegs
[
rm≠
].
k
);

363 
	`MOV32RtoR
(
π
,
iRegs
[
rm≠
].
ªg
);

369 
	`MOV32MtoR_ªgs
(
π
,(
u32
)&
psxRegs
.
CP2D
.
r
[
_Rd_
]);

373 #ifde‡
USE_OLD_GTE_WITHOUT_PATCH


374 i‡(
_Rt_
!=28 && _Rt_!=30)

377 
	`M≠D©aGã
(
_Rt_
,
_Rd_
);

379 #ifde‡
REC_USE_GTE_DELAY_CALC


380 #ifde‡
USE_OLD_GTE_WITHOUT_PATCH


381 i‡(
_Rd_
==29 || _Rd_==9 || _Rd_==10 || _Rd_==11) {

383 i‡(
_Rd_
==29 || _Rd_==28 || _Rd_==9 || _Rd_==10 || _Rd_==11) {

385 
	`iU∆ockReg
(3);

390 i‡(
_Rt_
) {

391 
	`iLockReg
(3);

392 
	`MOV32ItoR
(
HOST_r0
,
_Rd_
);

393 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

394 
	`CALLFunc
((
u32
)
_gãˇlcMFC2
);

395 
	`iU∆ockReg
(3);

396 
r2_is_dúty
=1;

397 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

398 
	`MOV32RtoR
(
π
,
HOST_r0
);

403 
	}
}

405 
	gfunc_GTE_MTC2_15_±r
=0;

406 
	gfunc_GTE_MTC2_28_±r
=0;

407 
ªcGTE_MTC2_15
(
u32
 
π
);

408 
ªcGTE_MTC2_28
(
u32
 
π
);

410 
	$ªcMTC2
() {

411 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

412 i‡(!
ªc_pha£
) {

413 i‡(!
	`IsC⁄°
(
_Rt_
)) {

414 
	`RódReg
(
_Rt_
);

418 #ifde‡
DEBUG_CPU


419 
	`dbgf
("\t\åecMTC2 CP2D%i=R%i\n",
_Rd_
,
_Rt_
);

422 #i‚de‡
gã_√w


423 
	`iLockReg
(3);

424 i‡(
	`IsC⁄°
(
_Rt_
)) {

425 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rt_
].
k
);

428 
u32
 
π
=
	`RódReg
(
_Rt_
);

429 
	`MOV32RtoR
(
HOST_r0
,
π
);

431 
	`MOV32ItoR
(
HOST_r1
,
_Rd_
);

432 
	`CALLFunc
((
u32
)
gãˇlcMTC2
);

433 
	`iU∆ockReg
(3);

434 
r2_is_dúty
=1;

436 #ifde‡
REC_USE_GTECALC_INLINE


437 
π
;

438 #ifde‡
REC_USE_GTE_DELAY_CALC


439 i‡(
_Rd_
==11) {

440 
	`iLockReg
(3);

443 i‡(
	`IsC⁄°
(
_Rt_
)) {

444 
	`MOV32ItoR
(
HOST_r1
,
iRegs
[
_Rt_
].
k
);

445 
π
=
HOST_r1
;

447 
π
=
	`RódReg
(
_Rt_
);

449 
_Rd_
) {

451 #ifde‡
REC_USE_GTE_FUNCS


452 i‡(
π
!=
HOST_r1
) {

453 
	`MOV32RtoR
(
HOST_r1
,
π
);

455 
	`CALLFunc
(
func_GTE_MTC2_15_±r
);

457 
	`ªcGTE_MTC2_15
(
π
);

459 #ifde‡
REC_USE_GTE_MAP_REGS


461 
u32
 
rm≠1
=
	`GëGãD©aM≠≥d
(13);

462 
u32
 
rm≠2
=
	`GëGãD©aM≠≥d
(14);

463 i‡(
rm≠1
 &&Ñm≠1!=
_Rt_
 &&Ñm≠1!=
rm≠2
) {

464 
	`M≠D©aGã
(
rm≠1
,12);

466 
	`Unm≠D©aGã
(12);

468 i‡(
rm≠2
 &&Ñm≠2!=
_Rt_
 && 
rm≠1
!=rmap2) {

469 
	`M≠D©aGã
(
rm≠2
,13);

471 
	`Unm≠D©aGã
(13);

473 
	`M≠D©aGã
(
_Rt_
,14);

474 
	`M≠D©aGã
(
_Rt_
,15);

479 
func_GTE_dñay_±r
=0;

480 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[28],
π
);

481 #ifde‡
REC_USE_GTE_FUNCS


482 i‡(
π
!=
HOST_r1
) {

483 
	`MOV32RtoR
(
HOST_r1
,
π
);

485 
	`CALLFunc
(
func_GTE_MTC2_28_±r
);

487 
	`ªcGTE_MTC2_28
(
π
);

489 #ifde‡
REC_USE_GTE_MAP_REGS


490 
	`M≠D©aGã
(
_Rt_
,28);

491 
	`Unm≠D©aGã
(9);

492 
	`Unm≠D©aGã
(10);

493 
	`Unm≠D©aGã
(11);

497 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[30],
π
);

498 
	`wrôe32
(
	`CLZ
(
HOST_r0
,
π
));

499 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[31],
HOST_r0
);

500 #ifde‡
REC_USE_GTE_MAP_REGS


501 
	`Unm≠D©aGã
(30);

504 #ifde‡
USE_OLD_GTE_WITHOUT_PATCH


516 
	`Upd©eGãDñay
(1);

518 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[
_Rd_
],
π
);

519 #ifde‡
REC_USE_GTE_MAP_REGS


520 
	`M≠D©aGã
(
_Rt_
,
_Rd_
);

523 #ifde‡
REC_USE_GTE_DELAY_CALC


524 i‡(
_Rd_
==11) {

525 
	`iU∆ockReg
(3);

529 
	`iLockReg
(3);

530 i‡(
	`IsC⁄°
(
_Rt_
)) {

531 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rt_
].
k
);

533 
u32
 
π
=
	`RódReg
(
_Rt_
);

534 
	`MOV32RtoR
(
HOST_r0
,
π
);

536 
	`MOV32ItoR
(
HOST_r1
,
_Rd_
);

537 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

538 
	`CALLFunc
((
u32
)
_gãˇlcMTC2
);

539 
	`iU∆ockReg
(3);

540 
r2_is_dúty
=1;

543 
	}
}

545 
	$ªcCFC2
() {

546 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

547 i‡(!
ªc_pha£
) {

548 
	`WrôeReg
(
_Rt_
);

551 #ifde‡
DEBUG_CPU


552 
	`dbg
("\t\trecCFC2");

555 i‡(
_Rt_
) {

556 i‡(
_Rd_
==31) {

557 #i‡
	`deföed
(
REC_USE_GTE_DELAY_CALC
Ë&& deföed(
gã_√w
Ë&& deföed(
REC_USE_GTE_FUNCS
Ë&& deföed(
REC_USE_GTECALC_INLINE
)

558 #ifde‡
USE_GTE_FLAG


559 
	`Upd©eGãDñay
(1);

561 i‡((
func_GTE_dñay_±r
==
func_GTE_upd©eMAC3_lm0_Êag_±r
Ë|| (func_GTE_dñay_±r==
func_GTE_upd©eMACs_lm0_Êag_±r
Ë|| (func_GTE_dñay_±r==
func_GTE_upd©eMACs_lm1_Êag_±r
)) {

562 
	`Upd©eGãDñay
(1);

567 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

568 
	`MOV32MtoR_ªgs
(
π
,&
psxRegs
.
CP2C
.
r
[
_Rd_
]);

569 #ifde‡
REC_USE_GTE_MAP_REGS


570 
	`Unm≠GãReg
(
_Rt_
);

571 
	`M≠CålGã
(
_Rt_
,
_Rd_
);

574 
	}
}

576 
	$ªcCTC2
() {

577 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

578 i‡(!
ªc_pha£
) {

579 i‡(!
	`IsC⁄°
(
_Rt_
)) {

580 
	`RódReg
(
_Rt_
);

584 #ifde‡
DEBUG_CPU


585 
	`dbg
("\t\trecCTC2");

588 #i‚de‡
gã_√w


589 
	`iLockReg
(3);

590 i‡(
	`IsC⁄°
(
_Rt_
)) {

591 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rt_
].
k
);

594 
u32
 
π
=
	`RódReg
(
_Rt_
);

595 
	`MOV32RtoR
(
HOST_r0
,
π
);

597 
	`MOV32ItoR
(
HOST_r1
,
_Rd_
);

598 
	`CALLFunc
((
u32
)
gãˇlcCTC2
);

599 
	`iU∆ockReg
(3);

600 
r2_is_dúty
=1;

602 #ifde‡
REC_USE_GTECALC_INLINE


603 i‡(
	`IsC⁄°
(
_Rt_
)) {

604 
u32
 
vÆue
=
iRegs
[
_Rt_
].
k
;

605 
_Rd_
) {

613 
vÆue
 = (
s32
)(
s16
)value;

616 #i‡
	`deföed
(
REC_USE_GTE_DELAY_CALC
Ë&& deföed(
gã_√w
Ë&& deföed(
REC_USE_GTE_FUNCS
Ë&& deföed(
REC_USE_GTECALC_INLINE
)

617 #ifde‡
USE_GTE_FLAG


618 
	`Upd©eGãDñay
(1);

620 i‡((
func_GTE_dñay_±r
==
func_GTE_upd©eMAC3_lm0_Êag_±r
Ë|| (func_GTE_dñay_±r==
func_GTE_upd©eMACs_lm0_Êag_±r
Ë|| (func_GTE_dñay_±r==
func_GTE_upd©eMACs_lm1_Êag_±r
)) {

621 
	`Upd©eGãDñay
(1);

625 
vÆue
 = value & 0x7ffff000;

626 i‡(
vÆue
 & 0x7f87e000) value |= 0x80000000;

629 
	`MOV32ItoM_ªgs
(&
psxRegs
.
CP2C
.
r
[
_Rd_
],
vÆue
);

632 #ifde‡
REC_USE_GTE_DELAY_CALC


633 i‡(
_Rd_
==31) {

634 
	`iLockReg
(3);

637 
_Rd_
) {

645 
	`MOV32RtoR
(
HOST_r1
,
	`RódReg
(
_Rt_
));

646 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r1
, HOST_r1, 16) );

647 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
HOST_r1
, HOST_r1, 16) );

648 
	`MOV32RtoM_ªgs
(&
psxRegs
.
CP2C
.
r
[
_Rd_
],
HOST_r1
);

651 
	`MOV32RtoR
(
HOST_r1
,
	`RódReg
(
_Rt_
));

652 #i‡
	`deföed
(
REC_USE_GTE_DELAY_CALC
Ë&& deföed(
gã_√w
Ë&& deföed(
REC_USE_GTE_FUNCS
Ë&& deföed(
REC_USE_GTECALC_INLINE
)

653 #ifde‡
USE_GTE_FLAG


654 
	`Upd©eGãDñay
(1);

656 i‡((
func_GTE_dñay_±r
==
func_GTE_upd©eMAC3_lm0_Êag_±r
Ë|| (func_GTE_dñay_±r==
func_GTE_upd©eMACs_lm0_Êag_±r
Ë|| (func_GTE_dñay_±r==
func_GTE_upd©eMACs_lm1_Êag_±r
)) {

657 
	`Upd©eGãDñay
(1);

661 
	`MOV32ItoR
(
HOST_r0
,0x7ffff000);

662 
	`AND32
(
HOST_r1
,HOST_r1,
HOST_r0
);

663 
	`MOV32ItoR
(
HOST_r0
,0x7f87e000);

664 
	`AND32
(
HOST_r2
,
HOST_r0
,
HOST_r1
);

665 
	`wrôe32
(
	`CMP_IMM
(
HOST_r2
,0,0));

666 
	`wrôe32
(
	`ORRNE_IMM
(
HOST_r1
,HOST_r1,2,2));

667 
	`MOV32RtoM_ªgs
(&
psxRegs
.
CP2C
.
r
[
_Rd_
],
HOST_r1
);

668 
r2_is_dúty
=1;

672 
u32
 
π
=
	`RódReg
(
_Rt_
);

673 
	`MOV32RtoM_ªgs
(&
psxRegs
.
CP2C
.
r
[
_Rd_
], 
π
);

676 #ifde‡
REC_USE_GTE_DELAY_CALC


677 i‡(
_Rd_
==31) {

678 
	`iU∆ockReg
(3);

683 #ifde‡
REC_USE_GTE_MAP_REGS


684 i‡(
_Rd_
!=31) {

685 
	`M≠CålGã
(
_Rt_
,
_Rd_
);

689 
	`iLockReg
(3);

690 i‡(
	`IsC⁄°
(
_Rt_
)) {

691 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rt_
].
k
);

693 
u32
 
π
=
	`RódReg
(
_Rt_
);

694 
	`MOV32RtoR
(
HOST_r0
,
π
);

696 
	`MOV32ItoR
(
HOST_r1
,
_Rd_
);

697 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

698 
	`CALLFunc
((
u32
)
_gãˇlcCTC2
);

699 
	`iU∆ockReg
(3);

700 
r2_is_dúty
=1;

703 
	}
}

705 
	$ªcLWC2
()

707 i‡(!
ªc_pha£
) {

708 i‡(
autobüs
Ë
cy˛es_≥ndög
+=3;

709 i‡(!
	`IsC⁄°
(
_Rs_
)) {

710 
	`RódReg
(
_Rs_
);

714 #ifde‡
DEBUG_CPU


715 
	`dbg
("\t\trecLWC2");

717 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

719 i‡(
_Rt_
==9 || _Rt_==10 || _Rt_==11 || _Rt_==25 || _Rt_==26 || _Rt_==27) {

720 
	`Upd©eGãDñay
(1);

722 i‡(
	`IsC⁄°
(
_Rs_
)) {

723 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

724 
t
 = 
addr
 >> 16;

725 
∑ßdo
=0;

727 i‡((
t
 & 0xfff0) == 0xbfc0) {

728 
	`MOV32ItoR
(
HOST_r0
, 
	`psxRu32
(
addr
));

729 
∑ßdo
=1;

731 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

732 
	`MOV32MtoR
(
HOST_r0
, (
u32
)&
psxM
[
addr
 & 0x1fffff]);

733 
∑ßdo
=1;

735 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

736 
	`MOV32MtoR
(
HOST_r0
, (
u32
)&
psxH
[
addr
 & 0xfff]);

737 
∑ßdo
=1;

739 i‡(
t
 == 0x1f80) {

740 
addr
) {

750 
	`MOV32MtoR
(
HOST_r0
, (
u32
)&
psxH
[
addr
 & 0xffff]);

751 
∑ßdo
=1;

754 
	`iLockReg
(3);

755 
	`CALLFunc
((
u32
)&
GPU_ªadD©a
);

756 
	`iU∆ockReg
(3);

757 
r2_is_dúty
=1;

758 
∑ßdo
=1;

761 
	`iLockReg
(3);

762 
	`CALLFunc
((
u32
)&
GPU_ªadSètus
);

763 
	`iU∆ockReg
(3);

764 
r2_is_dúty
=1;

765 
∑ßdo
=1;

768 
	`MOV32MtoR
(
HOST_r0
, (
u32
)&
psxH
[
addr
 & 0xfff]);

771 i‡((!
∑ßdo
)&&(
t
 =0x1f80 && 
addr
 >= 0x1f801000)) {

772 
	`iLockReg
(3);

773 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

774 
	`iPutCy˛esAdd
(0);

775 
	`MOV32ItoR
(
HOST_r0
, 
addr
);

776 
	`CALLFunc
((
u32
)
psxHwRód32
);

777 
	`iU∆ockReg
(3);

778 
r2_is_dúty
=1;

781 
	`iLockReg
(3);

782 
	`iPushOfB
();

783 
	`PSXMEMREAD32
(
HOST_r0
);

784 
	`iU∆ockReg
(3);

785 
r2_is_dúty
=1;

787 #i‚de‡
gã_√w


788 
	`iLockReg
(3);

789 
	`MOV32ItoR
(
HOST_r1
, 
_Rt_
);

790 
	`CALLFunc
((
u32
)
gãˇlcMTC2
);

791 
	`iU∆ockReg
(3);

792 
r2_is_dúty
=1;

794 #ifde‡
REC_USE_GTECALC_INLINE


795 
π
=
HOST_r0
;

796 
_Rt_
) {

798 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
CP2D
.
r
[13]);

799 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[12],
HOST_r0
);

800 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
CP2D
.
r
[14]);

801 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[13],
HOST_r0
);

802 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[14],
π
);

803 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[15],
π
);

804 #ifde‡
REC_USE_GTE_MAP_REGS


806 
u32
 
rm≠1
=
	`GëGãD©aM≠≥d
(13);

807 
u32
 
rm≠2
=
	`GëGãD©aM≠≥d
(14);

808 i‡(
rm≠1
 &&Ñm≠1!=
rm≠2
) {

809 
	`M≠D©aGã
(
rm≠1
,12);

811 
	`Unm≠D©aGã
(12);

813 i‡(
rm≠2
 && 
rm≠1
!=rmap2) {

814 
	`M≠D©aGã
(
rm≠2
,13);

816 
	`Unm≠D©aGã
(13);

818 
	`Unm≠D©aGã
(14);

819 
	`Unm≠D©aGã
(15);

824 
func_GTE_dñay_±r
=0;

825 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[28],
π
);

826 
	`MOV32RtoR
(
HOST_r0
,
π
);

827 
	`AND32ItoR
(
HOST_r0
,0x1f);

828 
	`SHLI32
(
HOST_r0
,HOST_r0,7);

829 
	`MOV16RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[9].
sw
.
l
,
HOST_r0
);

830 
	`MOV32RtoR
(
HOST_r0
,
π
);

831 
	`AND32ItoR
(
HOST_r0
,0x3e0);

832 
	`SHLI32
(
HOST_r0
,HOST_r0,2);

833 
	`MOV16RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[10].
sw
.
l
,
HOST_r0
);

834 
	`MOV32RtoR
(
HOST_r0
,
π
);

835 
	`AND32ItoR
(
HOST_r0
,0x7c00);

836 
	`SHRI32
(
HOST_r0
,HOST_r0,3);

837 
	`MOV16RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[11].
sw
.
l
,
HOST_r0
);

838 #ifde‡
REC_USE_GTE_MAP_REGS


839 
	`Unm≠D©aGã
(9);

840 
	`Unm≠D©aGã
(10);

841 
	`Unm≠D©aGã
(11);

842 
	`Unm≠D©aGã
(28);

847 
	`MOV32RtoR
(
HOST_r0
,
π
);

848 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[30],
HOST_r0
);

849 
	`wrôe32
(0xe16f0f10);

850 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[31],
HOST_r0
);

851 #ifde‡
REC_USE_GTE_MAP_REGS


852 
	`Unm≠D©aGã
(30);

855 #ifde‡
USE_OLD_GTE_WITHOUT_PATCH


865 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[
_Rt_
],
π
);

866 #ifde‡
REC_USE_GTE_MAP_REGS


867 
	`Unm≠D©aGã
(
_Rt_
);

871 
	`iLockReg
(3);

872 
	`MOV32ItoR
(
HOST_r1
, 
_Rt_
);

873 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

874 
	`CALLFunc
((
u32
)
_gãˇlcMTC2
);

875 
	`iU∆ockReg
(3);

876 
r2_is_dúty
=1;

879 
	}
}

881 
	$ªcSWC2
()

883 i‡(!
ªc_pha£
) {

884 i‡(
autobüs
Ë
cy˛es_≥ndög
+=4;

885 i‡(!
	`IsC⁄°
(
_Rs_
)) {

886 
	`RódReg
(
_Rs_
);

890 #ifde‡
DEBUG_CPU


891 
	`dbg
("\t\trecSWC2");

893 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

895 #i‚de‡
gã_√w


896 
	`iLockReg
(3);

897 
	`MOV32ItoR
(
HOST_r0
,
_Rt_
);

898 
	`CALLFunc
((
u32
)
gãˇlcMFC2
);

899 
	`iU∆ockReg
(3);

900 
r2_is_dúty
=1;

902 #ifde‡
REC_USE_GTECALC_INLINE


903 
u32
 
π
=
HOST_r0
;

904 
_Rt_
) {

908 
	`Upd©eGãDñay
(1);

913 
	`MOV16sMtoR_ªgs
(
π
,(
u32
)&
psxRegs
.
CP2D
.
p
[
_Rt_
].
sw
.
l
);

914 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[
_Rt_
],
π
);

915 
	`Unm≠D©aGã
(
_Rt_
);

922 
	`MOV16MtoR_ªgs
(
π
,(
u32
)&
psxRegs
.
CP2D
.
p
[
_Rt_
].
sw
.
l
);

923 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[
_Rt_
],
π
);

924 
	`Unm≠D©aGã
(
_Rt_
);

928 #ifde‡
REC_USE_GTE_MAP_REGS


929 
u32
 
rm≠
=
	`GëGãD©aM≠≥d
(14);

930 i‡(
rm≠
 &&Ñm≠!=
π
) {

931 
	`MOV32RtoR
(
π
,
rm≠
);

936 
	`MOV32MtoR_ªgs
(
π
,(
u32
)&
psxRegs
.
CP2D
.
r
[14]);

938 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[
_Rt_
],
π
);

939 
	`Unm≠D©aGã
(
_Rt_
);

943 #ifde‡
USE_OLD_GTE_WITHOUT_PATCH


945 
	`MOV32ItoR
(
π
,0);

949 
	`Upd©eGãDñay
(1);

950 #ifde‡
REC_USE_GTE_FUNCS


951 
	`CALLFunc
(
func_GTE_MFC2_29_±r
);

953 
	`ªcGTE_MFC2_29
(
π
);

955 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[
_Rt_
],
π
);

956 
	`Unm≠D©aGã
(
_Rt_
);

960 #ifde‡
REC_USE_GTE_MAP_REGS


961 
u32
 
rm≠
=
	`GëGãD©aM≠≥d
(
_Rt_
);

962 i‡(
rm≠
 && (
	`IsC⁄°
‘m≠Ë|| 
	`IsM≠≥d
(rmap))) {

963 i‡(
	`IsC⁄°
(
rm≠
)) {

964 
	`MOV32ItoR
(
π
,
iRegs
[
rm≠
].
k
);

966 
	`MOV32RtoR
(
π
,
iRegs
[
rm≠
].
ªg
);

972 
	`MOV32MtoR_ªgs
(
π
,(
u32
)&
psxRegs
.
CP2D
.
r
[
_Rt_
]);

977 
	`iLockReg
(3);

978 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

979 
	`MOV32ItoR
(
HOST_r0
,
_Rt_
);

980 
	`CALLFunc
((
u32
)
_gãˇlcMFC2
);

981 
	`iU∆ockReg
(3);

982 
r2_is_dúty
=1;

986 i‡(
	`IsC⁄°
(
_Rs_
)) {

987 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

988 
t
 = 
addr
 >> 16;

990 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

991 
	`MOV32RtoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], 
HOST_r0
);

994 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

995 
	`MOV32RtoM
((
u32
)&
psxH
[
addr
 & 0xfff], 
HOST_r0
);

998 i‡(
t
 == 0x1f80) {

999 
addr
) {

1009 
	`MOV32RtoM
((
u32
)&
psxH
[
addr
 & 0xffff], 
HOST_r0
);

1011 #ifde‡
REC_USE_R2


1012 
	`MOV32ItoR
(
HOST_r2
,0);

1013 
	`MOV32RtoM_ªgs
(&
psxRegs
.
io_cy˛e_cou¡î
,
HOST_r2
);

1014 
r2_is_dúty
=0;

1016 
	`MOV32ItoM_ªgs
(&
psxRegs
.
io_cy˛e_cou¡î
,0);

1021 
	`iLockReg
(3);

1022 
	`CALLFunc
((
u32
)&
GPU_wrôeD©a
);

1023 
	`iU∆ockReg
(3);

1024 
r2_is_dúty
=1;

1028 
	`iLockReg
(3);

1029 
	`CALLFunc
((
u32
)&
GPU_wrôeSètus
);

1030 
	`iU∆ockReg
(3);

1031 
r2_is_dúty
=1;

1035 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

1036 
	`iLockReg
(3);

1037 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

1038 
	`iPutCy˛esAdd
(0);

1039 
	`MOV32RtoR
(
HOST_r1
,
HOST_r0
);

1040 
	`MOV32ItoR
(
HOST_r0
,
addr
);

1041 
	`CALLFunc
((
u32
)
psxHwWrôe32
);

1042 
	`iU∆ockReg
(3);

1043 
r2_is_dúty
=1;

1048 
	`iLockReg
(3);

1049 
	`MOV32RtoR
(
HOST_r1
,
HOST_r0
);

1050 
	`iPushOfB
();

1051 i‡(
C⁄fig
.
HLE
) {

1052 
	`PSXMEMWRITE32
(
HOST_r1
);

1054 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

1055 
	`iPutCy˛esAdd
(0);

1056 
	`CALLFunc
((
u32
)
psxMemWrôe32
);

1058 
	`iU∆ockReg
(3);

1059 
r2_is_dúty
=1;

1060 
	}
}

1062 #ifde‡
gã_√w


1064 
	$ªcGTE_MFC2_29
(
u32
 
π
) {

1065 
	`MOV16sMtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
CP2D
.
p
[9].
sw
.
l
);

1066 
	`SARI32
(
HOST_r1
,HOST_r1,7);

1067 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
, 0x1f, 0));

1068 
	`MOV32ItoR
(
π
,0x1f);

1069 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BGT_FWD
(0));

1070 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
, 0, 0));

1071 
	`wrôe32
(
	`MOVGE_REGS
(
π
,
HOST_r1
));

1072 
	`wrôe32
(
	`MOVLT_IMM
(
π
,0,0));

1073 
	`¨mSëJ32
(
j32På
[1]);

1075 
	`MOV16sMtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
CP2D
.
p
[10].
sw
.
l
);

1076 
	`SARI32
(
HOST_r1
,HOST_r1,7);

1077 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
, 0x1f, 0));

1078 
	`MOV32ItoR
(
HOST_ù
,0x1f);

1079 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BGT_FWD
(0));

1080 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
, 0, 0));

1081 
	`wrôe32
(
	`MOVGE_REGS
(
HOST_ù
,
HOST_r1
));

1082 
	`wrôe32
(
	`MOVLT_IMM
(
HOST_ù
,0,0));

1083 
	`¨mSëJ32
(
j32På
[1]);

1084 
	`SHLI32
(
HOST_r1
,
HOST_ù
,5);

1085 
	`OR32
(
π
,π,
HOST_r1
);

1087 
	`MOV16sMtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
CP2D
.
p
[11].
sw
.
l
);

1088 
	`SARI32
(
HOST_r1
,HOST_r1,7);

1089 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
, 0x1f, 0));

1090 
	`MOV32ItoR
(
HOST_ù
,0x1f);

1091 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BGT_FWD
(0));

1092 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
, 0, 0));

1093 
	`wrôe32
(
	`MOVGE_REGS
(
HOST_ù
,
HOST_r1
));

1094 
	`wrôe32
(
	`MOVLT_IMM
(
HOST_ù
,0,0));

1095 
	`¨mSëJ32
(
j32På
[1]);

1096 
	`SHLI32
(
HOST_r1
,
HOST_ù
,10);

1097 
	`OR32
(
π
,π,
HOST_r1
);

1098 
	}
}

1100 
	$ªcGTE_MTC2_15
(
u32
 
π
) {

1101 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
CP2D
.
r
[13]);

1102 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[12],
HOST_r0
);

1103 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
CP2D
.
r
[14]);

1104 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[13],
HOST_r0
);

1105 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[14],
π
);

1106 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[15],
π
);

1107 
	}
}

1109 
	$ªcGTE_MTC2_28
(
u32
 
π
) {

1110 
	`wrôe32
(
	`AND_IMM
(
HOST_r0
,
π
,0x1f,0));

1111 
	`SHLI32
(
HOST_r0
,HOST_r0,7);

1112 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[9].
sw
.
l
,
HOST_r0
);

1113 
	`wrôe32
(
	`AND_IMM
(
HOST_r0
,
π
,0x3e,0x1c));

1114 
	`SHLI32
(
HOST_r0
,HOST_r0,2);

1115 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[10].
sw
.
l
,
HOST_r0
);

1116 
	`wrôe32
(
	`AND_IMM
(
HOST_r0
,
π
,0x1f,0x16));

1117 
	`SHRI32
(
HOST_r0
,HOST_r0,3);

1118 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[11].
sw
.
l
,
HOST_r0
);

1119 
	}
}

1121 
	$ªcGTE_upd©eMACs_Êag
(
lm
, 
shi·
, 
Êag
) {

1122 #ifde‡
REC_USE_GTE_FUNCS


1123 
	`MOV32RtoR
(
HOST_r0
,
HOST_Ã
);

1125 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
CP2D
.
r
[25]);

1126 i‡(
shi·
) {

1127 
	`SARI32
(
HOST_r1
,HOST_r1,
shi·
);

1129 
	`MOV32ItoR
(
HOST_r2
,0x7fff);

1130 
	`wrôe32
(
	`CMP_REGS
(
HOST_r1
,
HOST_r2
));

1131 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BLE_FWD
(0));

1132 i‡(
Êag
) {

1133 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1135 
	`MOV32RtoR
(
HOST_r1
,
HOST_r2
);

1136 i‡(
Êag
) {

1137 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,1,9));

1138 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1140 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1141 
	`Upd©eImmedüã
(0);

1142 
	`¨mSëJ32
(
j32På
[1]);

1143 i‡(
lm
) {

1144 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
,0,0));

1145 i‡(
Êag
) {

1146 
j32På
[3]=
¨mPå
; 
	`wrôe32
(
	`BGE_FWD
(0));

1147 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1148 
	`MOV32ItoR
(
HOST_r1
,0);

1150 
	`wrôe32
(
	`MOVLT_IMM
(
HOST_r1
,0,0));

1153 
	`wrôe32
(
	`CMN_IMM
(
HOST_r1
,2,0x12));

1154 
j32På
[3]=
¨mPå
; 
	`wrôe32
(
	`BGE_FWD
(0));

1155 i‡(
Êag
) {

1156 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1158 
	`MOV32ItoR
(
HOST_r1
,0xffff8000);

1160 i‡(
Êag
) {

1161 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,1,9));

1162 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1163 
	`¨mSëJ32
(
j32På
[3]);

1165 i‡(!
lm
) {

1166 
	`¨mSëJ32
(
j32På
[3]);

1169 
	`¨mSëJ32
(
j32På
[2]);

1170 
	`MOV16RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[9].
sw
.
l
,
HOST_r1
);

1172 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
CP2D
.
r
[26]);

1173 i‡(
shi·
) {

1174 
	`SARI32
(
HOST_r1
,HOST_r1,
shi·
);

1176 
	`MOV32ItoR
(
HOST_r2
,0x7fff);

1177 
	`wrôe32
(
	`CMP_REGS
(
HOST_r1
,
HOST_r2
));

1178 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BLE_FWD
(0));

1179 i‡(
Êag
) {

1180 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1182 
	`MOV32RtoR
(
HOST_r1
,
HOST_r2
);

1183 i‡(
Êag
) {

1184 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,2,0x2));

1185 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,HOST_r3,2,0xa));

1186 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1188 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1189 
	`Upd©eImmedüã
(0);

1190 
	`¨mSëJ32
(
j32På
[1]);

1191 i‡(
lm
) {

1192 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
,0,0));

1193 i‡(
Êag
) {

1194 
j32På
[3]=
¨mPå
; 
	`wrôe32
(
	`BGE_FWD
(0));

1195 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1196 
	`MOV32ItoR
(
HOST_r1
,0);

1198 
	`wrôe32
(
	`MOVLT_IMM
(
HOST_r1
,0,0));

1201 
	`wrôe32
(
	`CMN_IMM
(
HOST_r1
,2,0x12));

1202 
j32På
[3]=
¨mPå
; 
	`wrôe32
(
	`BGE_FWD
(0));

1203 i‡(
Êag
) {

1204 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1206 
	`MOV32ItoR
(
HOST_r1
,0xffff8000);

1208 i‡(
Êag
) {

1209 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,2,0x2));

1210 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,HOST_r3,2,0xa));

1211 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1212 
	`¨mSëJ32
(
j32På
[3]);

1214 i‡(!
lm
) {

1215 
	`¨mSëJ32
(
j32På
[3]);

1218 
	`¨mSëJ32
(
j32På
[2]);

1219 
	`MOV16RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[10].
sw
.
l
,
HOST_r1
);

1221 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
CP2D
.
r
[27]);

1222 i‡(
shi·
) {

1223 
	`SARI32
(
HOST_r1
,HOST_r1,
shi·
);

1225 
	`MOV32ItoR
(
HOST_r2
,0x7fff);

1226 
	`wrôe32
(
	`CMP_REGS
(
HOST_r1
,
HOST_r2
));

1227 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BLE_FWD
(0));

1228 i‡(
Êag
) {

1229 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1231 
	`MOV32RtoR
(
HOST_r1
,
HOST_r2
);

1232 i‡(
Êag
) {

1233 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,1,0xa));

1234 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1236 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1237 
	`Upd©eImmedüã
(0);

1238 
	`¨mSëJ32
(
j32På
[1]);

1239 i‡(
lm
) {

1240 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
,0,0));

1241 i‡(
Êag
) {

1242 
j32På
[3]=
¨mPå
; 
	`wrôe32
(
	`BGE_FWD
(0));

1243 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1244 
	`MOV32ItoR
(
HOST_r1
,0);

1246 
	`wrôe32
(
	`MOVLT_IMM
(
HOST_r1
,0,0));

1249 
	`wrôe32
(
	`CMN_IMM
(
HOST_r1
,2,0x12));

1250 
j32På
[3]=
¨mPå
; 
	`wrôe32
(
	`BGE_FWD
(0));

1251 i‡(
Êag
) {

1252 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1254 
	`MOV32ItoR
(
HOST_r1
,0xffff8000);

1256 i‡(
Êag
) {

1257 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,1,0xa));

1258 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1259 
	`¨mSëJ32
(
j32På
[3]);

1261 i‡(!
lm
) {

1262 
	`¨mSëJ32
(
j32På
[3]);

1265 
	`¨mSëJ32
(
j32På
[2]);

1266 
	`MOV16RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[11].
sw
.
l
,
HOST_r1
);

1267 #ifde‡
REC_USE_GTE_FUNCS


1268 
	`MOV32RtoR
(
HOST_Ã
,
HOST_r0
);

1270 
	}
}

1272 
	$ªcGTE_upd©eMAC3_Êag
(
lm
, 
shi·
, 
Êag
) {

1273 #ifde‡
REC_USE_GTE_FUNCS


1274 
	`MOV32RtoR
(
HOST_r0
,
HOST_Ã
);

1276 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
CP2D
.
r
[27]);

1277 i‡(
shi·
) {

1278 
	`SARI32
(
HOST_r1
,HOST_r1,
shi·
);

1280 
	`MOV32ItoR
(
HOST_r2
,0x7fff);

1281 
	`wrôe32
(
	`CMP_REGS
(
HOST_r1
,
HOST_r2
));

1282 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BLE_FWD
(0));

1283 i‡(
Êag
) {

1284 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1286 
	`MOV32RtoR
(
HOST_r1
,
HOST_r2
);

1287 i‡(
Êag
) {

1288 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,1,0xa));

1289 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1291 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1292 
	`Upd©eImmedüã
(0);

1293 
	`¨mSëJ32
(
j32På
[1]);

1294 i‡(
lm
) {

1295 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
,0,0));

1296 i‡(
Êag
) {

1297 
j32På
[3]=
¨mPå
; 
	`wrôe32
(
	`BGE_FWD
(0));

1298 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1299 
	`MOV32ItoR
(
HOST_r1
,0);

1301 
	`wrôe32
(
	`MOVLT_IMM
(
HOST_r1
,0,0));

1304 
	`wrôe32
(
	`CMN_IMM
(
HOST_r1
,2,0x12));

1305 
j32På
[3]=
¨mPå
; 
	`wrôe32
(
	`BGE_FWD
(0));

1306 i‡(
Êag
) {

1307 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1309 
	`MOV32ItoR
(
HOST_r1
,0xffff8000);

1311 i‡(
Êag
) {

1312 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,1,0xa));

1313 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1314 
	`¨mSëJ32
(
j32På
[3]);

1316 i‡(!
lm
) {

1317 
	`¨mSëJ32
(
j32På
[3]);

1320 
	`¨mSëJ32
(
j32På
[2]);

1321 
	`MOV16RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[11].
sw
.
l
,
HOST_r1
);

1322 #ifde‡
REC_USE_GTE_FUNCS


1323 
	`MOV32RtoR
(
HOST_Ã
,
HOST_r0
);

1325 
	}
}

1327 
	gfunc_GTE_upd©eCODEs_±r
=0;

1329 
	$ªcGTE_upd©eCODEs
() {

1330 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
CP2D
.
r
[21]);

1331 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[20],
HOST_r0
);

1332 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
CP2D
.
r
[22]);

1333 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[21],
HOST_r0
);

1334 
	`MOV8MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
CP2D
.
p
[6].
b
.
h3
);

1335 
	`MOV8RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[22].
b
.
h3
,
HOST_r0
);

1337 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
CP2D
.
r
[25]);

1338 
	`wrôe32
(
	`MOV_REG_ASR_IMM
(
HOST_r1
, HOST_r1, 4));

1339 
	`MOV32ItoR
(
HOST_r2
,0xff);

1340 
	`wrôe32
(
	`CMP_REGS
(
HOST_r1
,
HOST_r2
));

1341 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BLE_FWD
(0));

1342 #ifde‡
USE_GTE_FLAG


1343 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1345 
	`MOV32RtoR
(
HOST_r1
,
HOST_r2
);

1346 #ifde‡
USE_GTE_FLAG


1347 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,2,0xc));

1348 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1350 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1351 
	`Upd©eImmedüã
(0);

1352 
	`¨mSëJ32
(
j32På
[1]);

1353 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
,0,0));

1354 #ifde‡
USE_GTE_FLAG


1355 
j32På
[3]=
¨mPå
; 
	`wrôe32
(
	`BGE_FWD
(0));

1356 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1357 
	`MOV32ItoR
(
HOST_r1
,0);

1358 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,2,0xc));

1359 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1360 
	`¨mSëJ32
(
j32På
[3]);

1362 
	`wrôe32
(
	`MOVLT_IMM
(
HOST_r1
,0,0));

1364 
	`¨mSëJ32
(
j32På
[2]);

1365 
	`MOV8RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[22].
b
.
l
,
HOST_r1
);

1367 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
CP2D
.
r
[26]);

1368 
	`wrôe32
(
	`MOV_REG_ASR_IMM
(
HOST_r1
, HOST_r1, 4));

1369 
	`MOV32ItoR
(
HOST_r2
,0xff);

1370 
	`wrôe32
(
	`CMP_REGS
(
HOST_r1
,
HOST_r2
));

1371 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BLE_FWD
(0));

1372 #ifde‡
USE_GTE_FLAG


1373 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1375 
	`MOV32RtoR
(
HOST_r1
,
HOST_r2
);

1376 #ifde‡
USE_GTE_FLAG


1377 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,1,0xc));

1378 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1380 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1381 
	`Upd©eImmedüã
(0);

1382 
	`¨mSëJ32
(
j32På
[1]);

1383 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
,0,0));

1384 #ifde‡
USE_GTE_FLAG


1385 
j32På
[3]=
¨mPå
; 
	`wrôe32
(
	`BGE_FWD
(0));

1386 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1387 
	`MOV32ItoR
(
HOST_r1
,0);

1388 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,1,0xc));

1389 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1390 
	`¨mSëJ32
(
j32På
[3]);

1392 
	`wrôe32
(
	`MOVLT_IMM
(
HOST_r1
,0,0));

1394 
	`¨mSëJ32
(
j32På
[2]);

1395 
	`MOV8RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[22].
b
.
h
,
HOST_r1
);

1397 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
CP2D
.
r
[27]);

1398 
	`wrôe32
(
	`MOV_REG_ASR_IMM
(
HOST_r1
, HOST_r1, 4));

1399 
	`MOV32ItoR
(
HOST_r2
,0xff);

1400 
	`wrôe32
(
	`CMP_REGS
(
HOST_r1
,
HOST_r2
));

1401 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BLE_FWD
(0));

1402 #ifde‡
USE_GTE_FLAG


1403 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1405 
	`MOV32RtoR
(
HOST_r1
,
HOST_r2
);

1406 #ifde‡
USE_GTE_FLAG


1407 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,2,0xe));

1408 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1410 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1411 
	`Upd©eImmedüã
(0);

1412 
	`¨mSëJ32
(
j32På
[1]);

1413 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
,0,0));

1414 #ifde‡
USE_GTE_FLAG


1415 
j32På
[3]=
¨mPå
; 
	`wrôe32
(
	`BGE_FWD
(0));

1416 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
CP2C
.
r
[31]);

1417 
	`MOV32ItoR
(
HOST_r1
,0);

1418 
	`wrôe32
(
	`ORR_IMM
(
HOST_r3
,
HOST_ù
,2,0xe));

1419 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31], 
HOST_r3
);

1420 
	`¨mSëJ32
(
j32På
[3]);

1422 
	`wrôe32
(
	`MOVLT_IMM
(
HOST_r1
,0,0));

1424 
	`¨mSëJ32
(
j32På
[2]);

1425 
	`MOV8RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
p
[22].
b
.
h2
,
HOST_r1
);

1426 
	}
}

1428 #ifde‡
REC_USE_GTE_ASM_FUNCS


1430 
_gãMVMVA_cv0_mx0_s12_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1431 
_gãMVMVA_cv0_mx0_s0_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1432 
_gãMVMVA_cv0_mx1_s12_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1433 
_gãMVMVA_cv0_mx1_s0_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1434 
_gãMVMVA_cv0_mx2_s12_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1435 
_gãMVMVA_cv0_mx2_s0_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1436 
_gãMVMVA_cv0_mx3_s12_
(
psxRegi°îs
 *
ªgs
);

1437 
_gãMVMVA_cv0_mx3_s0_
(
psxRegi°îs
 *
ªgs
);

1438 
_gãMVMVA_cv1_mx0_s12_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1439 
_gãMVMVA_cv1_mx0_s0_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1440 
_gãMVMVA_cv1_mx1_s12_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1441 
_gãMVMVA_cv1_mx1_s0_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1442 
_gãMVMVA_cv1_mx2_s12_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1443 
_gãMVMVA_cv1_mx2_s0_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1444 
_gãMVMVA_cv1_mx3_s12_
(
psxRegi°îs
 *
ªgs
);

1445 
_gãMVMVA_cv1_mx3_s0_
(
psxRegi°îs
 *
ªgs
);

1446 
_gãMVMVA_cv2_mx0_s12_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1447 
_gãMVMVA_cv2_mx0_s0_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1448 
_gãMVMVA_cv2_mx1_s12_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1449 
_gãMVMVA_cv2_mx1_s0_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1450 
_gãMVMVA_cv2_mx2_s12_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1451 
_gãMVMVA_cv2_mx2_s0_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1452 
_gãMVMVA_cv2_mx3_s12_
(
psxRegi°îs
 *
ªgs
);

1453 
_gãMVMVA_cv2_mx3_s0_
(
psxRegi°îs
 *
ªgs
);

1454 
_gãMVMVA_cv3_mx0_s12_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1455 
_gãMVMVA_cv3_mx0_s0_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1456 
_gãMVMVA_cv3_mx1_s12_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1457 
_gãMVMVA_cv3_mx1_s0_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1458 
_gãMVMVA_cv3_mx2_s12_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1459 
_gãMVMVA_cv3_mx2_s0_
(
psxRegi°îs
 *
ªgs
, 
u32
 
vxy
, 
s32
 
vz
);

1460 
_gãMVMVA_cv3_mx3_s12_
(
psxRegi°îs
 *
ªgs
);

1461 
_gãMVMVA_cv3_mx3_s0_
(
psxRegi°îs
 *
ªgs
);

1464 
	#_gãMVMVA_cv0_mx0_s12_
 
_gãMVMVA_cv0_mx0_s12


	)

1465 
	#_gãMVMVA_cv0_mx0_s0_
 
_gãMVMVA_cv0_mx0_s0


	)

1466 
	#_gãMVMVA_cv0_mx1_s12_
 
_gãMVMVA_cv0_mx1_s12


	)

1467 
	#_gãMVMVA_cv0_mx1_s0_
 
_gãMVMVA_cv0_mx1_s0


	)

1468 
	#_gãMVMVA_cv0_mx2_s12_
 
_gãMVMVA_cv0_mx2_s12


	)

1469 
	#_gãMVMVA_cv0_mx2_s0_
 
_gãMVMVA_cv0_mx2_s0


	)

1470 
	#_gãMVMVA_cv0_mx3_s12_
 
_gãMVMVA_cv0_mx3_s12


	)

1471 
	#_gãMVMVA_cv0_mx3_s0_
 
_gãMVMVA_cv0_mx3_s0


	)

1472 
	#_gãMVMVA_cv1_mx0_s12_
 
_gãMVMVA_cv1_mx0_s12


	)

1473 
	#_gãMVMVA_cv1_mx0_s0_
 
_gãMVMVA_cv1_mx0_s0


	)

1474 
	#_gãMVMVA_cv1_mx1_s12_
 
_gãMVMVA_cv1_mx1_s12


	)

1475 
	#_gãMVMVA_cv1_mx1_s0_
 
_gãMVMVA_cv1_mx1_s0


	)

1476 
	#_gãMVMVA_cv1_mx2_s12_
 
_gãMVMVA_cv1_mx2_s12


	)

1477 
	#_gãMVMVA_cv1_mx2_s0_
 
_gãMVMVA_cv1_mx2_s0


	)

1478 
	#_gãMVMVA_cv1_mx3_s12_
 
_gãMVMVA_cv1_mx3_s12


	)

1479 
	#_gãMVMVA_cv1_mx3_s0_
 
_gãMVMVA_cv1_mx3_s0


	)

1480 
	#_gãMVMVA_cv2_mx0_s12_
 
_gãMVMVA_cv2_mx0_s12


	)

1481 
	#_gãMVMVA_cv2_mx0_s0_
 
_gãMVMVA_cv2_mx0_s0


	)

1482 
	#_gãMVMVA_cv2_mx1_s12_
 
_gãMVMVA_cv2_mx1_s12


	)

1483 
	#_gãMVMVA_cv2_mx1_s0_
 
_gãMVMVA_cv2_mx1_s0


	)

1484 
	#_gãMVMVA_cv2_mx2_s12_
 
_gãMVMVA_cv2_mx2_s12


	)

1485 
	#_gãMVMVA_cv2_mx2_s0_
 
_gãMVMVA_cv2_mx2_s0


	)

1486 
	#_gãMVMVA_cv2_mx3_s12_
 
_gãMVMVA_cv2_mx3_s12


	)

1487 
	#_gãMVMVA_cv2_mx3_s0_
 
_gãMVMVA_cv2_mx3_s0


	)

1488 
	#_gãMVMVA_cv3_mx0_s12_
 
_gãMVMVA_cv3_mx0_s12


	)

1489 
	#_gãMVMVA_cv3_mx0_s0_
 
_gãMVMVA_cv3_mx0_s0


	)

1490 
	#_gãMVMVA_cv3_mx1_s12_
 
_gãMVMVA_cv3_mx1_s12


	)

1491 
	#_gãMVMVA_cv3_mx1_s0_
 
_gãMVMVA_cv3_mx1_s0


	)

1492 
	#_gãMVMVA_cv3_mx2_s12_
 
_gãMVMVA_cv3_mx2_s12


	)

1493 
	#_gãMVMVA_cv3_mx2_s0_
 
_gãMVMVA_cv3_mx2_s0


	)

1494 
	#_gãMVMVA_cv3_mx3_s12_
 
_gãMVMVA_cv3_mx3_s12


	)

1495 
	#_gãMVMVA_cv3_mx3_s0_
 
_gãMVMVA_cv3_mx3_s0


	)

1498 
	$ªcMVMVA
() {

1499 i‡(
autobüs
Ë
cy˛es_≥ndög
+=8;

1500 i‡(!
ªc_pha£
) {

1503 #ifde‡
DEBUG_CPU


1504 
	`dbg
("\t\trecMVMVA");

1506 
gã›
=(
psxRegs
.
code
 & 0x1ffffff);

1507 
cv
=((
gã›
 >> 13) & 3);

1508 
mx
=((
gã›
 >> 17) & 3);

1509 
shi·
=((
gã›
 >> 19) & 1)?12:0;

1510 
v
=((
gã›
 >> 15) & 3);

1511 
lm
=((
gã›
 >> 10 ) & 1);

1513 
	`iLockReg
(3);

1514 i‡(
v
==3) {

1515 
	`Upd©eGãDñay
(1);

1517 #i‡
	`deföed
(
USE_GTE_FLAG
Ë|| !deföed(
REC_USE_GTE_FUNCS
Ë|| !deföed(
REC_USE_GTE_DELAY_CALC
)

1518 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

1520 i‡(
mx
!=3) {

1521 #ifde‡
REC_USE_GTE_MAP_REGS


1522 i‡(
v
<3) {

1523 
	`PuŒGãD©aM≠≥d
(
	`GëGãD©aM≠≥d
(
v
<<1),v<<1,
HOST_r1
);

1524 
	`PuŒGãD©aM≠≥d
(
	`GëGãD©aM≠≥d
((
v
<<1)+1),(v<<1)+1,
HOST_r2
);

1525 
	`SHLI32
(
HOST_r2
,HOST_r2,16);

1526 
	`SARI32
(
HOST_r2
,HOST_r2,16);

1528 
	`PuŒGãD©aM≠≥d
(
	`GëGãD©aM≠≥d
(9),9,
HOST_r1
);

1529 
	`PuŒGãD©aM≠≥d
(
	`GëGãD©aM≠≥d
(10),10,
HOST_r2
);

1530 
	`SHLI32
(
HOST_r3
, 
HOST_r1
, 16);

1531 
	`SHRI32
(
HOST_r3
, HOST_r3, 16);

1532 
	`wrôe32
(
	`ORR_REG_LSL_IMM
(
HOST_r1
,
HOST_r3
,
HOST_r2
,16));

1533 
	`PuŒGãD©aM≠≥d
(
	`GëGãD©aM≠≥d
(11),11,
HOST_r2
);

1534 
	`SHLI32
(
HOST_r2
,HOST_r2,16);

1535 
	`SARI32
(
HOST_r2
,HOST_r2,16);

1538 i‡(
v
<3) {

1539 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
CP2D
.
r
[
v
<<1]);

1541 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
CP2D
.
r
[9]);

1542 
	`MOV32MtoR_ªgs
(
HOST_r2
,&
psxRegs
.
CP2D
.
r
[10]);

1543 
	`SHLI32
(
HOST_r3
, 
HOST_r1
, 16);

1544 
	`SHRI32
(
HOST_r3
, HOST_r3, 16);

1545 
	`wrôe32
(
	`ORR_REG_LSL_IMM
(
HOST_r1
,
HOST_r3
,
HOST_r2
,16));

1547 
	`MOV16sMtoR_ªgs
(
HOST_r2
,(
v
<3? &
psxRegs
.
CP2D
.
p
[(v << 1Ë+ 1].
sw
.
l
 : &psxRegs.CP2D.p[11].sw.l));

1550 #i‚de‡
REC_USE_GTE_ASM_FUNCS


1551 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

1553 
u32
 
ßvîegs
=0;

1554 i‡(
mx
!=3) {

1555 
ßvîegs
=
	`iGëSaveMask
(4,4);

1556 i‡(
ßvîegs
) {

1557 
	`wrôe32
(
	`ARM_SAVEREG
(
ßvîegs
));

1561 
cv
) {

1563 
mx
) {

1564 0: 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv0_mx0_s12_
:
_gãMVMVA_cv0_mx0_s0_
)); ;

1565 1: 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv0_mx1_s12_
:
_gãMVMVA_cv0_mx1_s0_
)); ;

1566 2: 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv0_mx2_s12_
:
_gãMVMVA_cv0_mx2_s0_
)); ;

1567 : 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv0_mx3_s12_
:
_gãMVMVA_cv0_mx3_s0_
));

1571 
mx
) {

1572 0: 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv1_mx0_s12_
:
_gãMVMVA_cv1_mx0_s0_
)); ;

1573 1: 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv1_mx1_s12_
:
_gãMVMVA_cv1_mx1_s0_
)); ;

1574 2: 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv1_mx2_s12_
:
_gãMVMVA_cv1_mx2_s0_
)); ;

1575 : 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv1_mx3_s12_
:
_gãMVMVA_cv1_mx3_s0_
));

1579 
mx
) {

1580 0: 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv2_mx0_s12_
:
_gãMVMVA_cv2_mx0_s0_
)); ;

1581 1: 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv2_mx1_s12_
:
_gãMVMVA_cv2_mx1_s0_
)); ;

1582 2: 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv2_mx2_s12_
:
_gãMVMVA_cv2_mx2_s0_
)); ;

1583 : 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv2_mx3_s12_
:
_gãMVMVA_cv2_mx3_s0_
));

1587 
mx
) {

1588 0: 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv3_mx0_s12_
:
_gãMVMVA_cv3_mx0_s0_
)); ;

1589 1: 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv3_mx1_s12_
:
_gãMVMVA_cv3_mx1_s0_
)); ;

1590 2: 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv3_mx2_s12_
:
_gãMVMVA_cv3_mx2_s0_
)); ;

1591 : 
	`CALLFunc
((
u32
)(
shi·
?
_gãMVMVA_cv3_mx3_s12_
:
_gãMVMVA_cv3_mx3_s0_
));

1594 #ifde‡
REC_USE_GTE_ASM_FUNCS


1595 i‡(
ßvîegs
) {

1596 
	`wrôe32
(
	`ARM_RESTOREREG
(
ßvîegs
));

1600 #ifde‡
REC_USE_GTE_FUNCS


1601 #ifde‡
REC_USE_GTE_DELAY_CALC


1602 i‡(
lm
)

1603 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_Êag_±r
;

1605 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm0_Êag_±r
;

1607 i‡(
lm
) {

1608 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_Êag_±r
);

1610 
	`CALLFunc
(
func_GTE_upd©eMACs_lm0_Êag_±r
);

1614 
	`ªcGTE_upd©eMACs_Êag
(
lm
,0,1);

1616 
	`Unm≠D©aGãMACs
();

1617 
	`Unm≠CålGã
(31);

1619 
	`iU∆ockReg
(3);

1620 
r2_is_dúty
=1;

1621 
	}
}

1623 #ifde‡
REC_USE_GTE_ASM_FUNCS


1625 
_gãOP_s12_
();

1626 
_gãOP_s0_
();

1629 
	#_gãOP_s12_
 
_gãOP_s12


	)

1630 
	#_gãOP_s0_
 
_gãOP_s0


	)

1633 
	$ªcOP
(){

1634 i‡(
autobüs
Ë
cy˛es_≥ndög
+=6;

1635 i‡(!
ªc_pha£
) {

1638 #ifde‡
DEBUG_CPU


1639 
	`dbg
("\t\trecOP");

1641 
gã›
=(
psxRegs
.
code
 & 0x1ffffff);

1642 
shi·
=((
gã›
 >> 19) & 1)?12:0;

1643 
lm
=((
gã›
 >> 10 ) & 1);

1645 
	`iLockReg
(3);

1646 
	`Upd©eGãDñay
(1);

1647 #ifde‡
USE_GTE_FLAG


1648 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

1651 i‡(
shi·
) {

1652 
	`CALLFunc
((
u32
)
_gãOP_s12_
);

1654 
	`CALLFunc
((
u32
)
_gãOP_s0_
);

1657 #ifde‡
REC_USE_GTE_FUNCS


1658 #ifde‡
REC_USE_GTE_DELAY_CALC


1659 i‡(
lm
)

1660 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

1662 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm0_±r
;

1664 i‡(
lm
) {

1665 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

1667 
	`CALLFunc
(
func_GTE_upd©eMACs_lm0_±r
);

1671 
	`ªcGTE_upd©eMACs
(
lm
,0);

1673 
	`Unm≠D©aGãMACs
();

1675 
	`iU∆ockReg
(3);

1676 
r2_is_dúty
=1;

1677 
	}
}

1679 #ifde‡
REC_USE_GTE_ASM_FUNCS


1681 
_gãDPCS_s12_
();

1682 
_gãDPCS_s0_
();

1685 
	#_gãDPCS_s12_
 
_gãDPCS_s12


	)

1686 
	#_gãDPCS_s0_
 
_gãDPCS_s0


	)

1689 
	$ªcDPCS
(){

1690 i‡(
autobüs
Ë
cy˛es_≥ndög
+=8;

1691 i‡(!
ªc_pha£
) {

1694 #ifde‡
DEBUG_CPU


1695 
	`dbg
("\t\trecDPCS");

1697 
gã›
=(
psxRegs
.
code
 & 0x1ffffff);

1698 
shi·
=((
gã›
 >> 19) & 1)?12:0;

1700 
	`iLockReg
(3);

1701 #ifde‡
USE_GTE_FLAG


1702 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

1704 i‡(
shi·
) {

1705 
	`CALLFunc
((
u32
)
_gãDPCS_s12_
);

1707 
	`CALLFunc
((
u32
)
_gãDPCS_s0_
);

1709 #ifde‡
REC_USE_GTE_FUNCS


1710 #ifde‡
REC_USE_GTE_DELAY_CALC


1711 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm0_±r
;

1713 
	`CALLFunc
(
func_GTE_upd©eMACs_lm0_±r
);

1715 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

1717 
	`ªcGTE_upd©eMACs
(0,0);

1718 
	`ªcGTE_upd©eCODEs
();

1720 
	`Unm≠D©aGãMACs
();

1721 
	`Unm≠D©aGãCODEs
();

1723 
	`iU∆ockReg
(3);

1724 
r2_is_dúty
=1;

1725 
	}
}

1727 #ifde‡
REC_USE_GTE_ASM_FUNCS


1729 
_gãGPF_s12_
();

1730 
_gãGPF_s0_
();

1733 
	#_gãGPF_s12_
 
_gãGPF_s12


	)

1734 
	#_gãGPF_s0_
 
_gãGPF_s0


	)

1737 
	$ªcGPF
(){

1738 i‡(
autobüs
Ë
cy˛es_≥ndög
+=5;

1739 i‡(!
ªc_pha£
) {

1742 #ifde‡
DEBUG_CPU


1743 
	`dbg
("\t\trecGPF");

1745 
gã›
=(
psxRegs
.
code
 & 0x1ffffff);

1746 
shi·
=((
gã›
 >> 19) & 1)?12:0;

1748 
	`iLockReg
(3);

1749 
	`Upd©eGãDñay
(1);

1750 #ifde‡
USE_GTE_FLAG


1751 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

1754 #i‚de‡
REC_USE_GTE_ASM_FUNCS


1755 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

1757 i‡(
shi·
) {

1758 
	`CALLFunc
((
u32
)
_gãGPF_s12_
);

1760 
	`CALLFunc
((
u32
)
_gãGPF_s0_
);

1763 #ifde‡
REC_USE_GTE_FUNCS


1764 #ifde‡
REC_USE_GTE_DELAY_CALC


1765 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm0_±r
;

1767 
	`CALLFunc
(
func_GTE_upd©eMACs_lm0_±r
);

1769 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

1771 
	`ªcGTE_upd©eMACs
(0,0);

1772 
	`ªcGTE_upd©eCODEs
();

1774 
	`Unm≠D©aGãMACs
();

1775 
	`Unm≠D©aGãCODEs
();

1777 
	`iU∆ockReg
(3);

1778 
r2_is_dúty
=1;

1779 
	}
}

1781 #ifde‡
REC_USE_GTE_ASM_FUNCS


1783 
_gãSQR_s12_
();

1784 
_gãSQR_s0_
();

1787 
	#_gãSQR_s12_
 
_gãSQR_s12


	)

1788 
	#_gãSQR_s0_
 
_gãSQR_s0


	)

1791 
	$ªcSQR
(){

1792 i‡(
autobüs
Ë
cy˛es_≥ndög
+=3;

1793 i‡(!
ªc_pha£
) {

1796 #ifde‡
DEBUG_CPU


1797 
	`dbg
("\t\trecSQR");

1799 
gã›
=(
psxRegs
.
code
 & 0x1ffffff);

1800 
shi·
=((
gã›
 >> 19) & 1)?12:0;

1801 
lm
=((
gã›
 >> 10 ) & 1);

1803 
	`iLockReg
(3);

1804 
	`Upd©eGãDñay
(1);

1805 #ifde‡
USE_GTE_FLAG


1806 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

1809 #i‚de‡
REC_USE_GTE_ASM_FUNCS


1810 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

1812 i‡(
shi·
) {

1813 
	`CALLFunc
((
u32
)
_gãSQR_s12_
);

1815 
	`CALLFunc
((
u32
)
_gãSQR_s0_
);

1818 #ifde‡
USE_OLD_GTE_WITHOUT_PATCH


1819 #ifde‡
REC_USE_GTE_FUNCS


1820 #ifde‡
REC_USE_GTE_DELAY_CALC


1821 i‡(
shi·
) {

1822 i‡(
lm
)

1823 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_shi·12_±r
;

1825 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm0_shi·12_±r
;

1827 i‡(
lm
)

1828 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

1830 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm0_±r
;

1833 i‡(
shi·
) {

1834 i‡(
lm
) {

1835 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_shi·12_±r
);

1837 
	`CALLFunc
(
func_GTE_upd©eMACs_lm0_shi·12_±r
);

1840 i‡(
lm
) {

1841 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

1843 
	`CALLFunc
(
func_GTE_upd©eMACs_lm0_±r
);

1848 
	`ªcGTE_upd©eMACs
(
lm
,
shi·
);

1851 #ifde‡
REC_USE_GTE_FUNCS


1852 #ifde‡
REC_USE_GTE_DELAY_CALC


1853 i‡(
lm
)

1854 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

1856 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm0_±r
;

1858 i‡(
lm
) {

1859 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

1861 
	`CALLFunc
(
func_GTE_upd©eMACs_lm0_±r
);

1865 
	`ªcGTE_upd©eMACs
(
lm
,0);

1868 
	`Unm≠D©aGãMACs
();

1870 
	`iU∆ockReg
(3);

1871 
r2_is_dúty
=1;

1872 
	}
}

1874 #ifde‡
REC_USE_GTE_ASM_FUNCS


1875 "C" { 
_gãINTPL_s0_
(); 
_gãINTPL_s12_
(); 
_gãINTPL_block_
(); }

1878 
	$ªcINTPL
(){

1879 i‡(
autobüs
Ë
cy˛es_≥ndög
+=8;

1880 i‡(!
ªc_pha£
) {

1883 #ifde‡
DEBUG_CPU


1884 
	`dbg
("\t\trecINTPL");

1887 
gã›
=(
psxRegs
.
code
 & 0x1ffffff);

1888 
shi·
=((
gã›
 >> 19) & 1)?12:0;

1889 
lm
=((
gã›
 >> 10 ) & 1);

1891 
	`iLockReg
(3);

1892 
	`Upd©eGãDñay
(1);

1894 #ifde‡
USE_GTE_FLAG


1895 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

1898 #i‡
	`deföed
(
REC_USE_GTE_MAP_REGS
Ë&& deföed(
REC_USE_GTE_ASM_FUNCS
)

1899 
u32
 
ªgIR0
=
	`GëGãD©aM≠≥d
(8);

1900 
u32
 
ªgIR1
=
	`GëGãD©aM≠≥d
(9);

1901 
u32
 
ªgIR2
=
	`GëGãD©aM≠≥d
(10);

1902 
u32
 
ªgIR3
=
	`GëGãD©aM≠≥d
(11);

1903 
u32
 
ªgRFC
=
	`GëGãCålM≠≥d
(21);

1904 
u32
 
ªgGFC
=
	`GëGãCålM≠≥d
(22);

1905 
u32
 
ªgBFC
=
	`GëGãCålM≠≥d
(23);

1907 i‡(
ªgIR0
 || 
ªgIR1
 || 
ªgIR2
 || 
ªgIR3
 || 
ªgRFC
 || 
ªgGFC
 || 
ªgBFC
) {

1908 
	`PuŒGãD©aM≠≥d
(
ªgIR1
,9,
HOST_r0
);

1909 
	`PuŒGãD©aM≠≥d
(
ªgIR0
,8,
HOST_r1
);

1910 
	`PuŒGãCålM≠≥d
(
ªgRFC
,21,
HOST_r2
);

1911 
	`CALLFunc
((
u32
)
_gãINTPL_block_
);

1912 i‡(
shi·
) {

1913 
	`SARI32
(
HOST_r0
,HOST_r0,12);

1915 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[25],
HOST_r0
);

1917 
	`PuŒGãD©aM≠≥d
(
ªgIR2
,10,
HOST_r0
);

1918 
	`PuŒGãCålM≠≥d
(
ªgGFC
,22,
HOST_r2
);

1919 
	`CALLFunc
((
u32
)
_gãINTPL_block_
);

1920 i‡(
shi·
) {

1921 
	`SARI32
(
HOST_r0
,HOST_r0,12);

1923 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[26],
HOST_r0
);

1925 
	`PuŒGãD©aM≠≥d
(
ªgIR3
,11,
HOST_r0
);

1926 
	`PuŒGãCålM≠≥d
(
ªgBFC
,23,
HOST_r2
);

1927 
	`CALLFunc
((
u32
)
_gãINTPL_block_
);

1928 i‡(
shi·
) {

1929 
	`SARI32
(
HOST_r0
,HOST_r0,12);

1931 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP2D
.
r
[27],
HOST_r0
);

1936 i‡(
shi·
) {

1937 #ifde‡
REC_USE_GTE_ASM_FUNCS


1938 
u32
 
ßvîegs
=
	`iGëSaveMask
(4,7);

1939 i‡(
ßvîegs
) {

1940 
	`wrôe32
(
	`ARM_SAVEREG
(
ßvîegs
));

1942 
	`CALLFunc
((
u32
)
_gãINTPL_s12_
);

1943 i‡(
ßvîegs
) {

1944 
	`wrôe32
(
	`ARM_RESTOREREG
(
ßvîegs
));

1947 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

1948 
	`CALLFunc
((
u32
)
_gãINTPL_s12
);

1951 #ifde‡
REC_USE_GTE_ASM_FUNCS


1952 
u32
 
ßvîegs
=
	`iGëSaveMask
(4,7);

1953 i‡(
ßvîegs
) {

1954 
	`wrôe32
(
	`ARM_SAVEREG
(
ßvîegs
));

1956 
	`CALLFunc
((
u32
)
_gãINTPL_s0_
);

1957 i‡(
ßvîegs
) {

1958 
	`wrôe32
(
	`ARM_RESTOREREG
(
ßvîegs
));

1961 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

1962 
	`CALLFunc
((
u32
)
_gãINTPL_s0
);

1967 #ifde‡
REC_USE_GTE_FUNCS


1968 #ifde‡
REC_USE_GTE_DELAY_CALC


1969 i‡(
lm
)

1970 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

1972 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm0_±r
;

1974 i‡(
lm
) {

1975 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

1977 
	`CALLFunc
(
func_GTE_upd©eMACs_lm0_±r
);

1980 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

1982 
	`ªcGTE_upd©eMACs
(
lm
,0);

1983 
	`ªcGTE_upd©eCODEs
();

1985 
	`Unm≠D©aGãMACs
();

1986 
	`Unm≠D©aGãCODEs
();

1988 
	`iU∆ockReg
(3);

1989 
r2_is_dúty
=1;

1990 
	}
}

1992 #ifde‡
REC_USE_GTE_ASM_FUNCS


1994 
_gãDCPL__
();

1997 
	#_gãDCPL__
 
_gãDCPL_


	)

2000 
	$ªcDCPL
(){

2001 i‡(
autobüs
Ë
cy˛es_≥ndög
+=8;

2002 i‡(!
ªc_pha£
) {

2005 #ifde‡
DEBUG_CPU


2006 
	`dbg
("\t\trecDCPL");

2008 
gã›
=(
psxRegs
.
code
 & 0x1ffffff);

2009 
lm
=((
gã›
 >> 10 ) & 1);

2011 
	`iLockReg
(3);

2012 
	`Upd©eGãDñay
(1);

2013 #ifde‡
USE_GTE_FLAG


2014 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2016 
	`CALLFunc
((
u32
)
_gãDCPL__
);

2018 #ifde‡
REC_USE_GTE_FUNCS


2019 #ifde‡
REC_USE_GTE_DELAY_CALC


2020 i‡(
lm
)

2021 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

2023 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm0_±r
;

2025 i‡(
lm
) {

2026 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

2028 
	`CALLFunc
(
func_GTE_upd©eMACs_lm0_±r
);

2031 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

2033 
	`ªcGTE_upd©eMACs
(
lm
,0);

2034 
	`ªcGTE_upd©eCODEs
();

2036 
	`Unm≠D©aGãMACs
();

2037 
	`Unm≠D©aGãCODEs
();

2039 
	`iU∆ockReg
(3);

2040 
r2_is_dúty
=1;

2041 
	}
}

2043 #ifde‡
REC_USE_GTE_ASM_FUNCS


2045 
_gãGPL_s12_
();

2046 
_gãGPL_s0_
();

2049 
	#_gãGPL_s12_
 
_gãGPL_s12


	)

2050 
	#_gãGPL_s0_
 
_gãGPL_s0


	)

2053 
	$ªcGPL
(){

2054 i‡(
autobüs
Ë
cy˛es_≥ndög
+=5;

2055 i‡(!
ªc_pha£
) {

2058 #ifde‡
DEBUG_CPU


2059 
	`dbg
("\t\trecGPL");

2061 
gã›
=(
psxRegs
.
code
 & 0x1ffffff);

2062 
shi·
=((
gã›
 >> 19) & 1)?12:0;

2064 
	`iLockReg
(3);

2065 
	`Upd©eGãDñay
(1);

2066 #ifde‡
USE_GTE_FLAG


2067 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2070 #i‚de‡
REC_USE_GTE_ASM_FUNCS


2071 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

2073 i‡(
shi·
) {

2074 
	`CALLFunc
((
u32
)
_gãGPL_s12_
);

2076 
	`CALLFunc
((
u32
)
_gãGPL_s0_
);

2079 #ifde‡
REC_USE_GTE_FUNCS


2080 #ifde‡
REC_USE_GTE_DELAY_CALC


2081 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm0_±r
;

2083 
	`CALLFunc
(
func_GTE_upd©eMACs_lm0_±r
);

2085 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

2087 
	`ªcGTE_upd©eMACs
(0,0);

2088 
	`ªcGTE_upd©eCODEs
();

2090 
	`Unm≠D©aGãMACs
();

2091 
	`Unm≠D©aGãCODEs
();

2093 
	`iU∆ockReg
(3);

2094 
r2_is_dúty
=1;

2095 
	}
}

2097 #ifde‡
REC_USE_GTE_ASM_FUNCS


2099 
_gãRTPS__
();

2102 
	#_gãRTPS__
 
_gãRTPS


	)

2105 
	$ªcRTPS
(){

2106 i‡(
autobüs
Ë
cy˛es_≥ndög
+=15;

2107 i‡(!
ªc_pha£
) {

2110 #ifde‡
DEBUG_CPU


2111 
	`dbg
("\t\trecRTPS");

2114 
	`iLockReg
(3);

2115 
	`CALLFunc
((
u32
)
_gãRTPS__
);

2116 #ifde‡
REC_USE_GTE_FUNCS


2117 #ifde‡
REC_USE_GTE_DELAY_CALC


2118 
func_GTE_dñay_±r
=0;

2121 
	`Unm≠D©aGãMACs
();

2122 #ifde‡
REC_USE_GTE_MAP_REGS


2123 
u32
 
rm≠1
=
	`GëGãD©aM≠≥d
(17);

2124 
u32
 
rm≠2
=
	`GëGãD©aM≠≥d
(18);

2125 
u32
 
rm≠3
=
	`GëGãD©aM≠≥d
(19);

2126 i‡(
rm≠1
 &&Ñm≠1!=
rm≠2
) {

2127 
	`M≠D©aGã
(
rm≠1
,16);

2129 
	`Unm≠D©aGã
(16);

2131 i‡(
rm≠2
 &&Ñm≠2!=
rm≠3
) {

2132 
	`M≠D©aGã
(
rm≠2
,17);

2134 
	`Unm≠D©aGã
(17);

2136 i‡(
rm≠3
 && 
rm≠2
!=rmap3) {

2137 
	`M≠D©aGã
(
rm≠3
,18);

2139 
	`Unm≠D©aGã
(18);

2141 
	`Unm≠D©aGã
(19);

2142 
rm≠1
=
	`GëGãD©aM≠≥d
(13);

2143 
rm≠2
=
	`GëGãD©aM≠≥d
(14);

2144 i‡(
rm≠1
 &&Ñm≠1!=
rm≠2
) {

2145 
	`M≠D©aGã
(
rm≠1
,12);

2147 
	`Unm≠D©aGã
(12);

2149 i‡(
rm≠2
 && 
rm≠1
!=rmap2) {

2150 
	`M≠D©aGã
(
rm≠2
,13);

2152 
	`Unm≠D©aGã
(13);

2154 
	`Unm≠D©aGã
(14);

2155 
	`Unm≠D©aGã
(24);

2156 
	`Unm≠D©aGã
(8);

2159 
	`iU∆ockReg
(3);

2160 
r2_is_dúty
 = 1;

2161 
	}
}

2163 #ifde‡
REC_USE_GTE_ASM_FUNCS


2165 
_gãNCDS__
();

2168 
	#_gãNCDS__
 
_gãNCDS_


	)

2171 
	$ªcNCDS
(){

2172 i‡(
autobüs
Ë
cy˛es_≥ndög
+=19;

2173 i‡(!
ªc_pha£
) {

2176 #ifde‡
DEBUG_CPU


2177 
	`dbg
("\t\trecNCDS");

2180 
	`iLockReg
(3);

2181 #ifde‡
USE_GTE_FLAG


2182 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2184 
	`CALLFunc
((
u32
)
_gãNCDS__
);

2185 #ifde‡
REC_USE_GTE_FUNCS


2186 #ifde‡
REC_USE_GTE_DELAY_CALC


2187 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

2189 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

2191 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

2193 
	`ªcGTE_upd©eMACs
(1,0);

2194 
	`ªcGTE_upd©eCODEs
();

2196 
	`Unm≠D©aGãMACs
();

2197 
	`Unm≠D©aGãCODEs
();

2199 
	`iU∆ockReg
(3);

2200 
r2_is_dúty
 = 1;

2201 
	}
}

2203 #ifde‡
REC_USE_GTE_ASM_FUNCS


2205 
_gãNCDT__
();

2208 
	#_gãNCDT__
 
_gãNCDT_


	)

2211 
	$ªcNCDT
(){

2212 i‡(
autobüs
Ë
cy˛es_≥ndög
+=44;

2213 i‡(!
ªc_pha£
) {

2216 #ifde‡
DEBUG_CPU


2217 
	`dbg
("\t\trecNCDT");

2220 
	`iLockReg
(3);

2221 #ifde‡
USE_GTE_FLAG


2222 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2224 
	`CALLFunc
((
u32
)
_gãNCDT__
);

2225 #ifde‡
REC_USE_GTE_FUNCS


2226 #ifde‡
REC_USE_GTE_DELAY_CALC


2227 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

2229 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

2231 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

2233 
	`ªcGTE_upd©eMACs
(1,0);

2234 
	`ªcGTE_upd©eCODEs
();

2236 
	`Unm≠D©aGãMACs
();

2237 
	`Unm≠D©aGãCODEs
();

2239 
	`iU∆ockReg
(3);

2240 
r2_is_dúty
 = 1;

2241 
	}
}

2243 #ifde‡
REC_USE_GTE_ASM_FUNCS


2245 
_gãCDP__
();

2248 
	#_gãCDP__
 
_gãCDP_


	)

2251 
	$ªcCDP
(){

2252 i‡(
autobüs
Ë
cy˛es_≥ndög
+=13;

2253 i‡(!
ªc_pha£
) {

2256 #ifde‡
DEBUG_CPU


2257 
	`dbg
("\t\trecCDP");

2260 
	`iLockReg
(3);

2261 
	`Upd©eGãDñay
(1);

2262 #ifde‡
USE_GTE_FLAG


2263 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2265 
	`CALLFunc
((
u32
)
_gãCDP__
);

2266 #ifde‡
REC_USE_GTE_FUNCS


2267 #ifde‡
REC_USE_GTE_DELAY_CALC


2268 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

2270 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

2272 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

2274 
	`ªcGTE_upd©eMACs
(1,0);

2275 
	`ªcGTE_upd©eCODEs
();

2277 
	`Unm≠D©aGãMACs
();

2278 
	`Unm≠D©aGãCODEs
();

2280 
	`iU∆ockReg
(3);

2281 
r2_is_dúty
 = 1;

2282 
	}
}

2284 #ifde‡
REC_USE_GTE_ASM_FUNCS


2286 
_gãNCCS__
();

2289 
	#_gãNCCS__
 
_gãNCCS_


	)

2292 
	$ªcNCCS
(){

2293 i‡(
autobüs
Ë
cy˛es_≥ndög
+=17;

2294 i‡(!
ªc_pha£
) {

2297 #ifde‡
DEBUG_CPU


2298 
	`dbg
("\t\trecNCCS");

2301 
	`iLockReg
(3);

2302 #ifde‡
USE_GTE_FLAG


2303 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2305 #i‚de‡
REC_USE_GTE_ASM_FUNCS


2306 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

2308 
u32
 
ßvîegs
=
	`iGëSaveMask
(4,7);

2309 i‡(
ßvîegs
) {

2310 
	`wrôe32
(
	`ARM_SAVEREG
(
ßvîegs
));

2313 
	`CALLFunc
((
u32
)
_gãNCCS__
);

2314 #ifde‡
REC_USE_GTE_ASM_FUNCS


2315 i‡(
ßvîegs
) {

2316 
	`wrôe32
(
	`ARM_RESTOREREG
(
ßvîegs
));

2319 #ifde‡
REC_USE_GTE_FUNCS


2320 #ifde‡
REC_USE_GTE_DELAY_CALC


2321 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

2323 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

2325 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

2327 
	`ªcGTE_upd©eMACs
(1,0);

2328 
	`ªcGTE_upd©eCODEs
();

2330 
	`Unm≠D©aGãMACs
();

2331 
	`Unm≠D©aGãCODEs
();

2333 
	`iU∆ockReg
(3);

2334 
r2_is_dúty
 = 1;

2335 
	}
}

2337 #ifde‡
REC_USE_GTE_ASM_FUNCS


2339 
_gãCC__
();

2342 
	#_gãCC__
 
_gãCC_


	)

2345 
	$ªcCC
(){

2346 i‡(
autobüs
Ë
cy˛es_≥ndög
+=11;

2347 i‡(!
ªc_pha£
) {

2350 #ifde‡
DEBUG_CPU


2351 
	`dbg
("\t\trecCC");

2354 
	`iLockReg
(3);

2355 
	`Upd©eGãDñay
(1);

2356 #ifde‡
USE_GTE_FLAG


2357 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2359 #i‚de‡
REC_USE_GTE_ASM_FUNCS


2360 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

2362 
u32
 
ßvîegs
=
	`iGëSaveMask
(4,6);

2363 i‡(
ßvîegs
) {

2364 
	`wrôe32
(
	`ARM_SAVEREG
(
ßvîegs
));

2367 
	`CALLFunc
((
u32
)
_gãCC__
);

2368 #ifde‡
REC_USE_GTE_ASM_FUNCS


2369 i‡(
ßvîegs
) {

2370 
	`wrôe32
(
	`ARM_RESTOREREG
(
ßvîegs
));

2373 #ifde‡
REC_USE_GTE_FUNCS


2374 #ifde‡
REC_USE_GTE_DELAY_CALC


2375 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

2377 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

2379 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

2381 
	`ªcGTE_upd©eMACs
(1,0);

2382 
	`ªcGTE_upd©eCODEs
();

2384 
	`Unm≠D©aGãMACs
();

2385 
	`Unm≠D©aGãCODEs
();

2387 
	`iU∆ockReg
(3);

2388 
r2_is_dúty
 = 1;

2389 
	}
}

2391 #ifde‡
REC_USE_GTE_ASM_FUNCS


2393 
_gãNCS__
();

2396 
	#_gãNCS__
 
_gãNCS_


	)

2399 
	$ªcNCS
(){

2400 i‡(
autobüs
Ë
cy˛es_≥ndög
+=14;

2401 i‡(!
ªc_pha£
) {

2404 #ifde‡
DEBUG_CPU


2405 
	`dbg
("\t\trecNCS");

2408 
	`iLockReg
(3);

2409 #ifde‡
USE_GTE_FLAG


2410 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2412 #i‚de‡
REC_USE_GTE_ASM_FUNCS


2413 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

2415 
u32
 
ßvîegs
=
	`iGëSaveMask
(4,6);

2416 i‡(
ßvîegs
) {

2417 
	`wrôe32
(
	`ARM_SAVEREG
(
ßvîegs
));

2420 
	`CALLFunc
((
u32
)
_gãNCS__
);

2421 #ifde‡
REC_USE_GTE_ASM_FUNCS


2422 i‡(
ßvîegs
) {

2423 
	`wrôe32
(
	`ARM_RESTOREREG
(
ßvîegs
));

2426 #ifde‡
REC_USE_GTE_FUNCS


2427 #ifde‡
REC_USE_GTE_DELAY_CALC


2428 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

2430 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

2432 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

2434 
	`ªcGTE_upd©eMACs
(1,0);

2435 
	`ªcGTE_upd©eCODEs
();

2437 
	`Unm≠D©aGãMACs
();

2438 
	`Unm≠D©aGãCODEs
();

2440 
	`iU∆ockReg
(3);

2441 
r2_is_dúty
 = 1;

2442 
	}
}

2444 #ifde‡
REC_USE_GTE_ASM_FUNCS


2446 
_gãNCT__
();

2449 
	#_gãNCT__
 
_gãNCT_


	)

2452 
	$ªcNCT
(){

2453 i‡(
autobüs
Ë
cy˛es_≥ndög
+=30;

2454 i‡(!
ªc_pha£
) {

2457 #ifde‡
DEBUG_CPU


2458 
	`dbg
("\t\trecNCT");

2461 
	`iLockReg
(3);

2462 #ifde‡
USE_GTE_FLAG


2463 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2465 
	`CALLFunc
((
u32
)
_gãNCT__
);

2466 #ifde‡
REC_USE_GTE_FUNCS


2467 #ifde‡
REC_USE_GTE_DELAY_CALC


2468 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

2470 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

2472 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

2474 
	`ªcGTE_upd©eMACs
(1,0);

2475 
	`ªcGTE_upd©eCODEs
();

2477 
	`Unm≠D©aGãMACs
();

2478 
	`Unm≠D©aGãCODEs
();

2480 
	`iU∆ockReg
(3);

2481 
r2_is_dúty
 = 1;

2482 
	}
}

2484 #ifde‡
REC_USE_GTE_ASM_FUNCS


2486 
_gãDPCT__
();

2489 
	#_gãDPCT__
 
_gãDPCT_


	)

2492 
	$ªcDPCT
(){

2493 i‡(
autobüs
Ë
cy˛es_≥ndög
+=17;

2494 i‡(!
ªc_pha£
) {

2497 #ifde‡
DEBUG_CPU


2498 
	`dbg
("\t\trecDPCT");

2501 
	`iLockReg
(3);

2502 #ifde‡
USE_GTE_FLAG


2503 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2505 
	`CALLFunc
((
u32
)
_gãDPCT__
);

2506 #ifde‡
REC_USE_GTE_FUNCS


2507 #ifde‡
REC_USE_GTE_DELAY_CALC


2508 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm0_±r
;

2510 
	`CALLFunc
(
func_GTE_upd©eMACs_lm0_±r
);

2512 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

2514 
	`ªcGTE_upd©eMACs
(0,0);

2515 
	`ªcGTE_upd©eCODEs
();

2517 
	`Unm≠D©aGãMACs
();

2518 
	`Unm≠D©aGãCODEs
();

2520 
	`iU∆ockReg
(3);

2521 
r2_is_dúty
 = 1;

2522 
	}
}

2524 #ifde‡
REC_USE_GTE_ASM_FUNCS


2526 
_gãNCCT__
();

2529 
	#_gãNCCT__
 
_gãNCCT_


	)

2532 
	$ªcNCCT
(){

2533 i‡(
autobüs
Ë
cy˛es_≥ndög
+=39;

2534 i‡(!
ªc_pha£
) {

2537 #ifde‡
DEBUG_CPU


2538 
	`dbg
("\t\trecNCCT");

2541 
	`iLockReg
(3);

2542 #ifde‡
USE_GTE_FLAG


2543 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2545 
	`CALLFunc
((
u32
)
_gãNCCT__
);

2546 #ifde‡
REC_USE_GTE_FUNCS


2547 #ifde‡
REC_USE_GTE_DELAY_CALC


2548 
func_GTE_dñay_±r
=
func_GTE_upd©eMACs_lm1_±r
;

2550 
	`CALLFunc
(
func_GTE_upd©eMACs_lm1_±r
);

2552 
	`CALLFunc
(
func_GTE_upd©eCODEs_±r
);

2554 
	`ªcGTE_upd©eMACs
(1,0);

2555 
	`ªcGTE_upd©eCODEs
();

2557 
	`Unm≠D©aGãMACs
();

2558 
	`Unm≠D©aGãCODEs
();

2560 
	`iU∆ockReg
(3);

2561 
r2_is_dúty
 = 1;

2562 
	}
}

2564 #ifde‡
REC_USE_GTE_ASM_FUNCS


2566 
_gãRTPT__
();

2569 
	#_gãRTPT__
 
_gãRTPT_


	)

2572 
	$ªcRTPT
(){

2573 i‡(
autobüs
Ë
cy˛es_≥ndög
+=23;

2574 i‡(!
ªc_pha£
) {

2577 #ifde‡
DEBUG_CPU


2578 
	`dbg
("\t\trecRTPT");

2581 
	`iLockReg
(3);

2582 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2583 
	`CALLFunc
((
u32
)
_gãRTPT__
);

2584 #ifde‡
REC_USE_GTE_FUNCS


2585 #ifde‡
REC_USE_GTE_DELAY_CALC


2586 
func_GTE_dñay_±r
=
func_GTE_upd©eMAC3_lm0_Êag_±r
;

2588 
	`CALLFunc
(
func_GTE_upd©eMAC3_lm0_Êag_±r
);

2591 
	`ªcGTE_upd©eMAC3_Êag
(0,0,1);

2593 
	`Unm≠D©aGãMACs
();

2594 
	`Unm≠D©aGãCODEs
();

2595 
	`Unm≠CålGã
(31);

2596 
	`Unm≠D©aGã
(17);

2597 
	`Unm≠D©aGã
(18);

2598 
	`Unm≠D©aGã
(19);

2599 
	`Unm≠D©aGã
(12);

2600 
	`Unm≠D©aGã
(13);

2601 
	`Unm≠D©aGã
(14);

2602 
	`Unm≠D©aGã
(24);

2603 
	`Unm≠D©aGã
(8);

2605 
	`iU∆ockReg
(3);

2606 
r2_is_dúty
 = 1;

2607 
	}
}

2609 #ifde‡
REC_USE_GTE_ASM_FUNCS


2610 "C" { 
_gãNCLIP_
(); }

2613 
	$ªcNCLIP
(){

2614 i‡(
autobüs
Ë
cy˛es_≥ndög
+=8;

2615 i‡(!
ªc_pha£
) {

2618 #ifde‡
DEBUG_CPU


2619 
	`dbg
("\t\trecNCLIP");

2621 
	`iLockReg
(3);

2622 #ifde‡
REC_USE_GTE_ASM_FUNCS


2623 
	`CALLFunc
((
u32
)
_gãNCLIP_
);

2625 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

2626 
	`CALLFunc
((
u32
)
_gãNCLIP
);

2628 
	`Unm≠D©aGã
(24);

2630 
	`iU∆ockReg
(3);

2631 
r2_is_dúty
 = 1;

2632 
	}
}

2634 #ifde‡
REC_USE_GTE_ASM_FUNCS


2636 
_gãAVSZ3__
();

2639 
	#_gãAVSZ3__
 
_gãAVSZ3


	)

2642 
	$ªcAVSZ3
(){

2643 i‡(
autobüs
Ë
cy˛es_≥ndög
+=5;

2644 i‡(!
ªc_pha£
) {

2647 #ifde‡
DEBUG_CPU


2648 
	`dbg
("\t\trecAVSZ3");

2650 
	`iLockReg
(3);

2651 #i‚de‡
REC_USE_GTE_ASM_FUNCS


2652 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

2654 
	`CALLFunc
((
u32
)
_gãAVSZ3__
);

2655 
	`Unm≠D©aGã
(24);

2656 
	`Unm≠D©aGã
(7);

2657 
	`iU∆ockReg
(3);

2658 
r2_is_dúty
 = 1;

2659 
	}
}

2661 #ifde‡
REC_USE_GTE_ASM_FUNCS


2663 
_gãAVSZ4__
();

2666 
	#_gãAVSZ4__
 
_gãAVSZ4


	)

2669 
	$ªcAVSZ4
(){

2670 i‡(
autobüs
Ë
cy˛es_≥ndög
+=6;

2671 i‡(!
ªc_pha£
) {

2674 #ifde‡
DEBUG_CPU


2675 
	`dbg
("\t\trecAVSZ4");

2677 
	`iLockReg
(3);

2678 #i‚de‡
REC_USE_GTE_ASM_FUNCS


2679 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

2681 
	`CALLFunc
((
u32
)
_gãAVSZ4__
);

2682 
	`Unm≠D©aGã
(24);

2683 
	`Unm≠D©aGã
(7);

2684 
	`iU∆ockReg
(3);

2685 
r2_is_dúty
 = 1;

2686 
	}
}

2690 
CP2_FUNC
(
OP
,"OP",6);

2691 
CP2_FUNC
(
MVMVA
,"MVMVA",8);

2692 
CP2_FUNC
(
DPCS
,"DPCS",8);

2693 
CP2_FUNC
(
GPF
,"GPF",5);

2694 
CP2_FUNC
(
SQR
,"SQR",3);

2695 
CP2_FUNC
(
INTPL
,"INTPL",8);

2696 
CP2_FUNC
(
DCPL
,"DCPL",8);

2697 
CP2_FUNC
(
GPL
,"GPL",5);

2698 
CP2_FUNCNC
(
RTPS
,"RTPS",15);

2699 
CP2_FUNCNC
(
NCDS
,"NCDS",19);

2700 
CP2_FUNCNC
(
NCDT
,"NCDT",44);

2701 
CP2_FUNCNC
(
CDP
,"CDP",13);

2702 
CP2_FUNCNC
(
NCCS
,"NCCS",17);

2703 
CP2_FUNCNC
(
CC
,"CC",11);

2704 
CP2_FUNCNC
(
NCS
,"NCS",14);

2705 
CP2_FUNCNC
(
NCT
,"NCT",30);

2706 
CP2_FUNCNC
(
DPCT
,"DPCT",17);

2707 
CP2_FUNCNC
(
NCCT
,"NCCT",39);

2708 
CP2_FUNCNC
(
RTPT
,"RTPT",23);

2709 
CP2_FUNCNC
(
NCLIP
,"NCLIP",8);

2710 
CP2_FUNCNC
(
AVSZ3
,"AVSZ3",5);

2711 
CP2_FUNCNC
(
AVSZ4
,"AVSZ4",6);

	@src/recompiler/arm/rec_mem.h

21 #i‡
deföed
(
REC_USE_NO_REPEAT_READ_WRITE
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

22 
u32
 
	gª≥©_ªad_wrôe_pc
=0;

23 
u32
 
	gª≥©_ªad_wrôe_imm
=0;

24 
u32
 
	gª≥©_ªad_wrôe_ªg_d°
=0;

25 
u32
 
	gª≥©_ªad_wrôe_ªg_§c
=0;

28 #i‡
deföed
(
öãΩªãr_√w
Ë|| deföed (
öãΩªãr_n⁄e
)

30 c⁄° 
u32
 
	gLWL_MASK
[4] = { 0xffffff, 0xffff, 0xff, 0 };

31 c⁄° 
u32
 
	gLWL_SHIFT
[4] = { 24, 16, 8, 0 };

32 c⁄° 
u32
 
	gLWR_MASK
[4] = { 0, 0xff000000, 0xffff0000, 0xffffff00 };

33 c⁄° 
u32
 
	gLWR_SHIFT
[4] = { 0, 8, 16, 24 };

34 c⁄° 
u32
 
	gSWL_MASK
[4] = { 0xffffff00, 0xffff0000, 0xff000000, 0 };

35 c⁄° 
u32
 
	gSWL_SHIFT
[4] = { 24, 16, 8, 0 };

36 c⁄° 
u32
 
	gSWR_MASK
[4] = { 0, 0xff, 0xffff, 0xffffff };

37 c⁄° 
u32
 
	gSWR_SHIFT
[4] = { 0, 8, 16, 24 };

39 
u32
 
LWL_MASK
[4];

40 
u32
 
LWL_SHIFT
[4];

41 
u32
 
LWR_MASK
[4];

42 
u32
 
LWR_SHIFT
[4];

43 
u32
 
SWL_MASK
[4];

44 
u32
 
SWL_SHIFT
[4];

45 
u32
 
SWR_MASK
[4];

46 
u32
 
SWR_SHIFT
[4];

49 #i‡
deföed
(
REC_USE_MEMORY_FUNCS
Ë&& deföed(
REC_USE_DIRECT_MEM
)

50 
	gfunc_MemRód8_dúe˘_±r
=0;

52 
	$ªcMemRód8_dúe˘
() {

53 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
,
HOST_r0
,16));

54 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_r2
,
HOST_r0
,16));

55 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x1f,0x18));

56 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r2
,HOST_r2,16));

57 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

58 
	`wrôe32
(
	`AND_IMM
(
HOST_r3
,
HOST_r0
,0x7,0x10));

59 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x7e,0x1a));

60 
	`wrôe32
(
	`ORR_REG_LSL_IMM
(
HOST_ù
,
HOST_r2
,
HOST_r3
,0));

61 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

62 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
psxR
);

63 
	`wrôe32
(
	`LDRB_REG
(
HOST_r0
,
HOST_ù
,
HOST_r2
));

64 
	`wrôe32
(
	`BX_LR
());

65 
	`¨mSëJ32
(
j32På
[1]);

66 
	`MOV32MtoR_ªgs
(
HOST_r3
,(
u32
)&
psxRegs
.
psxP
);

67 
	`wrôe32
(
	`LDRB_REG
(
HOST_r0
,
HOST_r2
,
HOST_r3
));

68 
	`wrôe32
(
	`BX_LR
());

69 
	`¨mSëJ32
(
j32På
[2]);

70 
	`wrôe32
(
	`CMP_IMM
(
HOST_r2
,0x01,0x14));

71 { 
u32
 
off£t
=((((u32)(
psxHwRód8
Ë- ((u32)(
¨mPå
Ë+ (8))Ë>> 2Ë& 0xFFFFFF); 
	`wrôe32
(
	`BCS_FWD_
(offset)); }

72 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
psxH
);

73 
	`wrôe32
(
	`LDRB_REG
(
HOST_r0
,
HOST_r2
,
HOST_ù
));

74 
	`wrôe32
(
	`BX_LR
());

75 
	`Upd©eImmedüã
(0);

76 
	}
}

78 
	gfunc_MemRód16_dúe˘_±r
=0;

80 
	$ªcMemRód16_dúe˘
() {

81 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
,
HOST_r0
,16));

82 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_r2
,
HOST_r0
,16));

83 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x1f,0x18));

84 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r2
,HOST_r2,16));

85 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

86 
	`wrôe32
(
	`AND_IMM
(
HOST_r3
,
HOST_r0
,0x7,0x10));

87 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x7e,0x1a));

88 
	`wrôe32
(
	`ORR_REG_LSL_IMM
(
HOST_ù
,
HOST_r2
,
HOST_r3
,0));

89 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

90 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
psxR
);

91 
	`wrôe32
(
	`LDRH_REG
(
HOST_r0
,
HOST_ù
,
HOST_r2
));

92 
	`wrôe32
(
	`BX_LR
());

93 
	`¨mSëJ32
(
j32På
[1]);

94 
	`MOV32MtoR_ªgs
(
HOST_r3
,(
u32
)&
psxRegs
.
psxP
);

95 
	`wrôe32
(
	`LDRH_REG
(
HOST_r0
,
HOST_r2
,
HOST_r3
));

96 
	`wrôe32
(
	`BX_LR
());

97 
	`¨mSëJ32
(
j32På
[2]);

98 
	`wrôe32
(
	`CMP_IMM
(
HOST_r2
,0x01,0x14));

99 { 
u32
 
off£t
=((((u32)(
psxHwRód16
Ë- ((u32)(
¨mPå
Ë+ (8))Ë>> 2Ë& 0xFFFFFF); 
	`wrôe32
(
	`BCS_FWD_
(offset)); }

100 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
psxH
);

101 
	`wrôe32
(
	`LDRH_REG
(
HOST_r0
,
HOST_r2
,
HOST_ù
));

102 
	`wrôe32
(
	`BX_LR
());

103 
	`Upd©eImmedüã
(0);

104 
	}
}

106 
	gfunc_MemRód32_dúe˘_±r
=0;

108 
	$ªcMemRód32_dúe˘
() {

109 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
,
HOST_r0
,16));

110 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_r2
,
HOST_r0
,16));

111 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x1f,0x18));

112 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r2
,HOST_r2,16));

113 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

114 
	`wrôe32
(
	`AND_IMM
(
HOST_r3
,
HOST_r0
,0x7,0x10));

115 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x7e,0x1a));

116 
	`wrôe32
(
	`ORR_REG_LSL_IMM
(
HOST_ù
,
HOST_r2
,
HOST_r3
,0));

117 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

118 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
psxR
);

119 
	`wrôe32
(
	`LDR_REG
(
HOST_r0
,
HOST_ù
,
HOST_r2
));

120 
	`wrôe32
(
	`BX_LR
());

121 
	`¨mSëJ32
(
j32På
[1]);

122 
	`MOV32MtoR_ªgs
(
HOST_r3
,(
u32
)&
psxRegs
.
psxP
);

123 
	`wrôe32
(
	`LDR_REG
(
HOST_r0
,
HOST_r2
,
HOST_r3
));

124 
	`wrôe32
(
	`BX_LR
());

125 
	`¨mSëJ32
(
j32På
[2]);

126 
	`wrôe32
(
	`CMP_IMM
(
HOST_r2
,0x01,0x14));

127 { 
u32
 
off£t
=((((u32)(
psxHwRód32
Ë- ((u32)(
¨mPå
Ë+ (8))Ë>> 2Ë& 0xFFFFFF); 
	`wrôe32
(
	`BCS_FWD_
(offset)); }

128 
	`MOV32MtoR_ªgs
(
HOST_ù
,(
u32
)&
psxRegs
.
psxH
);

129 
	`wrôe32
(
	`LDR_REG
(
HOST_r0
,
HOST_r2
,
HOST_ù
));

130 
	`wrôe32
(
	`BX_LR
());

131 
	`Upd©eImmedüã
(0);

132 
	}
}

134 
	gfunc_MemWrôe8_dúe˘_±r
=0;

136 
	$ªcMemWrôe8_dúe˘
() {

137 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r3
,
HOST_r0
,16));

138 
	`wrôe32
(
	`CMP_IMM
(
HOST_r3
,0x7e,0x1a));

139 
	`wrôe32
(
	`LDRNE_IMM
(
HOST_r3
,
HOST_r11
,(((
u32
)(&
psxRegs
.
psxP
))-((u32)&psxRegs))));

140 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

141 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
,HOST_ip,16));

142 
	`wrôe32
(
	`STRNEB_REG
(
HOST_r1
,
HOST_ù
,
HOST_r3
));

143 
	`wrôe32
(
	`BXNE_LR
());

144 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x01,0x14));

145 
	`wrôe32
(
	`LDRCC_IMM
(
HOST_r3
,
HOST_r11
,(((
u32
)(&
psxRegs
.
psxH
))-((u32)&psxRegs))));

146 
	`wrôe32
(
	`STRCCB_REG
(
HOST_r1
,
HOST_ù
,
HOST_r3
));

147 
	`wrôe32
(
	`BXCC_LR
());

148 
	`JUMPFunc
((
u32
)
psxHwWrôe8
);

149 
	`Upd©eImmedüã
(0);

150 
	}
}

152 
	gfunc_MemWrôe16_dúe˘_±r
=0;

154 
	$ªcMemWrôe16_dúe˘
() {

155 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r3
,
HOST_r0
,16));

156 
	`wrôe32
(
	`CMP_IMM
(
HOST_r3
,0x7e,0x1a));

157 
	`wrôe32
(
	`LDRNE_IMM
(
HOST_r3
,
HOST_r11
,(((
u32
)(&
psxRegs
.
psxP
))-((u32)&psxRegs))));

158 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

159 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
,HOST_ip,16));

160 
	`wrôe32
(
	`STRNEH_REG
(
HOST_r1
,
HOST_ù
,
HOST_r3
));

161 
	`wrôe32
(
	`BXNE_LR
());

162 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x01,0x14));

163 
	`wrôe32
(
	`LDRCC_IMM
(
HOST_r3
,
HOST_r11
,(((
u32
)(&
psxRegs
.
psxH
))-((u32)&psxRegs))));

164 
	`wrôe32
(
	`STRCCH_REG
(
HOST_r1
,
HOST_ù
,
HOST_r3
));

165 
	`wrôe32
(
	`BXCC_LR
());

166 
	`JUMPFunc
((
u32
)
psxHwWrôe16
);

167 
	`Upd©eImmedüã
(0);

168 
	}
}

170 
	gfunc_MemWrôe32_dúe˘_±r
=0;

172 
	$ªcMemWrôe32_dúe˘
() {

173 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r3
,
HOST_r0
,16));

174 
	`wrôe32
(
	`CMP_IMM
(
HOST_r3
,0x7e,0x1a));

175 
	`wrôe32
(
	`LDRNE_IMM
(
HOST_r3
,
HOST_r11
,(((
u32
)(&
psxRegs
.
psxP
))-((u32)&psxRegs))));

176 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

177 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
,HOST_ip,16));

178 
	`wrôe32
(
	`STRNE_REG
(
HOST_r1
,
HOST_ù
,
HOST_r3
));

179 
	`wrôe32
(
	`BXNE_LR
());

180 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x01,0x14));

181 
	`wrôe32
(
	`LDRCC_IMM
(
HOST_r3
,
HOST_r11
,(((
u32
)(&
psxRegs
.
psxH
))-((u32)&psxRegs))));

182 
	`wrôe32
(
	`STRCC_REG
(
HOST_r1
,
HOST_ù
,
HOST_r3
));

183 
	`wrôe32
(
	`BXCC_LR
());

184 
	`JUMPFunc
((
u32
)
psxHwWrôe32
);

185 
	`Upd©eImmedüã
(0);

186 
	}
}

189 #ifde‡
REC_USE_DIRECT_MEM


190 #ifde‡
REC_USE_MEMORY_FUNCS


191 
	#MEMREAD8_FUNC
 
func_MemRód8_dúe˘_±r


	)

192 
	#MEMREAD16_FUNC
 
func_MemRód16_dúe˘_±r


	)

193 
	#MEMREAD32_FUNC
 
func_MemRód32_dúe˘_±r


	)

195 
	#MEMREAD8_FUNC
 
psxMemRód8_dúe˘


	)

196 
	#MEMREAD16_FUNC
 
psxMemRód16_dúe˘


	)

197 
	#MEMREAD32_FUNC
 
psxMemRód32_dúe˘


	)

199 #i‡
deföed
(
REC_USE_MEMORY_FUNCS
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

200 
	#MEMWRITE8_FUNC
 
func_MemWrôe8_dúe˘_±r


	)

201 
	#MEMWRITE16_FUNC
 
func_MemWrôe16_dúe˘_±r


	)

202 
	#MEMWRITE32_FUNC
 
func_MemWrôe32_dúe˘_±r


	)

204 
	#MEMWRITE8_FUNC
 
psxMemWrôe8_dúe˘


	)

205 
	#MEMWRITE16_FUNC
 
psxMemWrôe16_dúe˘


	)

206 
	#MEMWRITE32_FUNC
 
psxMemWrôe32_dúe˘


	)

209 
	#MEMREAD8_FUNC
 
psxMemRód8


	)

210 
	#MEMREAD16_FUNC
 
psxMemRód16


	)

211 
	#MEMREAD32_FUNC
 
psxMemRód32


	)

212 
	#MEMWRITE8_FUNC
 
psxMemWrôe8


	)

213 
	#MEMWRITE16_FUNC
 
psxMemWrôe16


	)

214 
	#MEMWRITE32_FUNC
 
psxMemWrôe32


	)

217 #i‚de‡
REC_USE_MEMORY_FUNCS


218 
INLINE
 
	$PSXMEMREAD8
(){

219 #ifde‡
DEBUG_CPU


220 
	`dbg
("\t\tPSXMEMREAD8");

222 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

223 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

224 
	`iPutCy˛esAdd
(0);

226 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
psxM
);

227 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
,
HOST_r0
,0x0e,0x04));

228 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

229 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x02,0xa));

230 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

231 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

232 
	`wrôe32
(
	`LDRB_REG
(
HOST_r0
,
HOST_r2
,
HOST_r1
));

233 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

234 
	`Upd©eImmedüã
(0);

235 
	`¨mSëJ32
(
j32På
[9]);

236 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

237 
	`iPutCy˛esAdd
(0);

239 #ifde‡
REC_USE_DIRECT_MEM


240 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

242 
	`CALLFunc
((
u32
)
MEMREAD8_FUNC
);

243 
	`¨mSëJ32
(
j32På
[10]);

244 
r2_is_dúty
=1;

245 
	}
}

248 
	gfunc_MemRód8_±r
=0;

250 
	$ªcMemRód8
() {

251 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
psxM
);

252 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
,
HOST_r0
,0x0e,0x04));

253 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

254 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x02,0xa));

255 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

256 
	`wrôe32
(
	`LDRCCB_REG
(
HOST_r0
,
HOST_r2
,
HOST_r1
));

257 
	`wrôe32
(
	`BXCC_LR
());

258 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

259 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
cy˛e_add
,
HOST_r3
);

261 #ifde‡
REC_USE_DIRECT_MEM


262 
func_MemRód8_dúe˘_±r
=()
¨mPå
;

263 
	`ªcMemRód8_dúe˘
();

265 
	`JUMPFunc
((
u32
)
MEMREAD8_FUNC
);

266 
	`Upd©eImmedüã
(0);

269 
	}
}

271 
INLINE
 
	$PSXMEMREAD8
() {

272 #ifde‡
DEBUG_CPU


273 
	`dbg
("\t\tPSXMEMREAD8");

275 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

276 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

277 
	`MOV32ItoR
(
HOST_r3
,(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

279 
	`iPutCy˛esAdd
(0);

281 
	`CALLFunc
(
func_MemRód8_±r
);

282 
r2_is_dúty
=1;

283 
	}
}

286 #i‚de‡
REC_USE_MEMORY_FUNCS


287 
INLINE
 
	$PSXMEMREAD16
(){

288 #ifde‡
DEBUG_CPU


289 
	`dbg
("\t\tPSXMEMREAD16");

291 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

292 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

293 
	`iPutCy˛esAdd
(0);

295 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
psxM
);

296 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
,
HOST_r0
,0x0e,0x04));

297 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

298 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x02,0xa));

299 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

300 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

301 
	`wrôe32
(
	`LDRH_REG
(
HOST_r0
,
HOST_r2
,
HOST_r1
));

302 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

303 
	`Upd©eImmedüã
(0);

304 
	`¨mSëJ32
(
j32På
[9]);

305 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

306 
	`iPutCy˛esAdd
(0);

308 #ifde‡
REC_USE_DIRECT_MEM


309 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

311 
	`CALLFunc
((
u32
)
MEMREAD16_FUNC
);

312 
	`¨mSëJ32
(
j32På
[10]);

313 
r2_is_dúty
=1;

314 
	}
}

317 
	gfunc_MemRód16_±r
=0;

319 
	$ªcMemRód16
() {

320 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
psxM
);

321 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
,
HOST_r0
,0x0e,0x04));

322 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

323 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x02,0xa));

324 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

325 
	`wrôe32
(
	`LDRCCH_REG
(
HOST_r0
,
HOST_r2
,
HOST_r1
));

326 
	`wrôe32
(
	`BXCC_LR
());

327 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

328 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
cy˛e_add
,
HOST_r3
);

330 #ifde‡
REC_USE_DIRECT_MEM


331 
func_MemRód16_dúe˘_±r
=()
¨mPå
;

332 
	`ªcMemRód16_dúe˘
();

334 
	`JUMPFunc
((
u32
)
MEMREAD16_FUNC
);

335 
	`Upd©eImmedüã
(0);

338 
	}
}

340 
INLINE
 
	$PSXMEMREAD16
() {

341 #ifde‡
DEBUG_CPU


342 
	`dbg
("\t\tPSXMEMREAD16");

344 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

345 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

346 
	`MOV32ItoR
(
HOST_r3
,(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

348 
	`iPutCy˛esAdd
(0);

350 
	`CALLFunc
(
func_MemRód16_±r
);

351 
r2_is_dúty
=1;

352 
	}
}

355 #i‚de‡
REC_USE_MEMORY_FUNCS


356 
INLINE
 
	$PSXMEMREAD32
(
de°_ªg
){

357 #ifde‡
DEBUG_CPU


358 
	`dbg
("\t\tPSXMEMREAD32");

360 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

361 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

362 
	`iPutCy˛esAdd
(0);

364 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
psxM
);

365 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
,
HOST_r0
,0x0e,0x04));

366 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

367 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x02,0xa));

368 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

369 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

370 
	`wrôe32
(
	`LDR_REG
(
de°_ªg
,
HOST_r2
,
HOST_r1
));

371 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

372 
	`Upd©eImmedüã
(0);

373 
	`¨mSëJ32
(
j32På
[9]);

374 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

375 
	`iPutCy˛esAdd
(0);

377 #ifde‡
REC_USE_DIRECT_MEM


378 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

380 
	`CALLFunc
((
u32
)
MEMREAD32_FUNC
);

381 i‡(
de°_ªg
!=
HOST_r0
)

382 
	`MOV32RtoR
(
de°_ªg
, 
HOST_r0
);

383 
	`¨mSëJ32
(
j32På
[10]);

384 
r2_is_dúty
=1;

385 
	}
}

388 
	gfunc_MemRód32_±r
=0;

390 
	$ªcMemRód32
() {

391 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
psxM
);

392 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
,
HOST_r0
,0x0e,0x04));

393 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

394 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x02,0xa));

395 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

396 
	`wrôe32
(
	`LDRCC_REG
(
HOST_r0
,
HOST_r2
,
HOST_r1
));

397 
	`wrôe32
(
	`BXCC_LR
());

398 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

399 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
cy˛e_add
,
HOST_r3
);

401 #ifde‡
REC_USE_DIRECT_MEM


402 
func_MemRód32_dúe˘_±r
=()
¨mPå
;

403 
	`ªcMemRód32_dúe˘
();

405 
	`JUMPFunc
((
u32
)
MEMREAD32_FUNC
);

406 
	`Upd©eImmedüã
(0);

409 
	}
}

411 
INLINE
 
	$PSXMEMREAD32
(
de°_ªg
) {

412 #ifde‡
DEBUG_CPU


413 
	`dbg
("\t\tPSXMEMREAD32");

415 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

416 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

417 
	`MOV32ItoR
(
HOST_r3
,(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

419 
	`iPutCy˛esAdd
(0);

421 
	`CALLFunc
(
func_MemRód32_±r
);

422 i‡(
de°_ªg
!=
HOST_r0
)

423 
	`MOV32RtoR
(
de°_ªg
, 
HOST_r0
);

424 
r2_is_dúty
=1;

425 
	}
}

428 #i‚de‡
REC_USE_MEMORY_FUNCS


429 
INLINE
 
	$PSXHWREAD8
(){

430 #ifde‡
DEBUG_CPU


431 
	`dbg
("\t\tPSXHWREAD8");

433 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

434 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

435 
	`iPutCy˛esAdd
(0);

437 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

438 
	`wrôe32
(0xe1a02800);

439 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
, 0x7e, 0x1a));

440 
	`wrôe32
(0xe1a02822);

441 
	`wrôe32
(
	`BNE_FWD
(8));

442 
	`wrôe32
(0xe3520a01);

443 
	`wrôe32
(
	`BCC_FWD
(0));

444 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

445 
	`iPutCy˛esAdd
(0);

447 
	`CALLFunc
((
u32
)
psxHwRód8
);

448 
r2_is_dúty
=1;

449 
	}
}

452 
	gfunc_HWRód8_±r
=0;

454 
	$ªcHWRód8
() {

455 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

456 
	`wrôe32
(0xe1a02800);

457 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
, 0x7e, 0x1a));

458 
	`wrôe32
(0xe1a02822);

459 
	`wrôe32
(
	`BXNE_LR
());

460 
	`wrôe32
(0xe3520a01);

461 
	`wrôe32
(
	`BXCC_LR
());

462 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

463 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
cy˛e_add
,
HOST_r3
);

465 
	`JUMPFunc
((
u32
)
psxHwRód8
);

466 
	`Upd©eImmedüã
(0);

467 
	}
}

469 
INLINE
 
	$PSXHWREAD8
(){

470 #ifde‡
DEBUG_CPU


471 
	`dbg
("\t\tPSXHWREAD8");

473 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

474 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

475 
	`MOV32ItoR
(
HOST_r3
,(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

477 
	`iPutCy˛esAdd
(0);

479 
	`CALLFunc
(
func_HWRód8_±r
);

480 
r2_is_dúty
=1;

481 
	}
}

484 #i‚de‡
REC_USE_MEMORY_FUNCS


485 
INLINE
 
	$PSXHWREAD16
(){

486 #ifde‡
DEBUG_CPU


487 
	`dbg
("\t\tPSXHWREAD16");

489 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

490 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

491 
	`iPutCy˛esAdd
(0);

493 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

494 
	`wrôe32
(0xe1a02800);

495 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
, 0x7e, 0x1a));

496 
	`wrôe32
(0xe1a02822);

497 
	`wrôe32
(
	`BNE_FWD
(8));

498 
	`wrôe32
(0xe3520a01);

499 
	`wrôe32
(
	`BCC_FWD
(0));

500 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

501 
	`iPutCy˛esAdd
(0);

503 
	`CALLFunc
((
u32
)
psxHwRód16
);

504 
r2_is_dúty
=1;

505 
	}
}

508 
	gfunc_HWRód16_±r
=0;

510 
	$ªcHWRód16
() {

511 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

512 
	`wrôe32
(0xe1a02800);

513 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
, 0x7e, 0x1a));

514 
	`wrôe32
(0xe1a02822);

515 
	`wrôe32
(
	`BXNE_LR
());

516 
	`wrôe32
(0xe3520a01);

517 
	`wrôe32
(
	`BXCC_LR
());

518 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

519 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
cy˛e_add
,
HOST_r3
);

521 
	`JUMPFunc
((
u32
)
psxHwRód16
);

522 
	`Upd©eImmedüã
(0);

523 
	}
}

525 
INLINE
 
	$PSXHWREAD16
(){

526 #ifde‡
DEBUG_CPU


527 
	`dbg
("\t\tPSXHWREAD16");

529 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

530 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

531 
	`MOV32ItoR
(
HOST_r3
,(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

533 
	`iPutCy˛esAdd
(0);

535 
	`CALLFunc
(
func_HWRód16_±r
);

536 
r2_is_dúty
=1;

537 
	}
}

540 #i‚de‡
REC_USE_MEMORY_FUNCS


541 
INLINE
 
	$PSXHWREAD32
(){

542 #ifde‡
DEBUG_CPU


543 
	`dbg
("\t\tPSXHWREAD32");

545 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

546 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

547 
	`iPutCy˛esAdd
(0);

549 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

550 
	`wrôe32
(0xe1a02800);

551 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
, 0x7e, 0x1a));

552 
	`wrôe32
(0xe1a02822);

553 
	`wrôe32
(
	`BNE_FWD
(8));

554 
	`wrôe32
(0xe3520a01);

555 
	`wrôe32
(
	`BCC_FWD
(0));

556 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

557 
	`iPutCy˛esAdd
(0);

559 
	`CALLFunc
((
u32
)
psxHwRód32
);

560 
r2_is_dúty
=1;

561 
	}
}

564 
	gfunc_HWRód32_±r
=0;

566 
	$ªcHWRód32
() {

567 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

568 
	`wrôe32
(0xe1a02800);

569 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
, 0x7e, 0x1a));

570 
	`wrôe32
(0xe1a02822);

571 
	`wrôe32
(
	`BXNE_LR
());

572 
	`wrôe32
(0xe3520a01);

573 
	`wrôe32
(
	`BXCC_LR
());

574 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

575 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
cy˛e_add
,
HOST_r3
);

577 
	`JUMPFunc
((
u32
)
psxHwRód32
);

578 
	`Upd©eImmedüã
(0);

579 
	}
}

581 
INLINE
 
	$PSXHWREAD32
(){

582 #ifde‡
DEBUG_CPU


583 
	`dbg
("\t\tPSXHWREAD32");

585 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

586 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

587 
	`MOV32ItoR
(
HOST_r3
,(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

589 
	`iPutCy˛esAdd
(0);

591 
	`CALLFunc
(
func_HWRód32_±r
);

592 
r2_is_dúty
=1;

593 
	}
}

596 #i‡!
deföed
(
REC_USE_MEMORY_FUNCS
Ë|| deföed(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

597 
INLINE
 
	$PSXMEMWRITE8
(
§c_ªg
){

598 #ifde‡
DEBUG_CPU


599 
	`dbg
("\t\tPSXMEMWRITE8");

601 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

602 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

603 
	`iPutCy˛esAdd
(0);

605 
has_bìn_wrôãn
=1;

606 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
psxM
);

607 
	`wrôe32
(
	`BIC_IMM
(
HOST_Ã
,
HOST_r0
,0x0e,0x04));

608 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

609 
	`wrôe32
(
	`CMP_IMM
(
HOST_Ã
,0x02,0xa));

610 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

611 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

612 
	`wrôe32
(
	`STRB_REG
(
§c_ªg
,
HOST_r2
,
HOST_ù
));

613 i‡(
ªc_£cuª_wrôes
) {

614 
	`wrôe32
(
	`BIC_IMM
(
HOST_r0
,HOST_r0,3,0));

615 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
,
HOST_r0
,16));

616 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
ª£rved
);

617 
	`wrôe32
(
	`LDR_REG_LSL
(
HOST_r2
, HOST_r2, 
HOST_ù
, 2));

618 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

619 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r0
,
HOST_ù
,16));

620 
	`wrôe32
(
	`MOV_IMM
(
HOST_ù
,0,0));

621 
	`wrôe32
(
	`STR_REG
(
HOST_ù
,
HOST_r0
,
HOST_r2
));

623 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

624 
	`Upd©eImmedüã
(0);

625 
	`¨mSëJ32
(
j32På
[9]);

626 i‡(
§c_ªg
!=
HOST_r1
)

627 
	`MOV32RtoR
(
HOST_r1
,
§c_ªg
);

628 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

629 
	`iPutCy˛esAdd
(0);

631 #ifde‡
REC_USE_DIRECT_MEM


632 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

634 
	`CALLFunc
((
u32
)
MEMWRITE8_FUNC
);

635 
	`¨mSëJ32
(
j32På
[10]);

636 
r2_is_dúty
=1;

637 
	}
}

640 
	gfunc_MemWrôe8_±r
=0;

642 
	$ªcMemWrôe8
() {

643 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
psxM
);

644 
	`wrôe32
(
	`BIC_IMM
(
HOST_r3
,
HOST_r0
,0x0e,0x04));

645 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

646 
	`wrôe32
(
	`CMP_IMM
(
HOST_r3
,0x02,0xa));

647 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

648 i‡(
ªc_£cuª_wrôes
) {

649 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

650 
	`wrôe32
(
	`STRB_REG
(
HOST_r1
,
HOST_r2
,
HOST_ù
));

651 
	`wrôe32
(
	`BIC_IMM
(
HOST_r0
,HOST_r0,3,0));

652 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
,
HOST_r0
,16));

653 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
ª£rved
);

654 
	`wrôe32
(
	`LDR_REG_LSL
(
HOST_r2
, HOST_r2, 
HOST_ù
, 2));

655 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

656 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r0
,
HOST_ù
,16));

657 
	`wrôe32
(
	`MOV_IMM
(
HOST_ù
,0,0));

658 
	`wrôe32
(
	`STR_REG
(
HOST_ù
,
HOST_r0
,
HOST_r2
));

659 
	`wrôe32
(
	`BX_LR
());

660 
	`¨mSëJ32
(
j32På
[9]);

662 
	`wrôe32
(
	`STRCCB_REG
(
HOST_r1
,
HOST_r2
,
HOST_ù
));

663 
	`wrôe32
(
	`BXCC_LR
());

665 #ifde‡
REC_USE_DIRECT_MEM


666 
func_MemWrôe8_dúe˘_±r
=()
¨mPå
;

667 
	`ªcMemWrôe8_dúe˘
();

669 
	`JUMPFunc
((
u32
)
MEMWRITE8_FUNC
);

670 
	`Upd©eImmedüã
(0);

673 
	}
}

675 
INLINE
 
	$PSXMEMWRITE8
(
§c_ªg
){

676 #ifde‡
DEBUG_CPU


677 
	`dbg
("\t\tPSXMEMWRITE8");

679 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

680 
	`iPutCy˛esAdd
(0);

681 
has_bìn_wrôãn
=1;

682 i‡(
§c_ªg
!=
HOST_r1
)

683 
	`MOV32RtoR
(
HOST_r1
,
§c_ªg
);

684 
	`CALLFunc
(
func_MemWrôe8_±r
);

685 
r2_is_dúty
=1;

686 
	}
}

689 #i‡!
deföed
(
REC_USE_MEMORY_FUNCS
Ë|| deföed(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

690 
INLINE
 
	$PSXMEMWRITE16
(
§c_ªg
){

691 #ifde‡
DEBUG_CPU


692 
	`dbg
("\t\tPSXMEMWRITE16");

694 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

695 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

696 
	`iPutCy˛esAdd
(0);

698 
has_bìn_wrôãn
=1;

699 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
psxM
);

700 
	`wrôe32
(
	`BIC_IMM
(
HOST_Ã
,
HOST_r0
,0x0e,0x04));

701 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

702 
	`wrôe32
(
	`CMP_IMM
(
HOST_Ã
,0x02,0xa));

703 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

704 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

705 
	`wrôe32
(
	`STRH_REG
(
§c_ªg
,
HOST_r2
,
HOST_ù
));

706 i‡(
ªc_£cuª_wrôes
) {

707 
	`wrôe32
(
	`BIC_IMM
(
HOST_r0
,HOST_r0,3,0));

708 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
,
HOST_r0
,16));

709 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
ª£rved
);

710 
	`wrôe32
(
	`LDR_REG_LSL
(
HOST_r2
, HOST_r2, 
HOST_ù
, 2));

711 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

712 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r0
,
HOST_ù
,16));

713 
	`wrôe32
(
	`MOV_IMM
(
HOST_ù
,0,0));

714 
	`wrôe32
(
	`STR_REG
(
HOST_ù
,
HOST_r0
,
HOST_r2
));

716 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

717 
	`Upd©eImmedüã
(0);

718 
	`¨mSëJ32
(
j32På
[9]);

719 i‡(
§c_ªg
!=
HOST_r1
)

720 
	`MOV32RtoR
(
HOST_r1
,
§c_ªg
);

721 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

722 
	`iPutCy˛esAdd
(0);

724 #ifde‡
REC_USE_DIRECT_MEM


725 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

727 
	`CALLFunc
((
u32
)
MEMWRITE16_FUNC
);

728 
	`¨mSëJ32
(
j32På
[10]);

729 
r2_is_dúty
=1;

730 
	}
}

733 
	gfunc_MemWrôe16_±r
=0;

735 
	$ªcMemWrôe16
() {

736 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
psxM
);

737 
	`wrôe32
(
	`BIC_IMM
(
HOST_r3
,
HOST_r0
,0x0e,0x04));

738 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

739 
	`wrôe32
(
	`CMP_IMM
(
HOST_r3
,0x02,0xa));

740 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

741 i‡(
ªc_£cuª_wrôes
) {

742 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

743 
	`wrôe32
(
	`STRH_REG
(
HOST_r1
,
HOST_r2
,
HOST_ù
));

744 
	`wrôe32
(
	`BIC_IMM
(
HOST_r0
,HOST_r0,3,0));

745 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
,
HOST_r0
,16));

746 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
ª£rved
);

747 
	`wrôe32
(
	`LDR_REG_LSL
(
HOST_r2
, HOST_r2, 
HOST_ù
, 2));

748 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

749 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r0
,
HOST_ù
,16));

750 
	`wrôe32
(
	`MOV_IMM
(
HOST_ù
,0,0));

751 
	`wrôe32
(
	`STR_REG
(
HOST_ù
,
HOST_r0
,
HOST_r2
));

752 
	`wrôe32
(
	`BX_LR
());

753 
	`¨mSëJ32
(
j32På
[9]);

755 
	`wrôe32
(
	`STRCCH_REG
(
HOST_r1
,
HOST_r2
,
HOST_ù
));

756 
	`wrôe32
(
	`BXCC_LR
());

758 #ifde‡
REC_USE_DIRECT_MEM


759 
func_MemWrôe16_dúe˘_±r
=()
¨mPå
;

760 
	`ªcMemWrôe16_dúe˘
();

762 
	`JUMPFunc
((
u32
)
MEMWRITE16_FUNC
);

763 
	`Upd©eImmedüã
(0);

765 
	}
}

767 
INLINE
 
	$PSXMEMWRITE16
(
§c_ªg
){

768 #ifde‡
DEBUG_CPU


769 
	`dbg
("\t\tPSXMEMWRITE16");

771 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

772 
	`iPutCy˛esAdd
(0);

773 
has_bìn_wrôãn
=1;

774 i‡(
§c_ªg
!=
HOST_r1
)

775 
	`MOV32RtoR
(
HOST_r1
,
§c_ªg
);

776 
	`CALLFunc
(
func_MemWrôe16_±r
);

777 
r2_is_dúty
=1;

778 
	}
}

781 #i‡!
deföed
(
REC_USE_MEMORY_FUNCS
Ë|| deföed(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

782 
INLINE
 
	$PSXMEMWRITE32
(
§c_ªg
){

783 #ifde‡
DEBUG_CPU


784 
	`dbg
("\t\tPSXMEMWRITE32");

786 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

787 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

788 
	`iPutCy˛esAdd
(0);

790 
has_bìn_wrôãn
=1;

791 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
psxM
);

792 
	`wrôe32
(
	`BIC_IMM
(
HOST_Ã
,
HOST_r0
,0x0e,0x04));

793 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

794 
	`wrôe32
(
	`CMP_IMM
(
HOST_Ã
,0x02,0xa));

795 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

796 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

797 
	`wrôe32
(
	`STR_REG
(
§c_ªg
,
HOST_r2
,
HOST_ù
));

798 i‡(
ªc_£cuª_wrôes
) {

799 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
,
HOST_r0
,16));

800 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
ª£rved
);

801 
	`wrôe32
(
	`LDR_REG_LSL
(
HOST_r2
, HOST_r2, 
HOST_ù
, 2));

802 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

803 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r0
,
HOST_ù
,16));

804 
	`wrôe32
(
	`MOV_IMM
(
HOST_ù
,0,0));

805 
	`wrôe32
(
	`STR_REG
(
HOST_ù
,
HOST_r0
,
HOST_r2
));

807 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

808 
	`Upd©eImmedüã
(0);

809 
	`¨mSëJ32
(
j32På
[9]);

810 i‡(
§c_ªg
!=
HOST_r1
)

811 
	`MOV32RtoR
(
HOST_r1
,
§c_ªg
);

812 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

813 
	`iPutCy˛esAdd
(0);

815 #ifde‡
REC_USE_DIRECT_MEM


816 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

818 
	`CALLFunc
((
u32
)
MEMWRITE32_FUNC
);

819 
	`¨mSëJ32
(
j32På
[10]);

820 
r2_is_dúty
=1;

821 
	}
}

824 
	gfunc_MemWrôe32_±r
=0;

826 
	$ªcMemWrôe32
() {

827 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
psxM
);

828 
	`wrôe32
(
	`BIC_IMM
(
HOST_r3
,
HOST_r0
,0x0e,0x04));

829 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

830 
	`wrôe32
(
	`CMP_IMM
(
HOST_r3
,0x02,0xa));

831 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

832 i‡(
ªc_£cuª_wrôes
) {

833 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

834 
	`wrôe32
(
	`STR_REG
(
HOST_r1
,
HOST_r2
,
HOST_ù
));

835 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
,
HOST_r0
,16));

836 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
ª£rved
);

837 
	`wrôe32
(
	`LDR_REG_LSL
(
HOST_r2
, HOST_r2, 
HOST_ù
, 2));

838 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
,
HOST_r0
,16));

839 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r0
,
HOST_ù
,16));

840 
	`wrôe32
(
	`MOV_IMM
(
HOST_ù
,0,0));

841 
	`wrôe32
(
	`STR_REG
(
HOST_ù
,
HOST_r0
,
HOST_r2
));

842 
	`wrôe32
(
	`BX_LR
());

843 
	`¨mSëJ32
(
j32På
[9]);

845 
	`wrôe32
(
	`STRCC_REG
(
HOST_r1
,
HOST_r2
,
HOST_ù
));

846 
	`wrôe32
(
	`BXCC_LR
());

848 #ifde‡
REC_USE_DIRECT_MEM


849 
func_MemWrôe32_dúe˘_±r
=()
¨mPå
;

850 
	`ªcMemWrôe32_dúe˘
();

852 
	`JUMPFunc
((
u32
)
MEMWRITE32_FUNC
);

853 
	`Upd©eImmedüã
(0);

856 
	}
}

858 
INLINE
 
	$PSXMEMWRITE32
(
§c_ªg
){

859 #ifde‡
DEBUG_CPU


860 
	`dbg
("\t\tPSXMEMWRITE32");

862 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

863 
	`iPutCy˛esAdd
(0);

864 
has_bìn_wrôãn
=1;

865 i‡(
§c_ªg
!=
HOST_r1
)

866 
	`MOV32RtoR
(
HOST_r1
,
§c_ªg
);

867 
	`CALLFunc
(
func_MemWrôe32_±r
);

868 
r2_is_dúty
=1;

869 
	}
}

873 
	$iPushOfB
() {

874 i‡(
	`IsC⁄°
(
_Rs_
)) {

875 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rs_
].
k
 + 
_Imm_
);

878 
	`MOVADD32ItoR
(
HOST_r0
, 
	`RódReg
(
_Rs_
), 
_Imm_
);

880 
	}
}

883 
	$ªcLB
() {

885 i‡(!
ªc_pha£
) {

886 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

887 i‡(
	`IsC⁄°
(
_Rs_
)) {

888 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

889 
t
 = 
addr
 >> 16;

890 i‡((
t
 & 0xfff0) == 0xbfc0) {

891 i‡(
_Rt_
) {

892 
	`M≠C⁄°
(
_Rt_
, 
	`psxRs8
(
addr
));

897 
	`RódReg
(
_Rs_
);

899 i‡(
_Rt_
) {

900 
	`WrôeReg
(
_Rt_
);

904 #ifde‡
DEBUG_CPU


905 
	`dbgf
("\t\åecLB R%òmem[R%ò+ %i]\n",
_Rt_
,
_Rs_
,
_Imm_
);

907 i‡(
	`IsC⁄°
(
_Rs_
)) {

908 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

909 
t
 = 
addr
 >> 16;

911 i‡((
t
 & 0xfff0) == 0xbfc0) {

912 i‡(
_Rt_
) {

913 
	`M≠C⁄°
(
_Rt_
, 
	`psxRs8
(
addr
));

917 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

918 i‡(
_Rt_
) {

919 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

920 
	`MOVSX32M8toR
(
π
, (
u32
)&
psxM
[
addr
 & 0x1fffff]);

924 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

925 i‡(
_Rt_
) {

926 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

927 
	`MOVSX32M8toR
(
π
, (
u32
)&
psxH
[
addr
 & 0xfff]);

931 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

932 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

933 
	`iPutCy˛esAdd
(0);

934 
	`MOV32ItoR
(
HOST_r0
,
addr
);

935 
	`iLockReg
(3);

936 
	`CALLFunc
((
u32
)
psxHwRód8
);

937 
	`iU∆ockReg
(3);

938 
r2_is_dúty
=1;

939 i‡(
_Rt_
) {

940 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

941 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 24) );

942 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
π
, 
HOST_r0
, 24) );

949 
bcode
=
psxRegs
.
code
;

950 
bpc
=
pc
;

951 
n
=0;

952 
immba£
=
_Imm_
;

953 
imm
[
REC_MAX_RWLOOP
+1];

954 
π
[
REC_MAX_RWLOOP
+1];

955 
rs
=
_Rs_
;

956 (
psxRegs
.
code
>>26)==32 && 
rs
==
_Rs_
 && 
_Rt_
 && _Rs_!=_Rt_ && 
n
<
REC_MAX_RWLOOP
 && !
bønch
) {

957 i‡(
_Imm_
<
immba£
) {

958 i‡(
immba£
-
_Imm_
>
REC_MAX_RWLOOP_SIZE
) ;

960 i‡(
_Imm_
-
immba£
>
REC_MAX_RWLOOP_SIZE
) ;

962 #ifde‡
REC_USE_2ND_PHASE


963 i‡(
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
+
n
].
jum≥d
) ;

965 
imm
[
n
]=
_Imm_
;

966 
π
[
n
]=
_Rt_
;

967 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

968 
pc
 += 4;

969 
n
++;

971 
psxRegs
.
code
=
bcode
;

972 
pc
=
bpc
;

974 
	`iLockReg
(3);

975 
	`iPushOfB
();

977 i‡(
n
<=1) {

978 i‡(
_Rt_
) {

979 
	`PSXMEMREAD8
();

980 
u32
 
ºt
=
	`WrôeReg
(
_Rt_
);

981 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 24) );

982 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
ºt
, 
HOST_r0
, 24) );

984 
	`PSXHWREAD8
();

987 i‡(
autobüs
Ë
cy˛es_≥ndög
+=
n
;

988 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

989 
	`iPutCy˛esAdd
(0);

991 
i
;

992 
de°_ªg0
=
	`WrôeReg
(
_Rt_
);

993 
de°_ªg
;

994 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
psxM
);

995 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
,
HOST_r0
,0x0e,0x04));

996 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

997 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x02,0xa));

998 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

999 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

1000 
	`wrôe32
(
	`LDRB_REG
(
HOST_ù
,
HOST_r2
,
HOST_r1
));

1001 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_ù
, HOST_ip, 24) );

1002 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
de°_ªg0
, 
HOST_ù
, 24) );

1003 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

1004 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

1005 
i
=1;i<
n
;i++) {

1006 
diff
=
imm
[
i
]-imm[i-1];

1007 i‡(
diff
>0) {

1008 
	`ADD32ItoR
(
HOST_r2
,
diff
);

1009 } i‡(
diff
<0) {

1010 
	`SUB32ItoR
(
HOST_r2
,-
diff
);

1012 i‡(!
	`IsC⁄°
(
_Rs_
)Ë
	`RódReg
(_Rs_);

1013 
de°_ªg
=
	`WrôeReg
(
π
[
i
]);

1014 
	`wrôe32
(
	`LDRB_REG
(
HOST_ù
,
HOST_r2
,
HOST_r1
));

1015 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_ù
, HOST_ip, 24) );

1016 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
de°_ªg
, 
HOST_ù
, 24) );

1018 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

1019 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

1020 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1021 
	`Upd©eImmedüã
(0);

1022 
	`¨mSëJ32
(
j32På
[9]);

1023 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

1024 
	`iPutCy˛esAdd
(0);

1026 #i‚de‡
REC_USE_MEMORY_FUNCS


1027 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

1029 
	`CALLFunc
((
u32
)
MEMREAD8_FUNC
);

1030 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 24) );

1031 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
de°_ªg0
, 
HOST_r0
, 24) );

1032 
i
=1;i<
n
;i++) {

1033 
diff
=
imm
[
i
]-imm[0];

1034 i‡(
	`IsC⁄°
(
_Rs_
)) {

1035 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rs_
].
k
 + 
imm
[
i
]);

1037 
	`MOVADD32ItoR
(
HOST_r0
, 
	`RódReg
(
_Rs_
), 
imm
[
i
]);

1039 
de°_ªg
=
	`WrôeReg
(
π
[
i
]);

1040 #i‚de‡
REC_USE_MEMORY_FUNCS


1041 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

1043 
	`CALLFunc
((
u32
)
MEMREAD8_FUNC
);

1044 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 24) );

1045 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
de°_ªg
, 
HOST_r0
, 24) );

1047 
	`¨mSëJ32
(
j32På
[10]);

1048 
pc
+=(
n
-1)*4;

1049 
ªc_›codes
=
n
;

1051 
	`iU∆ockReg
(3);

1052 
r2_is_dúty
=1;

1053 
	}
}

1056 
	$ªcLBU
() {

1058 i‡(!
ªc_pha£
) {

1059 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

1060 i‡(
	`IsC⁄°
(
_Rs_
)) {

1061 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

1062 
t
 = 
addr
 >> 16;

1063 i‡((
t
 & 0xfff0) == 0xbfc0) {

1064 i‡(
_Rt_
) {

1065 
	`M≠C⁄°
(
_Rt_
, 
	`psxRu8
(
addr
));

1070 
	`RódReg
(
_Rs_
);

1072 i‡(
_Rt_
) {

1073 
	`WrôeReg
(
_Rt_
);

1077 #ifde‡
DEBUG_CPU


1078 
	`dbgf
("\t\åecLBU R%òmem[R%ò+ %i]\n",
_Rt_
,
_Rs_
,
_Imm_
);

1080 i‡(
	`IsC⁄°
(
_Rs_
)) {

1081 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

1082 
t
 = 
addr
 >> 16;

1084 i‡((
t
 & 0xfff0) == 0xbfc0) {

1085 i‡(
_Rt_
) {

1086 
	`M≠C⁄°
(
_Rt_
, 
	`psxRu8
(
addr
));

1090 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

1091 i‡(
_Rt_
) {

1092 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1093 
	`MOVZX32M8toR
(
π
, (
u32
)&
psxM
[
addr
 & 0x1fffff]);

1097 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

1098 i‡(
_Rt_
) {

1099 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1100 
	`MOVZX32M8toR
(
π
, (
u32
)&
psxH
[
addr
 & 0xfff]);

1104 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

1105 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

1106 
	`iPutCy˛esAdd
(0);

1107 
	`MOV32ItoR
(
HOST_r0
,
addr
);

1108 
	`iLockReg
(3);

1109 
	`CALLFunc
((
u32
)
psxHwRód8
);

1110 
	`iU∆ockReg
(3);

1111 
r2_is_dúty
=1;

1112 i‡(
_Rt_
) {

1113 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1114 
	`wrôe32
–
	`AND_IMM
(
π
, 
HOST_r0
, 0xff, 0) );

1121 
bcode
=
psxRegs
.
code
;

1122 
bpc
=
pc
;

1123 
n
=0;

1124 
immba£
=
_Imm_
;

1125 
imm
[
REC_MAX_RWLOOP
+1];

1126 
π
[
REC_MAX_RWLOOP
+1];

1127 
rs
=
_Rs_
;

1128 (
psxRegs
.
code
>>26)==36 && 
rs
==
_Rs_
 && 
_Rt_
 && _Rs_!=_Rt_ && 
n
<
REC_MAX_RWLOOP
 && !
bønch
) {

1129 i‡(
_Imm_
<
immba£
) {

1130 i‡(
immba£
-
_Imm_
>
REC_MAX_RWLOOP_SIZE
) ;

1132 i‡(
_Imm_
-
immba£
>
REC_MAX_RWLOOP_SIZE
) ;

1134 #ifde‡
REC_USE_2ND_PHASE


1135 i‡(
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
+
n
].
jum≥d
) ;

1137 
imm
[
n
]=
_Imm_
;

1138 
π
[
n
]=
_Rt_
;

1139 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

1140 
pc
 += 4;

1141 
n
++;

1143 
psxRegs
.
code
=
bcode
;

1144 
pc
=
bpc
;

1146 
	`iLockReg
(3);

1147 
	`iPushOfB
();

1149 i‡(
n
<=1) {

1150 i‡(
_Rt_
) {

1151 
	`PSXMEMREAD8
();

1152 
u32
 
ºt
=
	`WrôeReg
(
_Rt_
);

1153 
	`wrôe32
–
	`AND_IMM
(
ºt
, 
HOST_r0
, 0xff, 0) );

1155 
	`PSXHWREAD8
();

1158 i‡(
autobüs
Ë
cy˛es_≥ndög
+=
n
;

1159 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

1160 
	`iPutCy˛esAdd
(0);

1162 
i
;

1163 
de°_ªg0
=
	`WrôeReg
(
_Rt_
);

1164 
de°_ªg
;

1165 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
psxM
);

1166 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
,
HOST_r0
,0x0e,0x04));

1167 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

1168 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x02,0xa));

1169 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

1170 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

1171 
	`wrôe32
(
	`LDRB_REG
(
HOST_ù
,
HOST_r2
,
HOST_r1
));

1172 
	`wrôe32
–
	`AND_IMM
(
de°_ªg0
, 
HOST_ù
, 0xff, 0) );

1173 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

1174 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

1175 
i
=1;i<
n
;i++) {

1176 
diff
=
imm
[
i
]-imm[i-1];

1177 i‡(
diff
>0) {

1178 
	`ADD32ItoR
(
HOST_r2
,
diff
);

1179 } i‡(
diff
<0) {

1180 
	`SUB32ItoR
(
HOST_r2
,-
diff
);

1182 i‡(!
	`IsC⁄°
(
_Rs_
)Ë
	`RódReg
(_Rs_);

1183 
de°_ªg
=
	`WrôeReg
(
π
[
i
]);

1184 
	`wrôe32
(
	`LDRB_REG
(
HOST_ù
,
HOST_r2
,
HOST_r1
));

1185 
	`wrôe32
–
	`AND_IMM
(
de°_ªg
, 
HOST_ù
, 0xff, 0) );

1187 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

1188 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

1189 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1190 
	`Upd©eImmedüã
(0);

1191 
	`¨mSëJ32
(
j32På
[9]);

1192 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

1193 
	`iPutCy˛esAdd
(0);

1195 #i‚de‡
REC_USE_MEMORY_FUNCS


1196 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

1198 
	`CALLFunc
((
u32
)
MEMREAD8_FUNC
);

1199 
	`wrôe32
–
	`AND_IMM
(
de°_ªg0
, 
HOST_r0
, 0xff, 0) );

1201 
i
=1;i<
n
;i++) {

1202 
diff
=
imm
[
i
]-imm[0];

1203 i‡(
	`IsC⁄°
(
_Rs_
)) {

1204 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rs_
].
k
 + 
imm
[
i
]);

1206 
	`MOVADD32ItoR
(
HOST_r0
, 
	`RódReg
(
_Rs_
), 
imm
[
i
]);

1208 
de°_ªg
=
	`WrôeReg
(
π
[
i
]);

1209 #i‚de‡
REC_USE_MEMORY_FUNCS


1210 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

1212 
	`CALLFunc
((
u32
)
MEMREAD8_FUNC
);

1213 
	`wrôe32
–
	`AND_IMM
(
de°_ªg
, 
HOST_r0
, 0xff, 0) );

1215 
	`¨mSëJ32
(
j32På
[10]);

1216 
pc
+=(
n
-1)*4;

1217 
ªc_›codes
=
n
;

1219 
	`iU∆ockReg
(3);

1220 
r2_is_dúty
=1;

1221 
	}
}

1224 
	$ªcLH
() {

1226 i‡(!
ªc_pha£
) {

1227 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

1228 i‡(
	`IsC⁄°
(
_Rs_
)) {

1229 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

1230 
t
 = 
addr
 >> 16;

1231 i‡((
t
 & 0xfff0) == 0xbfc0) {

1232 i‡(
_Rt_
) {

1233 
	`M≠C⁄°
(
_Rt_
, 
	`psxRs16
(
addr
));

1238 
	`RódReg
(
_Rs_
);

1240 i‡(
_Rt_
) {

1241 
	`WrôeReg
(
_Rt_
);

1245 #ifde‡
DEBUG_CPU


1246 
	`dbgf
("\t\åecLH R%òmem[R%ò+ %i]\n",
_Rt_
,
_Rs_
,
_Imm_
);

1248 i‡(
	`IsC⁄°
(
_Rs_
)) {

1249 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

1250 
t
 = 
addr
 >> 16;

1252 i‡((
t
 & 0xfff0) == 0xbfc0) {

1253 i‡(
_Rt_
) {

1254 
	`M≠C⁄°
(
_Rt_
, 
	`psxRs16
(
addr
));

1258 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

1259 i‡(
_Rt_
) {

1260 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1261 
	`MOVSX32M16toR
(
π
, (
u32
)&
psxM
[
addr
 & 0x1fffff]);

1265 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

1266 i‡(
_Rt_
) {

1267 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1268 
	`MOVSX32M16toR
(
π
, (
u32
)&
psxH
[
addr
 & 0xfff]);

1272 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

1273 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

1274 
	`iPutCy˛esAdd
(0);

1275 
	`MOV32ItoR
(
HOST_r0
,
addr
);

1276 
	`iLockReg
(3);

1277 
	`CALLFunc
((
u32
)
psxHwRód16
);

1278 
	`iU∆ockReg
(3);

1279 
r2_is_dúty
=1;

1280 i‡(
_Rt_
) {

1281 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1282 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 16) );

1283 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
π
, 
HOST_r0
, 16) );

1290 
bcode
=
psxRegs
.
code
;

1291 
bpc
=
pc
;

1292 
n
=0;

1293 
immba£
=
_Imm_
;

1294 
imm
[
REC_MAX_RWLOOP
+1];

1295 
π
[
REC_MAX_RWLOOP
+1];

1296 
rs
=
_Rs_
;

1297 (
psxRegs
.
code
>>26)==33 && 
rs
==
_Rs_
 && 
_Rt_
 && _Rs_!=_Rt_ && 
n
<
REC_MAX_RWLOOP
 && !
bønch
) {

1298 i‡(
_Imm_
<
immba£
) {

1299 i‡(
immba£
-
_Imm_
>
REC_MAX_RWLOOP_SIZE
) ;

1301 i‡(
_Imm_
-
immba£
>
REC_MAX_RWLOOP_SIZE
) ;

1303 #ifde‡
REC_USE_2ND_PHASE


1304 i‡(
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
+
n
].
jum≥d
) ;

1306 
imm
[
n
]=
_Imm_
;

1307 
π
[
n
]=
_Rt_
;

1308 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

1309 
pc
 += 4;

1310 
n
++;

1312 
psxRegs
.
code
=
bcode
;

1313 
pc
=
bpc
;

1315 
	`iLockReg
(3);

1316 
	`iPushOfB
();

1318 i‡(
n
<=1) {

1319 i‡(
_Rt_
) {

1320 
	`PSXMEMREAD16
();

1321 
u32
 
ºt
=
	`WrôeReg
(
_Rt_
);

1322 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 16) );

1323 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
ºt
, 
HOST_r0
, 16) );

1325 
	`PSXHWREAD16
();

1328 i‡(
autobüs
Ë
cy˛es_≥ndög
+=
n
;

1329 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

1330 
	`iPutCy˛esAdd
(0);

1332 
i
;

1333 
de°_ªg0
=
	`WrôeReg
(
_Rt_
);

1334 
de°_ªg
;

1335 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
psxM
);

1336 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
,
HOST_r0
,0x0e,0x04));

1337 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

1338 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x02,0xa));

1339 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

1340 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

1341 
	`wrôe32
(
	`LDRH_REG
(
HOST_ù
,
HOST_r2
,
HOST_r1
));

1342 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_ù
, HOST_ip, 16) );

1343 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
de°_ªg0
, 
HOST_ù
, 16) );

1344 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

1345 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

1346 
i
=1;i<
n
;i++) {

1347 
diff
=
imm
[
i
]-imm[i-1];

1348 i‡(
diff
>0) {

1349 
	`ADD32ItoR
(
HOST_r2
,
diff
);

1350 } i‡(
diff
<0) {

1351 
	`SUB32ItoR
(
HOST_r2
,-
diff
);

1353 i‡(!
	`IsC⁄°
(
_Rs_
)Ë
	`RódReg
(_Rs_);

1354 
de°_ªg
=
	`WrôeReg
(
π
[
i
]);

1355 
	`wrôe32
(
	`LDRH_REG
(
HOST_ù
,
HOST_r2
,
HOST_r1
));

1356 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_ù
, HOST_ip, 16) );

1357 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
de°_ªg
, 
HOST_ù
, 16) );

1359 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

1360 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

1361 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1362 
	`Upd©eImmedüã
(0);

1363 
	`¨mSëJ32
(
j32På
[9]);

1364 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

1365 
	`iPutCy˛esAdd
(0);

1367 #i‚de‡
REC_USE_MEMORY_FUNCS


1368 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

1370 
	`CALLFunc
((
u32
)
MEMREAD16_FUNC
);

1371 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 16) );

1372 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
de°_ªg0
, 
HOST_r0
, 16) );

1373 
i
=1;i<
n
;i++) {

1374 
diff
=
imm
[
i
]-imm[0];

1375 i‡(
	`IsC⁄°
(
_Rs_
)) {

1376 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rs_
].
k
 + 
imm
[
i
]);

1378 
	`MOVADD32ItoR
(
HOST_r0
, 
	`RódReg
(
_Rs_
), 
imm
[
i
]);

1380 
de°_ªg
=
	`WrôeReg
(
π
[
i
]);

1381 #i‚de‡
REC_USE_MEMORY_FUNCS


1382 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

1384 
	`CALLFunc
((
u32
)
MEMREAD16_FUNC
);

1385 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 16) );

1386 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
de°_ªg
, 
HOST_r0
, 16) );

1388 
	`¨mSëJ32
(
j32På
[10]);

1389 
pc
+=(
n
-1)*4;

1390 
ªc_›codes
=
n
;

1392 
	`iU∆ockReg
(3);

1393 
r2_is_dúty
=1;

1394 
	}
}

1397 
	$ªcLHU
() {

1399 i‡(!
ªc_pha£
) {

1400 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

1401 i‡(
	`IsC⁄°
(
_Rs_
)) {

1402 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

1403 
t
 = 
addr
 >> 16;

1404 i‡((
t
 & 0xfff0) == 0xbfc0) {

1405 i‡(
_Rt_
) {

1406 
	`M≠C⁄°
(
_Rt_
, 
	`psxRu16
(
addr
));

1411 
	`RódReg
(
_Rs_
);

1413 i‡(
_Rt_
) {

1414 
	`WrôeReg
(
_Rt_
);

1418 #ifde‡
DEBUG_CPU


1419 
	`dbgf
("\t\åecLHU R%òmem[R%ò+ %i]\n",
_Rt_
,
_Rs_
,
_Imm_
);

1421 i‡(
	`IsC⁄°
(
_Rs_
)) {

1422 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

1423 
t
 = 
addr
 >> 16;

1425 i‡((
t
 & 0xfff0) == 0xbfc0) {

1426 i‡(
_Rt_
) {

1427 
	`M≠C⁄°
(
_Rt_
, 
	`psxRu16
(
addr
));

1431 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

1432 i‡(
_Rt_
) {

1433 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1434 
	`MOVZX32M16toR
(
π
, (
u32
)&
psxM
[
addr
 & 0x1fffff]);

1438 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

1439 i‡(
_Rt_
) {

1440 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1441 
	`MOVZX32M16toR
(
π
, (
u32
)&
psxH
[
addr
 & 0xfff]);

1445 i‡(
t
 == 0x1f80) {

1446 i‡(
addr
 >= 0x1f801c00 &&áddr < 0x1f801e00) {

1447 i‡(
_Rt_
) {

1448 
	`MOV32ItoR
(
HOST_r0
, 
addr
);

1449 
	`iLockReg
(3);

1450 
	`CALLFunc
((
u32
)&
SPU_ªadRegi°î
);

1451 
	`iU∆ockReg
(3);

1452 
r2_is_dúty
=1;

1453 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1454 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 16) );

1455 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
π
, 
HOST_r0
, 16) );

1459 
addr
) {

1461 i‡(
_Rt_
) {

1462 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

1463 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

1464 
	`iPutCy˛esAdd
(0);

1466 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

1467 
cy˛es_≥ndög
=0;

1468 
pcﬁd
=
pc
;

1470 
	`MOV32ItoR
(
HOST_r0
, (
addr
 >> 4) & 0x3);

1471 
	`iLockReg
(3);

1472 
	`CALLFunc
((
u32
)
psxR˙tRcou¡
);

1473 
	`iU∆ockReg
(3);

1474 
r2_is_dúty
=1;

1475 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1476 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 16) );

1477 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
π
, 
HOST_r0
, 16) );

1482 i‡(
_Rt_
) {

1483 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

1484 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

1485 
	`iPutCy˛esAdd
(0);

1487 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

1488 
cy˛es_≥ndög
=0;

1489 
pcﬁd
=
pc
;

1491 
	`MOV32ItoR
(
HOST_r0
, (
addr
 >> 4) & 0x3);

1492 
	`iLockReg
(3);

1493 
	`CALLFunc
((
u32
)
psxR˙tRmode
);

1494 
	`iU∆ockReg
(3);

1495 
r2_is_dúty
=1;

1496 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1497 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 16) );

1498 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
π
, 
HOST_r0
, 16) );

1503 i‡(
_Rt_
) {

1504 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

1505 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

1506 
	`iPutCy˛esAdd
(0);

1508 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

1509 
cy˛es_≥ndög
=0;

1510 
pcﬁd
=
pc
;

1512 
	`MOV32ItoR
(
HOST_r0
, (
addr
 >> 4) & 0x3);

1513 
	`iLockReg
(3);

1514 
	`CALLFunc
((
u32
)
psxR˙tRèrgë
);

1515 
	`iU∆ockReg
(3);

1516 
r2_is_dúty
=1;

1517 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1518 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 16) );

1519 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
π
, 
HOST_r0
, 16) );

1524 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

1525 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

1526 
	`iPutCy˛esAdd
(0);

1527 
	`MOV32ItoR
(
HOST_r0
,
addr
);

1528 
	`iLockReg
(3);

1529 
	`CALLFunc
((
u32
)
psxHwRód16
);

1530 
	`iU∆ockReg
(3);

1531 
r2_is_dúty
=1;

1532 i‡(
_Rt_
) {

1533 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1534 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 16) );

1535 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
π
, 
HOST_r0
, 16) );

1542 
bcode
=
psxRegs
.
code
;

1543 
bpc
=
pc
;

1544 
n
=0;

1545 
immba£
=
_Imm_
;

1546 
imm
[
REC_MAX_RWLOOP
+1];

1547 
π
[
REC_MAX_RWLOOP
+1];

1548 
rs
=
_Rs_
;

1549 (
psxRegs
.
code
>>26)==37 && 
rs
==
_Rs_
 && 
_Rt_
 && _Rs_!=_Rt_ && 
n
<
REC_MAX_RWLOOP
 && !
bønch
) {

1550 i‡(
_Imm_
<
immba£
) {

1551 i‡(
immba£
-
_Imm_
>
REC_MAX_RWLOOP_SIZE
) ;

1553 i‡(
_Imm_
-
immba£
>
REC_MAX_RWLOOP_SIZE
) ;

1555 #ifde‡
REC_USE_2ND_PHASE


1556 i‡(
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
+
n
].
jum≥d
) ;

1558 
imm
[
n
]=
_Imm_
;

1559 
π
[
n
]=
_Rt_
;

1560 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

1561 
pc
 += 4;

1562 
n
++;

1564 
psxRegs
.
code
=
bcode
;

1565 
pc
=
bpc
;

1567 
	`iLockReg
(3);

1568 
	`iPushOfB
();

1570 i‡(
n
<=1) {

1571 i‡(
_Rt_
) {

1572 
	`PSXMEMREAD16
();

1573 
u32
 
ºt
=
	`WrôeReg
(
_Rt_
);

1574 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 16) );

1575 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
ºt
, 
HOST_r0
, 16) );

1577 
	`PSXHWREAD16
();

1580 i‡(
autobüs
Ë
cy˛es_≥ndög
+=
n
;

1581 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

1582 
	`iPutCy˛esAdd
(0);

1584 
i
;

1585 
de°_ªg0
=
	`WrôeReg
(
_Rt_
);

1586 
de°_ªg
;

1587 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
psxM
);

1588 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
,
HOST_r0
,0x0e,0x04));

1589 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

1590 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x02,0xa));

1591 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

1592 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

1593 
	`wrôe32
(
	`LDRH_REG
(
HOST_ù
,
HOST_r2
,
HOST_r1
));

1594 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_ù
, HOST_ip, 16) );

1595 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
de°_ªg0
, 
HOST_ù
, 16) );

1596 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

1597 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

1598 
i
=1;i<
n
;i++) {

1599 
diff
=
imm
[
i
]-imm[i-1];

1600 i‡(
diff
>0) {

1601 
	`ADD32ItoR
(
HOST_r2
,
diff
);

1602 } i‡(
diff
<0) {

1603 
	`SUB32ItoR
(
HOST_r2
,-
diff
);

1605 i‡(!
	`IsC⁄°
(
_Rs_
)Ë
	`RódReg
(_Rs_);

1606 
de°_ªg
=
	`WrôeReg
(
π
[
i
]);

1607 
	`wrôe32
(
	`LDRH_REG
(
HOST_ù
,
HOST_r2
,
HOST_r1
));

1608 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_ù
, HOST_ip, 16) );

1609 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
de°_ªg
, 
HOST_ù
, 16) );

1611 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

1612 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

1613 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1614 
	`Upd©eImmedüã
(0);

1615 
	`¨mSëJ32
(
j32På
[9]);

1616 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

1617 
	`iPutCy˛esAdd
(0);

1619 #i‚de‡
REC_USE_MEMORY_FUNCS


1620 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

1622 
	`CALLFunc
((
u32
)
MEMREAD16_FUNC
);

1623 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 16) );

1624 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
de°_ªg0
, 
HOST_r0
, 16) );

1625 
i
=1;i<
n
;i++) {

1626 
diff
=
imm
[
i
]-imm[0];

1627 i‡(
	`IsC⁄°
(
_Rs_
)) {

1628 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rs_
].
k
 + 
imm
[
i
]);

1630 
	`MOVADD32ItoR
(
HOST_r0
, 
	`RódReg
(
_Rs_
), 
imm
[
i
]);

1632 
de°_ªg
=
	`WrôeReg
(
π
[
i
]);

1633 #i‚de‡
REC_USE_MEMORY_FUNCS


1634 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

1636 
	`CALLFunc
((
u32
)
MEMREAD16_FUNC
);

1637 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 16) );

1638 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
de°_ªg
, 
HOST_r0
, 16) );

1640 
	`¨mSëJ32
(
j32På
[10]);

1641 
pc
+=(
n
-1)*4;

1642 
ªc_›codes
=
n
;

1644 
	`iU∆ockReg
(3);

1645 
r2_is_dúty
=1;

1646 
	}
}

1650 
	$ªcLW
() {

1651 i‡(!
ªc_pha£
) {

1652 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

1653 i‡(
	`IsC⁄°
(
_Rs_
)) {

1654 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

1655 
t
 = 
addr
 >> 16;

1656 i‡((
t
 & 0xfff0) == 0xbfc0) {

1657 i‡(
_Rt_
) {

1658 
	`M≠C⁄°
(
_Rt_
, 
	`psxRu32
(
addr
));

1663 
	`RódReg
(
_Rs_
);

1665 i‡(
_Rt_
) {

1666 
	`WrôeReg
(
_Rt_
);

1670 #ifde‡
DEBUG_CPU


1671 
	`dbgf
("\t\åecLW R%òmem[R%ò+ %i]\n",
_Rt_
,
_Rs_
,
_Imm_
);

1673 i‡(
	`IsC⁄°
(
_Rs_
)) {

1674 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

1675 
t
 = 
addr
 >> 16;

1677 i‡((
t
 & 0xfff0) == 0xbfc0) {

1678 i‡(
_Rt_
) {

1679 
	`M≠C⁄°
(
_Rt_
, 
	`psxRu32
(
addr
));

1683 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

1684 i‡(
_Rt_
) {

1685 #i‡
	`deföed
(
REC_USE_NO_REPEAT_READ_WRITE
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

1686 i‡((
ª≥©_ªad_wrôe_pc
+4==
pc
)&&(
ª≥©_ªad_wrôe_imm
==
_Imm_
)&&(
ª≥©_ªad_wrôe_ªg_§c
==
_Rs_
)) {

1687 i‡(
_Rt_
 && _Rt_!=
ª≥©_ªad_wrôe_ªg_d°
) {

1688 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1689 
u32
 
π_back
=
	`RódReg
(
ª≥©_ªad_wrôe_ªg_d°
);

1690 
	`MOV32RtoR
(
π
,
π_back
);

1695 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1696 
	`MOV32MtoR
(
π
, (
u32
)&
psxM
[
addr
 & 0x1fffff]);

1701 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

1702 i‡(
_Rt_
) {

1703 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1704 
	`MOV32MtoR
(
π
, (
u32
)&
psxH
[
addr
 & 0xfff]);

1708 i‡(
t
 == 0x1f80) {

1709 
addr
) {

1719 i‡(
_Rt_
) {

1720 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1721 
	`MOV32MtoR
(
π
, (
u32
)&
psxH
[
addr
 & 0xffff]);

1726 i‡(
_Rt_
) {

1727 
	`iLockReg
(3);

1728 
	`CALLFunc
((
u32
)&
GPU_ªadD©a
);

1729 
	`iU∆ockReg
(3);

1730 
r2_is_dúty
=1;

1731 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1732 
	`MOV32RtoR
(
π
, 
HOST_r0
);

1737 i‡(
_Rt_
) {

1738 
	`iLockReg
(3);

1739 
	`CALLFunc
((
u32
)&
GPU_ªadSètus
);

1740 
	`iU∆ockReg
(3);

1741 
r2_is_dúty
=1;

1742 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1743 
	`MOV32RtoR
(
π
, 
HOST_r0
);

1748 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

1749 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

1750 
	`iPutCy˛esAdd
(0);

1751 
	`MOV32ItoR
(
HOST_r0
,
addr
);

1752 
	`iLockReg
(3);

1753 
	`CALLFunc
((
u32
)
psxHwRód32
);

1754 
	`iU∆ockReg
(3);

1755 
r2_is_dúty
=1;

1756 i‡(
_Rt_
) {

1757 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1758 
	`MOV32RtoR
(
π
,
HOST_r0
);

1766 
bcode
=
psxRegs
.
code
;

1767 
bpc
=
pc
;

1768 
n
=0;

1769 
immba£
=
_Imm_
;

1770 
imm
[
REC_MAX_RWLOOP
+1];

1771 
π
[
REC_MAX_RWLOOP
+1];

1772 
rs
=
_Rs_
;

1773 (
psxRegs
.
code
>>26)==35 && 
rs
==
_Rs_
 && 
_Rt_
 && _Rs_!=_Rt_ && 
n
<
REC_MAX_RWLOOP
 && !
bønch
) {

1774 i‡(
_Imm_
<
immba£
) {

1775 i‡(
immba£
-
_Imm_
>
REC_MAX_RWLOOP_SIZE
) ;

1777 i‡(
_Imm_
-
immba£
>
REC_MAX_RWLOOP_SIZE
) ;

1779 #ifde‡
REC_USE_2ND_PHASE


1780 i‡(
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
+
n
].
jum≥d
) ;

1782 
imm
[
n
]=
_Imm_
;

1783 
π
[
n
]=
_Rt_
;

1784 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

1785 
pc
 += 4;

1786 
n
++;

1788 
psxRegs
.
code
=
bcode
;

1789 
pc
=
bpc
;

1791 
	`iLockReg
(3);

1792 
	`iPushOfB
();

1794 i‡(
n
<=1) {

1795 #i‡
	`deföed
(
REC_USE_NO_REPEAT_READ_WRITE
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

1796 i‡((
ª≥©_ªad_wrôe_pc
+4==
pc
)&&(
ª≥©_ªad_wrôe_imm
==
_Imm_
)&&(
ª≥©_ªad_wrôe_ªg_§c
==
_Rs_
)) {

1797 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
,
HOST_r0
,0x0e,0x04));

1798 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x02,0xa));

1799 i‡(
_Rt_
 && _Rt_!=
ª≥©_ªad_wrôe_ªg_d°
) {

1800 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

1801 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

1802 
u32
 
π_back
=
	`RódReg
(
ª≥©_ªad_wrôe_ªg_d°
);

1803 
	`MOV32RtoR
(
π
,
π_back
);

1804 
j32På
[8]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1805 
	`¨mSëJ32
(
j32På
[9]);

1807 
j32På
[8]=
¨mPå
; 
	`wrôe32
(
	`BCC_FWD
(0));

1811 i‡(
_Rt_
) {

1812 
	`PSXMEMREAD32
(
	`WrôeReg
(
_Rt_
));

1814 
	`PSXHWREAD32
();

1816 #i‡
	`deföed
(
REC_USE_NO_REPEAT_READ_WRITE
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

1817 i‡((
ª≥©_ªad_wrôe_pc
+4==
pc
)&&(
ª≥©_ªad_wrôe_imm
==
_Imm_
)&&(
ª≥©_ªad_wrôe_ªg_§c
==
_Rs_
)) {

1818 
	`¨mSëJ32
(
j32På
[8]);

1822 i‡(
autobüs
Ë
cy˛es_≥ndög
+=
n
;

1823 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

1824 
	`iPutCy˛esAdd
(0);

1826 
i
;

1827 
de°_ªg0
=
	`WrôeReg
(
_Rt_
);

1828 
de°_ªg
;

1829 
	`MOV32MtoR_ªgs
(
HOST_r1
,&
psxRegs
.
psxM
);

1830 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
,
HOST_r0
,0x0e,0x04));

1831 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

1832 
	`wrôe32
(
	`CMP_IMM
(
HOST_ù
,0x02,0xa));

1833 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

1834 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

1835 
	`wrôe32
(
	`LDR_REG
(
de°_ªg0
,
HOST_r2
,
HOST_r1
));

1836 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

1837 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

1838 
i
=1;i<
n
;i++) {

1839 
diff
=
imm
[
i
]-imm[i-1];

1840 i‡(
diff
>0) {

1841 
	`ADD32ItoR
(
HOST_r2
,
diff
);

1842 } i‡(
diff
<0) {

1843 
	`SUB32ItoR
(
HOST_r2
,-
diff
);

1845 i‡(!
	`IsC⁄°
(
_Rs_
)Ë
	`RódReg
(_Rs_);

1846 
de°_ªg
=
	`WrôeReg
(
π
[
i
]);

1847 
	`wrôe32
(
	`LDR_REG
(
de°_ªg
,
HOST_r2
,
HOST_r1
));

1849 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

1850 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

1851 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

1852 
	`Upd©eImmedüã
(0);

1853 
	`¨mSëJ32
(
j32På
[9]);

1854 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

1855 
	`iPutCy˛esAdd
(0);

1857 #i‚de‡
REC_USE_MEMORY_FUNCS


1858 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

1860 
	`CALLFunc
((
u32
)
MEMREAD32_FUNC
);

1861 
	`MOV32RtoR
(
de°_ªg0
, 
HOST_r0
);

1862 
i
=1;i<
n
;i++) {

1863 
diff
=
imm
[
i
]-imm[0];

1864 i‡(
	`IsC⁄°
(
_Rs_
)) {

1865 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rs_
].
k
 + 
imm
[
i
]);

1867 
	`MOVADD32ItoR
(
HOST_r0
, 
	`RódReg
(
_Rs_
), 
imm
[
i
]);

1869 
de°_ªg
=
	`WrôeReg
(
π
[
i
]);

1870 #i‚de‡
REC_USE_MEMORY_FUNCS


1871 
	`MOV32RtoR
(
HOST_r1
,
HOST_r11
);

1873 
	`CALLFunc
((
u32
)
MEMREAD32_FUNC
);

1874 
	`MOV32RtoR
(
de°_ªg
, 
HOST_r0
);

1876 
	`¨mSëJ32
(
j32På
[10]);

1877 
pc
+=(
n
-1)*4;

1878 
ªc_›codes
=
n
;

1880 
	`iU∆ockReg
(3);

1881 
r2_is_dúty
=1;

1882 
	}
}

1885 
	$ªcSB
() {

1887 i‡(!
ªc_pha£
) {

1888 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

1889 i‡(!
	`IsC⁄°
(
_Rs_
)) {

1890 
	`RódReg
(
_Rs_
);

1892 i‡(!
	`IsC⁄°
(
_Rt_
)) {

1893 
	`RódReg
(
_Rt_
);

1897 #ifde‡
DEBUG_CPU


1898 
	`dbgf
("\t\åecSB mem[R%ò+ %i] = R%i\n",
_Rs_
,
_Imm_
,
_Rt_
);

1901 i‡(
	`IsC⁄°
(
_Rs_
)) {

1902 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

1903 
t
 = 
addr
 >> 16;

1905 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

1906 i‡(
	`IsC⁄°
(
_Rt_
)) {

1907 
	`MOV8ItoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], (
u8
)
iRegs
[
_Rt_
].
k
);

1909 
u32
 
π
=
	`RódReg
(
_Rt_
);

1910 
	`MOV8RtoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], 
π
);

1914 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

1915 i‡(
	`IsC⁄°
(
_Rt_
)) {

1916 
	`MOV8ItoM
((
u32
)&
psxH
[
addr
 & 0xfff], (
u8
)
iRegs
[
_Rt_
].
k
);

1918 
u32
 
π
=
	`RódReg
(
_Rt_
);

1919 
	`MOV8RtoM
((
u32
)&
psxH
[
addr
 & 0xfff], 
π
);

1923 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

1924 
	`MOV32ItoR
(
HOST_r0
,
addr
);

1925 i‡(
	`IsC⁄°
(
_Rt_
)) {

1926 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

1928 
u32
 
π
=
	`RódReg
(
_Rt_
);

1929 
	`MOV32RtoR
(
HOST_r1
, 
π
);

1931 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

1932 
	`iPutCy˛esAdd
(0);

1933 
	`iLockReg
(3);

1934 
	`CALLFunc
((
u32
)
psxHwWrôe8
);

1935 
	`iU∆ockReg
(3);

1936 
r2_is_dúty
=1;

1942 
bcode
=
psxRegs
.
code
;

1943 
bpc
=
pc
;

1944 
n
=0;

1945 
immba£
=
_Imm_
;

1946 
imm
[
REC_MAX_RWLOOP
+1];

1947 
π
[
REC_MAX_RWLOOP
+1];

1948 
rs
=
_Rs_
;

1949 (
psxRegs
.
code
>>26)==40 && 
rs
==
_Rs_
 && 
n
<
REC_MAX_RWLOOP
 && !
bønch
) {

1950 i‡(
_Imm_
<
immba£
) {

1951 i‡(
immba£
-
_Imm_
>
REC_MAX_RWLOOP_SIZE
) ;

1953 i‡(
_Imm_
-
immba£
>
REC_MAX_RWLOOP_SIZE
) ;

1955 #ifde‡
REC_USE_2ND_PHASE


1956 i‡(
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
+
n
].
jum≥d
) ;

1958 
imm
[
n
]=
_Imm_
;

1959 
π
[
n
]=
_Rt_
;

1960 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

1961 
pc
 += 4;

1962 
n
++;

1964 
psxRegs
.
code
=
bcode
;

1965 
pc
=
bpc
;

1967 
	`iLockReg
(3);

1968 
	`iPushOfB
();

1970 i‡((
n
<=1)||(!
C⁄fig
.
HLE
)||(
ªc_£cuª_wrôes
)) {

1971 i‡(
	`IsC⁄°
(
_Rt_
)) {

1972 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

1973 i‡(
C⁄fig
.
HLE
) {

1974 
	`PSXMEMWRITE8
(
HOST_r1
);

1976 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

1977 
	`iPutCy˛esAdd
(0);

1978 
	`CALLFunc
((
u32
)
psxMemWrôe8
);

1981 i‡(
C⁄fig
.
HLE
) {

1982 
	`PSXMEMWRITE8
(
	`RódReg
(
_Rt_
));

1984 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

1985 
	`iPutCy˛esAdd
(0);

1986 
	`MOV32RtoR
(
HOST_r1
,
	`RódReg
(
_Rt_
));

1987 
	`CALLFunc
((
u32
)
psxMemWrôe8
);

1991 i‡(
autobüs
Ë
cy˛es_≥ndög
+=(
n
*2);

1992 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

1993 
	`iPutCy˛esAdd
(0);

1995 
has_bìn_wrôãn
=1;

1996 
i
;

1997 
de°_ªg0
=
HOST_r1
;

1998 
de°_ªg
;

1999 i‡(
	`IsC⁄°
(
π
[0])) {

2000 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
π
[0]].
k
);

2002 
de°_ªg0
=
	`RódReg
(
π
[0]);

2005 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
psxM
);

2006 
	`wrôe32
(
	`BIC_IMM
(
HOST_Ã
,
HOST_r0
,0x0e,0x04));

2007 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

2008 
	`wrôe32
(
	`CMP_IMM
(
HOST_Ã
,0x02,0xa));

2009 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

2010 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

2011 
	`wrôe32
(
	`STRB_REG
(
de°_ªg0
,
HOST_r2
,
HOST_ù
));

2012 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

2013 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

2014 
i
=1;i<
n
;i++) {

2015 
diff
=
imm
[
i
]-imm[i-1];

2016 i‡(
diff
>0) {

2017 
	`ADD32ItoR
(
HOST_r2
,
diff
);

2018 } i‡(
diff
<0) {

2019 
	`SUB32ItoR
(
HOST_r2
,-
diff
);

2021 i‡(!
	`IsC⁄°
(
_Rs_
)Ë
	`RódReg
(_Rs_);

2022 i‡(
	`IsC⁄°
(
π
[
i
])) {

2023 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
π
[
i
]].
k
);

2024 
de°_ªg
=
HOST_r1
;

2026 
de°_ªg
=
	`RódReg
(
π
[
i
]);

2028 
	`wrôe32
(
	`STRB_REG
(
de°_ªg
,
HOST_r2
,
HOST_ù
));

2030 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

2031 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

2032 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

2033 
	`Upd©eImmedüã
(0);

2034 
	`¨mSëJ32
(
j32På
[9]);

2035 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

2036 
	`iPutCy˛esAdd
(0);

2038 i‡(
de°_ªg0
!=
HOST_r1
)

2039 
	`MOV32RtoR
(
HOST_r1
,
de°_ªg0
);

2040 #ifde‡
REC_USE_DIRECT_MEM


2041 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

2043 #i‚de‡
REC_USE_MEMORY_FUNCS


2044 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

2046 
	`CALLFunc
((
u32
)
MEMWRITE8_FUNC
);

2047 
i
=1;i<
n
;i++) {

2048 
diff
=
imm
[
i
]-imm[0];

2049 i‡(
	`IsC⁄°
(
_Rs_
)) {

2050 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rs_
].
k
 + 
imm
[
i
]);

2052 
	`MOVADD32ItoR
(
HOST_r0
, 
	`RódReg
(
_Rs_
), 
imm
[
i
]);

2054 i‡(
	`IsC⁄°
(
π
[
i
])) {

2055 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
π
[
i
]].
k
);

2057 
	`MOV32RtoR
(
HOST_r1
,
	`RódReg
(
π
[
i
]));

2059 #i‚de‡
REC_USE_MEMORY_FUNCS


2060 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

2062 
	`CALLFunc
((
u32
)
MEMWRITE8_FUNC
);

2064 
	`¨mSëJ32
(
j32På
[10]);

2065 
pc
+=(
n
-1)*4;

2066 
ªc_›codes
=
n
;

2068 
	`iU∆ockReg
(3);

2069 
r2_is_dúty
=1;

2070 
	}
}

2073 
	$ªcSH
() {

2075 i‡(!
ªc_pha£
) {

2076 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

2077 i‡(!
	`IsC⁄°
(
_Rs_
)) {

2078 
	`RódReg
(
_Rs_
);

2080 i‡(!
	`IsC⁄°
(
_Rt_
)) {

2081 
	`RódReg
(
_Rt_
);

2085 #ifde‡
DEBUG_CPU


2086 
	`dbgf
("\t\åecSH mem[R%ò+ %i] = R%i\n",
_Rs_
,
_Imm_
,
_Rt_
);

2088 i‡(
	`IsC⁄°
(
_Rs_
)) {

2089 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

2090 
t
 = 
addr
 >> 16;

2092 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

2093 i‡(
	`IsC⁄°
(
_Rt_
)) {

2094 
	`MOV16ItoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], (
u16
)
iRegs
[
_Rt_
].
k
);

2096 
u32
 
π
=
	`RódReg
(
_Rt_
);

2097 
	`MOV16RtoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], 
π
);

2101 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

2102 i‡(
	`IsC⁄°
(
_Rt_
)) {

2103 
	`MOV16ItoM
((
u32
)&
psxH
[
addr
 & 0xfff], (
u16
)
iRegs
[
_Rt_
].
k
);

2105 
u32
 
π
=
	`RódReg
(
_Rt_
);

2106 
	`MOV16RtoM
((
u32
)&
psxH
[
addr
 & 0xfff], 
π
);

2110 i‡(
t
 == 0x1f80) {

2111 i‡(
addr
 >= 0x1f801c00 &&áddr < 0x1f801e00) {

2112 i‡(
	`IsC⁄°
(
_Rt_
)) {

2113 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

2115 
u32
 
π
=
	`RódReg
(
_Rt_
);

2116 
	`MOV32RtoR
(
HOST_r1
, 
π
);

2118 
	`MOV32ItoR
(
HOST_r0
, 
addr
);

2119 
	`iLockReg
(3);

2124 
	`CALLFunc
((
u32
)&
SPU_wrôeRegi°î
);

2125 
	`iU∆ockReg
(3);

2126 
r2_is_dúty
=1;

2130 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

2131 
	`MOV32ItoR
(
HOST_r0
,
addr
);

2132 i‡(
	`IsC⁄°
(
_Rt_
)) {

2133 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

2135 
u32
 
π
=
	`RódReg
(
_Rt_
);

2136 
	`MOV32RtoR
(
HOST_r1
, 
π
);

2138 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

2139 
	`iPutCy˛esAdd
(0);

2140 
	`iLockReg
(3);

2141 
	`CALLFunc
((
u32
)
psxHwWrôe16
);

2142 
	`iU∆ockReg
(3);

2143 
r2_is_dúty
=1;

2149 
bcode
=
psxRegs
.
code
;

2150 
bpc
=
pc
;

2151 
n
=0;

2152 
immba£
=
_Imm_
;

2153 
imm
[
REC_MAX_RWLOOP
+1];

2154 
π
[
REC_MAX_RWLOOP
+1];

2155 
rs
=
_Rs_
;

2156 (
psxRegs
.
code
>>26)==41 && 
rs
==
_Rs_
 && 
n
<
REC_MAX_RWLOOP
 && !
bønch
) {

2157 i‡(
_Imm_
<
immba£
) {

2158 i‡(
immba£
-
_Imm_
>
REC_MAX_RWLOOP_SIZE
) ;

2160 i‡(
_Imm_
-
immba£
>
REC_MAX_RWLOOP_SIZE
) ;

2162 #ifde‡
REC_USE_2ND_PHASE


2163 i‡(
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
+
n
].
jum≥d
) ;

2165 
imm
[
n
]=
_Imm_
;

2166 
π
[
n
]=
_Rt_
;

2167 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

2168 
pc
 += 4;

2169 
n
++;

2171 
psxRegs
.
code
=
bcode
;

2172 
pc
=
bpc
;

2174 
	`iLockReg
(3);

2175 
	`iPushOfB
();

2177 i‡((
n
<=1)||(!
C⁄fig
.
HLE
)||(
ªc_£cuª_wrôes
)) {

2178 i‡(
	`IsC⁄°
(
_Rt_
)) {

2179 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

2180 i‡(
C⁄fig
.
HLE
) {

2181 
	`PSXMEMWRITE16
(
HOST_r1
);

2183 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

2184 
	`iPutCy˛esAdd
(0);

2185 
	`CALLFunc
((
u32
)
psxMemWrôe16
);

2188 i‡(
C⁄fig
.
HLE
) {

2189 
	`PSXMEMWRITE16
(
	`RódReg
(
_Rt_
));

2191 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

2192 
	`iPutCy˛esAdd
(0);

2193 
	`MOV32RtoR
(
HOST_r1
,
	`RódReg
(
_Rt_
));

2194 
	`CALLFunc
((
u32
)
psxMemWrôe16
);

2198 i‡(
autobüs
Ë
cy˛es_≥ndög
+=(
n
*2);

2199 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

2200 
	`iPutCy˛esAdd
(0);

2202 
has_bìn_wrôãn
=1;

2203 
i
;

2204 
de°_ªg0
=
HOST_r1
;

2205 
de°_ªg
;

2206 i‡(
	`IsC⁄°
(
π
[0])) {

2207 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
π
[0]].
k
);

2209 
de°_ªg0
=
	`RódReg
(
π
[0]);

2212 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
psxM
);

2213 
	`wrôe32
(
	`BIC_IMM
(
HOST_Ã
,
HOST_r0
,0x0e,0x04));

2214 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

2215 
	`wrôe32
(
	`CMP_IMM
(
HOST_Ã
,0x02,0xa));

2216 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

2217 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

2218 
	`wrôe32
(
	`STRH_REG
(
de°_ªg0
,
HOST_r2
,
HOST_ù
));

2219 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

2220 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

2221 
i
=1;i<
n
;i++) {

2222 
diff
=
imm
[
i
]-imm[i-1];

2223 i‡(
diff
>0) {

2224 
	`ADD32ItoR
(
HOST_r2
,
diff
);

2225 } i‡(
diff
<0) {

2226 
	`SUB32ItoR
(
HOST_r2
,-
diff
);

2228 i‡(!
	`IsC⁄°
(
_Rs_
)Ë
	`RódReg
(_Rs_);

2229 i‡(
	`IsC⁄°
(
π
[
i
])) {

2230 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
π
[
i
]].
k
);

2231 
de°_ªg
=
HOST_r1
;

2233 
de°_ªg
=
	`RódReg
(
π
[
i
]);

2235 
	`wrôe32
(
	`STRH_REG
(
de°_ªg
,
HOST_r2
,
HOST_ù
));

2237 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

2238 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

2239 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

2240 
	`Upd©eImmedüã
(0);

2241 
	`¨mSëJ32
(
j32På
[9]);

2242 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

2243 
	`iPutCy˛esAdd
(0);

2245 i‡(
de°_ªg0
!=
HOST_r1
)

2246 
	`MOV32RtoR
(
HOST_r1
,
de°_ªg0
);

2247 #i‚de‡
REC_USE_MEMORY_FUNCS


2248 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

2250 
	`CALLFunc
((
u32
)
MEMWRITE16_FUNC
);

2251 
i
=1;i<
n
;i++) {

2252 
diff
=
imm
[
i
]-imm[0];

2253 i‡(
	`IsC⁄°
(
_Rs_
)) {

2254 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rs_
].
k
 + 
imm
[
i
]);

2256 
	`MOVADD32ItoR
(
HOST_r0
, 
	`RódReg
(
_Rs_
), 
imm
[
i
]);

2258 i‡(
	`IsC⁄°
(
π
[
i
])) {

2259 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
π
[
i
]].
k
);

2261 
	`MOV32RtoR
(
HOST_r1
,
	`RódReg
(
π
[
i
]));

2263 #i‚de‡
REC_USE_MEMORY_FUNCS


2264 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

2266 
	`CALLFunc
((
u32
)
MEMWRITE16_FUNC
);

2268 
	`¨mSëJ32
(
j32På
[10]);

2269 
pc
+=(
n
-1)*4;

2270 
ªc_›codes
=
n
;

2272 
	`iU∆ockReg
(3);

2273 
r2_is_dúty
=1;

2274 
	}
}

2277 
	$ªcSW
() {

2279 i‡(!
ªc_pha£
) {

2280 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

2281 i‡(!
	`IsC⁄°
(
_Rs_
)) {

2282 
	`RódReg
(
_Rs_
);

2284 i‡(!
	`IsC⁄°
(
_Rt_
)) {

2285 
	`RódReg
(
_Rt_
);

2289 #ifde‡
DEBUG_CPU


2290 
	`dbgf
("\t\åecSW mem[R%ò+ %i] = R%i\n",
_Rs_
,
_Imm_
,
_Rt_
);

2292 i‡(
	`IsC⁄°
(
_Rs_
)) {

2293 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

2294 
t
 = 
addr
 >> 16;

2296 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

2297 i‡(
	`IsC⁄°
(
_Rt_
)) {

2298 
	`MOV32ItoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], 
iRegs
[
_Rt_
].
k
);

2300 
u32
 
π
=
	`RódReg
(
_Rt_
);

2301 
	`MOV32RtoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], 
π
);

2303 #i‡
	`deföed
(
REC_USE_NO_REPEAT_READ_WRITE
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

2304 
ª≥©_ªad_wrôe_pc
=
pc
;

2305 
ª≥©_ªad_wrôe_ªg_d°
=
_Rt_
;

2306 
ª≥©_ªad_wrôe_ªg_§c
=
_Rs_
;

2307 
ª≥©_ªad_wrôe_imm
=
_Imm_
;

2311 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

2312 i‡(
	`IsC⁄°
(
_Rt_
)) {

2313 
	`MOV32ItoM
((
u32
)&
psxH
[
addr
 & 0xfff], 
iRegs
[
_Rt_
].
k
);

2315 
u32
 
π
=
	`RódReg
(
_Rt_
);

2316 
	`MOV32RtoM
((
u32
)&
psxH
[
addr
 & 0xfff], 
π
);

2320 i‡(
t
 == 0x1f80) {

2321 
addr
) {

2331 i‡(
	`IsC⁄°
(
_Rt_
)) {

2332 
	`MOV32ItoM
((
u32
)&
psxH
[
addr
 & 0xffff], 
iRegs
[
_Rt_
].
k
);

2334 
u32
 
π
=
	`RódReg
(
_Rt_
);

2335 
	`MOV32RtoM
((
u32
)&
psxH
[
addr
 & 0xffff], 
π
);

2338 #ifde‡
REC_USE_R2


2339 
	`MOV32ItoR
(
HOST_r2
,0);

2340 
	`MOV32RtoM_ªgs
(&
psxRegs
.
io_cy˛e_cou¡î
,
HOST_r2
);

2341 
r2_is_dúty
=0;

2343 
	`MOV32ItoM_ªgs
(&
psxRegs
.
io_cy˛e_cou¡î
,0);

2348 i‡(
	`IsC⁄°
(
_Rt_
)) {

2349 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rt_
].
k
);

2351 
u32
 
π
=
	`RódReg
(
_Rt_
);

2352 
	`MOV32RtoR
(
HOST_r0
,
π
);

2354 
	`iLockReg
(3);

2355 
	`CALLFunc
((
u32
)&
GPU_wrôeD©a
);

2356 
	`iU∆ockReg
(3);

2357 
r2_is_dúty
=1;

2361 i‡(
	`IsC⁄°
(
_Rt_
)) {

2362 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rt_
].
k
);

2364 
u32
 
π
=
	`RódReg
(
_Rt_
);

2365 
	`MOV32RtoR
(
HOST_r0
,
π
);

2367 
	`iLockReg
(3);

2368 
	`CALLFunc
((
u32
)&
GPU_wrôeSètus
);

2369 
	`iU∆ockReg
(3);

2370 
r2_is_dúty
=1;

2374 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

2375 
	`MOV32ItoR
(
HOST_r0
,
addr
);

2376 i‡(
	`IsC⁄°
(
_Rt_
)) {

2377 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

2379 
u32
 
π
=
	`RódReg
(
_Rt_
);

2380 
	`MOV32RtoR
(
HOST_r1
, 
π
);

2382 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

2383 
	`iPutCy˛esAdd
(0);

2384 
	`iLockReg
(3);

2385 
	`CALLFunc
((
u32
)
psxHwWrôe32
);

2386 
	`iU∆ockReg
(3);

2387 
r2_is_dúty
=1;

2393 
bcode
=
psxRegs
.
code
;

2394 
bpc
=
pc
;

2395 
n
=0;

2396 
immba£
=
_Imm_
;

2397 
imm
[
REC_MAX_RWLOOP
+1];

2398 
π
[
REC_MAX_RWLOOP
+1];

2399 
rs
=
_Rs_
;

2400 (
psxRegs
.
code
>>26)==43 && 
rs
==
_Rs_
 && 
n
<
REC_MAX_RWLOOP
 && !
bønch
) {

2401 i‡(
_Imm_
<
immba£
) {

2402 i‡(
immba£
-
_Imm_
>
REC_MAX_RWLOOP_SIZE
) ;

2404 i‡(
_Imm_
-
immba£
>
REC_MAX_RWLOOP_SIZE
) ;

2406 #ifde‡
REC_USE_2ND_PHASE


2407 i‡(
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
+
n
].
jum≥d
) ;

2409 
imm
[
n
]=
_Imm_
;

2410 
π
[
n
]=
_Rt_
;

2411 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

2412 
pc
 += 4;

2413 
n
++;

2415 
psxRegs
.
code
=
bcode
;

2416 
pc
=
bpc
;

2418 
	`iLockReg
(3);

2419 
	`iPushOfB
();

2421 i‡((
n
<=1)||(!
C⁄fig
.
HLE
)||(
ªc_£cuª_wrôes
)) {

2422 i‡(
	`IsC⁄°
(
_Rt_
)) {

2423 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

2424 i‡(
C⁄fig
.
HLE
) {

2425 
	`PSXMEMWRITE32
(
HOST_r1
);

2427 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

2428 
	`iPutCy˛esAdd
(0);

2429 
	`CALLFunc
((
u32
)
psxMemWrôe32
);

2432 i‡(
C⁄fig
.
HLE
) {

2433 
	`PSXMEMWRITE32
(
	`RódReg
(
_Rt_
));

2435 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

2436 
	`iPutCy˛esAdd
(0);

2437 
	`MOV32RtoR
(
HOST_r1
,
	`RódReg
(
_Rt_
));

2438 
	`CALLFunc
((
u32
)
psxMemWrôe32
);

2441 #i‡
	`deföed
(
REC_USE_NO_REPEAT_READ_WRITE
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

2442 
ª≥©_ªad_wrôe_pc
=
pc
;

2443 
ª≥©_ªad_wrôe_ªg_d°
=
_Rt_
;

2444 
ª≥©_ªad_wrôe_ªg_§c
=
_Rs_
;

2445 
ª≥©_ªad_wrôe_imm
=
_Imm_
;

2448 i‡(
autobüs
Ë
cy˛es_≥ndög
+=(
n
*2);

2449 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

2450 
	`iPutCy˛esAdd
(0);

2452 
has_bìn_wrôãn
=1;

2453 
i
;

2454 
de°_ªg0
=
HOST_r1
;

2455 
de°_ªg
;

2456 i‡(
	`IsC⁄°
(
π
[0])) {

2457 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
π
[0]].
k
);

2459 
de°_ªg0
=
	`RódReg
(
π
[0]);

2462 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
psxM
);

2463 
	`wrôe32
(
	`BIC_IMM
(
HOST_Ã
,
HOST_r0
,0x0e,0x04));

2464 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,
HOST_r0
,0x7f,0x09));

2465 
	`wrôe32
(
	`CMP_IMM
(
HOST_Ã
,0x02,0xa));

2466 
	`wrôe32
(
	`BIC_IMM
(
HOST_r2
,HOST_r2,0x0e,0x0c));

2467 
j32På
[9]=
¨mPå
; 
	`wrôe32
(
	`BCS_FWD
(0));

2468 
	`wrôe32
(
	`STR_REG
(
de°_ªg0
,
HOST_r2
,
HOST_ù
));

2469 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

2470 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

2471 
i
=1;i<
n
;i++) {

2472 
diff
=
imm
[
i
]-imm[i-1];

2473 i‡(
diff
>0) {

2474 
	`ADD32ItoR
(
HOST_r2
,
diff
);

2475 } i‡(
diff
<0) {

2476 
	`SUB32ItoR
(
HOST_r2
,-
diff
);

2478 i‡(!
	`IsC⁄°
(
_Rs_
)Ë
	`RódReg
(_Rs_);

2479 i‡(
	`IsC⁄°
(
π
[
i
])) {

2480 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
π
[
i
]].
k
);

2481 
de°_ªg
=
HOST_r1
;

2483 
de°_ªg
=
	`RódReg
(
π
[
i
]);

2485 
	`wrôe32
(
	`STR_REG
(
de°_ªg
,
HOST_r2
,
HOST_ù
));

2487 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

2488 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

2489 
j32På
[10]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

2490 
	`Upd©eImmedüã
(0);

2491 
	`¨mSëJ32
(
j32På
[9]);

2492 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

2493 
	`iPutCy˛esAdd
(0);

2495 i‡(
de°_ªg0
!=
HOST_r1
)

2496 
	`MOV32RtoR
(
HOST_r1
,
de°_ªg0
);

2497 #i‚de‡
REC_USE_MEMORY_FUNCS


2498 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

2500 
	`CALLFunc
((
u32
)
MEMWRITE32_FUNC
);

2501 
i
=1;i<
n
;i++) {

2502 
diff
=
imm
[
i
]-imm[0];

2503 i‡(
	`IsC⁄°
(
_Rs_
)) {

2504 
	`MOV32ItoR
(
HOST_r0
,
iRegs
[
_Rs_
].
k
 + 
imm
[
i
]);

2506 
	`MOVADD32ItoR
(
HOST_r0
, 
	`RódReg
(
_Rs_
), 
imm
[
i
]);

2508 i‡(
	`IsC⁄°
(
π
[
i
])) {

2509 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
π
[
i
]].
k
);

2511 
	`MOV32RtoR
(
HOST_r1
,
	`RódReg
(
π
[
i
]));

2513 #i‚de‡
REC_USE_MEMORY_FUNCS


2514 
	`MOV32RtoR
(
HOST_r2
,
HOST_r11
);

2516 
	`CALLFunc
((
u32
)
MEMWRITE32_FUNC
);

2518 
	`¨mSëJ32
(
j32På
[10]);

2519 
pc
+=(
n
-1)*4;

2520 
ªc_›codes
=
n
;

2522 
	`iU∆ockReg
(3);

2523 
r2_is_dúty
=1;

2524 
	}
}

2528 
	$ªcLWL
() {

2530 i‡(!
ªc_pha£
) {

2531 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

2532 i‡(!
	`IsC⁄°
(
_Rs_
)) {

2533 
	`RódReg
(
_Rs_
);

2535 i‡(!
	`IsC⁄°
(
_Rt_
)) {

2536 i‡(
_Rt_
) {

2537 
	`RódWrôeReg
(
_Rt_
);

2540 i‡(
_Rt_
) {

2541 
	`WrôeReg
(
_Rt_
);

2546 #ifde‡
DEBUG_CPU


2547 
	`dbgf
("\t\åecLWL R%òR%òMîgêmem[R%ò+ %i]\n",
_Rt_
,_Rt_,
_Rs_
,
_Imm_
);

2549 
	`iLockReg
(3);

2550 i‡(
_Rt_
) {

2551 
	`iPushOfB
();

2553 
u32
 
ãmp
=
	`TempReg
();

2554 
	`wrôe32
(
	`AND_IMM
(
ãmp
, 
HOST_r0
, 3, 0));

2555 
	`wrôe32
(
	`BIC_IMM
(
HOST_r0
, HOST_r0, 3, 0));

2556 
	`PSXMEMREAD32
(
HOST_r0
);

2557 
	`MOV32RtoR
(
HOST_r2
,
ãmp
);

2558 
	`Rñó£TempReg
(
ãmp
);

2560 
u32
 
π
;

2561 i‡(
	`IsC⁄°
(
_Rt_
)) {

2562 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

2564 
π
=
	`RódReg
(
_Rt_
);

2565 
	`MOV32RtoR
(
HOST_r1
, 
π
);

2568 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 20));

2569 
	`wrôe32
(0xe79ec102);

2570 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 16));

2571 
	`wrôe32
(0xe00cc001);

2572 
	`wrôe32
(0xe79e2102);

2573 
	`wrôe32
(0xe18c0210);

2574 
	`wrôe32
(
	`B_FWD
(4));

2575 
dißrm_immedüãs
=1;

2576  
	`wrôe32
((
u32
)
LWL_MASK
);

2577  
	`wrôe32
((
u32
)
LWL_SHIFT
);

2578 
dißrm_immedüãs
=0;

2580 
π
=
	`WrôeReg
(
_Rt_
);

2581 
	`MOV32RtoR
(
π
,
HOST_r0
);

2585 
	`iPushOfB
();

2586 
	`wrôe32
(
	`BIC_IMM
(
HOST_r0
, HOST_r0, 3, 0));

2587 
	`PSXHWREAD32
();

2589 
	`iU∆ockReg
(3);

2590 
r2_is_dúty
=1;

2591 
	}
}

2595 
	$ªcLWR
() {

2597 i‡(!
ªc_pha£
) {

2598 i‡(
autobüs
Ë
cy˛es_≥ndög
+=1;

2599 i‡(!
	`IsC⁄°
(
_Rs_
)) {

2600 
	`RódReg
(
_Rs_
);

2602 i‡(!
	`IsC⁄°
(
_Rt_
)) {

2603 i‡(
_Rt_
) {

2604 
	`RódWrôeReg
(
_Rt_
);

2607 i‡(
_Rt_
) {

2608 
	`WrôeReg
(
_Rt_
);

2613 #ifde‡
DEBUG_CPU


2614 
	`dbgf
("\t\åecLWR R%òR%òMîgêmem[R%ò+ %i]\n",
_Rt_
,_Rt_,
_Rs_
,
_Imm_
);

2616 
	`iLockReg
(3);

2617 i‡(
_Rt_
) {

2618 
	`iPushOfB
();

2619 
u32
 
ãmp
=
	`TempReg
();

2620 
	`wrôe32
(
	`AND_IMM
(
ãmp
, 
HOST_r0
, 3, 0));

2621 
	`wrôe32
(
	`BIC_IMM
(
HOST_r0
, HOST_r0, 3, 0));

2622 
	`PSXMEMREAD32
(
HOST_r0
);

2623 
	`MOV32RtoR
(
HOST_r2
,
ãmp
);

2624 
	`Rñó£TempReg
(
ãmp
);

2626 
u32
 
π
;

2627 i‡(
	`IsC⁄°
(
_Rt_
)) {

2628 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

2630 
π
=
	`RódReg
(
_Rt_
);

2631 
	`MOV32RtoR
(
HOST_r1
, 
π
);

2634 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 20));

2635 
	`wrôe32
(0xe79ec102);

2636 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 16));

2637 
	`wrôe32
(0xe00cc001);

2638 
	`wrôe32
(0xe79e2102);

2639 
	`wrôe32
(0xe18c0230);

2640 
	`wrôe32
(
	`B_FWD
(4));

2641 
dißrm_immedüãs
=1;

2642  
	`wrôe32
((
u32
)
LWR_MASK
);

2643  
	`wrôe32
((
u32
)
LWR_SHIFT
);

2644 
dißrm_immedüãs
=0;

2646 
π
=
	`WrôeReg
(
_Rt_
);

2647 
	`MOV32RtoR
(
π
,
HOST_r0
);

2651 
	`iPushOfB
();

2652 
	`wrôe32
(
	`BIC_IMM
(
HOST_r0
, HOST_r0, 3, 0));

2653 
	`PSXHWREAD32
();

2655 
	`iU∆ockReg
(3);

2656 
r2_is_dúty
=1;

2657 
	}
}

2661 
	$ªcSWL
() {

2663 i‡(!
ªc_pha£
) {

2664 i‡(
autobüs
Ë
cy˛es_≥ndög
+=3;

2665 i‡(!
	`IsC⁄°
(
_Rs_
)) {

2666 
	`RódReg
(
_Rs_
);

2668 i‡(!
	`IsC⁄°
(
_Rt_
)) {

2669 
	`RódReg
(
_Rt_
);

2673 #ifde‡
DEBUG_CPU


2674 
	`dbgf
("\t\åecSWL mem[R%ò+ %i] = R%òMîgêmem\n",
_Rs_
,
_Imm_
,
_Rt_
);

2676 
	`iLockReg
(3);

2677 
	`iPushOfB
();

2678 
u32
 
ãmp
=
	`TempReg
();

2679 
	`wrôe32
(
	`AND_IMM
(
ãmp
, 
HOST_r0
, 3, 0));

2680 
	`wrôe32
(
	`BIC_IMM
(
HOST_r0
, HOST_r0, 3, 0));

2681 
	`wrôe32
(0xe92d0001);

2682 
	`PSXMEMREAD32
(
HOST_r0
);

2683 
	`MOV32RtoR
(
HOST_r2
,
ãmp
);

2684 
	`Rñó£TempReg
(
ãmp
);

2686 i‡(
	`IsC⁄°
(
_Rt_
)) {

2687 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

2689 
u32
 
π
=
	`RódReg
(
_Rt_
);

2690 
	`MOV32RtoR
(
HOST_r1
, 
π
);

2693 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 20));

2694 
	`wrôe32
(0xe79ec102);

2695 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 16));

2696 
	`wrôe32
(0xe00cc000);

2697 
	`wrôe32
(0xe79e2102);

2698 
	`wrôe32
(0xe18c0231);

2699 
	`wrôe32
(
	`B_FWD
(4));

2700 
dißrm_immedüãs
=1;

2701  
	`wrôe32
((
u32
)
SWL_MASK
);

2702  
	`wrôe32
((
u32
)
SWL_SHIFT
);

2703 
dißrm_immedüãs
=0;

2705 
	`MOV32RtoR
(
HOST_r1
,
HOST_r0
);

2706 
	`wrôe32
(0xe8bd0001);

2707 i‡(
C⁄fig
.
HLE
) {

2708 
	`PSXMEMWRITE32
(
HOST_r1
);

2710 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

2711 
	`iPutCy˛esAdd
(0);

2712 
	`CALLFunc
((
u32
)
psxMemWrôe32
);

2714 
	`iU∆ockReg
(3);

2715 
r2_is_dúty
=1;

2716 
	}
}

2720 
	$ªcSWR
() {

2722 i‡(!
ªc_pha£
) {

2723 i‡(
autobüs
Ë
cy˛es_≥ndög
+=3;

2724 i‡(!
	`IsC⁄°
(
_Rs_
)) {

2725 
	`RódReg
(
_Rs_
);

2727 i‡(!
	`IsC⁄°
(
_Rt_
)) {

2728 
	`RódReg
(
_Rt_
);

2732 #ifde‡
DEBUG_CPU


2733 
	`dbgf
("\t\åecSWR mem[R%ò+ %i] = R%òMîgêmem\n",
_Rs_
,
_Imm_
,
_Rt_
);

2735 
	`iLockReg
(3);

2736 
	`iPushOfB
();

2738 
u32
 
ãmp
=
	`TempReg
();

2739 
	`wrôe32
(
	`AND_IMM
(
ãmp
, 
HOST_r0
, 3, 0));

2740 
	`wrôe32
(
	`BIC_IMM
(
HOST_r0
, HOST_r0, 3, 0));

2741 
	`wrôe32
(0xe92d0001);

2742 
	`PSXMEMREAD32
(
HOST_r0
);

2743 
	`MOV32RtoR
(
HOST_r2
,
ãmp
);

2744 
	`Rñó£TempReg
(
ãmp
);

2746 i‡(
	`IsC⁄°
(
_Rt_
)) {

2747 
	`MOV32ItoR
(
HOST_r1
, 
iRegs
[
_Rt_
].
k
);

2749 
u32
 
π
=
	`RódReg
(
_Rt_
);

2750 
	`MOV32RtoR
(
HOST_r1
, 
π
);

2753 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 20));

2754 
	`wrôe32
(0xe79ec102);

2755 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 16));

2756 
	`wrôe32
(0xe00cc000);

2757 
	`wrôe32
(0xe79e2102);

2758 
	`wrôe32
(0xe18c0211);

2759 
	`wrôe32
(
	`B_FWD
(4));

2760 
dißrm_immedüãs
=1;

2761  
	`wrôe32
((
u32
)
SWR_MASK
);

2762  
	`wrôe32
((
u32
)
SWR_SHIFT
);

2763 
dißrm_immedüãs
=0;

2765 
	`MOV32RtoR
(
HOST_r1
,
HOST_r0
);

2766 
	`wrôe32
(0xe8bd0001);

2767 i‡(
C⁄fig
.
HLE
) {

2768 
	`PSXMEMWRITE32
(
HOST_r1
);

2770 i‡(
autobüs
Ë
cy˛es_≥ndög
+=2;

2771 
	`iPutCy˛esAdd
(0);

2772 
	`CALLFunc
((
u32
)
psxMemWrôe32
);

2774 
	`iU∆ockReg
(3);

2775 
r2_is_dúty
=1;

2776 
	}
}

	@src/recompiler/arm/rec_misc.h

22 
	$ã°SWI¡s
(
psxRegi°îs
 *
ªgs
, 
_bønch
) {

25 i‡(
ªgs
->
CP0
.
n
.
Cau£
 &Ñegs->CP0.n.
Sètus
 & 0x0300 &&

26 
ªgs
->
CP0
.
n
.
Sètus
 & 0x1) {

27 
	`psxEx˚±i⁄
(
ªgs
->
CP0
.
n
.
Cau£
, 
_bønch
);

29 
	}
}

32 
	$ªcSYSCALL
() {

33 #ifde‡
DEBUG_CPU


34 i‡(
ªc_pha£
) {

35 
	`dbg
("\t\trecSYSCALL");

39 
	`iLockReg
(3);

40 
	`iFlushRegs
();

42 
	`MOV32ItoR
(
HOST_r0
, 
pc
 - 4);

43 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
pc
, 
HOST_r0
);

44 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

45 
cy˛es_≥ndög
=0;

46 
	`MOV32ItoR
(
HOST_r1
,(
bønch
 == 1 ? 1 : 0));

47 
	`MOV32ItoR
(
HOST_r0
,0x20);

48 
	`CALLFunc
 ((
u32
)
psxEx˚±i⁄
);

50 
	`ExôPCh™ge
();

51 
	`iU∆ockReg
(3);

52 
	`iCÀ¨Regs
();

53 
pcﬁd
=
pc
;

54 
r2_is_dúty
=1;

55 
	}
}

58 
	$ªcBREAK
() {

59 #ifde‡
DEBUG_CPU


60 i‡(
ªc_pha£
) {

61 
	`dbg
("\t\trecBREAK");

64 
	}
}

67 
	$ªcMFHI
() {

68 #ifde‡
DEBUG_CPU


69 i‡(
ªc_pha£
) {

70 
	`dbg
("\t\trecMFHI");

74 i‡(
_Rd_
)

76 i‡(
	`IsC⁄°
(33)) {

77 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[33].
k
);

79 
u32
 
hi
=
	`RódReg
(33);

80 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

81 
	`MOV32RtoR
(
rd
,
hi
);

84 
	}
}

87 
	$ªcMTHI
() {

88 #ifde‡
DEBUG_CPU


89 i‡(
ªc_pha£
) {

90 
	`dbg
("\t\trecMTHI");

94 i‡(
	`IsC⁄°
(
_Rs_
)) {

95 
	`M≠C⁄°
(33, 
iRegs
[
_Rs_
].
k
);

97 
u32
 
rs
=
	`RódReg
(
_Rs_
);

98 
u32
 
hi
=
	`WrôeReg
(33);

99 
	`MOV32RtoR
(
hi
,
rs
);

101 
	}
}

104 
	$ªcMFLO
() {

105 #ifde‡
DEBUG_CPU


106 i‡(
ªc_pha£
) {

107 
	`dbg
("\t\trecMFLO");

111 i‡(
_Rd_
)

113 i‡(
	`IsC⁄°
(32)) {

114 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[32].
k
);

116 
u32
 
lo
=
	`RódReg
(32);

117 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

118 
	`MOV32RtoR
(
rd
,
lo
);

121 
	}
}

124 
	$ªcMTLO
() {

125 #ifde‡
DEBUG_CPU


126 i‡(
ªc_pha£
) {

127 
	`dbg
("\t\trecMTLO");

131 i‡(
	`IsC⁄°
(
_Rs_
)) {

132 
	`M≠C⁄°
(32, 
iRegs
[
_Rs_
].
k
);

134 
u32
 
rs
=
	`RódReg
(
_Rs_
);

135 
u32
 
lo
=
	`WrôeReg
(32);

136 
	`MOV32RtoR
(
lo
,
rs
);

138 
	}
}

141 
	$ªcMFC0
() {

142 #ifde‡
DEBUG_CPU


143 i‡(
ªc_pha£
) {

144 
	`dbg
("\t\trecMFC0");

148 i‡(
_Rt_
)

150 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

151 
	`MOV32MtoR_ªgs
(
π
, (
u32
)&
psxRegs
.
CP0
.
r
[
_Rd_
]);

153 
	}
}

156 
	$ªcCFC0
() {

158 
	`ªcMFC0
();

159 
	}
}

162 
	$ªcMTC0
() {

164 #ifde‡
DEBUG_CPU


165 i‡(
ªc_pha£
) {

166 
	`dbg
("\t\trecMTC0");

169 i‡(
	`IsC⁄°
(
_Rt_
)) {

170 i‡(
_Rd_
==13) {

171 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP0
.
r
[
_Rd_
], 
iRegs
[
_Rt_
].
k
 & ~(0xfc00));

173 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP0
.
r
[
_Rd_
], 
iRegs
[
_Rt_
].
k
);

176 
u32
 
π
=
	`RódReg
(
_Rt_
);

177 i‡(
_Rd_
==13) {

178 
	`MOV32RtoR
(
HOST_r0
, 
π
);

179 
	`AND32ItoR
(
HOST_r0
, ~(0xfc00));

180 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP0
.
r
[
_Rd_
], 
HOST_r0
);

182 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP0
.
r
[
_Rd_
], 
π
);

186 i‡(
_Rd_
 == 12 || _Rd_ == 13) {

187 
	`iLockReg
(3);

188 
	`iUpd©eRegs
(1);

189 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
, (u32)pc);

190 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

191 
cy˛es_≥ndög
=0;

192 
	`MOV32ItoR
(
HOST_r1
,
bønch
);

193 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

194 
	`CALLFunc
((
u32
)
ã°SWI¡s
);

196 i‡(
bønch
 == 0) {

197 
	`ExôPCh™ge
();

199 
	`iU∆ockReg
(3);

200 
r2_is_dúty
=1;

201 
	`iCÀ¨Regs
();

202 
pcﬁd
=
pc
;

204 
	}
}

207 
	$ªcCTC0
() {

209 
	`ªcMTC0
();

210 
	}
}

213 
	$ªcRFE
() {

214 #ifde‡
DEBUG_CPU


215 i‡(
ªc_pha£
) {

216 
	`dbg
("\t\trecRFE");

219 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
CP0
.
n
.
Sètus
);

220 
	`wrôe32
(0xe20c203c);

221 
	`wrôe32
(0xe3cc100f);

222 
	`wrôe32
(
	`ORR_REG_LSR_IMM
(
HOST_r2
,
HOST_r1
,HOST_r2,2));

223 
	`MOV32RtoM_ªgs
(&
psxRegs
.
CP0
.
n
.
Sètus
,
HOST_r2
);

225 #ifde‡
REC_USE_R2


226 
	`MOV32ItoR
(
HOST_r2
,0);

227 
	`MOV32RtoM_ªgs
(&
psxRegs
.
io_cy˛e_cou¡î
,
HOST_r2
);

228 
r2_is_dúty
=0;

230 
	`MOV32ItoM_ªgs
(&
psxRegs
.
io_cy˛e_cou¡î
,0);

233 
	`iLockReg
(3);

234 
	`iUpd©eRegs
(1);

235 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
, (u32)pc);

236 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

237 
cy˛es_≥ndög
=0;

238 
	`MOV32ItoR
(
HOST_r1
,
bønch
);

239 
	`MOV32RtoR
(
HOST_r0
,
HOST_r11
);

240 
	`CALLFunc
((
u32
)
ã°SWI¡s
);

242 i‡(
bønch
 == 0) {

243 
	`ExôPCh™ge
();

245 
	`iU∆ockReg
(3);

246 
r2_is_dúty
=1;

247 
	`iCÀ¨Regs
();

248 
pcﬁd
=
pc
;

249 
	}
}

251 
	$ªcHLE
() {

252 #ifde‡
DEBUG_CPU


253 i‡(
ªc_pha£
) {

254 
	`dbgf
("\t\åecHLE(%.4X)\n",
psxRegs
.
code
&0xffff);

259 i‡(!
block
 && 
	`IsC⁄°
(31Ë&& !
bønch
) {

260 
	`iLockReg
(3);

261 
	`Upd©eGãDñay
(1);

262 
	`iUpd©eRegs
(1);

263 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,Öc);

264 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

265 
cy˛es_≥ndög
=0;

266 
	`CALLFunc
((
u32
)
psxHLEt
[
psxRegs
.
code
 & 0xffff]);

267 
	`MOV32ItoR
(
HOST_r1
,
iRegs
[31].
k
);

268 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

269 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_r1
));

270 #i‚de‡
REC_USE_RETURN_FUNCS


271 
j32På
[5]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

272 
	`RET
();

273 
	`¨mSëJ32
(
j32På
[5]);

275 
	`JUMPFuncNE
(
func_Rëu∫_±r
+4);

277 
pc
=
iRegs
[31].
k
;

278 
	`iU∆ockReg
(3);

279 
r2_is_dúty
=1;

280 
	`iCÀ¨Regs
();

281 
pcﬁd
=
pc
;

282 
ªc_skùs
=
ªc_tŸÆ_›codes
;

286 
	`iFlushRegs
();

287 
	`Upd©eGãDñay
(1);

288 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,Öc);

289 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

290 
cy˛es_≥ndög
=0;

291 
	`CALLFunc
((
u32
)
psxHLEt
[
psxRegs
.
code
 & 0xffff]);

292 
bønch
 = 2;

293 
	`RET
();

295 
	}
}

	@src/recompiler/arm/recompiler.cpp

24 
	~"psxcomm⁄.h
"

25 
	~"psxhw.h
"

26 
	~"r3000a.h
"

27 
	~"psxmem.h
"

28 
	~"dißrm.h
"

29 
	~"gã.h
"

30 
	~"p‹t.h
"

33 #ifde‡
__SYMBIAN32__


34 
CLEAR_INSN_CACHE
(
u32
* 
BEG
, u32* 
END
);

35 
	#sys_ˇcheÊush
 
CLEAR_INSN_CACHE


	)

38 
u32
 
	gpsxRecLUT
[0x010000];

40 #unde‡
PC_REC


41 #unde‡
PC_REC8


42 #unde‡
PC_REC16


43 #unde‡
PC_REC32


44 
	#PC_REC
(
x
Ë(
psxRecLUT
[x >> 16] + (x & 0xffff))

	)

45 
	#PC_REC8
(
x
Ë(*(
u8
 *)
	`PC_REC
(x))

	)

46 
	#PC_REC16
(
x
Ë(*(
u16
*)
	`PC_REC
(x))

	)

47 
	#PC_REC32
(
x
Ë(*(
u32
*)
	`PC_REC
(x))

	)

49 
	#RECMEM_SIZE
 (12 * 1024 * 1024)

	)

51 
	#REC_MAX_OPCODES
 80

	)

53 
	#REC_MAX_OPCODES_LIMIT
 (
REC_MAX_OPCODES
-(REC_MAX_OPCODES/4))

	)

55 #i‡
deföed
(
DEBUG_CPU_OPCODES
Ë|| deföed(
DEBUG_CPU
)

56 
	#REC_MAX_TO_TEST
 0

	)

58 
	#REC_MAX_TO_TEST
 64

	)

61 #i‡
deföed
(
DEBUG_CPU_OPCODES
Ë|| deföed(
DEBUG_CPU
)

62 
	#REC_MAX_LOOPS
 0

	)

64 
	#REC_MAX_LOOPS
 (
REC_MAX_OPCODES
/
REC_MAX_TO_TEST
)

	)

67 #i‡
deföed
(
DEBUG_CPU_OPCODES
Ë|| deföed(
DEBUG_CPU
)

68 
	#REC_MAX_SKIPS
 0

	)

70 
	#REC_MAX_SKIPS
 5

	)

73 #i‡
deföed
(
DEBUG_CPU_OPCODES
Ë|| deföed(
DEBUG_CPU
)

74 
	#REC_MAX_RWLOOP
 0

	)

76 
	#REC_MAX_RWLOOP
 32

	)

79 
	#REC_MAX_RWLOOP_SIZE
 0x10000

	)

81 
	#REC_MAX_UPDATE_CYCLES
 12

	)

83 
	#REC_MAX_2ND_REG_CACHE
 6

	)

85 
	#REC_MAX_2ND_NOLINK
 1024

	)

87 
	#REC_MAX_IMMEDIATE_LONG
 1024

	)

89 
	#REC_SIZE_TABLE_REGS_FLUSH
 (12*1024)

	)

91 #i‡
deföed
(
DEBUG_CPU_OPCODES
Ë|| deföed(
DEBUG_CPU
)

92 
	#REC_FORCE_DELAY_READ


	)

96 
	#REC_USE_R2


	)

98 
	#REC_USE_R3


	)

100 
	#REC_USE_DIRECT_MEM


	)

102 
	#REC_USE_GTECALC_INLINE


	)

104 
	#REC_USE_RETURN_FUNCS


	)

106 
	#REC_USE_MEMORY_FUNCS


	)

108 
	#REC_USE_GTE_FUNCS


	)

110 
	#REC_USE_GTE_DELAY_CALC


	)

112 
	#REC_USE_FAST_BLOCK


	)

114 
	#REC_USE_FAST_SECURE


	)

116 
	#REC_USE_FAST_BIOS


	)

118 
	#REC_USE_2ND_PHASE


	)

120 
	#REC_USE_2ND_PRESERVE_CONST


	)

122 
	#REC_USE_2ND_REG_CACHE


	)

128 
	#REC_USE_GTE_ASM_FUNCS


	)

130 
	#REC_USE_GTE_MAP_REGS


	)

132 
	#REC_USE_ALIGN


	)

134 #ifde‡
gã_n⁄e


135 #i‚de‡
REC_USE_GTE_ASM_FUNCS


136 #îr‹ 
NEED
 
A
 
GTE
 !

138 
	#gã_√w


	)

142 
	gªc_£cuª_wrôes
=0;

143 #i‚de‡
__SYMBIAN32__


144 
	gªcMem
[
RECMEM_SIZE
 + (
REC_MAX_OPCODES
*2Ë+ 0x4000] 
__©åibuã__
 ((
__Æig√d__
 (32)));

146 *
ªcMem
;

148 
	gªcRAM
[0x200000] 
__©åibuã__
 ((
__Æig√d__
 (32)));

149 
	gªcROM
[0x080000] 
__©åibuã__
 ((
__Æig√d__
 (32)));

151 
u32
 
	gpc
;

152 
u32
 
	gpcﬁd
;

154 
u32
 
	gpcöô
;

155 
	gªc_ölo›
;

156 
	gªc_skùs
;

157 
	gªc_›codes
=0;

158 
	gªc_tŸÆ_›codes
=0;

159 
	gbønch
;

160 
u32
 
	gèrgë
;

161 
u32
 
	gblock
=0;

163 #i‡
deföed
(
öãΩªãr_√w
Ë|| deföed(
öãΩªãr_n⁄e
)

164 
_psxDñayTe°
(
u32
 *
ªgs
, u32 
code
, u32 
bpc
);

168 
u32
 
	m°©e
;

169 
u32
 
	mk
;

170 
u32
 
	mªg
;

171 
u32
 
	mªgw
;

172 } 
	tiRegi°îs
;

174 
iRegi°îs
 
	giRegs
[34] 
__©åibuã__
 ((
__Æig√d__
 (32)));

175 
iRegi°îs
 
	giRegsS
[34] 
__©åibuã__
 ((
__Æig√d__
 (32)));

176 
iRegi°îs
 
	gHWRegs
[16] 
__©åibuã__
 ((
__Æig√d__
 (32)));

177 
iRegi°îs
 
	gHWRegsS
[16] 
__©åibuã__
 ((
__Æig√d__
 (32)));

179 
	#ST_UNK
 0

	)

180 
	#ST_CONST
 1

	)

181 
	#ST_MAPPED
 2

	)

182 
	#ST_HOLD
 4

	)

184 
	#IsC⁄°
(
ªg
Ë(
iRegs
[ªg].
°©e
 =
ST_CONST
)

	)

185 
	#IsM≠≥d
(
ªg
Ë(
iRegs
[ªg].
°©e
 =
ST_MAPPED
)

	)

187 #ifde‡
REC_USE_2ND_PHASE


189 
u32
 
	mpc
;

190 
u32
 *
	m±r
;

191 
u32
 
	m¥ev
;

192 
iRegi°îs
 
	mªgs
[34];

193 } 
	tiPªvRecJump
;

196 
u32
 
	mpc
;

197 
u32
 *
	m±r
;

198 
iPªvRecJump
 *
	mjump
;

199 
iRegi°îs
 
	mªgs
[34];

200 
u8
 
	mjum≥d
;

201 #i‚de‡
REC_USE_2ND_PRESERVE_CONST


202 
u8
 
	m˛ór_c⁄°
[34];

204 
u64
 
	mc⁄°s
;

206 #ifde‡
DEBUG_CPU


207 
u16
 
	mcode
;

209 } 
	tiPªvRec
;

211 #ifde‡
REC_USE_2ND_PRESERVE_CONST


212 
u64
 
	ga˘uÆ_c⁄°s
=1ULL;

215 
	gªcPªv_jumps
=0;

216 
iPªvRec
 
	gªcPªv
[
REC_MAX_OPCODES
+32] 
__©åibuã__
 ((
__Æig√d__
 (32)));;

217 
iPªvRecJump
 
	gªcPªvJump
[
REC_MAX_OPCODES
+32] 
__©åibuã__
 ((
__Æig√d__
 (32)));;

218 
iRegi°îs
 
	gªcPªv_tŸÆ
[34] 
__©åibuã__
 ((
__Æig√d__
 (32)));;

219 
iRegi°îs
 
	gªcPªv_tŸÆS
[34] 
__©åibuã__
 ((
__Æig√d__
 (32)));;

220 
	gªc_pha£
=1;

221 
	gªc_tŸÆ_›codes_¥ev
=0;

223 
	#ªc_pha£
 1

	)

226 (*
ªcBSC
[64])();

227 (*
ªcSPC
[64])();

228 (*
ªcREG
[32])();

229 (*
ªcCP0
[32])();

230 (*
ªcCP2
[64])();

231 (*
ªcCP2BSC
[32])();

233 
	~"¨m.h
"

235 #ifde‡
REC_USE_2ND_PHASE


236 #ifde‡
DEBUG_CPU


237 
	#ªcOpcodePªv
() { \

238 
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
].
pc
=pc-4; \

239 
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
].
code
=
psxRegs
.code>>16; \

240 
	`dbgf
("\åecPªv[%i].pc=%p\n",
ªc_tŸÆ_›codes
+
ªc_›codes
,
pc
-4); \

241 }

	)

242 
	#ªcOpcodeNoPªv
() { \

243 i‡(
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
].
pc
!=pc-4) { \

244 
	`¥ötf
("REC-2ND ERRORÑecPªv[%i].pc=%∞!%p\n",
ªc_tŸÆ_›codes
+
ªc_›codes
,
ªcPªv
[ªc_tŸÆ_›codes+ªc_›codes].
pc
,pc-4); \

245 
	`pcsx4Æl_exô
(); \

247 i‡(
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
].
code
!=
psxRegs
.code>>16) { \

248 
	`¥ötf
("REC-2ND ERRORÑecPªv[%i].code=%∞!%p\n",
ªc_tŸÆ_›codes
+
ªc_›codes
,
ªcPªv
[ªc_tŸÆ_›codes+ªc_›codes].
code
,
psxRegs
.code>>16); \

249 
	`pcsx4Æl_exô
(); \

251 }

	)

253 
	#ªcOpcodePªv
() { \

254 
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
].
pc
=pc-4; \

255 }

	)

256 
	#ªcOpcodeNoPªv
() { \

258 }

	)

261 
	#ªcOpcodePªv
()

	)

262 
	#ªcOpcodeNoPªv
()

	)

266 #i‡
deföed
(
DEBUG_CPU_OPCODES
)

267 #ifde‡
DEBUG_CPU


268 
	gÁŒo_ªgi°ro
=0;

269 
	gok_ªgi°ro
=0;

270 
	#ªcOpcode
() { \

271 i‡(
ªc_pha£
) { \

272 
	`wrôe32
(0xe92d001f); \

273 i‡(!
r2_is_dúty
) { \

274 
	`MOV32RtoR
(
HOST_r0
,
HOST_r2
); \

275 
	`CALLFunc
((
u32
)
ã°_r2_iocy˛es
); \

277 
	`MOV32ItoR
(
HOST_r3
,
block
); \

278 
	`MOV32ItoR
(
HOST_r2
,(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
)); \

279 
	`MOV32ItoR
(
HOST_r1
,
psxRegs
.
code
); \

280 
	`MOV32ItoR
(
HOST_r0
,
pc
); \

281 
	`CALLFunc
((
u32
)
dbg_›code
); \

282 
_±r_›code
=()
¨mPå
; \

283 
_ﬁd_pc
=
pc
-4; \

284 
	`wrôe32
(0xe8bd001f); \

285 
	`ªcOpcodeNoPªv
(); \

286 
ªc_›codes
++; \

287 
ªcBSC
[
psxRegs
.
code
 >> 26](); \

288 
	`dbgf
("\t\t%òbyã†(PC=%p)\n",(()
¨mPå
)-
_±r_›code
,
_ﬁd_pc
); \

290 
	`ªcOpcodePªv
(); \

291 
ªc_›codes
++; \

292 
ªcBSC
[
psxRegs
.
code
 >> 26](); \

294 }

	)

296 
psxRegi°îs
 
	gmîde
;

297 
	$c›ü
(Ë{ 
	`mem˝y
((*)&
mîde
,(*)&
psxRegs
,(
psxRegi°îs
)); 
	}
}

298 
	$ª°auø
(Ë{ 
	`mem˝y
((*)&
psxRegs
,(*)&
mîde
,(
psxRegi°îs
)); 
	}
}

299 
	#ªcOpcode
() { \

300 i‡(
ªc_pha£
) { \

301 
	`wrôe32
(0xe92d001f); \

310 
	`MOV32ItoR
(
HOST_r3
,
block
); \

311 
	`MOV32ItoR
(
HOST_r2
,(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
)); \

312 
	`MOV32ItoR
(
HOST_r1
,
psxRegs
.
code
); \

313 
	`MOV32ItoR
(
HOST_r0
,
pc
); \

314 
	`CALLFunc
((
u32
)
dbg_›code
); \

315 
	`wrôe32
(0xe8bd001f); \

316 
	`ªcOpcodeNoPªv
(); \

318 
	`ªcOpcodePªv
(); \

320 
ªc_›codes
++; \

321 
ªcBSC
[
psxRegs
.
code
 >> 26](); \

322 }

	)

325 #ifde‡
DEBUG_CPU


326 
	gÁŒo_ªgi°ro
=0;

327 
	gok_ªgi°ro
=0;

328 
	#ªcOpcode
() { \

329 i‡(
ªc_pha£
) { \

330 
_±r_›code
=()
¨mPå
; \

331 
_ﬁd_pc
=
pc
-4; \

332 
	`ªcOpcodeNoPªv
(); \

333 
ªc_›codes
++; \

334 
ªcBSC
[
psxRegs
.
code
 >> 26](); \

335 
	`dbgf
("\t\t%òbyã†(PC=%p)\n",(()
¨mPå
)-
_±r_›code
,
_ﬁd_pc
); \

337 
	`ªcOpcodePªv
(); \

338 
ªc_›codes
++; \

339 
ªcBSC
[
psxRegs
.
code
 >> 26](); \

341 }

	)

343 
	#ªcOpcode
() { \

344 i‡(!
ªc_pha£
) { \

345 
	`ªcOpcodePªv
(); \

347 
	`ªcOpcodeNoPªv
(); \

349 
ªc_›codes
++; \

350 
ªcBSC
[
psxRegs
.
code
 >> 26](); \

351 }

	)

356 
	gr2_is_dúty
=1;

357 
	ghas_bìn_wrôãn
=0;

358 
ªcCÀ¨
(
u32
 
Addr
, u32 
Size
);

359 
ªcCÀ¨DoubÀ
(
u32
 
Addr1
, u32 
Addr2
);

360 
u32
 
	gcy˛es_≥ndög
=0;

362 
	$iPutCy˛esAdd
(
f‹˚d
) {

363 i‡(!
ªc_pha£
)

365 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

366 i‡(
f‹˚d
) {

367 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

368 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e_add
,0);

369 
pcﬁd
=
pc
;

370 
cy˛es_≥ndög
=0;

372 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e_add
,(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

375 i‡(
f‹˚d
 || (((
pc
-
pcﬁd
)/4)>=
REC_MAX_UPDATE_CYCLES
)) {

376 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

377 
pcﬁd
=
pc
;

378 
cy˛es_≥ndög
=0;

381 
	}
}

383 #ifde‡
DEBUG_CPU_OPCODES


385 
	$ã°_r2_iocy˛es
(
r2
) {

386 i‡(
r2
!=
psxRegs
.
io_cy˛e_cou¡î
) {

387 
	`dbgf
("R2=%ò!io_cy˛es=%i\n",
r2
,
psxRegs
.
io_cy˛e_cou¡î
);

389 
	}
}

392 
Unm≠GãReg
(
u32
 
˝u_ªg
);

394 
	$M≠C⁄°
(
u32
 
ªg
, u32 
_c⁄°
) {

395 #ifde‡
REC_USE_2ND_PHASE


396 i‡(!
ªc_pha£
) {

397 
ªcPªv_tŸÆ
[
ªg
].
°©e
 = 
ST_CONST
;

398 
iRegs
[
ªg
].
°©e
 = 
ST_CONST
;

399 
iRegs
[
ªg
].
k
 = 
_c⁄°
;

400 #ifde‡
REC_USE_2ND_PRESERVE_CONST


401 
a˘uÆ_c⁄°s
|=(1ULL<<
ªg
);

406 #ifde‡
DEBUG_CPU


407 
	`dbgf
("\t\t\t\tM≠C⁄°Ñ%i=%p",
ªg
,
_c⁄°
);

409 
	`Unm≠GãReg
(
ªg
);

410 i‡(
	`IsM≠≥d
(
ªg
)) {

411 #ifde‡
DEBUG_CPU


412 
	`dbgf
(" (!R%i)",
iRegs
[
ªg
].reg);

414 
HWRegs
[
iRegs
[
ªg
].ªg].
°©e
=
ST_UNK
;

416 
iRegs
[
ªg
].
k
 = 
_c⁄°
;

417 
iRegs
[
ªg
].
°©e
 = 
ST_CONST
;

418 
iRegs
[
ªg
].
ªgw
 = 1;

419 #ifde‡
DEBUG_CPU


420 
	`dbg
("");

422 
	}
}

424 
	$Unm≠
(
u32
 
ªg
) {

425 i‡(!
ªc_pha£
) {

426 
iRegs
[
ªg
].
°©e
 = 
ST_UNK
;

427 #ifde‡
REC_USE_2ND_PRESERVE_CONST


428 
a˘uÆ_c⁄°s
&=~(1ULL<<
ªg
);

432 #ifde‡
DEBUG_CPU


433 
	`dbgf
("\t\t\t\tUnm≠Ñ%i",
ªg
);

435 i‡(
	`IsM≠≥d
(
ªg
)) {

436 #ifde‡
DEBUG_CPU


437 
	`dbgf
(" (!R%i)",
iRegs
[
ªg
].reg);

439 
HWRegs
[
iRegs
[
ªg
].ªg].
°©e
=
ST_UNK
;

441 
iRegs
[
ªg
].
°©e
 = 
ST_UNK
;

442 #ifde‡
DEBUG_CPU


443 
	`dbg
("");

445 
	}
}

447 
	$iFlushReg
(
u32
 
ªg
) {

448 i‡(!
ªc_pha£
) {

449 
iRegs
[
ªg
].
°©e
 = 
ST_UNK
;

452 i‡((
	`IsC⁄°
(
ªg
)Ë&& 
iRegs
[ªg].
ªgw
) {

453 #ifde‡
DEBUG_CPU


454 
	`dbgf
("\t\t\t\å%i=%p\n",
ªg
,
iRegs
[ªg].
k
);

456 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
GPR
.
r
[
ªg
], 
iRegs
[ªg].
k
);

457 } i‡(
	`IsM≠≥d
(
ªg
)) {

458 i‡(
iRegs
[
ªg
].
ªgw
)

460 #ifde‡
DEBUG_CPU


461 
	`dbgf
("\t\t\t\å%i=R%i\n",
ªg
,
iRegs
[reg].reg);

463 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
GPR
.
r
[
ªg
], 
iRegs
[reg].reg);

465 
HWRegs
[
iRegs
[
ªg
].ªg].
°©e
=
ST_UNK
;

467 
iRegs
[
ªg
].
°©e
 = 
ST_UNK
;

468 
	}
}

470 
Re£tM≠GãRegs
();

472 #ifde‡
REC_USE_2ND_PHASE


473 
	$iCÀ¨RegsPªv
() {

474 
ªcPªv_jumps
=0;

475 
	`mem£t
((*)
iRegs
, 0, (iRegs));

476 
	`mem£t
((*)
ªcPªv
,0,(recPrev));

477 
	`mem£t
((*)
ªcPªv_tŸÆ
, 0, (recPrev_total));

478 
iRegs
[0].
°©e
 = 
ªcPªv_tŸÆ
[0].°©ê
ST_CONST
;

479 #ifde‡
REC_USE_2ND_PRESERVE_CONST


480 
a˘uÆ_c⁄°s
=1ULL;

482 
	}
}

485 
	$iRe£tRegw
() {

486 
i
;

487 
i
=1;i<34;i++)

488 
iRegs
[
i
].
ªgw
=1;

489 
	}
}

494 
	$iCÀ¨Regs
() {

495 #ifde‡
REC_USE_2ND_PHASE


496 i‡(!
ªc_pha£
) {

497 
i
;

498 
i
=0;i<34;i++) {

499 
ªcPªv_tŸÆ
[
i
].
°©e
=
ST_CONST
;

500 
iRegs
[
i
].
°©e
 = 
ST_UNK
;

502 #ifde‡
REC_USE_2ND_PRESERVE_CONST


503 
a˘uÆ_c⁄°s
=1ULL;

505 
iRegs
[0].
°©e
 = 
ST_CONST
;

506 
iRegs
[0].
k
 = 0;

510 #ifde‡
DEBUG_CPU


511 
	`dbg
("\t\t\tiClearRegs");

513 
	`mem£t
(
iRegs
, 0, (iRegs));

514 
iRegs
[0].
°©e
 = 
ST_CONST
;

515 
iRegs
[0].
k
 = 0;

516 
HWRegs
[0].
°©e
 = 
ST_CONST
;

517 
HWRegs
[1].
°©e
 = 
ST_CONST
;

518 
HWRegs
[2].
°©e
 = 
ST_CONST
;

519 #i‚de‡
REC_USE_R3


520 
HWRegs
[3].
°©e
 = 
ST_CONST
;

522 
HWRegs
[3].
°©e
 = 
ST_UNK
;

524 
HWRegs
[4].
°©e
 = 
ST_UNK
;

525 
HWRegs
[5].
°©e
 = 
ST_UNK
;

526 
HWRegs
[6].
°©e
 = 
ST_UNK
;

527 
HWRegs
[7].
°©e
 = 
ST_UNK
;

528 
HWRegs
[8].
°©e
 = 
ST_UNK
;

529 
HWRegs
[9].
°©e
 = 
ST_UNK
;

530 
HWRegs
[10].
°©e
 = 
ST_UNK
;

531 
HWRegs
[11].
°©e
 = 
ST_CONST
;

532 
HWRegs
[12].
°©e
 = 
ST_CONST
;

533 
HWRegs
[13].
°©e
 = 
ST_CONST
;

534 
HWRegs
[14].
°©e
 = 
ST_CONST
;

535 
HWRegs
[15].
°©e
 = 
ST_CONST
;

536 
	`Re£tM≠GãRegs
();

537 
	}
}

539 
	$iFlushRegs
() {

540 
i
;

541 i‡(!
ªc_pha£
) {

544 #ifde‡
DEBUG_CPU


545 
_±r_›code_
=()
¨mPå
;

546 
	`dbg
("\t\t\tiFlushRegs");

548 i‡(
	`IsM≠≥d
(0)Ë
	`Unm≠
(0);

549 
iRegs
[0].
k
 = 0; iRegs[0].
°©e
 = 
ST_CONST
;

550 
i
=1; i<34; i++) {

551 
	`iFlushReg
(
i
);

553 #ifde‡
DEBUG_CPU


554 
	`dbgf
("\t\t\t!iFlushReg†%i\n",(()
¨mPå
)-
_±r_›code_
);

556 
	}
}

559 
	$_iUpd©eRegs
(
˛ór
) {

560 
i
;

561 i‡(!
ªc_pha£
) {

564 #ifde‡
DEBUG_CPU


565 
_±r_›code_
=()
¨mPå
;

566 
	`dbg
("\t\t\tiUpdateRegs");

568 
i
=1; i<34; i++) {

569 #ifde‡
DEBUG_CPU_OPCODES


570 i‡(
	`IsC⁄°
(
i
)) {

572 i‡((
	`IsC⁄°
(
i
)Ë&& (
iRegs
[i].
ªgw
)) {

574 #ifde‡
DEBUG_CPU


575 
	`dbgf
("\t\t\t\å%i=%p\n",
i
,
iRegs
[i].
k
);

577 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
GPR
.
r
[
i
], 
iRegs
[i].
k
);

578 i‡(
˛ór
)

579 
iRegs
[
i
].
ªgw
=0;

580 #ifde‡
DEBUG_CPU_OPCODES


581 } i‡(
	`IsM≠≥d
(
i
)) {

583 } i‡((
	`IsM≠≥d
(
i
)Ë&& (
iRegs
[i].
ªgw
)) {

585 #ifde‡
DEBUG_CPU


586 
	`dbgf
("\t\t\t\å%i=R%i\n",
i
,
iRegs
[i].
ªg
);

588 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
GPR
.
r
[
i
], 
iRegs
[i].
ªg
);

589 i‡(
˛ór
)

590 
iRegs
[
i
].
ªgw
=0;

593 #ifde‡
DEBUG_CPU


594 
	`dbgf
("\t\t\t!iUpd©eReg†%i\n",(()
¨mPå
)-
_±r_›code_
);

596 
	}
}

598 #i‚de‡
REC_USE_TABLE_REGS_FLUSH


599 
	#iUpd©eRegs
(
CLEAR
Ë
	`_iUpd©eRegs
(CLEAR)

	)

600 
	#iRe£tTabÀRegs
()

	)

603 
iRegi°îs
 
	mªgs
[34];

604 
u32
 
	m±r
;

605 
u32
 
	m£¨ch_∑âîn
;

606 *
	m√xt
;

607 } 
	tªgs_Êush_t
;

609 
ªgs_Êush_t
 
	gèbÀ_ªgs_Êush
[
REC_SIZE_TABLE_REGS_FLUSH
];

610 
ªgs_Êush_t
 *
	gèbÀ_ªgs_Êush_£¨ch
[0x20000];

611 
u32
 
	gèbÀ_ªgs_Êush_ödex
=0;

612 
u32
 
	gèbÀ_ªgs_Êush_œ°
=0;

614 
	$iRe£tTabÀRegs
() {

615 
	`mem£t
(
èbÀ_ªgs_Êush
,0,(
ªgs_Êush_t
));

616 
	`mem£t
(
èbÀ_ªgs_Êush_£¨ch
,0,(table_regs_flush_search));

617 
èbÀ_ªgs_Êush_ödex
=0;

618 
	}
}

620 
	$iUpd©eRegs
(
˛ór
) {

621 
i
;

622 
u32
 
∑t
=0;

623 i‡(!
ªc_pha£
) {

626 
i
=1;i<34;i++) {

627 i‡(
iRegs
[
i
].
°©e
==
ST_MAPPED
)

628 
∑t
|=(1<<(
iRegs
[
i
].
ªg
-3));

629 i‡(
i
<25 && (
iRegs
[i].
°©e
&3))

630 
∑t
|=(1<<(7+
i
));

632 
ªgs_Êush_t
 *
íåy
=
èbÀ_ªgs_Êush_£¨ch
[
∑t
&0x1FFFF];

633 
ªgs_Êush_t
 *
back
=
NULL
;

634 
íåy
) {

635 i‡(
íåy
->
£¨ch_∑âîn
==
∑t
) {

636 
íc⁄åado
=1;

637 
i
=1;i<34;i++)

638 i‡(((
iRegs
[
i
].
°©e
&3)!=(
íåy
->
ªgs
[i].°©e&3))||(iRegs[i].°©e==
ST_MAPPED
 && (iRegs[i].
ªg
!Û¡ry->ªgs[i].ªg || iRegs[i].
ªgw
!Û¡ry->ªgs[i].ªgw))||(iRegs[i].°©e==
ST_CONST
 && (iRegs[i].
k
!=entry->regs[i].k || iRegs[i].regw!=entry->regs[i].regw))) {

639 
íc⁄åado
=0;

642 i‡(
íc⁄åado
)

645 
back
=
íåy
;

646 
íåy
=(
ªgs_Êush_t
 *Î¡ry->
√xt
;

648 i‡(!
íåy
) {

649 i‡(
èbÀ_ªgs_Êush_ödex
>=((
èbÀ_ªgs_Êush
)/(
ªgs_Êush_t
))) {

650 
	`_iUpd©eRegs
(
˛ór
);

652 i‡(!
back
) {

653 
íåy
=
èbÀ_ªgs_Êush_£¨ch
[
∑t
&0x1FFFF]=&
èbÀ_ªgs_Êush
[
èbÀ_ªgs_Êush_ödex
++];

655 
íåy
=&
èbÀ_ªgs_Êush
[
èbÀ_ªgs_Êush_ödex
++];

656 
back
->
√xt
=(*)
íåy
;

658 
u32
 *
±r
=
¨mPå
;

659 
	`wrôe32
(
	`ADD_IMM
(
HOST_Ã
,
HOST_pc
,0,0));

660 
	`_iUpd©eRegs
(
˛ór
);

661 
	`wrôe32
(
	`BX_LR
());

662 *
±r
|=((
u32
)
¨mPå
)-((u32)ptr)-8;

663 
íåy
->
±r
=
èbÀ_ªgs_Êush_œ°
=((
u32
)ptr)+4;

664 
íåy
->
£¨ch_∑âîn
=
∑t
;

665 
	`mem˝y
(
íåy
->
ªgs
,
iRegs
,(iRegs));

668 
	`CALLFunc
(
íåy
->
±r
);

669 
èbÀ_ªgs_Êush_œ°
=
íåy
->
±r
;

670 i‡(
˛ór
){

671 
i
=1;i<34;i++)

672 
iRegs
[
i
].
ªgw
=0;

675 
	}
}

678 
u32
 
	$GëReg
(
u32
 
ªg
){

679 
i
,
j
=0;

680 
u32
 
k
=0;

681 
i
=15;i>=0;i--)

683 i‡(
HWRegs
[
i
].
°©e
==
ST_UNK
)

685 
HWRegs
[
i
].
°©e
=
ST_MAPPED
;

686 
HWRegs
[
i
].
k
=0;

687 
HWRegs
[
i
].
ªg
=reg;

688 
j
=
i
;

689 
i
=0;i<16;i++Ë
HWRegs
[i].
k
++;

690  
j
;

692 i‡((
HWRegs
[
i
].
°©e
==
ST_MAPPED
Ë&& (HWRegs[i].
k
>k))

694 
j
=
i
;

695 
k
=
HWRegs
[
i
].k;

698 
	`Unm≠GãReg
(
HWRegs
[
j
].
ªg
);

699 
	`iFlushReg
(
HWRegs
[
j
].
ªg
);

700 
HWRegs
[
j
].
°©e
=
ST_MAPPED
;

701 
HWRegs
[
j
].
k
=0;

702 
HWRegs
[
j
].
ªg
=reg;

703 
i
=0;i<16;i++Ë
HWRegs
[i].
k
++;

704  
j
;

705 
	}
}

707 
	$iLockReg
(
u32
 
ªg
){

708 i‡(!
ªc_pha£
) {

711 #ifde‡
DEBUG_CPU


712 i‡(
ªc_pha£
) {

713 
	`dbgf
("\t\t\tiLockReg(%i)\n",
ªg
);

716 i‡(
HWRegs
[
ªg
].
°©e
==
ST_MAPPED
) {

717 
i
,
j
=0;

718 
u32
 
k
=0;

719 
i
=0;i<16;i++)

721 i‡(
HWRegs
[
i
].
°©e
==
ST_UNK
)

723 #ifde‡
DEBUG_CPU


724 i‡(
ªc_pha£
) {

725 
	`dbgf
("\t\t\t\t-U£Ém±yÑ%i\n",
i
);

728 
	`MOV32RtoR
(
i
,
ªg
);

729 
iRegs
[
HWRegs
[
ªg
].ªg].ªg=
i
;

730 
HWRegs
[
i
].
k
=HWRegs[
ªg
].k;

731 
HWRegs
[
i
].
ªg
=HWRegs[reg].reg;

732 
HWRegs
[
i
].
°©e
=
ST_MAPPED
;

733 
HWRegs
[
ªg
].
°©e
=
ST_HOLD
;

734 #ifde‡
DEBUG_CPU


735 i‡(
ªc_pha£
) {

736 
	`dbg
("\t\t\t!iLockReg");

741 i‡((
HWRegs
[
i
].
°©e
==
ST_MAPPED
Ë&& (HWRegs[i].
k
>k))

743 
j
=
i
;

744 
k
=
HWRegs
[
i
].k;

747 i‡((
j
==
ªg
)||(
HWRegs
[ªg].
k
>k)) {

748 
	`iFlushReg
(
HWRegs
[
ªg
].reg);

749 #ifde‡
DEBUG_CPU


750 i‡(
ªc_pha£
) {

751 
	`dbg
("\t\t\t\t-Discard");

755 
	`iFlushReg
(
HWRegs
[
j
].
ªg
);

756 #ifde‡
DEBUG_CPU


757 i‡(
ªc_pha£
) {

758 
	`dbgf
("\t\t\t\t-Flush %i\n",
j
);

761 
	`MOV32RtoR
(
j
,
ªg
);

762 
iRegs
[
HWRegs
[
ªg
].ªg].ªg=
j
;

763 
HWRegs
[
j
].
k
=HWRegs[
ªg
].k;

764 
HWRegs
[
j
].
ªg
=HWRegs[reg].reg;

765 
HWRegs
[
j
].
°©e
=
ST_MAPPED
;

767 
HWRegs
[
ªg
].
°©e
=
ST_HOLD
;

770 i‡(
HWRegs
[
ªg
].
°©e
!=
ST_CONST
)

771 
HWRegs
[
ªg
].
°©e
=
ST_HOLD
;

772 #ifde‡
DEBUG_CPU


773 i‡(
ªc_pha£
) {

774 
	`dbg
("\t\t\t\t-Not mapped");

778 #ifde‡
DEBUG_CPU


779 i‡(
ªc_pha£
) {

780 
	`dbg
("\t\t\t!iLockReg");

783 
	}
}

785 
	$iU∆ockReg
(
u32
 
ªg
) {

786 i‡(!
ªc_pha£
) {

789 #ifde‡
DEBUG_CPU


790 i‡(
ªc_pha£
) {

791 
	`dbgf
("\t\t\tiU∆ockReg(%iË%s\n",
ªg
,
HWRegs
[ªg].
°©e
==
ST_HOLD
?"HOLD":HWRegs[ªg].°©e==
ST_UNK
?"EMPTY":"USED!");

794 i‡(
HWRegs
[
ªg
].
°©e
==
ST_HOLD
) {

795 
HWRegs
[
ªg
].
°©e
=
ST_UNK
;

797 
	}
}

799 
u32
 
	$TempReg
() {

800 i‡(!
ªc_pha£
) {

803 #ifde‡
DEBUG_CPU


804 i‡(
ªc_pha£
) {

805 
	`dbg
("\t\t\tTempReg");

808 
i
,
j
=0;

809 
u32
 
k
=0;

810 
i
=0;i<16;i++)

812 i‡(
HWRegs
[
i
].
°©e
==
ST_UNK
)

814 
HWRegs
[
i
].
°©e
=
ST_CONST
;

815 #ifde‡
DEBUG_CPU


816 i‡(
ªc_pha£
) {

817 
	`dbgf
("\t\t\t!TempReg R%i\n",
i
);

820  
i
;

822 i‡((
HWRegs
[
i
].
°©e
==
ST_MAPPED
Ë&& (HWRegs[i].
k
>k))

824 
j
=
i
;

825 
k
=
HWRegs
[
i
].k;

828 
	`iFlushReg
(
HWRegs
[
j
].
ªg
);

829 
HWRegs
[
j
].
°©e
=
ST_CONST
;

830 #ifde‡
DEBUG_CPU


831 i‡(
ªc_pha£
) {

832 
	`dbgf
("\t\t\t!TempReg R%i\n",
j
);

835  
j
;

836 
	}
}

838 
	$Rñó£TempReg
(
u32
 
ªg
) {

839 i‡(!
ªc_pha£
) {

842 
HWRegs
[
ªg
].
°©e
=
ST_UNK
;

843 
	}
}

845 
u32
 
	$RódReg
(
u32
 
ªg
) {

846 #ifde‡
REC_USE_2ND_PHASE


847 i‡(!
ªc_pha£
) {

848 i‡(
ªcPªv_tŸÆ
[
ªg
].
°©e
!=
ST_CONST
) {

849 
ªcPªv_tŸÆ
[
ªg
].
°©e
=
ST_MAPPED
;

850 
ªcPªv_tŸÆ
[
ªg
].
k
++;

852 #ifde‡
REC_USE_2ND_PRESERVE_CONST


853 
a˘uÆ_c⁄°s
&=~(1ULL<<
ªg
);

855 
iRegs
[
ªg
].
°©e
=
ST_MAPPED
;

859 #ifde‡
DEBUG_CPU


860 
	`dbgf
("\t\t\tRódRegÑ%i\n",
ªg
);

862 i‡(
iRegs
[
ªg
].
°©e
!=
ST_MAPPED
)

864 #ifde‡
DEBUG_CPU


865 
ÁŒo_ªgi°ro
++;

867 
iRegs
[
ªg
].ªg=
	`GëReg
(reg);

868 
iRegs
[
ªg
].
°©e
=
ST_MAPPED
;

869 
	`MOV32MtoR_ªgs
(
iRegs
[
ªg
].ªg,&
psxRegs
.
GPR
.
r
[reg]);

870 
iRegs
[
ªg
].
ªgw
=0;

874 
i
;

875 #ifde‡
DEBUG_CPU


876 
ok_ªgi°ro
++;

878 
HWRegs
[
iRegs
[
ªg
].ªg].
k
=0;

879 
i
=0;i<16;i++Ë
HWRegs
[i].
k
++;

881 #ifde‡
DEBUG_CPU


882 
	`dbgf
("\t\t\t!RódReg R%i\n",
iRegs
[
ªg
].reg);

884  
iRegs
[
ªg
].reg;

885 
	}
}

887 
u32
 
	$WrôeReg
(
u32
 
ªg
) {

888 #ifde‡
REC_USE_2ND_PHASE


889 i‡(!
ªc_pha£
) {

890 
ªcPªv_tŸÆ
[
ªg
].
°©e
=
ST_CONST
;

891 
iRegs
[
ªg
].
°©e
=
ST_MAPPED
;

892 #ifde‡
REC_USE_2ND_PRESERVE_CONST


893 
a˘uÆ_c⁄°s
&=~(1ULL<<
ªg
);

898 #ifde‡
DEBUG_CPU


899 
	`dbgf
("\t\t\tWrôeRegÑ%i\n",
ªg
);

901 
	`Unm≠GãReg
(
ªg
);

902 i‡(
iRegs
[
ªg
].
°©e
!=
ST_MAPPED
)

904 #ifde‡
DEBUG_CPU


905 
ÁŒo_ªgi°ro
++;

907 
iRegs
[
ªg
].ªg=
	`GëReg
(reg);

908 
iRegs
[
ªg
].
°©e
=
ST_MAPPED
;

909 
iRegs
[
ªg
].
ªgw
=1;

913 
i
;

914 #ifde‡
DEBUG_CPU


915 
ok_ªgi°ro
++;

917 
iRegs
[
ªg
].
ªgw
=1;

918 
HWRegs
[
iRegs
[
ªg
].ªg].
k
=0;

919 
i
=0;i<16;i++Ë
HWRegs
[i].
k
++;

921 #ifde‡
DEBUG_CPU


922 
	`dbgf
("\t\t\t!WrôeReg R%i\n",
iRegs
[
ªg
].reg);

924  
iRegs
[
ªg
].reg;

925 
	}
}

927 #i‚de‡
REC_USE_2ND_PRESERVE_CONST


928 
	$M≠ToWrôe
(
u32
 
ªg
) {

929 i‡(
iRegs
[
ªg
].
°©e
==
ST_CONST
) {

930 
u32
 
r
, 
vÆue
=
iRegs
[
ªg
].
k
;

931 
	`Unm≠
(
ªg
);

932 
r
=
	`WrôeReg
(
ªg
);

933 i‡(
ªc_pha£
) {

934 
	`MOV32ItoR
(
r
,
vÆue
);

937 
	}
}

940 
u32
 
	$RódWrôeReg
(
u32
 
ªg
) {

941 #ifde‡
REC_USE_2ND_PHASE


942 i‡(!
ªc_pha£
) {

943 i‡(
ªcPªv_tŸÆ
[
ªg
].
°©e
!=
ST_CONST
) {

944 
ªcPªv_tŸÆ
[
ªg
].
°©e
=
ST_CONST
;

945 
ªcPªv_tŸÆ
[
ªg
].
k
++;

947 #ifde‡
REC_USE_2ND_PRESERVE_CONST


948 
a˘uÆ_c⁄°s
&=~(1ULL<<
ªg
);

950 
iRegs
[
ªg
].
°©e
=
ST_MAPPED
;

954 #ifde‡
DEBUG_CPU


955 
	`dbgf
("\t\t\tRódWrôeRegÑ%i\n",
ªg
);

957 
	`Unm≠GãReg
(
ªg
);

958 i‡(
iRegs
[
ªg
].
°©e
!=
ST_MAPPED
)

960 #ifde‡
DEBUG_CPU


961 
ÁŒo_ªgi°ro
++;

963 
iRegs
[
ªg
].ªg=
	`GëReg
(reg);

964 
iRegs
[
ªg
].
°©e
=
ST_MAPPED
;

965 
	`MOV32MtoR_ªgs
(
iRegs
[
ªg
].ªg,&
psxRegs
.
GPR
.
r
[reg]);

966 
iRegs
[
ªg
].
ªgw
=1;

970 
i
;

971 #ifde‡
DEBUG_CPU


972 
ok_ªgi°ro
++;

974 
iRegs
[
ªg
].
ªgw
=1;

975 
HWRegs
[
iRegs
[
ªg
].ªg].
k
=0;

976 
i
=0;i<16;i++Ë
HWRegs
[i].
k
++;

978 #ifde‡
DEBUG_CPU


979 
	`dbgf
("\t\t\t!RódWrôeReg R%i\n",
iRegs
[
ªg
].reg);

981  
iRegs
[
ªg
].reg;

982 
	}
}

984 #i‡
deföed
(
REC_USE_2ND_PHASE
Ë&& deföed(
REC_USE_2ND_REG_CACHE
)

985 
u32
 
	$FödCache
(
u32
 
ªc_ˇche
, 
u£
) {

986 
u32
 
i
, 
ªt
=0;

987 
i
=0;i<32;i++) {

988 i‡((
ªc_ˇche
>>
i
)&1) {

989 i‡(!
u£
)

990 
ªt
++;

992 i‡(
iRegs
[
i
].
°©e
!=
ST_UNK
)

993 
ªt
++;

996  
ªt
;

997 
	}
}

999 
	$C⁄vîtCache
(
u32
 
ªc_ˇche
) {

1000 
u32
 
i
, 
j
, 
ªg
=10;

1001 
iRegi°îs
 
hw
[16];

1002 
iRegi°îs
 
ªgs
[34];

1003 
	`mem˝y
(
hw
,
HWRegs
,(hw));

1004 
	`mem˝y
(
ªgs
,
iRegs
,(regs));

1005 #ifde‡
DEBUG_CPU


1006 
	`dbgf
("\t\tConvertCache ");

1008 
i
=0;i<32;i++) {

1009 i‡(!((
ªc_ˇche
>>
i
)&1)) {

1010 i‡(
ªgs
[
i
].
°©e
==
ST_MAPPED
) {

1011 
ªgs
[
i
].
°©e
=
ST_UNK
;

1012 
hw
[
ªgs
[
i
].
ªg
].
°©e
=
ST_UNK
;

1015 #ifde‡
DEBUG_CPU


1017 
	`dbgf
("R%ò",
i
);

1021 i‡(
ªgs
[32].
°©e
==
ST_MAPPED
) {

1022 
ªgs
[32].
°©e
=
ST_UNK
;

1023 
hw
[
ªgs
[32].
ªg
].
°©e
=
ST_UNK
;

1025 i‡(
ªgs
[33].
°©e
==
ST_MAPPED
) {

1026 
ªgs
[33].
°©e
=
ST_UNK
;

1027 
hw
[
ªgs
[33].
ªg
].
°©e
=
ST_UNK
;

1029 #ifde‡
DEBUG_CPU


1030 
	`dbgf
(". Free ");

1031 
i
=0;i<15;i++)

1032 i‡(
hw
[
i
].
°©e
==
ST_UNK
)

1033 
	`dbgf
("r%ò",
i
);

1034 
	`dbg
(".");

1036 
i
=0;i<32;i++) {

1037 i‡((
ªc_ˇche
>>
i
)&1) {

1038 #ifde‡
DEBUG_CPU


1039 
	`dbgf
("\t\t\tR%i",
i
);

1041 
ªgs
[
i
].
°©e
) {

1042 
ST_UNK
:

1043 i‡(
hw
[
ªg
].
°©e
==
ST_MAPPED
) {

1044 #ifde‡
DEBUG_CPU


1045 
	`dbgf
(" UNK MAPPED: ");

1047 
j
=0;j<16;j++) {

1048 i‡(
hw
[
j
].
°©e
==
ST_UNK
) {

1049 
u32
 
ƒeg
=
hw
[
ªg
].reg;

1050 
ªgs
[
ƒeg
].
ªg
=
j
;

1051 
hw
[
j
].
ªg
=
ƒeg
;

1052 
hw
[
j
].
°©e
=
ST_MAPPED
;

1053 #ifde‡
DEBUG_CPU


1054 
	`dbgf
("MOV R%i, R%ò™d ",
j
,
ªg
);

1056 
	`MOV32RtoR
(
j
,
ªg
);

1061 #ifde‡
DEBUG_CPU


1063 
	`dbgf
(" UNK: ");

1065 
	`dbgf
("MOV R%i, #R%i\n",
ªg
,
i
);

1067 
	`MOV32MtoR_ªgs
(
ªg
,&
psxRegs
.
GPR
.
r
[
i
]);

1069 
ST_CONST
:

1070 i‡(
hw
[
ªg
].
°©e
==
ST_MAPPED
) {

1071 #ifde‡
DEBUG_CPU


1072 
	`dbgf
(" CONST MAPPED: ");

1074 
j
=0;j<16;j++) {

1075 i‡(
hw
[
j
].
°©e
==
ST_UNK
) {

1076 
u32
 
ƒeg
=
hw
[
ªg
].reg;

1077 
ªgs
[
ƒeg
].
ªg
=
j
;

1078 
hw
[
j
].
ªg
=
ƒeg
;

1079 
hw
[
j
].
°©e
=
ST_MAPPED
;

1080 #ifde‡
DEBUG_CPU


1081 
	`dbgf
("MOV R%i, R%ò™d ",
j
,
ªg
);

1083 
	`MOV32RtoR
(
j
,
ªg
);

1088 #ifde‡
DEBUG_CPU


1090 
	`dbgf
(" CONST: ");

1092 
	`dbgf
("MOV R%i, #%p\n",
ªg
,
ªgs
[
i
].
k
);

1094 
	`MOV32ItoR
(
ªg
,
ªgs
[
i
].
k
);

1096 
ST_MAPPED
:

1097 i‡(
ªgs
[
i
].
ªg
==reg) {

1098 #ifde‡
DEBUG_CPU


1099 
	`dbg
(" MAPPED OK");

1103 i‡(
hw
[
ªg
].
°©e
==
ST_MAPPED
) {

1104 #ifde‡
DEBUG_CPU


1105 
	`dbgf
(" MAPPED MAPPED: ");

1107 
j
=0;j<16;j++) {

1108 i‡(
hw
[
j
].
°©e
==
ST_UNK
) {

1109 
u32
 
ƒeg
=
hw
[
ªg
].reg;

1110 
ªgs
[
ƒeg
].
ªg
=
j
;

1111 
hw
[
j
].
ªg
=
ƒeg
;

1112 
hw
[
j
].
°©e
=
ST_MAPPED
;

1113 #ifde‡
DEBUG_CPU


1114 
	`dbgf
("MOV R%i, R%ò™d ",
j
,
ªg
);

1116 
	`MOV32RtoR
(
j
,
ªg
);

1121 #ifde‡
DEBUG_CPU


1123 
	`dbgf
(" MAPPED: ");

1125 
	`dbgf
("MOV R%i, R%i\n",
ªg
,
ªgs
[
i
].reg);

1127 
	`MOV32RtoR
(
ªg
,
ªgs
[
i
].reg);

1128 
ªgs
[
i
].
°©e
=
ST_UNK
;

1129 
hw
[
ªgs
[
i
].
ªg
].
°©e
=
ST_UNK
;

1132 
hw
[
ªg
].
°©e
=
ST_CONST
;

1133 
ªg
--;

1136 
	}
}

1139 
	$FödJump
(
iRegi°îs
 *
§c
, iRegi°î†*
d°
) {

1140 
i
;

1141 
i
=0;i<34;i++)

1142 i‡(
d°
[
i
].
°©e
==
ST_CONST
 && (
§c
[i].°©e!=ST_CONST || (§c[i].°©e==ST_CONST && d°[i].
k
!=src[i].k)))

1145 
	}
}

1147 
	$C⁄vîtJump
(
iRegi°îs
 *
§c_
, iRegi°î†*
d°
) {

1148 
u32
 
i
, 
j
, 
k
, 
l
;

1149 #ifde‡
DEBUG_CPU


1150 
	`dbgf
("\t\tConvertJump ");

1152 
iRegi°îs
 
hw
[16];

1153 
iRegi°îs
 
§c
[34];

1154 
	`mem˝y
(
§c
,
§c_
,(src));

1155 
i
=0;i<16;i++)

1156 
hw
[
i
].
°©e
=
ST_UNK
;

1157 
hw
[0].
°©e
=hw[1].°©e=hw[11].°©e=hw[12].°©e=hw[13].°©e=hw[14].°©e=hw[15].°©e=
ST_CONST
;

1158 
i
=0;i<34;i++)

1159 i‡(
§c
[
i
].
°©e
==
ST_MAPPED
) {

1160 i‡(
d°
[
i
].
°©e
==
ST_UNK
 || d°[i].°©e==
ST_CONST
) {

1161 i‡(
§c
[
i
].
ªgw
) {

1162 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
GPR
.
r
[
i
], 
§c
[i].
ªg
);

1164 
§c
[
i
].
°©e
=
ST_UNK
;

1165 
hw
[
§c
[
i
].
ªg
].
°©e
=
ST_UNK
;

1167 
hw
[
§c
[
i
].
ªg
].
°©e
=
ST_MAPPED
;

1168 
hw
[
§c
[
i
].
ªg
].reg=i;

1170 } i‡(
§c
[
i
].
°©e
==
ST_CONST
 && src[i].
ªgw
 && 
d°
[i].°©e==
ST_UNK
) {

1171 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
GPR
.
r
[
i
], 
§c
[i].
k
);

1173 
i
=0;i<34;i++) {

1174 i‡(
d°
[
i
].
°©e
==
ST_MAPPED
) {

1175 
§c
[
i
].
°©e
) {

1176 
ST_CONST
:

1177 
ST_UNK
:

1178 
j
=0;j<34;j++)

1179 i‡(
§c
[
j
].
°©e
==
ST_MAPPED
 && src[j].
ªg
==
d°
[
i
].reg) {

1180 
l
=0;l<34;l++)

1181 i‡(
§c
[
l
].
°©e
==
ST_MAPPED
 && src[l].
ªg
==
d°
[
j
].reg) {

1182 
k
=0;k<16;k++)

1183 i‡(
hw
[
k
].
°©e
==
ST_UNK
) {

1184 
	`MOV32RtoR
(
k
,
§c
[
l
].
ªg
);

1185 
§c
[
l
].
ªg
=
k
;

1186 
hw
[
k
].
ªg
=
l
;

1187 
hw
[
k
].
°©e
=
ST_MAPPED
;

1192 
	`MOV32RtoR
(
d°
[
j
].
ªg
,
§c
[j].reg);

1193 
§c
[
j
].
°©e
=
ST_MAPPED
;

1194 
§c
[
j
].
ªg
=
d°
[j].reg;

1195 
hw
[
§c
[
j
].
ªg
].
°©e
=
ST_MAPPED
;

1196 
hw
[
§c
[
j
].
ªg
].reg=j;

1199 i‡(
§c
[
i
].
°©e
==
ST_UNK
) {

1200 
	`MOV32MtoR_ªgs
(
d°
[
i
].
ªg
,&
psxRegs
.
GPR
.
r
[i]);

1202 
	`MOV32ItoR
(
d°
[
i
].
ªg
,
§c
[i].
k
);

1204 
§c
[
i
].
°©e
=
ST_MAPPED
;

1205 
§c
[
i
].
ªg
=
d°
[i].reg;

1206 
hw
[
§c
[
i
].
ªg
].
°©e
=
ST_MAPPED
;

1207 
hw
[
§c
[
i
].
ªg
].reg=i;

1209 
ST_MAPPED
:

1210 i‡(
§c
[
i
].
ªg
!=
d°
[i].reg) {

1211 
j
=0;j<34;j++)

1212 i‡(
§c
[
j
].
°©e
==
ST_MAPPED
 && src[j].
ªg
==
d°
[
i
].reg) {

1213 
l
=0;l<34;l++)

1214 i‡(
§c
[
l
].
°©e
==
ST_MAPPED
 && src[l].
ªg
==
d°
[
j
].reg) {

1215 
k
=0;k<16;k++)

1216 i‡(
hw
[
k
].
°©e
==
ST_UNK
) {

1217 
	`MOV32RtoR
(
k
,
§c
[
l
].
ªg
);

1218 
§c
[
l
].
ªg
=
k
;

1219 
hw
[
k
].
ªg
=
l
;

1220 
hw
[
k
].
°©e
=
ST_MAPPED
;

1225 
	`MOV32RtoR
(
d°
[
j
].
ªg
,
§c
[j].reg);

1226 
§c
[
j
].
°©e
=
ST_MAPPED
;

1227 
§c
[
j
].
ªg
=
d°
[j].reg;

1228 
hw
[
§c
[
j
].
ªg
].
°©e
=
ST_MAPPED
;

1229 
hw
[
§c
[
j
].
ªg
].reg=j;

1232 
	`MOV32RtoR
(
d°
[
i
].
ªg
,
§c
[i].reg);

1233 
hw
[
§c
[
i
].
ªg
].
°©e
=
ST_UNK
;

1234 
§c
[
i
].
ªg
=
d°
[i].reg;

1235 
hw
[
d°
[
i
].
ªg
].reg=i;

1236 
hw
[
d°
[
i
].
ªg
].
°©e
=
ST_MAPPED
;

1242 
i
=0;i<34;i++)

1243 i‡(
d°
[
i
].
°©e
==
ST_MAPPED
 && !d°[i].
ªgw
 && 
§c
[i].regw) {

1244 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
GPR
.
r
[
i
], 
d°
[i].
ªg
);

1246 
	}
}

1248 #i‡
deföed
(
REC_USE_2ND_PHASE
Ë&& deföed(
REC_USE_2ND_REG_CACHE
)

1249 
u32
 
	gªc2nd_func
;

1251 
	$ªc2nd
() {

1252 #ifde‡
DEBUG_CPU


1253 
	`dbg
("-- FUNCTIONÑec2nd --");

1255 
	`wrôe32
(
REC_MAX_2ND_NOLINK
+1);

1256 
ªc2nd_func
=(
u32
)
¨mPå
;

1257 
	`wrôe32
(
	`LDR_IMM_NEG
(
HOST_r1
,
HOST_pc
,12+(((
u32
)
¨mPå
)-
ªc2nd_func
)));

1258 
	`wrôe32
(
	`SUB_IMM
(
HOST_r1
,HOST_r1,1,0));

1259 
	`wrôe32
(
	`STR_IMM_NEG
(
HOST_r1
,
HOST_pc
,12+(((
u32
)
¨mPå
)-
ªc2nd_func
)));

1260 
	`wrôe32
(
	`CMP_IMM
(
HOST_r1
,0,0));

1261 
	`wrôe32
(
	`BXNE_LR
());

1263 
	`MOV32ItoR
(
HOST_r1
,4);

1264 
	`JUMPFunc
((
u32
)
ªcCÀ¨
);

1265 
	`Upd©eImmedüã
(1);

1266 
	}
}

1269 
	$iLﬂdTe°
() {

1270 
u32
 
tmp
;

1273 
tmp
 = 
psxRegs
.
code
 >> 26;

1274 
tmp
) {

1276 
_Rs_
) {

1283 
_Fun˘_
) {

1285 
_Rs_
) {

1296 i‡(
tmp
 >= 0x20 &&Åmp <= 0x26) {

1302 
	}
}

1304 
	gfunc_Te°BønchIfOK_±r
=0;

1306 
	$ªcTe°BønchIfOK
(
wôh_HOST_r0
) {

1307 i‡(!
wôh_HOST_r0
)

1308 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

1309 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
ª£rved
);

1310 
	`wrôe32
(
	`BIC_IMM
(
HOST_Ã
,
HOST_r0
,0x7f,0x09));

1311 
	`wrôe32
(
	`BIC_IMM
(
HOST_Ã
,HOST_lr,0x0e,0x0c));

1312 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
psxM
);

1313 
	`wrôe32
(
	`LDR_REG
(
HOST_Ã
,HOST_Ã,
HOST_ù
));

1314 
	`GET_PTR
();

1315 
j32På
[4]=
	`JEZ8
(
HOST_r1
);

1316 
	`wrôe32
(
	`LDR_IMM_NEG
(
HOST_r0
,
HOST_r1
,4));

1317 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_Ã
));

1318 
j32På
[6]=
¨mPå
; 
	`wrôe32
(
	`BNE_FWD
(0));

1319 
	`MOV32RtoR
(
HOST_pc
,
HOST_r1
);

1320 
	`¨mSëJ32
(
j32På
[6]);

1321 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

1322 
	`MOV32ItoR
(
HOST_r1
,0x04);

1323 
	`CALLFunc
((
u32
)
ªcCÀ¨
);

1324 
	`¨mSëJ32
(
j32På
[4]);

1325 
	`RET_NC
();

1326 
	}
}

1328 #ifde‡
REC_USE_FAST_BLOCK


1330 
	gfunc_Te°BønchBlock_±r
=0;

1332 
	$ªcTe°BønchBlock
(
wôh_HOST_r0
) {

1333 i‡(!
wôh_HOST_r0
)

1334 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

1335 
	`wrôe32
(
	`CMP_REGS
(
HOST_r1
,
HOST_r0
));

1336 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

1337 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
ª£rved
);

1340 
	`wrôe32
(
	`BIC_IMM
(
HOST_Ã
,
HOST_r0
,0x7f,0x09));

1341 
	`wrôe32
(
	`BIC_IMM
(
HOST_Ã
,HOST_lr,0x0e,0x0c));

1342 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
psxM
);

1343 
	`wrôe32
(
	`LDR_REG
(
HOST_Ã
,HOST_Ã,
HOST_ù
));

1345 
	`GET_PTR
();

1346 
j32På
[4]=
	`JEZ8
(
HOST_r1
);

1349 
	`wrôe32
(
	`LDR_IMM_NEG
(
HOST_r0
,
HOST_r1
,4));

1350 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_Ã
));

1351 
j32På
[6]=
¨mPå
; 
	`wrôe32
(
	`BNE_FWD
(0));

1353 
	`MOV32RtoR
(
HOST_pc
,
HOST_r1
);

1356 
	`¨mSëJ32
(
j32På
[6]);

1357 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

1358 
	`MOV32ItoR
(
HOST_r1
,0x04);

1359 
	`CALLFunc
((
u32
)
ªcCÀ¨
);

1361 
	`¨mSëJ32
(
j32På
[4]);

1362 
	`¨mSëJ32
(
j32På
[1]);

1363 
	`RET_NC
();

1364 
	}
}

1367 
	gfunc_Rëu∫_±r
=0;

1369 
	$ªcRëu∫
(
wôh_HOST_r0
) {

1370 i‡(!
wôh_HOST_r0
)

1371 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

1372 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
ª£rved
);

1373 
	`GET_PTR
();

1374 
j32På
[4]=
	`JEZ8
(
HOST_r1
);

1375 
	`MOV32RtoR
(
HOST_pc
,
HOST_r1
);

1376 
	`¨mSëJ32
(
j32På
[4]);

1377 
	`RET_NC
();

1378 
	}
}

1380 
	$pˇbs
(
pˇ
, 
pcb
) {

1381 i‡(
pˇ
>
pcb
){

1382  ((
pˇ
-
pcb
)/4);

1384  ((
pcb
-
pˇ
)/4);

1385 
	}
}

1387 
Upd©eGãDñay
(
˛ór
);

1388 
	gfunc_GTE_dñay_±r
=0;

1393 
	$SëBønch
() {

1394 #ifde‡
DEBUG_CPU


1395 i‡(
ªc_pha£
) {

1396 
	`dbg
("\tSetBranch");

1399 
bønch
 = 1;

1400 
psxRegs
.
code
 = 
	`PSXMu32
(
pc
);

1401 
pc
 += 4;

1403 #i‡
	`deföed
(
DEBUG_CPU
Ë|| deföed(
DEBUG_CPU_OPCODES
Ë|| deföed(
REC_FORCE_DELAY_READ
)

1404 i‡(
	`iLﬂdTe°
()) {

1405 #ifde‡
DEBUG_CPU


1406 i‡(
ªc_pha£
) {

1407 
	`dbg
("\t\t\t\tLoadTest");

1410 
	`iUpd©eRegs
(1);

1412 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,pc);

1413 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
,ÖsxRegs.code);

1414 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

1415 
cy˛es_≥ndög
=0;

1417 #i‡
	`deföed
(
öãΩªãr_√w
Ë|| deföed(
öãΩªãr_n⁄e
)

1418 
	`MOV32MtoR
(
HOST_r2
,(
u32
)&
èrgë
);

1419 
	`MOV32ItoR
(
HOST_r1
,(
u32
)
psxRegs
.
code
);

1420 
	`MOV32ItoR
(
HOST_r0
,(
u32
)&
psxRegs
);

1421 
	`CALLFunc
((
u32
)
_psxDñayTe°
);

1423 
	`MOV32MtoR
(
HOST_r1
,(
u32
)&
èrgë
);

1424 
	`MOV32ItoR
(
HOST_r0
,
_Rt_
);

1425 
	`CALLFunc
((
u32
)
psxDñayTe°
);

1428 
	`RET
()

1429 #ifde‡
DEBUG_CPU


1430 i‡(
ªc_pha£
) {

1431 
	`dbg
("\t!SetBranch");

1437 #ifde‡
REC_USE_2ND_PRESERVE_CONST


1438 i‡(!
ªc_pha£
) {

1439 
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
].
c⁄°s
 = 
a˘uÆ_c⁄°s
;

1442 
	`ªcOpcode
()

1444 i‡(!
ªc_pha£
) {

1448 
	`Upd©eGãDñay
(1);

1449 
	`iFlushRegs
();

1451 
	`MOV32MtoR
(
HOST_r0
, (
u32
)&
èrgë
);

1452 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
pc
, 
HOST_r0
);

1453 #i‚de‡
REC_USE_FAST_BLOCK


1454 i‡(!
block
)

1458 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
cy˛e
);

1459 
	`ADD32ItoR
(
HOST_r1
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

1460 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
HOST_r1
);

1461 
cy˛es_≥ndög
=0;

1463 i‡(
r2_is_dúty
) {

1464 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
io_cy˛e_cou¡î
);

1466 
	`wrôe32
(
	`CMP_REGS
(
HOST_r1
,
HOST_r2
));

1468 
	`CALLFuncCS
((
u32
)
psxBønchTe°CÆcuœã
);

1470 #i‚de‡
REC_USE_FAST_BLOCK


1472 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

1473 
cy˛es_≥ndög
=0;

1474 
	`CALLFunc
((
u32
)
psxBønchTe°
);

1478 i‡(
C⁄fig
.
HLE
) {

1479 i‡(
block
){

1480 #i‚de‡
REC_USE_FAST_BLOCK


1481 
	`RET_NC
();

1483 
	`MOV32ItoR
(
HOST_r1
,
block
);

1484 #ifde‡
REC_USE_RETURN_FUNCS


1485 
	`JUMPFunc
(
func_Te°BønchBlock_±r
);

1486 
	`Upd©eImmedüã
(0);

1488 
	`ªcTe°BønchBlock
(0);

1492 #ifde‡
REC_USE_RETURN_FUNCS


1493 
	`JUMPFunc
(
func_Te°BønchIfOK_±r
);

1494 
	`Upd©eImmedüã
(0);

1496 
	`ªcTe°BønchIfOK
(0);

1500 
	`RET
();

1502 #ifde‡
DEBUG_CPU


1503 i‡(
ªc_pha£
) {

1504 
	`dbg
("\t!SetBranch");

1507 
	}
}

1511 
	$iJump
(
u32
 
bønchPC
) {

1512 #ifde‡
DEBUG_CPU


1513 i‡(
ªc_pha£
) {

1514 
	`dbgf
("\tiJump(%p)\n",
bønchPC
);

1517 
u32
 
íc⁄åado
=0;

1518 #i‚de‡
REC_USE_TABLE_REGS_FLUSH


1519 
u32
 *
±r_upd©e
=
NULL
;

1521 
èbÀ_ªgs_Êush_œ°
=0;

1523 #ifde‡
REC_USE_2ND_PHASE


1524 
u32
 
a˘uÆ_›codes
=
ªc_tŸÆ_›codes
+
ªc_›codes
;

1525 #ifde‡
REC_USE_2ND_PRESERVE_CONST


1526 i‡(!
ªc_pha£
) {

1527 
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
].
c⁄°s
 = 
a˘uÆ_c⁄°s
;

1531 
bønch
 = 1;

1532 
psxRegs
.
code
 = 
	`PSXMu32
(
pc
);

1533 
pc
+=4;

1535 i‡(
	`iLﬂdTe°
()) {

1536 #i‡
	`deföed
(
DEBUG_CPU
Ë|| deföed(
DEBUG_CPU_OPCODES
Ë|| deföed(
REC_FORCE_DELAY_READ
)

1537 #ifde‡
DEBUG_CPU


1538 i‡(
ªc_pha£
) {

1539 
	`dbg
("\t\t\t\tLoadTest");

1542 
	`iUpd©eRegs
(1);

1544 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,pc);

1545 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
,ÖsxRegs.code);

1546 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

1547 
cy˛es_≥ndög
=0;

1549 #i‡
	`deföed
(
öãΩªãr_√w
Ë|| deföed(
öãΩªãr_n⁄e
)

1550 
	`MOV32ItoR
(
HOST_r2
,
bønchPC
);

1551 
	`MOV32ItoR
(
HOST_r1
,(
u32
)
psxRegs
.
code
);

1552 
	`MOV32ItoR
(
HOST_r0
,(
u32
)&
psxRegs
);

1553 
	`CALLFunc
((
u32
)
_psxDñayTe°
);

1555 
	`MOV32ItoR
(
HOST_r1
,
bønchPC
);

1556 
	`MOV32ItoR
(
HOST_r0
,
_Rt_
);

1557 
	`CALLFunc
((
u32
)
psxDñayTe°
);

1560 
	`RET
()

1561 #ifde‡
DEBUG_CPU


1562 i‡(
ªc_pha£
) {

1563 
	`dbg
("\t!iJump");

1568 
	`psxTe°LﬂdDñay
(
_Rt_
,
	`PSXMu32
(
bønchPC
))) {

1573 
	`ªcOpcode
();

1577 
	`ªcOpcode
()

1579 #ifde‡
REC_USE_2ND_PHASE


1580 i‡(!
ªc_pha£
) {

1581 #i‚de‡
REC_USE_FAST_SECURE


1582 i‡(!((!
block
)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)&&(
C⁄fig
.
HLE
)&&(!
ªc_£cuª_wrôes
))) {

1584 #i‚de‡
REC_USE_FAST_BIOS


1585 i‡(!((!
block
)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)&&(
C⁄fig
.
HLE
))) {

1587 i‡(!((!
block
)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000))) {

1590 i‡(!
block
) {

1591 
ªcPªvJump
[
ªcPªv_jumps
].
pc
=
bønchPC
;

1592 
	`mem˝y
(
ªcPªvJump
[
ªcPªv_jumps
].
ªgs
,
iRegs
,(iRegs));

1593 
ªcPªv
[
ªc_tŸÆ_›codes
].
jump
=&
ªcPªvJump
[
ªcPªv_jumps
++];

1596 
bønch
=0;

1597 
pc
=
pcﬁd
=
bønchPC
;

1601 #i‚de‡
REC_USE_FAST_SECURE


1602 i‡(!((!
block
)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)&&(
C⁄fig
.
HLE
)&&(!
ªc_£cuª_wrôes
))) {

1604 #i‚de‡
REC_USE_FAST_BIOS


1605 i‡(!((!
block
)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)&&(
C⁄fig
.
HLE
))) {

1607 i‡(!((!
block
)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000))) {

1610 
i
;

1611 
i
=
ªc_tŸÆ_›codes_¥ev
-1;i>=0;i--)

1612 i‡(
ªcPªv
[
i
].
pc
==
bønchPC
 &&ÑecPªv[i].
jum≥d
) {

1613 i‡(!
ªcPªv
[
i
].
±r
 || 
	`FödJump
((
iRegi°îs
 *)&
iRegs
,(iRegi°î†*)&ªcPªv[i].
ªgs
)) {

1614 
íc⁄åado
=
i
+1;

1622 
	`iLockReg
(3);

1623 #i‚de‡
REC_USE_FAST_SECURE


1624 i‡((!
íc⁄åado
 || 
block
Ë&& (!((!block)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)&&(
C⁄fig
.
HLE
)&&(!
ªc_£cuª_wrôes
)))) {

1626 #i‚de‡
REC_USE_FAST_BIOS


1627 i‡((!
íc⁄åado
 || 
block
Ë&& (!((!block)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)&&(
C⁄fig
.
HLE
)))) {

1629 i‡((!
íc⁄åado
 || 
block
Ë&& (!((!block)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)))) {

1632 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,
bønchPC
);

1633 #i‚de‡
REC_USE_TABLE_REGS_FLUSH


1634 
±r_upd©e
=
¨mPå
;

1635 
	`wrôe32
(
	`ADD_IMM
(
HOST_Ã
,
HOST_pc
,0,0));

1636 
	`iUpd©eRegs
(1);

1637 
	`wrôe32
(
	`BX_LR
());

1638 *
±r_upd©e
|=((
u32
)
¨mPå
)-((u32)ptr_update)-8;

1640 
	`iUpd©eRegs
(1);

1644 #i‚de‡
REC_USE_FAST_BLOCK


1645 i‡(!
block
)

1648 #i‚de‡
REC_USE_FAST_BIOS


1649 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1651 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1655 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
cy˛e
);

1656 
	`ADD32ItoR
(
HOST_r1
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

1657 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
HOST_r1
);

1658 
cy˛es_≥ndög
=0;

1660 i‡(
r2_is_dúty
) {

1661 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
io_cy˛e_cou¡î
);

1662 #ifde‡
REC_USE_R2


1663 
r2_is_dúty
=0;

1666 
	`wrôe32
(
	`CMP_REGS
(
HOST_r1
,
HOST_r2
));

1668 #ifde‡
REC_USE_FAST_BLOCK


1670 i‡(!
block
) {

1672 #i‚de‡
REC_USE_FAST_BIOS


1673 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1675 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1677 
j32På
[7]=(
u32
*)(
Bô32u
)
¨mPå
;

1678 
	`wrôe32
(
	`BCC_FWD
(0));

1680 i‡(
íc⁄åado
) {

1681 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,
bønchPC
);

1682 #i‚de‡
REC_USE_TABLE_REGS_FLUSH


1683 
±r_upd©e
=
¨mPå
;

1684 
	`wrôe32
(
	`ADD_IMM
(
HOST_Ã
,
HOST_pc
,0,0));

1685 
	`iUpd©eRegs
(0);

1686 
	`wrôe32
(
	`BX_LR
());

1687 *
±r_upd©e
|=((
u32
)
¨mPå
)-((u32)ptr_update)-8;

1689 
	`iUpd©eRegs
(0);

1692 #i‚de‡
REC_USE_FAST_SECURE


1693 i‡((!
block
)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)&&(
C⁄fig
.
HLE
)&&(!
ªc_£cuª_wrôes
)) {

1695 #i‚de‡
REC_USE_FAST_BIOS


1696 i‡((!
block
)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)&&(
C⁄fig
.
HLE
)) {

1698 i‡((!
block
)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)) {

1701 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,
bønchPC
);

1702 #i‚de‡
REC_USE_TABLE_REGS_FLUSH


1703 
±r_upd©e
=
¨mPå
;

1704 
	`wrôe32
(
	`ADD_IMM
(
HOST_Ã
,
HOST_pc
,0,0));

1705 
	`iUpd©eRegs
(0);

1706 
	`wrôe32
(
	`BX_LR
());

1707 *
±r_upd©e
|=((
u32
)
¨mPå
)-((u32)ptr_update)-8;

1709 
	`iUpd©eRegs
(0);

1713 
	`CALLFunc
((
u32
)
psxBønchTe°CÆcuœã
);

1715 #i‚de‡
REC_USE_FAST_SECURE


1716 i‡((!
block
)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)&&(
C⁄fig
.
HLE
)&&(!
ªc_£cuª_wrôes
)) {

1718 #i‚de‡
REC_USE_FAST_BIOS


1719 i‡((!
block
)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)&&(
C⁄fig
.
HLE
)) {

1721 i‡((!
block
)&&(
ªc_tŸÆ_›codes
<
REC_MAX_OPCODES_LIMIT
)&&((
bønchPC
&0x1fffffff)<0x800000)) {

1725 #i‚de‡
REC_USE_FAST_BIOS


1726 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1728 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1730 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

1731 
	`MOV32ItoR
(
HOST_r1
,
bønchPC
);

1732 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_r1
));

1734 i‡(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
) {

1735 
vÆ‹
=*((
u32
 *)&
psxM
[
bønchPC
&0x1fffff]);

1736 #i‚de‡
REC_USE_FAST_BIOS


1737 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1739 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1741 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BNE_FWD
(0));

1742 #ifde‡
REC_USE_R2


1743 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
io_cy˛e_cou¡î
);

1744 
r2_is_dúty
=0;

1746 
	`¨mSëJ32
(
j32På
[7]);

1749 
	`MOV32ItoR
(
HOST_r0
,
vÆ‹
);

1750 
	`MOV32MtoR
(
HOST_r1
,(
u32
)&
psxM
[
bønchPC
&0x1fffff]);

1751 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_r1
));

1752 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

1754 
	`Upd©eGãDñay
(0);

1755 
	`MOV32ItoR
(
HOST_r0
,
pcöô
);

1756 
	`MOV32ItoR
(
HOST_r1
,
bønchPC
);

1757 
	`CALLFunc
((
u32
)
ªcCÀ¨DoubÀ
);

1758 #i‚de‡
REC_USE_TABLE_REGS_FLUSH


1759 i‡(
±r_upd©e
) {

1760 
	`CALLFunc
(((
u32
)
±r_upd©e
)+4);

1762 i‡(
èbÀ_ªgs_Êush_œ°
) {

1763 
	`CALLFunc
(
èbÀ_ªgs_Êush_œ°
);

1766 
	`iUpd©eRegs
(0);

1768 
	`MOV32ItoR
(
HOST_r0
,
bønchPC
);
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
pc
,HOST_r0);

1769 #i‚de‡
REC_USE_FAST_BIOS


1770 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1772 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1774 
	`¨mSëJ32
(
j32På
[1]);

1776 
	`RET_wôh_HOST_r0
();

1777 
	`¨mSëJ32
(
j32På
[2]);

1779 #i‚de‡
REC_USE_FAST_BIOS


1780 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1782 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1784 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

1785 #i‡
	`deföed
(
REC_USE_GTE_DELAY_CALC
Ë&& deföed(
gã_√w
Ë&& deföed(
REC_USE_GTE_FUNCS
Ë&& deföed(
REC_USE_GTECALC_INLINE
)

1786 i‡(
func_GTE_dñay_±r
) {

1787 
	`Upd©eGãDñay
(0);

1788 
	`RET
();

1793 
	`RET_wôh_HOST_r0
();

1795 
	`¨mSëJ32
(
j32På
[1]);

1796 #ifde‡
REC_USE_R2


1797 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
io_cy˛e_cou¡î
);

1798 
r2_is_dúty
=0;

1800 
	`¨mSëJ32
(
j32På
[7]);

1803 
bønch
=0;

1804 
pc
=
pcﬁd
=
bønchPC
;

1807 
	`Upd©eGãDñay
(0);

1808 #i‡
	`deföed
(
REC_USE_2ND_PHASE
Ë&& deföed(
REC_USE_2ND_REG_CACHE
)

1809 i‡(!
íc⁄åado
 && ((
bønchPC
&0x1fffffff)<0x800000)) {

1810 
u32
 
bpc
=*((u32 *)
	`PC_REC
(
bønchPC
));

1812 i‡(!
bpc
) {

1814 #ifde‡
DEBUG_CPU


1815 
	`dbg
("\t\tNotÑecompiled");

1817 #i‚de‡
REC_USE_FAST_BIOS


1818 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1820 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1822 
	`¨mSëJ32
(
j32På
[7]);

1824 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

1826 
	`MOV32ItoR
(
HOST_r0
,
pcöô
);

1827 
	`CALLFunc
((
u32
)
ªc2nd_func
);

1828 
	`RET
();

1831 
u32
 
ªc_ˇche
=*((u32 *)(
bpc
-8));

1832 #ifde‡
DEBUG_CPU


1833 
	`dbgf
("\t\tRecompûed Cache=%.8X\n",
ªc_ˇche
);

1836 #i‚de‡
REC_USE_FAST_BIOS


1837 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1839 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1841 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

1842 
	`MOV32ItoR
(
HOST_r1
,
bønchPC
);

1843 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_r1
));

1844 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

1845 
	`RET_wôh_HOST_r0
();

1846 
	`¨mSëJ32
(
j32På
[1]);

1847 
	`¨mSëJ32
(
j32På
[7]);

1852 i‡(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
) {

1853 
vÆ‹
=*((
u32
 *)&
psxM
[
bønchPC
&0x1fffff]);

1855 
	`MOV32ItoR
(
HOST_r0
,
vÆ‹
);

1856 
	`MOV32MtoR
(
HOST_r1
,(
u32
)&
psxM
[
bønchPC
&0x1fffff]);

1857 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_r1
));

1858 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

1860 
	`MOV32ItoR
(
HOST_r0
,
pcöô
);

1861 
	`MOV32ItoR
(
HOST_r1
,
bønchPC
);

1862 
	`CALLFunc
((
u32
)
ªcCÀ¨DoubÀ
);

1863 
	`RET_NC
();

1864 
	`¨mSëJ32
(
j32På
[2]);

1867 i‡(!
	`FödCache
(
ªc_ˇche
,1)) {

1869 
	`MOV32ItoR
(
HOST_r0
,
bpc
);

1872 
	`C⁄vîtCache
(
ªc_ˇche
);

1873 
	`MOV32ItoR
(
HOST_r0
,(
bpc
)+(4*
	`FödCache
(
ªc_ˇche
,0)));

1875 
	`MOV32RtoR
(
HOST_pc
,
HOST_r0
);

1876 
	`Upd©eImmedüã
(0);

1881 #ifde‡
REC_USE_2ND_PHASE


1882 i‡(
íc⁄åado
) {

1883 #i‚de‡
REC_USE_FAST_BIOS


1884 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1886 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1888 
	`RET
();

1889 
	`¨mSëJ32
(
j32På
[7]);

1891 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

1893 i‡(!
ªcPªv
[
íc⁄åado
-1].
±r
) {

1894 
ªcPªvJump
[
ªcPªv_jumps
].
±r
=
¨mPå
;

1895 
	`mem˝y
(
ªcPªvJump
[
ªcPªv_jumps
].
ªgs
,
iRegs
,(iRegs));

1896 
ªcPªvJump
[
ªcPªv_jumps
].
pc
=
bønchPC
;

1897 
ªcPªvJump
[
ªcPªv_jumps
++].
¥ev
=
íc⁄åado
-1;

1898 
	`wrôe32
(
NOP
);

1900 
	`C⁄vîtJump
((
iRegi°îs
 *)&
iRegs
,(iRegi°î†*)&
ªcPªv
[
íc⁄åado
-1].
ªgs
);

1901 
	`JUMPFunc
((
u32
)
ªcPªv
[
íc⁄åado
-1].
±r
);

1906 #i‚de‡
REC_USE_FAST_BIOS


1907 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1909 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1911 
	`¨mSëJ32
(
j32På
[7]);

1913 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

1915 
	`RET
();

1920 #i‚de‡
REC_USE_FAST_BLOCK


1921 
	`Upd©eGãDñay
(0);

1922 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

1923 
cy˛es_≥ndög
=0;

1924 #i‚de‡
REC_USE_FAST_BIOS


1925 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1927 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1929 
	`CALLFunc
((
u32
)
psxBønchTe°
);

1931 
	`RET
();

1933 #i‚de‡
REC_USE_FAST_BIOS


1934 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1936 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1938 
	`CALLFuncCS
((
u32
)
psxBønchTe°CÆcuœã
);

1940 
	`Upd©eGãDñay
(0);

1941 
	`MOV32ItoR
(
HOST_r1
,
block
);

1942 #ifde‡
REC_USE_RETURN_FUNCS


1943 
	`JUMPFunc
(
func_Te°BønchBlock_±r
);

1944 
	`Upd©eImmedüã
(0);

1946 
	`ªcTe°BønchBlock
(0);

1950 
	`iU∆ockReg
(3);

1951 #i‚de‡
REC_USE_FAST_BIOS


1952 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

1954 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

1956 
ªc_skùs
=
ªc_tŸÆ_›codes
;

1958 #ifde‡
DEBUG_CPU


1959 i‡(
ªc_pha£
) {

1960 
	`dbg
("\t!iJump");

1963 
	}
}

1965 
	$iBønch
(
u32
 
bønchPC
, 
ßve˘x
) {

1966 #ifde‡
DEBUG_CPU


1967 i‡(
ªc_pha£
) {

1968 
	`dbgf
("\tiBønch(%p,%i)\n",
bønchPC
,
ßve˘x
);

1971 
u32
 
back_cy˛es_≥ndög
=
cy˛es_≥ndög
;

1972 i‡(
ßve˘x
==1) {

1973 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

1974 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

1975 #ifde‡
REC_USE_2ND_PHASE


1976 i‡(!
ªc_pha£
) {

1977 
	`mem˝y
(
ªcPªv_tŸÆS
, 
ªcPªv_tŸÆ
, (recPrev_total));

1981 
u32
 
íc⁄åado
=0;

1982 #ifde‡
REC_USE_2ND_PHASE


1983 
u32
 
a˘uÆ_›codes
=
ªc_tŸÆ_›codes
+
ªc_›codes
;

1984 #ifde‡
REC_USE_2ND_PRESERVE_CONST


1985 
u64
 
back_a˘uÆ_c⁄°s
=
a˘uÆ_c⁄°s
;

1986 i‡(!
ªc_pha£
) {

1987 
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
].
c⁄°s
 = 
a˘uÆ_c⁄°s
;

1991 
bønch
 = 1;

1992 
psxRegs
.
code
 = 
	`PSXMu32
(
pc
);

1993 
pc
+= 4;

1996 i‡(
	`iLﬂdTe°
()) {

1997 #i‡
	`deföed
(
DEBUG_CPU
Ë|| deföed(
DEBUG_CPU_OPCODES
Ë|| deföed(
REC_FORCE_DELAY_READ
)

1998 #ifde‡
DEBUG_CPU


1999 i‡(
ªc_pha£
)

2000 
	`dbg
("\t\t\t\tLoadTest");

2002 
	`iUpd©eRegs
(1);

2004 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,pc);

2005 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
,ÖsxRegs.code);

2006 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

2007 
cy˛es_≥ndög
=0;

2009 #i‡
	`deföed
(
öãΩªãr_√w
Ë|| deföed(
öãΩªãr_n⁄e
)

2010 
	`MOV32ItoR
(
HOST_r2
,
bønchPC
);

2011 
	`MOV32ItoR
(
HOST_r1
,(
u32
)
psxRegs
.
code
);

2012 
	`MOV32ItoR
(
HOST_r0
,(
u32
)&
psxRegs
);

2013 
	`CALLFunc
((
u32
)
_psxDñayTe°
);

2015 
	`MOV32ItoR
(
HOST_r1
,
bønchPC
);

2016 
	`MOV32ItoR
(
HOST_r0
,
_Rt_
);

2017 
	`CALLFunc
((
u32
)
psxDñayTe°
);

2020 
	`RET
()

2021 #ifde‡
DEBUG_CPU


2022 i‡(
ªc_pha£
)

2023 
	`dbg
("\t!iBranch");

2025 i‡(
ßve˘x
) {

2026 
cy˛es_≥ndög
=
back_cy˛es_≥ndög
;

2027 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

2028 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

2029 #ifde‡
REC_USE_2ND_PRESERVE_CONST


2030 i‡(!
ªc_pha£
) {

2031 
a˘uÆ_c⁄°s
=
back_a˘uÆ_c⁄°s
;

2037 
	`psxTe°LﬂdDñay
(
_Rt_
,
	`PSXMu32
(
bønchPC
))) {

2042 
	`ªcOpcode
();

2046 
	`ªcOpcode
();

2048 #ifde‡
REC_USE_2ND_PHASE


2049 i‡(!
ªc_pha£
) {

2050 i‡(!
block
 && ((
ßve˘x
)||(block)||(
ªc_tŸÆ_›codes
>
REC_MAX_OPCODES_LIMIT
))) {

2051 
ªcPªvJump
[
ªcPªv_jumps
].
pc
=
bønchPC
;

2052 
	`mem˝y
(
ªcPªvJump
[
ªcPªv_jumps
].
ªgs
,
iRegs
,(iRegs));

2053 
ªcPªv
[
ªc_tŸÆ_›codes
].
jump
=&
ªcPªvJump
[
ªcPªv_jumps
++];

2055 i‡(!
block
) {

2056 
bønch
=0;

2057 
pc
=
pcﬁd
=
bønchPC
;

2058 
pc
-=4;

2061 i‡(
ßve˘x
) {

2062 
cy˛es_≥ndög
=
back_cy˛es_≥ndög
;

2063 
	`mem˝y
(
ªcPªv_tŸÆ
, 
ªcPªv_tŸÆS
, (recPrev_total));

2064 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

2065 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

2066 #ifde‡
REC_USE_2ND_PRESERVE_CONST


2067 
a˘uÆ_c⁄°s
=
back_a˘uÆ_c⁄°s
;

2072 i‡(!
block
 && ((
ßve˘x
)||(
ªc_tŸÆ_›codes
>
REC_MAX_OPCODES_LIMIT
))) {

2073 
i
;

2074 
i
=
ªc_tŸÆ_›codes_¥ev
-1;i>=0;i--)

2075 i‡(
ªcPªv
[
i
].
pc
==
bønchPC
 &&ÑecPªv[i].
jum≥d
) {

2076 i‡(!
ªcPªv
[
i
].
±r
 || 
	`FödJump
((
iRegi°îs
 *)&
iRegs
,(iRegi°î†*)&ªcPªv[i].
ªgs
)) {

2077 
íc⁄åado
=
i
+1;

2085 
	`iLockReg
(3);

2087 i‡((!
íc⁄åado
 || 
block
Ë&& ((
ßve˘x
)||(block)||(
ªc_tŸÆ_›codes
>
REC_MAX_OPCODES_LIMIT
)))

2088 
	`iUpd©eRegs
(1);

2089 i‡(!
block
) {

2090 i‡((
ßve˘x
)||(
ªc_tŸÆ_›codes
>
REC_MAX_OPCODES_LIMIT
)) {

2091 
	`Upd©eGãDñay
(0);

2093 #i‚de‡
REC_USE_FAST_BIOS


2094 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
))

2096 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
))

2099 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
, 
bønchPC
);

2101 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
cy˛e
);

2102 
	`ADD32ItoR
(
HOST_r1
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

2103 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
HOST_r1
);

2104 
cy˛es_≥ndög
=0;

2106 i‡(
r2_is_dúty
) {

2107 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
io_cy˛e_cou¡î
);

2108 #ifde‡
REC_USE_R2


2109 i‡(!
ßve˘x
)

2110 
r2_is_dúty
=0;

2113 
	`wrôe32
(
	`CMP_REGS
(
HOST_r1
,
HOST_r2
));

2114 
j32På
[7]=(
u32
*)(
Bô32u
)
¨mPå
;

2115 
	`wrôe32
(
	`BCC_FWD
(0));

2118 i‡(
íc⁄åado
)

2119 
	`iUpd©eRegs
(0);

2121 i‡(!((
ßve˘x
)||(
ªc_tŸÆ_›codes
>
REC_MAX_OPCODES_LIMIT
)))

2122 
	`iUpd©eRegs
(0);

2123 
	`CALLFunc
((
u32
)
psxBønchTe°CÆcuœã
);

2126 i‡((
ßve˘x
)||(
ªc_tŸÆ_›codes
>
REC_MAX_OPCODES_LIMIT
)) {

2127 #i‡
	`deföed
(
REC_USE_2ND_PHASE
Ë&& deföed(
REC_USE_2ND_REG_CACHE
)

2128 i‡(((
bønchPC
&0x1fffffff)<0x800000Ë&& !
íc⁄åado
) {

2129 
u32
 
bpc
=*((u32 *)
	`PC_REC
(
bønchPC
));

2131 i‡(!
bpc
) {

2133 #ifde‡
DEBUG_CPU


2134 
	`dbg
("\t\tNotÑecompiled");

2136 #i‚de‡
REC_USE_FAST_BIOS


2137 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

2139 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

2141 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

2142 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

2143 
	`¨mSëJ32
(
j32På
[7]);

2144 
	`MOV32ItoR
(
HOST_r0
,
pcöô
);

2145 
	`CALLFunc
((
u32
)
ªc2nd_func
);

2146 
	`MOV32ItoR
(
HOST_r0
,
bønchPC
);
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
pc
,HOST_r0);

2147 
	`¨mSëJ32
(
j32På
[1]);

2149 
	`MOV32ItoR
(
HOST_r0
,
pcöô
);

2150 
	`CALLFunc
((
u32
)
ªc2nd_func
);

2151 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

2152 
	`MOV32ItoR
(
HOST_r0
,
bønchPC
);
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
pc
,HOST_r0);

2154 #i‚de‡
REC_USE_FAST_SECURE


2155 i‡((
C⁄fig
.
HLE
)&&(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)&&(!
ªc_£cuª_wrôes
)) {

2157 #i‚de‡
REC_USE_FAST_BIOS


2158 i‡((
C⁄fig
.
HLE
)&&(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)) {

2160 i‡((
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)) {

2163 #ifde‡
REC_USE_RETURN_FUNCS


2164 
	`JUMPFunc
(
func_Te°BønchIfOK_±r
+4);

2165 
	`Upd©eImmedüã
(0);

2167 
	`ªcTe°BønchIfOK
(1);

2170 
	`RET_wôh_HOST_r0
();

2174 
u32
 
ªc_ˇche
=*((u32 *)(
bpc
-8));

2175 #ifde‡
DEBUG_CPU


2176 
	`dbgf
("\t\tRecompûed Cache=%.8X\n",
ªc_ˇche
);

2178 #i‚de‡
REC_USE_FAST_BIOS


2179 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

2181 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

2184 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

2185 
	`MOV32ItoR
(
HOST_r1
,
bønchPC
);

2186 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_r1
));

2187 #i‚de‡
REC_USE_FAST_SECURE


2188 i‡((
C⁄fig
.
HLE
)&&(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)&&(!
ªc_£cuª_wrôes
)) {

2190 #i‚de‡
REC_USE_FAST_BIOS


2191 i‡((
C⁄fig
.
HLE
)&&(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)) {

2193 i‡((
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)) {

2196 #ifde‡
REC_USE_RETURN_FUNCS


2197 
	`JUMPFuncNE
(
func_Te°BønchIfOK_±r
+4);

2199 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

2200 
	`ªcTe°BønchIfOK
(1);

2201 
	`¨mSëJ32
(
j32På
[1]);

2204 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

2205 
	`RET_wôh_HOST_r0
();

2206 
	`¨mSëJ32
(
j32På
[1]);

2208 
	`¨mSëJ32
(
j32På
[7]);

2213 i‡(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
) {

2214 
vÆ‹
=*((
u32
 *)&
psxM
[
bønchPC
&0x1fffff]);

2216 
	`MOV32ItoR
(
HOST_r0
,
vÆ‹
);

2217 
	`MOV32MtoR
(
HOST_r1
,(
u32
)&
psxM
[
bønchPC
&0x1fffff]);

2218 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_r1
));

2219 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

2221 
	`MOV32ItoR
(
HOST_r0
,
pcöô
);

2222 
	`MOV32ItoR
(
HOST_r1
,
bønchPC
);

2223 
	`CALLFunc
((
u32
)
ªcCÀ¨DoubÀ
);

2224 
	`RET_NC
();

2225 
	`¨mSëJ32
(
j32På
[2]);

2228 i‡(!
	`FödCache
(
ªc_ˇche
,1)) {

2230 
	`MOV32ItoR
(
HOST_r0
,
bpc
);

2233 
	`C⁄vîtCache
(
ªc_ˇche
);

2234 
	`MOV32ItoR
(
HOST_r0
,(
bpc
)+(4*
	`FödCache
(
ªc_ˇche
,0)));

2236 
	`MOV32RtoR
(
HOST_pc
,
HOST_r0
);

2237 
	`Upd©eImmedüã
(0);

2243 #i‚de‡
REC_USE_FAST_BIOS


2244 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

2246 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

2248 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

2249 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`B_FWD
(0));

2251 
	`¨mSëJ32
(
j32På
[7]);

2252 #ifde‡
REC_USE_2ND_PHASE


2253 i‡(
íc⁄åado
) {

2254 i‡(!
ªcPªv
[
íc⁄åado
-1].
±r
) {

2255 
ªcPªvJump
[
ªcPªv_jumps
].
±r
=
¨mPå
;

2256 
	`mem˝y
(
ªcPªvJump
[
ªcPªv_jumps
].
ªgs
,
iRegs
,(iRegs));

2257 
ªcPªvJump
[
ªcPªv_jumps
].
pc
=
bønchPC
;

2258 
ªcPªvJump
[
ªcPªv_jumps
++].
¥ev
=
íc⁄åado
-1;

2259 
	`wrôe32
(
NOP
);

2261 
	`C⁄vîtJump
((
iRegi°îs
 *)&
iRegs
,(iRegi°î†*)&
ªcPªv
[
íc⁄åado
-1].
ªgs
);

2262 
	`JUMPFunc
((
u32
)
ªcPªv
[
íc⁄åado
-1].
±r
);

2266 
	`MOV32ItoR
(
HOST_r0
,
bønchPC
);
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
pc
,HOST_r0);

2267 
	`¨mSëJ32
(
j32På
[1]);

2269 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

2270 #ifde‡
REC_USE_2ND_PHASE


2271 i‡(
íc⁄åado
) {

2272 i‡(!
ªcPªv
[
íc⁄åado
-1].
±r
) {

2273 
ªcPªvJump
[
ªcPªv_jumps
].
±r
=
¨mPå
;

2274 
	`mem˝y
(
ªcPªvJump
[
ªcPªv_jumps
].
ªgs
,
iRegs
,(iRegs));

2275 
ªcPªvJump
[
ªcPªv_jumps
].
pc
=
bønchPC
;

2276 
ªcPªvJump
[
ªcPªv_jumps
++].
¥ev
=
íc⁄åado
-1;

2277 
	`wrôe32
(
NOP
);

2279 
	`C⁄vîtJump
((
iRegi°îs
 *)&
iRegs
,(iRegi°î†*)&
ªcPªv
[
íc⁄åado
-1].
ªgs
);

2280 
	`JUMPFunc
((
u32
)
ªcPªv
[
íc⁄åado
-1].
±r
);

2284 
	`MOV32ItoR
(
HOST_r0
,
bønchPC
);
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
pc
,HOST_r0);

2286 #i‚de‡
REC_USE_FAST_SECURE


2287 i‡((
C⁄fig
.
HLE
)&&(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)&&(!
ªc_£cuª_wrôes
)) {

2289 #i‚de‡
REC_USE_FAST_BIOS


2290 i‡((
C⁄fig
.
HLE
)&&(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)) {

2292 i‡((
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)) {

2295 #ifde‡
REC_USE_RETURN_FUNCS


2296 
	`JUMPFunc
(
func_Te°BønchIfOK_±r
+4);

2297 
	`Upd©eImmedüã
(0);

2299 
	`ªcTe°BønchIfOK
(1);

2302 
	`RET_wôh_HOST_r0
();

2306 #i‚de‡
REC_USE_FAST_BIOS


2307 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

2309 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

2312 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

2313 
	`MOV32ItoR
(
HOST_r1
,
bønchPC
);

2314 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_r1
));

2315 
j32På
[1]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

2316 #i‡
	`deföed
(
REC_USE_GTE_DELAY_CALC
Ë&& deföed(
gã_√w
Ë&& deföed(
REC_USE_GTE_FUNCS
Ë&& deföed(
REC_USE_GTECALC_INLINE
)

2317 i‡(
func_GTE_dñay_±r
) {

2318 
	`Upd©eGãDñay
(0);

2319 
	`MOV32MtoR_ªgs
(
HOST_r0
,(
u32
)&
psxRegs
.
pc
);

2322 #i‚de‡
REC_USE_FAST_SECURE


2323 i‡((
C⁄fig
.
HLE
)&&(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)&&(!
ªc_£cuª_wrôes
)) {

2325 #i‚de‡
REC_USE_FAST_BIOS


2326 i‡((
C⁄fig
.
HLE
)&&(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)) {

2328 i‡((
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)) {

2331 #ifde‡
REC_USE_RETURN_FUNCS


2332 
	`JUMPFunc
(
func_Te°BønchIfOK_±r
+4);

2333 
	`Upd©eImmedüã
(0);

2335 
	`ªcTe°BønchIfOK
(1);

2338 
	`RET_wôh_HOST_r0
();

2340 
	`¨mSëJ32
(
j32På
[1]);

2341 #ifde‡
REC_USE_R2


2342 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
io_cy˛e_cou¡î
);

2343 
r2_is_dúty
=0;

2346 
	`¨mSëJ32
(
j32På
[7]);

2348 #i‡
	`deföed
(
USE_CYCLE_ADD
Ë|| deföed(
DEBUG_CPU_OPCODES
)

2349 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

2351 
cy˛es_≥ndög
+=(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
);

2354 #i‚de‡
REC_USE_FAST_SECURE


2355 i‡((
C⁄fig
.
HLE
)&&(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)&&(!
ªc_£cuª_wrôes
)) {

2357 #i‚de‡
REC_USE_FAST_BIOS


2358 i‡((
C⁄fig
.
HLE
)&&(
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)) {

2360 i‡((
	`pˇbs
(
pc
,
bønchPC
)>=
REC_MAX_TO_TEST
)) {

2364 
vÆ‹
=*((
u32
 *)&
psxM
[
bønchPC
&0x1fffff]);

2365 
	`MOV32ItoR
(
HOST_r0
,
vÆ‹
);

2366 
	`MOV32MtoR
(
HOST_r1
,(
u32
)&
psxM
[
bønchPC
&0x1fffff]);

2367 
	`wrôe32
(
	`CMP_REGS
(
HOST_r0
,
HOST_r1
));

2368 
j32På
[2]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

2370 
	`MOV32ItoR
(
HOST_r0
,
pcöô
);

2371 
	`MOV32ItoR
(
HOST_r1
,
bønchPC
);

2372 
	`CALLFunc
((
u32
)
ªcCÀ¨DoubÀ
);

2373 
	`iUpd©eRegs
(0);

2374 
	`Upd©eGãDñay
(0);

2375 #i‚de‡
REC_USE_FAST_BIOS


2376 i‡(!(((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)))) {

2378 i‡(!(((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)))) {

2380 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
cy˛es_≥ndög
);

2382 
	`MOV32ItoR
(
HOST_r0
,
bønchPC
);
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
pc
,HOST_r0);

2383 
	`RET_wôh_HOST_r0
();

2384 
	`¨mSëJ32
(
j32På
[2]);

2386 
bønch
=0;

2387 
pc
=
pcﬁd
=
bønchPC
;

2390 #i‚de‡
REC_USE_FAST_BLOCK


2391 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
, 
bønchPC
);

2392 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

2393 
cy˛es_≥ndög
=0;

2394 
	`CALLFunc
((
u32
)
psxBønchTe°
);

2395 
	`Upd©eGãDñay
(0);

2396 
	`RET
();

2398 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
, 
bønchPC
);

2399 
	`MOV32MtoR_ªgs
(
HOST_r1
,(
u32
)&
psxRegs
.
cy˛e
);

2400 
	`ADD32ItoR
(
HOST_r1
,
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

2401 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
,
HOST_r1
);

2402 
cy˛es_≥ndög
=0;

2404 i‡(
r2_is_dúty
) {

2405 
	`MOV32MtoR_ªgs
(
HOST_r2
,(
u32
)&
psxRegs
.
io_cy˛e_cou¡î
);

2407 
	`wrôe32
(
	`CMP_REGS
(
HOST_r1
,
HOST_r2
));

2409 
	`CALLFuncCS
((
u32
)
psxBønchTe°CÆcuœã
);

2410 
	`Upd©eGãDñay
(0);

2411 
	`MOV32ItoR
(
HOST_r1
,
block
);

2412 #ifde‡
REC_USE_RETURN_FUNCS


2413 
	`JUMPFunc
(
func_Te°BønchBlock_±r
);

2414 
	`Upd©eImmedüã
(0);

2416 
	`ªcTe°BønchBlock
(0);

2420 
pc
-= 4;

2421 
	`iU∆ockReg
(3);

2423 i‡(
ßve˘x
) {

2424 
cy˛es_≥ndög
=
back_cy˛es_≥ndög
;

2425 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

2426 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

2428 #i‚de‡
REC_USE_FAST_BIOS


2429 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)||(!
C⁄fig
.
HLE
)) {

2431 i‡((
ªc_tŸÆ_›codes
-
ªc_skùs
>=
REC_MAX_SKIPS
)) {

2433 
ªc_skùs
=
ªc_tŸÆ_›codes
;

2435 #ifde‡
DEBUG_CPU


2436 i‡(
ªc_pha£
) {

2437 
	`dbg
("\t!iBranch");

2440 
	}
}

2443 #i‚de‡
REC_USE_2ND_PHASE


2444 
	$iLo›
() {

2445 #ifde‡
DEBUG_CPU


2446 i‡(
ªc_pha£
) {

2447 
	`dbg
("\tiLoop");

2450 
u32
 
back_cy˛es_≥ndög
=
cy˛es_≥ndög
;

2451 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

2452 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

2454 #ifde‡
REC_USE_2ND_PRESERVE_CONST


2455 
u64
 
back_a˘uÆ_c⁄°s
=
a˘uÆ_c⁄°s
;

2456 i‡(!
ªc_pha£
) {

2457 
ªcPªv
[
ªc_tŸÆ_›codes
+
ªc_›codes
].
c⁄°s
 = 
a˘uÆ_c⁄°s
;

2460 
bønch
 = 1;

2461 
psxRegs
.
code
 = 
	`PSXMu32
(
pc
);

2462 
pc
+= 4;

2465 i‡(
	`iLﬂdTe°
()) {

2466 #i‡
	`deföed
(
DEBUG_CPU
Ë|| deföed(
DEBUG_CPU_OPCODES
Ë|| deföed(
REC_FORCE_DELAY_READ
)

2467 #ifde‡
DEBUG_CPU


2468 i‡(
ªc_pha£
) {

2469 
	`dbg
("\t\t\t\tLoadTest");

2472 
	`iUpd©eRegs
(1);

2474 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,pc);

2475 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
,ÖsxRegs.code);

2476 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cy˛es_≥ndög
+(((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

2477 
cy˛es_≥ndög
=0;

2479 #i‡
	`deföed
(
öãΩªãr_√w
Ë|| deföed(
öãΩªãr_n⁄e
)

2480 
	`MOV32ItoR
(
HOST_r2
,
pc
);

2481 
	`MOV32ItoR
(
HOST_r1
,(
u32
)
psxRegs
.
code
);

2482 
	`MOV32ItoR
(
HOST_r0
,(
u32
)&
psxRegs
);

2483 
	`CALLFunc
((
u32
)
_psxDñayTe°
);

2485 
	`MOV32ItoR
(
HOST_r1
,
pc
);

2486 
	`MOV32ItoR
(
HOST_r0
,
_Rt_
);

2487 
	`CALLFunc
((
u32
)
psxDñayTe°
);

2490 
	`RET
()

2491 #ifde‡
DEBUG_CPU


2492 i‡(
ªc_pha£
) {

2493 
	`dbg
("\t!iLoop");

2498 
	`psxTe°LﬂdDñay
(
_Rt_
,
	`PSXMu32
(
pc
))) {

2503 
	`ªcOpcode
();

2507 
	`ªcOpcode
();

2509 
	`iLockReg
(3);

2510 
	`Upd©eGãDñay
(0);

2511 
	`iUpd©eRegs
(1);

2512 #ifde‡
REC_USE_FAST_BLOCK


2513 i‡(!
block
) {

2514 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,Öc);

2515 
	`RET_cy˛es
();

2517 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, (((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
));

2518 
	`MOV32ItoR
(
HOST_r0
, 
pc
);

2519 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
pc
,
HOST_r0
);

2520 
	`MOV32ItoR
(
HOST_r1
,
block
);

2521 #ifde‡
REC_USE_RETURN_FUNCS


2522 
	`JUMPFunc
(
func_Te°BønchBlock_±r
+4);

2523 
	`Upd©eImmedüã
(0);

2525 
	`ªcTe°BønchBlock
(1);

2529 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,Öc);

2530 
	`RET_cy˛es
();

2532 
pc
-=4;

2533 
	`iU∆ockReg
(3);

2534 
cy˛es_≥ndög
=
back_cy˛es_≥ndög
;

2535 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

2536 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

2537 #ifde‡
REC_USE_2ND_PRESERVE_CONST


2538 i‡(!
ªc_pha£
) {

2539 
a˘uÆ_c⁄°s
=
back_a˘uÆ_c⁄°s
;

2542 #ifde‡
DEBUG_CPU


2543 i‡(
ªc_pha£
) {

2544 
	`dbg
("\t!iLoop");

2547 
	}
}

2550 
u32
 
	$iGëSaveMask
(
u32
 
rmö
, u32 
rmax
) {

2551 
u32
 
r
, 
ªt
=0;

2552 
r
=
rmö
;r<=
rmax
;r++) {

2553 i‡(
HWRegs
[
r
].
°©e
==
ST_MAPPED
) {

2554 
ªt
|=(1<<
r
);

2557  
ªt
;

2558 
	}
}

2560 
	$ªcInô
() {

2561 
i
;

2563 
	`mem£t
(
ªcMem
,0,
RECMEM_SIZE
 + (
REC_MAX_OPCODES
*2) + 0x4000);

2565 
i
=0; i<0x80; i++Ë
psxRecLUT
[ò+ 0x0000] = (
u32
)&
ªcRAM
[(i & 0x1f) << 16];

2566 
	`mem˝y
(
psxRecLUT
 + 0x8000,ÖsxRecLUT, 0x80 * 4);

2567 
	`mem˝y
(
psxRecLUT
 + 0xa000,ÖsxRecLUT, 0x80 * 4);

2569 
i
=0; i<0x08; i++Ë
psxRecLUT
[ò+ 0xbfc0] = (
u32
)&
ªcROM
[i << 16];

2571 
	`iRe£tTabÀRegs
();

2573 
	}
}

2575 
	$ªcRe£t
() {

2576 
	`mem£t
(
ªcRAM
, 0, 0x200000);

2577 
	`mem£t
(
ªcROM
, 0, 0x080000);

2579 
¨mPå
=(
u32
*)
ªcMem
;

2581 
bønch
 = 0;

2582 
	`mem£t
(
iRegs
, 0, (iRegs));

2583 
iRegs
[0].
°©e
 = 
ST_CONST
;

2584 
iRegs
[0].
k
 = 0;

2586 
	`mem£t
(
HWRegs
, 0, (HWRegs));

2587 
HWRegs
[0].
°©e
 = 
ST_CONST
;

2588 
HWRegs
[1].
°©e
 = 
ST_CONST
;

2589 
HWRegs
[2].
°©e
 = 
ST_CONST
;

2590 #i‚de‡
REC_USE_R3


2591 
HWRegs
[3].
°©e
 = 
ST_CONST
;

2593 
HWRegs
[11].
°©e
 = 
ST_CONST
;

2594 
HWRegs
[12].
°©e
 = 
ST_CONST
;

2595 
HWRegs
[13].
°©e
 = 
ST_CONST
;

2596 
HWRegs
[14].
°©e
 = 
ST_CONST
;

2597 
HWRegs
[15].
°©e
 = 
ST_CONST
;

2599 
	`iRe£tTabÀRegs
();

2600 
	}
}

2602 
	$ªcShutdown
() {

2603 
	}
}

2605 
	~"›codes.h
"

2608 
	$ªcFun˘i⁄s
() {

2609 
u32
 *
¨mPå_ﬁd
=
¨mPå
;

2610 #ifde‡
REC_USE_2ND_PHASE


2611 
ªc_pha£
=1;

2613 
¨mPå
=(
u32
*)&
ªcMem
[
RECMEM_SIZE
 + (
REC_MAX_OPCODES
*2)];

2614 
func_Te°BønchIfOK_±r
=()
¨mPå
;

2615 #ifde‡
REC_USE_RETURN_FUNCS


2616 #ifde‡
DEBUG_CPU


2617 
	`dbg
("-- FUNCTION TestBranchIfOK --");

2619 
	`ªcTe°BønchIfOK
(0);

2620 
func_Rëu∫_±r
=()
¨mPå
;

2621 #ifde‡
DEBUG_CPU


2622 
	`dbg
("-- FUNCTION Return --");

2624 
	`ªcRëu∫
(0); 
	`gí_Æign4
();

2625 #ifde‡
REC_USE_FAST_BLOCK


2626 
func_Te°BønchBlock_±r
=()
¨mPå
;

2627 #ifde‡
DEBUG_CPU


2628 
	`dbg
("-- FUNCTION TestBranchBlock --");

2630 
	`ªcTe°BønchBlock
(0); 
	`gí_Æign4
();

2633 #ifde‡
REC_USE_MEMORY_FUNCS


2634 
func_MemRód8_±r
=()
¨mPå
;

2635 #ifde‡
DEBUG_CPU


2636 
	`dbg
("-- FUNCTION MemRead8 --");

2638 
	`ªcMemRód8
(); 
	`gí_Æign4
();

2639 
func_MemRód16_±r
=()
¨mPå
;

2640 #ifde‡
DEBUG_CPU


2641 
	`dbgf
("-- FUNCTION MemRead16 --");

2643 
	`ªcMemRód16
(); 
	`gí_Æign4
();

2644 
func_MemRód32_±r
=()
¨mPå
;

2645 #ifde‡
DEBUG_CPU


2646 
	`dbg
("-- FUNCTION MemRead32 --");

2648 
	`ªcMemRód32
(); 
	`gí_Æign4
();

2649 
func_HWRód8_±r
=()
¨mPå
;

2650 #ifde‡
DEBUG_CPU


2651 
	`dbg
("-- FUNCTION HWRead8 --");

2653 
	`ªcHWRód8
(); 
	`gí_Æign4
();

2654 
func_HWRód16_±r
=()
¨mPå
;

2655 #ifde‡
DEBUG_CPU


2656 
	`dbg
("-- FUNCTION HWRead16 --");

2658 
	`ªcHWRód16
(); 
	`gí_Æign4
();

2659 
func_HWRód32_±r
=()
¨mPå
;

2660 #ifde‡
DEBUG_CPU


2661 
	`dbgf
("-- FUNCTION HWRead32 --");

2663 
	`ªcHWRód32
(); 
	`gí_Æign4
();

2664 #i‡!
	`deföed
(
USE_CYCLE_ADD
Ë&& !deföed(
DEBUG_CPU_OPCODES
)

2665 
func_MemWrôe8_±r
=()
¨mPå
;

2666 #ifde‡
DEBUG_CPU


2667 
	`dbg
("-- FUNCTION MemWrite8 --");

2669 
	`ªcMemWrôe8
(); 
	`gí_Æign4
();

2670 
func_MemWrôe16_±r
=()
¨mPå
;

2671 #ifde‡
DEBUG_CPU


2672 
	`dbg
("-- FUNCTION MemWrite16 --");

2674 
	`ªcMemWrôe16
(); 
	`gí_Æign4
();

2675 
func_MemWrôe32_±r
=()
¨mPå
;

2676 #ifde‡
DEBUG_CPU


2677 
	`dbg
("-- FUNCTION MemWrite32 --");

2679 
	`ªcMemWrôe32
(); 
	`gí_Æign4
();

2682 #i‡
	`deföed
(
REC_USE_GTE_FUNCS
Ë&& deföed(
gã_√w
)

2683 
func_GTE_MFC2_29_±r
=()
¨mPå
;

2684 #ifde‡
DEBUG_CPU


2685 
	`dbg
("-- FUNCTION GTE_MFC2 --");

2687 
	`ªcGTE_MFC2_29
(
HOST_r0
);

2688 
	`wrôe32
(
	`BX_LR
()); 
	`gí_Æign4
();

2690 
func_GTE_MTC2_15_±r
=()
¨mPå
;

2691 #ifde‡
DEBUG_CPU


2692 
	`dbg
("-- FUNCTION GTE_MTC2_15 --");

2694 
	`ªcGTE_MTC2_15
(
HOST_r1
);

2695 
	`wrôe32
(
	`BX_LR
()); 
	`gí_Æign4
();

2697 
func_GTE_MTC2_28_±r
=()
¨mPå
;

2698 #ifde‡
DEBUG_CPU


2699 
	`dbg
("-- FUNCTION GTE_MTC2_28 --");

2701 
	`ªcGTE_MTC2_28
(
HOST_r1
);

2702 
	`wrôe32
(
	`BX_LR
()); 
	`gí_Æign4
();

2704 
func_GTE_upd©eCODEs_±r
=()
¨mPå
;

2705 #ifde‡
DEBUG_CPU


2706 
	`dbg
("-- FUNCTION GTE_updateCODEs --");

2708 
	`ªcGTE_upd©eCODEs
();

2709 
	`wrôe32
(
	`BX_LR
()); 
	`gí_Æign4
();

2710 
func_GTE_upd©eMACs_lm0_±r
=()
¨mPå
;

2711 #ifde‡
DEBUG_CPU


2712 
	`dbg
("-- FUNCTION GTE_updateMACs0 --");

2714 
	`ªcGTE_upd©eMACs
(0,0);

2715 
	`wrôe32
(
	`BX_LR
()); 
	`gí_Æign4
();

2716 
func_GTE_upd©eMACs_lm1_±r
=()
¨mPå
;

2717 #ifde‡
DEBUG_CPU


2718 
	`dbg
("-- FUNCTION GTE_updateMACs1 --");

2720 
	`ªcGTE_upd©eMACs
(1,0);

2721 
	`wrôe32
(
	`BX_LR
()); 
	`gí_Æign4
();

2722 
func_GTE_upd©eMACs_lm0_shi·12_±r
=()
¨mPå
;

2723 #ifde‡
DEBUG_CPU


2724 
	`dbg
("-- FUNCTION GTE_updateMACs0_12 --");

2726 
	`ªcGTE_upd©eMACs
(0,12);

2727 
	`wrôe32
(
	`BX_LR
()); 
	`gí_Æign4
();

2728 
func_GTE_upd©eMACs_lm1_shi·12_±r
=()
¨mPå
;

2729 #ifde‡
DEBUG_CPU


2730 
	`dbg
("-- FUNCTION GTE_updateMACs1_12 --");

2732 
	`ªcGTE_upd©eMACs
(1,12);

2733 
	`wrôe32
(
	`BX_LR
()); 
	`gí_Æign4
();

2734 #i‚de‡
USE_GTE_FLAG


2735 
func_GTE_upd©eMACs_lm0_Êag_±r
=()
¨mPå
;

2736 #ifde‡
DEBUG_CPU


2737 
	`dbg
("-- FUNCTION GTE_updateMACs0_flag --");

2739 #i‡
	`deföed
(
REC_USE_GTE_FUNCS
Ë&& deföed(
REC_USE_GTE_DELAY_CALC
)

2740 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2742 
	`ªcGTE_upd©eMACs_Êag
(0,0,1);

2743 
	`wrôe32
(
	`BX_LR
()); 
	`gí_Æign4
();

2744 
func_GTE_upd©eMACs_lm1_Êag_±r
=()
¨mPå
;

2745 #ifde‡
DEBUG_CPU


2746 
	`dbg
("-- FUNCTION GTE_updateMACs1_flag --");

2748 #i‡
	`deföed
(
REC_USE_GTE_FUNCS
Ë&& deföed(
REC_USE_GTE_DELAY_CALC
)

2749 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2751 
	`ªcGTE_upd©eMACs_Êag
(1,0,1);

2752 
	`wrôe32
(
	`BX_LR
()); 
	`gí_Æign4
();

2754 
func_GTE_upd©eMAC3_lm0_Êag_±r
=()
¨mPå
;

2755 #ifde‡
DEBUG_CPU


2756 
	`dbg
("-- FUNCTION GTE_updateMAC3_flag --");

2758 #i‡
	`deföed
(
REC_USE_GTE_FUNCS
Ë&& deföed(
REC_USE_GTE_DELAY_CALC
)

2759 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP2C
.
r
[31],0);

2761 
	`ªcGTE_upd©eMAC3_Êag
(0,0,1);

2762 
	`wrôe32
(
	`BX_LR
());

2765 i‡(
¨mPå
>(
u32
 *)&
ªcMem
[
RECMEM_SIZE
 + (
REC_MAX_OPCODES
*2) + 0x4000]){

2766 
	`puts
("recFunctions memory overflow");

2767 
	`pcsx4Æl_exô
();

2769 
	`Upd©eImmedüã
(1);

2770 
	`sys_ˇcheÊush
((
u32
*)&
ªcMem
[
RECMEM_SIZE
 + (
REC_MAX_OPCODES
*2)],(u32*)&recMem[RECMEM_SIZE + (REC_MAX_OPCODES*2) + 0x4000]);

2771 
¨mPå
=
¨mPå_ﬁd
;

2772 
	}
}

2774 
	$ªcRecompûe
() {

2775 
u32
 *
¨mPå_ﬁd
;

2777 i‡(!
func_Te°BønchIfOK_±r
)

2778 
	`ªcFun˘i⁄s
();

2781 
psxRegs
.
ª£rved
=(*)&
psxRecLUT
[0];

2784 i‡(((
u32
)
¨mPå
 - (u32)
ªcMem
Ë>(
RECMEM_SIZE
 - 0x10000))

2785 
	`ªcRe£t
();

2786 #i‡
	`deföed
(
REC_USE_GTE_DELAY_CALC
Ë&& deföed(
gã_√w
Ë&& deföed(
REC_USE_GTE_FUNCS
Ë&& deföed(
REC_USE_GTECALC_INLINE
)

2787 
func_GTE_dñay_±r
=0;

2790 #ifde‡
DEBUG_CPU


2791 
	`dbgf
("->PC=%p%s\n",
psxRegs
.
pc
,
block
?" (block)":"");

2793 
¨mPå_ﬁd
=
¨mPå
;

2794 #ifde‡
REC_USE_2ND_PHASE


2795 
u32
 
cy˛es_ﬁd
=
psxRegs
.
cy˛e
;

2796 
u32
 
ªc_ˇche
=0;

2797 
bønch
 = 0;

2798 
ªc_pha£
=0;

2799 
cy˛es_≥ndög
=0;

2800 
pc
 = 
pcﬁd
 = 
pcöô
 = 
psxRegs
.pc;

2801 
	`iCÀ¨RegsPªv
();

2802 
ªc_tŸÆ_›codes
 = 0; !
bønch
 &&Ñec_tŸÆ_›codes<
REC_MAX_OPCODES
;Ñec_tŸÆ_›codes+=
ªc_›codes
) {

2803 #i‚de‡
REC_USE_2ND_PRESERVE_CONST


2804 
	`mem˝y
(
ªcPªv
[
ªc_tŸÆ_›codes
].
ªgs
,
iRegs
,(iRegs));

2806 
ªcPªv
[
ªc_tŸÆ_›codes
].
c⁄°s
 = 
a˘uÆ_c⁄°s
;

2809 
ªc_›codes
=0;

2810 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

2811 
pc
 += 4;

2812 
	`ªcOpcode
()

2814 #ifde‡
REC_USE_2ND_REG_CACHE


2817 
i
,
j
;

2818 
j
=0;j<
REC_MAX_2ND_REG_CACHE
;j++) {

2819 
ˇndid©o
=0;

2820 
i
=1;i<32;i++) {

2821 i‡(
ªcPªv_tŸÆ
[
ˇndid©o
].
k
<ªcPªv_tŸÆ[
i
].k && (!((
ªc_ˇche
>>i)&1))) {

2822 
ˇndid©o
=
i
;

2825 i‡(
ªcPªv_tŸÆ
[
ˇndid©o
].
k
)

2826 
ªc_ˇche
|=(1<<
ˇndid©o
);

2830 
psxRegs
.
pc
=
pcöô
;

2831 #ifde‡
DEBUG_CPU


2832 i‡(
¨mPå_ﬁd
!=
¨mPå
) {

2833 
	`puts
("REC-2ND ERRORármPtr!");

2834 
	`pcsx4Æl_exô
();

2836 i‡(
cy˛es_ﬁd
!=
psxRegs
.
cy˛e
) {

2837 
	`puts
("REC-2ND ERROR cycles!");

2838 
	`pcsx4Æl_exô
();

2842 
i
,
j
,
k
;

2843 
i
=0;i<
ªcPªv_jumps
;i++)

2844 
j
=
ªc_tŸÆ_›codes
-1;j>=0;j--)

2845 i‡(!
ªcPªv
[
j
].
jum≥d
 &&ÑecPªv[j].
pc
==
ªcPªvJump
[
i
].pc) {

2846 #i‚de‡
REC_USE_2ND_PRESERVE_CONST


2847 
k
=0;k<34;k++)

2848 i‡(
ªcPªv
[
j
].
ªgs
[
k
].
°©e
==
ST_CONST
 && (
ªcPªvJump
[
i
].regs[k].state!=ST_CONST || (recPrevJump[i].regs[k].state==ST_CONST &&ÑecPrev[j].regs[k].k!=recPrevJump[i].regs[k].k)))

2849 
ªcPªv
[
j
].
˛ór_c⁄°
[
k
]=1;

2851 
k
=1;k<34;k++)

2852 i‡((
ªcPªv
[
j
].
c⁄°s
&(1ULL<<
k
)Ë&& 
ªcPªvJump
[
i
].
ªgs
[k].
°©e
!=
ST_CONST
)

2854 i‡(
k
<34) ;

2856 
ªcPªv
[
j
].
jum≥d
=1;

2857 
ªcPªv
[
j
].
±r
=
NULL
;

2860 
ªc_tŸÆ_›codes_¥ev
=
ªc_tŸÆ_›codes
;

2862 
ªcPªv_jumps
=0;

2863 
ªc_pha£
=1;

2864 #ifde‡
REC_USE_2ND_REG_CACHE


2866 
	`ªc2nd
();

2868 
	`wrôe32
(
ªc_ˇche
);

2873 
	`iCÀ¨Regs
();

2877 
	`wrôe32
(*(
u32
 *)((*)
	`PSXM
(
psxRegs
.
pc
)));

2878 
immCou¡
 = 0;

2881 
	`PC_REC32
(
psxRegs
.
pc
Ë(
u32
)
¨mPå
;

2883 
pc
 = 
pcﬁd
 = 
pcöô
 = 
psxRegs
.pc;

2884 
bønch
 = 0;

2885 
ªc_ölo›
 = 0;

2886 
ªc_skùs
 = -
REC_MAX_SKIPS
;

2889 
r2_is_dúty
 = 1;

2891 #ifde‡
DEBUG_CPU


2892 
medü
=0.0;

2893 
medü2
=0.0;

2894 
medü3
=0.0;

2895 
cu™tos
=0;

2896 
immedüãs
=
immsize
=
ÁŒo_ªgi°ro
=
ok_ªgi°ro
=0;

2898 #i‡
	`deföed
(
REC_USE_2ND_PHASE
Ë&& deföed(
REC_USE_2ND_REG_CACHE
)

2899 
ªc_tŸÆ_›codes
=0;rec_total_opcodes<32;rec_total_opcodes++) {

2900 i‡((
ªc_ˇche
>>
ªc_tŸÆ_›codes
)&1) {

2901 #ifde‡
DEBUG_CPU


2902 
	`dbgf
("\tCached R%ò",
ªc_tŸÆ_›codes
);

2904 
	`RódReg
(
ªc_tŸÆ_›codes
);

2909 
cy˛es_≥ndög
=0;

2911 
ªc_tŸÆ_›codes
 = 0; (ªc_tŸÆ_›codes<
REC_MAX_OPCODES
Ë&& (!
bønch
);Ñec_tŸÆ_›codes+=
ªc_›codes
) {

2913 
ªc_›codes
=0;

2914 #ifde‡
REC_USE_2ND_PHASE


2915 i‡(
ªcPªv
[
ªc_tŸÆ_›codes
].
jum≥d
) {

2916 #i‚de‡
REC_USE_2ND_PRESERVE_CONST


2917 
i
;

2918 
i
=0;i<34;i++)

2919 i‡(
ªcPªv
[
ªc_tŸÆ_›codes
].
˛ór_c⁄°
[
i
])

2920 
	`M≠ToWrôe
(
i
);

2922 
	`iPutCy˛esAdd
(1);

2923 
	`Upd©eGãDñay
(1);

2924 
	`Re£tM≠GãRegs
();

2927 
ªc_skùs
 = 
ªc_tŸÆ_›codes
-
REC_MAX_SKIPS
;

2928 
ªcPªv
[
ªc_tŸÆ_›codes
].
±r
=
¨mPå
;

2929 
	`mem˝y
((*)&
ªcPªv
[
ªc_tŸÆ_›codes
].
ªgs
,
iRegs
,(iRegs));

2930 
r2_is_dúty
=1;

2933 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

2934 
pc
 += 4;

2935 
	`ªcOpcode
()

2937 i‡(
immCou¡
 && !
bønch
)

2938 i‡((()
¨mPå
)-
immPå
[0] > 3072)

2940 
u32
 *
p
=
¨mPå
;

2941 i‡(
ªc_tŸÆ_›codes
>
REC_MAX_OPCODES_LIMIT
)

2943 #ifde‡
DEBUG_CPU


2944 
	`dbg
("\t\tForzado UpdateImmediate");

2946 
	`wrôe32
(0xe1a00000);

2947 
	`wrôe32
(0xe1a00000);

2948 
	`Upd©eImmedüã
(1);

2949 *
p
=
	`B_FWD
(((
u32
)
¨mPå
)-((u32)p)-8);

2952 
	`Upd©eGãDñay
(1);

2954 i‡(!
bønch
) {

2955 
	`iFlushRegs
();

2956 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,Öc);

2957 
	`RET_cy˛es
();

2959 
bønch
 = 0;

2960 #ifde‡
REC_USE_2ND_PHASE


2961 
ªcPªv_jumps
) {

2962 
ªcPªv_jumps
--;

2963 
u32
 
off£t
=((((u32)(
¨mPå
Ë- ((u32)(
ªcPªvJump
[
ªcPªv_jumps
].
±r
Ë+ (8))Ë>> 2Ë& 0xFFFFFF); *ªcPªvJump[ªcPªv_jumps].±∏(
	`B_FWD_
(offset));

2964 i‡(
ªcPªv
[
ªcPªvJump
[
ªcPªv_jumps
].
¥ev
].
±r
 && 
	`FödJump
((
iRegi°îs
 *)&ªcPªvJump[ªcPªv_jumps].
ªgs
,(iRegisters *)&recPrev[recPrevJump[recPrev_jumps].prev].regs)) {

2965 
	`C⁄vîtJump
((
iRegi°îs
 *)&
ªcPªvJump
[
ªcPªv_jumps
].
ªgs
,(iRegi°î†*)&
ªcPªv
[ªcPªvJump[ªcPªv_jumps].
¥ev
].regs);

2966 
	`JUMPFunc
((
u32
)
ªcPªv
[
ªcPªvJump
[
ªcPªv_jumps
].
¥ev
].
±r
);

2968 
	`mem˝y
(
iRegs
,
ªcPªvJump
[
ªcPªv_jumps
].
ªgs
,(iRegs));

2969 
	`iUpd©eRegs
(1);

2970 
	`MOV32ItoR
(
HOST_r0
,
ªcPªvJump
[
ªcPªv_jumps
].
pc
);
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.pc,HOST_r0);

2971 #ifde‡
REC_USE_RETURN_FUNCS


2972 
	`JUMPFunc
(
func_Te°BønchIfOK_±r
+4);

2973 
	`Upd©eImmedüã
(0);

2975 
	`ªcTe°BønchIfOK
(1);

2980 
	`Upd©eImmedüã
(1);

2981 
	`gí_Æign4
();

2982 
	`sys_ˇcheÊush
(
¨mPå_ﬁd
,
¨mPå
);

2983 #ifde‡
DEBUG_CPU


2984 
cu™tos
++;

2985 
numîo
=(()((()
¨mPå
)-(()
¨mPå_ﬁd
)))/(()
ªc_tŸÆ_›codes
);

2986 
medü
=((medü*(()(
cu™tos
-1)))+
numîo
)/(()cuantos);

2987 
numîo2
=
immedüãs
?(()
immsize
)/(()immediates):0.0;

2988 
medü2
=((medü2*((()
cu™tos
-1)))+
numîo2
)/(()cuantos);

2989 
oks
=(
ok_ªgi°ro
||
ÁŒo_ªgi°ro
)?((()ok_registro)*100.0)/(()(ok_registro+fallo_registro)):100.0;

2990 
medü3
=((medü3*(
cu™tos
-1))+
oks
)/cuantos;

2991 
	`dbgf
("<-%òOpcodes, Tama√±ÿbloque=%òbyã†(%.2‡p‹ opcodêy %.2‡dêmedü)\n",
ªc_tŸÆ_›codes
,(()
¨mPå
)-(()
¨mPå_ﬁd
),
numîo
,
medü
);

2992 
	`dbgf
(" %òInmedütos, Ußdÿ%òbyã†(%.2‡p‹ inmedütÿy %.2‡dêmedü)\n",
immedüãs
,
immsize
,
numîo2
,
medü2
);

2993 
	`dbgf
(" %.2f%%Ñegi°ro†ußdo†(%.2f%% dêmedü)\n",
oks
,
medü3
);

2995 
	}
}

2997 
	$ªcExecuã
() {

3000 
u32
 *
p
 = (u32*)
	`PC_REC
(
psxRegs
.
pc
);

3001 i‡(*
p
 =0Ë
	`ªcRecompûe
();

3002 
	`ªcRun
(*
p
,(
u32
)&
psxRegs
);

3004 
	}
}

3006 
	$ªcExecuãBlock
(
èrgë_pc
) {

3007 
block
=
èrgë_pc
;

3009 
u32
 *
p
 = (u32*)
	`PC_REC
(
psxRegs
.
pc
);

3010 i‡(*
p
 =0Ë
	`ªcRecompûe
();

3011 
	`ªcRun
(*
p
,(
u32
)&
psxRegs
);

3012 }
psxRegs
.
pc
!=
èrgë_pc
);

3013 
block
=0;

3014 
	}
}

3016 
	$ªcCÀ¨
(
u32
 
Addr
, u32 
Size
) {

3017 *
±r
=(*)
	`PC_REC
(
Addr
);

3018 ;
Size
;Size--)

3019 *
±r
++=0;

3020 
	}
}

3022 
	$ªcCÀ¨DoubÀ
(
u32
 
Addr1
, u32 
Addr2
) {

3023 *((*)
	`PC_REC
(
Addr1
)) = 0;

3024 *((*)
	`PC_REC
(
Addr2
)) = 0;

3025 
	}
}

3027 
R3000A˝u
 
	gpsxRec
 = {

3028 
ªcInô
,

3029 
ªcRe£t
,

3030 
ªcExecuã
,

3031 
ªcExecuãBlock
,

3032 
ªcCÀ¨
,

3033 
ªcShutdown


	@src/recompiler/arm/risc_armv4le.h

19 #ifde‡
DEBUG_CPU


20 
	gimmedüãs
=0;

21 
	gimmsize
=0;

25 
	#MAX_IMM_OPCODES
 2

	)

30 
	#DRC_PTR_SIZE_IM
 
Bô32u


	)

33 
Bô8u
 
	tHo°Reg
;

36 
	#HOST_r0
 0

	)

37 
	#HOST_r1
 1

	)

38 
	#HOST_r2
 2

	)

39 
	#HOST_r3
 3

	)

40 
	#HOST_r4
 4

	)

41 
	#HOST_r5
 5

	)

42 
	#HOST_r6
 6

	)

43 
	#HOST_r7
 7

	)

45 
	#HOST_r8
 8

	)

46 
	#HOST_r9
 9

	)

47 
	#HOST_r10
 10

	)

48 
	#HOST_r11
 11

	)

49 
	#HOST_r12
 12

	)

50 
	#HOST_r13
 13

	)

51 
	#HOST_r14
 14

	)

52 
	#HOST_r15
 15

	)

56 
	#HOST_a1
 
HOST_r0


	)

57 
	#HOST_a2
 
HOST_r1


	)

58 
	#HOST_a3
 
HOST_r2


	)

59 
	#HOST_a4
 
HOST_r3


	)

60 
	#HOST_v1
 
HOST_r4


	)

61 
	#HOST_v2
 
HOST_r5


	)

62 
	#HOST_v3
 
HOST_r6


	)

63 
	#HOST_v4
 
HOST_r7


	)

65 
	#HOST_v5
 
HOST_r8


	)

66 
	#HOST_v6
 
HOST_r9


	)

67 
	#HOST_v7
 
HOST_r10


	)

68 
	#HOST_v8
 
HOST_r11


	)

69 
	#HOST_ù
 
HOST_r12


	)

70 
	#HOST_•
 
HOST_r13


	)

71 
	#HOST_Ã
 
HOST_r14


	)

72 
	#HOST_pc
 
HOST_r15


	)

75 
	#ãmp1
 
HOST_ù


	)

76 
	#ãmp2
 
HOST_Ã


	)

81 
	#FC_RETOP
 
HOST_a1


	)

84 
	#FC_OP1
 
HOST_a1


	)

87 
	#FC_OP2
 
HOST_a2


	)

90 
	#ROTATE_SCALE
(
x
Ë–(x)?(32 - x):(0Ë)

	)

96 
	#MOV_IMM
(
d°
, 
imm
, 
rimm
Ë(0xe3a00000 + ((d°Ë<< 12Ë+ (immË+ (‘immË<< 7Ë)

	)

98 
	#MOV_REG_LSL_IMM
(
d°
, 
§c
, 
imm
Ë(0xe1a00000 + ((d°Ë<< 12Ë+ (§cË+ ((immË<< 7Ë)

	)

100 
	#MOVS_REG_LSL_IMM
(
d°
, 
§c
, 
imm
Ë(0xe1b00000 + ((d°Ë<< 12Ë+ (§cË+ ((immË<< 7Ë)

	)

102 
	#MOVCC_REG_LSL_IMM
(
d°
, 
§c
, 
imm
Ë(0x31a00000 + ((d°Ë<< 12Ë+ (§cË+ ((immË<< 7Ë)

	)

104 
	#MOV_REG_LSR_IMM
(
d°
, 
§c
, 
imm
Ë(imm?(0xe1a00020 + ((d°Ë<< 12Ë+ (§cË+ ((immË<< 7)):(
	`MOV_REG_LSL_IMM
(d°,§c,0)))

	)

106 
	#MOV_REG_ASR_IMM
(
d°
, 
§c
, 
imm
Ë(imm?(0xe1a00040 + ((d°Ë<< 12Ë+ (§cË+ ((immË<< 7)):(
	`MOV_REG_LSL_IMM
(d°,§c,0)))

	)

108 
	#MOVCC_REG_ASR_IMM
(
d°
, 
§c
, 
imm
Ë(imm?(0x31a00040 + ((d°Ë<< 12Ë+ (§cË+ ((immË<< 7)):(
	`MOVCC_REG_LSL_IMM
(d°,§c,0)))

	)

110 
	#MOV_REG_LSL_REG
(
d°
, 
§c
, 
ºeg
Ë(0xe1a00010 + ((d°Ë<< 12Ë+ (§cË+ (‘ªgË<< 8Ë)

	)

112 
	#MOV_REG_LSR_REG
(
d°
, 
§c
, 
ºeg
Ë(0xe1a00030 + ((d°Ë<< 12Ë+ (§cË+ (‘ªgË<< 8Ë)

	)

114 
	#MOV_REG_ASR_REG
(
d°
, 
§c
, 
ºeg
Ë(0xe1a00050 + ((d°Ë<< 12Ë+ (§cË+ (‘ªgË<< 8Ë)

	)

116 
	#MOV_REG_ROR_REG
(
d°
, 
§c
, 
ºeg
Ë(0xe1a00070 + ((d°Ë<< 12Ë+ (§cË+ (‘ªgË<< 8Ë)

	)

118 
	#MVN_IMM
(
d°
, 
imm
, 
rimm
Ë(0xe3e00000 + ((d°Ë<< 12Ë+ (immË+ (‘immË<< 7Ë)

	)

122 
	#ADD_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0xe2800000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

124 
	#ADD_REG_LSL_IMM
(
d°
, 
§c1
, 
§c2
, 
imm
Ë(0xe0800000 + ((d°Ë<< 12Ë+ ((§c1Ë<< 16Ë+ (§c2Ë+ ((immË<< 7Ë)

	)

126 
	#SUB_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0xe2400000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

128 
	#SUB_REG_LSL_IMM
(
d°
, 
§c1
, 
§c2
, 
imm
Ë(0xe0400000 + ((d°Ë<< 12Ë+ ((§c1Ë<< 16Ë+ (§c2Ë+ ((immË<< 7Ë)

	)

130 
	#RSB_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0xe2600000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

132 
	#CMP_IMM
(
§c
, 
imm
, 
rimm
Ë(0xe3500000 + ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

134 
	#CMN_IMM
(
§c
, 
imm
, 
rimm
Ë(0xe3700000 + ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

136 
	#NOP
 
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 0)

	)

140 
	#TST_IMM
(
§c
, 
imm
, 
rimm
Ë(0xe3100000 + ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

142 
	#AND_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0xe2000000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

144 
	#AND_REG_LSL_IMM
(
d°
, 
§c1
, 
§c2
, 
imm
Ë(0xe0000000 + ((d°Ë<< 12Ë+ ((§c1Ë<< 16Ë+ (§c2Ë+ ((immË<< 7Ë)

	)

146 
	#ORR_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0xe3800000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

148 
	#ORRNE_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0x13800000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

150 
	#ORR_REG_LSL_IMM
(
d°
, 
§c1
, 
§c2
, 
imm
Ë(0xe1800000 + ((d°Ë<< 12Ë+ ((§c1Ë<< 16Ë+ (§c2Ë+ ((immË<< 7Ë)

	)

152 
	#ORR_REG_LSR_IMM
(
d°
, 
§c1
, 
§c2
, 
imm
Ë(imm?(0xe1800020 + ((d°Ë<< 12Ë+ ((§c1Ë<< 16Ë+ (§c2Ë+ ((immË<< 7)):(
	`ORR_REG_LSL_IMM
(d°,§c1,§c2,0)))

	)

154 
	#EOR_REG_LSL_IMM
(
d°
, 
§c1
, 
§c2
, 
imm
Ë(0xe0200000 + ((d°Ë<< 12Ë+ ((§c1Ë<< 16Ë+ (§c2Ë+ ((immË<< 7Ë)

	)

156 
	#BIC_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0xe3c00000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

158 
	#CLZ
(
d°
,
§c
Ë(0xe16f0f10 + ((d°Ë<< 12Ë+ (§c))

	)

162 
	#LDR_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe5900000 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (immË)

	)

164 
	#LDR_IMM_NEG
(
ªg
, 
addr
, 
imm
Ë(0xe5100000 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (immË)

	)

166 
	#LDRNE_IMM
(
ªg
, 
addr
, 
imm
Ë(0x15900000 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (immË)

	)

168 
	#LDRCC_IMM
(
ªg
, 
addr
, 
imm
Ë(0x35900000 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (immË)

	)

170 
	#LDR_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0xe7900000 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

172 
	#LDRCC_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0x37900000 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

174 
	#LDR_REG_LSL
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
, 
imm
Ë(0xe7900000 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (imm << 7Ë+ (ªg_§c2Ë)

	)

176 
	#LDRH_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe1d000b0 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (((immË& 0xf0Ë<< 4Ë+ ((immË& 0x0fË)

	)

178 
	#LDRH_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0xe19000b0 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

180 
	#LDRCCH_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0x319000b0 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

182 
	#LDRSH_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe1d000f0 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (((immË& 0xf0Ë<< 4Ë+ ((immË& 0x0fË)

	)

184 
	#LDRSH_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0xe19000f0 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

186 
	#LDRB_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe5d00000 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (immË)

	)

188 
	#LDRB_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0xe7d00000 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

190 
	#LDRCCB_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0x37d00000 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

194 
	#STR_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe5800000 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (immË)

	)

196 
	#STR_IMM_NEG
(
ªg
, 
addr
, 
imm
Ë(0xe5000000 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (immË)

	)

198 
	#STR_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0xe7800000 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

200 
	#STRNE_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0x17800000 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

202 
	#STRCC_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0x37800000 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

204 
	#STRH_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe1c000b0 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (((immË& 0xf0Ë<< 4Ë+ ((immË& 0x0fË)

	)

206 
	#STRH_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0xe18000b0 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

208 
	#STRNEH_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0x118000b0 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

210 
	#STRCCH_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0x318000b0 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

212 
	#STRB_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe5c00000 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (immË)

	)

214 
	#STRB_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0xe7c00000 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

216 
	#STRNEB_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0x17c00000 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

218 
	#STRCCB_REG
(
ªg_de°
, 
ªg_§c1
, 
ªg_§c2
Ë(0x37c00000 + (‘eg_de°Ë<< 12Ë+ (‘eg_§c1Ë<< 16Ë+ (ªg_§c2Ë)

	)

220 
	#ARM_SAVEREG
(
ªgmask
Ë(0xe92d0000 +Ñegmask)

	)

222 
	#ARM_RESTOREREG
(
ªgmask
Ë(0xe8bd0000 +Ñegmask)

	)

224 
	#ARM_SAVEREGS
 0xe92d1fff

	)

226 
	#ARM_RESTOREREGS
 0xe8bd1fff

	)

230 
	#BEQ_FWD
(
imm
Ë(0x0a000000 + ((immË>> 2Ë)

	)

232 
	#BNE_FWD
(
imm
Ë(0x1a000000 + ((immË>> 2Ë)

	)

234 
	#BCS_FWD
(
imm
Ë(0x2a000000 + ((immË>> 2Ë)

	)

236 
	#BCC_FWD
(
imm
Ë(0x3a000000 + ((immË>> 2Ë)

	)

238 
	#BHS_FWD
(
imm
Ë(0x2a000000 + ((immË>> 2Ë)

	)

240 
	#BLO_FWD
(
imm
Ë(0x3a000000 + ((immË>> 2Ë)

	)

242 
	#BHI_FWD
(
imm
Ë(0x8a000000 + ((immË>> 2Ë)

	)

244 
	#BLS_FWD
(
imm
Ë(0x9a000000 + ((immË>> 2Ë)

	)

246 
	#BMI_FWD
(
imm
Ë(0x4a000000 + ((immË>> 2Ë)

	)

248 
	#BPL_FWD
(
imm
Ë(0x5a000000 + ((immË>> 2Ë)

	)

250 
	#BGE_FWD
(
imm
Ë(0xØ000000 + ((immË>> 2Ë)

	)

252 
	#BLT_FWD
(
imm
Ë(0xba000000 + ((immË>> 2Ë)

	)

254 
	#BGT_FWD
(
imm
Ë(0xˇ000000 + ((immË>> 2Ë)

	)

256 
	#BLE_FWD
(
imm
Ë(0xda000000 + ((immË>> 2Ë)

	)

258 
	#B_FWD
(
imm
Ë(0xó000000 + ((immË>> 2Ë)

	)

259 
	#B_FWD_
(
imm
Ë(0xó000000 + (imm))

	)

260 
	#BNE_FWD_
(
imm
Ë(0x1a000000 + (imm))

	)

261 
	#BCS_FWD_
(
imm
Ë(0x2a000000 + (imm))

	)

263 
	#MOV_IMM_INT
(
d°
, 
imm
Ë(0xe3a00000 + ((d°Ë<< 12Ë+ (immË)

	)

264 
	#MVN_IMM_INT
(
d°
, 
imm
Ë(0xe3e00000 + ((d°Ë<< 12Ë+ (immË)

	)

265 
	#CMP_REGS
(
ªg1
,
ªg2
Ë(0xe1500000 + (ªg1<<16Ë+ (ªg2))

	)

266 
	#MOVGE_REGS
(
ªg1
, 
ªg2
Ë(0xa1a00000 + (ªg1<<12Ë+ (ªg2))

	)

267 
	#MOVGE_IMM
(
d°
, 
imm
, 
rimm
Ë(0xa3a00000 + ((d°Ë<< 12Ë+ (immË+ (‘immË<< 7Ë)

	)

268 
	#MOVLT_IMM
(
d°
, 
imm
, 
rimm
Ë(0xb3a00000 + ((d°Ë<< 12Ë+ (immË+ (‘immË<< 7Ë)

	)

269 
	#MOVCS_IMM
(
d°
, 
imm
, 
rimm
Ë(0x23a00000 + ((d°Ë<< 12Ë+ (immË+ (‘immË<< 7Ë)

	)

270 
	#MOVCC_IMM
(
d°
, 
imm
, 
rimm
Ë(0x33a00000 + ((d°Ë<< 12Ë+ (immË+ (‘immË<< 7Ë)

	)

271 
	#BL_FWD
(
imm
Ë(0xeb000000 + (imm))

	)

272 
	#BLCC_FWD
(
imm
Ë(0x3b000000 + (imm))

	)

273 
	#BLCS_FWD
(
imm
Ë(0x2b000000 + (imm))

	)

274 
	#BX_LR
(Ë(0xe12fff1e)

	)

275 
	#BXCC_LR
(Ë(0x312fff1e)

	)

276 
	#BXNE_LR
(Ë(0x112fff1e)

	)

278 
	#PLD
(
d°
,
imm
Ë(0xf5d0f000 + ((d°Ë<< 16Ë+ ((imm)&0xfffË)

	)

281 
	$gí_mov_ªgs
(
Ho°Reg
 
ªg_d°
,Ho°Reg 
ªg_§c
) {

282 if(
ªg_§c
 =
ªg_d°
 || !
ªc_pha£
) ;

283 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
ªg_d°
, 
ªg_§c
, 0) );

284 
	}
}

286 
Bô32u
 
	$gíimm
(
Bô32u
 
imm
,Bô32u *
ícoded
) {

287 if(
imm
==0Ë{*
ícoded
=0; 1;}

288 
i
=32;

289 
i
>0)

291 if(
imm
<256) {

292 *
ícoded
=((
i
&30)<<7)|
imm
;

295 
imm
=(imm>>2)|(imm<<30);
i
-=2;

298 
	}
}

302 
	$gëImmOpcodes
(
Bô32u
 
imm
) {

303 
ªt
=0;

304 
Bôs
 
sˇÀ
 = 0;

305 
imm
) {

306 (
imm
 & 3) == 0) {

307 
imm
>>=2;

308 
sˇÀ
+=2;

310 
ªt
++;

311 
imm
>>=8;

312 
sˇÀ
+=8;

314  
ªt
;

315 
	}
}

318 
	$gí_mov_dw‹d_to_ªg_imm_èbÀ
(
Ho°Reg
 
de°_ªg
,
Bô32u
 
imm
) {

319 
immPå
[
immCou¡
]=()
¨mPå
;

320 
immD©a
[
immCou¡
++]=
imm
;

321 
	`wrôe32
(
	`LDR_IMM
((
de°_ªg
), 
HOST_pc
, 0));

323 
	}
}

326 
	$gí_mov_dw‹d_to_ªg_imm
(
Ho°Reg
 
de°_ªg
,
Bô32u
 
imm
) {

327 
Bô32u
 
¨mvÆ
;

328 i‡(!
ªc_pha£
) ;

329 #ifde‡
DEBUG_CPU


330 
›å
=()
¨mPå
;

331 
	`dbgf
("\t\t\tgí_mov_dw‹d_to_ªg_imm‘%i,%p)\n",
de°_ªg
,
imm
);

333 if(
	`gíimm
(
imm
,&
¨mvÆ
))

335 
	`wrôe32
–
	`MOV_IMM_INT
(
de°_ªg
,
¨mvÆ
) );

337 if(
	`gíimm
(~
imm
,&
¨mvÆ
))

339 
	`wrôe32
–
	`MVN_IMM_INT
(
de°_ªg
,
¨mvÆ
) );

343 i‡(
	`gëImmOpcodes
(
imm
)<=
MAX_IMM_OPCODES
) {

344 
Bôs
 
fú°
, 
sˇÀ
;

345 
sˇÀ
 = 0;

346 
fú°
 = 1;

347 
imm
) {

348 (
imm
 & 3) == 0) {

349 
imm
>>=2;

350 
sˇÀ
+=2;

352 i‡(
fú°
) {

353 
	`wrôe32
–
	`MOV_IMM
(
de°_ªg
, 
imm
 & 0xff, 
	`ROTATE_SCALE
(
sˇÀ
)) );

354 
fú°
 = 0;

356 
	`wrôe32
–
	`ORR_IMM
(
de°_ªg
, de°_ªg, 
imm
 & 0xff, 
	`ROTATE_SCALE
(
sˇÀ
)) );

358 
imm
>>=8;

359 
sˇÀ
+=8;

362 
	`gí_mov_dw‹d_to_ªg_imm_èbÀ
(
de°_ªg
,
imm
);

364 #ifde‡
DEBUG_CPU


365 
immedüãs
++;

366 
immsize
+=((()
¨mPå
)-
›å
);

368 
	}
}

371 
	$gí_mov_w‹d_to_ªg_hñ≥r
(
Ho°Reg
 
de°_ªg
,* 
d©a
,
boﬁ
 
dw‹d
,Ho°Reg 
d©a_ªg
) {

372 #ifde‡
DEBUG_CPU


373 
›å
=()
¨mPå
;

376 i‡(
dw‹d
) {

377 i‡((
Bô32u
)
d©a
 & 3) {

378 i‡–((
Bô32u
)
d©a
 & 3) == 2 ) {

379 
	`wrôe32
–
	`LDRH_IMM
(
de°_ªg
, 
d©a_ªg
, 0) );

380 
	`wrôe32
–
	`LDRH_IMM
(
ãmp2
, 
d©a_ªg
, 2) );

381 
	`wrôe32
–
	`ORR_REG_LSL_IMM
(
de°_ªg
, de°_ªg, 
ãmp2
, 16) );

383 
	`wrôe32
–
	`LDRB_IMM
(
de°_ªg
, 
d©a_ªg
, 0) );

384 
	`wrôe32
–
	`LDRH_IMM
(
ãmp2
, 
d©a_ªg
, 1) );

385 
	`wrôe32
–
	`ORR_REG_LSL_IMM
(
de°_ªg
, de°_ªg, 
ãmp2
, 8) );

386 
	`wrôe32
–
	`LDRB_IMM
(
ãmp2
, 
d©a_ªg
, 3) );

387 
	`wrôe32
–
	`ORR_REG_LSL_IMM
(
de°_ªg
, de°_ªg, 
ãmp2
, 24) );

390 
	`wrôe32
–
	`LDR_IMM
(
de°_ªg
, 
d©a_ªg
, 0) );

393 i‡((
Bô32u
)
d©a
 & 1) {

394 
	`wrôe32
–
	`LDRB_IMM
(
de°_ªg
, 
d©a_ªg
, 0) );

395 
	`wrôe32
–
	`LDRB_IMM
(
ãmp2
, 
d©a_ªg
, 1) );

396 
	`wrôe32
–
	`ORR_REG_LSL_IMM
(
de°_ªg
, de°_ªg, 
ãmp2
, 8) );

398 
	`wrôe32
–
	`LDRH_IMM
(
de°_ªg
, 
d©a_ªg
, 0) );

401 #ifde‡
DEBUG_CPU


402 
immsize
+=((()
¨mPå
)-
›å
);

404 
	}
}

408 
	$gí_mov_w‹d_to_ªg
(
Ho°Reg
 
de°_ªg
,* 
d©a
,
boﬁ
 
dw‹d
) {

409 i‡(!
ªc_pha£
) ;

410 
	`gí_mov_dw‹d_to_ªg_imm
(
ãmp1
, (
Bô32u
)
d©a
);

411 
	`gí_mov_w‹d_to_ªg_hñ≥r
(
de°_ªg
, 
d©a
, 
dw‹d
, 
ãmp1
);

412 
	}
}

416 
INLINE
 
	$gí_mov_w‹d_to_ªg_imm
(
Ho°Reg
 
de°_ªg
,
Bô16u
 
imm
) {

417 i‡(!
ªc_pha£
) ;

418 
	`gí_mov_dw‹d_to_ªg_imm
(
de°_ªg
, (
Bô32u
)
imm
);

419 
	}
}

422 
	$gí_mov_w‹d_‰om_ªg_hñ≥r
(
Ho°Reg
 
§c_ªg
,* 
de°
,
boﬁ
 
dw‹d
, Ho°Reg 
d©a_ªg
) {

423 #ifde‡
DEBUG_CPU


424 
›å
=()
¨mPå
;

427 i‡(
dw‹d
) {

428 i‡((
Bô32u
)
de°
 & 3) {

429 i‡–((
Bô32u
)
de°
 & 3) == 2 ) {

430 
	`wrôe32
–
	`STRH_IMM
(
§c_ªg
, 
d©a_ªg
, 0) );

431 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
ãmp2
, 
§c_ªg
, 16) );

432 
	`wrôe32
–
	`STRH_IMM
(
ãmp2
, 
d©a_ªg
, 2) );

434 
	`wrôe32
–
	`STRB_IMM
(
§c_ªg
, 
d©a_ªg
, 0) );

435 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
ãmp2
, 
§c_ªg
, 8) );

436 
	`wrôe32
–
	`STRH_IMM
(
ãmp2
, 
d©a_ªg
, 1) );

437 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
ãmp2
,Åemp2, 16) );

438 
	`wrôe32
–
	`STRB_IMM
(
ãmp2
, 
d©a_ªg
, 3) );

441 
	`wrôe32
–
	`STR_IMM
(
§c_ªg
, 
d©a_ªg
, 0) );

444 i‡((
Bô32u
)
de°
 & 1) {

445 
	`wrôe32
–
	`STRB_IMM
(
§c_ªg
, 
d©a_ªg
, 0) );

446 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
ãmp2
, 
§c_ªg
, 8) );

447 
	`wrôe32
–
	`STRB_IMM
(
ãmp2
, 
d©a_ªg
, 1) );

449 
	`wrôe32
–
	`STRH_IMM
(
§c_ªg
, 
d©a_ªg
, 0) );

452 #ifde‡
DEBUG_CPU


453 
immsize
+=((()
¨mPå
)-
›å
);

455 
	}
}

458 
	$gí_mov_w‹d_‰om_ªg
(
Ho°Reg
 
§c_ªg
,* 
de°
,
boﬁ
 
dw‹d
) {

459 i‡(!
ªc_pha£
) ;

460 
	`gí_mov_dw‹d_to_ªg_imm
(
ãmp1
, (
Bô32u
)
de°
);

461 
	`gí_mov_w‹d_‰om_ªg_hñ≥r
(
§c_ªg
, 
de°
, 
dw‹d
, 
ãmp1
);

462 
	}
}

468 
	$gí_mov_byã_to_ªg_low
(
Ho°Reg
 
de°_ªg
,* 
d©a
) {

469 i‡(!
ªc_pha£
) ;

470 
	`gí_mov_dw‹d_to_ªg_imm
(
ãmp1
, (
Bô32u
)
d©a
);

471 
	`wrôe32
–
	`LDRB_IMM
(
de°_ªg
, 
ãmp1
, 0) );

472 
	}
}

478 
INLINE
 
	$gí_mov_byã_to_ªg_low_ˇnu£w‹d
(
Ho°Reg
 
de°_ªg
,* 
d©a
) {

479 i‡(!
ªc_pha£
) ;

480 
	`gí_mov_byã_to_ªg_low
(
de°_ªg
, 
d©a
);

481 
	}
}

487 
	$gí_mov_byã_to_ªg_low_imm
(
Ho°Reg
 
de°_ªg
,
Bô8u
 
imm
) {

488 i‡(!
ªc_pha£
) ;

489 
	`wrôe32
–
	`MOV_IMM
(
de°_ªg
, 
imm
, 0) );

490 
	}
}

496 
INLINE
 
	$gí_mov_byã_to_ªg_low_imm_ˇnu£w‹d
(
Ho°Reg
 
de°_ªg
,
Bô8u
 
imm
) {

497 i‡(!
ªc_pha£
) ;

498 
	`gí_mov_byã_to_ªg_low_imm
(
de°_ªg
, 
imm
);

499 
	}
}

502 
	$gí_mov_byã_‰om_ªg_low
(
Ho°Reg
 
§c_ªg
,* 
de°
) {

503 i‡(!
ªc_pha£
) ;

504 
	`gí_mov_dw‹d_to_ªg_imm
(
ãmp1
, (
Bô32u
)
de°
);

505 
	`wrôe32
–
	`STRB_IMM
(
§c_ªg
, 
ãmp1
, 0) );

506 
	}
}

510 
	$gí_exãnd_byã
(
boﬁ
 
sign
,
Ho°Reg
 
ªg
) {

511 i‡(!
ªc_pha£
) ;

512 i‡(
sign
) {

513 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
ªg
,Ñeg, 24) );

514 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
ªg
,Ñeg, 24) );

516 
	`wrôe32
–
	`AND_IMM
(
ªg
,Ñeg, 0xff, 0) );

518 
	}
}

522 
	$gí_exãnd_w‹d
(
boﬁ
 
sign
,
Ho°Reg
 
ªg
) {

523 i‡(!
ªc_pha£
) ;

524 i‡(
sign
) {

525 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
ªg
,Ñeg, 16) );

526 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
ªg
,Ñeg, 16) );

528 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
ªg
,Ñeg, 16) );

529 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
ªg
,Ñeg, 16) );

531 
	}
}

535 
	$gí_add_imm_èbÀ
(
Ho°Reg
 
ªg_de°
,Ho°Reg 
ªg_§c
,
Bô32u
 
imm
) {

536 
immPå
[
immCou¡
]=()
¨mPå
;

537 
immD©a
[
immCou¡
++]=
imm
;

538 
	`wrôe32
(
	`LDR_IMM
((
ãmp1
), 
HOST_pc
, 0));

539 
	`wrôe32
(
	`ADD_REG_LSL_IMM
((
ªg_de°
),(
ªg_§c
),(
ãmp1
),0));

540 
	}
}

543 
	$gí_add_imm
(
Ho°Reg
 
ªg_de°
,Ho°Reg 
ªg_§c
,
Bô32u
 
imm
) {

544 i‡(!
ªc_pha£
) ;

545 if(!
imm
) {

546 i‡(
ªg_de°
!=
ªg_§c
)

547 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
ªg_de°
, 
ªg_§c
, 0) );

550 #ifde‡
DEBUG_CPU


551 
›å
=()
¨mPå
;

552 
	`dbgf
("\t\t\tgí_add_imm‘%i,r%i,%p)\n",
ªg_de°
,
ªg_§c
,
imm
);

554 i‡(
imm
 == 0xffffffff) {

555 
	`wrôe32
–
	`SUB_IMM
(
ªg_de°
, 
ªg_§c
, 1, 0) );

557 i‡(
imm
<0x100) {

558 
	`wrôe32
(
	`ADD_IMM
(
ªg_de°
, 
ªg_§c
, 
imm
, 0));

561 i‡(
	`gëImmOpcodes
(
imm
)<=
MAX_IMM_OPCODES
) {

562 
Bôs
 
sˇÀ
 = 0;

563 
fú°
 = 1;

564 
imm
) {

565 (
imm
 & 3) == 0) {

566 
imm
>>=2;

567 
sˇÀ
+=2;

569 i‡(
fú°
) {

570 
	`wrôe32
–
	`ADD_IMM
(
ªg_de°
, 
ªg_§c
, 
imm
 & 0xff, 
	`ROTATE_SCALE
(
sˇÀ
)) );

571 
fú°
=0;

573 
	`wrôe32
–
	`ADD_IMM
(
ªg_de°
,Ñeg_de°, 
imm
 & 0xff, 
	`ROTATE_SCALE
(
sˇÀ
)) );

574 
imm
>>=8;

575 
sˇÀ
+=8;

578 
	`gí_add_imm_èbÀ
(
ªg_de°
,
ªg_§c
,
imm
);

581 #ifde‡
DEBUG_CPU


582 
immedüãs
++;

583 
immsize
+=((()
¨mPå
)-
›å
);

585 
	}
}

589 
	$gí_sub_imm_èbÀ
(
Ho°Reg
 
ªg_de°
,Ho°Reg 
ªg_§c
,
Bô32u
 
imm
) {

590 
immPå
[
immCou¡
]=()
¨mPå
;

591 
immD©a
[
immCou¡
++]=
imm
;

592 
	`wrôe32
(
	`LDR_IMM
((
ãmp1
), 
HOST_pc
, 0));

593 
	`wrôe32
(
	`SUB_REG_LSL_IMM
((
ªg_de°
),(
ªg_§c
),(
ãmp1
),0));

594 
	}
}

597 
	$gí_sub_imm
(
Ho°Reg
 
ªg_de°
,Ho°Reg 
ªg_§c
,
Bô32u
 
imm
) {

598 i‡(!
ªc_pha£
) ;

599 if(!
imm
) {

600 i‡(
ªg_de°
!=
ªg_§c
)

601 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
ªg_de°
, 
ªg_§c
, 0) );

604 #ifde‡
DEBUG_CPU


605 
›å
=()
¨mPå
;

606 
	`dbgf
("\t\t\tgí_sub_imm‘%i,r%i,%p)\n",
ªg_de°
,
ªg_§c
,
imm
);

608 i‡(
imm
 == 0xffffffff) {

609 
	`wrôe32
–
	`ADD_IMM
(
ªg_de°
, 
ªg_§c
, 1, 0) );

611 i‡(
imm
<0x100) {

612 
	`wrôe32
(
	`SUB_IMM
(
ªg_de°
, 
ªg_§c
, 
imm
, 0));

615 i‡(
	`gëImmOpcodes
(
imm
)<=
MAX_IMM_OPCODES
) {

616 
Bôs
 
sˇÀ
 = 0;

617 
fú°
 = 1;

618 
imm
) {

619 (
imm
 & 3) == 0) {

620 
imm
>>=2;

621 
sˇÀ
+=2;

623 i‡(
fú°
) {

624 
	`wrôe32
–
	`SUB_IMM
(
ªg_de°
, 
ªg_§c
, 
imm
 & 0xff, 
	`ROTATE_SCALE
(
sˇÀ
)) );

625 
fú°
=0;

627 
	`wrôe32
–
	`SUB_IMM
(
ªg_de°
,Ñeg_de°, 
imm
 & 0xff, 
	`ROTATE_SCALE
(
sˇÀ
)) );

628 
imm
>>=8;

629 
sˇÀ
+=8;

632 
	`gí_sub_imm_èbÀ
(
ªg_de°
,
ªg_§c
,
imm
);

635 #ifde‡
DEBUG_CPU


636 
immedüãs
++;

637 
immsize
+=((()
¨mPå
)-
›å
);

639 
	}
}

643 
	$gëImmOpcodesAnd
(
Bô32u
 
imm
) {

644 
ªt
=0;

645 
Bô32u
 
imm2
 = ~
imm
;

646 
Bôs
 
sˇÀ
 = 0;

647 
imm2
) {

648 (
imm2
 & 3) == 0) {

649 
imm2
>>=2;

650 
sˇÀ
+=2;

652 
ªt
++;

653 
imm2
>>=8;

654 
sˇÀ
+=8;

656  
ªt
;

657 
	}
}

660 
	$gí_™d_imm_èbÀ
(
Ho°Reg
 
ªg
,
Bô32u
 
imm
) {

661 
immPå
[
immCou¡
]=()
¨mPå
;

662 
immD©a
[
immCou¡
++]=
imm
;

663 
	`wrôe32
(
	`LDR_IMM
((
ãmp1
), 
HOST_pc
, 0));

664 
	`wrôe32
(
	`AND_REG_LSL_IMM
((
ªg
),‘eg),(
ãmp1
),0));

665 
	}
}

668 
	$gí_™d_imm
(
Ho°Reg
 
ªg
,
Bô32u
 
imm
) {

669 i‡(!
ªc_pha£
) ;

670 
Bô32u
 
imm2
 = ~
imm
;

671 if(!
imm2
) ;

672 #ifde‡
DEBUG_CPU


673 
›å
=()
¨mPå
;

674 
	`dbgf
("\t\t\tgí_™d_imm‘%i,%p)\n",
ªg
,
imm
);

676 i‡(!
imm
) {

677 
	`wrôe32
–
	`MOV_IMM
(
ªg
, 0, 0) );

679 i‡(
imm
<0x100) {

680 
	`wrôe32
(
	`AND_IMM
(
ªg
,Ñeg, 
imm
, 0));

683 i‡(
	`gëImmOpcodesAnd
(
imm
)<=
MAX_IMM_OPCODES
) {

684 
Bôs
 
sˇÀ
 = 0;

685 
imm2
) {

686 (
imm2
 & 3) == 0) {

687 
imm2
>>=2;

688 
sˇÀ
+=2;

690 
	`wrôe32
–
	`BIC_IMM
(
ªg
,Ñeg, 
imm2
 & 0xff, 
	`ROTATE_SCALE
(
sˇÀ
)) );

691 
imm2
>>=8;

692 
sˇÀ
+=8;

695 
	`gí_™d_imm_èbÀ
(
ªg
,
imm
);

698 #ifde‡
DEBUG_CPU


699 
immedüãs
++;

700 
immsize
+=((()
¨mPå
)-
›å
);

702 
	}
}

705 
	$gí_mov_dúe˘_dw‹d
(* 
de°
,
Bô32u
 
imm
) {

706 i‡(!
ªc_pha£
) ;

707 
	`gí_mov_dw‹d_to_ªg_imm
(
ãmp2
, 
imm
);

708 
	`gí_mov_w‹d_‰om_ªg
(
ãmp2
, 
de°
, 1);

709 
	}
}

727 
Bô32u
 
	$gí_¸óã_bønch_⁄_n⁄zîo
(
Ho°Reg
 
ªg
,
boﬁ
 
dw‹d
) {

728 i‡(
dw‹d
) {

729 
	`wrôe32
–
	`CMP_IMM
(
ªg
, 0, 0) );

731 
	`wrôe32
–
	`MOVS_REG_LSL_IMM
(
ãmp1
, 
ªg
, 16) );

733 
	`wrôe32
–
	`BNE_FWD
(0) );

734  ((
Bô32u
)
¨mPå
-4);

735 
	}
}

737 
Bô32u
 
	$gí_¸óã_bønch_⁄_zîo
(
Ho°Reg
 
ªg
,
boﬁ
 
dw‹d
) {

738 i‡(
dw‹d
) {

739 
	`wrôe32
–
	`CMP_IMM
(
ªg
, 0, 0) );

741 
	`wrôe32
–
	`MOVS_REG_LSL_IMM
(
ãmp1
, 
ªg
, 16) );

743 
	`wrôe32
–
	`BEQ_FWD
(0) );

744  ((
Bô32u
)
¨mPå
-4);

745 
	}
}

748 
Bô32u
 
	$gí_¸óã_bønch_⁄_…z
(
Ho°Reg
 
ªg
,
boﬁ
 
dw‹d
) {

749 i‡(
dw‹d
) {

750 
	`wrôe32
–
	`CMP_IMM
(
ªg
, 0, 0) );

752 
	`wrôe32
–
	`MOVS_REG_LSL_IMM
(
ãmp1
, 
ªg
, 16) );

754 
	`wrôe32
–
	`BLT_FWD
(0) );

755  ((
Bô32u
)
¨mPå
-4);

756 
	}
}

758 
Bô32u
 
	$gí_¸óã_bønch_⁄_gtz
(
Ho°Reg
 
ªg
,
boﬁ
 
dw‹d
) {

759 i‡(
dw‹d
) {

760 
	`wrôe32
–
	`CMP_IMM
(
ªg
, 0, 0) );

762 
	`wrôe32
–
	`MOVS_REG_LSL_IMM
(
ãmp1
, 
ªg
, 16) );

764 
	`wrôe32
–
	`BGT_FWD
(0) );

765  ((
Bô32u
)
¨mPå
-4);

766 
	}
}

768 
Bô32u
 
	$gí_¸óã_bønch_⁄_Àtz
(
Ho°Reg
 
ªg
,
boﬁ
 
dw‹d
) {

769 i‡(
dw‹d
) {

770 
	`wrôe32
–
	`CMP_IMM
(
ªg
, 0, 0) );

772 
	`wrôe32
–
	`MOVS_REG_LSL_IMM
(
ãmp1
, 
ªg
, 16) );

774 
	`wrôe32
–
	`BLE_FWD
(0) );

775  ((
Bô32u
)
¨mPå
-4);

776 
	}
}

778 
Bô32u
 
	$gí_¸óã_bønch_⁄_gëz
(
Ho°Reg
 
ªg
,
boﬁ
 
dw‹d
) {

779 i‡(
dw‹d
) {

780 
	`wrôe32
–
	`CMP_IMM
(
ªg
, 0, 0) );

782 
	`wrôe32
–
	`MOVS_REG_LSL_IMM
(
ãmp1
, 
ªg
, 16) );

784 
	`wrôe32
–
	`BGE_FWD
(0) );

785  ((
Bô32u
)
¨mPå
-4);

786 
	}
}

789 
INLINE
 
	$gí_fûl_bønch
(
DRC_PTR_SIZE_IM
 
d©a
) {

790 i‡(!
ªc_pha£
) ;

792 (
u32
)
¨mPå
 < (
d©a
+8))

793 
	`wrôe32
(
NOP
);

794 *(
Bô32u
*)
d©a
=–(*(Bô32u*)d©aË& 0xff000000 ) | ( ( ((Bô32u)
¨mPå
 - (data+8)) >> 2 ) & 0x00ffffff );

795 
	}
}

797 
INLINE
 
	$gí_Æign4
() {

798 #ifde‡
REC_USE_ALIGN


799 i‡(!
ªc_pha£
) ;

800 ((
u32
)
¨mPå
)&0x1f)

801 
	`wrôe32
(
NOP
);

803 
	}
}

	@src/recompiler/arm_old/arm.h

21 #i‚de‡
__ARMREC_H__


22 
	#__ARMREC_H__


	)

25 
	~"../psxcomm⁄.h
"

26 
	~"../r3000a.h
"

27 
	~"../psxhÀ.h
"

29 #ifde‡
__˝lu•lus


32 
sys_ˇcheÊush
(*
°¨t_addr
, *
íd_addr
);

33 #ifde‡
__˝lu•lus


37 #ifde‡
__˝lu•lus


40 
ªcRun
(
±r
, 
ªgs
);

41 #ifde‡
__˝lu•lus


45 
u32
 *
	g¨mPå
;

46 
u32
 *
	gj8På
[32];

47 
u32
 *
	gj32På
[32];

49 
	#wrôe32
(
vÆ
Ë*
¨mPå
++ = (vÆ);

	)

51 
	tRól64
;

52 
	tBô8u
;

53 sig√d 
	tBô8s
;

54 
	tBô16u
;

55 sig√d 
	tBô16s
;

56 
	tBô32u
;

57 sig√d 
	tBô32s
;

58 
uöt64_t
 
	tBô64u
;

59 
öt64_t
 
	tBô64s
;

60 
	tBôu
;

61 sig√d 
	tBôs
;

62 
	~"risc_¨mv4À.h
"

64 
	#CALLFunc
(
addr
Ë{ 
u32
 
off£t
=((((u32)◊ddrË- ((u32)(
¨mPå
Ë+ (8))Ë>> 2Ë& 0xFFFFFF); 
	`wrôe32
(
	`BL_FWD
(off£t)); }

	)

65 
	#MOV32RtoR
(
d°
,
§c
Ë
	`gí_mov_ªgs
(d°,§c)

	)

66 
	#MOV32MtoR
(
ªg
,
mem
Ë
	`gí_mov_w‹d_to_ªg
‘eg,(*)mem,
åue
)

	)

67 
	#MOV32ItoR
(
ªg
,
imm
Ë
	`gí_mov_dw‹d_to_ªg_imm
‘eg,imm)

	)

68 
	#MOV32RtoM
(
mem
,
ªg
Ë
	`gí_mov_w‹d_‰om_ªg
‘eg,(*)mem,
åue
)

	)

69 
	#MOV32ItoM
(
addr
,
vÆue
Ë
	`gí_mov_dúe˘_dw‹d
((*Ôddr,vÆue)

	)

70 
	#ADD32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`ADD_REG_LSL_IMM
‘es,›1,›2,0))

	)

71 
	#ADD32ItoR
(
ªg
,
vÆue
Ë
	`gí_add_imm
‘eg,vÆue)

	)

72 
	#ADD32ItoM
(
addr
,
vÆue
Ë
	`gí_add_dúe˘_w‹d
((*Ôddr,vÆue,
åue
)

	)

73 
	#SUB32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`SUB_REG_LSL_IMM
‘es,›1,›2,0))

	)

74 
	#AND32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`AND_REG_LSL_IMM
‘es,›1,›2,0))

	)

75 
	#AND32ItoR
(
ªg
,
imm
Ë
	`gí_™d_imm
‘eg,imm)

	)

76 
	#OR32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`ORR_REG_LSL_IMM
‘es,›1,›2,0))

	)

77 
	#XOR32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`EOR_REG_LSL_IMM
‘es,›1,›2,0))

	)

78 
	#SHR32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`MOV_REG_LSR_REG
‘es,›1,›2))

	)

79 
	#SHL32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`MOV_REG_LSL_REG
‘es,›1,›2))

	)

80 
	#SAR32
(
ªs
,
›1
,
›2
Ë
	`wrôe32
(
	`MOV_REG_ASR_REG
‘es,›1,›2))

	)

81 
	#SHRI32
(
ªs
,
›
,
imm
Ë
	`wrôe32
(
	`MOV_REG_LSR_IMM
‘es,›,imm))

	)

82 
	#SHLI32
(
ªs
,
›
,
imm
Ë
	`wrôe32
(
	`MOV_REG_LSL_IMM
‘es,›,imm))

	)

83 
	#SARI32
(
ªs
,
›
,
imm
Ë
	`wrôe32
(
	`MOV_REG_ASR_IMM
‘es,›,imm))

	)

85 
	#MOVSX32M8toR
(
ªg
,
mem
Ë
	`gí_mov_byã_to_ªg_low_ˇnu£w‹d
‘eg,(*)mem);
	`gí_exãnd_byã
(
åue
,ªg)

	)

86 
	#MOVSX32R8toR
(
ªg
Ë
	`gí_exãnd_byã
(
åue
,ªg)

	)

87 
	#MOVZX32M8toR
(
ªg
,
mem
Ë
	`gí_mov_byã_to_ªg_low_ˇnu£w‹d
‘eg,(*)mem);
	`gí_exãnd_byã
(
Ál£
,ªg)

	)

88 
	#MOVZX32R8toR
(
ªg
Ë
	`gí_exãnd_byã
(
Ál£
,ªg)

	)

89 
	#MOVSX32M16toR
(
ªg
,
mem
Ë
	`gí_mov_w‹d_to_ªg
‘eg,(*)mem,
Ál£
);
	`gí_exãnd_w‹d
(
åue
,ªg)

	)

90 
	#MOVSX32R16toR
(
ªg
Ë
	`gí_exãnd_w‹d
(
åue
,ªg)

	)

91 
	#MOVZX32M16toR
(
ªg
,
mem
Ë
	`gí_mov_w‹d_to_ªg
‘eg,(*)mem,
Ál£
);
	`gí_exãnd_w‹d
(Ál£,ªg)

	)

92 
	#MOVZX32R16toR
(
ªg
Ë
	`gí_exãnd_w‹d
(
Ál£
,ªg)

	)

93 
	#MOV8ItoM
(
mem
,
imm
Ë
	`gí_mov_byã_to_ªg_low_imm_ˇnu£w‹d
(
HOST_a1
,imm);
	`gí_mov_byã_‰om_ªg_low
(HOST_a1,(*)mem)

	)

94 
	#MOV8MtoR
(
ªg
,
mem
Ë
	`gí_mov_byã_to_ªg_low_ˇnu£w‹d
‘eg,(*)mem)

	)

95 
	#MOV8RtoM
(
mem
,
ªg
Ë
	`gí_mov_byã_‰om_ªg_low
‘eg,(*)mem)

	)

96 
	#MOV16ItoM
(
mem
,
imm
Ë
	`gí_mov_w‹d_to_ªg_imm
(
HOST_a1
,imm);
	`gí_mov_w‹d_‰om_ªg
(HOST_a1,(*)mem,
Ál£
)

	)

97 
	#MOV16MtoR
(
ªg
,
mem
Ë
	`gí_mov_w‹d_to_ªg
‘eg,(*)mem,
Ál£
)

	)

98 
	#MOV16RtoM
(
mem
,
ªg
Ë
	`gí_mov_w‹d_‰om_ªg
‘eg,(*)mem,
Ál£
)

	)

100 
	#¨mSëJ8
(
addr
Ë
	`gí_fûl_bønch
((
Bô32u
Ôddr)

	)

101 
	#JEZ8
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_zîo
‘eg,
åue
)

	)

102 
	#JNZ8
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_n⁄zîo
‘eg,
åue
)

	)

103 
	#¨mSëJ32
(
addr
Ë
	`gí_fûl_bønch
((
Bô32u
Ôddr)

	)

104 
	#JEZ32
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_zîo
‘eg,
åue
)

	)

105 
	#JNZ32
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_n⁄zîo
‘eg,
åue
)

	)

106 
	#JLTZ32
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_…z
‘eg,
åue
)

	)

107 
	#JGTZ32
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_gtz
‘eg,
åue
)

	)

108 
	#JLEZ32
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_Àtz
‘eg,
åue
)

	)

109 
	#JGEZ32
(
ªg
Ë(
u32
*)
	`gí_¸óã_bønch_⁄_gëz
‘eg,
åue
)

	)

111 
	#MOV32MtoR_ªgs
(
ªg
,
mem
Ë
	`wrôe32
–
	`LDR_IMM
(‘eg), 11, (((
u32
)(mem))-((u32)&
psxRegs
))Ë)

	)

112 
	#MOV32RtoM_ªgs
(
mem
,
ªg
Ë
	`wrôe32
–
	`STR_IMM
(‘eg), 11, (((
u32
)(mem))-((u32)&
psxRegs
))Ë)

	)

113 
	#MOV32ItoM_ªgs
(
mem
,
vÆue
Ë
	`MOV32ItoR
(
HOST_ù
,vÆue);
	`MOV32RtoM_ªgs
(mem,HOST_ù)

	)

115 
INLINE
 
ADD8ItoM_ªgs
(
u32
 
de°
,
Bô8s
 
imm
) {

116 if(!
	gimm
) ;

117 
MOV32MtoR_ªgs
(
ãmp3
,
de°
);

118 i‡(
	gimm
 >= 0) {

119 
wrôe32
–
ADD_IMM
(
ãmp3
,Åemp3, (
Bô32s
)
imm
, 0) );

121 
wrôe32
–
SUB_IMM
(
ãmp3
,Åemp3, -((
Bô32s
)
imm
), 0) );

123 
MOV32RtoM_ªgs
(
de°
,
ãmp3
);

126 
INLINE
 
ADD32ItoM_ªgs
(
u32
 
de°
,
Bô32u
 
imm
) {

127 if(!
	gimm
) ;

128 i‡–(
	gimm
<128) || (imm>=0xffffff80) ) {

129 
ADD8ItoM_ªgs
(
de°
,(
Bô8s
)
imm
);

132 
MOV32MtoR_ªgs
(
ãmp3
,
de°
);

133 
gí_mov_dw‹d_to_ªg_imm
(
ãmp2
, 
imm
);

134 
wrôe32
–
ADD_REG_LSL_IMM
(
ãmp3
,Åemp3, 
ãmp2
, 0) );

135 
MOV32RtoM_ªgs
(
de°
,
ãmp3
);

138 
	#GET_PTR
() \

140 
	`wrôe32
(0xe1a0c821); \

141 
	`wrôe32
(0xe790210c); \

142 
	`wrôe32
(0xe1a00801); \

143 
	`wrôe32
(0xe1a01820); \

144 
	`wrôe32
(0xe0923001); \

145 
	`wrôe32
(0xe1a00003); \

146 
	`wrôe32
(0x17920001); \

147 }

	)

149 
	#RET_NC
() \

151 
	`wrôe32
(0xe8bd0ff0); \

152 
	`wrôe32
(0xe8bd8000); \

153 }

	)

155 
	#RET
() \

157 i‡(
block
) \

159 
	`RET_NC
(); \

163 
	`MOV32ItoR
(
HOST_a1
,(
Bô32u
)
psxRecLUT
); \

164 
	`MOV32MtoR
(
HOST_a2
,&
psxRegs
.
pc
); \

165 
	`GET_PTR
(); \

166 
j8På
[4]=
	`JNZ8
(
HOST_a1
); \

167 
	`RET_NC
(); \

168 
	`¨mSëJ8
(
j8På
[4]); \

169 
	`MOV32RtoR
(
HOST_pc
,
HOST_a1
); \

171 }

	)

	@src/recompiler/arm_old/opcodes.h

21 
	#REC_FUNC
(
f
) \

22 
psx
##
	`f
(); \

23 
ªc
##
	`f
() { \

24 
	`iFlushRegs
(); \

25 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
, (u32)psxRegs.code); \

26 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
, (u32)pc); \

27 
	`CALLFunc
((
u32
)
psx
##
f
); \

29 }

	)

31 
	#REC_SYS
(
f
) \

32 
psx
##
	`f
(); \

33 
ªc
##
	`f
() { \

34 
	`iFlushRegs
(); \

35 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
, (u32)psxRegs.code); \

36 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
, (u32)pc); \

37 
	`CALLFunc
((
u32
)
psx
##
f
); \

38 
bønch
 = 2; \

39 
	`iRë
(); \

40 }

	)

42 
	#REC_BRANCH
(
f
) \

43 
psx
##
	`f
(); \

44 
ªc
##
	`f
() { \

45 
	`iFlushRegs
(); \

46 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
, (u32)psxRegs.code); \

47 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
, (u32)pc); \

48 
	`CALLFunc
((
u32
)
psx
##
f
); \

49 
bønch
 = 2; \

50 
	`iRë
(); \

51 }

	)

53 
	$ªcNULL
(Ë{ 
	}
}

54 
	$ªcSPECIAL
(Ë{ 
ªcSPC
[
_Fun˘_
](); 
	}
}

55 
	$ªcREGIMM
(Ë{ 
ªcREG
[
_Rt_
](); 
	}
}

56 
	$ªcCOP0
(Ë{ 
ªcCP0
[
_Rs_
](); 
	}
}

57 
	$ªcCOP2
(Ë{ 
ªcCP2
[
_Fun˘_
](); 
	}
}

58 
	$ªcBASIC
(Ë{ 
ªcCP2BSC
[
_Rs_
](); 
	}
}

60 
	~"ªc_Æu.h
"

61 
	~"ªc_mem.h
"

62 
	~"ªc_bønch.h
"

63 
	~"ªc_gã.h
"

64 
	~"ªc_misc.h
"

66 (*
	gªcBSC
[64])() = {

67 
ªcSPECIAL
, 
ªcREGIMM
, 
ªcJ
 , 
ªcJAL
 , 
ªcBEQ
 , 
ªcBNE
 , 
ªcBLEZ
, 
ªcBGTZ
,

68 
ªcADDI
 , 
ªcADDIU
 , 
ªcSLTI
, 
ªcSLTIU
, 
ªcANDI
, 
ªcORI
 , 
ªcXORI
, 
ªcLUI
 ,

69 
ªcCOP0
 , 
ªcNULL
 , 
ªcCOP2
,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

70 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

71 
ªcLB
 , 
ªcLH
 , 
ªcLWL
 , 
ªcLW
 , 
ªcLBU
 , 
ªcLHU
 , 
ªcLWR
 , 
ªcNULL
,

72 
ªcSB
 , 
ªcSH
 , 
ªcSWL
 , 
ªcSW
 , 
ªcNULL
,ÑecNULL, 
ªcSWR
 ,ÑecNULL,

73 
ªcNULL
 ,ÑecNULL , 
ªcLWC2
,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

74 
ªcNULL
 ,ÑecNULL , 
ªcSWC2
, 
ªcHLE
 ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL

77 (*
	gªcSPC
[64])() = {

78 
ªcSLL
 , 
ªcNULL
, 
ªcSRL
 , 
ªcSRA
 , 
ªcSLLV
 ,ÑecNULL , 
ªcSRLV
, 
ªcSRAV
,

79 
ªcJR
 , 
ªcJALR
, 
ªcNULL
,ÑecNULL, 
ªcSYSCALL
, 
ªcBREAK
,ÑecNULL,ÑecNULL,

80 
ªcMFHI
, 
ªcMTHI
, 
ªcMFLO
, 
ªcMTLO
, 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,

81 
ªcMULT
, 
ªcMULTU
, 
ªcDIV
, 
ªcDIVU
, 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,

82 
ªcADD
 , 
ªcADDU
, 
ªcSUB
 , 
ªcSUBU
, 
ªcAND
 , 
ªcOR
 , 
ªcXOR
 , 
ªcNOR
 ,

83 
ªcNULL
,ÑecNULL, 
ªcSLT
 , 
ªcSLTU
,ÑecNULL ,ÑecNULL ,ÑecNULL,ÑecNULL,

84 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL ,ÑecNULL ,ÑecNULL,ÑecNULL,

85 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL ,ÑecNULL ,ÑecNULL,ÑecNULL

88 (*
	gªcREG
[32])() = {

89 
ªcBLTZ
 , 
ªcBGEZ
 , 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

90 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

91 
ªcBLTZAL
, 
ªcBGEZAL
, 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

92 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL

95 (*
	gªcCP0
[32])() = {

96 
ªcMFC0
, 
ªcNULL
, 
ªcCFC0
,ÑecNULL, 
ªcMTC0
,ÑecNULL, 
ªcCTC0
,ÑecNULL,

97 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

98 
ªcRFE
 , 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

99 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL

102 (*
	gªcCP2
[64])() = {

103 
ªcBASIC
, 
ªcRTPS
 , 
ªcNULL
 ,ÑecNULL,ÑecNULL,ÑecNULL , 
ªcNCLIP
,ÑecNULL,

104 
ªcNULL
 ,ÑecNULL ,ÑecNULL ,ÑecNULL, 
ªcOP
 ,ÑecNULL ,ÑecNULL ,ÑecNULL,

105 
ªcDPCS
 , 
ªcINTPL
, 
ªcMVMVA
, 
ªcNCDS
, 
ªcCDP
 , 
ªcNULL
 , 
ªcNCDT
 ,ÑecNULL,

106 
ªcNULL
 ,ÑecNULL ,ÑecNULL , 
ªcNCCS
, 
ªcCC
 ,ÑecNULL , 
ªcNCS
 ,ÑecNULL,

107 
ªcNCT
 , 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL ,ÑecNULL ,ÑecNULL,

108 
ªcSQR
 , 
ªcDCPL
 , 
ªcDPCT
 , 
ªcNULL
,ÑecNULL, 
ªcAVSZ3
, 
ªcAVSZ4
,ÑecNULL,

109 
ªcRTPT
 , 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL ,ÑecNULL ,ÑecNULL,

110 
ªcNULL
 ,ÑecNULL ,ÑecNULL ,ÑecNULL,ÑecNULL, 
ªcGPF
 , 
ªcGPL
 , 
ªcNCCT


113 (*
	gªcCP2BSC
[32])() = {

114 
ªcMFC2
, 
ªcNULL
, 
ªcCFC2
,ÑecNULL, 
ªcMTC2
,ÑecNULL, 
ªcCTC2
,ÑecNULL,

115 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

116 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

117 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL

	@src/recompiler/arm_old/rec_alu.h

22 
	$ªcADDIU
() {

24 i‡(
_Rt_
)

26 i‡(
_Rs_
 =
_Rt_
) {

27 i‡(
	`IsC⁄°
(
_Rt_
)) {

28 
iRegs
[
_Rt_
].
k
+
_Imm_
;

30 i‡(
_Imm_
) {

31 
u32
 
π
=
	`RódWrôeReg
(
_Rt_
);

32 
	`ADD32ItoR
(
π
, 
_Imm_
);

36 i‡(
	`IsC⁄°
(
_Rs_
)) {

37 
	`M≠C⁄°
(
_Rt_
, 
iRegs
[
_Rs_
].
k
 + 
_Imm_
);

39 
u32
 
rs
=
	`RódReg
(
_Rs_
);

40 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

41 
	`MOV32RtoR
(
π
,
rs
);

42 i‡(
_Imm_
) {

43 
	`ADD32ItoR
(
π
,
_Imm_
);

48 
	}
}

51 
	$ªcADDI
() {

53 
	`ªcADDIU
();

54 
	}
}

57 
	$ªcANDI
() {

59 i‡(
_Rt_
)

61 i‡(
_Rs_
 =
_Rt_
) {

62 i‡(
	`IsC⁄°
(
_Rt_
)) {

63 
iRegs
[
_Rt_
].
k
&
_ImmU_
;

65 
u32
 
π
=
	`RódWrôeReg
(
_Rt_
);

66 
	`AND32ItoR
(
π
, 
_ImmU_
);

69 i‡(
	`IsC⁄°
(
_Rs_
)) {

70 
	`M≠C⁄°
(
_Rt_
, 
iRegs
[
_Rs_
].
k
 & 
_ImmU_
);

72 
u32
 
rs
=
	`RódReg
(
_Rs_
);

73 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

74 
	`MOV32RtoR
(
π
,
rs
);

75 
	`AND32ItoR
(
π
,
_ImmU_
);

79 
	}
}

82 
	$ªcORI
() {

84 i‡(
_Rt_
)

86 i‡(
_Rs_
 =
_Rt_
) {

87 i‡(
	`IsC⁄°
(
_Rt_
)) {

88 
iRegs
[
_Rt_
].
k
|
_ImmU_
;

90 
u32
 
π
=
	`RódWrôeReg
(
_Rt_
);

91 
	`MOV32ItoR
(
HOST_a1
,
_ImmU_
);

92 
	`OR32
(
π
,π,
HOST_a1
);

95 i‡(
	`IsC⁄°
(
_Rs_
)) {

96 
	`M≠C⁄°
(
_Rt_
, 
iRegs
[
_Rs_
].
k
 | 
_ImmU_
);

98 
u32
 
rs
=
	`RódReg
(
_Rs_
);

99 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

100 
	`MOV32RtoR
(
π
,
rs
);

101 i‡(
_ImmU_
)

103 
	`MOV32ItoR
(
HOST_a1
,
_ImmU_
);

104 
	`OR32
(
π
,π,
HOST_a1
);

109 
	}
}

112 
	$ªcXORI
() {

114 i‡(
_Rt_
)

116 i‡(
_Rs_
 =
_Rt_
) {

117 i‡(
	`IsC⁄°
(
_Rt_
)) {

118 
iRegs
[
_Rt_
].
k
^
_ImmU_
;

120 
u32
 
π
=
	`RódWrôeReg
(
_Rt_
);

121 
	`MOV32ItoR
(
HOST_a1
,
_ImmU_
);

122 
	`XOR32
(
π
,π,
HOST_a1
);

125 i‡(
	`IsC⁄°
(
_Rs_
)) {

126 
	`M≠C⁄°
(
_Rt_
, 
iRegs
[
_Rs_
].
k
 ^ 
_ImmU_
);

128 
u32
 
rs
=
	`RódReg
(
_Rs_
);

129 
	`MOV32ItoR
(
HOST_a1
, 
_ImmU_
);

130 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

131 
	`XOR32
(
π
,
rs
,
HOST_a1
);

135 
	}
}

137 
	#SLT
(
d°
,
›1
,
›2
Ë
	`wrôe32
(
	`CMP_REGS
(›1,›2));wrôe32(
	`MOVGE_IMM
(d°, 0, 0));wrôe32(
	`MOVLT_IMM
(d°, 1, 0))

	)

138 
	#SLTU
(
d°
,
›1
,
›2
Ë
	`wrôe32
(
	`CMP_REGS
(›1,›2));wrôe32(
	`MOVCS_IMM
(d°, 0, 0));wrôe32(
	`MOVCC_IMM
(d°, 1, 0))

	)

141 
	$ªcSLTI
() {

143 i‡(
_Rt_
)

145 i‡(
	`IsC⁄°
(
_Rs_
)) {

146 
	`M≠C⁄°
(
_Rt_
, (
s32
)
iRegs
[
_Rs_
].
k
 < 
_Imm_
);

148 
u32
 
rs
=
	`RódReg
(
_Rs_
);

149 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

150 
	`MOV32ItoR
(
HOST_a2
, 
_Imm_
);

151 
	`SLT
(
π
,
rs
,
HOST_a2
);

154 
	}
}

157 
	$ªcSLTIU
() {

159 i‡(
_Rt_
)

161 i‡(
	`IsC⁄°
(
_Rs_
)) {

162 
	`M≠C⁄°
(
_Rt_
, 
iRegs
[
_Rs_
].
k
 < 
_ImmU_
);

164 
u32
 
rs
=
	`RódReg
(
_Rs_
);

165 
	`MOV32ItoR
(
HOST_a2
, 
_Imm_
);

166 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

167 
	`SLTU
(
π
,
rs
,
HOST_a2
);

170 
	}
}

173 
	$ªcLUI
() {

175 i‡(
_Rt_
Ë
	`M≠C⁄°
(_Rt_, 
psxRegs
.
code
 << 16);

176 
	}
}

179 
	$ªcADDU
() {

181 i‡(
_Rd_
)

183 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

184 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rs_
].
k
 + iRegs[
_Rt_
].k);

185 } i‡(
	`IsC⁄°
(
_Rs_
)) {

186 i‡(
_Rt_
 =
_Rd_
) {

187 i‡(
iRegs
[
_Rs_
].
k
) {

188 
u32
 
rd
=
	`RódWrôeReg
(
_Rd_
);

189 
	`ADD32ItoR
(
rd
, 
iRegs
[
_Rs_
].
k
);

192 
u32
 
π
=
	`RódReg
(
_Rt_
);

193 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

194 
	`MOV32RtoR
(
rd
,
π
);

195 i‡(
iRegs
[
_Rs_
].
k
) {

196 
	`ADD32ItoR
(
rd
, 
iRegs
[
_Rs_
].
k
);

199 } i‡(
	`IsC⁄°
(
_Rt_
)) {

200 i‡(
_Rs_
 =
_Rd_
) {

201 i‡(
iRegs
[
_Rt_
].
k
) {

202 
u32
 
rd
=
	`RódWrôeReg
(
_Rd_
);

203 
	`ADD32ItoR
(
rd
, 
iRegs
[
_Rt_
].
k
);

206 
u32
 
rs
=
	`RódReg
(
_Rs_
);

207 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

208 
	`MOV32RtoR
(
rd
,
rs
);

209 i‡(
iRegs
[
_Rt_
].
k
) {

210 
	`ADD32ItoR
(
rd
, 
iRegs
[
_Rt_
].
k
);

214 i‡(
_Rs_
 =
_Rd_
) {

215 
u32
 
π
=
	`RódReg
(
_Rt_
);

216 
u32
 
rd
=
	`RódWrôeReg
(
_Rd_
);

217 
	`ADD32
(
rd
,rd,
π
);

218 } i‡(
_Rt_
 =
_Rd_
) {

219 
u32
 
rs
=
	`RódReg
(
_Rs_
);

220 
u32
 
rd
=
	`RódWrôeReg
(
_Rd_
);

221 
	`ADD32
(
rd
,rd,
rs
);

223 
u32
 
rs
=
	`RódReg
(
_Rs_
);

224 
u32
 
π
=
	`RódReg
(
_Rt_
);

225 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

226 
	`ADD32
(
rd
,
rs
,
π
);

230 
	}
}

233 
	$ªcADD
() {

235 
	`ªcADDU
();

236 
	}
}

239 
	$ªcSUBU
() {

241 i‡(
_Rd_
)

243 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

244 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rs_
].
k
 - iRegs[
_Rt_
].k);

245 } i‡(
	`IsC⁄°
(
_Rs_
)) {

246 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
);

247 
u32
 
π
=
	`RódReg
(
_Rt_
);

248 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

249 
	`SUB32
(
rd
,
HOST_a1
,
π
);

250 } i‡(
	`IsC⁄°
(
_Rt_
)) {

251 
u32
 
rs
=
	`RódReg
(
_Rs_
);

252 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

253 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

254 
	`SUB32
(
rd
,
rs
,
HOST_a2
);

256 
u32
 
rs
=
	`RódReg
(
_Rs_
);

257 
u32
 
π
=
	`RódReg
(
_Rt_
);

258 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

259 
	`SUB32
(
rd
,
rs
,
π
);

262 
	}
}

265 
	$ªcSUB
() {

267 
	`ªcSUBU
();

268 
	}
}

271 
	$ªcAND
() {

273 i‡(
_Rd_
)

275 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

276 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rs_
].
k
 & iRegs[
_Rt_
].k);

277 } i‡(
	`IsC⁄°
(
_Rs_
)) {

278 i‡(
_Rd_
 =
_Rt_
) {

279 
u32
 
rd
=
	`RódWrôeReg
(
_Rd_
);

280 
	`AND32ItoR
(
rd
,
iRegs
[
_Rs_
].
k
);

282 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
);

283 
u32
 
π
=
	`RódReg
(
_Rt_
);

284 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

285 
	`AND32
(
rd
,
HOST_a1
,
π
);

287 } i‡(
	`IsC⁄°
(
_Rt_
)) {

288 i‡(
_Rd_
 =
_Rs_
) {

289 
u32
 
rd
=
	`RódWrôeReg
(
_Rd_
);

290 
	`AND32ItoR
(
rd
,
iRegs
[
_Rt_
].
k
);

292 
u32
 
rs
=
	`RódReg
(
_Rs_
);

293 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

294 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

295 
	`AND32
(
rd
,
rs
,
HOST_a2
);

298 
u32
 
rs
=
	`RódReg
(
_Rs_
);

299 
u32
 
π
=
	`RódReg
(
_Rt_
);

300 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

301 
	`AND32
(
rd
,
rs
,
π
);

304 
	}
}

307 
	$ªcOR
() {

309 i‡(
_Rd_
)

311 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

312 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rs_
].
k
 | iRegs[
_Rt_
].k);

313 } i‡(
	`IsC⁄°
(
_Rs_
)) {

314 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
);

315 
u32
 
π
=
	`RódReg
(
_Rt_
);

316 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

317 
	`OR32
(
rd
,
HOST_a1
,
π
);

318 } i‡(
	`IsC⁄°
(
_Rt_
)) {

319 
u32
 
rs
=
	`RódReg
(
_Rs_
);

320 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

321 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

322 
	`OR32
(
rd
,
rs
,
HOST_a2
);

324 
u32
 
rs
=
	`RódReg
(
_Rs_
);

325 
u32
 
π
=
	`RódReg
(
_Rt_
);

326 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

327 
	`OR32
(
rd
,
rs
,
π
);

330 
	}
}

333 
	$ªcXOR
() {

335 i‡(
_Rd_
)

337 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

338 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rs_
].
k
 ^ iRegs[
_Rt_
].k);

339 } i‡(
	`IsC⁄°
(
_Rs_
)) {

340 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
);

341 
u32
 
π
=
	`RódReg
(
_Rt_
);

342 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

343 
	`XOR32
(
rd
,
HOST_a1
,
π
);

344 } i‡(
	`IsC⁄°
(
_Rt_
)) {

345 
u32
 
rs
=
	`RódReg
(
_Rs_
);

346 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

347 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

348 
	`XOR32
(
rd
,
rs
,
HOST_a2
);

350 
u32
 
rs
=
	`RódReg
(
_Rs_
);

351 
u32
 
π
=
	`RódReg
(
_Rt_
);

352 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

353 
	`XOR32
(
rd
,
rs
,
π
);

356 
	}
}

359 
	$ªcNOR
() {

361 i‡(
_Rd_
)

363 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

364 
	`M≠C⁄°
(
_Rd_
, ~(
iRegs
[
_Rs_
].
k
 | iRegs[
_Rt_
].k));

365 } i‡(
	`IsC⁄°
(
_Rs_
)) {

366 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
);

367 
u32
 
π
=
	`RódReg
(
_Rt_
);

368 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

369 
	`OR32
(
rd
,
HOST_a1
,
π
);

370 
	`MOV32ItoR
(
HOST_a2
,0xffffffff);

371 
	`XOR32
(
rd
,rd,
HOST_a2
);

372 } i‡(
	`IsC⁄°
(
_Rt_
)) {

373 
u32
 
rs
=
	`RódReg
(
_Rs_
);

374 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

375 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

376 
	`OR32
(
rd
,
rs
,
HOST_a2
);

377 
	`MOV32ItoR
(
HOST_a2
,0xffffffff);

378 
	`XOR32
(
rd
,rd,
HOST_a2
);

380 
u32
 
rs
=
	`RódReg
(
_Rs_
);

381 
u32
 
π
=
	`RódReg
(
_Rt_
);

382 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

383 
	`OR32
(
rd
,
rs
,
π
);

384 
	`MOV32ItoR
(
HOST_a2
,0xffffffff);

385 
	`XOR32
(
rd
,rd,
HOST_a2
);

388 
	}
}

391 
	$ªcSLT
() {

393 i‡(
_Rd_
)

395 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

396 
	`M≠C⁄°
(
_Rd_
, (
s32
)
iRegs
[
_Rs_
].
k
 < (s32)iRegs[
_Rt_
].k);

397 } i‡(
	`IsC⁄°
(
_Rs_
)) {

398 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
);

399 
u32
 
π
=
	`RódReg
(
_Rt_
);

400 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

401 
	`SLT
(
rd
,
HOST_a1
,
π
);

402 } i‡(
	`IsC⁄°
(
_Rt_
)) {

403 
u32
 
rs
=
	`RódReg
(
_Rs_
);

404 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

405 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

406 
	`SLT
(
rd
,
rs
,
HOST_a2
);

408 
u32
 
rs
=
	`RódReg
(
_Rs_
);

409 
u32
 
π
=
	`RódReg
(
_Rt_
);

410 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

411 
	`SLT
(
rd
,
rs
,
π
);

414 
	}
}

417 
	$ªcSLTU
() {

419 i‡(
_Rd_
)

421 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

422 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rs_
].
k
 < iRegs[
_Rt_
].k);

423 } i‡(
	`IsC⁄°
(
_Rs_
)) {

424 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
);

425 
u32
 
π
=
	`RódReg
(
_Rt_
);

426 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

427 
	`SLTU
(
rd
,
HOST_a1
,
π
);

428 } i‡(
	`IsC⁄°
(
_Rt_
)) {

429 
u32
 
rs
=
	`RódReg
(
_Rs_
);

430 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

431 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

432 
	`SLTU
(
rd
,
rs
,
HOST_a2
);

434 
u32
 
rs
=
	`RódReg
(
_Rs_
);

435 
u32
 
π
=
	`RódReg
(
_Rt_
);

436 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

437 
	`SLTU
(
rd
,
rs
,
π
);

440 
	}
}

442 
	#SMULL
(
lo
,
hi
,
›1
,
›2
Ë
	`wrôe32
((0xe0c00090 + ((hi)<<16Ë+ (÷o)<<12Ë+ ((›2)<<8Ë+ (›1Ë))

	)

445 
	$ªcMULT
() {

448 i‡((
	`IsC⁄°
(
_Rs_
Ë&& 
iRegs
[_Rs_].
k
 == 0) ||

449 (
	`IsC⁄°
(
_Rt_
Ë&& 
iRegs
[_Rt_].
k
 == 0)) {

450 
	`M≠C⁄°
(32,0);

451 
	`M≠C⁄°
(33,0);

455 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
))

457 
u64
 
ªs
 = (
s64
)((s64)(
s32
)
iRegs
[
_Rs_
].
k
 * (s64)(s32)iRegs[
_Rt_
].k);

458 
	`M≠C⁄°
(32,(
u32
)(
ªs
 & 0xffffffff));

459 
	`M≠C⁄°
(33,(
u32
)((
ªs
 >> 32) & 0xffffffff));

463 
u32
 
lo
=
	`WrôeReg
(32);

464 
u32
 
hi
=
	`WrôeReg
(33);

466 i‡(
	`IsC⁄°
(
_Rs_
)) {

467 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
);

468 
u32
 
π
=
	`RódReg
(
_Rt_
);

469 
	`SMULL
(
lo
,
hi
,
HOST_a1
,
π
);

471 i‡(
	`IsC⁄°
(
_Rt_
)) {

472 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rt_
].
k
);

473 
u32
 
rs
=
	`RódReg
(
_Rs_
);

474 
	`SMULL
(
lo
,
hi
,
HOST_a1
,
rs
);

478 
u32
 
rs
=
	`RódReg
(
_Rs_
);

479 
u32
 
π
=
	`RódReg
(
_Rt_
);

480 
	`SMULL
(
lo
,
hi
,
rs
,
π
);

482 
	}
}

484 
	#UMULL
(
lo
,
hi
,
›1
,
›2
Ë
	`wrôe32
((0xe0800090 + ((hi)<<16Ë+ (÷o)<<12Ë+ ((›2)<<8Ë+ (›1Ë))

	)

487 
	$ªcMULTU
() {

490 i‡((
	`IsC⁄°
(
_Rs_
Ë&& 
iRegs
[_Rs_].
k
 == 0) ||

491 (
	`IsC⁄°
(
_Rt_
Ë&& 
iRegs
[_Rt_].
k
 == 0)) {

492 
	`M≠C⁄°
(32,0);

493 
	`M≠C⁄°
(33,0);

497 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
))

499 
u64
 
ªs
 = (u64)((u64)(
u32
)
iRegs
[
_Rs_
].
k
 * (u64)(u32)iRegs[
_Rt_
].k);

500 
	`M≠C⁄°
(32,(
u32
)(
ªs
 & 0xffffffff));

501 
	`M≠C⁄°
(33,(
u32
)((
ªs
 >> 32) & 0xffffffff));

505 
u32
 
lo
=
	`WrôeReg
(32);

506 
u32
 
hi
=
	`WrôeReg
(33);

508 i‡(
	`IsC⁄°
(
_Rs_
)) {

509 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
);

510 
u32
 
π
=
	`RódReg
(
_Rt_
);

511 
	`UMULL
(
lo
,
hi
,
HOST_a1
,
π
);

513 i‡(
	`IsC⁄°
(
_Rt_
)) {

514 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rt_
].
k
);

515 
u32
 
rs
=
	`RódReg
(
_Rs_
);

516 
	`UMULL
(
lo
,
hi
,
HOST_a1
,
rs
);

520 
u32
 
rs
=
	`RódReg
(
_Rs_
);

521 
u32
 
π
=
	`RódReg
(
_Rt_
);

522 
	`UMULL
(
lo
,
hi
,
rs
,
π
);

524 
	}
}

526 
	$_DIV
(
s32
 
›1
,s32 
›2
Ë{ i‡(›2Ë{ 
	`_i32
(
_rLo_
Ë›1 / op2; _i32(
_rHi_
Ë›1 % op2; } 
	}
}

529 
	$ªcDIV
() {

532 i‡(
	`IsC⁄°
(
_Rt_
Ë&& IsC⁄°(
_Rs_
)) {

533 i‡(
iRegs
[
_Rt_
].
k
)

535 
	`M≠C⁄°
(32, (
s32
)
iRegs
[
_Rs_
].
k
 / (s32)iRegs[
_Rt_
].k);

536 
	`M≠C⁄°
(33, (
s32
)
iRegs
[
_Rs_
].
k
 % (s32)iRegs[
_Rt_
].k);

541 i‡(
	`IsC⁄°
(
_Rt_
)) {

542 i‡(
iRegs
[
_Rt_
].
k
 == 0) ;

543 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

545 
u32
 
π
=
	`RódReg
(
_Rt_
);

546 
	`MOV32RtoR
(
HOST_a2
, 
π
);

548 i‡(
	`IsC⁄°
(
_Rs_
)) {

549 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
);

551 
u32
 
rs
=
	`RódReg
(
_Rs_
);

552 
	`MOV32RtoR
(
HOST_a1
, 
rs
);

555 
	`iFlushReg
(32);

556 
	`iFlushReg
(33);

557 
	`CALLFunc
((
u32
)
_DIV
);

558 
	}
}

560 
	$_DIVU
(
u32
 
›1
,u32 
›2
Ë{ i‡(›2Ë{ 
psxRegs
.
GPR
.
r
[32] = op1 / op2;ÖsxRegs.GPR.r[33] = op1 % op2; } 
	}
}

563 
	$ªcDIVU
() {

566 i‡(
	`IsC⁄°
(
_Rt_
Ë&& IsC⁄°(
_Rs_
)) {

567 i‡(
iRegs
[
_Rt_
].
k
)

569 
	`M≠C⁄°
(32, (
u32
)
iRegs
[
_Rs_
].
k
 / (u32)iRegs[
_Rt_
].k);

570 
	`M≠C⁄°
(33, (
u32
)
iRegs
[
_Rs_
].
k
 % (u32)iRegs[
_Rt_
].k);

575 i‡(
	`IsC⁄°
(
_Rt_
)) {

576 i‡(
iRegs
[
_Rt_
].
k
 == 0) ;

577 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

579 
u32
 
π
=
	`RódReg
(
_Rt_
);

580 
	`MOV32RtoR
(
HOST_a2
, 
π
);

582 i‡(
	`IsC⁄°
(
_Rs_
)) {

583 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
);

585 
u32
 
rs
=
	`RódReg
(
_Rs_
);

586 
	`MOV32RtoR
(
HOST_a1
, 
rs
);

588 
	`iFlushReg
(32);

589 
	`iFlushReg
(33);

590 
	`CALLFunc
((
u32
)
_DIVU
);

591 
	}
}

594 
	$ªcSLL
() {

596 i‡(
_Rd_
)

598 i‡(
	`IsC⁄°
(
_Rt_
)) {

599 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rt_
].
k
 << 
_Sa_
);

601 
u32
 
π
=
	`RódReg
(
_Rt_
);

602 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

603 i‡(
_Sa_
)

605 
	`SHLI32
(
rd
,
π
,
_Sa_
);

609 
	`MOV32RtoR
(
rd
,
π
);

613 
	}
}

616 
	$ªcSRL
() {

618 i‡(
_Rd_
)

620 i‡(
	`IsC⁄°
(
_Rt_
)) {

621 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rt_
].
k
 >> 
_Sa_
);

623 
u32
 
π
=
	`RódReg
(
_Rt_
);

624 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

625 i‡(
_Sa_
)

627 
	`SHRI32
(
rd
,
π
,
_Sa_
);

631 
	`MOV32RtoR
(
rd
,
π
);

635 
	}
}

638 
	$ªcSRA
() {

640 i‡(
_Rd_
)

642 i‡(
	`IsC⁄°
(
_Rt_
)) {

643 
	`M≠C⁄°
(
_Rd_
, (
s32
)
iRegs
[
_Rt_
].
k
 >> 
_Sa_
);

645 
u32
 
π
=
	`RódReg
(
_Rt_
);

646 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

647 i‡(
_Sa_
)

649 
	`SARI32
(
rd
,
π
,
_Sa_
);

653 
	`MOV32RtoR
(
rd
,
π
);

657 
	}
}

660 
	$ªcSLLV
() {

662 i‡(
_Rd_
)

664 i‡(
	`IsC⁄°
(
_Rt_
Ë&& IsC⁄°(
_Rs_
)) {

665 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rt_
].
k
 << iRegs[
_Rs_
].k);

666 } i‡(
	`IsC⁄°
(
_Rs_
)) {

667 
u32
 
π
=
	`RódReg
(
_Rt_
);

668 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

669 
	`SHLI32
(
rd
,
π
,
iRegs
[
_Rs_
].
k
);

670 } i‡(
	`IsC⁄°
(
_Rt_
)) {

671 
u32
 
rs
=
	`RódReg
(
_Rs_
);

672 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rt_
].
k
);

673 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

674 
	`SHL32
(
rd
,
HOST_a1
,
rs
);

676 
u32
 
rs
=
	`RódReg
(
_Rs_
);

677 
u32
 
π
=
	`RódReg
(
_Rt_
);

678 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

679 
	`SHL32
(
rd
,
π
,
rs
);

682 
	}
}

685 
	$ªcSRLV
() {

687 i‡(
_Rd_
)

689 i‡(
	`IsC⁄°
(
_Rt_
Ë&& IsC⁄°(
_Rs_
)) {

690 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[
_Rt_
].
k
 >> iRegs[
_Rs_
].k);

691 } i‡(
	`IsC⁄°
(
_Rs_
)) {

692 
u32
 
π
=
	`RódReg
(
_Rt_
);

693 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

694 
	`SHRI32
(
rd
,
π
,
iRegs
[
_Rs_
].
k
);

695 } i‡(
	`IsC⁄°
(
_Rt_
)) {

696 
u32
 
rs
=
	`RódReg
(
_Rs_
);

697 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rt_
].
k
);

698 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

699 
	`SHR32
(
rd
,
HOST_a1
,
rs
);

701 
u32
 
rs
=
	`RódReg
(
_Rs_
);

702 
u32
 
π
=
	`RódReg
(
_Rt_
);

703 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

704 
	`SHR32
(
rd
,
π
,
rs
);

707 
	}
}

710 
	$ªcSRAV
() {

712 i‡(
_Rd_
)

714 i‡(
	`IsC⁄°
(
_Rt_
Ë&& IsC⁄°(
_Rs_
)) {

715 
	`M≠C⁄°
(
_Rd_
, (
s32
)
iRegs
[
_Rt_
].
k
 >> iRegs[
_Rs_
].k);

716 } i‡(
	`IsC⁄°
(
_Rs_
)) {

717 
u32
 
π
=
	`RódReg
(
_Rt_
);

718 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

719 
	`SARI32
(
rd
,
π
,
iRegs
[
_Rs_
].
k
);

720 } i‡(
	`IsC⁄°
(
_Rt_
)) {

721 
u32
 
rs
=
	`RódReg
(
_Rs_
);

722 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rt_
].
k
);

723 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

724 
	`SAR32
(
rd
,
HOST_a1
,
rs
);

726 
u32
 
rs
=
	`RódReg
(
_Rs_
);

727 
u32
 
π
=
	`RódReg
(
_Rt_
);

728 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

729 
	`SAR32
(
rd
,
π
,
rs
);

732 
	}
}

	@src/recompiler/arm_old/rec_branch.h

22 
	$ªcJ
() {

25 
	`iJump
(
_T¨gë_
 * 4 + (
pc
 & 0xf0000000));

26 
	}
}

29 
	$ªcJR
() {

32 i‡(
	`IsC⁄°
(
_Rs_
)) {

33 
	`MOV32ItoM
((
u32
)&
èrgë
, 
iRegs
[
_Rs_
].
k
);

35 
u32
 
rs
=
	`RódReg
(
_Rs_
);

36 
	`MOV32RtoM
((
u32
)&
èrgë
, 
rs
);

39 
	`SëBønch
();

40 
	}
}

43 
	$ªcJAL
() {

46 
	`M≠C⁄°
(31, 
pc
 + 4);

48 
	`iJump
(
_T¨gë_
 * 4 + (
pc
 & 0xf0000000));

49 
	}
}

52 
	$ªcJALR
() {

55 i‡(
	`IsC⁄°
(
_Rs_
)) {

56 
	`MOV32ItoM
((
u32
)&
èrgë
, 
iRegs
[
_Rs_
].
k
);

58 
u32
 
rs
=
	`RódReg
(
_Rs_
);

59 
	`MOV32RtoM
((
u32
)&
èrgë
, 
rs
);

62 i‡(
_Rd_
) {

63 
	`M≠C⁄°
(
_Rd_
, 
pc
 + 4);

66 
	`SëBønch
();

67 
	}
}

70 
	$ªcBLTZ
() {

72 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

74 i‡(
bpc
 =
pc
+4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

78 i‡(
	`IsC⁄°
(
_Rs_
)) {

79 i‡((
s32
)
iRegs
[
_Rs_
].
k
 < 0) {

80 
	`iJump
(
bpc
);

83 
	`iJump
(
pc
 + 4);

88 
u32
 
rs
=
	`RódReg
(
_Rs_
);

89 
j32På
[4] = 
	`JLTZ32
(
rs
);

91 
	`iBønch
(
pc
+4, 1);

93 
	`¨mSëJ32
(
j32På
[4]);

95 
	`iBønch
(
bpc
, 0);

96 
pc
 += 4;

97 
	}
}

101 
	$ªcBGTZ
() {

103 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

105 i‡(
bpc
 =
pc
 + 4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

109 i‡(
	`IsC⁄°
(
_Rs_
)) {

110 i‡((
s32
)
iRegs
[
_Rs_
].
k
 > 0) {

111 
	`iJump
(
bpc
);

114 
	`iJump
(
pc
 + 4);

119 
u32
 
rs
=
	`RódReg
(
_Rs_
);

120 
j32På
[4] = 
	`JGTZ32
(
rs
);

122 
	`iBønch
(
pc
 + 4, 1);

124 
	`¨mSëJ32
(
j32På
[4]);

126 
	`iBønch
(
bpc
, 0);

127 
pc
+=4;

128 
	}
}

131 
	$ªcBLTZAL
() {

133 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

135 i‡(
bpc
 =
pc
 + 4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

139 i‡(
	`IsC⁄°
(
_Rs_
)) {

140 i‡((
s32
)
iRegs
[
_Rs_
].
k
 < 0) {

141 
u32
 
r31
=
	`WrôeReg
(31);

142 
	`MOV32ItoR
(
r31
, 
pc
 + 4);

143 
	`iJump
(
bpc
); ;

145 
	`iJump
(
pc
 + 4); ;

149 
u32
 
rs
=
	`RódReg
(
_Rs_
);

150 
j32På
[4] = 
	`JLTZ32
(
rs
);

152 
	`iBønch
(
pc
 + 4, 1);

154 
	`¨mSëJ32
(
j32På
[4]);

156 
u32
 
r31
=
	`WrôeReg
(31);

157 
	`MOV32ItoR
(
r31
, 
pc
 + 4);

158 
	`iBønch
(
bpc
, 0);

159 
pc
 += 4;

160 
	}
}

163 
	$ªcBGEZAL
() {

165 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

167 i‡(
bpc
 =
pc
 + 4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

171 i‡(
	`IsC⁄°
(
_Rs_
)) {

172 i‡((
s32
)
iRegs
[
_Rs_
].
k
 >= 0) {

173 
u32
 
r31
=
	`WrôeReg
(31);

174 
	`MOV32ItoR
(
r31
, 
pc
 + 4);

175 
	`iJump
(
bpc
); ;

177 
	`iJump
(
pc
+4); ;

181 
u32
 
rs
=
	`RódReg
(
_Rs_
);

182 
j32På
[4] = 
	`JGEZ32
(
rs
);

184 
	`iBønch
(
pc
+4, 1);

186 
	`¨mSëJ32
(
j32På
[4]);

188 
u32
 
r31
=
	`WrôeReg
(31);

189 
	`MOV32ItoR
(
r31
, 
pc
 + 4);

190 
	`iBønch
(
bpc
, 0);

191 
pc
+=4;

192 
	}
}

195 
	$ªcBNE
() {

197 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

199 i‡(
bpc
 =
pc
 + 4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

203 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

204 i‡(
iRegs
[
_Rs_
].
k
 !iRegs[
_Rt_
].k) {

205 
	`iJump
(
bpc
);

208 
	`iJump
(
pc
 + 4);

213 
u32
 
rs
,
π
;

215 i‡(
	`IsC⁄°
(
_Rs_
)) {

216 
	`MOV32ItoR
(
HOST_a1
,
iRegs
[
_Rs_
].
k
);

217 
rs
=
HOST_a1
;

219 
rs
=
	`RódReg
(
_Rs_
);

222 i‡(
	`IsC⁄°
(
_Rt_
)) {

223 
	`MOV32ItoR
(
HOST_a2
,
iRegs
[
_Rt_
].
k
);

224 
π
=
HOST_a2
;

226 
π
=
	`RódReg
(
_Rt_
);

229 
	`wrôe32
(
	`CMP_REGS
(
rs
,
π
));

230 
j32På
[4] = 
¨mPå
; 
	`wrôe32
(
	`BNE_FWD
(0));

232 
	`iBønch
(
pc
 + 4, 1);

234 
	`¨mSëJ32
(
j32På
[4]);

236 
	`iBønch
(
bpc
, 0);

237 
pc
 += 4;

238 
	}
}

241 
	$ªcBEQ
() {

243 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

245 i‡(
bpc
 =
pc
 + 4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

249 i‡(
_Rs_
 =
_Rt_
) {

250 
	`iJump
(
bpc
);

252 i‡(
	`IsC⁄°
(
_Rs_
Ë&& IsC⁄°(
_Rt_
)) {

253 i‡(
iRegs
[
_Rs_
].
k
 =iRegs[
_Rt_
].k) {

254 
	`iJump
(
bpc
);

257 
	`iJump
(
pc
 + 4);

262 
u32
 
rs
,
π
;

264 i‡(
	`IsC⁄°
(
_Rs_
)) {

265 
	`MOV32ItoR
(
HOST_a1
,
iRegs
[
_Rs_
].
k
);

266 
rs
=
HOST_a1
;

268 
rs
=
	`RódReg
(
_Rs_
);

271 i‡(
	`IsC⁄°
(
_Rt_
)) {

272 
	`MOV32ItoR
(
HOST_a2
,
iRegs
[
_Rt_
].
k
);

273 
π
=
HOST_a2
;

275 
π
=
	`RódReg
(
_Rt_
);

278 
	`wrôe32
(
	`CMP_REGS
(
rs
,
π
));

279 
j32På
[4] = 
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

281 
	`iBønch
(
pc
 + 4, 1);

283 
	`¨mSëJ32
(
j32På
[4]);

285 
	`iBønch
(
bpc
, 0);

286 
pc
 += 4;

288 
	}
}

291 
	$ªcBLEZ
() {

293 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

295 i‡(
bpc
 =
pc
 + 4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

299 i‡(
	`IsC⁄°
(
_Rs_
)) {

300 i‡((
s32
)
iRegs
[
_Rs_
].
k
 <= 0) {

301 
	`iJump
(
bpc
);

304 
	`iJump
(
pc
 + 4);

309 
u32
 
rs
=
	`RódReg
(
_Rs_
);

310 
j32På
[4] = 
	`JLEZ32
(
rs
);

312 
	`iBønch
(
pc
 + 4, 1);

314 
	`¨mSëJ32
(
j32På
[4]);

316 
	`iBønch
(
bpc
, 0);

317 
pc
 += 4;

318 
	}
}

321 
	$ªcBGEZ
() {

323 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

325 i‡(
bpc
 =
pc
 + 4 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

329 i‡(
	`IsC⁄°
(
_Rs_
)) {

330 i‡((
s32
)
iRegs
[
_Rs_
].
k
 >= 0) {

331 
	`iJump
(
bpc
);

334 
	`iJump
(
pc
 + 4);

339 
u32
 
rs
=
	`RódReg
(
_Rs_
);

340 
j32På
[4] = 
	`JGEZ32
(
rs
);

342 
	`iBønch
(
pc
 + 4, 1);

344 
	`¨mSëJ32
(
j32På
[4]);

346 
	`iBønch
(
bpc
, 0);

347 
pc
 += 4;

348 
	}
}

	@src/recompiler/arm_old/rec_gte.h

21 
	~"gã.h
"

23 
	#CP2_FUNC
(
f
) \

24 
gã
##
	`f
(); \

25 
ªc
##
	`f
() { \

27 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
, (u32)psxRegs.code); \

28 
	`CALLFunc
 ((
u32
)
gã
##
f
); \

30 }

	)

32 
	#CP2_FUNCNC
(
f
) \

33 
gã
##
	`f
(); \

34 
ªc
##
	`f
() { \

36 
	`CALLFunc
 ((
u32
)
gã
##
f
); \

38 }

	)

41 
	$ªcMFC2
() {

42 i‡(
_Rt_
)

44 
	`MOV32ItoR
(
HOST_a1
,
_Rd_
);

45 
	`CALLFunc
((
u32
)
gãˇlcMFC2
);

46 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

47 
	`MOV32RtoR
(
π
,
HOST_a1
);

49 
	}
}

52 
	$ªcMTC2
() {

53 i‡(
	`IsC⁄°
(
_Rt_
)) {

54 
	`MOV32ItoR
(
HOST_a1
,
iRegs
[
_Rt_
].
k
);

57 
u32
 
π
=
	`RódReg
(
_Rt_
);

58 
	`MOV32RtoR
(
HOST_a1
,
π
);

60 
	`MOV32ItoR
(
HOST_a2
,
_Rd_
);

61 
	`CALLFunc
((
u32
)
gãˇlcMTC2
);

62 
	}
}

65 
	$ªcCFC2
() {

66 i‡(
_Rt_
)

68 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

69 
	`MOV32MtoR_ªgs
(
π
,&
psxRegs
.
CP2C
.
r
[
_Rd_
]);

71 
	}
}

74 
	$ªcCTC2
() {

75 i‡(
	`IsC⁄°
(
_Rt_
)) {

76 
	`MOV32ItoR
(
HOST_a1
,
iRegs
[
_Rt_
].
k
);

79 
u32
 
π
=
	`RódReg
(
_Rt_
);

80 
	`MOV32RtoR
(
HOST_a1
,
π
);

82 
	`MOV32ItoR
(
HOST_a2
,
_Rd_
);

83 
	`CALLFunc
((
u32
)
gãˇlcCTC2
);

84 
	}
}

87 
	$ªcLWC2
()

89 i‡(
	`IsC⁄°
(
_Rs_
)) {

90 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

91 
t
 = 
addr
 >> 16;

93 i‡((
t
 & 0xfff0) == 0xbfc0) {

94 
	`MOV32ItoR
(
HOST_a1
, 
	`psxRu32
(
addr
));

95 
	`MOV32ItoR
(
HOST_a2
, 
_Rt_
);

96 
	`CALLFunc
((
u32
)
gãˇlcMTC2
);

99 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

100 
	`MOV32MtoR
(
HOST_a1
, (
u32
)&
psxM
[
addr
 & 0x1fffff]);

101 
	`MOV32ItoR
(
HOST_a2
, 
_Rt_
);

102 
	`CALLFunc
((
u32
)
gãˇlcMTC2
);

105 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

106 
	`MOV32MtoR
(
HOST_a1
, (
u32
)&
psxH
[
addr
 & 0xfff]);

107 
	`MOV32ItoR
(
HOST_a2
, 
_Rt_
);

108 
	`CALLFunc
((
u32
)
gãˇlcMTC2
);

111 i‡(
t
 == 0x1f80) {

112 
addr
) {

122 
	`MOV32MtoR
(
HOST_a1
, (
u32
)&
psxH
[
addr
 & 0xffff]);

123 
	`MOV32ItoR
(
HOST_a2
, 
_Rt_
);

124 
	`CALLFunc
((
u32
)
gãˇlcMTC2
);

128 
	`CALLFunc
((
u32
)&
GPU_ªadD©a
);

129 
	`MOV32ItoR
(
HOST_a2
, 
_Rt_
);

130 
	`CALLFunc
((
u32
)
gãˇlcMTC2
);

134 
	`CALLFunc
((
u32
)&
GPU_ªadSètus
);

135 
	`MOV32ItoR
(
HOST_a2
, 
_Rt_
);

136 
	`CALLFunc
((
u32
)
gãˇlcMTC2
);

140 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

141 
	`MOV32ItoR
(
HOST_a1
, 
addr
);

142 
	`CALLFunc
((
u32
)
psxHwRód32
);

143 
	`MOV32ItoR
(
HOST_a2
, 
_Rt_
);

144 
	`CALLFunc
((
u32
)
gãˇlcMTC2
);

149 
	`iPushOfB
();

150 
	`PSXMEMREAD32
();

151 
	`MOV32ItoR
(
HOST_a2
, 
_Rt_
);

152 
	`CALLFunc
((
u32
)
gãˇlcMTC2
);

153 
	}
}

156 
	$ªcSWC2
()

158 
	`MOV32ItoR
(
HOST_a1
,
_Rt_
);

159 
	`CALLFunc
((
u32
)
gãˇlcMFC2
);

161 i‡(
	`IsC⁄°
(
_Rs_
)) {

162 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

163 
t
 = 
addr
 >> 16;

165 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

166 
	`MOV32RtoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], 
HOST_a1
);

169 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

170 
	`MOV32RtoM
((
u32
)&
psxH
[
addr
 & 0xfff], 
HOST_a1
);

173 i‡(
t
 == 0x1f80) {

174 
addr
) {

184 
	`MOV32RtoM
((
u32
)&
psxH
[
addr
 & 0xffff], 
HOST_a1
);

188 
	`CALLFunc
((
u32
)&
GPU_wrôeD©a
);

192 
	`CALLFunc
((
u32
)&
GPU_wrôeSètus
);

196 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

197 
	`MOV32RtoR
(
HOST_a2
,
HOST_a1
);

198 
	`MOV32ItoR
(
HOST_a1
,
addr
);

199 
	`CALLFunc
((
u32
)
psxHwWrôe32
);

204 
	`MOV32RtoR
(
HOST_a2
,
HOST_a1
);

205 
	`iPushOfB
();

206 
	`PSXMEMWRITE32
();

207 
	}
}

209 
CP2_FUNCNC
(
RTPS
);

210 
CP2_FUNC
(
OP
);

211 
CP2_FUNCNC
(
NCLIP
);

212 
CP2_FUNC
(
DPCS
);

213 
CP2_FUNC
(
INTPL
);

214 
CP2_FUNC
(
MVMVA
);

215 
CP2_FUNCNC
(
NCDS
);

216 
CP2_FUNCNC
(
NCDT
);

217 
CP2_FUNCNC
(
CDP
);

218 
CP2_FUNCNC
(
NCCS
);

219 
CP2_FUNCNC
(
CC
);

220 
CP2_FUNCNC
(
NCS
);

221 
CP2_FUNCNC
(
NCT
);

222 
CP2_FUNC
(
SQR
);

223 
CP2_FUNC
(
DCPL
);

224 
CP2_FUNCNC
(
DPCT
);

225 
CP2_FUNCNC
(
AVSZ3
);

226 
CP2_FUNCNC
(
AVSZ4
);

227 
CP2_FUNCNC
(
RTPT
);

228 
CP2_FUNC
(
GPF
);

229 
CP2_FUNC
(
GPL
);

230 
CP2_FUNCNC
(
NCCT
);

	@src/recompiler/arm_old/rec_mem.h

21 
INLINE
 
	$PSXMEMREAD8
()

23 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r1
, 
HOST_r0
, 16));

24 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
, 
HOST_r0
, 16));

25 
	`wrôe32
(0xe3510d7e);

26 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
, HOST_ip, 16));

27 
	`wrôe32
(
	`BEQ_FWD
(16));

28 
	`wrôe32
–
	`LDR_IMM
(
HOST_r2
, 
HOST_pc
, 8) );

29 
	`wrôe32
(0xe7921101);

30 
	`wrôe32
(0xe7dc0001);

31 
	`wrôe32
(
	`B_FWD
(28));

32 
	`wrôe32
–(
Bô32u
)
psxMemRLUT
 );

33 
	`wrôe32
(0xe35c0a01);

34 
	`wrôe32
(
	`BCS_FWD
(12));

35 
	`wrôe32
–
	`LDR_IMM
(
HOST_r1
, 
HOST_pc
, 4) );

36 
	`wrôe32
(0xe7dc0001);

37 
	`wrôe32
(
	`B_FWD
(4));

38 
	`wrôe32
–(
Bô32u
)
psxH
 );

39 
	`CALLFunc
((
u32
)
psxHwRód8
);

40 
	}
}

42 
INLINE
 
	$PSXMEMREAD16
()

44 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r1
, 
HOST_r0
, 16));

45 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
, 
HOST_r0
, 16));

46 
	`wrôe32
(0xe3510d7e);

47 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
, HOST_ip, 16));

48 
	`wrôe32
(
	`BEQ_FWD
(16));

49 
	`wrôe32
–
	`LDR_IMM
(
HOST_r2
, 
HOST_pc
, 8) );

50 
	`wrôe32
(0xe7921101);

51 
	`wrôe32
(0xe19c00b1);

52 
	`wrôe32
(
	`B_FWD
(28));

53 
	`wrôe32
–(
Bô32u
)
psxMemRLUT
 );

54 
	`wrôe32
(0xe35c0a01);

55 
	`wrôe32
(
	`BCS_FWD
(12));

56 
	`wrôe32
–
	`LDR_IMM
(
HOST_r1
, 
HOST_pc
, 4) );

57 
	`wrôe32
(0xe19c00b1);

58 
	`wrôe32
(
	`B_FWD
(4));

59 
	`wrôe32
–(
Bô32u
)
psxH
 );

60 
	`CALLFunc
((
u32
)
psxHwRód16
);

61 
	}
}

63 
INLINE
 
	$PSXMEMREAD32
()

65 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_r1
, 
HOST_r0
, 16));

66 
	`wrôe32
(
	`MOV_REG_LSL_IMM
(
HOST_ù
, 
HOST_r0
, 16));

67 
	`wrôe32
(0xe3510d7e);

68 
	`wrôe32
(
	`MOV_REG_LSR_IMM
(
HOST_ù
, HOST_ip, 16));

69 
	`wrôe32
(
	`BEQ_FWD
(16));

70 
	`wrôe32
–
	`LDR_IMM
(
HOST_r2
, 
HOST_pc
, 8) );

71 
	`wrôe32
(0xe7921101);

72 
	`wrôe32
(0xe79c0001);

73 
	`wrôe32
(
	`B_FWD
(28));

74 
	`wrôe32
–(
Bô32u
)
psxMemRLUT
 );

75 
	`wrôe32
(0xe35c0a01);

76 
	`wrôe32
(
	`BCS_FWD
(12));

77 
	`wrôe32
–
	`LDR_IMM
(
HOST_r1
, 
HOST_pc
, 4) );

78 
	`wrôe32
(0xe79c0001);

79 
	`wrôe32
(
	`B_FWD
(4));

80 
	`wrôe32
–(
Bô32u
)
psxH
 );

81 
	`CALLFunc
((
u32
)
psxHwRód32
);

82 
	}
}

84 
INLINE
 
	$PSXHWREAD8
()

86 
	`wrôe32
(0xe1a03820);

87 
	`wrôe32
(0xe1a02800);

88 
	`wrôe32
(0xe3530d7e);

89 
	`wrôe32
(0xe1a02822);

90 
	`wrôe32
(
	`BNE_FWD
(8));

91 
	`wrôe32
(0xe3520a01);

92 
	`wrôe32
(
	`BCC_FWD
(0));

93 
	`CALLFunc
((
u32
)
psxHwRód8
);

94 
	}
}

96 
INLINE
 
	$PSXHWREAD16
()

98 
	`wrôe32
(0xe1a03820);

99 
	`wrôe32
(0xe1a02800);

100 
	`wrôe32
(0xe3530d7e);

101 
	`wrôe32
(0xe1a02822);

102 
	`wrôe32
(
	`BNE_FWD
(8));

103 
	`wrôe32
(0xe3520a01);

104 
	`wrôe32
(
	`BCC_FWD
(0));

105 
	`CALLFunc
((
u32
)
psxHwRód16
);

106 
	}
}

108 
INLINE
 
	$PSXHWREAD32
()

110 
	`wrôe32
(0xe1a03820);

111 
	`wrôe32
(0xe1a02800);

112 
	`wrôe32
(0xe3530d7e);

113 
	`wrôe32
(0xe1a02822);

114 
	`wrôe32
(
	`BNE_FWD
(8));

115 
	`wrôe32
(0xe3520a01);

116 
	`wrôe32
(
	`BCC_FWD
(0));

117 
	`CALLFunc
((
u32
)
psxHwRód32
);

118 
	}
}

120 
INLINE
 
	$PSXMEMWRITE8
()

122 
	`wrôe32
(0xe1a0e820);

123 
	`wrôe32
(0xe1a0c800);

124 
	`wrôe32
(0xe35e0d7e);

125 
	`wrôe32
(0xe1a0c82c);

126 
	`wrôe32
(
	`BEQ_FWD
(48));

127 
	`wrôe32
–
	`LDR_IMM
(
HOST_r2
, 
HOST_pc
, 36) );

128 
	`wrôe32
(0xe792310e);

129 
	`wrôe32
(0xe3530000);

130 
	`wrôe32
(
	`BEQ_FWD
(60));

131 
	`wrôe32
(0xe7cc1003);

132 
	`wrôe32
–
	`LDR_IMM
(
HOST_r2
, 
HOST_pc
, 20) );

133 
	`wrôe32
(0xe792110e);

134 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
, HOST_ip, 3, 0));

135 
	`wrôe32
(0xe3a00000);

136 
	`wrôe32
(0xe781000c);

137 
	`wrôe32
(
	`B_FWD
(32));

138 
	`wrôe32
–(
Bô32u
)
psxMemWLUT
 );

139 
	`wrôe32
–(
Bô32u
)
psxRecLUT
 );

140 
	`wrôe32
(0xe35c0a01);

141 
	`wrôe32
(
	`BCS_FWD
(12));

142 
	`wrôe32
–
	`LDR_IMM
(
HOST_r3
, 
HOST_pc
, 4) );

143 
	`wrôe32
(0xe7cc1003);

144 
	`wrôe32
(
	`B_FWD
(4));

145 
	`wrôe32
–(
Bô32u
)
psxH
 );

146 
	`CALLFunc
((
u32
)
psxHwWrôe8
);

147 
	}
}

149 
INLINE
 
	$PSXMEMWRITE16
()

151 
	`wrôe32
(0xe1a0e820);

152 
	`wrôe32
(0xe1a0c800);

153 
	`wrôe32
(0xe35e0d7e);

154 
	`wrôe32
(0xe1a0c82c);

155 
	`wrôe32
(
	`BEQ_FWD
(48));

156 
	`wrôe32
–
	`LDR_IMM
(
HOST_r2
, 
HOST_pc
, 36) );

157 
	`wrôe32
(0xe792310e);

158 
	`wrôe32
(0xe3530000);

159 
	`wrôe32
(
	`BEQ_FWD
(60));

160 
	`wrôe32
(0xe18c10b3);

161 
	`wrôe32
–
	`LDR_IMM
(
HOST_r2
, 
HOST_pc
, 20) );

162 
	`wrôe32
(0xe792110e);

163 
	`wrôe32
(
	`BIC_IMM
(
HOST_ù
, HOST_ip, 1, 0));

164 
	`wrôe32
(0xe3a00000);

165 
	`wrôe32
(0xe781000c);

166 
	`wrôe32
(
	`B_FWD
(32));

167 
	`wrôe32
–(
Bô32u
)
psxMemWLUT
 );

168 
	`wrôe32
–(
Bô32u
)
psxRecLUT
 );

169 
	`wrôe32
(0xe35c0a01);

170 
	`wrôe32
(
	`BCS_FWD
(12));

171 
	`wrôe32
–
	`LDR_IMM
(
HOST_r3
, 
HOST_pc
, 4) );

172 
	`wrôe32
(0xe18c10b3);

173 
	`wrôe32
(
	`B_FWD
(4));

174 
	`wrôe32
–(
Bô32u
)
psxH
 );

175 
	`CALLFunc
((
u32
)
psxHwWrôe16
);

176 
	}
}

178 
INLINE
 
	$PSXMEMWRITE32
()

180 
	`wrôe32
(0xe1a0e820);

181 
	`wrôe32
(0xe1a0c800);

182 
	`wrôe32
(0xe35e0d7e);

183 
	`wrôe32
(0xe1a0c82c);

184 
	`wrôe32
(
	`BEQ_FWD
(52));

185 
	`wrôe32
–
	`LDR_IMM
(
HOST_r2
, 
HOST_pc
, 32) );

186 
	`wrôe32
(0xe792310e);

187 
	`wrôe32
(0xe3530000);

188 
	`wrôe32
(
	`BEQ_FWD
(28));

189 
	`wrôe32
(0xe78c1003);

190 
	`wrôe32
–
	`LDR_IMM
(
HOST_r2
, 
HOST_pc
, 16) );

191 
	`wrôe32
(0xe792110e);

192 
	`wrôe32
(0xe3a00000);

193 
	`wrôe32
(0xe781000c);

194 
	`wrôe32
(
	`B_FWD
(40));

195 
	`wrôe32
–(
Bô32u
)
psxMemWLUT
 );

196 
	`wrôe32
–(
Bô32u
)
psxRecLUT
 );

197 
	`psxMemWrôe32_îr‹
(
u32
 
mem
, u32 
vÆue
); 
	`CALLFunc
((u32)
psxMemWrôe32_îr‹
);

198 
	`wrôe32
(
	`B_FWD
(24));

199 
	`wrôe32
(0xe35c0a01);

200 
	`wrôe32
(
	`BCS_FWD
(12));

201 
	`wrôe32
–
	`LDR_IMM
(
HOST_r3
, 
HOST_pc
, 4) );

202 
	`wrôe32
(0xe78c1003);

203 
	`wrôe32
(
	`B_FWD
(4));

204 
	`wrôe32
–(
Bô32u
)
psxH
 );

205 
	`CALLFunc
((
u32
)
psxHwWrôe32
);

206 
	}
}

209 
	$iPushOfB
() {

210 i‡(
	`IsC⁄°
(
_Rs_
)) {

211 
	`MOV32ItoR
(
HOST_a1
,
iRegs
[
_Rs_
].
k
 + 
_Imm_
);

213 
u32
 
rs
=
	`RódReg
(
_Rs_
);

214 
	`MOV32RtoR
(
HOST_a1
, 
rs
);

215 i‡(
_Imm_
) {

216 
	`ADD32ItoR
(
HOST_a1
, 
_Imm_
);

219 
	}
}

222 
	$ªcLB
() {

225 i‡(
	`IsC⁄°
(
_Rs_
)) {

226 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

227 
t
 = 
addr
 >> 16;

229 i‡((
t
 & 0xfff0) == 0xbfc0) {

230 i‡(
_Rt_
) {

231 
	`M≠C⁄°
(
_Rt_
, 
	`psxRs8
(
addr
));

235 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

236 i‡(
_Rt_
) {

237 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

238 
	`MOVSX32M8toR
(
π
, (
u32
)&
psxM
[
addr
 & 0x1fffff]);

242 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

243 i‡(
_Rt_
) {

244 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

245 
	`MOVSX32M8toR
(
π
, (
u32
)&
psxH
[
addr
 & 0xfff]);

249 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

250 
	`MOV32ItoR
(
HOST_a1
,
addr
);

251 
	`CALLFunc
((
u32
)
psxHwRód8
);

252 i‡(
_Rt_
) {

253 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

254 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_a1
, HOST_a1, 24) );

255 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
π
, 
HOST_a1
, 24) );

261 
	`iPushOfB
();

263 i‡(
_Rt_
)

265 
	`PSXMEMREAD8
();

266 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

267 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_a1
, HOST_a1, 24) );

268 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
π
, 
HOST_a1
, 24) );

272 
	`PSXHWREAD8
();

274 
	}
}

277 
	$ªcLBU
() {

280 i‡(
	`IsC⁄°
(
_Rs_
)) {

281 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

282 
t
 = 
addr
 >> 16;

284 i‡((
t
 & 0xfff0) == 0xbfc0) {

285 i‡(
_Rt_
) {

286 
	`M≠C⁄°
(
_Rt_
, 
	`psxRu8
(
addr
));

290 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

291 i‡(
_Rt_
) {

292 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

293 
	`MOVZX32M8toR
(
π
, (
u32
)&
psxM
[
addr
 & 0x1fffff]);

297 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

298 i‡(
_Rt_
) {

299 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

300 
	`MOVZX32M8toR
(
π
, (
u32
)&
psxH
[
addr
 & 0xfff]);

304 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

305 
	`MOV32ItoR
(
HOST_a1
,
addr
);

306 
	`CALLFunc
((
u32
)
psxHwRód8
);

307 i‡(
_Rt_
) {

308 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

309 
	`wrôe32
–
	`AND_IMM
(
π
, 
HOST_a1
, 0xff, 0) );

315 
	`iPushOfB
();

317 i‡(
_Rt_
)

319 
	`PSXMEMREAD8
();

320 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

321 
	`wrôe32
–
	`AND_IMM
(
π
, 
HOST_a1
, 0xff, 0) );

325 
	`PSXHWREAD8
();

327 
	}
}

330 
	$ªcLH
() {

333 i‡(
	`IsC⁄°
(
_Rs_
)) {

334 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

335 
t
 = 
addr
 >> 16;

337 i‡((
t
 & 0xfff0) == 0xbfc0) {

338 i‡(
_Rt_
) {

339 
	`M≠C⁄°
(
_Rt_
, 
	`psxRs16
(
addr
));

343 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

344 i‡(
_Rt_
) {

345 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

346 
	`MOVSX32M16toR
(
π
, (
u32
)&
psxM
[
addr
 & 0x1fffff]);

350 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

351 i‡(
_Rt_
) {

352 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

353 
	`MOVSX32M16toR
(
π
, (
u32
)&
psxH
[
addr
 & 0xfff]);

357 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

358 
	`MOV32ItoR
(
HOST_a1
,
addr
);

359 
	`CALLFunc
((
u32
)
psxHwRód16
);

360 i‡(
_Rt_
) {

361 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

362 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_a1
, HOST_a1, 16) );

363 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
π
, 
HOST_a1
, 16) );

369 
	`iPushOfB
();

371 i‡(
_Rt_
)

373 
	`PSXMEMREAD16
();

374 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

375 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_a1
, HOST_a1, 16) );

376 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
π
, 
HOST_a1
, 16) );

380 
	`PSXHWREAD16
();

382 
	}
}

385 
	$ªcLHU
() {

388 i‡(
	`IsC⁄°
(
_Rs_
)) {

389 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

390 
t
 = 
addr
 >> 16;

392 i‡((
t
 & 0xfff0) == 0xbfc0) {

393 i‡(
_Rt_
) {

394 
	`M≠C⁄°
(
_Rt_
, 
	`psxRu16
(
addr
));

398 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

399 i‡(
_Rt_
) {

400 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

401 
	`MOVZX32M16toR
(
π
, (
u32
)&
psxM
[
addr
 & 0x1fffff]);

405 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

406 i‡(
_Rt_
) {

407 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

408 
	`MOVZX32M16toR
(
π
, (
u32
)&
psxH
[
addr
 & 0xfff]);

412 i‡(
t
 == 0x1f80) {

413 i‡(
addr
 >= 0x1f801c00 &&áddr < 0x1f801e00) {

414 i‡(
_Rt_
) {

415 
	`MOV32ItoR
(
HOST_a1
, 
addr
);

416 
	`CALLFunc
((
u32
)&
SPU_ªadRegi°î
);

417 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

418 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_a1
, HOST_a1, 16) );

419 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
π
, 
HOST_a1
, 16) );

423 
addr
) {

425 i‡(
_Rt_
) {

426 
	`MOV32ItoR
(
HOST_a1
, (
addr
 >> 4) & 0x3);

427 
	`CALLFunc
((
u32
)
psxR˙tRcou¡
);

428 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

429 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_a1
, HOST_a1, 16) );

430 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
π
, 
HOST_a1
, 16) );

435 i‡(
_Rt_
) {

436 
	`MOV32ItoR
(
HOST_a1
, (
addr
 >> 4) & 0x3);

437 
	`CALLFunc
((
u32
)
psxR˙tRmode
);

438 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

439 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_a1
, HOST_a1, 16) );

440 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
π
, 
HOST_a1
, 16) );

445 i‡(
_Rt_
) {

446 
	`MOV32ItoR
(
HOST_a1
, (
addr
 >> 4) & 0x3);

447 
	`CALLFunc
((
u32
)
psxR˙tRèrgë
);

448 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

449 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_a1
, HOST_a1, 16) );

450 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
π
, 
HOST_a1
, 16) );

455 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

456 
	`MOV32ItoR
(
HOST_a1
,
addr
);

457 
	`CALLFunc
((
u32
)
psxHwRód16
);

458 i‡(
_Rt_
) {

459 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

460 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_a1
, HOST_a1, 16) );

461 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
π
, 
HOST_a1
, 16) );

467 
	`iPushOfB
();

469 i‡(
_Rt_
)

471 
	`PSXMEMREAD16
();

472 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

473 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
HOST_a1
, HOST_a1, 16) );

474 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
π
, 
HOST_a1
, 16) );

478 
	`PSXHWREAD16
();

480 
	}
}

483 
	$ªcLW
() {

486 i‡(
	`IsC⁄°
(
_Rs_
)) {

487 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

488 
t
 = 
addr
 >> 16;

490 i‡((
t
 & 0xfff0) == 0xbfc0) {

491 i‡(
_Rt_
) {

492 
	`M≠C⁄°
(
_Rt_
, 
	`psxRu32
(
addr
));

496 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

497 i‡(
_Rt_
) {

498 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

499 
	`MOV32MtoR
(
π
, (
u32
)&
psxM
[
addr
 & 0x1fffff]);

503 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

504 i‡(
_Rt_
) {

505 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

506 
	`MOV32MtoR
(
π
, (
u32
)&
psxH
[
addr
 & 0xfff]);

510 i‡(
t
 == 0x1f80) {

511 
addr
) {

521 i‡(
_Rt_
) {

522 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

523 
	`MOV32MtoR
(
π
, (
u32
)&
psxH
[
addr
 & 0xffff]);

528 i‡(
_Rt_
) {

529 
	`CALLFunc
((
u32
)&
GPU_ªadD©a
);

530 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

531 
	`MOV32RtoR
(
π
, 
HOST_a1
);

536 i‡(
_Rt_
) {

537 
	`CALLFunc
((
u32
)&
GPU_ªadSètus
);

538 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

539 
	`MOV32RtoR
(
π
, 
HOST_a1
);

544 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

545 
	`MOV32ItoR
(
HOST_a1
,
addr
);

546 
	`CALLFunc
((
u32
)
psxHwRód32
);

547 i‡(
_Rt_
) {

548 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

549 
	`MOV32RtoR
(
π
,
HOST_a1
);

555 
	`iPushOfB
();

557 i‡(
_Rt_
)

559 
	`PSXMEMREAD32
();

560 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

561 
	`MOV32RtoR
(
π
, 
HOST_a1
);

565 
	`PSXHWREAD32
();

567 
	}
}

570 
	$ªcSB
() {

573 i‡(
	`IsC⁄°
(
_Rs_
)) {

574 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

575 
t
 = 
addr
 >> 16;

577 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

578 i‡(
	`IsC⁄°
(
_Rt_
)) {

579 
	`MOV8ItoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], (
u8
)
iRegs
[
_Rt_
].
k
);

581 
u32
 
π
=
	`RódReg
(
_Rt_
);

582 
	`MOV8RtoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], 
π
);

586 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

587 i‡(
	`IsC⁄°
(
_Rt_
)) {

588 
	`MOV8ItoM
((
u32
)&
psxH
[
addr
 & 0xfff], (
u8
)
iRegs
[
_Rt_
].
k
);

590 
u32
 
π
=
	`RódReg
(
_Rt_
);

591 
	`MOV8RtoM
((
u32
)&
psxH
[
addr
 & 0xfff], 
π
);

595 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

596 
	`MOV32ItoR
(
HOST_a1
,
addr
);

597 i‡(
	`IsC⁄°
(
_Rt_
)) {

598 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

600 
u32
 
π
=
	`RódReg
(
_Rt_
);

601 
	`MOV32RtoR
(
HOST_a2
, 
π
);

603 
	`CALLFunc
((
u32
)
psxHwWrôe8
);

608 i‡(
	`IsC⁄°
(
_Rt_
)) {

609 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

611 
u32
 
π
=
	`RódReg
(
_Rt_
);

612 
	`MOV32RtoR
(
HOST_a2
, 
π
);

614 
	`iPushOfB
();

615 
	`PSXMEMWRITE8
();

616 
	}
}

619 
	$ªcSH
() {

622 i‡(
	`IsC⁄°
(
_Rs_
)) {

623 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

624 
t
 = 
addr
 >> 16;

626 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

627 i‡(
	`IsC⁄°
(
_Rt_
)) {

628 
	`MOV16ItoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], (
u16
)
iRegs
[
_Rt_
].
k
);

630 
u32
 
π
=
	`RódReg
(
_Rt_
);

631 
	`MOV16RtoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], 
π
);

635 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

636 i‡(
	`IsC⁄°
(
_Rt_
)) {

637 
	`MOV16ItoM
((
u32
)&
psxH
[
addr
 & 0xfff], (
u16
)
iRegs
[
_Rt_
].
k
);

639 
u32
 
π
=
	`RódReg
(
_Rt_
);

640 
	`MOV16RtoM
((
u32
)&
psxH
[
addr
 & 0xfff], 
π
);

644 i‡(
t
 == 0x1f80) {

645 i‡(
addr
 >= 0x1f801c00 &&áddr < 0x1f801e00) {

646 i‡(
	`IsC⁄°
(
_Rt_
)) {

647 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

649 
u32
 
π
=
	`RódReg
(
_Rt_
);

650 
	`MOV32RtoR
(
HOST_a2
, 
π
);

652 
	`MOV32ItoR
(
HOST_a1
, 
addr
);

657 
	`CALLFunc
((
u32
)&
SPU_wrôeRegi°î
);

661 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

662 
	`MOV32ItoR
(
HOST_a1
,
addr
);

663 i‡(
	`IsC⁄°
(
_Rt_
)) {

664 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

666 
u32
 
π
=
	`RódReg
(
_Rt_
);

667 
	`MOV32RtoR
(
HOST_a2
, 
π
);

669 
	`CALLFunc
((
u32
)
psxHwWrôe16
);

674 i‡(
	`IsC⁄°
(
_Rt_
)) {

675 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

677 
u32
 
π
=
	`RódReg
(
_Rt_
);

678 
	`MOV32RtoR
(
HOST_a2
, 
π
);

680 
	`iPushOfB
();

681 
	`PSXMEMWRITE16
();

682 
	}
}

685 
	$ªcSW
() {

688 i‡(
	`IsC⁄°
(
_Rs_
)) {

689 
u32
 
addr
 = 
iRegs
[
_Rs_
].
k
 + 
_Imm_
;

690 
t
 = 
addr
 >> 16;

692 i‡((
t
 & 0x1fe0) == 0 && (t & 0x1fff) != 0) {

693 i‡(
	`IsC⁄°
(
_Rt_
)) {

694 
	`MOV32ItoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], 
iRegs
[
_Rt_
].
k
);

696 
u32
 
π
=
	`RódReg
(
_Rt_
);

697 
	`MOV32RtoM
((
u32
)&
psxM
[
addr
 & 0x1fffff], 
π
);

701 i‡(
t
 =0x1f80 && 
addr
 < 0x1f801000) {

702 i‡(
	`IsC⁄°
(
_Rt_
)) {

703 
	`MOV32ItoM
((
u32
)&
psxH
[
addr
 & 0xfff], 
iRegs
[
_Rt_
].
k
);

705 
u32
 
π
=
	`RódReg
(
_Rt_
);

706 
	`MOV32RtoM
((
u32
)&
psxH
[
addr
 & 0xfff], 
π
);

710 i‡(
t
 == 0x1f80) {

711 
addr
) {

721 i‡(
	`IsC⁄°
(
_Rt_
)) {

722 
	`MOV32ItoM
((
u32
)&
psxH
[
addr
 & 0xffff], 
iRegs
[
_Rt_
].
k
);

724 
u32
 
π
=
	`RódReg
(
_Rt_
);

725 
	`MOV32RtoM
((
u32
)&
psxH
[
addr
 & 0xffff], 
π
);

730 i‡(
	`IsC⁄°
(
_Rt_
)) {

731 
	`MOV32ItoR
(
HOST_a1
,
iRegs
[
_Rt_
].
k
);

733 
u32
 
π
=
	`RódReg
(
_Rt_
);

734 
	`MOV32RtoR
(
HOST_a1
,
π
);

736 
	`CALLFunc
((
u32
)&
GPU_wrôeD©a
);

740 i‡(
	`IsC⁄°
(
_Rt_
)) {

741 
	`MOV32ItoR
(
HOST_a1
,
iRegs
[
_Rt_
].
k
);

743 
u32
 
π
=
	`RódReg
(
_Rt_
);

744 
	`MOV32RtoR
(
HOST_a1
,
π
);

746 
	`CALLFunc
((
u32
)&
GPU_wrôeSètus
);

750 i‡(
t
 =0x1f80 && 
addr
 >= 0x1f801000) {

751 
	`MOV32ItoR
(
HOST_a1
,
addr
);

752 i‡(
	`IsC⁄°
(
_Rt_
)) {

753 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

755 
u32
 
π
=
	`RódReg
(
_Rt_
);

756 
	`MOV32RtoR
(
HOST_a2
, 
π
);

758 
	`CALLFunc
((
u32
)
psxHwWrôe32
);

763 i‡(
	`IsC⁄°
(
_Rt_
)) {

764 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

766 
u32
 
π
=
	`RódReg
(
_Rt_
);

767 
	`MOV32RtoR
(
HOST_a2
, 
π
);

769 
	`iPushOfB
();

770 
	`PSXMEMWRITE32
();

771 
	}
}

775 
	$ªcLWL
() {

777 i‡(
_Rt_
) {

778 i‡(
	`IsC⁄°
(
_Rs_
)) {

779 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
 + 
_Imm_
);

782 
u32
 
rs
=
	`RódReg
(
_Rs_
);

783 
	`MOV32RtoR
(
HOST_a1
, 
rs
);

784 i‡(
_Imm_
Ë
	`ADD32ItoR
(
HOST_a1
, _Imm_);

787 
u32
 
ãmp
=
	`TempReg
();

788 
	`wrôe32
(
	`AND_IMM
(
ãmp
, 
HOST_a1
, 3, 0));

789 
	`wrôe32
(
	`BIC_IMM
(
HOST_a1
, HOST_a1, 3, 0));

790 
	`PSXMEMREAD32
();

791 
	`MOV32RtoR
(
HOST_a3
,
ãmp
);

793 
u32
 
π
;

794 i‡(
	`IsC⁄°
(
_Rt_
)) {

795 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

797 
π
=
	`RódReg
(
_Rt_
);

798 
	`MOV32RtoR
(
HOST_a2
, 
π
);

801 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 20));

802 
	`wrôe32
(0xe79ec102);

803 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 16));

804 
	`wrôe32
(0xe00cc001);

805 
	`wrôe32
(0xe79e3102);

806 
	`wrôe32
(0xe18c0310);

807 
	`wrôe32
(
	`B_FWD
(4));

808 
u32
 
LWL_MASK
[4]; 
	`wrôe32
((u32)LWL_MASK);

809 
u32
 
LWL_SHIFT
[4]; 
	`wrôe32
((u32)LWL_SHIFT);

811 
π
=
	`WrôeReg
(
_Rt_
);

812 
	`MOV32RtoR
(
π
,
HOST_a1
);

816 i‡(
	`IsC⁄°
(
_Rs_
)Ë
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[_Rs_].
k
 + 
_Imm_
);

818 
u32
 
rs
=
	`RódReg
(
_Rs_
);

819 
	`MOV32RtoR
(
HOST_a1
, 
rs
);

820 i‡(
_Imm_
Ë
	`ADD32ItoR
(
HOST_a1
, _Imm_);

822 
	`wrôe32
(
	`BIC_IMM
(
HOST_a1
, HOST_a1, 3, 0));

823 
	`PSXHWREAD32
();

825 
	}
}

828 
	$ªcLWR
() {

831 i‡(
_Rt_
) {

832 i‡(
	`IsC⁄°
(
_Rs_
)) {

833 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
 + 
_Imm_
);

836 
u32
 
rs
=
	`RódReg
(
_Rs_
);

837 
	`MOV32RtoR
(
HOST_a1
, 
rs
);

838 i‡(
_Imm_
Ë
	`ADD32ItoR
(
HOST_a1
, _Imm_);

841 
u32
 
ãmp
=
	`TempReg
();

842 
	`wrôe32
(
	`AND_IMM
(
ãmp
, 
HOST_a1
, 3, 0));

843 
	`wrôe32
(
	`BIC_IMM
(
HOST_a1
, HOST_a1, 3, 0));

844 
	`PSXMEMREAD32
();

845 
	`MOV32RtoR
(
HOST_a3
,
ãmp
);

847 
u32
 
π
;

848 i‡(
	`IsC⁄°
(
_Rt_
)) {

849 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

851 
π
=
	`RódReg
(
_Rt_
);

852 
	`MOV32RtoR
(
HOST_a2
, 
π
);

855 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 20));

856 
	`wrôe32
(0xe79ec102);

857 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 16));

858 
	`wrôe32
(0xe00cc001);

859 
	`wrôe32
(0xe79e3102);

860 
	`wrôe32
(0xe18c0330);

861 
	`wrôe32
(
	`B_FWD
(4));

862 
u32
 
LWR_MASK
[4]; 
	`wrôe32
((u32)LWR_MASK);

863 
u32
 
LWR_SHIFT
[4]; 
	`wrôe32
((u32)LWR_SHIFT);

865 
π
=
	`WrôeReg
(
_Rt_
);

866 
	`MOV32RtoR
(
π
,
HOST_a1
);

870 i‡(
	`IsC⁄°
(
_Rs_
))

871 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
 + 
_Imm_
);

873 
u32
 
rs
=
	`RódReg
(
_Rs_
);

874 
	`MOV32RtoR
(
HOST_a1
, 
rs
);

875 i‡(
_Imm_
Ë
	`ADD32ItoR
(
HOST_a1
, _Imm_);

877 
	`wrôe32
(
	`BIC_IMM
(
HOST_a1
, HOST_a1, 3, 0));

878 
	`PSXHWREAD32
();

880 
	}
}

883 
	$ªcSWL
() {

886 i‡(
	`IsC⁄°
(
_Rs_
)) {

887 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
 + 
_Imm_
);

889 
u32
 
rs
=
	`RódReg
(
_Rs_
);

890 
	`MOV32RtoR
(
HOST_a1
, 
rs
);

891 i‡(
_Imm_
Ë
	`ADD32ItoR
(
HOST_a1
, _Imm_);

894 
u32
 
ãmp
=
	`TempReg
();

895 
	`wrôe32
(
	`AND_IMM
(
ãmp
, 
HOST_a1
, 3, 0));

896 
	`wrôe32
(
	`BIC_IMM
(
HOST_a1
, HOST_a1, 3, 0));

897 
	`wrôe32
(0xe92d0001);

898 
	`PSXMEMREAD32
();

899 
	`MOV32RtoR
(
HOST_a3
,
ãmp
);

901 i‡(
	`IsC⁄°
(
_Rt_
)) {

902 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

904 
u32
 
π
=
	`RódReg
(
_Rt_
);

905 
	`MOV32RtoR
(
HOST_a2
, 
π
);

908 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 20));

909 
	`wrôe32
(0xe79ec102);

910 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 16));

911 
	`wrôe32
(0xe00cc000);

912 
	`wrôe32
(0xe79e3102);

913 
	`wrôe32
(0xe18c0331);

914 
	`wrôe32
(
	`B_FWD
(4));

915 
u32
 
SWL_MASK
[4]; 
	`wrôe32
((u32)SWL_MASK);

916 
u32
 
SWL_SHIFT
[4]; 
	`wrôe32
((u32)SWL_SHIFT);

918 
	`MOV32RtoR
(
HOST_a2
,
HOST_a1
);

919 
	`wrôe32
(0xe8bd0001);

920 
	`PSXMEMWRITE32
();

921 
	}
}

924 
	$ªcSWR
() {

927 i‡(
	`IsC⁄°
(
_Rs_
)) {

928 
	`MOV32ItoR
(
HOST_a1
, 
iRegs
[
_Rs_
].
k
 + 
_Imm_
);

930 
u32
 
rs
=
	`RódReg
(
_Rs_
);

931 
	`MOV32RtoR
(
HOST_a1
, 
rs
);

932 i‡(
_Imm_
Ë
	`ADD32ItoR
(
HOST_a1
, _Imm_);

935 
u32
 
ãmp
=
	`TempReg
();

936 
	`wrôe32
(
	`AND_IMM
(
ãmp
, 
HOST_a1
, 3, 0));

937 
	`wrôe32
(
	`BIC_IMM
(
HOST_a1
, HOST_a1, 3, 0));

938 
	`wrôe32
(0xe92d0001);

939 
	`PSXMEMREAD32
();

940 
	`MOV32RtoR
(
HOST_a3
,
ãmp
);

942 i‡(
	`IsC⁄°
(
_Rt_
)) {

943 
	`MOV32ItoR
(
HOST_a2
, 
iRegs
[
_Rt_
].
k
);

945 
u32
 
π
=
	`RódReg
(
_Rt_
);

946 
	`MOV32RtoR
(
HOST_a2
, 
π
);

949 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 20));

950 
	`wrôe32
(0xe79ec102);

951 
	`wrôe32
(
	`LDR_IMM
(
HOST_Ã
, 
HOST_pc
, 16));

952 
	`wrôe32
(0xe00cc000);

953 
	`wrôe32
(0xe79e3102);

954 
	`wrôe32
(0xe18c0311);

955 
	`wrôe32
(
	`B_FWD
(4));

956 
u32
 
SWR_MASK
[4]; 
	`wrôe32
((u32)SWR_MASK);

957 
u32
 
SWR_SHIFT
[4]; 
	`wrôe32
((u32)SWR_SHIFT);

959 
	`MOV32RtoR
(
HOST_a2
,
HOST_a1
);

960 
	`wrôe32
(0xe8bd0001);

961 
	`PSXMEMWRITE32
();

962 
	}
}

	@src/recompiler/arm_old/rec_misc.h

22 
	$ªcSYSCALL
() {

24 
	`iFlushRegs
();

26 
	`MOV32ItoR
(
HOST_a1
, 
pc
 - 4);

27 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
pc
, 
HOST_a1
);

28 
	`MOV32ItoR
(
HOST_a2
,(
bønch
 == 1 ? 1 : 0));

29 
	`MOV32ItoR
(
HOST_a1
,0x20);

30 
	`CALLFunc
 ((
u32
)
psxEx˚±i⁄
);

31 
bønch
 = 2;

32 
	`iRë
();

33 
	}
}

36 
	$ªcBREAK
() {

37 
	}
}

40 
	$ªcMFHI
() {

42 i‡(
_Rd_
)

44 i‡(
	`IsC⁄°
(33)) {

45 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[33].
k
);

47 
u32
 
hi
=
	`RódReg
(33);

48 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

49 
	`MOV32RtoR
(
rd
,
hi
);

52 
	}
}

55 
	$ªcMTHI
() {

57 i‡(
	`IsC⁄°
(
_Rs_
)) {

58 
	`M≠C⁄°
(33, 
iRegs
[
_Rs_
].
k
);

60 
u32
 
rs
=
	`RódReg
(
_Rs_
);

61 
u32
 
hi
=
	`WrôeReg
(33);

62 
	`MOV32RtoR
(
hi
,
rs
);

64 
	}
}

67 
	$ªcMFLO
() {

69 i‡(
_Rd_
)

71 i‡(
	`IsC⁄°
(32)) {

72 
	`M≠C⁄°
(
_Rd_
, 
iRegs
[32].
k
);

74 
u32
 
lo
=
	`RódReg
(32);

75 
u32
 
rd
=
	`WrôeReg
(
_Rd_
);

76 
	`MOV32RtoR
(
rd
,
lo
);

79 
	}
}

82 
	$ªcMTLO
() {

84 i‡(
	`IsC⁄°
(
_Rs_
)) {

85 
	`M≠C⁄°
(32, 
iRegs
[
_Rs_
].
k
);

87 
u32
 
rs
=
	`RódReg
(
_Rs_
);

88 
u32
 
lo
=
	`WrôeReg
(32);

89 
	`MOV32RtoR
(
lo
,
rs
);

91 
	}
}

94 
	$ªcMFC0
() {

96 i‡(
_Rt_
)

98 
u32
 
π
=
	`WrôeReg
(
_Rt_
);

99 
	`MOV32MtoR_ªgs
(
π
, (
u32
)&
psxRegs
.
CP0
.
r
[
_Rd_
]);

101 
	}
}

104 
	$ªcCFC0
() {

107 
	`ªcMFC0
();

108 
	}
}

111 
	$ªcMTC0
() {

114 i‡(
	`IsC⁄°
(
_Rt_
)) {

115 i‡(
_Rd_
==13)

117 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP0
.
r
[
_Rd_
], 
iRegs
[
_Rt_
].
k
 & ~(0xfc00));

121 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
CP0
.
r
[
_Rd_
], 
iRegs
[
_Rt_
].
k
);

124 
u32
 
π
=
	`RódReg
(
_Rt_
);

125 i‡(
_Rd_
==13)

127 
	`MOV32RtoR
(
HOST_a1
, 
π
);

128 
	`AND32ItoR
(
HOST_a1
, ~(0xfc00));

129 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP0
.
r
[
_Rd_
], 
HOST_a1
);

133 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
CP0
.
r
[
_Rd_
], 
π
);

137 i‡(
_Rd_
 == 12 || _Rd_ == 13) {

138 
	`iFlushRegs
();

139 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
, (u32)pc);

140 
	`CALLFunc
((
u32
)
psxTe°SWI¡s
);

141 i‡(
bønch
 == 0) {

142 
bønch
 = 2;

143 
	`iRë
();

146 
	}
}

149 
	$ªcCTC0
() {

152 
	`ªcMTC0
();

153 
	}
}

156 
	$ªcRFE
() {

158 
	`MOV32MtoR_ªgs
(
HOST_ù
,&
psxRegs
.
CP0
.
n
.
Sètus
);

159 
	`wrôe32
(0xe20c203c);

160 
	`wrôe32
(0xe3cc100f);

161 
	`wrôe32
(0xe1813122);

162 
	`MOV32RtoM_ªgs
(&
psxRegs
.
CP0
.
n
.
Sètus
,
HOST_a4
);

164 
	`iFlushRegs
();

165 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
, (u32)pc);

166 
	`CALLFunc
((
u32
)
psxTe°SWI¡s
);

167 i‡(
bønch
 == 0) {

168 
bønch
 = 2;

169 
	`iRë
();

171 
	}
}

173 
	$ªcHLE
() {

174 
	`iFlushRegs
();

175 
	`CALLFunc
((
u32
)
psxHLEt
[
psxRegs
.
code
 & 0xffff]);

176 
bønch
 = 2;

177 
	`iRë
();

178 
	}
}

	@src/recompiler/arm_old/recompiler.cpp

25 
	~"psxcomm⁄.h
"

26 
	~"psxhw.h
"

27 
	~"r3000a.h
"

28 
	~"psxmem.h
"

29 
	~"¨m.h
"

30 
	~"p‹t.h
"

32 
u32
 
	gpsxRecLUT
[0x010000];

34 #unde‡
PC_REC


35 #unde‡
PC_REC8


36 #unde‡
PC_REC16


37 #unde‡
PC_REC32


38 
	#PC_REC
(
x
Ë(
psxRecLUT
[x >> 16] + (x & 0xffff))

	)

39 
	#PC_REC8
(
x
Ë(*(
u8
 *)
	`PC_REC
(x))

	)

40 
	#PC_REC16
(
x
Ë(*(
u16
*)
	`PC_REC
(x))

	)

41 
	#PC_REC32
(
x
Ë(*(
u32
*)
	`PC_REC
(x))

	)

43 
	#RECMEM_SIZE
 (12 * 1024 * 1024)

	)

45 
	gªcMem
[
RECMEM_SIZE
 + 0x1000];

46 
	gªcRAM
[0x200000];

47 
	gªcROM
[0x080000];

49 
u32
 
	gpc
;

50 
u32
 
	gpcﬁd
;

51 
	gcou¡
;

52 
	gbønch
;

53 
u32
 
	gèrgë
;

54 
u32
 
	gblock
=0;

57 
u32
 
	m°©e
;

58 
u32
 
	mk
;

59 
u32
 
	mªg
;

60 
u32
 
	mªgw
;

61 } 
	tiRegi°îs
;

63 
iRegi°îs
 
	giRegs
[34];

64 
iRegi°îs
 
	giRegsS
[34];

65 
iRegi°îs
 
	gHWRegs
[16];

66 
iRegi°îs
 
	gHWRegsS
[16];

68 
	#ST_UNK
 0

	)

69 
	#ST_CONST
 1

	)

70 
	#ST_MAPPED
 2

	)

72 
	#IsC⁄°
(
ªg
Ë(
iRegs
[ªg].
°©e
 =
ST_CONST
)

	)

73 
	#IsM≠≥d
(
ªg
Ë(
iRegs
[ªg].
°©e
 =
ST_MAPPED
)

	)

75 (*
ªcBSC
[64])();

76 (*
ªcSPC
[64])();

77 (*
ªcREG
[32])();

78 (*
ªcCP0
[32])();

79 (*
ªcCP2
[64])();

80 (*
ªcCP2BSC
[32])();

82 
	$M≠C⁄°
(
u32
 
ªg
, u32 
_c⁄°
) {

83 i‡(
	`IsM≠≥d
(
ªg
)Ë
HWRegs
[
iRegs
[ªg].ªg].
°©e
=
ST_UNK
;

84 
iRegs
[
ªg
].
k
 = 
_c⁄°
;

85 
iRegs
[
ªg
].
°©e
 = 
ST_CONST
;

86 
	}
}

88 
	$Unm≠
(
u32
 
ªg
)

90 i‡(
	`IsM≠≥d
(
ªg
)Ë
HWRegs
[
iRegs
[ªg].ªg].
°©e
=
ST_UNK
;

91 
iRegs
[
ªg
].
°©e
 = 
ST_UNK
;

92 
	}
}

94 
	$iFlushReg
(
u32
 
ªg
) {

95 i‡(
	`IsC⁄°
(
ªg
)) {

96 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
GPR
.
r
[
ªg
], 
iRegs
[ªg].
k
);

97 } i‡(
	`IsM≠≥d
(
ªg
)) {

98 i‡(
iRegs
[
ªg
].
ªgw
)

100 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
GPR
.
r
[
ªg
], 
iRegs
[reg].reg);

102 
HWRegs
[
iRegs
[
ªg
].ªg].
°©e
=
ST_UNK
;

104 
iRegs
[
ªg
].
°©e
 = 
ST_UNK
;

105 
	}
}

107 
	$iFlushRegs
() {

108 
i
;

110 i‡(
	`IsM≠≥d
(0)Ë
	`Unm≠
(0);

111 
iRegs
[0].
k
 = 0; iRegs[0].
°©e
 = 
ST_CONST
;

112 
i
=1; i<34; i++) {

113 
	`iFlushReg
(
i
);

115 
	}
}

117 
u32
 
	$GëReg
(
u32
 
ªg
)

119 
i
,
j
=0;

120 
u32
 
k
=0;

121 
i
=0;i<16;i++)

123 i‡(
HWRegs
[
i
].
°©e
==
ST_UNK
)

125 
HWRegs
[
i
].
°©e
=
ST_MAPPED
;

126 
HWRegs
[
i
].
k
=0;

127 
HWRegs
[
i
].
ªg
=reg;

128 
j
=
i
;

129 
i
=0;i<16;i++Ë
HWRegs
[i].
k
++;

130  
j
;

132 i‡((
HWRegs
[
i
].
°©e
==
ST_MAPPED
Ë&& (HWRegs[i].
k
>k))

134 
j
=
i
;

135 
k
=
HWRegs
[
i
].k;

138 
	`iFlushReg
(
HWRegs
[
j
].
ªg
);

139 
HWRegs
[
j
].
°©e
=
ST_MAPPED
;

140 
HWRegs
[
j
].
k
=0;

141 
HWRegs
[
j
].
ªg
=reg;

142 
i
=0;i<16;i++Ë
HWRegs
[i].
k
++;

143  
j
;

144 
	}
}

146 
u32
 
	$TempReg
()

148 
i
,
j
=0;

149 
u32
 
k
=0;

150 
i
=0;i<16;i++)

152 i‡(
HWRegs
[
i
].
°©e
==
ST_UNK
)

154  
i
;

156 i‡((
HWRegs
[
i
].
°©e
==
ST_MAPPED
Ë&& (HWRegs[i].
k
>k))

158 
j
=
i
;

159 
k
=
HWRegs
[
i
].k;

162 
	`iFlushReg
(
HWRegs
[
j
].
ªg
);

163  
j
;

164 
	}
}

166 
u32
 
	$RódReg
(
u32
 
ªg
) {

167 i‡(
iRegs
[
ªg
].
°©e
!=
ST_MAPPED
)

169 
iRegs
[
ªg
].ªg=
	`GëReg
(reg);

170 
iRegs
[
ªg
].
°©e
=
ST_MAPPED
;

171 
	`MOV32MtoR_ªgs
(
iRegs
[
ªg
].ªg,&
psxRegs
.
GPR
.
r
[reg]);

172 
iRegs
[
ªg
].
ªgw
=0;

176 
HWRegs
[
iRegs
[
ªg
].ªg].
k
=1;

178  
iRegs
[
ªg
].reg;

179 
	}
}

181 
u32
 
	$WrôeReg
(
u32
 
ªg
) {

182 i‡(
iRegs
[
ªg
].
°©e
!=
ST_MAPPED
)

184 
iRegs
[
ªg
].ªg=
	`GëReg
(reg);

185 
iRegs
[
ªg
].
°©e
=
ST_MAPPED
;

186 
iRegs
[
ªg
].
ªgw
=1;

190 
iRegs
[
ªg
].
ªgw
=1;

191 
HWRegs
[
iRegs
[
ªg
].ªg].
k
=1;

193  
iRegs
[
ªg
].reg;

194 
	}
}

196 
u32
 
	$RódWrôeReg
(
u32
 
ªg
) {

197 i‡(
iRegs
[
ªg
].
°©e
!=
ST_MAPPED
)

199 
iRegs
[
ªg
].ªg=
	`GëReg
(reg);

200 
iRegs
[
ªg
].
°©e
=
ST_MAPPED
;

201 
	`MOV32MtoR_ªgs
(
iRegs
[
ªg
].ªg,&
psxRegs
.
GPR
.
r
[reg]);

202 
iRegs
[
ªg
].
ªgw
=1;

206 
iRegs
[
ªg
].
ªgw
=1;

207 
HWRegs
[
iRegs
[
ªg
].ªg].
k
=1;

209  
iRegs
[
ªg
].reg;

210 
	}
}

212 
	$iRë
() {

214 
cou¡
 = ((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
;

215 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cou¡
);

216 
	`RET
();

217 
	}
}

219 
	$iLﬂdTe°
() {

220 
u32
 
tmp
;

223 
tmp
 = 
psxRegs
.
code
 >> 26;

224 
tmp
) {

226 
_Rs_
) {

233 
_Fun˘_
) {

235 
_Rs_
) {

246 i‡(
tmp
 >= 0x20 &&Åmp <= 0x26) {

252 
	}
}

255 
	$SëBønch
() {

256 
bønch
 = 1;

257 
psxRegs
.
code
 = 
	`PSXMu32
(
pc
);

258 
pc
 += 4;

260 i‡(
	`iLﬂdTe°
() == 1) {

261 
	`iFlushRegs
();

262 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
,ÖsxRegs.code);

264 
cou¡
 = ((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
;

265 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cou¡
);

267 
	`MOV32MtoR
(
HOST_a2
,(
u32
)&
èrgë
);

268 
	`MOV32ItoR
(
HOST_a1
,
_Rt_
);

269 
	`CALLFunc
((
u32
)
psxDñayTe°
);

271 
	`RET
();

275 
ªcBSC
[
psxRegs
.
code
>>26]();

277 
	`iFlushRegs
();

278 
	`MOV32MtoR
(
HOST_a1
, (
u32
)&
èrgë
);

279 
	`MOV32RtoM_ªgs
((
u32
)&
psxRegs
.
pc
, 
HOST_a1
);

280 
	`CALLFunc
((
u32
)
psxBønchTe°
);

282 
	`iRë
();

283 
	}
}

285 
	$iJump
(
u32
 
bønchPC
) {

286 
bønch
 = 1;

287 
psxRegs
.
code
 = 
	`PSXMu32
(
pc
);

288 
pc
+=4;

290 i‡(
	`iLﬂdTe°
() == 1) {

291 
	`iFlushRegs
();

292 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
,ÖsxRegs.code);

294 
cou¡
 = ((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
;

295 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cou¡
);

297 
	`MOV32ItoR
(
HOST_a2
,
bønchPC
);

298 
	`MOV32ItoR
(
HOST_a1
,
_Rt_
);

299 
	`CALLFunc
((
u32
)
psxDñayTe°
);

301 
	`RET
();

305 
ªcBSC
[
psxRegs
.
code
>>26]();

307 
	`iFlushRegs
();

308 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
, 
bønchPC
);

309 
	`CALLFunc
((
u32
)
psxBønchTe°
);

311 
cou¡
 = ((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
;

312 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cou¡
);

315 
	`MOV32MtoR_ªgs
(
HOST_a1
,(
u32
)&
psxRegs
.
pc
);

316 
	`MOV32ItoR
(
HOST_a2
,
bønchPC
);

317 
	`wrôe32
(
	`CMP_REGS
(
HOST_a1
,
HOST_a2
));

318 
j8På
[0]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

319 
	`RET_NC
();

320 
	`¨mSëJ8
(
j8På
[0]);

322 
	`MOV32MtoR
(
HOST_a1
,
	`PC_REC
(
bønchPC
));

323 
j8På
[1]=
	`JNZ8
(
HOST_a1
);

324 
	`RET_NC
();

325 
	`¨mSëJ8
(
j8På
[1]);

327 
	`MOV32RtoR
(
HOST_pc
,
HOST_a1
);

328 
	}
}

330 
	$iBønch
(
u32
 
bønchPC
, 
ßve˘x
) {

332 i‡(
ßve˘x
) {

333 
	`mem˝y
(
iRegsS
, 
iRegs
, (iRegs));

334 
	`mem˝y
(
HWRegsS
, 
HWRegs
, (HWRegs));

337 
bønch
 = 1;

338 
psxRegs
.
code
 = 
	`PSXMu32
(
pc
);

342 i‡(
ßve˘x
 =0 && 
	`iLﬂdTe°
() == 1) {

343 
	`iFlushRegs
();

344 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
code
,ÖsxRegs.code);

346 
cou¡
 = (((
pc
+4Ë- 
pcﬁd
Ë/ 4Ë* 
BIAS
;

347 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cou¡
);

349 
	`MOV32ItoR
(
HOST_a2
,
bønchPC
);

350 
	`MOV32ItoR
(
HOST_a1
,
_Rt_
);

351 
	`CALLFunc
((
u32
)
psxDñayTe°
);

353 
	`RET
();

357 
pc
+= 4;

358 
ªcBSC
[
psxRegs
.
code
>>26]();

360 
	`iFlushRegs
();

361 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
, 
bønchPC
);

362 
	`CALLFunc
((
u32
)
psxBønchTe°
);

364 
cou¡
 = ((
pc
 - 
pcﬁd
Ë/ 4Ë* 
BIAS
;

365 
	`ADD32ItoM_ªgs
((
u32
)&
psxRegs
.
cy˛e
, 
cou¡
);

368 
	`MOV32MtoR_ªgs
(
HOST_a1
,(
u32
)&
psxRegs
.
pc
);

369 
	`MOV32ItoR
(
HOST_a2
,
bønchPC
);

370 
	`wrôe32
(
	`CMP_REGS
(
HOST_a1
,
HOST_a2
));

371 
j8På
[1]=
¨mPå
; 
	`wrôe32
(
	`BEQ_FWD
(0));

372 
	`RET_NC
();

373 
	`¨mSëJ8
(
j8På
[1]);

375 
	`MOV32MtoR
(
HOST_a1
,
	`PC_REC
(
bønchPC
));

376 
j8På
[2]=
	`JNZ8
(
HOST_a1
);

377 
	`RET_NC
();

378 
	`¨mSëJ8
(
j8På
[2]);

380 
	`MOV32RtoR
(
HOST_pc
,
HOST_a1
);

382 
pc
-= 4;

383 i‡(
ßve˘x
) {

384 
	`mem˝y
(
iRegs
, 
iRegsS
, (iRegs));

385 
	`mem˝y
(
HWRegs
, 
HWRegsS
, (HWRegs));

387 
	}
}

389 
	$ªcInô
() {

390 
i
;

392 
	`mem£t
(
ªcMem
,0,
RECMEM_SIZE
 + 0x1000);

394 
i
=0; i<0x80; i++Ë
psxRecLUT
[ò+ 0x0000] = (
u32
)&
ªcRAM
[(i & 0x1f) << 16];

395 
	`mem˝y
(
psxRecLUT
 + 0x8000,ÖsxRecLUT, 0x80 * 4);

396 
	`mem˝y
(
psxRecLUT
 + 0xa000,ÖsxRecLUT, 0x80 * 4);

398 
i
=0; i<0x08; i++Ë
psxRecLUT
[ò+ 0xbfc0] = (
u32
)&
ªcROM
[i << 16];

401 
	}
}

403 
	$ªcRe£t
() {

404 
	`mem£t
(
ªcRAM
, 0, 0x200000);

405 
	`mem£t
(
ªcROM
, 0, 0x080000);

407 
¨mPå
=(
u32
*)
ªcMem
;

409 
bønch
 = 0;

410 
	`mem£t
(
iRegs
, 0, (iRegs));

411 
iRegs
[0].
°©e
 = 
ST_CONST
;

412 
iRegs
[0].
k
 = 0;

414 
	`mem£t
(
HWRegs
, 0, (HWRegs));

415 
HWRegs
[0].
°©e
 = 
ST_CONST
;

416 
HWRegs
[1].
°©e
 = 
ST_CONST
;

417 
HWRegs
[2].
°©e
 = 
ST_CONST
;

418 
HWRegs
[3].
°©e
 = 
ST_CONST
;

419 
HWRegs
[11].
°©e
 = 
ST_CONST
;

420 
HWRegs
[12].
°©e
 = 
ST_CONST
;

421 
HWRegs
[13].
°©e
 = 
ST_CONST
;

422 
HWRegs
[14].
°©e
 = 
ST_CONST
;

423 
HWRegs
[15].
°©e
 = 
ST_CONST
;

424 
	}
}

426 
	$ªcShutdown
() {

427 
	}
}

429 
	~"›codes.h
"

431 
	$ªcRecompûe
() {

432 
u32
 *
¨mPå_ﬁd
;

435 i‡(((
u32
)
¨mPå
 - (u32)
ªcMem
Ë>(
RECMEM_SIZE
 - 0x10000))

436 
	`ªcRe£t
();

438 
¨mPå
 = (
u32
*)(((u32)armPtr + 32) & ~(31));

439 
¨mPå_ﬁd
=
¨mPå
;

441 
	`PC_REC32
(
psxRegs
.
pc
Ë(
u32
)
¨mPå
;

442 
pc
 = 
psxRegs
.pc;

443 
pcﬁd
 = 
pc
;

445 
cou¡
 = 0; count < 500;) {

446 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

448 
pc
 += 4;

449 
cou¡
++;

450 
ªcBSC
[
psxRegs
.
code
 >> 26]();

452 i‡(
bønch
) {

453 
bønch
 = 0;

454 
	`sys_ˇcheÊush
(
¨mPå_ﬁd
,
¨mPå
);

459 
	`iFlushRegs
();

461 
	`MOV32ItoM_ªgs
((
u32
)&
psxRegs
.
pc
,Öc);

463 
	`iRë
();

465 
	`sys_ˇcheÊush
(
¨mPå_ﬁd
,
¨mPå
);

466 
	}
}

468 
	$ªcExecuã
() {

471 
u32
 *
p
 = (u32*)
	`PC_REC
(
psxRegs
.
pc
);

472 i‡(*
p
 =0Ë
	`ªcRecompûe
();

473 
	`ªcRun
(*
p
,(
u32
)&
psxRegs
);

475 
	}
}

477 
	$ªcExecuãBlock
(
èrgë_pc
) {

478 
block
=1;

480 
u32
 *
p
 = (u32*)
	`PC_REC
(
psxRegs
.
pc
);

481 i‡(*
p
 =0Ë
	`ªcRecompûe
();

482 
	`ªcRun
(*
p
,(
u32
)&
psxRegs
);

483 }
psxRegs
.
pc
!=
èrgë_pc
);

484 
block
=0;

485 
	}
}

487 
	$ªcCÀ¨
(
u32
 
Addr
, u32 
Size
) {

488 
	`mem£t
((*)
	`PC_REC
(
Addr
), 0, 
Size
 * 4);

489 
	}
}

491 
R3000A˝u
 
	gpsxRec
 = {

492 
ªcInô
,

493 
ªcRe£t
,

494 
ªcExecuã
,

495 
ªcExecuãBlock
,

496 
ªcCÀ¨
,

497 
ªcShutdown


	@src/recompiler/arm_old/risc_armv4le.h

22 
	#DRC_PTR_SIZE_IM
 
Bô32u


	)

25 
Bô8u
 
	tHo°Reg
;

28 
	#HOST_r0
 0

	)

29 
	#HOST_r1
 1

	)

30 
	#HOST_r2
 2

	)

31 
	#HOST_r3
 3

	)

32 
	#HOST_r4
 4

	)

33 
	#HOST_r5
 5

	)

34 
	#HOST_r6
 6

	)

35 
	#HOST_r7
 7

	)

37 
	#HOST_r8
 8

	)

38 
	#HOST_r9
 9

	)

39 
	#HOST_r10
 10

	)

40 
	#HOST_r11
 11

	)

41 
	#HOST_r12
 12

	)

42 
	#HOST_r13
 13

	)

43 
	#HOST_r14
 14

	)

44 
	#HOST_r15
 15

	)

48 
	#HOST_a1
 
HOST_r0


	)

49 
	#HOST_a2
 
HOST_r1


	)

50 
	#HOST_a3
 
HOST_r2


	)

51 
	#HOST_a4
 
HOST_r3


	)

52 
	#HOST_v1
 
HOST_r4


	)

53 
	#HOST_v2
 
HOST_r5


	)

54 
	#HOST_v3
 
HOST_r6


	)

55 
	#HOST_v4
 
HOST_r7


	)

57 
	#HOST_v5
 
HOST_r8


	)

58 
	#HOST_v6
 
HOST_r9


	)

59 
	#HOST_v7
 
HOST_r10


	)

60 
	#HOST_v8
 
HOST_r11


	)

61 
	#HOST_ù
 
HOST_r12


	)

62 
	#HOST_•
 
HOST_r13


	)

63 
	#HOST_Ã
 
HOST_r14


	)

64 
	#HOST_pc
 
HOST_r15


	)

67 
	#ãmp1
 
HOST_ù


	)

68 
	#ãmp2
 
HOST_Ã


	)

69 
	#ãmp3
 
HOST_a4


	)

72 
	#FC_RETOP
 
HOST_a1


	)

75 
	#FC_OP1
 
HOST_a1


	)

78 
	#FC_OP2
 
HOST_a2


	)

81 
	#ROTATE_SCALE
(
x
Ë–(x)?(32 - x):(0Ë)

	)

87 
	#MOV_IMM
(
d°
, 
imm
, 
rimm
Ë(0xe3a00000 + ((d°Ë<< 12Ë+ (immË+ (‘immË<< 7Ë)

	)

89 
	#MOV_REG_LSL_IMM
(
d°
, 
§c
, 
imm
Ë(0xe1a00000 + ((d°Ë<< 12Ë+ (§cË+ ((immË<< 7Ë)

	)

91 
	#MOVS_REG_LSL_IMM
(
d°
, 
§c
, 
imm
Ë(0xe1b00000 + ((d°Ë<< 12Ë+ (§cË+ ((immË<< 7Ë)

	)

93 
	#MOV_REG_LSR_IMM
(
d°
, 
§c
, 
imm
Ë(0xe1a00020 + ((d°Ë<< 12Ë+ (§cË+ ((immË<< 7Ë)

	)

95 
	#MOV_REG_ASR_IMM
(
d°
, 
§c
, 
imm
Ë(0xe1a00040 + ((d°Ë<< 12Ë+ (§cË+ ((immË<< 7Ë)

	)

97 
	#MOV_REG_LSL_REG
(
d°
, 
§c
, 
ºeg
Ë(0xe1a00010 + ((d°Ë<< 12Ë+ (§cË+ (‘ªgË<< 8Ë)

	)

99 
	#MOV_REG_LSR_REG
(
d°
, 
§c
, 
ºeg
Ë(0xe1a00030 + ((d°Ë<< 12Ë+ (§cË+ (‘ªgË<< 8Ë)

	)

101 
	#MOV_REG_ASR_REG
(
d°
, 
§c
, 
ºeg
Ë(0xe1a00050 + ((d°Ë<< 12Ë+ (§cË+ (‘ªgË<< 8Ë)

	)

103 
	#MOV_REG_ROR_REG
(
d°
, 
§c
, 
ºeg
Ë(0xe1a00070 + ((d°Ë<< 12Ë+ (§cË+ (‘ªgË<< 8Ë)

	)

105 
	#MVN_IMM
(
d°
, 
imm
, 
rimm
Ë(0xe3e00000 + ((d°Ë<< 12Ë+ (immË+ (‘immË<< 7Ë)

	)

109 
	#ADD_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0xe2800000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

111 
	#ADD_REG_LSL_IMM
(
d°
, 
§c1
, 
§c2
, 
imm
Ë(0xe0800000 + ((d°Ë<< 12Ë+ ((§c1Ë<< 16Ë+ (§c2Ë+ ((immË<< 7Ë)

	)

113 
	#SUB_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0xe2400000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

115 
	#SUB_REG_LSL_IMM
(
d°
, 
§c1
, 
§c2
, 
imm
Ë(0xe0400000 + ((d°Ë<< 12Ë+ ((§c1Ë<< 16Ë+ (§c2Ë+ ((immË<< 7Ë)

	)

117 
	#RSB_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0xe2600000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

119 
	#CMP_IMM
(
§c
, 
imm
, 
rimm
Ë(0xe3500000 + ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

121 
	#NOP
 
	`MOV_REG_LSL_IMM
(
HOST_r0
, HOST_r0, 0)

	)

125 
	#TST_IMM
(
§c
, 
imm
, 
rimm
Ë(0xe3100000 + ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

127 
	#AND_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0xe2000000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

129 
	#AND_REG_LSL_IMM
(
d°
, 
§c1
, 
§c2
, 
imm
Ë(0xe0000000 + ((d°Ë<< 12Ë+ ((§c1Ë<< 16Ë+ (§c2Ë+ ((immË<< 7Ë)

	)

131 
	#ORR_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0xe3800000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

133 
	#ORR_REG_LSL_IMM
(
d°
, 
§c1
, 
§c2
, 
imm
Ë(0xe1800000 + ((d°Ë<< 12Ë+ ((§c1Ë<< 16Ë+ (§c2Ë+ ((immË<< 7Ë)

	)

135 
	#ORR_REG_LSR_IMM
(
d°
, 
§c1
, 
§c2
, 
imm
Ë(0xe1800020 + ((d°Ë<< 12Ë+ ((§c1Ë<< 16Ë+ (§c2Ë+ ((immË<< 7Ë)

	)

137 
	#EOR_REG_LSL_IMM
(
d°
, 
§c1
, 
§c2
, 
imm
Ë(0xe0200000 + ((d°Ë<< 12Ë+ ((§c1Ë<< 16Ë+ (§c2Ë+ ((immË<< 7Ë)

	)

139 
	#BIC_IMM
(
d°
, 
§c
, 
imm
, 
rimm
Ë(0xe3c00000 + ((d°Ë<< 12Ë+ ((§cË<< 16Ë+ (immË+ (‘immË<< 7Ë)

	)

143 
	#LDR_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe5900000 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (immË)

	)

145 
	#LDRH_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe1d000b0 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (((immË& 0xf0Ë<< 4Ë+ ((immË& 0x0fË)

	)

147 
	#LDRB_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe5d00000 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (immË)

	)

151 
	#STR_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe5800000 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (immË)

	)

153 
	#STRH_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe1c000b0 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (((immË& 0xf0Ë<< 4Ë+ ((immË& 0x0fË)

	)

155 
	#STRB_IMM
(
ªg
, 
addr
, 
imm
Ë(0xe5c00000 + (‘egË<< 12Ë+ (◊ddrË<< 16Ë+ (immË)

	)

159 
	#BEQ_FWD
(
imm
Ë(0x0a000000 + ((immË>> 2Ë)

	)

161 
	#BNE_FWD
(
imm
Ë(0x1a000000 + ((immË>> 2Ë)

	)

163 
	#BCS_FWD
(
imm
Ë(0x2a000000 + ((immË>> 2Ë)

	)

165 
	#BCC_FWD
(
imm
Ë(0x3a000000 + ((immË>> 2Ë)

	)

167 
	#BHS_FWD
(
imm
Ë(0x2a000000 + ((immË>> 2Ë)

	)

169 
	#BLO_FWD
(
imm
Ë(0x3a000000 + ((immË>> 2Ë)

	)

171 
	#BHI_FWD
(
imm
Ë(0x8a000000 + ((immË>> 2Ë)

	)

173 
	#BLS_FWD
(
imm
Ë(0x9a000000 + ((immË>> 2Ë)

	)

175 
	#BMI_FWD
(
imm
Ë(0x4a000000 + ((immË>> 2Ë)

	)

177 
	#BPL_FWD
(
imm
Ë(0x5a000000 + ((immË>> 2Ë)

	)

179 
	#BGE_FWD
(
imm
Ë(0xØ000000 + ((immË>> 2Ë)

	)

181 
	#BLT_FWD
(
imm
Ë(0xba000000 + ((immË>> 2Ë)

	)

183 
	#BGT_FWD
(
imm
Ë(0xˇ000000 + ((immË>> 2Ë)

	)

185 
	#BLE_FWD
(
imm
Ë(0xda000000 + ((immË>> 2Ë)

	)

187 
	#B_FWD
(
imm
Ë(0xó000000 + ((immË>> 2Ë)

	)

189 
	#MOV_IMM_INT
(
d°
, 
imm
Ë(0xe3a00000 + ((d°Ë<< 12Ë+ (immË)

	)

190 
	#MVN_IMM_INT
(
d°
, 
imm
Ë(0xe3e00000 + ((d°Ë<< 12Ë+ (immË)

	)

191 
	#CMP_REGS
(
ªg1
,
ªg2
Ë(0xe1500000 + (ªg1<<16Ë+ (ªg2))

	)

192 
	#MOVGE_IMM
(
d°
, 
imm
, 
rimm
Ë(0xa3a00000 + ((d°Ë<< 12Ë+ (immË+ (‘immË<< 7Ë)

	)

193 
	#MOVLT_IMM
(
d°
, 
imm
, 
rimm
Ë(0xb3a00000 + ((d°Ë<< 12Ë+ (immË+ (‘immË<< 7Ë)

	)

194 
	#MOVCS_IMM
(
d°
, 
imm
, 
rimm
Ë(0x23a00000 + ((d°Ë<< 12Ë+ (immË+ (‘immË<< 7Ë)

	)

195 
	#MOVCC_IMM
(
d°
, 
imm
, 
rimm
Ë(0x33a00000 + ((d°Ë<< 12Ë+ (immË+ (‘immË<< 7Ë)

	)

196 
	#BL_FWD
(
imm
Ë(0xeb000000 + (imm))

	)

199 
	$gí_mov_ªgs
(
Ho°Reg
 
ªg_d°
,Ho°Reg 
ªg_§c
) {

200 if(
ªg_§c
 =
ªg_d°
) ;

201 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
ªg_d°
, 
ªg_§c
, 0) );

202 
	}
}

204 
Bô32u
 
	$gíimm
(
Bô32u
 
imm
,Bô32u *
ícoded
)

206 if(
imm
==0Ë{*
ícoded
=0; 1;}

207 
i
=32;

208 
i
>0)

210 if(
imm
<256) {

211 *
ícoded
=((
i
&30)<<7)|
imm
;

214 
imm
=(imm>>2)|(imm<<30);
i
-=2;

217 
	}
}

220 
	$gí_mov_dw‹d_to_ªg_imm
(
Ho°Reg
 
de°_ªg
,
Bô32u
 
imm
) {

221 
Bô32u
 
¨mvÆ
;

222 if(
	`gíimm
(
imm
,&
¨mvÆ
))

224 
	`wrôe32
–
	`MOV_IMM_INT
(
de°_ªg
,
¨mvÆ
) );

226 if(
	`gíimm
(~
imm
,&
¨mvÆ
))

228 
	`wrôe32
–
	`MVN_IMM_INT
(
de°_ªg
,
¨mvÆ
) );

231 
Bôs
 
fú°
, 
sˇÀ
;

232 
sˇÀ
 = 0;

233 
fú°
 = 1;

234 
imm
) {

235 (
imm
 & 3) == 0) {

236 
imm
>>=2;

237 
sˇÀ
+=2;

239 i‡(
fú°
) {

240 
	`wrôe32
–
	`MOV_IMM
(
de°_ªg
, 
imm
 & 0xff, 
	`ROTATE_SCALE
(
sˇÀ
)) );

241 
fú°
 = 0;

243 
	`wrôe32
–
	`ORR_IMM
(
de°_ªg
, de°_ªg, 
imm
 & 0xff, 
	`ROTATE_SCALE
(
sˇÀ
)) );

245 
imm
>>=8;

246 
sˇÀ
+=8;

249 
	}
}

252 
	$gí_mov_w‹d_to_ªg_hñ≥r
(
Ho°Reg
 
de°_ªg
,* 
d©a
,
boﬁ
 
dw‹d
,Ho°Reg 
d©a_ªg
) {

254 i‡(
dw‹d
) {

255 i‡((
Bô32u
)
d©a
 & 3) {

256 i‡–((
Bô32u
)
d©a
 & 3) == 2 ) {

257 
	`wrôe32
–
	`LDRH_IMM
(
de°_ªg
, 
d©a_ªg
, 0) );

258 
	`wrôe32
–
	`LDRH_IMM
(
ãmp2
, 
d©a_ªg
, 2) );

259 
	`wrôe32
–
	`ORR_REG_LSL_IMM
(
de°_ªg
, de°_ªg, 
ãmp2
, 16) );

261 
	`wrôe32
–
	`LDRB_IMM
(
de°_ªg
, 
d©a_ªg
, 0) );

262 
	`wrôe32
–
	`LDRH_IMM
(
ãmp2
, 
d©a_ªg
, 1) );

263 
	`wrôe32
–
	`ORR_REG_LSL_IMM
(
de°_ªg
, de°_ªg, 
ãmp2
, 8) );

264 
	`wrôe32
–
	`LDRB_IMM
(
ãmp2
, 
d©a_ªg
, 3) );

265 
	`wrôe32
–
	`ORR_REG_LSL_IMM
(
de°_ªg
, de°_ªg, 
ãmp2
, 24) );

268 
	`wrôe32
–
	`LDR_IMM
(
de°_ªg
, 
d©a_ªg
, 0) );

271 i‡((
Bô32u
)
d©a
 & 1) {

272 
	`wrôe32
–
	`LDRB_IMM
(
de°_ªg
, 
d©a_ªg
, 0) );

273 
	`wrôe32
–
	`LDRB_IMM
(
ãmp2
, 
d©a_ªg
, 1) );

274 
	`wrôe32
–
	`ORR_REG_LSL_IMM
(
de°_ªg
, de°_ªg, 
ãmp2
, 8) );

276 
	`wrôe32
–
	`LDRH_IMM
(
de°_ªg
, 
d©a_ªg
, 0) );

279 
	}
}

283 
	$gí_mov_w‹d_to_ªg
(
Ho°Reg
 
de°_ªg
,* 
d©a
,
boﬁ
 
dw‹d
) {

284 
	`gí_mov_dw‹d_to_ªg_imm
(
ãmp1
, (
Bô32u
)
d©a
);

285 
	`gí_mov_w‹d_to_ªg_hñ≥r
(
de°_ªg
, 
d©a
, 
dw‹d
, 
ãmp1
);

286 
	}
}

290 
INLINE
 
	$gí_mov_w‹d_to_ªg_imm
(
Ho°Reg
 
de°_ªg
,
Bô16u
 
imm
) {

291 
	`gí_mov_dw‹d_to_ªg_imm
(
de°_ªg
, (
Bô32u
)
imm
);

292 
	}
}

295 
	$gí_mov_w‹d_‰om_ªg_hñ≥r
(
Ho°Reg
 
§c_ªg
,* 
de°
,
boﬁ
 
dw‹d
, Ho°Reg 
d©a_ªg
) {

297 i‡(
dw‹d
) {

298 i‡((
Bô32u
)
de°
 & 3) {

299 i‡–((
Bô32u
)
de°
 & 3) == 2 ) {

300 
	`wrôe32
–
	`STRH_IMM
(
§c_ªg
, 
d©a_ªg
, 0) );

301 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
ãmp2
, 
§c_ªg
, 16) );

302 
	`wrôe32
–
	`STRH_IMM
(
ãmp2
, 
d©a_ªg
, 2) );

304 
	`wrôe32
–
	`STRB_IMM
(
§c_ªg
, 
d©a_ªg
, 0) );

305 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
ãmp2
, 
§c_ªg
, 8) );

306 
	`wrôe32
–
	`STRH_IMM
(
ãmp2
, 
d©a_ªg
, 1) );

307 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
ãmp2
,Åemp2, 16) );

308 
	`wrôe32
–
	`STRB_IMM
(
ãmp2
, 
d©a_ªg
, 3) );

311 
	`wrôe32
–
	`STR_IMM
(
§c_ªg
, 
d©a_ªg
, 0) );

314 i‡((
Bô32u
)
de°
 & 1) {

315 
	`wrôe32
–
	`STRB_IMM
(
§c_ªg
, 
d©a_ªg
, 0) );

316 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
ãmp2
, 
§c_ªg
, 8) );

317 
	`wrôe32
–
	`STRB_IMM
(
ãmp2
, 
d©a_ªg
, 1) );

319 
	`wrôe32
–
	`STRH_IMM
(
§c_ªg
, 
d©a_ªg
, 0) );

322 
	}
}

325 
	$gí_mov_w‹d_‰om_ªg
(
Ho°Reg
 
§c_ªg
,* 
de°
,
boﬁ
 
dw‹d
) {

326 
	`gí_mov_dw‹d_to_ªg_imm
(
ãmp1
, (
Bô32u
)
de°
);

327 
	`gí_mov_w‹d_‰om_ªg_hñ≥r
(
§c_ªg
, 
de°
, 
dw‹d
, 
ãmp1
);

328 
	}
}

334 
	$gí_mov_byã_to_ªg_low
(
Ho°Reg
 
de°_ªg
,* 
d©a
) {

335 
	`gí_mov_dw‹d_to_ªg_imm
(
ãmp1
, (
Bô32u
)
d©a
);

336 
	`wrôe32
–
	`LDRB_IMM
(
de°_ªg
, 
ãmp1
, 0) );

337 
	}
}

343 
INLINE
 
	$gí_mov_byã_to_ªg_low_ˇnu£w‹d
(
Ho°Reg
 
de°_ªg
,* 
d©a
) {

344 
	`gí_mov_byã_to_ªg_low
(
de°_ªg
, 
d©a
);

345 
	}
}

351 
	$gí_mov_byã_to_ªg_low_imm
(
Ho°Reg
 
de°_ªg
,
Bô8u
 
imm
) {

352 
	`wrôe32
–
	`MOV_IMM
(
de°_ªg
, 
imm
, 0) );

353 
	}
}

359 
INLINE
 
	$gí_mov_byã_to_ªg_low_imm_ˇnu£w‹d
(
Ho°Reg
 
de°_ªg
,
Bô8u
 
imm
) {

360 
	`gí_mov_byã_to_ªg_low_imm
(
de°_ªg
, 
imm
);

361 
	}
}

364 
	$gí_mov_byã_‰om_ªg_low
(
Ho°Reg
 
§c_ªg
,* 
de°
) {

365 
	`gí_mov_dw‹d_to_ªg_imm
(
ãmp1
, (
Bô32u
)
de°
);

366 
	`wrôe32
–
	`STRB_IMM
(
§c_ªg
, 
ãmp1
, 0) );

367 
	}
}

371 
	$gí_exãnd_byã
(
boﬁ
 
sign
,
Ho°Reg
 
ªg
) {

372 i‡(
sign
) {

373 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
ªg
,Ñeg, 24) );

374 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
ªg
,Ñeg, 24) );

376 
	`wrôe32
–
	`AND_IMM
(
ªg
,Ñeg, 0xff, 0) );

378 
	}
}

382 
	$gí_exãnd_w‹d
(
boﬁ
 
sign
,
Ho°Reg
 
ªg
) {

383 i‡(
sign
) {

384 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
ªg
,Ñeg, 16) );

385 
	`wrôe32
–
	`MOV_REG_ASR_IMM
(
ªg
,Ñeg, 16) );

387 
	`wrôe32
–
	`MOV_REG_LSL_IMM
(
ªg
,Ñeg, 16) );

388 
	`wrôe32
–
	`MOV_REG_LSR_IMM
(
ªg
,Ñeg, 16) );

390 
	}
}

393 
	$gí_add_imm
(
Ho°Reg
 
ªg
,
Bô32u
 
imm
) {

394 
Bôs
 
sˇÀ
;

395 if(!
imm
) ;

396 i‡(
imm
 == 0xffffffff) {

397 
	`wrôe32
–
	`SUB_IMM
(
ªg
,Ñeg, 1, 0) );

399 
sˇÀ
 = 0;

400 
imm
) {

401 (
imm
 & 3) == 0) {

402 
imm
>>=2;

403 
sˇÀ
+=2;

405 
	`wrôe32
–
	`ADD_IMM
(
ªg
,Ñeg, 
imm
 & 0xff, 
	`ROTATE_SCALE
(
sˇÀ
)) );

406 
imm
>>=8;

407 
sˇÀ
+=8;

410 
	}
}

413 
	$gí_™d_imm
(
Ho°Reg
 
ªg
,
Bô32u
 
imm
) {

414 
Bôs
 
sˇÀ
;

415 
Bô32u
 
imm2
;

416 
imm2
 = ~
imm
;

417 if(!
imm2
) ;

418 i‡(!
imm
) {

419 
	`wrôe32
–
	`MOV_IMM
(
ªg
, 0, 0) );

421 
sˇÀ
 = 0;

422 
imm2
) {

423 (
imm2
 & 3) == 0) {

424 
imm2
>>=2;

425 
sˇÀ
+=2;

427 
	`wrôe32
–
	`BIC_IMM
(
ªg
,Ñeg, 
imm2
 & 0xff, 
	`ROTATE_SCALE
(
sˇÀ
)) );

428 
imm2
>>=8;

429 
sˇÀ
+=8;

432 
	}
}

435 
	$gí_mov_dúe˘_dw‹d
(* 
de°
,
Bô32u
 
imm
) {

436 
	`gí_mov_dw‹d_to_ªg_imm
(
ãmp3
, 
imm
);

437 
	`gí_mov_w‹d_‰om_ªg
(
ãmp3
, 
de°
, 1);

438 
	}
}

456 
Bô32u
 
	$gí_¸óã_bønch_⁄_n⁄zîo
(
Ho°Reg
 
ªg
,
boﬁ
 
dw‹d
) {

457 i‡(
dw‹d
) {

458 
	`wrôe32
–
	`CMP_IMM
(
ªg
, 0, 0) );

460 
	`wrôe32
–
	`MOVS_REG_LSL_IMM
(
ãmp1
, 
ªg
, 16) );

462 
	`wrôe32
–
	`BNE_FWD
(0) );

463  ((
Bô32u
)
¨mPå
-4);

464 
	}
}

466 
Bô32u
 
	$gí_¸óã_bønch_⁄_…z
(
Ho°Reg
 
ªg
,
boﬁ
 
dw‹d
) {

467 i‡(
dw‹d
) {

468 
	`wrôe32
–
	`CMP_IMM
(
ªg
, 0, 0) );

470 
	`wrôe32
–
	`MOVS_REG_LSL_IMM
(
ãmp1
, 
ªg
, 16) );

472 
	`wrôe32
–
	`BLT_FWD
(0) );

473  ((
Bô32u
)
¨mPå
-4);

474 
	}
}

476 
Bô32u
 
	$gí_¸óã_bønch_⁄_gtz
(
Ho°Reg
 
ªg
,
boﬁ
 
dw‹d
) {

477 i‡(
dw‹d
) {

478 
	`wrôe32
–
	`CMP_IMM
(
ªg
, 0, 0) );

480 
	`wrôe32
–
	`MOVS_REG_LSL_IMM
(
ãmp1
, 
ªg
, 16) );

482 
	`wrôe32
–
	`BGT_FWD
(0) );

483  ((
Bô32u
)
¨mPå
-4);

484 
	}
}

486 
Bô32u
 
	$gí_¸óã_bønch_⁄_Àtz
(
Ho°Reg
 
ªg
,
boﬁ
 
dw‹d
) {

487 i‡(
dw‹d
) {

488 
	`wrôe32
–
	`CMP_IMM
(
ªg
, 0, 0) );

490 
	`wrôe32
–
	`MOVS_REG_LSL_IMM
(
ãmp1
, 
ªg
, 16) );

492 
	`wrôe32
–
	`BLE_FWD
(0) );

493  ((
Bô32u
)
¨mPå
-4);

494 
	}
}

496 
Bô32u
 
	$gí_¸óã_bønch_⁄_gëz
(
Ho°Reg
 
ªg
,
boﬁ
 
dw‹d
) {

497 i‡(
dw‹d
) {

498 
	`wrôe32
–
	`CMP_IMM
(
ªg
, 0, 0) );

500 
	`wrôe32
–
	`MOVS_REG_LSL_IMM
(
ãmp1
, 
ªg
, 16) );

502 
	`wrôe32
–
	`BGE_FWD
(0) );

503  ((
Bô32u
)
¨mPå
-4);

504 
	}
}

507 
INLINE
 
	$gí_fûl_bønch
(
DRC_PTR_SIZE_IM
 
d©a
) {

508 (
u32
)
¨mPå
 < (
d©a
+8))

509 
	`wrôe32
(0xe1a00000);

510 *(
Bô32u
*)
d©a
=–(*(Bô32u*)d©aË& 0xff000000 ) | ( ( ((Bô32u)
¨mPå
 - (data+8)) >> 2 ) & 0x00ffffff );

511 
	}
}

	@src/recompiler/mips/disasm.h

1 #i‚de‡
DISASM_H


2 
	#DISASM_H


	)

6 *
	maddªss
;

7 *
	m«me
;

8 } 
	tdißsm_œbñ
;

10 
dißsm_mùs_ö°ru˘i⁄
(
u32
 
›code
, *
buf„r
, u32 
pc
,

11 
dißsm_œbñ
 *
œbñs
, 
u32
 
num_œbñs
);

13 c⁄° *
ªg_«mes
[];

	@src/recompiler/mips/mips_codegen.h

29 #i‚de‡
MIPS_CG_H


30 
	#MIPS_CG_H


	)

34 #i‡(
deföed
(
_MIPS_ARCH_MIPS32R2
Ë|| deföed(
_MIPS_ARCH_MIPS32R3
) || \

35 
deföed
(
_MIPS_ARCH_MIPS32R5
Ë|| 
	$deföed
(
_MIPS_ARCH_MIPS32R6
))

36 
	#HAVE_MIPS32R2_EXT_INS


	)

37 
	#HAVE_MIPS32R2_SEB_SEH


	)

41 
MIPSREG_V0
 = 2,

42 
MIPSREG_V1
,

44 
MIPSREG_A0
 = 4,

45 
MIPSREG_A1
,

46 
MIPSREG_A2
,

47 
MIPSREG_A3
,

49 
MIPSREG_T0
 = 8,

50 
MIPSREG_T1
,

51 
MIPSREG_T2
,

52 
MIPSREG_T3
,

53 
MIPSREG_T4
,

54 
MIPSREG_T5
,

55 
MIPSREG_T6
,

56 
MIPSREG_T7
,

58 
MIPSREG_RA
 = 0x1f,

59 
MIPSREG_S8
 = 0x1e,

60 
MIPSREG_S0
 = 0x10,

61 
MIPSREG_S1
,

62 
MIPSREG_S2
,

63 
MIPSREG_S3
,

64 
MIPSREG_S4
,

65 
MIPSREG_S5
,

66 
MIPSREG_S6
,

67 
MIPSREG_S7
,

69 
MIPSREG_SP
 = 0x1d,

70 } 
	tMIPSReg
;

72 
	#TEMP_1
 
MIPSREG_T0


	)

73 
	#TEMP_2
 
MIPSREG_T1


	)

74 
	#TEMP_3
 
MIPSREG_T2


	)

77 
	#PERM_REG_1
 
MIPSREG_S8


	)

80 #i‚de‡
off£tof


81 
	#off£tof
(
T
,
F
Ë(()((*)&((T *)0L)->F - (*)0L))

	)

85 
	#offGPR
(
rx
Ë
	`off£tof
(
psxRegi°îs
, 
GPR
.
r
[rx])

	)

88 
	#offCP0
(
rx
Ë
	`off£tof
(
psxRegi°îs
, 
CP0
.
r
[rx])

	)

91 
	#offCP2C
(
rx
Ë
	`off£tof
(
psxRegi°îs
, 
CP2C
.
r
[rx])

	)

93 
	#off
(
fõld
Ë
	`off£tof
(
psxRegi°îs
, fõld)

	)

101 
	#ADR_HI
(
adr
) \

102 (((
u±r
)(
adr
Ë& 0x8000Ë? (((u±r)◊drË+ 0x10000Ë>> 16Ë: ((u±r)◊drË>> 16))

	)

104 
	#ADR_LO
(
adr
) \

105 ((
u±r
)(
adr
Ë& 0xffff)

	)

108 
	#wrôe32
(
i
) \

109 dÿ{ *
ªcMem
++ = (
u32
)(
i
); 
	}
} 0)

	)

111 
	#PUSH
(
ªg
) \

113 
	`wrôe32
(0x27bdfffc); \

114 
	`wrôe32
(0xaÁ00000 | (
ªg
 << 16)); \

115 } 0)

	)

117 
	#POP
(
ªg
) \

119 
	`wrôe32
(0x8Á00000 | (
ªg
 << 16)); \

120 
	`wrôe32
(0x27bd0004); \

121 } 0)

	)

123 
	#LW
(
π
, 
∫
, 
imm
) \

124 
	`wrôe32
(0x8c000000 | ((
∫
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
imm
Ë& 0xffff))

	)

126 
	#LB
(
π
, 
∫
, 
imm
) \

127 
	`wrôe32
(0x80000000 | ((
∫
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
imm
Ë& 0xffff))

	)

129 
	#LBU
(
π
, 
∫
, 
imm
) \

130 
	`wrôe32
(0x90000000 | ((
∫
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
imm
Ë& 0xffff))

	)

132 
	#LH
(
π
, 
∫
, 
imm
) \

133 
	`wrôe32
(0x84000000 | ((
∫
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
imm
Ë& 0xffff))

	)

135 
	#LHU
(
π
, 
∫
, 
imm
) \

136 
	`wrôe32
(0x94000000 | ((
∫
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
imm
Ë& 0xffff))

	)

138 
	#SW
(
rd
, 
∫
, 
imm
) \

139 
	`wrôe32
(0xac000000 | ((
∫
Ë<< 21Ë| ((
rd
Ë<< 16Ë| ((
imm
Ë& 0xffff))

	)

141 
	#LWL
(
π
, 
∫
, 
imm
) \

142 
	`wrôe32
(0x88000000 | ((
∫
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
imm
Ë& 0xffff))

	)

144 
	#LWR
(
π
, 
∫
, 
imm
) \

145 
	`wrôe32
(0x98000000 | ((
∫
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
imm
Ë& 0xffff))

	)

147 
	#SWL
(
π
, 
∫
, 
imm
) \

148 
	`wrôe32
(0xa8000000 | ((
∫
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
imm
Ë& 0xffff))

	)

150 
	#SWR
(
π
, 
∫
, 
imm
) \

151 
	`wrôe32
(0xb8000000 | ((
∫
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
imm
Ë& 0xffff))

	)

153 
	#ADDIU
(
π
, 
rs
, 
imm
) \

154 
	`wrôe32
(0x24000000 | ((
rs
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
imm
Ë& 0xffff))

	)

156 
	#SLTI
(
π
, 
rs
, 
imm16
) \

157 
	`wrôe32
(0x28000000 | (
rs
 << 21Ë| (
π
 << 16Ë| ((
imm16
Ë& 0xffff))

	)

159 
	#SLTIU
(
π
, 
rs
, 
imm16
) \

160 
	`wrôe32
(0x2c000000 | (
rs
 << 21Ë| (
π
 << 16Ë| ((
imm16
Ë& 0xffff))

	)

162 
	#LUI
(
π
, 
imm16
) \

163 
	`wrôe32
(0x3c000000 | (
π
 << 16Ë| ((
imm16
Ë& 0xffff))

	)

165 
	#LI16
(
ªg
, 
imm16
) \

166 
	`wrôe32
(0x34000000 | ((
ªg
Ë<< 16Ë| ((
imm16
Ë& 0xffff)Ë

	)

168 
	#LI32
(
ªg
, 
imm32
) \

170 
	`wrôe32
(0x3c000000 | (
ªg
 << 16Ë| ((
u32
)(
imm32
) >> 16)); \

171 
	`wrôe32
(0x34000000 | (
ªg
 << 21Ë| (ªg << 16Ë| ((
imm32
) & 0xffff)); \

172 } 0)

	)

174 
	#MOV
(
rd
, 
rs
) \

175 
	`wrôe32
(0x00000021 | ((
rs
Ë<< 21Ë| ((
rd
Ë<< 11)Ë

	)

177 
	#MOVN
(
rd
, 
rs
, 
π
) \

178 
	`wrôe32
(0x0000000b | ((
rs
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
rd
Ë<< 11))

	)

180 
	#MOVZ
(
rd
, 
rs
, 
π
) \

181 
	`wrôe32
(0x0000000®| ((
rs
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
rd
Ë<< 11))

	)

183 
	#ANDI
(
π
, 
rs
, 
imm16
) \

184 
	`wrôe32
(0x30000000 | (
rs
 << 21Ë| (
π
 << 16Ë| ((
imm16
Ë& 0xffff))

	)

186 
	#ORI
(
π
, 
rs
, 
imm16
) \

187 
	`wrôe32
(0x34000000 | (
rs
 << 21Ë| (
π
 << 16Ë| ((
imm16
Ë& 0xffff))

	)

189 
	#XORI
(
π
, 
rs
, 
imm16
) \

190 
	`wrôe32
(0x38000000 | ((
rs
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
imm16
Ë& 0xffff))

	)

192 
	#XOR
(
rd
, 
∫
, 
rm
) \

193 
	`wrôe32
(0x00000026 | ((
∫
Ë<< 21Ë| ((
rm
Ë<< 16Ë| ((
rd
 << 11)))

	)

195 
	#SUBU
(
rd
, 
∫
, 
rm
) \

196 
	`wrôe32
(0x00000023 | ((
∫
Ë<< 21Ë| ((
rm
Ë<< 16Ë| ((
rd
Ë<< 11)Ë

	)

198 
	#ADDU
(
rd
, 
∫
, 
rm
) \

199 
	`wrôe32
(0x00000021 | ((
∫
Ë<< 21Ë| ((
rm
Ë<< 16Ë| ((
rd
Ë<< 11)Ë

	)

201 
	#AND
(
rd
, 
∫
, 
rm
) \

202 
	`wrôe32
(0x00000024 | ((
∫
Ë<< 21Ë| ((
rm
Ë<< 16Ë| ((
rd
Ë<< 11))

	)

204 
	#OR
(
rd
, 
∫
, 
rm
) \

205 
	`wrôe32
(0x00000025 | ((
∫
Ë<< 21Ë| ((
rm
Ë<< 16Ë| ((
rd
Ë<< 11))

	)

207 
	#NOR
(
rd
, 
rs
, 
π
) \

208 
	`wrôe32
(0x00000027 | (
rs
 << 21Ë| (
π
 << 16Ë| (
rd
 << 11))

	)

210 
	#SLL
(
rd
, 
π
, 
ß
) \

211 
	`wrôe32
(0x00000000 | (
π
 << 16Ë| (
rd
 << 11Ë| ((
ß
 & 31Ë<< 6))

	)

213 
	#SRL
(
rd
, 
π
, 
ß
) \

214 
	`wrôe32
(0x00000002 | (
π
 << 16Ë| (
rd
 << 11Ë| ((
ß
 & 31Ë<< 6))

	)

216 
	#SRA
(
rd
, 
π
, 
ß
) \

217 
	`wrôe32
(0x00000003 | (
π
 << 16Ë| (
rd
 << 11Ë| ((
ß
 & 31Ë<< 6))

	)

219 
	#SLLV
(
rd
, 
π
, 
rs
) \

220 
	`wrôe32
(0x00000004 | (
rs
 << 21Ë| (
π
 << 16Ë| (
rd
 << 11))

	)

222 
	#SRLV
(
rd
, 
π
, 
rs
) \

223 
	`wrôe32
(0x00000006 | (
rs
 << 21Ë| (
π
 << 16Ë| (
rd
 << 11))

	)

225 
	#SRAV
(
rd
, 
π
, 
rs
) \

226 
	`wrôe32
(0x00000007 | (
rs
 << 21Ë| (
π
 << 16Ë| (
rd
 << 11))

	)

228 
	#MULT
(
rs
, 
π
) \

229 
	`wrôe32
(0x00000018 | (
rs
 << 21Ë| (
π
 << 16))

	)

231 
	#MULTU
(
rs
, 
π
) \

232 
	`wrôe32
(0x00000019 | (
rs
 << 21Ë| (
π
 << 16))

	)

234 
	#DIV
(
rs
, 
π
) \

235 
	`wrôe32
(0x0000001®| (
rs
 << 21Ë| (
π
 << 16))

	)

237 
	#DIVU
(
rs
, 
π
) \

238 
	`wrôe32
(0x0000001b | (
rs
 << 21Ë| (
π
 << 16))

	)

240 
	#MFLO
(
rd
) \

241 
	`wrôe32
(0x00000012 | (
rd
 << 11))

	)

243 
	#MFHI
(
rd
) \

244 
	`wrôe32
(0x00000010 | (
rd
 << 11))

	)

246 
	#SLT
(
rd
, 
rs
, 
π
) \

247 
	`wrôe32
(0x0000002®| (
rs
 << 21Ë| (
π
 << 16Ë| (
rd
 << 11))

	)

249 
	#SLTU
(
rd
, 
rs
, 
π
) \

250 
	`wrôe32
(0x0000002b | (
rs
 << 21Ë| (
π
 << 16Ë| (
rd
 << 11))

	)

252 
	#JAL
(
func
) \

253 
	`wrôe32
(0x0c000000 | (((
u32
)(
func
Ë& 0x0fffffffË>> 2))

	)

255 
	#JR
(
rs
) \

256 
	`wrôe32
(0x00000008 | ((
rs
Ë<< 21))

	)

258 
	#BEQ
(
rs
, 
π
, 
off£t
) \

259 
	`wrôe32
(0x10000000 | (
rs
 << 21Ë| (
π
 << 16Ë| (
off£t
 >> 2))

	)

261 
	#BEQZ
(
rs
, 
off£t
Ë
	`BEQ
‘s, 0, off£t)

	)

262 
	#B
(
off£t
Ë
	`BEQ
(0, 0, off£t)

	)

264 
	#BGEZ
(
rs
, 
off£t
) \

265 
	`wrôe32
(0x04010000 | ((
rs
Ë<< 21Ë| ((
off£t
Ë>> 2))

	)

267 
	#BGTZ
(
rs
, 
off£t
) \

268 
	`wrôe32
(0x1c000000 | ((
rs
Ë<< 21Ë| ((
off£t
Ë>> 2))

	)

270 
	#BLEZ
(
rs
, 
off£t
) \

271 
	`wrôe32
(0x18000000 | ((
rs
Ë<< 21Ë| ((
off£t
Ë>> 2))

	)

273 
	#BLTZ
(
rs
, 
off£t
) \

274 
	`wrôe32
(0x04000000 | ((
rs
Ë<< 21Ë| ((
off£t
Ë>> 2))

	)

276 
	#BNE
(
rs
, 
π
, 
off£t
) \

277 
	`wrôe32
(0x14000000 | (
rs
 << 21Ë| (
π
 << 16Ë| (
off£t
 >> 2))

	)

279 
	#NOP
() \

280 
	`wrôe32
(0)

	)

283 #ifde‡
HAVE_MIPS32R2_EXT_INS


284 
	#EXT
(
π
, 
rs
, 
pos
, 
size
) \

285 
	`wrôe32
(0x7c000000 | (
rs
 << 21Ë| (
π
 << 16) | \

286 ((
pos
 & 0x1fË<< 6Ë| (((
size
-1Ë& 0x1fË<< 11))

	)

288 
	#INS
(
π
, 
rs
, 
pos
, 
size
) \

289 
	`wrôe32
(0x7c000004 | (
rs
 << 21Ë| (
π
 << 16) | \

290 ((
pos
 & 0x1fË<< 6Ë| ((’os+
size
-1Ë& 0x1fË<< 11))

	)

294 #ifde‡
HAVE_MIPS32R2_SEB_SEH


295 
	#SEB
(
rd
, 
π
) \

296 
	`wrôe32
(0x7C000420 | (
π
 << 16Ë| (
rd
 << 11))

	)

298 
	#SEH
(
rd
, 
π
) \

299 
	`wrôe32
(0x7C000620 | (
π
 << 16Ë| (
rd
 << 11))

	)

303 
	#CLZ
(
rd
, 
rs
) \

304 
	`wrôe32
(0x70000020 | (
rs
 << 21Ë| (
rd
 << 16Ë| (rd << 11))

	)

306 
ölöe
 
u32
 
	$ADJUST_CLOCK
(
u32
 
cy˛es
)

308 
u32
 
cy˛e_mu…ùlõr
;

309  (
cy˛es
 * 
cy˛e_mu…ùlõr
) >> 8;

310 
	}
}

314 
	#ªc_ªcompûe_°¨t
() \

316 } 0)

	)

324 
	#ªc_ªcompûe_íd_∑π1
() \

327 
	`LW
(
MIPSREG_RA
, 
MIPSREG_SP
, 16); \

328 } 0)

	)

330 
	#ªc_ªcompûe_íd_∑π2
() \

337 
u32
 
__cy˛es
 = 
	`ADJUST_CLOCK
((
pc
-
ﬁdpc
)/4); \

338 i‡(
__cy˛es
 <= 0xffff) { \

339 
	`JR
(
MIPSREG_RA
); \

340 
	`LI16
(
MIPSREG_V1
, 
__cy˛es
); \

342 
	`LUI
(
MIPSREG_V1
, (
__cy˛es
 >> 16)); \

343 
	`JR
(
MIPSREG_RA
); \

344 
	`ORI
(
MIPSREG_V1
, MIPSREG_V1, (
__cy˛es
 & 0xffff)); \

346 } 0)

	)

349 
	#CALLFunc
(
func
) \

351 
	`JAL
(
func
); \

352 
	`NOP
(); \

353 } 0)

	)

355 
	#mùs_ªœtive_off£t
(
sour˚
, 
off£t
, 
√xt
) \

356 ((((
u32
)(
off£t
Ë- ((u32)(
sour˚
Ë+ (
√xt
))Ë>> 2Ë& 0xFFFF)

	)

358 
	#fixup_bønch
(
BACKPATCH
) \

360 *–
u32
*)(
BACKPATCH
Ë|
	`mùs_ªœtive_off£t
(BACKPATCH, (u32)
ªcMem
, 4); \

361 } 0)

	)

	@src/recompiler/mips/mips_disasm.cpp

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dio.h
>

24 
	~"psxcomm⁄.h
"

25 
	~"dißsm.h
"

27 c⁄° *
	gmùs_›code_«mes
[] =

43 c⁄° *
	gmùs_fun˘i⁄_•ecül_«mes
[] =

59 c⁄° *
	gmùs_fun˘i⁄_ªgimm_«mes
[] =

71 c⁄° *
	gmùs_c›2_rs_«mes
[] =

83 
	mMIPS_OPCODE_ALU_IMMS
,

84 
	mMIPS_OPCODE_ALU_IMMU
,

85 
	mMIPS_OPCODE_ALU2_IMMU
,

86 
	mMIPS_OPCODE_REGIMM
,

87 
	mMIPS_OPCODE_BRANCH
,

88 
	mMIPS_OPCODE_BRANCHC
,

89 
	mMIPS_OPCODE_BRANCHC2
,

90 
	mMIPS_OPCODE_SPECIAL
,

91 
	mMIPS_OPCODE_SPECIAL2
,

92 
	mMIPS_OPCODE_SPECIAL3
,

93 
	mMIPS_OPCODE_MEM
,

94 
	mMIPS_OPCODE_CP2
,

95 
	mMIPS_OPCODE_UNKNOWN


96 } 
	tmùs_›code_ty≥
;

100 
	mMIPS_SPECIAL_FUNCTION_ALU
,

101 
	mMIPS_SPECIAL_FUNCTION_MUL_DIV
,

102 
	mMIPS_SPECIAL_FUNCTION_JALR
,

103 
	mMIPS_SPECIAL_FUNCTION_JR
,

104 
	mMIPS_SPECIAL_FUNCTION_HI_LO
,

105 
	mMIPS_SPECIAL_FUNCTION_SHIFT
,

106 
	mMIPS_SPECIAL_FUNCTION_SYSCALL
,

107 
	mMIPS_SPECIAL_FUNCTION_UNKNOWN


108 } 
	tmùs_fun˘i⁄_•ecül_ty≥
;

111 
mùs_›code_ty≥
 
	gmùs_›code_ty≥s
[] =

114 
MIPS_OPCODE_SPECIAL
, 
MIPS_OPCODE_REGIMM
,

116 
MIPS_OPCODE_BRANCH
, MIPS_OPCODE_BRANCH,

118 
MIPS_OPCODE_BRANCHC2
, MIPS_OPCODE_BRANCHC2,

120 
MIPS_OPCODE_BRANCHC
, MIPS_OPCODE_BRANCHC,

123 
MIPS_OPCODE_ALU_IMMS
, MIPS_OPCODE_ALU_IMMS,

125 
MIPS_OPCODE_ALU_IMMS
, MIPS_OPCODE_ALU_IMMS,

127 
MIPS_OPCODE_ALU_IMMU
, MIPS_OPCODE_ALU_IMMU,

129 
MIPS_OPCODE_ALU_IMMU
, 
MIPS_OPCODE_ALU2_IMMU
,

131 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

132 
MIPS_OPCODE_CP2
, 
MIPS_OPCODE_UNKNOWN
,

133 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

134 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

136 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

137 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

139 
MIPS_OPCODE_SPECIAL2
, 
MIPS_OPCODE_UNKNOWN
,

141 
MIPS_OPCODE_UNKNOWN
, 
MIPS_OPCODE_SPECIAL3
,

144 
MIPS_OPCODE_MEM
, MIPS_OPCODE_MEM,

146 
MIPS_OPCODE_MEM
, MIPS_OPCODE_MEM,

148 
MIPS_OPCODE_MEM
, MIPS_OPCODE_MEM,

150 
MIPS_OPCODE_MEM
, 
MIPS_OPCODE_UNKNOWN
,

153 
MIPS_OPCODE_MEM
, MIPS_OPCODE_MEM,

155 
MIPS_OPCODE_MEM
, MIPS_OPCODE_MEM,

156 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

158 
MIPS_OPCODE_MEM
, 
MIPS_OPCODE_UNKNOWN
,

160 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

161 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

162 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

163 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

165 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

166 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

167 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

168 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

170 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

171 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

172 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN,

173 
MIPS_OPCODE_UNKNOWN
, MIPS_OPCODE_UNKNOWN

177 
mùs_fun˘i⁄_•ecül_ty≥
 
	gmùs_fun˘i⁄_•ecül_ty≥s
[] =

180 
MIPS_SPECIAL_FUNCTION_SHIFT
, 
MIPS_SPECIAL_FUNCTION_UNKNOWN
,

182 
MIPS_SPECIAL_FUNCTION_SHIFT
, MIPS_SPECIAL_FUNCTION_SHIFT,

184 
MIPS_SPECIAL_FUNCTION_ALU
, 
MIPS_SPECIAL_FUNCTION_UNKNOWN
,

186 
MIPS_SPECIAL_FUNCTION_ALU
, MIPS_SPECIAL_FUNCTION_ALU,

189 
MIPS_SPECIAL_FUNCTION_JR
, 
MIPS_SPECIAL_FUNCTION_JALR
,

191 
MIPS_SPECIAL_FUNCTION_ALU
, MIPS_SPECIAL_FUNCTION_ALU,

192 
MIPS_SPECIAL_FUNCTION_SYSCALL
, 
MIPS_SPECIAL_FUNCTION_UNKNOWN
,

193 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

196 
MIPS_SPECIAL_FUNCTION_HI_LO
, MIPS_SPECIAL_FUNCTION_HI_LO,

198 
MIPS_SPECIAL_FUNCTION_HI_LO
, MIPS_SPECIAL_FUNCTION_HI_LO,

199 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

200 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

203 
MIPS_SPECIAL_FUNCTION_MUL_DIV
, MIPS_SPECIAL_FUNCTION_MUL_DIV,

205 
MIPS_SPECIAL_FUNCTION_MUL_DIV
, MIPS_SPECIAL_FUNCTION_MUL_DIV,

207 
MIPS_SPECIAL_FUNCTION_MUL_DIV
, MIPS_SPECIAL_FUNCTION_MUL_DIV,

208 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

211 
MIPS_SPECIAL_FUNCTION_ALU
, MIPS_SPECIAL_FUNCTION_ALU,

213 
MIPS_SPECIAL_FUNCTION_ALU
, MIPS_SPECIAL_FUNCTION_ALU,

215 
MIPS_SPECIAL_FUNCTION_ALU
, MIPS_SPECIAL_FUNCTION_ALU,

217 
MIPS_SPECIAL_FUNCTION_ALU
, MIPS_SPECIAL_FUNCTION_ALU,

219 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

221 
MIPS_SPECIAL_FUNCTION_ALU
, MIPS_SPECIAL_FUNCTION_ALU,

222 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

223 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

225 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

226 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

227 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

228 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

230 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

231 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

232 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

233 
MIPS_SPECIAL_FUNCTION_UNKNOWN
, MIPS_SPECIAL_FUNCTION_UNKNOWN,

240 c⁄° *
	gmùs_ªg_«mes
[] =

264 
	#bôs
(
vÆue
, 
off£t
, 
mask
) \

265 ()((
vÆue
 >> (
off£t
)Ë& (
mask
)) \

266 

	)

267 
	#›_bôs
(
off£t
, 
mask
) \

268 
	`bôs
(
›code
, 
off£t
, 
mask
) \

269 

	)

270 
	#ªg_rs
 21

	)

271 
	#ªg_π
 16

	)

272 
	#ªg_rd
 11

	)

274 
	#ªg_›
(
off£t
) \

275 (
mùs_ªg_«mes
[
	`›_bôs
(
off£t
, 0x1F)]) \

276 

	)

277 
	#immu
() \

278 ()
	`›_bôs
(0, 0xFFFF) \

279 

	)

280 
	#imms
() \

281 (()(
	`›_bôs
(0, 0xFFFF) << 16) >> 16) \

282 

	)

283 
	#sig√d_off£t
() \

284 
	`imms
() \

285 

	)

286 
	#pc_off£t
() \

287 ()((
	`sig√d_off£t
(Ë<< 2Ë+ (
pc
 + 4)) \

288 

	)

290 
	$dißsm_mùs_ö°ru˘i⁄
(
u32
 
›code
, *
buf„r
, u32 
pc
,

291 
dißsm_œbñ
 *
œbñs
, 
u32
 
num_œbñs
)

293 
i
;

294 
›code_ty≥
 = 
›code
 >> 26;

296 if(
›code
 == 0)

298 
	`•rötf
(
buf„r
, "nop");

302 
mùs_›code_ty≥s
[
›code_ty≥
])

304 
MIPS_OPCODE_ALU_IMMS
:

306 
u32
 
rs
 = 
	`›_bôs
(
ªg_rs
, 0x1F);

308 if((
›code_ty≥
 =0x9Ë&& (
rs
 == 0))

310 
	`•rötf
(
buf„r
, "li %s, %d",

311 
	`ªg_›
(
ªg_π
), 
	`imms
());

315 
	`•rötf
(
buf„r
, "%s %s, %s, %d",

316 
mùs_›code_«mes
[
›code_ty≥
], 
	`ªg_›
(
ªg_π
),

317 
mùs_ªg_«mes
[
rs
], 
	`imms
());

322 
MIPS_OPCODE_ALU_IMMU
:

324 
	`•rötf
(
buf„r
, "%s %s, %s, 0x%x",

325 
mùs_›code_«mes
[
›code_ty≥
], 
	`ªg_›
(
ªg_π
),Ñeg_›(
ªg_rs
),

326 
	`immu
());

330 
MIPS_OPCODE_ALU2_IMMU
:

332 
	`•rötf
(
buf„r
, "%s %s, 0x%x",

333 
mùs_›code_«mes
[
›code_ty≥
], 
	`ªg_›
(
ªg_π
), 
	`immu
());

338 
MIPS_OPCODE_REGIMM
:

340 
u32
 
fun˘i⁄
 = 
	`›_bôs
(16, 0x1F);

342 
i
 = 0; i < 
num_œbñs
; i++)

345 if((
u32
)
œbñs
[
i
].
addªss
 =
	`pc_off£t
())

347 
	`•rötf
(
buf„r
, "%†%s, %s", 
mùs_fun˘i⁄_ªgimm_«mes
[
fun˘i⁄
], 
	`ªg_›
(
ªg_rs
),

348 
œbñs
[
i
].
«me
);

353 
	`•rötf
(
buf„r
, "%s %s, %08x",

354 
mùs_fun˘i⁄_ªgimm_«mes
[
fun˘i⁄
], 
	`ªg_›
(
ªg_rs
),

355 
	`pc_off£t
());

359 
MIPS_OPCODE_SPECIAL
:

361 
mùs_fun˘i⁄_•ecül_ty≥
 
fun˘i⁄
 = (mùs_fun˘i⁄_•ecül_ty≥)
	`›_bôs
(0, 0x3F);

363 
mùs_fun˘i⁄_•ecül_ty≥s
[
fun˘i⁄
])

365 
MIPS_SPECIAL_FUNCTION_ALU
:

367 
	`•rötf
(
buf„r
, "%s %s, %s, %s",

368 
mùs_fun˘i⁄_•ecül_«mes
[
fun˘i⁄
], 
	`ªg_›
(
ªg_rd
),

369 
	`ªg_›
(
ªg_rs
),Ñeg_›(
ªg_π
));

373 
MIPS_SPECIAL_FUNCTION_SYSCALL
:

375 
	`•rötf
(
buf„r
,"syscall");

379 
MIPS_SPECIAL_FUNCTION_MUL_DIV
:

381 
	`•rötf
(
buf„r
, "%s %s, %s",

382 
mùs_fun˘i⁄_•ecül_«mes
[
fun˘i⁄
], 
	`ªg_›
(
ªg_rs
),

383 
	`ªg_›
(
ªg_π
));

387 
MIPS_SPECIAL_FUNCTION_JALR
:

389 
u32
 
rd
 = 
	`›_bôs
(
ªg_rd
, 0x1F);

391 if(
rd
 == 31)

393 
	`•rötf
(
buf„r
, "%s %s",

394 
mùs_fun˘i⁄_•ecül_«mes
[
fun˘i⁄
], 
	`ªg_›
(
ªg_rs
));

398 
	`•rötf
(
buf„r
, "%s %s, %s",

399 
mùs_fun˘i⁄_•ecül_«mes
[
fun˘i⁄
], 
mùs_ªg_«mes
[
rd
],

400 
	`ªg_›
(
ªg_rs
));

405 
MIPS_SPECIAL_FUNCTION_JR
:

407 
	`•rötf
(
buf„r
, "%s %s",

408 
mùs_fun˘i⁄_•ecül_«mes
[
fun˘i⁄
], 
	`ªg_›
(
ªg_rs
));

412 
MIPS_SPECIAL_FUNCTION_HI_LO
:

414 
	`•rötf
(
buf„r
, "%s %s",

415 
mùs_fun˘i⁄_•ecül_«mes
[
fun˘i⁄
], 
	`ªg_›
(
ªg_rd
));

419 
MIPS_SPECIAL_FUNCTION_SHIFT
:

421 
	`•rötf
(
buf„r
, "%s %s, %s, %d",

422 
mùs_fun˘i⁄_•ecül_«mes
[
fun˘i⁄
], 
	`ªg_›
(
ªg_rd
),

423 
	`ªg_›
(
ªg_π
), 
	`›_bôs
(6, 0x1F));

429 
	`•rötf
(
buf„r
, "unknown");

436 
MIPS_OPCODE_BRANCH
:

438 
u32
 
off£t
 = 
	`›_bôs
(0, 0x3FFFFFF);

439 
off£t
 = (off£à<< 2Ë| ((
pc
 + 4) & 0xFC000000);

441 
i
 = 0; i < 
num_œbñs
; i++)

444 if((
u32
)
œbñs
[
i
].
addªss
 =
off£t
)

446 
	`•rötf
(
buf„r
, "%†%s", 
mùs_›code_«mes
[
›code_ty≥
],

447 
œbñs
[
i
].
«me
);

451 i‡(
i
 =
num_œbñs
Ë
	`•rötf
(
buf„r
, "%s %08x",

452 
mùs_›code_«mes
[
›code_ty≥
], ()
off£t
);

457 
MIPS_OPCODE_BRANCHC
:

459 
i
 = 0; i < 
num_œbñs
; i++)

462 if((
u32
)
œbñs
[
i
].
addªss
 =
	`pc_off£t
())

464 
	`•rötf
(
buf„r
, "%†%s, %s", 
mùs_›code_«mes
[
›code_ty≥
], 
	`ªg_›
(
ªg_rs
),

465 
œbñs
[
i
].
«me
);

470 i‡(
i
 =
num_œbñs
Ë
	`•rötf
(
buf„r
, "%s %s, %08x",

471 
mùs_›code_«mes
[
›code_ty≥
], 
	`ªg_›
(
ªg_rs
), 
	`pc_off£t
());

475 
MIPS_OPCODE_BRANCHC2
:

477 
i
 = 0; i < 
num_œbñs
; i++)

480 if((
u32
)
œbñs
[
i
].
addªss
 =
	`pc_off£t
())

482 
	`•rötf
(
buf„r
, "%†%s, %s, %s", 
mùs_›code_«mes
[
›code_ty≥
], 
	`ªg_›
(
ªg_rs
),

483 
	`ªg_›
(
ªg_π
), 
œbñs
[
i
].
«me
);

488 i‡(
i
 =
num_œbñs
Ë
	`•rötf
(
buf„r
, "%s %s, %s, %08x",

489 
mùs_›code_«mes
[
›code_ty≥
], 
	`ªg_›
(
ªg_rs
),

490 
	`ªg_›
(
ªg_π
), 
	`pc_off£t
());

494 
MIPS_OPCODE_MEM
:

496 
s32
 
off£t
 = 
	`sig√d_off£t
();

498 if(
off£t
 < 0)

500 
	`•rötf
(
buf„r
, "%s %s, [%s - %d]",

501 
mùs_›code_«mes
[
›code_ty≥
], 
	`ªg_›
(
ªg_π
),Ñeg_›(
ªg_rs
),

502 ()-
off£t
);

506 
	`•rötf
(
buf„r
, "%s %s, [%s + %d]",

507 
mùs_›code_«mes
[
›code_ty≥
], 
	`ªg_›
(
ªg_π
),Ñeg_›(
ªg_rs
),

508 ()
off£t
);

513 
MIPS_OPCODE_CP2
:

516 i‡(
	`›_bôs
(0, 0x3f) == 0) {

517 
	`•rötf
(
buf„r
, "%s %s,Ñeg(%d)",

518 
mùs_c›2_rs_«mes
[
	`›_bôs
(
ªg_rs
, 0x1f)],

519 
	`ªg_›
(
ªg_π
),

520 
	`›_bôs
(
ªg_rd
, 0x1f)

523 
	`•rötf
(
buf„r
, "unknown");

530 
	`•rötf
(
buf„r
, "unknown");

534 
	}
}

	@src/recompiler/mips/opcodes.h

1 
	~"ªc_lsu.˝p.h
"

2 
	~"ªc_gã.˝p.h
"

3 
	~"ªc_Æu.˝p.h
"

4 
	~"ªc_mdu.˝p.h
"

5 
	~"ªc_˝0.˝p.h
"

6 
	~"ªc_bcu.˝p.h
"

8 
	$ªcNULL
(Ë{ 
	}
}

10 
	$ªcSPECIAL
()

12 
ªcSPC
[
_Fun˘_
]();

13 
	}
}

15 
	$ªcREGIMM
()

17 
ªcREG
[
_Rt_
]();

18 
	}
}

20 
	$ªcCOP0
()

22 
ªcCP0
[
_Rs_
]();

23 
	}
}

25 
	$ªcCOP2
()

27 
ªcCP2
[
_Fun˘_
]();

28 
	}
}

30 
	$ªcBASIC
()

32 
ªcCP2BSC
[
_Rs_
]();

33 
	}
}

35 (*
	gªcBSC
[64])() =

37 
ªcSPECIAL
, 
ªcREGIMM
, 
ªcJ
 , 
ªcJAL
 , 
ªcBEQ
 , 
ªcBNE
 , 
ªcBLEZ
, 
ªcBGTZ
,

38 
ªcADDI
 , 
ªcADDIU
 , 
ªcSLTI
, 
ªcSLTIU
, 
ªcANDI
, 
ªcORI
 , 
ªcXORI
, 
ªcLUI
 ,

39 
ªcCOP0
 , 
ªcNULL
 , 
ªcCOP2
,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

40 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

41 
ªcLB
 , 
ªcLH
 , 
ªcLWL
 , 
ªcLW
 , 
ªcLBU
 , 
ªcLHU
 , 
ªcLWR
 , 
ªcNULL
,

42 
ªcSB
 , 
ªcSH
 , 
ªcSWL
 , 
ªcSW
 , 
ªcNULL
,ÑecNULL, 
ªcSWR
 ,ÑecNULL,

43 
ªcNULL
 ,ÑecNULL , 
ªcLWC2
,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

44 
ªcNULL
 ,ÑecNULL , 
ªcSWC2
, 
ªcHLE
 ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL

47 (*
	gªcSPC
[64])() =

49 
ªcSLL
 , 
ªcNULL
, 
ªcSRL
 , 
ªcSRA
 , 
ªcSLLV
 ,ÑecNULL , 
ªcSRLV
, 
ªcSRAV
,

50 
ªcJR
 , 
ªcJALR
, 
ªcNULL
,ÑecNULL, 
ªcSYSCALL
, 
ªcBREAK
,ÑecNULL,ÑecNULL,

51 
ªcMFHI
, 
ªcMTHI
, 
ªcMFLO
, 
ªcMTLO
, 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,

52 
ªcMULT
, 
ªcMULTU
, 
ªcDIV
, 
ªcDIVU
, 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,

53 
ªcADD
 , 
ªcADDU
, 
ªcSUB
 , 
ªcSUBU
, 
ªcAND
 , 
ªcOR
 , 
ªcXOR
 , 
ªcNOR
 ,

54 
ªcNULL
,ÑecNULL, 
ªcSLT
 , 
ªcSLTU
,ÑecNULL ,ÑecNULL ,ÑecNULL,ÑecNULL,

55 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL ,ÑecNULL ,ÑecNULL,ÑecNULL,

56 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL ,ÑecNULL ,ÑecNULL,ÑecNULL

59 (*
	gªcREG
[32])() =

61 
ªcBLTZ
 , 
ªcBGEZ
 , 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

62 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

63 
ªcBLTZAL
, 
ªcBGEZAL
, 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

64 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL

67 (*
	gªcCP0
[32])() =

69 
ªcMFC0
, 
ªcNULL
, 
ªcCFC0
,ÑecNULL, 
ªcMTC0
,ÑecNULL, 
ªcCTC0
,ÑecNULL,

70 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

71 
ªcRFE
 , 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

72 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL

75 (*
	gªcCP2
[64])() =

77 
ªcBASIC
, 
ªcRTPS
 , 
ªcNULL
 ,ÑecNULL,ÑecNULL,ÑecNULL , 
ªcNCLIP
,ÑecNULL,

78 
ªcNULL
 ,ÑecNULL ,ÑecNULL ,ÑecNULL, 
ªcOP
 ,ÑecNULL ,ÑecNULL ,ÑecNULL,

79 
ªcDPCS
 , 
ªcINTPL
, 
ªcMVMVA
, 
ªcNCDS
, 
ªcCDP
 , 
ªcNULL
 , 
ªcNCDT
 ,ÑecNULL,

80 
ªcNULL
 ,ÑecNULL ,ÑecNULL , 
ªcNCCS
, 
ªcCC
 ,ÑecNULL , 
ªcNCS
 ,ÑecNULL,

81 
ªcNCT
 , 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL ,ÑecNULL ,ÑecNULL,

82 
ªcSQR
 , 
ªcDCPL
 , 
ªcDPCT
 , 
ªcNULL
,ÑecNULL, 
ªcAVSZ3
, 
ªcAVSZ4
,ÑecNULL,

83 
ªcRTPT
 , 
ªcNULL
 ,ÑecNULL ,ÑecNULL,ÑecNULL,ÑecNULL ,ÑecNULL ,ÑecNULL,

84 
ªcNULL
 ,ÑecNULL ,ÑecNULL ,ÑecNULL,ÑecNULL, 
ªcGPF
 , 
ªcGPL
 , 
ªcNCCT


87 (*
	gªcCP2BSC
[32])() =

89 
ªcMFC2
, 
ªcNULL
, 
ªcCFC2
,ÑecNULL, 
ªcMTC2
,ÑecNULL, 
ªcCTC2
,ÑecNULL,

90 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

91 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,

92 
ªcNULL
,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL,ÑecNULL

	@src/recompiler/mips/rec_alu.cpp.h

3 
	#REC_ITYPE_RT_RS_I16
(
ö¢
, 
_π_
, 
_rs_
, 
_imm_
) \

5 
u32
 
π
 = 
_π_
; \

6 
u32
 
rs
 = 
_rs_
; \

7 
s32
 
imm
 = 
_imm_
; \

8 i‡(!
π
) ; \

9 
	`SëUndef
(
_π_
); \

10 
u32
 
r1
, 
r2
; \

11 i‡(
rs
 =
π
) { \

12 
r1
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
); \

13 
r2
 = 
r1
; \

15 
r1
 = 
	`ªgMùsToHo°
(
π
, 
REG_FIND
, 
REG_REGISTER
); \

16 
r2
 = 
	`ªgMùsToHo°
(
rs
, 
REG_LOAD
, 
REG_REGISTER
); \

18 
	`ö¢
(
r1
, 
r2
, 
imm
); \

19 
	`ªgMùsCh™ged
(
π
); \

20 
	`ªgU∆ock
(
r1
); \

21 
	`ªgU∆ock
(
r2
); \

22 } 0)

	)

24 
	$ªcADDI
()

26 
u32
 
s
 = 
iRegs
[
_Rs_
].s;

29 i‡(!
_Rs_
) {

30 
s
 = 1;

32 i‡(
	`IsC⁄°
(
_Rt_
Ë&& 
iRegs
[_Rt_].
r
 =(
s32
)(
s16
)(
_Imm_
))

36 
	`REC_ITYPE_RT_RS_I16
(
ADDIU
, 
_Rt_
, 
_Rs_
, ((
s16
)(
_Imm_
)));

37 i‡(
s
)

38 
	`SëC⁄°
(
_Rt_
, 
iRegs
[
_Rs_
].
r
 + (
s16
)(
_Imm_
));

39 
	}
}

41 
	$ªcADDIU
(Ë{ 
	`ªcADDI
(); 
	}
}

42 
	$ªcSLTI
(Ë{ 
	`REC_ITYPE_RT_RS_I16
(
SLTI
, 
_Rt_
, 
_Rs_
, ((
s16
)(
_Imm_
))); 
	}
}

43 
	$ªcSLTIU
(Ë{ 
	`REC_ITYPE_RT_RS_I16
(
SLTIU
, 
_Rt_
, 
_Rs_
, ((
s16
)(
_Imm_
))); 
	}
}

45 
	#REC_ITYPE_RT_RS_U16
(
ö¢
, 
_π_
, 
_rs_
, 
_imm_
) \

47 
u32
 
π
 = 
_π_
; \

48 
u32
 
rs
 = 
_rs_
; \

49 
u32
 
imm
 = 
_imm_
; \

50 i‡(!
π
) ; \

51 
	`SëUndef
(
_π_
); \

52 
u32
 
r1
, 
r2
; \

53 i‡(
rs
 =
π
) { \

54 
r1
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
); \

55 
r2
 = 
r1
; \

57 
r1
 = 
	`ªgMùsToHo°
(
π
, 
REG_FIND
, 
REG_REGISTER
); \

58 
r2
 = 
	`ªgMùsToHo°
(
rs
, 
REG_LOAD
, 
REG_REGISTER
); \

60 
	`ö¢
(
r1
, 
r2
, 
imm
); \

61 
	`ªgMùsCh™ged
(
π
); \

62 
	`ªgU∆ock
(
r1
); \

63 
	`ªgU∆ock
(
r2
); \

64 } 0)

	)

67 
	$ªcANDI
(Ë{ 
	`REC_ITYPE_RT_RS_U16
(
ANDI
, 
_Rt_
, 
_Rs_
, ((
u16
)(
_ImmU_
))); 
	}
}

68 
	$ªcORI
()

70 
u32
 
s
 = 
iRegs
[
_Rs_
].s;

73 i‡(!
_Rs_
) {

74 
s
 = 1;

76 i‡(
	`IsC⁄°
(
_Rt_
Ë&& 
iRegs
[_Rt_].
r
 =(
u16
)(
_Imm_
))

80 
	`REC_ITYPE_RT_RS_U16
(
ORI
, 
_Rt_
, 
_Rs_
, ((
u16
)(
_ImmU_
)));

81 i‡(
s
)

82 
	`SëC⁄°
(
_Rt_
, 
iRegs
[
_Rs_
].
r
 | ((
u16
)(
_Imm_
)));

83 
	}
}

84 
	$ªcXORI
(Ë{ 
	`REC_ITYPE_RT_RS_U16
(
XORI
, 
_Rt_
, 
_Rs_
, ((
u16
)(
_ImmU_
))); 
	}
}

86 
	#REC_ITYPE_RT_U16
(
ö¢
, 
_π_
, 
_imm_
) \

88 
u32
 
π
 = 
_π_
; \

89 
u32
 
imm
 = 
_imm_
; \

90 i‡(!
π
) ; \

91 
u32
 
r1
 = 
	`ªgMùsToHo°
(
π
, 
REG_FIND
, 
REG_REGISTER
); \

92 
	`ö¢
(
r1
, 
imm
); \

93 
	`ªgMùsCh™ged
(
π
); \

94 
	`ªgU∆ock
(
r1
); \

95 } 0)

	)

97 
	$ªcLUI
()

99 
u32
 
π
 = 
_Rt_
;

100 
u32
 
imm
 =((
u16
)
_ImmU_
) << 16;

103 i‡(
	`IsC⁄°
(
π
Ë&& 
iRegs
[π].
r
 =
imm
)

106 
	`SëC⁄°
(
π
, 
imm
);

107 
	`REC_ITYPE_RT_U16
(
LUI
, 
_Rt_
, ((
u16
)(
_ImmU_
)));

108 
	}
}

110 
	#REC_RTYPE_RD_RS_RT
(
ö¢
, 
_rd_
, 
_rs_
, 
_π_
) \

112 
u32
 
rd
 = 
_rd_
; \

113 
u32
 
π
 = 
_π_
; \

114 
u32
 
rs
 = 
_rs_
; \

115 i‡(!
rd
) ; \

116 
u32
 
r1
, 
r2
, 
r3
; \

117 
	`SëUndef
(
_rd_
); \

118 i‡(
rs
 =
rd
) { \

119 
r1
 = 
	`ªgMùsToHo°
(
rd
, 
REG_LOAD
, 
REG_REGISTER
); \

120 
r2
 = 
r1
; \

121 
r3
 = (
rd
 =
π
 ? 
r1
 : 
	`ªgMùsToHo°
‘t, 
REG_LOAD
, 
REG_REGISTER
)); \

122 } i‡(
π
 =
rd
) { \

123 
r1
 = 
	`ªgMùsToHo°
(
rd
, 
REG_LOAD
, 
REG_REGISTER
); \

124 
r3
 = 
r1
; \

125 
r2
 = 
	`ªgMùsToHo°
(
rs
, 
REG_LOAD
, 
REG_REGISTER
); \

127 
r1
 = 
	`ªgMùsToHo°
(
rd
, 
REG_FIND
, 
REG_REGISTER
); \

128 
r2
 = 
	`ªgMùsToHo°
(
rs
, 
REG_LOAD
, 
REG_REGISTER
); \

129 
r3
 = (
rs
 =
π
 ? 
r2
 : 
	`ªgMùsToHo°
‘t, 
REG_LOAD
, 
REG_REGISTER
)); \

131 
	`ö¢
(
r1
, 
r2
, 
r3
); \

132 
	`ªgMùsCh™ged
(
rd
); \

133 
	`ªgU∆ock
(
r1
); \

134 
	`ªgU∆ock
(
r2
); \

135 
	`ªgU∆ock
(
r3
); \

136 } 0)

	)

138 
	$ªcADD
(Ë{ 
	`REC_RTYPE_RD_RS_RT
(
ADDU
, 
_Rd_
, 
_Rs_
, 
_Rt_
); 
	}
}

139 
	$ªcADDU
(Ë{ 
	`ªcADD
(); 
	}
}

140 
	$ªcSUB
(Ë{ 
	`REC_RTYPE_RD_RS_RT
(
SUBU
, 
_Rd_
, 
_Rs_
, 
_Rt_
); 
	}
}

141 
	$ªcSUBU
(Ë{ 
	`ªcSUB
(); 
	}
}

143 
	$ªcAND
(Ë{ 
	`REC_RTYPE_RD_RS_RT
(
AND
, 
_Rd_
, 
_Rs_
, 
_Rt_
); 
	}
}

144 
	$ªcOR
(Ë{ 
	`REC_RTYPE_RD_RS_RT
(
OR
, 
_Rd_
, 
_Rs_
, 
_Rt_
); 
	}
}

145 
	$ªcXOR
(Ë{ 
	`REC_RTYPE_RD_RS_RT
(
XOR
, 
_Rd_
, 
_Rs_
, 
_Rt_
); 
	}
}

146 
	$ªcNOR
(Ë{ 
	`REC_RTYPE_RD_RS_RT
(
NOR
, 
_Rd_
, 
_Rs_
, 
_Rt_
); 
	}
}

148 
	$ªcSLT
(Ë{ 
	`REC_RTYPE_RD_RS_RT
(
SLT
, 
_Rd_
, 
_Rs_
, 
_Rt_
); 
	}
}

149 
	$ªcSLTU
(Ë{ 
	`REC_RTYPE_RD_RS_RT
(
SLTU
, 
_Rd_
, 
_Rs_
, 
_Rt_
); 
	}
}

151 
	#REC_RTYPE_RD_RT_SA
(
ö¢
, 
_rd_
, 
_π_
, 
_ß_
) \

153 
u32
 
rd
 = 
_rd_
; \

154 
u32
 
π
 = 
_π_
; \

155 
u32
 
ß
 = 
_ß_
; \

156 i‡(!
rd
) ; \

157 
	`SëUndef
(
_rd_
); \

158 
u32
 
r1
, 
r2
; \

159 i‡(
rd
 =
π
) { \

160 i‡(!
ß
) ; \

161 
r1
 = 
	`ªgMùsToHo°
(
rd
, 
REG_LOAD
, 
REG_REGISTER
); \

162 
r2
 = 
r1
; \

164 
r1
 = 
	`ªgMùsToHo°
(
rd
, 
REG_FIND
, 
REG_REGISTER
); \

165 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
); \

167 
	`ö¢
(
r1
, 
r2
, 
ß
); \

168 
	`ªgMùsCh™ged
(
rd
); \

169 
	`ªgU∆ock
(
r1
); \

170 
	`ªgU∆ock
(
r2
); \

171 } 0)

	)

173 
	$ªcSLL
()

175 
u32
 
s
 = 
iRegs
[
_Rt_
].s;

177 
	`REC_RTYPE_RD_RT_SA
(
SLL
, 
_Rd_
, 
_Rt_
, 
_Sa_
);

179 i‡(
s
)

180 
	`SëC⁄°
(
_Rd_
, 
iRegs
[
_Rt_
].
r
 << 
_Sa_
);

181 
	}
}

183 
	$ªcSRL
()

185 
u32
 
s
 = 
iRegs
[
_Rt_
].s;

187 
	`REC_RTYPE_RD_RT_SA
(
SRL
, 
_Rd_
, 
_Rt_
, 
_Sa_
);

189 i‡(
s
)

190 
	`SëC⁄°
(
_Rd_
, (
u32
)
iRegs
[
_Rt_
].
r
 >> 
_Sa_
);

191 
	}
}

193 
	$ªcSRA
()

195 
u32
 
s
 = 
iRegs
[
_Rt_
].s;

197 
	`REC_RTYPE_RD_RT_SA
(
SRA
, 
_Rd_
, 
_Rt_
, 
_Sa_
);

199 i‡(
s
)

200 
	`SëC⁄°
(
_Rd_
, (
s32
)
iRegs
[
_Rt_
].
r
 >> 
_Sa_
);

201 
	}
}

203 
	#REC_RTYPE_RD_RT_RS
(
ö¢
, 
_rd_
, 
_π_
, 
_rs_
) \

205 
u32
 
rd
 = 
_rd_
; \

206 
u32
 
π
 = 
_π_
; \

207 
u32
 
rs
 = 
_rs_
; \

208 i‡(!
rd
) ; \

209 
	`SëUndef
(
_rd_
); \

210 
u32
 
r1
, 
r2
, 
r3
; \

211 i‡(
rd
 =
π
) { \

212 i‡(!
rs
) ; \

213 
r1
 = 
	`ªgMùsToHo°
(
rd
, 
REG_LOAD
, 
REG_REGISTER
); \

214 
r2
 = 
r1
; \

215 
r3
 = (
rs
 =
rd
 ? 
r1
 : 
	`ªgMùsToHo°
‘s, 
REG_LOAD
, 
REG_REGISTER
)); \

216 } i‡(
rd
 =
rs
) { \

217 
r1
 = 
	`ªgMùsToHo°
(
rd
, 
REG_LOAD
, 
REG_REGISTER
); \

218 
r3
 = 
r1
; \

219 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
); \

221 
r1
 = 
	`ªgMùsToHo°
(
rd
, 
REG_FIND
, 
REG_REGISTER
); \

222 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
); \

223 
r3
 = (
rs
 =
π
Ë? 
r2
 : 
	`ªgMùsToHo°
‘s, 
REG_LOAD
, 
REG_REGISTER
); \

225 
	`ö¢
(
r1
, 
r2
, 
r3
); \

226 
	`ªgMùsCh™ged
(
rd
); \

227 
	`ªgU∆ock
(
r1
); \

228 
	`ªgU∆ock
(
r2
); \

229 
	`ªgU∆ock
(
r3
); \

230 } 0)

	)

232 
	$ªcSLLV
(Ë{ 
	`REC_RTYPE_RD_RT_RS
(
SLLV
, 
_Rd_
, 
_Rt_
, 
_Rs_
); 
	}
}

233 
	$ªcSRLV
(Ë{ 
	`REC_RTYPE_RD_RT_RS
(
SRLV
, 
_Rd_
, 
_Rt_
, 
_Rs_
); 
	}
}

234 
	$ªcSRAV
(Ë{ 
	`REC_RTYPE_RD_RT_RS
(
SRAV
, 
_Rd_
, 
_Rt_
, 
_Rs_
); 
	}
}

	@src/recompiler/mips/rec_bcu.cpp.h

1 
	$ªcSYSCALL
()

3 
	`ªgCÀ¨Jump
();

5 
	`LI32
(
TEMP_1
, 
pc
 - 4);

6 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
pc
));

8 
	`LI16
(
MIPSREG_A1
, (
bønch
 == 1 ? 1 : 0));

9 
	`JAL
(
psxEx˚±i⁄
);

10 
	`LI16
(
MIPSREG_A0
, 0x20);

12 
	`ªc_ªcompûe_íd_∑π1
();

13 
	`LW
(
MIPSREG_V0
, 
PERM_REG_1
, 
	`off
(
pc
));

14 
	`ªc_ªcompûe_íd_∑π2
();

16 
íd_block
 = 1;

17 
	}
}

20 
	$iLﬂdTe°
(
u32
 
code
)

23 
u32
 
›
 = 
	`_fOp_
(
code
);

24 
›
) {

26 
	`_fRs_
(
code
)) {

33 
	`_fFun˘_
(
code
)) {

35 
	`_fRs_
(
code
)) {

47 i‡(
›
 >= 0x20 && op <= 0x26) {

53 
	}
}

55 
	$DñayTe°
(
u32
 
pc
, u32 
bpc
)

57 
u32
 
code1
 = *(u32 *)((*)
	`PSXM
(
pc
));

58 
u32
 
code2
 = *(u32 *)((*)
	`PSXM
(
bpc
));

59 
u32
 
ªg
 = 
	`_fRt_
(
code1
);

62 #ifde‡
LOG_BRANCHLOADDELAYS


63 i‡(
	`iLﬂdTe°
(
code1
)) {

64 
i
 = 
	`psxTe°LﬂdDñay
(
ªg
, 
code2
);

65 i‡(
i
 == 1 || i == 2) {

66 
buf„r
[512];

67 
	`¥ötf
("Ca£ %dáà%08x\n", 
i
, 
pc
);

68 
u32
 
jcode
 = *(u32 *)((*)
	`PSXM
(
pc
 - 4));

69 
	`dißsm_mùs_ö°ru˘i⁄
(
jcode
, 
buf„r
, 
pc
 - 4, 0, 0);

70 
	`¥ötf
("%08x: %s\n", 
pc
 - 4, 
buf„r
);

71 
	`dißsm_mùs_ö°ru˘i⁄
(
code1
, 
buf„r
, 
pc
, 0, 0);

72 
	`¥ötf
("%08x: %s\n", 
pc
, 
buf„r
);

73 
	`dißsm_mùs_ö°ru˘i⁄
(
code2
, 
buf„r
, 
bpc
, 0, 0);

74 
	`¥ötf
("%08x: %s\n\n", 
bpc
, 
buf„r
);

79 i‡(
	`iLﬂdTe°
(
code1
)) {

80  
	`psxTe°LﬂdDñay
(
ªg
, 
code2
);

87 
	}
}

92 
	$ªcRevDñaySlŸ
(
u32
 
pc
, u32 
bpc
)

94 
bønch
 = 1;

96 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
bpc
));

97 
ªcBSC
[
psxRegs
.
code
>>26]();

99 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

100 
ªcBSC
[
psxRegs
.
code
>>26]();

102 
bønch
 = 0;

103 
	}
}

106 
	$ªcDñaySlŸ
()

108 
bønch
 = 1;

109 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

110 
	`DISASM_PSX
(
pc
);

111 
pc
+=4;

113 
ªcBSC
[
psxRegs
.
code
>>26]();

114 
bønch
 = 0;

115 
	}
}

118 
	$emôBxxZ
(
™dlök
, 
u32
 
bpc
, u32 
nbpc
)

120 
u32
 
code
 = 
psxRegs
.code;

121 
u32
 
br1
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOADBRANCH
, 
REG_REGISTERBRANCH
);

123 
dt
 = 
	`DñayTe°
(
pc
, 
bpc
);

125 i‡(
dt
 == 3 || dt == 0) {

126 
	`ªcDñaySlŸ
();

129 
u32
 *
back∑tch
 = (u32 *)
ªcMem
;

132 
code
 & 0xfc1f0000) {

134 0x04100000: 
	`BGEZ
(
br1
, 0); ;

136 0x04110000: 
	`BLTZ
(
br1
, 0); ;

137 0x1c000000: 
	`BLEZ
(
br1
, 0); ;

138 0x18000000: 
	`BGTZ
(
br1
, 0); ;

140 
	`¥ötf
("Eº‹ opcode=%08x\n", 
code
);

141 
	`exô
(1);

144 
	`ªgPushSèã
();

145 
u32
 
ø
 = 0;

147 i‡(
dt
 == 2) {

148 
	`NOP
();

151 i‡(
™dlök
) {

152 
ø
 = 
	`ªgMùsToHo°
(31, 
REG_FIND
, 
REG_REGISTER
);

153 
	`LI32
(
ø
, 
nbpc
);

154 
	`ªgMùsCh™ged
(31);

156 
	`SëUndef
(31);

159 
	`ªcRevDñaySlŸ
(
pc
, 
bpc
);

160 
bpc
 += 4;

163 
	`LUI
(
TEMP_1
, (
bpc
 >> 16));

165 
	`ªc_ªcompûe_íd_∑π1
();

166 
	`ªgCÀ¨Bønch
();

167 
	`ORI
(
MIPSREG_V0
, 
TEMP_1
, (
bpc
 & 0xffff));

169 i‡(
™dlök
 && 
dt
 != 2) {

170 i‡((
bpc
 >> 16Ë=(
nbpc
 >> 16)) {

172 
	`ORI
(
TEMP_1
, TEMP_1, (
nbpc
 & 0xffff));

174 
	`LI32
(
TEMP_1
, 
nbpc
);

176 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`offGPR
(31));

179 
	`ªc_ªcompûe_íd_∑π2
();

181 
	`ªgP›Sèã
();

183 
	`fixup_bønch
(
back∑tch
);

184 
	`ªgU∆ock
(
br1
);

186 i‡(
dt
 != 3 && dt != 0) {

187 
	`ªcDñaySlŸ
();

189 
	}
}

192 
	$emôBxx
(
u32
 
bpc
)

194 #ifde‡
LOG_BRANCHLOADDELAYS


195 
u32
 
dt
 = 
	`DñayTe°
(
pc
, 
bpc
);

198 
u32
 
code
 = 
psxRegs
.code;

199 
u32
 
br1
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOADBRANCH
, 
REG_REGISTERBRANCH
);

200 
u32
 
br2
 = 
	`ªgMùsToHo°
(
_Rt_
, 
REG_LOADBRANCH
, 
REG_REGISTERBRANCH
);

201 
	`ªcDñaySlŸ
();

202 
u32
 *
back∑tch
 = (u32 *)
ªcMem
;

206 
code
 & 0xfc000000) {

207 0x10000000: 
	`BNE
(
br1
, 
br2
, 0); ;

208 0x14000000: 
	`BEQ
(
br1
, 
br2
, 0); ;

210 
	`¥ötf
("Eº‹ opcode=%08x\n", 
code
);

211 
	`exô
(1);

214 
	`LUI
(
TEMP_1
, (
bpc
 >> 16));

216 
	`ªc_ªcompûe_íd_∑π1
();

217 
	`ªgCÀ¨Bønch
();

218 
	`ORI
(
MIPSREG_V0
, 
TEMP_1
, (
bpc
 & 0xffff));

220 
	`ªc_ªcompûe_íd_∑π2
();

222 
	`fixup_bønch
(
back∑tch
);

223 
	`ªgU∆ock
(
br1
);

224 
	`ªgU∆ock
(
br2
);

225 
	}
}

227 
	$iJumpN‹mÆ
(
u32
 
bpc
)

229 #ifde‡
LOG_BRANCHLOADDELAYS


230 
u32
 
dt
 = 
	`DñayTe°
(
pc
, 
bpc
);

233 
	`ªcDñaySlŸ
();

235 
	`ªc_ªcompûe_íd_∑π1
();

236 
	`ªgCÀ¨Jump
();

237 
	`LI32
(
MIPSREG_V0
, 
bpc
);

238 
	`ªc_ªcompûe_íd_∑π2
();

240 
íd_block
 = 1;

241 
	}
}

243 
	$iJumpAL
(
u32
 
bpc
, u32 
nbpc
)

245 #ifde‡
LOG_BRANCHLOADDELAYS


246 
u32
 
dt
 = 
	`DñayTe°
(
pc
, 
bpc
);

249 
u32
 
ø
 = 
	`ªgMùsToHo°
(31, 
REG_FIND
, 
REG_REGISTER
);

250 
	`LI32
(
ø
, 
nbpc
);

251 
	`SëC⁄°
(31, 
nbpc
);

252 
	`ªgMùsCh™ged
(31);

254 
dt
 = 
	`DñayTe°
(
pc
, 
bpc
);

255 i‡(
dt
 == 2) {

256 
	`ªcRevDñaySlŸ
(
pc
, 
bpc
);

257 
bpc
 += 4;

258 } i‡(
dt
 == 3 || dt == 0) {

259 
	`ªcDñaySlŸ
();

262 
	`ªc_ªcompûe_íd_∑π1
();

263 
	`ªgCÀ¨Jump
();

264 
	`LI32
(
MIPSREG_V0
, 
bpc
);

265 
	`ªc_ªcompûe_íd_∑π2
();

267 
íd_block
 = 1;

268 
	}
}

270 
	$ªcBLTZ
()

273 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

274 
u32
 
nbpc
 = 
pc
 + 4;

276 i‡(
bpc
 =
nbpc
 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

280 i‡(!(
_Rs_
)) {

281 
	`ªcDñaySlŸ
();

285 
	`emôBxxZ
(0, 
bpc
, 
nbpc
);

286 
	}
}

288 
	$ªcBGTZ
()

291 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

292 
u32
 
nbpc
 = 
pc
 + 4;

294 i‡(
bpc
 =
nbpc
 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

298 i‡(!(
_Rs_
)) {

299 
	`ªcDñaySlŸ
();

303 
	`emôBxxZ
(0, 
bpc
, 
nbpc
);

304 
	}
}

306 
	$ªcBLTZAL
()

309 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

310 
u32
 
nbpc
 = 
pc
 + 4;

312 i‡(!(
_Rs_
)) {

313 
	`ªcDñaySlŸ
();

317 
	`emôBxxZ
(1, 
bpc
, 
nbpc
);

318 
	}
}

320 
	$ªcBGEZAL
()

323 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

324 
u32
 
nbpc
 = 
pc
 + 4;

326 i‡(!(
_Rs_
)) {

327 
	`iJumpAL
(
bpc
, (
pc
 + 4));

331 
	`emôBxxZ
(1, 
bpc
, 
nbpc
);

332 
	}
}

334 
	$ªcJ
()

338 
	`iJumpN‹mÆ
(
_T¨gë_
 * 4 + (
pc
 & 0xf0000000));

339 
	}
}

341 
	$ªcJAL
()

345 
	`iJumpAL
(
_T¨gë_
 * 4 + (
pc
 & 0xf0000000), (pc + 4));

346 
	}
}

348 (*
psxBSC
[64])();

351 
u32
 
	$execBønchLﬂdDñay
(
u32
 
pc
, u32 
bpc
)

353 
u32
 
code1
 = *(u32 *)((*)
	`PSXM
(
pc
));

354 
u32
 
code2
 = *(u32 *)((*)
	`PSXM
(
bpc
));

356 
bønch
 = 1;

358 #ifde‡
LOG_BRANCHLOADDELAYS


359 
i
 = 
	`psxTe°LﬂdDñay
(
	`_fRt_
(
code1
), 
code2
);

360 i‡(
i
 == 1 || i == 2) {

361 
buf„r
[512];

362 
	`¥ötf
("Ca£ %dáà%08x\n", 
i
, 
pc
);

363 
u32
 
jcode
 = *(u32 *)((*)
	`PSXM
(
pc
 - 4));

364 
	`dißsm_mùs_ö°ru˘i⁄
(
jcode
, 
buf„r
, 
pc
 - 4, 0, 0);

365 
	`¥ötf
("%08x: %s\n", 
pc
 - 4, 
buf„r
);

366 
	`dißsm_mùs_ö°ru˘i⁄
(
code1
, 
buf„r
, 
pc
, 0, 0);

367 
	`¥ötf
("%08x: %s\n", 
pc
, 
buf„r
);

368 
	`dißsm_mùs_ö°ru˘i⁄
(
code2
, 
buf„r
, 
bpc
, 0, 0);

369 
	`¥ötf
("%08x: %s\n\n", 
bpc
, 
buf„r
);

373 
	`psxTe°LﬂdDñay
(
	`_fRt_
(
code1
), 
code2
)) {

375 
psxRegs
.
code
 = 
code2
;

376 
psxBSC
[
code2
 >> 26]();

378 
bpc
 += 4;

382 
psxRegs
.
code
 = 
code1
;

383 
psxBSC
[
code1
 >> 26]();

390 
bønch
 = 0;

392  
bpc
;

393 
	}
}

395 
	$ªcJR_lﬂd_dñay
()

397 
	`ªgCÀ¨Jump
();

398 
u32
 
br1
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOADBRANCH
, 
REG_REGISTERBRANCH
);

400 
	`LI32
(
MIPSREG_A0
, 
pc
);

401 
	`JAL
(
execBønchLﬂdDñay
);

402 
	`MOV
(
MIPSREG_A1
, 
br1
);

406 
	`ªc_ªcompûe_íd_∑π1
();

407 
pc
 += 4;

408 
	`ªgU∆ock
(
br1
);

409 
	`ªc_ªcompûe_íd_∑π2
();

411 
íd_block
 = 1;

412 
	}
}

414 
	$ªcJR
()

417 
u32
 
code
 = *(u32 *)((*)
	`PSXM
(
pc
));

420 i‡(
	`iLﬂdTe°
(
code
)) {

421 
	`ªcJR_lﬂd_dñay
();

426 
u32
 
br1
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOADBRANCH
, 
REG_REGISTERBRANCH
);

427 
	`ªcDñaySlŸ
();

429 
	`ªc_ªcompûe_íd_∑π1
();

430 
	`ªgCÀ¨Jump
();

431 
	`MOV
(
MIPSREG_V0
, 
br1
);

432 
	`ªgU∆ock
(
br1
);

433 
	`ªc_ªcompûe_íd_∑π2
();

435 
íd_block
 = 1;

436 
	}
}

438 
	$ªcJALR
()

441 
u32
 
br1
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOADBRANCH
, 
REG_REGISTERBRANCH
);

442 
u32
 
rd
 = 
	`ªgMùsToHo°
(
_Rd_
, 
REG_FIND
, 
REG_REGISTER
);

443 
	`LI32
(
rd
, 
pc
 + 4);

444 
	`SëC⁄°
(
_Rd_
, 
pc
 + 4);

445 
	`ªgMùsCh™ged
(
_Rd_
);

446 
	`ªcDñaySlŸ
();

448 
	`ªc_ªcompûe_íd_∑π1
();

449 
	`ªgCÀ¨Jump
();

450 
	`MOV
(
MIPSREG_V0
, 
br1
);

451 
	`ªgU∆ock
(
br1
);

452 
	`ªc_ªcompûe_íd_∑π2
();

454 
íd_block
 = 1;

455 
	}
}

457 
	$ªcBEQ
()

460 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

461 
u32
 
nbpc
 = 
pc
 + 4;

463 i‡(
bpc
 =
nbpc
 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

467 i‡(
_Rs_
 =
_Rt_
) {

468 
	`iJumpN‹mÆ
(
bpc
);

472 
	`emôBxx
(
bpc
);

473 
	}
}

475 
	$ªcBNE
()

478 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

479 
u32
 
nbpc
 = 
pc
 + 4;

481 i‡(
bpc
 =
nbpc
 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

485 i‡(!(
_Rs_
Ë&& !(
_Rt_
)) {

486 
	`ªcDñaySlŸ
();

490 
	`emôBxx
(
bpc
);

491 
	}
}

493 
	$ªcBLEZ
()

496 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

497 
u32
 
nbpc
 = 
pc
 + 4;

499 i‡(
bpc
 =
nbpc
 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

503 i‡(!(
_Rs_
)) {

504 
	`iJumpN‹mÆ
(
bpc
);

508 
	`emôBxxZ
(0, 
bpc
, 
nbpc
);

509 
	}
}

511 
	$ªcBGEZ
()

514 
u32
 
bpc
 = 
_Imm_
 * 4 + 
pc
;

515 
u32
 
nbpc
 = 
pc
 + 4;

517 i‡(
bpc
 =
nbpc
 && 
	`psxTe°LﬂdDñay
(
_Rs_
, 
	`PSXMu32
(bpc)) == 0) {

521 i‡(!(
_Rs_
)) {

522 
	`iJumpN‹mÆ
(
bpc
);

526 
	`emôBxxZ
(0, 
bpc
, 
nbpc
);

527 
	}
}

529 
	$ªcBREAK
(Ë{ 
	}
}

535 
	$ªcHLE
()

537 
	`ªgCÀ¨Jump
();

539 
	`LI32
(
TEMP_1
, 
pc
);

540 
	`JAL
(((
u32
)
psxHLEt
[
psxRegs
.
code
 & 0x7]));

541 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
pc
));

543 
	`ªc_ªcompûe_íd_∑π1
();

544 
	`LW
(
MIPSREG_V0
, 
PERM_REG_1
, 
	`off
(
pc
));

545 
	`ªc_ªcompûe_íd_∑π2
();

547 
íd_block
 = 1;

548 
	}
}

	@src/recompiler/mips/rec_cp0.cpp.h

1 
	$ªcMFC0
()

4 i‡(!
_Rt_
) ;

5 
	`SëUndef
(
_Rt_
);

6 
u32
 
π
 = 
	`ªgMùsToHo°
(
_Rt_
, 
REG_FIND
, 
REG_REGISTER
);

8 
	`LW
(
π
, 
PERM_REG_1
, 
	`offCP0
(
_Rd_
));

9 
	`ªgMùsCh™ged
(
_Rt_
);

10 
	`ªgU∆ock
(
π
);

11 
	}
}

13 
	$ªcCFC0
()

17 
	`ªcMFC0
();

18 
	}
}

22 
	$emôTe°SWI¡s
()

34 
	`AND
(
TEMP_1
, 
MIPSREG_A0
, 
MIPSREG_A1
);

35 
	`ANDI
(
MIPSREG_A1
, MIPSREG_A1, 0x1);

37 
u32
 *
back∑tch1
 = (u32 *)
ªcMem
;

38 
	`BEQZ
(
MIPSREG_A1
, 0);

39 
	`ANDI
(
TEMP_1
, TEMP_1, 0x300);

41 
u32
 *
back∑tch2
 = (u32 *)
ªcMem
;

42 
	`BEQZ
(
TEMP_1
, 0);

47 #ifde‡
HAVE_MIPS32R2_EXT_INS


48 
	`INS
(
MIPSREG_A0
, 0, 2, 5);

50 
	`LI16
(
TEMP_2
, 0x7c);

51 
	`NOR
(
TEMP_2
, 0, TEMP_2);

52 
	`AND
(
MIPSREG_A0
, MIPSREG_A0, 
TEMP_2
);

57 
	`SW
(
MIPSREG_A0
, 
PERM_REG_1
, 
	`offCP0
(13));

60 
	`LI32
(
TEMP_1
, 
pc
 - 4);

61 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
pc
));

63 
	`ªgCÀ¨Bønch
();

64 
	`JAL
(
psxEx˚±i⁄
);

67 
	`LI16
(
MIPSREG_A1
, (
bønch
 == 1 ? 1 : 0));

69 
	`ªc_ªcompûe_íd_∑π1
();

70 
	`LW
(
MIPSREG_V0
, 
PERM_REG_1
, 
	`off
(
pc
));

71 
	`ªc_ªcompûe_íd_∑π2
();

73 
	`fixup_bønch
(
back∑tch1
);

74 
	`fixup_bønch
(
back∑tch2
);

75 
	}
}

77 
	$ªcMTC0
()

81 
u32
 
π
 = 
	`ªgMùsToHo°
(
_Rt_
, 
REG_LOAD
, 
REG_REGISTER
);

83 
_Rd_
) {

89 i‡(
	`IsC⁄°
(
_Rt_
)) {

90 
	`SW
(
π
, 
PERM_REG_1
, 
	`offCP0
(12));

91 i‡((
iRegs
[
_Rt_
].
r
 & 0x401) == 0x401) {

92 
	`SW
(0, 
PERM_REG_1
, 
	`off
(
io_cy˛e_cou¡î
));

95 
	`ANDI
(
TEMP_1
, 
π
, 0x401);

96 
	`LI16
(
TEMP_2
, 0x401);

97 
u32
 *
back∑tch
 = (u32 *)
ªcMem
;

98 
	`BNE
(
TEMP_1
, 
TEMP_2
, 0);

99 
	`SW
(
π
, 
PERM_REG_1
, 
	`offCP0
(12));

100 
	`SW
(0, 
PERM_REG_1
, 
	`off
(
io_cy˛e_cou¡î
));

101 
	`fixup_bønch
(
back∑tch
);

109 i‡(!
	`IsC⁄°
(
_Rt_
) ||

110 ((
iRegs
[
_Rt_
].
r
 & 0x300) && (iRegs[_Rt_].r & 0x1))) {

114 
	`LW
(
MIPSREG_A0
, 
PERM_REG_1
, 
	`offCP0
(13));

115 
	`MOV
(
MIPSREG_A1
, 
π
);

117 
	`emôTe°SWI¡s
();

128 
	`LW
(
MIPSREG_A0
, 
PERM_REG_1
, 
	`offCP0
(13));

130 #ifde‡
HAVE_MIPS32R2_EXT_INS


131 
	`EXT
(
TEMP_1
, 
π
, 8, 2);

132 
	`INS
(
MIPSREG_A0
, 
TEMP_1
, 8, 2);

134 
	`LI16
(
TEMP_1
, 0x300);

135 
	`AND
(
TEMP_2
, 
π
, 
TEMP_1
);

136 
	`NOR
(
TEMP_1
, 0, TEMP_1);

137 
	`AND
(
MIPSREG_A0
, MIPSREG_A0, 
TEMP_1
);

138 
	`OR
(
MIPSREG_A0
, MIPSREG_A0, 
TEMP_2
);

140 
	`SW
(
MIPSREG_A0
, 
PERM_REG_1
, 
	`offCP0
(13));

144 i‡(!
	`IsC⁄°
(
_Rt_
Ë|| (
iRegs
[_Rt_].
r
 & 0x300)) {

147 
	`LW
(
MIPSREG_A1
, 
PERM_REG_1
, 
	`offCP0
(12));

149 
	`emôTe°SWI¡s
();

154 
	`SW
(
π
, 
PERM_REG_1
, 
	`offCP0
(
_Rd_
));

158 
	`ªgU∆ock
(
π
);

159 
	}
}

161 
	$ªcCTC0
()

165 
	`ªcMTC0
();

166 
	}
}

168 
	$ªcRFE
()

174 
	`LW
(
TEMP_1
, 
PERM_REG_1
, 
	`offCP0
(12));

178 
	`SW
(0, 
PERM_REG_1
, 
	`off
(
io_cy˛e_cou¡î
));

180 #ifde‡
HAVE_MIPS32R2_EXT_INS


181 
	`EXT
(
TEMP_2
, 
TEMP_1
, 2, 4);

182 
	`INS
(
TEMP_1
, 
TEMP_2
, 0, 4);

184 
	`SRL
(
TEMP_2
, 
TEMP_1
, 4);

185 
	`SLL
(
TEMP_2
, TEMP_2, 4);

187 
	`ANDI
(
TEMP_1
, TEMP_1, 0x3c);

188 
	`SRL
(
TEMP_1
, TEMP_1, 2);

189 
	`OR
(
TEMP_1
, 
TEMP_2
, TEMP_1);

192 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`offCP0
(12));

193 
	}
}

	@src/recompiler/mips/rec_gte.cpp.h

1 
	#CP2_FUNC
(
f
) \

2 
gã
##
	`f
(); \

3 
ªc
##
	`f
() \

5 
	`LI32
(
TEMP_1
, 
psxRegs
.
code
); \

6 
	`JAL
(
gã
##
f
); \

7 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
code
)); \

9 

	)

10 
CP2_FUNC
(
DCPL
);

11 
CP2_FUNC
(
RTPS
);

12 
CP2_FUNC
(
OP
);

13 
CP2_FUNC
(
NCLIP
);

14 
CP2_FUNC
(
DPCS
);

15 
CP2_FUNC
(
INTPL
);

16 
CP2_FUNC
(
MVMVA
);

17 
CP2_FUNC
(
NCDS
);

18 
CP2_FUNC
(
NCDT
);

19 
CP2_FUNC
(
CDP
);

20 
CP2_FUNC
(
NCCS
);

21 
CP2_FUNC
(
CC
);

22 
CP2_FUNC
(
NCS
);

23 
CP2_FUNC
(
NCT
);

24 
CP2_FUNC
(
SQR
);

25 
CP2_FUNC
(
DPCT
);

26 
CP2_FUNC
(
AVSZ3
);

27 
CP2_FUNC
(
AVSZ4
);

28 
CP2_FUNC
(
RTPT
);

29 
CP2_FUNC
(
GPF
);

30 
CP2_FUNC
(
GPL
);

31 
CP2_FUNC
(
NCCT
);

33 
	$ªcCFC2
()

35 i‡(!
_Rt_
) ;

37 
	`SëUndef
(
_Rt_
);

38 
u32
 
π
 = 
	`ªgMùsToHo°
(
_Rt_
, 
REG_FIND
, 
REG_REGISTER
);

40 
	`LW
(
π
, 
PERM_REG_1
, 
	`offCP2C
(
_Rd_
));

41 
	`ªgMùsCh™ged
(
_Rt_
);

42 
	`ªgU∆ock
(
π
);

43 
	}
}

45 
	$emôCTC2
(
u32
 
π
, u32 
ªg
)

47 
ªg
) {

49 #ifde‡
HAVE_MIPS32R2_SEB_SEH


50 
	`SEH
(
TEMP_1
, 
π
);

52 
	`SLL
(
TEMP_1
, 
π
, 16);

53 
	`SRA
(
TEMP_1
, TEMP_1, 16);

55 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`offCP2C
(
ªg
));

61 
	`LI32
(
TEMP_1
, 0x7ffff000);

62 
	`AND
(
TEMP_1
, 
π
, TEMP_1);

63 
	`LI32
(
TEMP_2
, 0x7f87e000);

64 
	`AND
(
TEMP_2
, 
TEMP_1
, TEMP_2);

65 
	`LUI
(
TEMP_3
, 0x8000);

66 
	`OR
(
TEMP_3
, 
TEMP_1
, TEMP_3);

67 
	`MOVN
(
TEMP_1
, 
TEMP_3
, 
TEMP_2
);

69 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`offCP2C
(
ªg
));

73 
	`SW
(
π
, 
PERM_REG_1
, 
	`offCP2C
(
ªg
));

76 
	}
}

78 
	$ªcCTC2
()

80 
u32
 
π
 = 
	`ªgMùsToHo°
(
_Rt_
, 
REG_LOAD
, 
REG_REGISTER
);

81 
	`emôCTC2
(
π
, 
_Rd_
);

82 
	`ªgU∆ock
(
π
);

83 
	}
}

86 
	$emôLIM
(
u32
 
π
)

88 
u32
 *
∑tch
;

90 
	`SLT
(1, 
π
, 0);

91 
∑tch
 = (
u32
 *)
ªcMem
;

92 
	`BNE
(1, 0, 0);

93 
	`MOVN
(
π
, 0, 1);

95 
	`LI16
(
MIPSREG_V0
, 0x1f);

96 
	`SLTI
(1, 
π
, 0x20);

97 
	`MOVZ
(
π
, 
MIPSREG_V0
, 1);

100 
	`fixup_bønch
(
∑tch
);

101 
	}
}

104 
	$emôMFC2
(
u32
 
π
, u32 
ªg
)

106 
ªg
) {

108 
	`LH
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[
ªg
]));

109 
	`SW
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[
ªg
]));

113 
	`LHU
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[
ªg
]));

114 
	`SW
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[
ªg
]));

118 
	`LW
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[14]));

119 
	`SW
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[
ªg
]));

124 
	`LH
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
p
[9].
sw
.
l
));

125 
	`SRA
(
π
,Ñt, 7);

126 
	`emôLIM
(
π
);

127 
	`LH
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
CP2D
.
p
[10].
sw
.
l
));

128 
	`SRA
(
TEMP_1
, TEMP_1, 7);

129 
	`emôLIM
(
TEMP_1
);

130 #ifde‡
HAVE_MIPS32R2_EXT_INS


131 
	`INS
(
π
, 
TEMP_1
, 5, 5);

133 
	`SLL
(
TEMP_1
, TEMP_1, 5);

134 
	`OR
(
π
,Ñt, 
TEMP_1
);

136 
	`LH
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
CP2D
.
p
[11].
sw
.
l
));

137 
	`SRA
(
TEMP_1
, TEMP_1, 7);

138 
	`emôLIM
(
TEMP_1
);

139 #ifde‡
HAVE_MIPS32R2_EXT_INS


140 
	`INS
(
π
, 
TEMP_1
, 10, 5);

142 
	`SLL
(
TEMP_1
, TEMP_1, 10);

143 
	`OR
(
π
,Ñt, 
TEMP_1
);

145 
	`SW
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[29]));

153 
	`LW
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[
ªg
]));

156 
	}
}

159 
	$emôMTC2
(
u32
 
π
, u32 
ªg
)

161 
ªg
) {

163 
	`LW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
CP2D
.
p
[13]));

164 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
CP2D
.
p
[12]));

165 
	`LW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
CP2D
.
p
[14]));

166 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
CP2D
.
p
[13]));

168 
	`SW
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
p
[14]));

169 
	`SW
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
p
[15]));

173 
	`SW
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[
ªg
]));

174 #ifde‡
HAVE_MIPS32R2_EXT_INS


175 
	`EXT
(
TEMP_1
, 
π
, 0, 5);

177 
	`ANDI
(
TEMP_1
, 
π
, 0x1f);

179 
	`SLL
(
TEMP_1
, TEMP_1, 7);

181 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[9]));

182 #ifde‡
HAVE_MIPS32R2_EXT_INS


183 
	`EXT
(
TEMP_1
, 
π
, 5, 5);

184 
	`SLL
(
TEMP_1
, TEMP_1, 7);

186 
	`ANDI
(
TEMP_1
, 
π
, 0x1f << 5);

187 
	`SLL
(
TEMP_1
, TEMP_1, 2);

190 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[10]));

191 #ifde‡
HAVE_MIPS32R2_EXT_INS


192 
	`EXT
(
TEMP_1
, 
π
, 10, 5);

193 
	`SLL
(
TEMP_1
, TEMP_1, 7);

195 
	`ANDI
(
TEMP_1
, 
π
, 0x1f << 10);

196 
	`SRL
(
TEMP_1
, TEMP_1, 3);

199 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[11]));

203 
u32
 *
back∑tch
;

204 
	`SW
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[30]));

205 
	`SLT
(1, 
π
, 0);

206 
back∑tch
 = (
u32
 *)
ªcMem
;

207 
	`BEQZ
(1, 0);

208 
	`MOV
(
TEMP_1
, 
π
);

210 
	`NOR
(
TEMP_1
, 0, 
π
);

211 
	`fixup_bønch
(
back∑tch
);

212 
	`CLZ
(
TEMP_1
, TEMP_1);

213 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[31]));

221 
	`SW
(
π
, 
PERM_REG_1
, 
	`off
(
CP2D
.
r
[
ªg
]));

224 
	}
}

226 
	$ªcMFC2
()

228 i‡(!
_Rt_
) ;

230 
	`SëUndef
(
_Rt_
);

231 
u32
 
π
 = 
	`ªgMùsToHo°
(
_Rt_
, 
REG_FIND
, 
REG_REGISTER
);

233 
	`emôMFC2
(
π
, 
_Rd_
);

235 
	`ªgMùsCh™ged
(
_Rt_
);

236 
	`ªgU∆ock
(
π
);

237 
	}
}

239 
	$ªcMTC2
()

241 
u32
 
π
 = 
	`ªgMùsToHo°
(
_Rt_
, 
REG_LOAD
, 
REG_REGISTER
);

243 
	`emôMTC2
(
π
, 
_Rd_
);

245 
	`ªgU∆ock
(
π
);

246 
	}
}

248 
	$ªcLWC2
()

250 
u32
 
rs
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOAD
, 
REG_REGISTER
);

252 
	`JAL
(
psxMemRód32
);

253 
	`ADDIU
(
MIPSREG_A0
, 
rs
, 
_Imm_
);

255 
	`emôMTC2
(
MIPSREG_V0
, 
_Rt_
);

257 
	`ªgU∆ock
(
rs
);

258 
	}
}

260 
	$ªcSWC2
()

262 
u32
 
rs
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOAD
, 
REG_REGISTER
);

264 
	`emôMFC2
(
MIPSREG_A1
, 
_Rt_
);

266 
	`JAL
(
psxMemWrôe32
);

267 
	`ADDIU
(
MIPSREG_A0
, 
rs
, 
_Imm_
);

269 
	`ªgU∆ock
(
rs
);

270 
	}
}

	@src/recompiler/mips/rec_lsu.cpp.h

2 
	#USE_DIRECT_MEM_ACCESS


	)

3 
	#USE_CONST_ADDRESSES


	)

9 #i‡
deföed
(
SHMEM_MIRRORING
Ë|| deföed(
TMPFS_MIRRORING
)

10 
	#SKIP_SAME_2MB_REGION_CHECK


	)

13 
	#OPCODE
(
ö¢
, 
π
, 
∫
, 
imm
) \

14 
	`wrôe32
((
ö¢
Ë| ((
∫
Ë<< 21Ë| ((
π
Ë<< 16Ë| ((
imm
Ë& 0xffff))

	)

20 #i‡
deföed
(
LOG_LOADS
Ë|| deföed (LOG_LOADSË|| deföed (
LOG_WL_WR
)

21 
	$dißsm_psx
(
u32
 
pc
)

23 
buf„r
[512];

24 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
pc
));

25 
	`dißsm_mùs_ö°ru˘i⁄
(
›code
, 
buf„r
, 
pc
, 0, 0);

26 
	`¥ötf
("%08x: %08x %s\n", 
pc
, 
›code
, 
buf„r
);

27 
	}
}

31 
	$emôAddrCÆc
(
u32
 
r1
)

35 i‡((
u32
)
psxM
 == 0x10000000) {

37 
	`LUI
(
TEMP_2
, 0x1000);

38 #ifde‡
HAVE_MIPS32R2_EXT_INS


39 
	`INS
(
TEMP_2
, 
r1
, 0, 0x15);

41 
	`SLL
(
TEMP_1
, 
r1
, 11);

42 
	`SRL
(
TEMP_1
, TEMP_1, 11);

43 
	`OR
(
TEMP_2
, TEMP_2, 
TEMP_1
);

46 
	`LW
(
TEMP_2
, 
PERM_REG_1
, 
	`off
(
psxM
));

47 #ifde‡
HAVE_MIPS32R2_EXT_INS


48 
	`EXT
(
TEMP_1
, 
r1
, 0, 0x15);

50 
	`SLL
(
TEMP_1
, 
r1
, 11);

51 
	`SRL
(
TEMP_1
, TEMP_1, 11);

53 
	`ADDU
(
TEMP_2
, TEMP_2, 
TEMP_1
);

55 
	}
}

57 
s32
 
	gimm_max
, 
	gimm_mö
;

59 
	$ˇlc_lﬂds
()

61 
cou¡
 = 0;

62 
u32
 
PC
 = 
pc
;

63 
u32
 
›code
 = 
psxRegs
.
code
;

64 
u32
 
rs
 = 
_Rs_
;

66 
imm_mö
 = 
imm_max
 = 
	`_fImm_
(
›code
);

69 i‡(
bønch
)

74 (
	`_fOp_
(
›code
) == 0x20 || _fOp_(opcode) == 0x24 ||

75 
	`_fOp_
(
›code
) == 0x21 || _fOp_(opcode) == 0x25 ||

76 
	`_fOp_
(
›code
Ë=0x23Ë&& (
rs
 =
	`_fRs_
(opcode))) {

79 i‡(
	`_fImm_
(
›code
Ë> 
imm_max
) imm_max = _fImm_(opcode);

80 i‡(
	`_fImm_
(
›code
Ë< 
imm_mö
) imm_min = _fImm_(opcode);

82 
›code
 = *(
u32
 *)((*)
	`PSXM
(
PC
));

84 
PC
 += 4;

85 
cou¡
++;

88 i‡(
	`_fRt_
(
›code
Ë=
	`_fRs_
(opcode))

92 #ifde‡
LOG_LOADS


93 i‡(
cou¡
) {

94 
	`¥ötf
("\nFOUND %dÜﬂds, mö: %d, max: %d\n", 
cou¡
, 
imm_mö
, 
imm_max
);

95 
u32
 
dpc
 = 
pc
 - 4;

96 ; 
dpc
 < 
PC
 - 4; dpc += 4)

97 
	`dißsm_psx
(
dpc
);

101  
cou¡
;

102 
	}
}

104 
	$ˇlc_°‹es
()

106 
cou¡
 = 0;

107 
u32
 
PC
 = 
pc
;

108 
u32
 
›code
 = 
psxRegs
.
code
;

109 
u32
 
rs
 = 
_Rs_
;

111 
imm_mö
 = 
imm_max
 = 
	`_fImm_
(
›code
);

114 i‡(
bønch
)

119 ((
	`_fOp_
(
›code
) == 0x28) || (_fOp_(opcode) == 0x29) ||

120 (
	`_fOp_
(
›code
Ë=0x2b)Ë&& (
rs
 =
	`_fRs_
(opcode))) {

123 i‡(
	`_fImm_
(
›code
Ë> 
imm_max
) imm_max = _fImm_(opcode);

124 i‡(
	`_fImm_
(
›code
Ë< 
imm_mö
) imm_min = _fImm_(opcode);

126 
›code
 = *(
u32
 *)((*)
	`PSXM
(
PC
));

128 
PC
 += 4;

129 
cou¡
++;

132 #ifde‡
LOG_STORES


133 i‡(
cou¡
) {

134 
	`¥ötf
("\nFOUND %d st‹es, mö: %d, max: %d\n", 
cou¡
, 
imm_mö
, 
imm_max
);

135 
u32
 
dpc
 = 
pc
 - 4;

136 ; 
dpc
 < 
PC
 - 4; dpc += 4)

137 
	`dißsm_psx
(
dpc
);

141  
cou¡
;

142 
	}
}

144 
	$LﬂdFromAddr
(
cou¡
, 
boﬁ
 
f‹˚_ödúe˘
)

147 
u32
 
r1
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOAD
, 
REG_REGISTER
);

148 
u32
 
PC
 = 
pc
 - 4;

150 #ifde‡
WITH_DISASM


151 
i
 = 0; i < 
cou¡
-1; i++)

152 
	`DISASM_PSX
(
pc
 + 
i
 * 4);

155 #ifde‡
USE_DIRECT_MEM_ACCESS


156 
u32
 *
back∑tch_œbñ_exô_1
 = 0;

157 i‡(!
f‹˚_ödúe˘
)

159 
	`ªgPushSèã
();

168 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
_Imm_
);

170 #ifde‡
HAVE_MIPS32R2_EXT_INS


171 
	`EXT
(
MIPSREG_A1
, 
MIPSREG_A0
, 24, 4);

173 
	`LUI
(
MIPSREG_A1
, 0x0f00);

174 
	`AND
(
MIPSREG_A1
, MIPSREG_A1, 
MIPSREG_A0
);

176 
u32
 *
back∑tch_œbñ_hÀ_1
 = (u32 *)
ªcMem
;

177 
	`BGTZ
(
MIPSREG_A1
, 0);

182 #i‚de‡
SKIP_SAME_2MB_REGION_CHECK


184 #ifde‡
HAVE_MIPS32R2_EXT_INS


185 
	`EXT
(
TEMP_3
, 
r1
, 21, 3);

186 
	`EXT
(
MIPSREG_A1
, 
MIPSREG_A0
, 21, 3);

188 
	`SRL
(
TEMP_3
, 
r1
, 21);

189 
	`ANDI
(
TEMP_3
, TEMP_3, 7);

190 
	`SRL
(
MIPSREG_A1
, 
MIPSREG_A0
, 21);

191 
	`ANDI
(
MIPSREG_A1
, MIPSREG_A1, 7);

193 
u32
 *
back∑tch_œbñ_hÀ_2
 = (u32 *)
ªcMem
;

194 
	`BNE
(
MIPSREG_A1
, 
TEMP_3
, 0);

201 
	`emôAddrCÆc
(
r1
);

203 
icou¡
 = 
cou¡
;

205 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
PC
));

206 
s32
 
imm
 = 
	`_fImm_
(
›code
);

207 
u32
 
π
 = 
	`_fRt_
(
›code
);

208 
u32
 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_FIND
, 
REG_REGISTER
);

210 i‡(
icou¡
 == 1) {

212 
back∑tch_œbñ_exô_1
 = (
u32
 *)
ªcMem
;

213 
	`B
(0);

217 
	`OPCODE
(
›code
 & 0xfc000000, 
r2
, 
TEMP_2
, 
imm
);

219 
	`SëUndef
(
π
);

220 
	`ªgMùsCh™ged
(
π
);

221 
	`ªgU∆ock
(
r2
);

223 
PC
 += 4;

224 } --
icou¡
);

226 
PC
 = 
pc
 - 4;

228 
	`ªgP›Sèã
();

231 
	`fixup_bønch
(
back∑tch_œbñ_hÀ_1
);

232 #i‚de‡
SKIP_SAME_2MB_REGION_CHECK


233 
	`fixup_bønch
(
back∑tch_œbñ_hÀ_2
);

239 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
PC
));

240 
u32
 
π
 = 
	`_fRt_
(
›code
);

241 
s32
 
imm
 = 
	`_fImm_
(
›code
);

242 
u32
 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_FIND
, 
REG_REGISTER
);

244 
›code
 & 0xfc000000) {

246 
	`JAL
(
psxMemRód8
);

247 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
imm
);

248 #ifde‡
HAVE_MIPS32R2_SEB_SEH


249 
	`SEB
(
r2
, 
MIPSREG_V0
);

251 
	`SLL
(
r2
, 
MIPSREG_V0
, 24);

252 
	`SRA
(
r2
,Ñ2, 24);

256 
	`JAL
(
psxMemRód8
);

257 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
imm
);

258 
	`MOV
(
r2
, 
MIPSREG_V0
);

261 
	`JAL
(
psxMemRód16
);

262 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
imm
);

263 #ifde‡
HAVE_MIPS32R2_SEB_SEH


264 
	`SEH
(
r2
, 
MIPSREG_V0
);

266 
	`SLL
(
r2
, 
MIPSREG_V0
, 16);

267 
	`SRA
(
r2
,Ñ2, 16);

271 
	`JAL
(
psxMemRód16
);

272 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
imm
);

273 
	`MOV
(
r2
, 
MIPSREG_V0
);

276 
	`JAL
(
psxMemRód32
);

277 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
imm
);

278 
	`MOV
(
r2
, 
MIPSREG_V0
);

282 
	`SëUndef
(
π
);

283 
	`ªgMùsCh™ged
(
π
);

284 
	`ªgU∆ock
(
r2
);

286 
PC
 += 4;

287 } --
cou¡
);

289 #ifde‡
USE_DIRECT_MEM_ACCESS


291 i‡(!
f‹˚_ödúe˘
)

292 
	`fixup_bønch
(
back∑tch_œbñ_exô_1
);

295 
pc
 = 
PC
;

296 
	`ªgU∆ock
(
r1
);

297 
	}
}

299 
	$LﬂdFromC⁄°Addr
()

301 
cou¡
 = 
	`ˇlc_lﬂds
();

303 
boﬁ
 
c⁄°_addr
 = 
Ál£
;

304 #ifde‡
USE_CONST_ADDRESSES


305 
c⁄°_addr
 = 
	`IsC⁄°
(
_Rs_
);

308 i‡(!
c⁄°_addr
) {

310 
	`LﬂdFromAddr
(
cou¡
, 
Ál£
);

315 
u32
 
addr_max
 = 
iRegs
[
_Rs_
].
r
 + 
imm_max
;

316 i‡((
addr_max
 & 0x1fffffff) >= 0x800000) {

319 
	`LﬂdFromAddr
(
cou¡
, 
åue
);

327 #ifde‡
WITH_DISASM


328 
i
 = 0; i < 
cou¡
-1; i++)

329 
	`DISASM_PSX
(
pc
 + 
i
 * 4);

332 
u32
 
PC
 = 
pc
 - 4;

336 
u16
 
mem_addr_hi
 = 0;

338 
icou¡
 = 
cou¡
;

341 i‡(!
	`IsC⁄°
(
_Rs_
))

344 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
PC
));

345 
s32
 
imm
 = 
	`_fImm_
(
›code
);

346 
u32
 
π
 = 
	`_fRt_
(
›code
);

347 
u32
 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_FIND
, 
REG_REGISTER
);

349 
u32
 
mem_addr
 = (u32)
psxM
 + ((
iRegs
[
_Rs_
].
r
 + 
imm
) & 0x1fffff);

351 i‡((
icou¡
 =
cou¡
Ë|| (
	`ADR_HI
(
mem_addr
Ë!
mem_addr_hi
)) {

352 
mem_addr_hi
 = 
	`ADR_HI
(
mem_addr
);

353 
	`LUI
(
TEMP_2
, 
	`ADR_HI
(
mem_addr
));

356 
	`OPCODE
(
›code
 & 0xfc000000, 
r2
, 
TEMP_2
, 
	`ADR_LO
(
mem_addr
));

358 
	`SëUndef
(
π
);

359 
	`ªgMùsCh™ged
(
π
);

360 
	`ªgU∆ock
(
r2
);

361 
PC
 += 4;

362 } --
icou¡
);

364 
pc
 = 
PC
;

365 
	}
}

367 
	$St‹eToAddr
(
cou¡
, 
boﬁ
 
f‹˚_ödúe˘
)

369 
icou¡
;

370 
u32
 
r1
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOAD
, 
REG_REGISTER
);

371 
u32
 
PC
 = 
pc
 - 4;

373 #ifde‡
WITH_DISASM


374 
i
 = 0; i < 
cou¡
-1; i++)

375 
	`DISASM_PSX
(
pc
 + 
i
 * 4);

378 #ifde‡
USE_DIRECT_MEM_ACCESS


381 i‡(!
f‹˚_ödúe˘
) {

382 i‡(!
C⁄fig
.
HLE
)

383 
	`LW
(
MIPSREG_A1
, 
PERM_REG_1
, 
	`off
(
wrôeok
));

389 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
_Imm_
);

391 #ifde‡
USE_DIRECT_MEM_ACCESS


392 
u32
 *
back∑tch_œbñ_exô_1
 = 0;

393 i‡(!
f‹˚_ödúe˘
)

395 
	`ªgPushSèã
();

416 
u32
 *
back∑tch_œbñ_hÀ_1
;

417 #ifde‡
HAVE_MIPS32R2_EXT_INS


418 
	`EXT
(
TEMP_3
, 
MIPSREG_A0
, 24, 4);

420 
	`LUI
(
TEMP_3
, 0x0f00);

421 
	`AND
(
TEMP_3
, TEMP_3, 
MIPSREG_A0
);

423 i‡(!
C⁄fig
.
HLE
) {

424 
	`SLTU
(
MIPSREG_A1
, 
TEMP_3
, MIPSREG_A1);

425 
back∑tch_œbñ_hÀ_1
 = (
u32
 *)
ªcMem
;

426 
	`BEQZ
(
MIPSREG_A1
, 0);

428 
back∑tch_œbñ_hÀ_1
 = (
u32
 *)
ªcMem
;

429 
	`BNE
(
TEMP_3
, 0, 0);

434 #i‚de‡
SKIP_SAME_2MB_REGION_CHECK


436 #ifde‡
HAVE_MIPS32R2_EXT_INS


437 
	`EXT
(
TEMP_3
, 
r1
, 21, 3);

438 
	`EXT
(
MIPSREG_A1
, 
MIPSREG_A0
, 21, 3);

440 
	`SRL
(
TEMP_3
, 
r1
, 21);

441 
	`ANDI
(
TEMP_3
, TEMP_3, 7);

442 
	`SRL
(
MIPSREG_A1
, 
MIPSREG_A0
, 21);

443 
	`ANDI
(
MIPSREG_A1
, MIPSREG_A1, 7);

445 
u32
 *
back∑tch_œbñ_hÀ_2
 = (u32 *)
ªcMem
;

446 
	`BNE
(
MIPSREG_A1
, 
TEMP_3
, 0);

452 
	`emôAddrCÆc
(
r1
);

454 
icou¡
 = 
cou¡
;

455 
	`LUI
(
TEMP_3
, 
	`ADR_HI
(
ªcRAM
));

457 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
PC
));

458 
s32
 
imm
 = 
	`_fImm_
(
›code
);

459 
u32
 
π
 = 
	`_fRt_
(
›code
);

460 
u32
 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
);

462 
	`OPCODE
(
›code
 & 0xfc000000, 
r2
, 
TEMP_2
, 
imm
);

465 i‡(
icou¡
 !
cou¡
) {

468 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
imm
);

471 #ifde‡
HAVE_MIPS32R2_EXT_INS


472 
	`EXT
(
TEMP_1
, 
MIPSREG_A0
, 0, 0x15);

474 
	`SLL
(
TEMP_1
, 
MIPSREG_A0
, 11);

475 
	`SRL
(
TEMP_1
, TEMP_1, 11);

478 i‡((
›code
 & 0xfc000000) != 0xac000000) {

480 #ifde‡
HAVE_MIPS32R2_EXT_INS


481 
	`INS
(
TEMP_1
, 0, 0, 2);

483 
	`SRL
(
TEMP_1
, TEMP_1, 2);

484 
	`SLL
(
TEMP_1
, TEMP_1, 2);

487 
	`ADDU
(
TEMP_1
, TEMP_1, 
TEMP_3
);

489 
back∑tch_œbñ_exô_1
 = 0;

490 i‡(
icou¡
 == 1) {

492 
back∑tch_œbñ_exô_1
 = (
u32
 *)
ªcMem
;

493 
	`B
(0);

497 
	`SW
(0, 
TEMP_1
, 
	`ADR_LO
(
ªcRAM
));

499 
PC
 += 4;

501 
	`ªgU∆ock
(
r2
);

502 } --
icou¡
);

504 
PC
 = 
pc
 - 4;

506 
	`ªgP›Sèã
();

509 
	`fixup_bønch
(
back∑tch_œbñ_hÀ_1
);

510 #i‚de‡
SKIP_SAME_2MB_REGION_CHECK


511 
	`fixup_bønch
(
back∑tch_œbñ_hÀ_2
);

516 
icou¡
 = 
cou¡
;

518 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
PC
));

519 
u32
 
π
 = 
	`_fRt_
(
›code
);

520 
s32
 
imm
 = 
	`_fImm_
(
›code
);

521 
u32
 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
);

523 i‡(
icou¡
 !
cou¡
) {

526 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
imm
);

529 
›code
 & 0xfc000000) {

531 
	`JAL
(
psxMemWrôe8
);

532 
	`MOV
(
MIPSREG_A1
, 
r2
);

535 
	`JAL
(
psxMemWrôe16
);

536 
	`MOV
(
MIPSREG_A1
, 
r2
);

539 
	`JAL
(
psxMemWrôe32
);

540 
	`MOV
(
MIPSREG_A1
, 
r2
);

545 
PC
 += 4;

547 
	`ªgU∆ock
(
r2
);

548 } --
icou¡
);

550 #ifde‡
USE_DIRECT_MEM_ACCESS


552 i‡(!
f‹˚_ödúe˘
)

553 
	`fixup_bønch
(
back∑tch_œbñ_exô_1
);

556 
pc
 = 
PC
;

557 
	`ªgU∆ock
(
r1
);

558 
	}
}

560 
	$St‹eToC⁄°Addr
()

562 
cou¡
 = 
	`ˇlc_°‹es
();

564 
boﬁ
 
c⁄°_addr
 = 
Ál£
;

565 #ifde‡
USE_CONST_ADDRESSES


566 
c⁄°_addr
 = 
	`IsC⁄°
(
_Rs_
);

569 i‡(!
c⁄°_addr
) {

571 
	`St‹eToAddr
(
cou¡
, 
Ál£
);

576 
u32
 
addr_max
 = 
iRegs
[
_Rs_
].
r
 + 
imm_max
;

577 i‡((
addr_max
 & 0x1fffffff) >= 0x800000) {

580 
	`St‹eToAddr
(
cou¡
, 
åue
);

588 #ifde‡
WITH_DISASM


589 
i
 = 0; i < 
cou¡
-1; i++)

590 
	`DISASM_PSX
(
pc
 + 
i
 * 4);

593 
u32
 
PC
 = 
pc
 - 4;

595 
u32
 *
back∑tch_œbñ_no_wrôe
 = 
NULL
;

596 i‡(!
C⁄fig
.
HLE
)

597 
	`LW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
wrôeok
));

601 
u16
 
mem_addr_hi
 = 0;

602 
u16
 
code_addr_hi
 = 0;

604 
u32
 
œ°_code_addr
 = 0;

606 
icou¡
 = 
cou¡
;

608 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
PC
));

609 
s32
 
imm
 = 
	`_fImm_
(
›code
);

610 
u32
 
π
 = 
	`_fRt_
(
›code
);

611 
u32
 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
);

613 
u32
 
mem_addr
 = (u32)
psxM
 + ((
iRegs
[
_Rs_
].
r
 + 
imm
) & 0x1fffff);

614 
u32
 
code_addr
 = (u32)
ªcRAM
 + ((
iRegs
[
_Rs_
].
r
 + 
imm
) & 0x1fffff);

615 
code_addr
 &= ~3;

617 i‡((
icou¡
 =
cou¡
Ë|| (
	`ADR_HI
(
code_addr
Ë!
code_addr_hi
)) {

618 
code_addr_hi
 = 
	`ADR_HI
(
code_addr
);

619 
	`LUI
(
TEMP_3
, 
	`ADR_HI
(
code_addr
));

623 i‡(!
C⁄fig
.
HLE
) {

624 
back∑tch_œbñ_no_wrôe
 = (
u32
 *)
ªcMem
;

625 
	`BEQZ
(
TEMP_1
, 0);

629 i‡(
code_addr
 !
œ°_code_addr
) {

631 
œ°_code_addr
 = 
code_addr
;

632 
	`SW
(0, 
TEMP_3
, 
	`ADR_LO
(
code_addr
));

634 i‡((
icou¡
 =
cou¡
Ë|| (
	`ADR_HI
(
mem_addr
Ë!
mem_addr_hi
)) {

635 
mem_addr_hi
 = 
	`ADR_HI
(
mem_addr
);

636 
	`LUI
(
TEMP_2
, 
	`ADR_HI
(
mem_addr
));

642 
mem_addr_hi
 = 
	`ADR_HI
(
mem_addr
);

643 
	`LUI
(
TEMP_2
, 
	`ADR_HI
(
mem_addr
));

647 
	`OPCODE
(
›code
 & 0xfc000000, 
r2
, 
TEMP_2
, 
	`ADR_LO
(
mem_addr
));

650 i‡(!
C⁄fig
.
HLE
)

651 
	`fixup_bønch
(
back∑tch_œbñ_no_wrôe
);

653 
	`ªgU∆ock
(
r2
);

654 
PC
 += 4;

655 } --
icou¡
);

657 
pc
 = 
PC
;

658 
	}
}

660 
	$ªcLB
()

663 
	`LﬂdFromC⁄°Addr
();

664 
	}
}

666 
	$ªcLBU
()

669 
	`LﬂdFromC⁄°Addr
();

670 
	}
}

672 
	$ªcLH
()

675 
	`LﬂdFromC⁄°Addr
();

676 
	}
}

678 
	$ªcLHU
()

681 
	`LﬂdFromC⁄°Addr
();

682 
	}
}

684 
	$ªcLW
()

687 
	`LﬂdFromC⁄°Addr
();

688 
	}
}

690 
	$ªcSB
()

693 
	`St‹eToC⁄°Addr
();

694 
	}
}

696 
	$ªcSH
()

699 
	`St‹eToC⁄°Addr
();

700 
	}
}

702 
	$ªcSW
()

705 
	`St‹eToC⁄°Addr
();

706 
	}
}

708 
u32
 
	gLWL_MASKSHIFT
[8] = { 0xffffff, 0xffff, 0xff, 0,

710 
u32
 
	gLWR_MASKSHIFT
[8] = { 0, 0xff000000, 0xffff0000, 0xffffff00,

713 
	$gí_LWL_LWR
(
cou¡
, 
boﬁ
 
f‹˚_ödúe˘
)

715 
icou¡
;

716 
u32
 
r1
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOAD
, 
REG_REGISTER
);

717 
u32
 
PC
 = 
pc
 - 4;

719 #ifde‡
WITH_DISASM


720 
i
 = 0; i < 
cou¡
-1; i++)

721 
	`DISASM_PSX
(
pc
 + 
i
 * 4);

726 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
_Imm_
);

728 #ifde‡
USE_DIRECT_MEM_ACCESS


729 
u32
 *
back∑tch_œbñ_exô_1
 = 0;

730 i‡(!
f‹˚_ödúe˘
)

732 
	`ªgPushSèã
();

739 #ifde‡
HAVE_MIPS32R2_EXT_INS


740 
	`EXT
(
MIPSREG_A1
, 
MIPSREG_A0
, 24, 4);

742 
	`LUI
(
MIPSREG_A1
, 0x0f00);

743 
	`AND
(
MIPSREG_A1
, MIPSREG_A1, 
MIPSREG_A0
);

745 
u32
 *
back∑tch_œbñ_hÀ_1
 = (u32 *)
ªcMem
;

746 
	`BGTZ
(
MIPSREG_A1
, 0);

752 
	`emôAddrCÆc
(
r1
);

754 
icou¡
 = 
cou¡
;

756 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
PC
));

757 
s32
 
imm
 = 
	`_fImm_
(
›code
);

758 
u32
 
π
 = 
	`_fRt_
(
›code
);

759 
u32
 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
);

761 i‡(
icou¡
 == 1) {

763 
back∑tch_œbñ_exô_1
 = (
u32
 *)
ªcMem
;

764 
	`B
(0);

768 
	`OPCODE
(
›code
 & 0xfc000000, 
r2
, 
TEMP_2
, 
imm
);

770 
	`SëUndef
(
π
);

771 
	`ªgMùsCh™ged
(
π
);

772 
	`ªgU∆ock
(
r2
);

774 
PC
 += 4;

775 } --
icou¡
);

777 
PC
 = 
pc
 - 4;

779 
	`ªgP›Sèã
();

782 
	`fixup_bønch
(
back∑tch_œbñ_hÀ_1
);

786 
icou¡
 = 
cou¡
;

788 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
PC
));

789 
u32
 
ö¢
 = 
›code
 & 0xfc000000;

790 
u32
 
π
 = 
	`_fRt_
(
›code
);

791 
s32
 
imm
 = 
	`_fImm_
(
›code
);

792 
u32
 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
);

794 i‡(
icou¡
 !
cou¡
) {

797 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
imm
);

800 #ifde‡
HAVE_MIPS32R2_EXT_INS


801 
	`JAL
(
psxMemRód32
);

802 
	`INS
(
MIPSREG_A0
, 0, 0, 2);

804 
	`SRL
(
MIPSREG_A0
, MIPSREG_A0, 2);

805 
	`JAL
(
psxMemRód32
);

806 
	`SLL
(
MIPSREG_A0
, MIPSREG_A0, 2);

809 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
imm
);

811 i‡(
ö¢
 == 0x88000000)

812 
	`LUI
(
TEMP_2
, 
	`ADR_HI
(
LWL_MASKSHIFT
));

814 
	`LUI
(
TEMP_2
, 
	`ADR_HI
(
LWR_MASKSHIFT
));

817 #ifde‡
HAVE_MIPS32R2_EXT_INS


818 
	`INS
(
TEMP_2
, 
MIPSREG_A0
, 2, 2);

820 
	`ANDI
(
TEMP_1
, 
MIPSREG_A0
, 3);

821 
	`SLL
(
TEMP_1
, TEMP_1, 2);

822 
	`OR
(
TEMP_2
, TEMP_2, 
TEMP_1
);

825 
	`ADDIU
(
TEMP_3
, 
TEMP_2
, 16);

827 i‡(
ö¢
 == 0x88000000) {

828 
	`LW
(
TEMP_2
, TEMP_2, 
	`ADR_LO
(
LWL_MASKSHIFT
));

829 
	`LW
(
TEMP_3
, TEMP_3, 
	`ADR_LO
(
LWL_MASKSHIFT
));

831 
	`LW
(
TEMP_2
, TEMP_2, 
	`ADR_LO
(
LWR_MASKSHIFT
));

832 
	`LW
(
TEMP_3
, TEMP_3, 
	`ADR_LO
(
LWR_MASKSHIFT
));

835 
	`AND
(
r2
,Ñ2, 
TEMP_2
);

837 i‡(
ö¢
 == 0x88000000)

838 
	`SLLV
(
TEMP_3
, 
MIPSREG_V0
, TEMP_3);

840 
	`SRLV
(
TEMP_3
, 
MIPSREG_V0
, TEMP_3);

842 
	`OR
(
r2
,Ñ2, 
TEMP_3
);

844 
	`SëUndef
(
π
);

845 
	`ªgMùsCh™ged
(
π
);

846 
	`ªgU∆ock
(
r2
);

848 
PC
 += 4;

849 } --
icou¡
);

851 #ifde‡
USE_DIRECT_MEM_ACCESS


853 i‡(!
f‹˚_ödúe˘
)

854 
	`fixup_bønch
(
back∑tch_œbñ_exô_1
);

857 
pc
 = 
PC
;

858 
	`ªgU∆ock
(
r1
);

859 
	}
}

861 
u32
 
	gSWL_MASKSHIFT
[8] = { 0xffffff00, 0xffff0000, 0xff000000, 0,

863 
u32
 
	gSWR_MASKSHIFT
[8] = { 0, 0xff, 0xffff, 0xffffff,

866 
	$gí_SWL_SWR
(
cou¡
, 
boﬁ
 
f‹˚_ödúe˘
)

868 
icou¡
;

869 
u32
 
r1
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOAD
, 
REG_REGISTER
);

870 
u32
 
PC
 = 
pc
 - 4;

872 #ifde‡
WITH_DISASM


873 
i
 = 0; i < 
cou¡
-1; i++)

874 
	`DISASM_PSX
(
pc
 + 
i
 * 4);

879 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
_Imm_
);

881 #ifde‡
USE_DIRECT_MEM_ACCESS


882 
u32
 *
back∑tch_œbñ_exô_1
 = 0;

883 i‡(!
f‹˚_ödúe˘
)

885 
	`ªgPushSèã
();

893 
u32
 *
back∑tch_œbñ_hÀ_1
;

894 i‡(!
C⁄fig
.
HLE
)

895 
	`LW
(
MIPSREG_A1
, 
PERM_REG_1
, 
	`off
(
wrôeok
));

897 #ifde‡
HAVE_MIPS32R2_EXT_INS


898 
	`EXT
(
TEMP_3
, 
MIPSREG_A0
, 24, 4);

900 
	`LUI
(
TEMP_3
, 0x0f00);

901 
	`AND
(
TEMP_3
, TEMP_3, 
MIPSREG_A0
);

903 i‡(!
C⁄fig
.
HLE
) {

904 
	`SLTU
(
MIPSREG_A1
, 
TEMP_3
, MIPSREG_A1);

905 
back∑tch_œbñ_hÀ_1
 = (
u32
 *)
ªcMem
;

906 
	`BEQZ
(
MIPSREG_A1
, 0);

908 
back∑tch_œbñ_hÀ_1
 = (
u32
 *)
ªcMem
;

909 
	`BNE
(
TEMP_3
, 0, 0);

915 
	`emôAddrCÆc
(
r1
);

917 
	`LUI
(
TEMP_3
, 
	`ADR_HI
(
ªcRAM
));

918 
icou¡
 = 
cou¡
;

920 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
PC
));

921 
s32
 
imm
 = 
	`_fImm_
(
›code
);

922 
u32
 
π
 = 
	`_fRt_
(
›code
);

923 
u32
 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
);

926 i‡(
icou¡
 !
cou¡
) {

929 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
imm
);

932 #ifde‡
HAVE_MIPS32R2_EXT_INS


933 
	`EXT
(
TEMP_1
, 
MIPSREG_A0
, 0, 0x15);

935 
	`SLL
(
TEMP_1
, 
MIPSREG_A0
, 11);

936 
	`SRL
(
TEMP_1
, TEMP_1, 11);

939 #ifde‡
HAVE_MIPS32R2_EXT_INS


940 
	`INS
(
TEMP_1
, 0, 0, 2);

942 
	`SRL
(
TEMP_1
, TEMP_1, 2);

943 
	`SLL
(
TEMP_1
, TEMP_1, 2);

945 
	`ADDU
(
TEMP_1
, TEMP_1, 
TEMP_3
);

947 
	`OPCODE
(
›code
 & 0xfc000000, 
r2
, 
TEMP_2
, 
imm
);

949 i‡(
icou¡
 == 1) {

951 
back∑tch_œbñ_exô_1
 = (
u32
 *)
ªcMem
;

952 
	`B
(0);

956 
	`SW
(0, 
TEMP_1
, 
	`ADR_LO
(
ªcRAM
));

958 
PC
 += 4;

960 
	`ªgU∆ock
(
r2
);

961 } --
icou¡
);

963 
PC
 = 
pc
 - 4;

965 
	`ªgP›Sèã
();

968 
	`fixup_bønch
(
back∑tch_œbñ_hÀ_1
);

972 
icou¡
 = 
cou¡
;

974 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
PC
));

975 
u32
 
ö¢
 = 
›code
 & 0xfc000000;

976 
u32
 
π
 = 
	`_fRt_
(
›code
);

977 
s32
 
imm
 = 
	`_fImm_
(
›code
);

978 
u32
 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
);

980 i‡(
icou¡
 !
cou¡
) {

983 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
imm
);

986 #ifde‡
HAVE_MIPS32R2_EXT_INS


987 
	`JAL
(
psxMemRód32
);

988 
	`INS
(
MIPSREG_A0
, 0, 0, 2);

990 
	`SRL
(
MIPSREG_A0
, MIPSREG_A0, 2);

991 
	`JAL
(
psxMemRód32
);

992 
	`SLL
(
MIPSREG_A0
, MIPSREG_A0, 2);

995 
	`ADDIU
(
MIPSREG_A0
, 
r1
, 
imm
);

997 i‡(
ö¢
 == 0xa8000000)

998 
	`LUI
(
TEMP_2
, 
	`ADR_HI
(
SWL_MASKSHIFT
));

1000 
	`LUI
(
TEMP_2
, 
	`ADR_HI
(
SWR_MASKSHIFT
));

1003 #ifde‡
HAVE_MIPS32R2_EXT_INS


1004 
	`INS
(
TEMP_2
, 
MIPSREG_A0
, 2, 2);

1005 
	`INS
(
MIPSREG_A0
, 0, 0, 2);

1007 
	`ANDI
(
TEMP_1
, 
MIPSREG_A0
, 3);

1008 
	`SLL
(
TEMP_1
, TEMP_1, 2);

1009 
	`OR
(
TEMP_2
, TEMP_2, 
TEMP_1
);

1011 
	`SRL
(
MIPSREG_A0
, MIPSREG_A0, 2);

1012 
	`SLL
(
MIPSREG_A0
, MIPSREG_A0, 2);

1015 
	`ADDIU
(
TEMP_3
, 
TEMP_2
, 16);

1018 i‡(
ö¢
 == 0xa8000000) {

1019 
	`LW
(
TEMP_2
, TEMP_2, 
	`ADR_LO
(
SWL_MASKSHIFT
));

1020 
	`LW
(
TEMP_3
, TEMP_3, 
	`ADR_LO
(
SWL_MASKSHIFT
));

1022 
	`LW
(
TEMP_2
, TEMP_2, 
	`ADR_LO
(
SWR_MASKSHIFT
));

1023 
	`LW
(
TEMP_3
, TEMP_3, 
	`ADR_LO
(
SWR_MASKSHIFT
));

1026 
	`AND
(
MIPSREG_A1
, 
MIPSREG_V0
, 
TEMP_2
);

1028 i‡(
ö¢
 == 0xa8000000)

1029 
	`SRLV
(
TEMP_1
, 
r2
, 
TEMP_3
);

1031 
	`SLLV
(
TEMP_1
, 
r2
, 
TEMP_3
);

1033 
	`JAL
(
psxMemWrôe32
);

1034 
	`OR
(
MIPSREG_A1
, MIPSREG_A1, 
TEMP_1
);

1036 
PC
 += 4;

1038 
	`ªgU∆ock
(
r2
);

1039 } --
icou¡
);

1041 #ifde‡
USE_DIRECT_MEM_ACCESS


1043 i‡(!
f‹˚_ödúe˘
)

1044 
	`fixup_bønch
(
back∑tch_œbñ_exô_1
);

1047 
pc
 = 
PC
;

1048 
	`ªgU∆ock
(
r1
);

1049 
	}
}

1053 
	mCALC_SWL_SWR
,

1054 
	mCALC_LWL_LWR


1057 
	$ˇlc_wl_wr
(
ty≥
)

1059 
u32
 
›1
, 
›2
;

1060 i‡(
ty≥
 =
CALC_LWL_LWR
) {

1061 
›1
 = 0x22;

1062 
›2
 = 0x26;

1064 
›1
 = 0x2a;

1065 
›2
 = 0x2e;

1068 
cou¡
 = 0;

1069 
u32
 
PC
 = 
pc
;

1070 
u32
 
›code
 = 
psxRegs
.
code
;

1071 
u32
 
rs
 = 
_Rs_
;

1073 
imm_mö
 = 
imm_max
 = 
	`_fImm_
(
›code
);

1076 i‡(
bønch
)

1079 (
	`_fOp_
(
›code
Ë=
›1
 || _fOp_(›codeË=
›2
Ë&& (
	`_fRs_
(›codeË=
rs
)) {

1082 i‡(
	`_fImm_
(
›code
Ë> 
imm_max
) imm_max = _fImm_(opcode);

1083 i‡(
	`_fImm_
(
›code
Ë< 
imm_mö
) imm_min = _fImm_(opcode);

1085 
›code
 = *(
u32
 *)((*)
	`PSXM
(
PC
));

1086 
PC
 += 4;

1087 
cou¡
++;

1090 i‡(
ty≥
 =
CALC_LWL_LWR
 && 
	`_fRt_
(
›code
Ë=
	`_fRs_
(opcode))

1094 #ifde‡
LOG_WL_WR


1095 i‡(
cou¡
) {

1096 
	`¥ötf
("\nFOUND %d opcodes, mö: %d, max: %d\n", 
cou¡
, 
imm_mö
, 
imm_max
);

1097 
u32
 
dpc
 = 
pc
 - 4;

1098 ; 
dpc
 < 
PC
 - 4; dpc += 4)

1099 
	`dißsm_psx
(
dpc
);

1103  
cou¡
;

1104 
	}
}

1106 
	$ªcLWL
()

1108 
cou¡
 = 
	`ˇlc_wl_wr
(
CALC_LWL_LWR
);

1110 
boﬁ
 
c⁄°_addr
 = 
Ál£
;

1111 #ifde‡
USE_CONST_ADDRESSES


1112 
c⁄°_addr
 = 
	`IsC⁄°
(
_Rs_
);

1114 i‡(!
c⁄°_addr
) {

1116 
	`gí_LWL_LWR
(
cou¡
, 
Ál£
);

1121 
u32
 
addr_max
 = 
iRegs
[
_Rs_
].
r
 + 
imm_max
;

1122 i‡((
addr_max
 & 0x1fffffff) >= 0x800000) {

1125 
	`gí_LWL_LWR
(
cou¡
, 
åue
);

1133 #ifde‡
WITH_DISASM


1134 
i
 = 0; i < 
cou¡
-1; i++)

1135 
	`DISASM_PSX
(
pc
 + 
i
 * 4);

1138 
u32
 
PC
 = 
pc
 - 4;

1142 
u16
 
mem_addr_hi
 = 0;

1144 
icou¡
 = 
cou¡
;

1147 i‡(!
	`IsC⁄°
(
_Rs_
))

1150 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
PC
));

1151 
s32
 
imm
 = 
	`_fImm_
(
›code
);

1152 
u32
 
π
 = 
	`_fRt_
(
›code
);

1153 
u32
 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
);

1155 
u32
 
mem_addr
 = (u32)
psxM
 + ((
iRegs
[
_Rs_
].
r
 + 
imm
) & 0x1fffff);

1157 i‡((
icou¡
 =
cou¡
Ë|| (
	`ADR_HI
(
mem_addr
Ë!
mem_addr_hi
)) {

1158 
mem_addr_hi
 = 
	`ADR_HI
(
mem_addr
);

1159 
	`LUI
(
TEMP_2
, 
	`ADR_HI
(
mem_addr
));

1162 
	`OPCODE
(
›code
 & 0xfc000000, 
r2
, 
TEMP_2
, 
	`ADR_LO
(
mem_addr
));

1164 
	`SëUndef
(
π
);

1165 
	`ªgMùsCh™ged
(
π
);

1166 
	`ªgU∆ock
(
r2
);

1167 
PC
 += 4;

1168 } --
icou¡
);

1170 
pc
 = 
PC
;

1171 
	}
}

1173 
	$ªcLWR
()

1175 
	`ªcLWL
();

1176 
	}
}

1178 
	$ªcSWL
()

1180 
cou¡
 = 
	`ˇlc_wl_wr
(
CALC_SWL_SWR
);

1182 
boﬁ
 
c⁄°_addr
 = 
Ál£
;

1183 #ifde‡
USE_CONST_ADDRESSES


1184 
c⁄°_addr
 = 
	`IsC⁄°
(
_Rs_
);

1186 i‡(!
c⁄°_addr
) {

1188 
	`gí_SWL_SWR
(
cou¡
, 
Ál£
);

1193 
u32
 
addr_max
 = 
iRegs
[
_Rs_
].
r
 + 
imm_max
;

1194 i‡((
addr_max
 & 0x1fffffff) >= 0x800000) {

1197 
	`gí_SWL_SWR
(
cou¡
, 
åue
);

1205 #ifde‡
WITH_DISASM


1206 
i
 = 0; i < 
cou¡
-1; i++)

1207 
	`DISASM_PSX
(
pc
 + 
i
 * 4);

1210 
u32
 
PC
 = 
pc
 - 4;

1212 
u32
 *
back∑tch_œbñ_no_wrôe
 = 
NULL
;

1213 i‡(!
C⁄fig
.
HLE
)

1214 
	`LW
(
TEMP_1
, 
PERM_REG_1
, 
	`off
(
wrôeok
));

1218 
u16
 
mem_addr_hi
 = 0;

1219 
u16
 
code_addr_hi
 = 0;

1221 
u32
 
œ°_code_addr
 = 0;

1223 
icou¡
 = 
cou¡
;

1225 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
PC
));

1226 
s32
 
imm
 = 
	`_fImm_
(
›code
);

1227 
u32
 
π
 = 
	`_fRt_
(
›code
);

1228 
u32
 
r2
 = 
	`ªgMùsToHo°
(
π
, 
REG_LOAD
, 
REG_REGISTER
);

1230 
u32
 
mem_addr
 = (u32)
psxM
 + ((
iRegs
[
_Rs_
].
r
 + 
imm
) & 0x1fffff);

1231 
u32
 
code_addr
 = (u32)
ªcRAM
 + ((
iRegs
[
_Rs_
].
r
 + 
imm
) & 0x1fffff);

1232 
code_addr
 &= ~3;

1234 i‡((
icou¡
 =
cou¡
Ë|| (
	`ADR_HI
(
code_addr
Ë!
code_addr_hi
)) {

1235 
code_addr_hi
 = 
	`ADR_HI
(
code_addr
);

1236 
	`LUI
(
TEMP_3
, 
	`ADR_HI
(
code_addr
));

1239 i‡((
icou¡
 =
cou¡
Ë|| (
	`ADR_HI
(
mem_addr
Ë!
mem_addr_hi
)) {

1240 
mem_addr_hi
 = 
	`ADR_HI
(
mem_addr
);

1241 
	`LUI
(
TEMP_2
, 
	`ADR_HI
(
mem_addr
));

1245 i‡(!
C⁄fig
.
HLE
) {

1246 
back∑tch_œbñ_no_wrôe
 = (
u32
 *)
ªcMem
;

1247 
	`BEQZ
(
TEMP_1
, 0);

1251 i‡(
code_addr
 !
œ°_code_addr
) {

1253 
œ°_code_addr
 = 
code_addr
;

1254 
	`SW
(0, 
TEMP_3
, 
	`ADR_LO
(
code_addr
));

1258 
	`NOP
();

1262 
	`OPCODE
(
›code
 & 0xfc000000, 
r2
, 
TEMP_2
, 
	`ADR_LO
(
mem_addr
));

1265 i‡(!
C⁄fig
.
HLE
)

1266 
	`fixup_bønch
(
back∑tch_œbñ_no_wrôe
);

1268 
	`ªgU∆ock
(
r2
);

1269 
PC
 += 4;

1270 } --
cou¡
);

1272 
pc
 = 
PC
;

1273 
	}
}

1275 
	$ªcSWR
()

1277 
	`ªcSWL
();

1278 
	}
}

	@src/recompiler/mips/rec_mdu.cpp.h

1 
	$ªcMULT
() {

3 i‡(!(
_Rs_
Ë|| !(
_Rt_
)) {

5 
	`SW
(0, 
PERM_REG_1
, 
	`offGPR
(32));

6 
	`SW
(0, 
PERM_REG_1
, 
	`offGPR
(33));

8 
u32
 
rs
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOAD
, 
REG_REGISTER
);

9 
u32
 
π
 = 
	`ªgMùsToHo°
(
_Rt_
, 
REG_LOAD
, 
REG_REGISTER
);

11 
	`MULT
(
rs
, 
π
);

12 
	`MFLO
(
TEMP_1
);

13 
	`MFHI
(
TEMP_2
);

15 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`offGPR
(32));

16 
	`SW
(
TEMP_2
, 
PERM_REG_1
, 
	`offGPR
(33));

17 
	`ªgU∆ock
(
rs
);

18 
	`ªgU∆ock
(
π
);

20 
	}
}

22 
	$ªcMULTU
() {

24 i‡(!(
_Rs_
Ë|| !(
_Rt_
)) {

26 
	`SW
(0, 
PERM_REG_1
, 
	`offGPR
(32));

27 
	`SW
(0, 
PERM_REG_1
, 
	`offGPR
(33));

29 
u32
 
rs
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOAD
, 
REG_REGISTER
);

30 
u32
 
π
 = 
	`ªgMùsToHo°
(
_Rt_
, 
REG_LOAD
, 
REG_REGISTER
);

32 
	`MULTU
(
rs
, 
π
);

33 
	`MFLO
(
TEMP_1
);

34 
	`MFHI
(
TEMP_2
);

36 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`offGPR
(32));

37 
	`SW
(
TEMP_2
, 
PERM_REG_1
, 
	`offGPR
(33));

38 
	`ªgU∆ock
(
rs
);

39 
	`ªgU∆ock
(
π
);

41 
	}
}

43 
	$ªcDIV
()

46 
u32
 *
back∑tch1
, *
back∑tch2
;

47 
u32
 
rs
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOAD
, 
REG_REGISTER
);

48 
u32
 
π
 = 
	`ªgMùsToHo°
(
_Rt_
, 
REG_LOAD
, 
REG_REGISTER
);

50 
back∑tch1
 = (
u32
*)
ªcMem
;

51 
	`BEQZ
(
π
, 0);

52 
	`NOP
();

54 
	`DIV
(
rs
, 
π
);

55 
	`MFLO
(
TEMP_1
);

56 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`offGPR
(32));

57 
	`MFHI
(
TEMP_1
);

58 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`offGPR
(33));

60 
back∑tch2
 = (
u32
*)
ªcMem
;

61 
	`B
(0);

62 
	`NOP
();

65 
	`fixup_bønch
(
back∑tch1
);

67 
	`SLT
(
TEMP_1
, 
rs
, 0);

68 
	`ADDIU
(
TEMP_2
, 0, -1);

69 
	`MOVZ
(
TEMP_1
, 
TEMP_2
, TEMP_1);

70 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`offGPR
(32));

71 
	`SW
(
rs
, 
PERM_REG_1
, 
	`offGPR
(33));

74 
	`fixup_bønch
(
back∑tch2
);

76 
	`ªgU∆ock
(
rs
);

77 
	`ªgU∆ock
(
π
);

78 
	}
}

80 
	$ªcDIVU
()

83 
u32
 *
back∑tch1
, *
back∑tch2
;

84 
u32
 
rs
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOAD
, 
REG_REGISTER
);

85 
u32
 
π
 = 
	`ªgMùsToHo°
(
_Rt_
, 
REG_LOAD
, 
REG_REGISTER
);

87 
back∑tch1
 = (
u32
*)
ªcMem
;

88 
	`BEQZ
(
π
, 0);

89 
	`NOP
();

91 
	`DIVU
(
rs
, 
π
);

92 
	`MFLO
(
TEMP_1
);

93 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`offGPR
(32));

94 
	`MFHI
(
TEMP_1
);

95 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`offGPR
(33));

97 
back∑tch2
 = (
u32
*)
ªcMem
;

98 
	`B
(0);

99 
	`NOP
();

102 
	`fixup_bønch
(
back∑tch1
);

104 
	`ADDIU
(
TEMP_1
, 0, -1);

105 
	`SW
(
TEMP_1
, 
PERM_REG_1
, 
	`offGPR
(32));

106 
	`SW
(
rs
, 
PERM_REG_1
, 
	`offGPR
(33));

109 
	`fixup_bønch
(
back∑tch2
);

111 
	`ªgU∆ock
(
rs
);

112 
	`ªgU∆ock
(
π
);

113 
	}
}

115 
	$ªcMFHI
() {

117 i‡(!
_Rd_
) ;

118 
	`SëUndef
(
_Rd_
);

119 
u32
 
rd
 = 
	`ªgMùsToHo°
(
_Rd_
, 
REG_FIND
, 
REG_REGISTER
);

121 
	`LW
(
rd
, 
PERM_REG_1
, 
	`offGPR
(33));

122 
	`ªgMùsCh™ged
(
_Rd_
);

123 
	`ªgU∆ock
(
rd
);

124 
	}
}

126 
	$ªcMTHI
() {

128 
u32
 
rs
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOAD
, 
REG_REGISTER
);

129 
	`SW
(
rs
, 
PERM_REG_1
, 
	`offGPR
(33));

130 
	`ªgU∆ock
(
rs
);

131 
	}
}

133 
	$ªcMFLO
() {

135 i‡(!
_Rd_
) ;

136 
	`SëUndef
(
_Rd_
);

137 
u32
 
rd
 = 
	`ªgMùsToHo°
(
_Rd_
, 
REG_FIND
, 
REG_REGISTER
);

139 
	`LW
(
rd
, 
PERM_REG_1
, 
	`offGPR
(32));

140 
	`ªgMùsCh™ged
(
_Rd_
);

141 
	`ªgU∆ock
(
rd
);

142 
	}
}

144 
	$ªcMTLO
() {

146 
u32
 
rs
 = 
	`ªgMùsToHo°
(
_Rs_
, 
REG_LOAD
, 
REG_REGISTER
);

147 
	`SW
(
rs
, 
PERM_REG_1
, 
	`offGPR
(32));

148 
	`ªgU∆ock
(
rs
);

149 
	}
}

	@src/recompiler/mips/recompiler.cpp

28 
	~"∂ugö_lib.h
"

29 
	~"psxcomm⁄.h
"

30 
	~"psxhÀ.h
"

31 
	~"psxmem.h
"

32 
	~"psxhw.h
"

33 
	~"r3000a.h
"

34 
	~"gã.h
"

37 
	#ASM_EXECUTE_LOOP


	)

42 
	~"mùs_codegí.h
"

43 
	~"dißsm.h
"

46 
u32
 
	ms
;

47 
u32
 
	mr
;

48 } 
	tiRegi°îs
;

50 
	#IsC⁄°
(
ªg
Ë(
iRegs
[ªg].
s
)

	)

51 
	#SëUndef
(
ªg
Ëdÿ{ i‡‘eg !0Ë
iRegs
[ªg].
s
 = 0; } 0)

	)

52 
	#SëC⁄°
(
ªg
, 
vÆ
Ëdÿ{ i‡‘eg !0Ë{ 
iRegs
[ªg].
s
 = 1; iRegs[ªg].
r
 = (vÆ); } } 0)

	)

54 
iRegi°îs
 
	giRegs
[32];

56 
u32
 
	gpsxRecLUT
[0x010000];

58 #unde‡
PC_REC


59 #unde‡
PC_REC8


60 #unde‡
PC_REC16


61 #unde‡
PC_REC32


62 
	#PC_REC
(
x
Ë(
psxRecLUT
[(xË>> 16] + ((xË& 0xffff))

	)

63 
	#PC_REC8
(
x
Ë(*(
u8
 *)
	`PC_REC
(x))

	)

64 
	#PC_REC16
(
x
Ë(*(
u16
*)
	`PC_REC
(x))

	)

65 
	#PC_REC32
(
x
Ë(*(
u32
*)
	`PC_REC
(x))

	)

67 
	#RECMEM_SIZE
 (12 * 1024 * 1024)

	)

68 
	#RECMEM_SIZE_MAX
 (
RECMEM_SIZE
-(512*1024))

	)

69 
	#REC_MAX_OPCODES
 80

	)

71 
u8
 
	gªcMemBa£
[
RECMEM_SIZE
 + (
REC_MAX_OPCODES
*2Ë+ 0x4000] 
__©åibuã__
 ((
__Æig√d__
 (32)));

72 
u32
 *
	gªcMem
;

73 
s8
 
	gªcRAM
[0x200000] 
__©åibuã__
((
Æig√d
(4)));

74 
s8
 
	gªcROM
[0x080000] 
__©åibuã__
((
Æig√d
(4)));

75 
u32
 
	gpc
;

76 
u32
 
	gﬁdpc
;

77 
u32
 
	gbønch
 = 0;

79 #ifde‡
WITH_DISASM


80 
	gdißsm_buf„r
[512];

83 
	~"ªgˇche.h
"

85 
ªcRe£t
();

86 
ªcRecompûe
();

87 
ªcCÀ¨
(
u32
 
Addr
, u32 
Size
);

89 (*
ªcBSC
[64])();

90 (*
ªcSPC
[64])();

91 (*
ªcREG
[32])();

92 (*
ªcCP0
[32])();

93 (*
ªcCP2
[64])();

94 (*
ªcCP2BSC
[32])();

96 
u32
 *
	gªcMemSèπ
;

97 
u32
 
	gíd_block
 = 0;

98 
u32
 
	gcy˛e_mu…ùlõr
 = 0x200;

100 #ifde‡
WITH_DISASM


102 
	#make_°ub_œbñ
(
«me
) \

103 { (*)
«me
, (*)#«mê}

	)

105 
dißsm_œbñ
 
	g°ub_œbñs
[] =

107 
make_°ub_œbñ
(
gãMFC2
),

108 
make_°ub_œbñ
(
gãMTC2
),

109 
make_°ub_œbñ
(
gãLWC2
),

110 
make_°ub_œbñ
(
gãSWC2
),

111 
make_°ub_œbñ
(
gãRTPS
),

112 
make_°ub_œbñ
(
gãOP
),

113 
make_°ub_œbñ
(
gãNCLIP
),

114 
make_°ub_œbñ
(
gãDPCS
),

115 
make_°ub_œbñ
(
gãINTPL
),

116 
make_°ub_œbñ
(
gãMVMVA
),

117 
make_°ub_œbñ
(
gãNCDS
),

118 
make_°ub_œbñ
(
gãNCDT
),

119 
make_°ub_œbñ
(
gãCDP
),

120 
make_°ub_œbñ
(
gãNCCS
),

121 
make_°ub_œbñ
(
gãCC
),

122 
make_°ub_œbñ
(
gãNCS
),

123 
make_°ub_œbñ
(
gãNCT
),

124 
make_°ub_œbñ
(
gãSQR
),

125 
make_°ub_œbñ
(
gãDCPL
),

126 
make_°ub_œbñ
(
gãDPCT
),

127 
make_°ub_œbñ
(
gãAVSZ3
),

128 
make_°ub_œbñ
(
gãAVSZ4
),

129 
make_°ub_œbñ
(
gãRTPT
),

130 
make_°ub_œbñ
(
gãGPF
),

131 
make_°ub_œbñ
(
gãGPL
),

132 
make_°ub_œbñ
(
gãNCCT
),

133 
make_°ub_œbñ
(
psxMemRód8
),

134 
make_°ub_œbñ
(
psxMemRód16
),

135 
make_°ub_œbñ
(
psxMemRód32
),

136 
make_°ub_œbñ
(
psxMemWrôe8
),

137 
make_°ub_œbñ
(
psxMemWrôe16
),

138 
make_°ub_œbñ
(
psxMemWrôe32
),

139 
make_°ub_œbñ
(
psxHwRód8
),

140 
make_°ub_œbñ
(
psxHwRód16
),

141 
make_°ub_œbñ
(
psxHwRód32
),

142 
make_°ub_œbñ
(
psxHwWrôe8
),

143 
make_°ub_œbñ
(
psxHwWrôe16
),

144 
make_°ub_œbñ
(
psxHwWrôe32
),

145 
make_°ub_œbñ
(
psxEx˚±i⁄
),

148 c⁄° 
u32
 
	gnum_°ub_œbñs
 = (
°ub_œbñs
Ë/ (
dißsm_œbñ
);

150 
	#DISASM_INIT
() \

152 
	`¥ötf
("Block PC %x (MIPSË-> %p\n", 
pc
, 
ªcMemSèπ
); \

153 } 0)

	)

155 
	#DISASM_PSX
(
_PC_
) \

157 
u32
 
›code
 = *(u32 *)((*)
	`PSXM
(
_PC_
)); \

158 
	`dißsm_mùs_ö°ru˘i⁄
(
›code
, 
dißsm_buf„r
, 
_PC_
, 0, 0); \

159 
	`¥ötf
("%08x: %08x %s\n", 
_PC_
, 
›code
, 
dißsm_buf„r
); \

160 } 0)

	)

162 
	#DISASM_HOST
() \

164 
	`¥ötf
("\n"); \

165 
u8
 *
å_±r
 = (u8*)
ªcMemSèπ
; \

166 ; (
u32
)
å_±r
 < (u32)
ªcMem
;År_ptr += 4) { \

167 
u32
 
›code
 = *(u32*)
å_±r
; \

168 
	`dißsm_mùs_ö°ru˘i⁄
(
›code
, 
dißsm_buf„r
, \

169 (
u32
)
å_±r
, 
°ub_œbñs
, \

170 
num_°ub_œbñs
); \

171 
	`¥ötf
("%08x: %s\t(0x%08x)\n", \

172 (
u32
)
å_±r
, 
dißsm_buf„r
, 
›code
); \

174 
	`¥ötf
("\n"); \

175 } 0)

	)

179 
	#DISASM_PSX
(
_PC_
)

	)

180 
	#DISASM_HOST
()

	)

181 
	#DISASM_INIT
()

	)

185 
	~"›codes.h
"

186 
	~<sys/ˇche˘l.h
>

188 
	$˛ór_ö¢_ˇche
(*
°¨t
, *
íd
, 
Êags
)

190 
	`ˇcheÊush
(
°¨t
, (*)
íd
 - (*)°¨t, 
ICACHE
);

191 
	}
}

193 
	$ªcRecompûe
()

196 
	`∂_dy«ªc_nŸify
();

198 i‡((
u32
)
ªcMem
 - (u32)
ªcMemBa£
 >
RECMEM_SIZE_MAX
 )

199 
	`ªcRe£t
();

201 
ªcMem
 = (
u32
*)(((u32)recMem + 64) & ~(63));

202 
ªcMemSèπ
 = 
ªcMem
;

204 
	`ªgRe£t
();

206 
	`PC_REC32
(
psxRegs
.
pc
Ë(
u32
)
ªcMem
;

207 
ﬁdpc
 = 
pc
 = 
psxRegs
.pc;

209 
	`DISASM_INIT
();

211 
	`ªc_ªcompûe_°¨t
();

212 
	`mem£t
(
iRegs
, 0, (iRegs));

213 
iRegs
[0].
s
 = 1;

216 
psxRegs
.
code
 = *(
u32
 *)((*)
	`PSXM
(
pc
));

217 
	`DISASM_PSX
(
pc
);

218 
pc
 += 4;

219 
ªcBSC
[
psxRegs
.
code
>>26]();

220 
	`ªgUpd©e
();

221 
bønch
 = 0;

222 } !
íd_block
);

224 
íd_block
 = 0;

225 
	`DISASM_HOST
();

226 
	`˛ór_ö¢_ˇche
(
ªcMemSèπ
, 
ªcMem
, 0);

227 
	}
}

229 
	$ªcInô
()

231 
i
;

233 
ªcMem
 = (
u32
*)
ªcMemBa£
;

234 
	`mem£t
(
ªcMem
, 0, 
RECMEM_SIZE
 + (
REC_MAX_OPCODES
*2) + 0x4000);

236 
	`ªcRe£t
();

238 i‡(
ªcRAM
 =
NULL
 || 
ªcROM
 =NULL || 
ªcMemBa£
 =NULL || 
psxRecLUT
 == NULL) {

239 
	`¥ötf
("Errorállocating memory\n");  -1;

242 
i
 = 0; i < 0x80; i++)

243 
psxRecLUT
[
i
 + 0x0000] = (
u32
)&
ªcRAM
[(i & 0x1f) << 16];

245 
	`mem˝y
(
psxRecLUT
 + 0x8000,ÖsxRecLUT, 0x80 * 4);

246 
	`mem˝y
(
psxRecLUT
 + 0xa000,ÖsxRecLUT, 0x80 * 4);

248 
i
 = 0; i < 0x08; i++)

249 
psxRecLUT
[
i
 + 0xbfc0] = (
u32
)&
ªcROM
[i << 16];

252 
	}
}

254 
	$ªcShutdown
(Ë{ 
	}
}

266 #i‚de‡
ASM_EXECUTE_LOOP


267 
__©åibuã__
 ((
noölöe
)Ë
	$ªcFunc
(*
‚
)

281 
__asm__
 
	`__vﬁ©ûe__
 (

296 [
‚
] "r" (fn),

297 [
psxRegs
] "i" (&psxRegs),

298 [
psxRegs_pc_off
] "i" (
	`off
(
pc
)),

299 [
psxRegs_cy˛e_off
] "i" (
	`off
(
cy˛e
))

303 
	}
}

307 
	$ªcExecuã
()

309 #i‚de‡
ASM_EXECUTE_LOOP


311 
u32
 *
p
 = (u32*)
	`PC_REC
(
psxRegs
.
pc
);

312 i‡(*
p
 == 0)

313 
	`ªcRecompûe
();

315 
	`ªcFunc
((*)*
p
);

317 i‡(
psxRegs
.
cy˛e
 >psxRegs.
io_cy˛e_cou¡î
)

318 
	`psxBønchTe°
();

321 
__asm__
 
	`__vﬁ©ûe__
 (

442 [
psxRegs
] "i" (&psxRegs),

443 [
psxRegs_pc_off
] "i" (
	`off
(
pc
)),

444 [
psxRegs_cy˛e_off
] "i" (
	`off
(
cy˛e
)),

445 [
psxRegs_io_cy˛e_˘r_off
] "i" (
	`off
(
io_cy˛e_cou¡î
)),

446 [
psxRecLUT
] "i" (&psxRecLUT),

447 [
ªcRecompûe
] "i" (&recRecompile),

448 [
psxBønchTe°
] "i" (&psxBranchTest)

453 
	}
}

456 
	$ªcExecuãBlock
(
èrgë_pc
)

458 #i‚de‡
ASM_EXECUTE_LOOP


460 
u32
 *
p
 = (u32*)
	`PC_REC
(
psxRegs
.
pc
);

461 i‡(*
p
 == 0)

462 
	`ªcRecompûe
();

464 
	`ªcFunc
((*)*
p
);

466 i‡(
psxRegs
.
cy˛e
 >psxRegs.
io_cy˛e_cou¡î
)

467 
	`psxBønchTe°
();

468 } 
psxRegs
.
pc
 !
èrgë_pc
);

470 
__asm__
 
	`__vﬁ©ûe__
 (

606 [
èrgë_pc
] "r" (target_pc),

607 [
psxRegs
] "i" (&psxRegs),

608 [
psxRegs_pc_off
] "i" (
	`off
(
pc
)),

609 [
psxRegs_cy˛e_off
] "i" (
	`off
(
cy˛e
)),

610 [
psxRegs_io_cy˛e_˘r_off
] "i" (
	`off
(
io_cy˛e_cou¡î
)),

611 [
psxRecLUT
] "i" (&psxRecLUT),

612 [
ªcRecompûe
] "i" (&recRecompile),

613 [
psxBønchTe°
] "i" (&psxBranchTest)

618 
	}
}

620 
	$ªcCÀ¨
(
u32
 
Addr
, u32 
Size
)

622 
	`mem£t
((
u32
*)
	`PC_REC
(
Addr
), 0, (
Size
 * 4));

624 i‡(
Addr
 == 0x8003d000) {

626 
	`mem£t
(
ªcRAM
+0x4d88, 0, 0x8);

628 
	}
}

630 
	$ªcRe£t
()

632 
	`mem£t
(
ªcRAM
, 0, 0x200000);

633 
	`mem£t
(
ªcROM
, 0, 0x080000);

635 
ªcMem
 = (
u32
*)
ªcMemBa£
;

637 
	`ªgRe£t
();

639 
bønch
 = 0;

640 
íd_block
 = 0;

641 
	}
}

643 
R3000A˝u
 
	gpsxRec
 =

645 
ªcInô
,

646 
ªcRe£t
,

647 
ªcExecuã
,

648 
ªcExecuãBlock
,

649 
ªcCÀ¨
,

650 
ªcShutdown


	@src/recompiler/mips/regcache.h

1 
	#REG_CACHE_START
 
MIPSREG_S0


	)

2 
	#REG_CACHE_END
 (
MIPSREG_S7
+1)

	)

4 
	#REG_LOAD
 0

	)

5 
	#REG_FIND
 1

	)

6 
	#REG_LOADBRANCH
 2

	)

8 
	#REG_EMPTY
 0

	)

9 
	#REG_REGISTER
 1

	)

10 
	#REG_TEMPORARY
 2

	)

11 
	#REG_RESERVED
 3

	)

12 
	#REG_REGISTERBRANCH
 4

	)

14 
	#DEBUGF
 
¥ötf


	)

18 
u32
 
	mm≠≥dto
;

19 
u32
 
	mho°_age
;

20 
u32
 
	mho°_u£
;

21 
u32
 
	mho°_ty≥
;

22 
boﬁ
 
	mism≠≥d
;

23 
	mho°_i¶ocked
;

24 } 
	tHOST_RecRegi°î
;

27 
u32
 
	mm≠≥dto
;

28 
boﬁ
 
	mism≠≥d
;

29 
boﬁ
 
	mpsx_isch™ged
;

30 } 
	tPSX_RecRegi°î
;

33 
PSX_RecRegi°î
 
	mpsx
[32];

34 
HOST_RecRegi°î
 
	mho°
[32];

35 
u32
 
	mªgli°
[32];

36 
u32
 
	mªgli°_˙t
;

37 } 
	tRecRegi°îs
;

39 
RecRegi°îs
 
	gªgˇche
;

42 
	gªgˇche_bak_idx
 = 0;

43 c⁄° 
	gªgˇche_bak_size
 = 8;

44 
RecRegi°îs
 
	gªgˇche_bak
[
ªgˇche_bak_size
];

47 
	$ªgCÀ¨Jump
()

49 
i
 = 1; i < 32; i++) {

50 i‡(
ªgˇche
.
psx
[
i
].
ism≠≥d
) {

51 
m≠≥dto
 = 
ªgˇche
.
psx
[
i
].mappedto;

53 i‡(
ªgˇche
.
psx
[
i
].
psx_isch™ged
) {

55 
	`SW
(
m≠≥dto
, 
PERM_REG_1
, 
	`offGPR
(
i
));

58 
ªgˇche
.
psx
[
i
].
psx_isch™ged
 = 
Ál£
;

59 
ªgˇche
.
ho°
[
m≠≥dto
].
ism≠≥d
 =Ñegˇche.
psx
[
i
].ism≠≥d = 
Ál£
;

60 
ªgˇche
.
ho°
[
m≠≥dto
].m≠≥dtÿªgˇche.
psx
[
i
].mappedto = 0;

61 
ªgˇche
.
ho°
[
m≠≥dto
].
ho°_ty≥
 = 
REG_EMPTY
;

62 
ªgˇche
.
ho°
[
m≠≥dto
].
ho°_age
 = 0;

63 
ªgˇche
.
ho°
[
m≠≥dto
].
ho°_u£
 = 0;

64 
ªgˇche
.
ho°
[
m≠≥dto
].
ho°_i¶ocked
 = 0;

67 
	}
}

69 
	$ªgFªeRegs
()

72 
i
 = 0;

73 
fú°found
 = 0;

75 
ªgˇche
.
ªgli°
[
i
] != 0xFF) {

76 
ho°ªg
 = 
ªgˇche
.
ªgli°
[
i
];

79 i‡(!
ªgˇche
.
ho°
[
ho°ªg
].
ho°_i¶ocked
) {

80 
psxªg
 = 
ªgˇche
.
ho°
[
ho°ªg
].
m≠≥dto
;

82 i‡(
ªgˇche
.
psx
[
psxªg
].
psx_isch™ged
) {

83 
	`SW
(
ho°ªg
, 
PERM_REG_1
, 
	`offGPR
(
psxªg
));

86 
ªgˇche
.
psx
[
psxªg
].
psx_isch™ged
 = 
Ál£
;

87 
ªgˇche
.
ho°
[
ho°ªg
].
ism≠≥d
 =Ñegˇche.
psx
[
psxªg
].ism≠≥d = 
Ál£
;

88 
ªgˇche
.
ho°
[
ho°ªg
].
m≠≥dto
 =Ñegˇche.
psx
[
psxªg
].mappedto = 0;

89 
ªgˇche
.
ho°
[
ho°ªg
].
ho°_ty≥
 = 
REG_EMPTY
;

90 
ªgˇche
.
ho°
[
ho°ªg
].
ho°_age
 = 0;

91 
ªgˇche
.
ho°
[
ho°ªg
].
ho°_u£
 = 0;

92 
ªgˇche
.
ho°
[
ho°ªg
].
ho°_i¶ocked
 = 0;

94 i‡(
fú°found
 == 0) {

95 
ªgˇche
.
ªgli°_˙t
 = 
i
;

97 
fú°found
 = 1;

102 
i
++;

105 i‡(!
fú°found
Ë
	`DEBUGF
("FATAL ERROR: unableÅo freeÑegister");

106 
	}
}

108 
u32
 
	$ªgAŒocHo°
()

111 
ªgnum
 = 
ªgˇche
.
ªgli°
[ªgˇche.
ªgli°_˙t
];

115 
ªgnum
 != 0xFF) {

117 i‡(
ªgˇche
.
ho°
[
ªgnum
].
ho°_ty≥
 =
REG_EMPTY
) {

121 
ªgˇche
.
ªgli°_˙t
++;

123 
ªgnum
 = 
ªgˇche
.
ªgli°
[ªgˇche.
ªgli°_˙t
];

127 i‡(
ªgnum
 == 0xFF) {

128 
	`ªgFªeRegs
();

129 
ªgnum
 = 
ªgˇche
.
ªgli°
[ªgˇche.
ªgli°_˙t
];

130 i‡(
ªgnum
 == 0xff)

131 
	`ªgCÀ¨Jump
();

134 
ªgˇche
.
ªgli°_˙t
++;

137  
ªgnum
;

138 
	}
}

140 
u32
 
	$ªgMùsToHo°Hñ≥r
(
u32
 
ªgpsx
, u32 
a˘i⁄
, u32 
ty≥
)

142 
ªgnum
 = 
	`ªgAŒocHo°
();

144 
ªgˇche
.
ho°
[
ªgnum
].
ho°_ty≥
 = 
ty≥
;

145 
ªgˇche
.
ho°
[
ªgnum
].
ho°_i¶ocked
++;

146 
ªgˇche
.
psx
[
ªgpsx
].
psx_isch™ged
 = 
Ál£
;

148 i‡(
a˘i⁄
 !
REG_LOADBRANCH
) {

149 
ªgˇche
.
ho°
[
ªgnum
].
ho°_age
 = 0;

150 
ªgˇche
.
ho°
[
ªgnum
].
ho°_u£
 = 0;

151 
ªgˇche
.
ho°
[
ªgnum
].
ism≠≥d
 = 
åue
;

152 
ªgˇche
.
ho°
[
ªgnum
].
m≠≥dto
 = 
ªgpsx
;

153 
ªgˇche
.
psx
[
ªgpsx
].
ism≠≥d
 = 
åue
;

154 
ªgˇche
.
psx
[
ªgpsx
].
m≠≥dto
 = 
ªgnum
;

156 
ªgˇche
.
ho°
[
ªgnum
].
ho°_age
 = 0;

157 
ªgˇche
.
ho°
[
ªgnum
].
ho°_u£
 = 0xFF;

158 
ªgˇche
.
ho°
[
ªgnum
].
ism≠≥d
 = 
Ál£
;

159 
ªgˇche
.
ho°
[
ªgnum
].
m≠≥dto
 = 0;

161 
	`LW
(
ªgnum
, 
PERM_REG_1
, 
	`offGPR
(
ªgpsx
));

164  
ªgnum
;

167 i‡(
a˘i⁄
 =
REG_LOAD
) {

168 
	`LW
(
ªgˇche
.
psx
[
ªgpsx
].
m≠≥dto
, 
PERM_REG_1
, 
	`offGPR
(regpsx));

171  
ªgnum
;

172 
	}
}

174 
u32
 
	$ªgMùsToHo°
(
u32
 
ªgpsx
, u32 
a˘i⁄
, u32 
ty≥
)

177 i‡(!
ªgpsx
)

181 i‡(
ªgˇche
.
psx
[
ªgpsx
].
ism≠≥d
) {

183 i‡(
a˘i⁄
 !
REG_LOADBRANCH
) {

184 
ho°ªg
 = 
ªgˇche
.
psx
[
ªgpsx
].
m≠≥dto
;

185 
ªgˇche
.
ho°
[
ho°ªg
].
ho°_i¶ocked
++;

187  
ho°ªg
;

190 
u32
 
m≠≥dto
 = 
ªgˇche
.
psx
[
ªgpsx
].mappedto;

192 i‡(
ªgˇche
.
psx
[
ªgpsx
].
psx_isch™ged
) {

193 
	`SW
(
m≠≥dto
, 
PERM_REG_1
, 
	`offGPR
(
ªgpsx
));

196 
ªgˇche
.
psx
[
ªgpsx
].
psx_isch™ged
 = 
Ál£
;

197 
ªgˇche
.
psx
[
ªgpsx
].
ism≠≥d
 = 
Ál£
;

198 
ªgˇche
.
psx
[
ªgpsx
].
m≠≥dto
 = 0;

200 
ªgˇche
.
ho°
[
m≠≥dto
].
ho°_ty≥
 = 
ty≥
;

201 
ªgˇche
.
ho°
[
m≠≥dto
].
ho°_age
 = 0;

202 
ªgˇche
.
ho°
[
m≠≥dto
].
ho°_u£
 = 0xFF;

203 
ªgˇche
.
ho°
[
m≠≥dto
].
ism≠≥d
 = 
Ál£
;

204 
ªgˇche
.
ho°
[
m≠≥dto
].
ho°_i¶ocked
++;

205 
ªgˇche
.
ho°
[
m≠≥dto
].mappedto = 0;

207  
m≠≥dto
;

212  
	`ªgMùsToHo°Hñ≥r
(
ªgpsx
, 
a˘i⁄
, 
ty≥
);

213 
	}
}

215 
	$ªgMùsCh™ged
(
u32
 
ªgpsx
)

218 i‡(!
ªgpsx
)

221 
ªgˇche
.
psx
[
ªgpsx
].
psx_isch™ged
 = 
åue
;

222 
	}
}

224 
	$ªgU∆ock
(
u32
 
ªgho°
)

227 i‡(!
ªgho°
)

230 i‡(
ªgˇche
.
ho°
[
ªgho°
].
ho°_i¶ocked
 > 0)

231 
ªgˇche
.
ho°
[
ªgho°
].
ho°_i¶ocked
--;

232 
	}
}

234 
	$ªgCÀ¨Bønch
()

236 
i
 = 1; i < 32; i++) {

237 i‡(
ªgˇche
.
psx
[
i
].
ism≠≥d
 &&Ñegˇche.psx[i].
psx_isch™ged
) {

238 
	`SW
(
ªgˇche
.
psx
[
i
].
m≠≥dto
, 
PERM_REG_1
, 
	`offGPR
(i));

241 
	}
}

243 
	$ªgRe£t
()

245 
i
, 
i2
;

246 
i
 = 0; i < 32; i++) {

247 
ªgˇche
.
psx
[
i
].
psx_isch™ged
 = 
Ál£
;

248 
ªgˇche
.
psx
[
i
].
ism≠≥d
 = 
Ál£
;

249 
ªgˇche
.
psx
[
i
].
m≠≥dto
 = 0;

252 
i
 = 0; i < 32; i++) {

253 
ªgˇche
.
ho°
[
i
].
ho°_ty≥
 = 
REG_RESERVED
;

254 
ªgˇche
.
ho°
[
i
].
ho°_age
 = 0;

255 
ªgˇche
.
ho°
[
i
].
ho°_u£
 = 0;

256 
ªgˇche
.
ho°
[
i
].
ho°_i¶ocked
 = 0;

257 
ªgˇche
.
ho°
[
i
].
ism≠≥d
 = 
Ál£
;

258 
ªgˇche
.
ho°
[
i
].
m≠≥dto
 = 0;

261 
i
 = 
REG_CACHE_START
; i < 
REG_CACHE_END
; i++)

262 
ªgˇche
.
ho°
[
i
].
ho°_ty≥
 = 
REG_EMPTY
;

264 
i
 = 0, 
i2
 = 0; i < 32; i++) {

265 i‡(
ªgˇche
.
ho°
[
i
].
ho°_ty≥
 =
REG_EMPTY
) {

266 
ªgˇche
.
ªgli°
[
i2
] = 
i
;

267 
i2
++;

271 
ªgˇche
.
ªgli°
[
i2
] = 0xFF;

272 
ªgˇche_bak_idx
 = 0;

274 
	}
}

276 
	$ªgUpd©e
()

278 
ûock
;

280 
ûock
 = 
REG_CACHE_START
; ilock < 
REG_CACHE_END
; ilock++) {

281 i‡(
ªgˇche
.
ho°
[
ûock
].
ism≠≥d
) {

282 
ªgˇche
.
ho°
[
ûock
].
ho°_age
++;

283 
ªgˇche
.
ho°
[
ûock
].
ho°_i¶ocked
 = 0;

286 
	}
}

288 
	$ªgPushSèã
()

290 i‡(
ªgˇche_bak_idx
 >(
ªgˇche_bak_size
-1)) {

291 
	`¥ötf
("Error in %s():Ñegcache stateárray full (maxÉntries %d)\n",

292 
__func__
, 
ªgˇche_bak_size
);

293 
	`exô
(1);

296 
ªgˇche_bak
[
ªgˇche_bak_idx
++] = 
ªgˇche
;

297 
	}
}

299 
	$ªgP›Sèã
()

301 i‡(
ªgˇche_bak_idx
 <= 0) {

302 
	`¥ötf
("Eº‹ i¿%s():Ñegˇchê°©ê¨øyÉm±y\n", 
__func__
);

303 
	`exô
(1);

306 
ªgˇche
 = 
ªgˇche_bak
[--
ªgˇche_bak_idx
];

307 
	}
}

	@src/sio.cpp

25 
	~"sio.h
"

26 
	~"psxevíts.h
"

27 
	~"misc.h
"

28 
	~<sys/°©.h
>

29 
	~<uni°d.h
>

32 
	#TX_RDY
 0x0001

	)

33 
	#RX_RDY
 0x0002

	)

34 
	#TX_EMPTY
 0x0004

	)

35 
	#PARITY_ERR
 0x0008

	)

36 
	#RX_OVERRUN
 0x0010

	)

37 
	#FRAMING_ERR
 0x0020

	)

38 
	#SYNC_DETECT
 0x0040

	)

39 
	#DSR
 0x0080

	)

40 
	#CTS
 0x0100

	)

41 
	#IRQ
 0x0200

	)

44 
	#TX_PERM
 0x0001

	)

45 
	#DTR
 0x0002

	)

46 
	#RX_PERM
 0x0004

	)

47 
	#BREAK
 0x0008

	)

48 
	#RESET_ERR
 0x0010

	)

49 
	#RTS
 0x0020

	)

50 
	#SIO_RESET
 0x0040

	)

52 
	sSioSåu˘
 {

53 
	mbuf
[256];

54 
	mˇrdh1
[4];

55 
	mˇrdh2
[4];

57 
	mSètReg
;

58 
	mModeReg
;

59 
	mCålReg
;

60 
	mBaudReg
;

62 
	mbufcou¡
;

63 
	m∑Ω
;

64 
	mmcd°
,
	mrdwr
;

65 
	madrH
,
	madrL
;

66 
	m∑d°
;

68 
u32
 
	msio_cy˛e
;

71 
SioSåu˘
 
	gpsxSio
;

73 
	$sioInô
() {

75 
	`mem£t
(&
psxSio
, 0, (psxSio));

82 
psxSio
.
sio_cy˛e
 = 535;

85 
psxSio
.
ˇrdh1
[0] =ÖsxSio.
ˇrdh2
[0] = 0xff;

86 
psxSio
.
ˇrdh1
[1] =ÖsxSio.
ˇrdh2
[1] = 0x08;

87 
psxSio
.
ˇrdh1
[2] =ÖsxSio.
ˇrdh2
[2] = 0x5a;

88 
psxSio
.
ˇrdh1
[3] =ÖsxSio.
ˇrdh2
[3] = 0x5d;

90 
psxSio
.
SètReg
 = 
TX_RDY
 | 
TX_EMPTY
;

91 
	}
}

99 
ölöe
 
	$SIO_INT
() {

100 
	`psxEvqueueAdd
(
PSXINT_SIO
, 
psxSio
.
sio_cy˛e
);

101 
	}
}

103 
	$sioWrôe8
(
vÆue
) {

104 #ifde‡
PAD_LOG


105 
	`PAD_LOG
("siÿwrôe8 %x\n", 
vÆue
);

109 
psxSio
.
∑d°
) {

110 1: 
	`SIO_INT
();

111 i‡((
vÆue
 & 0x40) == 0x40) {

112 
psxSio
.
∑d°
 = 2;ÖsxSio.
∑Ω
 = 1;

114 
psxSio
.
CålReg
 & 0x2002) {

116 
psxSio
.
buf
[psxSio.
∑Ω
] = 
	`PAD1_pﬁl
();

119 
psxSio
.
buf
[psxSio.
∑Ω
] = 
	`PAD2_pﬁl
();

123 i‡(!(
psxSio
.
buf
[psxSio.
∑Ω
] & 0x0f)) {

124 
psxSio
.
bufcou¡
 = 2 + 32;

126 
psxSio
.
bufcou¡
 = 2 + (psxSio.
buf
[psxSio.
∑Ω
] & 0x0f) * 2;

128 i‡(
psxSio
.
buf
[psxSio.
∑Ω
] == 0x41) {

129 
vÆue
) {

131 
psxSio
.
buf
[1] = 0x43;

134 
psxSio
.
buf
[1] = 0xf3;

139 
psxSio
.
∑d°
 = 0;

142 
psxSio
.
∑Ω
++;

144 
psxSio
.
CålReg
 & 0x2002) {

145 0x0002: 
psxSio
.
buf
[psxSio.
∑Ω
] = 
	`PAD1_pﬁl
(); ;

146 0x2002: 
psxSio
.
buf
[psxSio.
∑Ω
] = 
	`PAD2_pﬁl
(); ;

149 i‡(
psxSio
.
∑Ω
 =psxSio.
bufcou¡
Ë{ÖsxSio.
∑d°
 = 0; ; }

150 
	`SIO_INT
();

154 
psxSio
.
mcd°
) {

156 
	`SIO_INT
();

157 i‡(
psxSio
.
rdwr
Ë{ÖsxSio.
∑Ω
++; ; }

158 
psxSio
.
∑Ω
 = 1;

159 
vÆue
) {

160 0x52: 
psxSio
.
rdwr
 = 1; ;

161 0x57: 
psxSio
.
rdwr
 = 2; ;

162 : 
psxSio
.
mcd°
 = 0;

166 
	`SIO_INT
();

167 
psxSio
.
adrH
 = 
vÆue
;

168 *
psxSio
.
buf
 = 0;

169 
psxSio
.
∑Ω
 = 0;

170 
psxSio
.
bufcou¡
 = 1;

171 
psxSio
.
mcd°
 = 3;

174 
	`SIO_INT
();

175 
psxSio
.
adrL
 = 
vÆue
;

176 *
psxSio
.
buf
 =ÖsxSio.
adrH
;

177 
psxSio
.
∑Ω
 = 0;

178 
psxSio
.
bufcou¡
 = 1;

179 
psxSio
.
mcd°
 = 4;

182 
	`SIO_INT
();

183 
psxSio
.
∑Ω
 = 0;

184 
psxSio
.
rdwr
) {

186 
psxSio
.
buf
[0] = 0x5c;

187 
psxSio
.
buf
[1] = 0x5d;

188 
psxSio
.
buf
[2] =ÖsxSio.
adrH
;

189 
psxSio
.
buf
[3] =ÖsxSio.
adrL
;

190 
psxSio
.
CålReg
 & 0x2002) {

192 
	`sioMcdRód
(
MCD1
, (*)&
psxSio
.
buf
[4], (psxSio.
adrL
 | (psxSio.
adrH
 << 8)) * 128, 128);

195 
	`sioMcdRód
(
MCD2
, (*)&
psxSio
.
buf
[4], (psxSio.
adrL
 | (psxSio.
adrH
 << 8)) * 128, 128);

200 
cx‹
 = 0;

201 
i
;

202 
i
=2;i<128+4;i++)

203 
cx‹
 ^
psxSio
.
buf
[
i
];

204 
psxSio
.
buf
[132] = 
cx‹
;

206 
psxSio
.
buf
[133] = 0x47;

207 
psxSio
.
bufcou¡
 = 133;

210 
psxSio
.
buf
[0] =ÖsxSio.
adrL
;

211 
psxSio
.
buf
[1] = 
vÆue
;

212 
psxSio
.
buf
[129] = 0x5c;

213 
psxSio
.
buf
[130] = 0x5d;

214 
psxSio
.
buf
[131] = 0x47;

215 
psxSio
.
bufcou¡
 = 131;

218 
psxSio
.
mcd°
 = 5;

221 
psxSio
.
∑Ω
++;

223 i‡((
psxSio
.
rdwr
 =1 &&ÖsxSio.
∑Ω
 == 132) ||

224 (
psxSio
.
rdwr
 =2 &&ÖsxSio.
∑Ω
 == 129)) {

226 i‡(
psxSio
.
CålReg
 & 0x2000)

227 
psxSio
.
ˇrdh2
[1] &= ~8;

229 
psxSio
.
ˇrdh1
[1] &= ~8;

231 i‡(
psxSio
.
rdwr
 == 2) {

232 i‡(
psxSio
.
∑Ω
 < 128ËpsxSio.
buf
[psxSio.∑Ω + 1] = 
vÆue
;

234 
	`SIO_INT
();

238 
vÆue
) {

240 
psxSio
.
SètReg
 |
RX_RDY
;

242 
psxSio
.
CålReg
 & 0x2002) {

243 0x0002: 
psxSio
.
buf
[0] = 
	`PAD1_°¨tPﬁl
(); ;

244 0x2002: 
psxSio
.
buf
[0] = 
	`PAD2_°¨tPﬁl
(); ;

247 
psxSio
.
bufcou¡
 = 2;

248 
psxSio
.
∑Ω
 = 0;

249 
psxSio
.
∑d°
 = 1;

250 
	`SIO_INT
();

253 i‡(
psxSio
.
CålReg
 & 0x2000) {

254 i‡(!
	`sioMcdIn£πed
(
MCD2
))

255 
no_devi˚
;

256 
	`mem˝y
(
psxSio
.
buf
,ÖsxSio.
ˇrdh2
, 4);

258 i‡(!
	`sioMcdIn£πed
(
MCD1
))

259 
no_devi˚
;

260 
	`mem˝y
(
psxSio
.
buf
,ÖsxSio.
ˇrdh1
, 4);

262 
psxSio
.
SètReg
 |
RX_RDY
;

263 
psxSio
.
∑Ω
 = 0;

264 
psxSio
.
bufcou¡
 = 3;

265 
psxSio
.
mcd°
 = 1;

266 
psxSio
.
rdwr
 = 0;

267 
	`SIO_INT
();

270 
no_devi˚
:

271 
psxSio
.
SètReg
 |
RX_RDY
;

272 
psxSio
.
buf
[0] = 0xff;

273 
psxSio
.
∑Ω
 = 0;

274 
psxSio
.
bufcou¡
 = 0;

277 
	}
}

279 
	$sioWrôeSèt16
(
vÆue
) {

280 
	}
}

282 
	$sioWrôeMode16
(
vÆue
) {

283 
psxSio
.
ModeReg
 = 
vÆue
;

284 
	}
}

286 
	$sioWrôeCål16
(
vÆue
) {

287 
psxSio
.
CålReg
 = 
vÆue
 & ~
RESET_ERR
;

288 i‡(
vÆue
 & 
RESET_ERR
Ë
psxSio
.
SètReg
 &~
IRQ
;

292 i‡((
psxSio
.
CålReg
 & 
SIO_RESET
Ë|| !’sxSio.CålReg & 
DTR
)) {

293 
psxSio
.
∑d°
 = 0;ÖsxSio.
mcd°
 = 0;ÖsxSio.
∑Ω
 = 0;

294 
psxSio
.
SètReg
 = 
TX_RDY
 | 
TX_EMPTY
;

295 
	`psxEvqueueRemove
(
PSXINT_SIO
);

297 
	}
}

299 
	$sioWrôeBaud16
(
vÆue
) {

300 
psxSio
.
BaudReg
 = 
vÆue
;

301 
	}
}

303 
	$sioRód8
() {

304 
ªt
 = 0;

306 i‡((
psxSio
.
SètReg
 & 
RX_RDY
) ) {

308 
ªt
 = 
psxSio
.
buf
[psxSio.
∑Ω
];

309 i‡(
psxSio
.
∑Ω
 =psxSio.
bufcou¡
) {

310 
psxSio
.
SètReg
 &~
RX_RDY
;

311 i‡(
psxSio
.
mcd°
 == 5) {

312 
psxSio
.
mcd°
 = 0;

313 i‡(
psxSio
.
rdwr
 == 2) {

314 
psxSio
.
CålReg
 & 0x2002) {

316 
	`sioMcdWrôe
(
MCD1
, (*)&
psxSio
.
buf
[1], (psxSio.
adrL
 | (psxSio.
adrH
 << 8)) * 128, 128);

319 
	`sioMcdWrôe
(
MCD2
, (*)&
psxSio
.
buf
[1], (psxSio.
adrL
 | (psxSio.
adrH
 << 8)) * 128, 128);

324 i‡(
psxSio
.
∑d°
 == 2)ÖsxSio.padst = 0;

325 i‡(
psxSio
.
mcd°
 == 1) {

326 
psxSio
.
mcd°
 = 2;

327 
psxSio
.
SètReg
 |
RX_RDY
;

332 #ifde‡
PAD_LOG


333 
	`PAD_LOG
("siÿªad8 ;ªà%x\n", 
ªt
);

335  
ªt
;

336 
	}
}

337 
	$sioRódSèt16
() {

338  
psxSio
.
SètReg
;

339 
	}
}

341 
	$sioRódMode16
() {

342  
psxSio
.
ModeReg
;

343 
	}
}

345 
	$sioRódCål16
() {

346  
psxSio
.
CålReg
;

347 
	}
}

349 
	$sioRódBaud16
() {

350  
psxSio
.
BaudReg
;

351 
	}
}

353 
	$sioI¡îru±
() {

354 #ifde‡
PAD_LOG


355 
	`PAD_LOG
("SiÿI¡îru± (CP0.Sètu†%x)\n", 
psxRegs
.
CP0
.
n
.
Sètus
);

359 i‡(!(
psxSio
.
SètReg
 & 
IRQ
)) {

360 
psxSio
.
SètReg
 |
IRQ
;

361 
	`psxHu32ªf
(0x1070Ë|
	`SWAPu32
(0x80);

363 
	`Re£tIoCy˛e
();

365 
	}
}

367 
	$sioFªeze
(* 
f
, 
FªezeMode
 
mode
)

369 i‡–
	`‰ìze_rw
(
f
, 
mode
, 
psxSio
.
buf
, (psxSio.buf))

370 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxSio
.
SètReg
, (psxSio.StatReg))

371 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxSio
.
ModeReg
, (psxSio.ModeReg))

372 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxSio
.
CålReg
, (psxSio.CtrlReg))

373 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxSio
.
BaudReg
, (psxSio.BaudReg))

374 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxSio
.
bufcou¡
, (psxSio.bufcount))

375 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxSio
.
∑Ω
, (psxSio.parp))

376 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxSio
.
mcd°
, (psxSio.mcdst))

377 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxSio
.
rdwr
, (psxSio.rdwr))

378 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxSio
.
adrH
, (psxSio.adrH))

379 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxSio
.
adrL
, (psxSio.adrL))

380 || 
	`‰ìze_rw
(
f
, 
mode
, &
psxSio
.
∑d°
, (psxSio.padst)) )

384 
	}
}

392 
	sMemˇrd
 {

393 
Memˇrd
() :

394 
fûíame
(
NULL
),

395 
fûe
(
NULL
),

396 
cur_off£t
(0)

399 ~
Memˇrd
()

401 i‡(
	mfûe
) {

402 c⁄° *
	mtmp°r
 = 
fûíame
 ? filename : "";

403 
¥ötf
("W¨nög: memˇrd fûênŸ clo£d, closög vü dt‹: %s\n", 
tmp°r
);

404 
f˛o£
(
fûe
);

405 
	mfûe
 = 
NULL
;

409 * 
	mfûíame
;

410 
FILE
* 
	mfûe
;

411 
	mcur_off£t
;

412 
	md©a
[
MCD_SIZE
];

415 
Memˇrd
 
	gmemˇrds
[2];

419 
	#MEMCARD_SYNC_DELAY
 (
PSXCLK
 / 4)

	)

427 
	$sioSyncMcds
()

429 
	`FlushMcd
(
MCD1
, 
åue
);

430 
	`FlushMcd
(
MCD2
, 
åue
);

431 #ifde‡
DEBUG_MEMCARDS


432 
	`¥ötf
("%s()\n", 
__func__
);

434 
	}
}

443 
	$sioMcdWrôe
(
MemˇrdNum
 
mcd_num
, c⁄° *
§c
, 
uöt32_t
 
adr
, 
size
)

445 i‡(
adr
 >
MCD_SIZE
) {

446 
	`¥ötf
("Error in %s(): memcard %d,ádr %x is outside memcard bounds (128KB)\n",

447 
__func__
, 
mcd_num
+1, 
adr
);

451 i‡((
adr
 + 
size
Ë> 
MCD_SIZE
) {

452 
	`¥ötf
("Error in %s(): memcard %d,ádr %x + size %x is outside memcard bounds (128KB)\n",

453 
__func__
, 
mcd_num
+1, 
adr
, 
size
);

454 
size
 = 
MCD_SIZE
 - 
adr
;

455 
	`¥ötf
("Adju°ed sizêtÿwôhö 128KBÑ™ge: %x\n", 
size
);

458 
boﬁ
 
wrôe_fûe
 = 
åue
;

459 i‡(
§c
) {

460 * 
d°
 = 
memˇrds
[
mcd_num
].
d©a
 + 
adr
;

461 i‡(
	`memcmp
(
d°
, 
§c
, 
size
) != 0) {

462 
	`mem˝y
(
d°
, 
§c
, 
size
);

465 
wrôe_fûe
 = 
Ál£
;

466 #ifde‡
DEBUG_MEMCARDS


467 
	`¥ötf
("PreventedÑedundant write of %u bytesÅo memcard %dátáddr %x\n",

468 
size
, 
mcd_num
+1, 
adr
);

473 
ªtvÆ
 = 0;

474 i‡(
wrôe_fûe
) {

475 #ifde‡
DEBUG_MEMCARDS


476 
	`¥ötf
("Wrôög %u byã†tÿmemˇrd %d\n", 
size
, 
mcd_num
 + 1);

478 
ªtvÆ
 = 
	`SaveMcd
(
mcd_num
, 
adr
, 
size
);

483 i‡(
memˇrds
[
mcd_num
].
fûe
 !
NULL
)

484 
	`psxEvqueueAdd
(
PSXINT_SIO_SYNC_MCD
, 
MEMCARD_SYNC_DELAY
);

486  
ªtvÆ
;

487 
	}
}

489 
	$sioMcdRód
(
MemˇrdNum
 
mcd_num
, *
d°
, 
uöt32_t
 
adr
, 
size
)

491 i‡(
adr
 >
MCD_SIZE
) {

492 
	`¥ötf
("Error in %s(): memcard %d,ádr %x is outside memcard bounds (128KB)\n",

493 
__func__
, 
mcd_num
+1, 
adr
);

497 i‡((
adr
 + 
size
Ë> 
MCD_SIZE
) {

498 
	`¥ötf
("Error in %s(): memcard %d,ádr %x + size %x is outside memcard bounds (128KB)\n",

499 
__func__
, 
mcd_num
+1, 
adr
, 
size
);

500 
size
 = 
MCD_SIZE
 - 
adr
;

501 
	`¥ötf
("Adju°ed sizêtÿwôhö 128KBÑ™ge: %x\n", 
size
);

504 c⁄° * 
§c
 = 
memˇrds
[
mcd_num
].
d©a
 + 
adr
;

505 
	`mem˝y
(
d°
, 
§c
, 
size
);

507 
	}
}

509 * 
	$sioMcdD©aPå
(
MemˇrdNum
 
mcd_num
)

511  
memˇrds
[
mcd_num
].
d©a
;

512 
	}
}

514 
boﬁ
 
	$sioMcdIn£πed
(
MemˇrdNum
 
mcd_num
)

516  
memˇrds
[
mcd_num
].
fûíame
 !
NULL
;

517 
	}
}

519 
	$sioMcdF‹m©
(
MemˇrdNum
 
mcd_num
)

521 #ifde‡
DEBUG_MEMCARDS


522 
	`¥ötf
("%s(Ë⁄ memˇrd %d\n", 
__func__
, 
mcd_num
+1);

525 
	`InôMcdD©a
(
	`sioMcdD©aPå
(
mcd_num
));

526  
	`sioMcdWrôe
(
mcd_num
, 
NULL
, 0, 
MCD_SIZE
);

527 
	}
}

531 
	$FlushMcd
(
MemˇrdNum
 
mcd_num
, 
boﬁ
 
sync_fûe
)

533 
Memˇrd
 &
mc
 = 
memˇrds
[
mcd_num
];

535 i‡(!
mc
.
fûe
)

538 
ªtvÆ
 = 0;

539 i‡(
sync_fûe
) {

540 i‡(
	`fÊush
(
mc
.
fûe
)Ë
ªtvÆ
 = -1;

541 i‡(
	`fsync
(
	`fûío
(
mc
.
fûe
))Ë
ªtvÆ
 = -1;

543 i‡(
	`f˛o£
(
mc
.
fûe
)Ë
ªtvÆ
 = -1;

544 
mc
.
fûe
 = 
NULL
;

545 
mc
.
cur_off£t
 = 0;

546 i‡(
ªtvÆ
 < 0) {

547 
	`≥º‹
(
__func__
);

548 c⁄° * 
tmp°r
 = 
mc
.
fûíame
 ? mc.filename : "";

549 
	`¥ötf
("Eº‹ i¿%s(Ëwrôög memˇrd fûê%s\n", 
__func__
, 
tmp°r
);

551  
ªtvÆ
;

552 
	}
}

554 
	$Eje˘Mcd
(
MemˇrdNum
 
mcd_num
)

556 
ªtvÆ
 = 
	`FlushMcd
(
mcd_num
, 
åue
);

557 
Memˇrd
 &
mc
 = 
memˇrds
[
mcd_num
];

558 
mc
.
fûíame
 = 
NULL
;

559 
mc
.
fûe
 = 
NULL
;

560 
mc
.
cur_off£t
 = 0;

561 
	`mem£t
(
mc
.
d©a
, 0, 
MCD_SIZE
);

562  
ªtvÆ
;

563 
	}
}

565 
	$InôMcdD©a
(*
mcd_d©a
)

567 
	`mem£t
(
mcd_d©a
, 0, 
MCD_SIZE
);

568 
off
 = 0;

571 
mcd_d©a
[
off
++] = 'M';

572 
mcd_d©a
[
off
++] = 'C';

573 
off
 += 0x7d;

574 
mcd_d©a
[
off
++] = 0x0e;

577 
i
 = 0; i < 15; i++) {

578 
mcd_d©a
[
off
++] = 0xa0;

579 
off
 += 0x07;

580 
mcd_d©a
[
off
++] = 0xff;

581 
mcd_d©a
[
off
++] = 0xff;

582 
off
 += 0x75;

583 
mcd_d©a
[
off
++] = 0xa0;

587 
i
 = 0; i < 20; i++) {

588 
mcd_d©a
[
off
++] = 0xff;

589 
mcd_d©a
[
off
++] = 0xff;

590 
mcd_d©a
[
off
++] = 0xff;

591 
mcd_d©a
[
off
++] = 0xff;

592 
off
 += 0x04;

593 
mcd_d©a
[
off
++] = 0xff;

594 
mcd_d©a
[
off
++] = 0xff;

595 
off
 += 0x76;

597 
	}
}

599 
	$Cª©eMcd
(*
fûíame
, 
boﬁ
 
ovîwrôe_fûe
)

601 i‡(
fûíame
 =
NULL
 || filename[0] == '\0') {

602 
	`¥ötf
("Eº‹: NULL o∏em±y fûíamê∑ømëî i¿%s\n", 
__func__
);

606 i‡(!
ovîwrôe_fûe
 && 
	`FûeExi°s
(
fûíame
)) {

607 #ifde‡
DEBUG_MEMCARDS


608 
	`¥ötf
("%s(): Fûê%†exi°s, wû»nŸ ovîwrôe.\n", 
__func__
, 
fûíame
);

613 
FILE
 *
f
 = 
NULL
;

614 
mcd_d©a
[
MCD_SIZE
];

615 
	`InôMcdD©a
(
mcd_d©a
);

616 i‡–(
f
 = 
	`f›í
(
fûíame
, "wb")Ë=
NULL
 ||

617 
	`fwrôe
(
mcd_d©a
, 1, 
MCD_SIZE
, 
f
) != MCD_SIZE ||

618 
	`fÊush
(
f
) ||

619 
	`fsync
(
	`fûío
(
f
)) )

620 
îr‹
;

622 i‡(
	`f˛o£
(
f
)) {

623 
f
 = 
NULL
;

624 
îr‹
;

629 
îr‹
:

630 
	`¥ötf
("Eº‹ i¿%s(Ë¸ótög memˇrd fûê%s:\n", 
__func__
, 
fûíame
);

631 
	`≥º‹
(
NULL
);

632 i‡(
f
Ë
	`f˛o£
(f);

634 
	}
}

637 
	$LﬂdMcd
(
MemˇrdNum
 
mcd_num
, * 
fûíame
)

639 
FILE
 *
f
 = 
NULL
;

640 
size_t
 
byãs_ªad
 = 0;

641 *
d©a
 = 
NULL
;

642 
°©
 
°©_buf
;

643 
boﬁ
 
c⁄vît_d©a
 = 
Ál£
;

644 
Memˇrd
 &
mc
 = 
memˇrds
[
mcd_num
];

646 
	`Eje˘Mcd
(
mcd_num
);

648 i‡(
fûíame
 =
NULL
) {

649 
	`¥ötf
("%s(): NULL fûíamê∑øm, memˇrd %d slŸ i†nowÉm±y.\n", 
__func__
, 
mcd_num
+1);

653 i‡(
mcd_num
 =
MCD1
) {

654 
psxSio
.
ˇrdh1
[1] |= 8;

656 
psxSio
.
ˇrdh2
[1] |= 8;

659 
mc
.
fûíame
 = filename;

660 i‡(*
mc
.
fûíame
 == 0) {

661 
	`•rötf
(
mc
.
fûíame
, "memˇrds/ˇrd%d.mcd", 
mcd_num
+1);

662 
	`¥ötf
("Nÿmem‹y c¨d vÆuêwa†•ecifõd - cª©ögá deÁu… c¨d %s\n", 
mc
.
fûíame
);

665 i‡((
f
 = 
	`f›í
(
mc
.
fûíame
, "rb")Ë=
NULL
) {

666 
	`¥ötf
("Thêmem‹y c¨d %†d€¢'àexi° - cª©ög it\n", 
mc
.
fûíame
);

667 i‡(
	`Cª©eMcd
(
mc
.
fûíame
, 
Ál£
)) {

668 
	`¥ötf
("Eº‹ i¿%s(): Cª©ög memˇrd fûêÁûed.\n", 
__func__
);

669 
	`¥ötf
("Maybe fileálreadyÉxistsánd file/folderÜacksÖermissions?\n");

670 
	`¥ötf
("Memˇrd slŸ %d i†nowÉm±y.\n", 
mcd_num
+1);

671 
mc
.
fûíame
 = 
NULL
;

674 i‡((
f
 = 
	`f›í
(
mc
.
fûíame
, "rb")Ë=
NULL
)

675 
îr‹
;

678 
	`¥ötf
("Lﬂdög mem‹y c¨d %s\n", 
mc
.
fûíame
);

680 i‡(
	`f°©
(
	`fûío
(
f
), &
°©_buf
) != -1) {

681 i‡(
°©_buf
.
°_size
 =
MCD_SIZE
 + 64) {

683 
	`¥ötf
("Detected Connectix VGS memcard format.\n");

684 
c⁄vît_d©a
 = 
åue
;

685 i‡(
	`f£ek
(
f
, 64, 
SEEK_SET
) == -1) {

686 
	`¥ötf
("Error seekingÅoÖosition 64 (VGS data offset).\n");

687 
îr‹
;

689 } i‡(
°©_buf
.
°_size
 =
MCD_SIZE
 + 3904) {

691 
	`¥ötf
("Detected DexDrive memcard format.\n");

692 
c⁄vît_d©a
 = 
åue
;

693 i‡(
	`f£ek
(
f
, 3904, 
SEEK_SET
) == -1) {

694 
	`¥ötf
("Error seekingÅoÖosition 3904 (DexDrive data offset).\n");

695 
îr‹
;

697 } i‡(
°©_buf
.
°_size
 !
MCD_SIZE
) {

700 
	`¥ötf
("Warning: unknown memcard format (notÑaw image, DexDrive, or Connectix VGS)\n"

703 
°©_buf
.
°_size
);

706 
	`≥º‹
("Warning: fstat() file size check failed");

709 
d©a
 = 
memˇrds
[
mcd_num
].data;

710 i‡((
byãs_ªad
 = 
	`‰ód
(
d©a
, 1, 
MCD_SIZE
, 
f
)) != MCD_SIZE) {

711 
	`¥ötf
("Eº‹Ñódög d©®‰om mem‹y c¨d %s!\n", 
mc
.
fûíame
);

712 
	`¥ötf
("W™ãd %zu byã†™d gŸ %zu\n", (
size_t
)
MCD_SIZE
, 
byãs_ªad
);

713 
îr‹
;

716 
	`f˛o£
(
f
);

719 i‡(
c⁄vît_d©a
) {

721 i‡–(
f
 = 
	`f›í
(
mc
.
fûíame
, "wb")Ë=
NULL
 ||

722 
	`fwrôe
(
d©a
, 1, 
MCD_SIZE
, 
f
) != MCD_SIZE ) {

723 
	`≥º‹
("Error converting memcard file");

724 
	`¥ötf
("Maybe file/folderÜacks writeÖermissions?\n");

725 
	`¥ötf
("Memˇrd slŸ %d i†nowÉm±y.\n", 
mcd_num
+1);

726 i‡(
f
Ë
	`f˛o£
(f);

727 
mc
.
fûíame
 = 
NULL
;

730 
	`¥ötf
("Converted memcard fileÅoÇativeÑaw format.\n");

731 
	`f˛o£
(
f
);

736 
îr‹
:

737 
	`¥ötf
("Eº‹ i¿%s():\n", 
__func__
);

738 
	`≥º‹
(
NULL
);

739 i‡(
f
) {

740 
	`¥ötf
("Eº‹Ñódög memˇrd fûê%s\n", 
mc
.
fûíame
);

741 
	`f˛o£
(
f
);

743 
	`¥ötf
("Eº‹ o≥nög memˇrd fûê%s\n", 
mc
.
fûíame
);

746 i‡(
byãs_ªad
 <= 0x2000) {

747 
	`Eje˘Mcd
(
mcd_num
);

748 
	`¥ötf
("Memˇrd slŸ %d i†nowÉm±y.\n", 
mcd_num
+1);

751 
	}
}

753 
	$SaveMcd
(
MemˇrdNum
 
mcd_num
, 
uöt32_t
 
adr
, 
size
)

755 
Memˇrd
 &
mc
 = 
memˇrds
[
mcd_num
];

758 i‡(
mc
.
fûe
 =
NULL
) {

759 i‡(
mc
.
fûíame
 =
NULL
 || *mc.filename == '\0')

761 
mc
.
cur_off£t
 = 0;

762 i‡((
mc
.
fûe
 = 
	`f›í
(mc.
fûíame
, "r+b")Ë=
NULL
)

763 
îr‹
;

766 i‡(
mc
.
cur_off£t
 !
adr
) {

767 i‡(
	`f£ek
(
mc
.
fûe
, 
adr
, 
SEEK_SET
))

768 
îr‹
;

769 
mc
.
cur_off£t
 = 
adr
;

772 i‡(
	`fwrôe
(
mc
.
d©a
 + 
adr
, 1, 
size
, mc.
fûe
) != size)

773 
îr‹
;

775 
mc
.
cur_off£t
 +
size
;

781 
îr‹
:

782 
	`¥ötf
("Eº‹ i¿%s(ËwrôögÅÿmemˇrd %d\n", 
__func__
, 
mcd_num
+1);

783 
	`≥º‹
(
NULL
);

785 c⁄° * 
tmp°r
 = 
mc
.
fûíame
 ? mc.filename : "";

786 
	`¥ötf
("Eº‹ wrôögÅÿmemˇrd fûê%s\n", 
tmp°r
);

789 
	}
}

792 
	$åim
(*
°r
) {

793 
pos
 = 0;

794 *
de°
 = 
°r
;

797 
°r
[
pos
] <= ' ' && str[pos] > 0)

798 
pos
++;

800 
°r
[
pos
]) {

801 *(
de°
++Ë
°r
[
pos
];

802 
pos
++;

805 *(
de°
--) = '\0';

808 
de°
 >
°r
 && *dest <= ' ' && *dest > 0)

809 *(
de°
--) = '\0';

810 
	}
}

812 
	$GëMcdBlockInfo
(
MemˇrdNum
 
mcd_num
, 
block
, 
McdBlock
 *
Info
) {

813 *
d©a
 = 
NULL
, *
±r
, *
°r
, *
s°r
;

814 
˛ut
[16];

815 
c
;

816 
i
, 
x
;

818 
	`mem£t
(
Info
, 0, (
McdBlock
));

820 i‡(!
	`sioMcdIn£πed
(
mcd_num
))

823 
d©a
 = 
memˇrds
[
mcd_num
].data;

824 
±r
 = 
d©a
 + 
block
 * 8192 + 2;

825 
Info
->
Ic⁄Cou¡
 = *
±r
 & 0x3;

826 
±r
+= 2;

827 
x
 = 0;

828 
°r
 = 
Info
->
TôÀ
;

829 
s°r
 = 
Info
->
sTôÀ
;

831 
i
=0; i < 48; i++) {

832 
c
 = *(
±r
) << 8;

833 
c
|*(
±r
+1);

834 i‡(!
c
) ;

836 i‡(
c
 >= 0x8281 && c <= 0x829A)

837 
c
 = (c - 0x8281) + 'a';

838 i‡(
c
 >= 0x824F && c <= 0x827A)

839 
c
 = (c - 0x824F) + '0';

840 i‡(
c
 == 0x8140) c = ' ';

841 i‡(
c
 == 0x8143) c = ',';

842 i‡(
c
 == 0x8144) c = '.';

843 i‡(
c
 == 0x8146) c = ':';

844 i‡(
c
 == 0x8147) c = ';';

845 i‡(
c
 == 0x8148) c = '?';

846 i‡(
c
 == 0x8149) c = '!';

847 i‡(
c
 == 0x815E) c = '/';

848 i‡(
c
 == 0x8168) c = '"';

849 i‡(
c
 == 0x8169) c = '(';

850 i‡(
c
 == 0x816A) c = ')';

851 i‡(
c
 == 0x816D) c = '[';

852 i‡(
c
 == 0x816E) c = ']';

853 i‡(
c
 == 0x817C) c = '-';

855 
°r
[
i
] = ' ';

856 
s°r
[
x
++] = *
±r
++; sstr[x++] = *ptr++;

860 
°r
[
i
] = 
s°r
[
x
++] = 
c
;

861 
±r
+=2;

864 
	`åim
(
°r
);

865 
	`åim
(
s°r
);

867 
±r
 = 
d©a
 + 
block
 * 8192 + 0x60;

869 
i
 = 0; i < 16; i++) {

870 
˛ut
[
i
] = *((*)
±r
);

871 
±r
 += 2;

874 
i
 = 0; i < 
Info
->
Ic⁄Cou¡
; i++) {

875 *
ic⁄
 = &
Info
->
Ic⁄
[
i
*16*16];

877 
±r
 = 
d©a
 + 
block
 * 8192 + 128 + 128 * 
i
;

879 
x
 = 0; x < 16 * 16; x++) {

880 
ic⁄
[
x
++] = 
˛ut
[*
±r
 & 0xf];

881 
ic⁄
[
x
] = 
˛ut
[*
±r
 >> 4];

882 
±r
++;

886 
±r
 = 
d©a
 + 
block
 * 128;

888 
Info
->
Fœgs
 = *
±r
;

890 
±r
 += 0xa;

891 
	`°∫˝y
(
Info
->
ID
, 
±r
, 12);

892 
±r
 += 12;

893 
	`°∫˝y
(
Info
->
Name
, 
±r
, 16);

894 
	}
}

	@src/sio.h

22 #i‚de‡
_SIO_H_


23 
	#_SIO_H_


	)

25 
	~"psxcomm⁄.h
"

26 
	~"r3000a.h
"

27 
	~"psxmem.h
"

28 
	~"∂ugös.h
"

29 
	~"p£mu_∂ugö_defs.h
"

31 
sioInô
();

33 
sioWrôe8
(
vÆue
);

34 
sioWrôeSèt16
(
vÆue
);

35 
sioWrôeMode16
(
vÆue
);

36 
sioWrôeCål16
(
vÆue
);

37 
sioWrôeBaud16
(
vÆue
);

39 
sioRód8
();

40 
sioRódSèt16
();

41 
sioRódMode16
();

42 
sioRódCål16
();

43 
sioRódBaud16
();

45 
sioI¡îru±
();

46 
sioFªeze
(* 
f
, 
FªezeMode
 
mode
);

52 
	#MCD_SIZE
 (1024 * 8 * 16)

	)

54 
	eMemˇrdNum
 {

55 
	mMCD1
 = 0,

56 
	mMCD2
 = 1

62 
sioSyncMcds
();

63 
sioMcdWrôe
(
MemˇrdNum
 
mcd_num
, c⁄° *
§c
, 
uöt32_t
 
adr
, 
size
);

64 
sioMcdRód
(
MemˇrdNum
 
mcd_num
, *
d°
, 
uöt32_t
 
adr
, 
size
);

65 * 
sioMcdD©aPå
(
MemˇrdNum
 
mcd_num
);

66 
boﬁ
 
sioMcdIn£πed
(
MemˇrdNum
 
mcd_num
);

67 
sioMcdF‹m©
(
MemˇrdNum
 
mcd_num
);

72 
FlushMcd
(
MemˇrdNum
 
mcd_num
, 
boﬁ
 
sync_fûe
);

73 
Eje˘Mcd
(
MemˇrdNum
 
mcd_num
);

74 
InôMcdD©a
(*
mcd_d©a
);

75 
Cª©eMcd
(*
fûíame
, 
boﬁ
 
ovîwrôe_fûe
);

76 
LﬂdMcd
(
MemˇrdNum
 
mcd_num
, * 
fûíame
);

77 
SaveMcd
(
MemˇrdNum
 
mcd_num
, 
uöt32_t
 
adr
, 
size
);

80 
	mTôÀ
[48 + 1];

81 
	msTôÀ
[48 * 2 + 1];

82 
	mID
[12 + 1];

83 
	mName
[16 + 1];

84 
	mIc⁄Cou¡
;

85 
	mIc⁄
[16*16*3];

86 
	mFœgs
;

87 } 
	tMcdBlock
;

89 
GëMcdBlockInfo
(
MemˇrdNum
 
mcd_num
, 
block
, 
McdBlock
 *
Info
);

	@src/sjisfont.h

24 c⁄° 
	gf⁄t_8140
[] = {

621 c⁄° 
	gf⁄t_889f
[] = {

	@src/spu/spu_pcsxrearmed/adsr.c

18 
	~"°dafx.h
"

20 
	#_IN_ADSR


	)

23 #ifde‡
_IN_SPU


29 
	gR©eTabÀAdd
[128];

30 
	gR©eTabÀSub
[128];

32 
	$InôADSR
()

34 
lcv
, 
díom
;

37 
lcv
 = 0;Ücv < 48;Ücv++)

39 
R©eTabÀAdd
[
lcv
] = (7 - (lcv&3)) << (11 + 16 - (lcv >> 2));

40 
R©eTabÀSub
[
lcv
] = (-8 + (lcv&3)) << (11 + 16 - (lcv >> 2));

43 ; 
lcv
 < 128;Ücv++)

45 
díom
 = 1 << ((
lcv
>>2) - 11);

47 
R©eTabÀAdd
[
lcv
] = ((7 - (lcv&3)Ë<< 16Ë/ 
díom
;

48 
R©eTabÀSub
[
lcv
] = ((-8 + (lcv&3)Ë<< 16Ë/ 
díom
;

51 i‡(
R©eTabÀAdd
[
lcv
] == 0)

52 
R©eTabÀAdd
[
lcv
] = 1;

54 
	}
}

58 
INLINE
 
	$SèπADSR
(
ch
)

60 
•u
.
s_ch™
[
ch
].
ADSRX
.
Sèã
 = 
ADSR_ATTACK
;

61 
•u
.
s_ch™
[
ch
].
ADSRX
.
Envñ›eVﬁ
 = 0;

62 
	}
}

66 
	$MixADSR
(
ADSRInfoEx
 *
ad§
, 
ns_to
)

68 
Envñ›eVﬁ
 = 
ad§
->EnvelopeVol;

69 
ns
 = 0, 
vÆ
, 
πo
, 
Àvñ
;

71 i‡(
ad§
->
Sèã
 =
ADSR_RELEASE
)

73 
vÆ
 = 
R©eTabÀSub
[
ad§
->
Rñó£R©e
 * 4];

75 i‡(
ad§
->
Rñó£ModeExp
)

77 ; 
ns
 < 
ns_to
;Çs++)

79 
Envñ›eVﬁ
 +(()
vÆ
 * EnvelopeVol) >> (15+16);

80 i‡(
Envñ›eVﬁ
 <= 0)

83 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

84 
Ch™Buf
[
ns
] >>= 10;

89 ; 
ns
 < 
ns_to
;Çs++)

91 
Envñ›eVﬁ
 +
vÆ
;

92 i‡(
Envñ›eVﬁ
 <= 0)

95 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

96 
Ch™Buf
[
ns
] >>= 10;

100 
d⁄e
;

103 
ad§
->
Sèã
)

105 
ADSR_ATTACK
:

106 
πo
 = 0;

107 i‡(
ad§
->
AâackModeExp
 && 
Envñ›eVﬁ
 >= 0x60000000)

108 
πo
 = 8;

109 
vÆ
 = 
R©eTabÀAdd
[
ad§
->
AâackR©e
 + 
πo
];

111 ; 
ns
 < 
ns_to
;Çs++)

113 
Envñ›eVﬁ
 +
vÆ
;

114 i‡(
Envñ›eVﬁ
 < 0)

117 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

118 
Ch™Buf
[
ns
] >>= 10;

121 i‡(
Envñ›eVﬁ
 < 0)

123 
Envñ›eVﬁ
 = 0x7fffffff;

124 
ad§
->
Sèã
 = 
ADSR_DECAY
;

125 
ns
++;

126 
deˇy
;

131 
deˇy
:

132 
ADSR_DECAY
:

133 
vÆ
 = 
R©eTabÀSub
[
ad§
->
DeˇyR©e
 * 4];

134 
Àvñ
 = 
ad§
->
Su°aöLevñ
;

136 ; 
ns
 < 
ns_to
; )

138 
Envñ›eVﬁ
 +(()
vÆ
 * EnvelopeVol) >> (15+16);

139 i‡(
Envñ›eVﬁ
 < 0)

140 
Envñ›eVﬁ
 = 0;

142 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

143 
Ch™Buf
[
ns
] >>= 10;

144 
ns
++;

146 i‡(((
Envñ›eVﬁ
 >> 27Ë& 0xfË<
Àvñ
)

148 
ad§
->
Sèã
 = 
ADSR_SUSTAIN
;

149 
su°aö
;

155 
su°aö
:

156 
ADSR_SUSTAIN
:

157 i‡(
ad§
->
Su°aöIn¸ó£
)

159 i‡(
Envñ›eVﬁ
 >= 0x7fff0000)

161 
ns
 = 
ns_to
;

165 
πo
 = 0;

166 i‡(
ad§
->
Su°aöModeExp
 && 
Envñ›eVﬁ
 >= 0x60000000)

167 
πo
 = 8;

168 
vÆ
 = 
R©eTabÀAdd
[
ad§
->
Su°aöR©e
 + 
πo
];

170 ; 
ns
 < 
ns_to
;Çs++)

172 
Envñ›eVﬁ
 +
vÆ
;

173 i‡(()
Envñ›eVﬁ
 >= 0x7fe00000)

175 
Envñ›eVﬁ
 = 0x7fffffff;

176 
ns
 = 
ns_to
;

180 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

181 
Ch™Buf
[
ns
] >>= 10;

186 
vÆ
 = 
R©eTabÀSub
[
ad§
->
Su°aöR©e
];

187 i‡(
ad§
->
Su°aöModeExp
)

189 ; 
ns
 < 
ns_to
;Çs++)

191 
Envñ›eVﬁ
 +(()
vÆ
 * EnvelopeVol) >> (15+16);

192 i‡(
Envñ›eVﬁ
 < 0)

195 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

196 
Ch™Buf
[
ns
] >>= 10;

201 ; 
ns
 < 
ns_to
;Çs++)

203 
Envñ›eVﬁ
 +
vÆ
;

204 i‡(
Envñ›eVﬁ
 < 0)

207 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

208 
Ch™Buf
[
ns
] >>= 10;

215 
d⁄e
:

216 
ad§
->
Envñ›eVﬁ
 = EnvelopeVol;

217  
ns
;

218 
	}
}

220 
	$SkùADSR
(
ADSRInfoEx
 *
ad§
, 
ns_to
)

222 
Envñ›eVﬁ
 = 
ad§
->EnvelopeVol;

223 
ns
 = 0, 
vÆ
, 
πo
, 
Àvñ
;

224 
öt64_t
 
v64
;

226 i‡(
ad§
->
Sèã
 =
ADSR_RELEASE
)

228 
vÆ
 = 
R©eTabÀSub
[
ad§
->
Rñó£R©e
 * 4];

229 i‡(
ad§
->
Rñó£ModeExp
)

231 ; 
ns
 < 
ns_to
;Çs++)

233 
Envñ›eVﬁ
 +(()
vÆ
 * EnvelopeVol) >> (15+16);

234 i‡(
Envñ›eVﬁ
 <= 0)

240 
v64
 = 
Envñ›eVﬁ
;

241 
v64
 +(
öt64_t
)
vÆ
 * 
ns_to
;

242 
Envñ›eVﬁ
 = ()
v64
;

243 i‡(
v64
 > 0)

244 
ns
 = 
ns_to
;

246 
d⁄e
;

249 
ad§
->
Sèã
)

251 
ADSR_ATTACK
:

252 
πo
 = 0;

253 i‡(
ad§
->
AâackModeExp
 && 
Envñ›eVﬁ
 >= 0x60000000)

254 
πo
 = 8;

255 
vÆ
 = 
R©eTabÀAdd
[
ad§
->
AâackR©e
 + 
πo
];

257 ; 
ns
 < 
ns_to
;Çs++)

259 
Envñ›eVﬁ
 +
vÆ
;

260 i‡(
Envñ›eVﬁ
 < 0)

263 i‡(
Envñ›eVﬁ
 < 0)

265 
Envñ›eVﬁ
 = 0x7fffffff;

266 
ad§
->
Sèã
 = 
ADSR_DECAY
;

267 
ns
++;

268 
deˇy
;

273 
deˇy
:

274 
ADSR_DECAY
:

275 
vÆ
 = 
R©eTabÀSub
[
ad§
->
DeˇyR©e
 * 4];

276 
Àvñ
 = 
ad§
->
Su°aöLevñ
;

278 ; 
ns
 < 
ns_to
; )

280 
Envñ›eVﬁ
 +(()
vÆ
 * EnvelopeVol) >> (15+16);

281 i‡(
Envñ›eVﬁ
 < 0)

282 
Envñ›eVﬁ
 = 0;

284 
ns
++;

286 i‡(((
Envñ›eVﬁ
 >> 27Ë& 0xfË<
Àvñ
)

288 
ad§
->
Sèã
 = 
ADSR_SUSTAIN
;

289 
su°aö
;

295 
su°aö
:

296 
ADSR_SUSTAIN
:

297 i‡(
ad§
->
Su°aöIn¸ó£
)

299 
ns
 = 
ns_to
;

301 i‡(
Envñ›eVﬁ
 >= 0x7fff0000)

304 
πo
 = 0;

305 i‡(
ad§
->
Su°aöModeExp
 && 
Envñ›eVﬁ
 >= 0x60000000)

306 
πo
 = 8;

307 
vÆ
 = 
R©eTabÀAdd
[
ad§
->
Su°aöR©e
 + 
πo
];

309 
v64
 = 
Envñ›eVﬁ
;

310 
v64
 +(
öt64_t
)
vÆ
 * (
ns_to
 - 
ns
);

311 
Envñ›eVﬁ
 = ()
v64
;

312 i‡(
v64
 >= 0x7fe00000ll)

313 
Envñ›eVﬁ
 = 0x7fffffff;

317 
vÆ
 = 
R©eTabÀSub
[
ad§
->
Su°aöR©e
];

318 i‡(
ad§
->
Su°aöModeExp
)

320 ; 
ns
 < 
ns_to
;Çs++)

322 
Envñ›eVﬁ
 +(()
vÆ
 * EnvelopeVol) >> (15+16);

323 i‡(
Envñ›eVﬁ
 < 0)

329 
v64
 = 
Envñ›eVﬁ
;

330 
v64
 +(
öt64_t
)
vÆ
 * (
ns_to
 - 
ns
);

331 
Envñ›eVﬁ
 = ()
v64
;

332 i‡(
v64
 > 0)

334 
ns
 = 
ns_to
;

342 
d⁄e
:

343 
ad§
->
Envñ›eVﬁ
 = EnvelopeVol;

344  
ns
;

345 
	}
}

	@src/spu/spu_pcsxrearmed/adsr.h

18 
INLINE
 
SèπADSR
(
ch
);

19 
INLINE
 
MixADSR
(
ch
);

	@src/spu/spu_pcsxrearmed/alsa.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	#ALSA_PCM_NEW_HW_PARAMS_API


	)

21 
	#ALSA_PCM_NEW_SW_PARAMS_API


	)

22 
	~<Æß/asoundlib.h
>

23 
	~"out.h
"

25 
¢d_pcm_t
 *
	gh™dÀ
 = 
NULL
;

26 
¢d_pcm_u‰ames_t
 
	gbuf„r_size
;

28 
Æß_föish
();

31 
	$Æß_öô
()

33 
¢d_pcm_hw_∑øms_t
 *
hw∑øms
;

34 
¢d_pcm_°©us_t
 *
°©us
;

35 
¢d_˘l_t
 *
˘l_h™dÀ
 = 
NULL
;

36 
¢d_˘l_ˇrd_öfo_t
 *
öfo
;

37 
p•ìd
;

38 
pch™√ls
;

39 
f‹m©
;

40 
buf„r_time
 = 100000;

41 
≥riod_time
 = 
buf„r_time
 / 4;

42 c⁄° *
Æß_«me
 = "default";

43 c⁄° *
«me
;

44 
ªtvÆ
 = -1;

45 
îr
;

47 
«me
 = 
	`gëív
("ALSA_NAME");

48 i‡(
«me
 !
NULL
)

49 
Æß_«me
 = 
«me
;

51 
	`¢d_˘l_ˇrd_öfo_Æloˇ
(&
öfo
);

52 i‡((
îr
 = 
	`¢d_˘l_›í
(&
˘l_h™dÀ
, 
Æß_«me
, 0)) < 0) {

53 
	`¥ötf
("c⁄åﬁ o≥n: %s\n", 
	`¢d_°ªº‹
(
îr
));

55 i‡((
îr
 = 
	`¢d_˘l_ˇrd_öfo
(
˘l_h™dÀ
, 
öfo
)) < 0) {

56 
	`¥ötf
("c⁄åﬁ info: %s\n", 
	`¢d_°ªº‹
(
îr
));

57 
	`¢d_˘l_ˇrd_öfo_˛ór
(
öfo
);

59 i‡(
˘l_h™dÀ
 !
NULL
)

60 
	`¢d_˘l_˛o£
(
˘l_h™dÀ
);

62 
«me
 = 
	`¢d_˘l_ˇrd_öfo_gë_«me
(
öfo
);

63 i‡(
«me
 !
NULL
) {

64 i‡(
	`°rˇ£cmp
(
«me
, "PulseAudio") == 0) {

66 
	`¥ötf
("alsa:ÑefusingÅoÑun under PulseAudio'sÉmulation\n");

70 
	`¥ötf
("Æß: usög '%s', së ALSA_NAMEÅÿch™ge\n", 
«me
);

74 
pch™√ls
=2;

76 
p•ìd
 = 44100;

77 
f‹m©
 = 
SND_PCM_FORMAT_S16
;

79 i‡((
îr
 = 
	`¢d_pcm_›í
(&
h™dÀ
, 
Æß_«me
,

80 
SND_PCM_STREAM_PLAYBACK
, 
SND_PCM_NONBLOCK
)) < 0)

82 
	`¥ötf
("Audiÿ›íÉº‹: %s\n", 
	`¢d_°ªº‹
(
îr
));

86 if((
îr
 = 
	`¢d_pcm_n⁄block
(
h™dÀ
, 0))<0)

88 
	`¥ötf
("C™'à£àblockög moded: %s\n", 
	`¢d_°ªº‹
(
îr
));

89 
out
;

92 
	`¢d_pcm_hw_∑øms_Æloˇ
(&
hw∑øms
);

94 if((
îr
=
	`¢d_pcm_hw_∑øms_™y
(
h™dÀ
, 
hw∑øms
))<0)

96 
	`¥ötf
("Brokí c⁄figuøti⁄ f‹Åhi†PCM: %s\n", 
	`¢d_°ªº‹
(
îr
));

97 
out
;

100 if((
îr
=
	`¢d_pcm_hw_∑øms_£t_ac˚ss
(
h™dÀ
, 
hw∑øms
, 
SND_PCM_ACCESS_RW_INTERLEAVED
))<0)

102 
	`¥ötf
("Ac˚s†ty≥ÇŸávaûabÀ: %s\n", 
	`¢d_°ªº‹
(
îr
));

103 
out
;

106 if((
îr
=
	`¢d_pcm_hw_∑øms_£t_f‹m©
(
h™dÀ
, 
hw∑øms
, 
f‹m©
))<0)

108 
	`¥ötf
("Sam∂êf‹m©ÇŸávaûabÀ: %s\n", 
	`¢d_°ªº‹
(
îr
));

109 
out
;

112 if((
îr
=
	`¢d_pcm_hw_∑øms_£t_ch™√ls
(
h™dÀ
, 
hw∑øms
, 
pch™√ls
))<0)

114 
	`¥ötf
("Ch™√l†cou¡ÇŸávaûabÀ: %s\n", 
	`¢d_°ªº‹
(
îr
));

115 
out
;

118 if((
îr
=
	`¢d_pcm_hw_∑øms_£t_øã_√¨
(
h™dÀ
, 
hw∑øms
, &
p•ìd
, 0))<0)

120 
	`¥ötf
("R©ênŸávaûabÀ: %s\n", 
	`¢d_°ªº‹
(
îr
));

121 
out
;

124 if((
îr
=
	`¢d_pcm_hw_∑øms_£t_buf„r_time_√¨
(
h™dÀ
, 
hw∑øms
, &
buf„r_time
, 0))<0)

126 
	`¥ötf
("Buf„∏timêîr‹: %s\n", 
	`¢d_°ªº‹
(
îr
));

127 
out
;

130 if((
îr
=
	`¢d_pcm_hw_∑øms_£t_≥riod_time_√¨
(
h™dÀ
, 
hw∑øms
, &
≥riod_time
, 0))<0)

132 
	`¥ötf
("PîiodÅimêîr‹: %s\n", 
	`¢d_°ªº‹
(
îr
));

133 
out
;

136 if((
îr
=
	`¢d_pcm_hw_∑øms
(
h™dÀ
, 
hw∑øms
))<0)

138 
	`¥ötf
("U«bÀÅÿö°Æ»hwÖ¨ams: %s\n", 
	`¢d_°ªº‹
(
îr
));

139 
out
;

142 
	`¢d_pcm_°©us_Æloˇ
(&
°©us
);

143 if((
îr
=
	`¢d_pcm_°©us
(
h™dÀ
, 
°©us
))<0)

145 
	`¥ötf
("U«bÀÅÿgë sètus: %s\n", 
	`¢d_°ªº‹
(
îr
));

146 
out
;

149 
buf„r_size
 = 
	`¢d_pcm_°©us_gë_avaû
(
°©us
);

150 
ªtvÆ
 = 0;

152 
out
:

153 i‡(
ªtvÆ
 != 0)

154 
	`Æß_föish
();

155  
ªtvÆ
;

156 
	}
}

159 
	$Æß_föish
()

161 if(
h™dÀ
 !
NULL
)

163 
	`¢d_pcm_dr›
(
h™dÀ
);

164 
	`¢d_pcm_˛o£
(
h™dÀ
);

165 
h™dÀ
 = 
NULL
;

167 
	}
}

170 
	$Æß_busy
()

172 
l
;

174 i‡(
h™dÀ
 =
NULL
)

176 
l
 = 
	`¢d_pcm_avaû
(
h™dÀ
);

177 i‡(
l
 < 0)  0;

178 i‡(
l
 < 
buf„r_size
 / 2)

179 
l
 = 1;

180 
l
 = 0;

182  
l
;

183 
	}
}

186 
	$Æß_„ed
(*
pSound
, 
lByãs
)

188 
sbuf
[4096];

190 i‡(
h™dÀ
 =
NULL
) ;

192 i‡(
	`¢d_pcm_°©e
(
h™dÀ
Ë=
SND_PCM_STATE_XRUN
)

194 
	`mem£t
(
sbuf
, 0, (sbuf));

195 
	`¢d_pcm_¥ï¨e
(
h™dÀ
);

196 
	`¢d_pcm_wrôei
(
h™dÀ
, 
sbuf
, (sbuf) / 4);

197 
	`¢d_pcm_wrôei
(
h™dÀ
, 
sbuf
, (sbuf) / 4);

198 
	`¢d_pcm_wrôei
(
h™dÀ
, 
sbuf
, (sbuf) / 4);

202 
l
 = 
	`¢d_pcm_avaû
(
h™dÀ
);

203 i‡(
l
 < 
lByãs
 / 4)

205 i‡(
l
 == 0)

208 
lByãs
 = 
l
 * 4;

212 
	`¢d_pcm_wrôei
(
h™dÀ
, 
pSound
, 
lByãs
 / 4);

213 
	}
}

215 
	$out_ªgi°î_Æß
(
out_drivî
 *
drv
)

217 
drv
->
«me
 = "alsa";

218 
drv
->
öô
 = 
Æß_öô
;

219 
drv
->
föish
 = 
Æß_föish
;

220 
drv
->
busy
 = 
Æß_busy
;

221 
drv
->
„ed
 = 
Æß_„ed
;

222 
	}
}

	@src/spu/spu_pcsxrearmed/dma.c

18 
	~"°dafx.h
"

20 
	#_IN_DMA


	)

22 
	~"exã∫Æs.h
"

28 
CALLBACK
 
	$SPUªadDMA
()

30 
s
 = *(*)(
•u
.
•uMemC
 + spu.
•uAddr
);

31 
•u
.
•uAddr
 += 2;

32 
•u
.
•uAddr
 &= 0x7fffe;

34  
s
;

35 
	}
}

41 
CALLBACK
 
	$SPUªadDMAMem
(*
pusPSXMem
, 
iSize
,

42 
cy˛es
)

44 
i
;

46 
	`do_ßm∂es_if_√eded
(
cy˛es
, 1);

48 
i
=0;i<
iSize
;i++)

50 *
pusPSXMem
++ = *(*)(
•u
.
•uMemC
 + spu.
•uAddr
);

51 
•u
.
•uAddr
 += 2;

52 
•u
.
•uAddr
 &= 0x7fffe;

54 
	}
}

68 
CALLBACK
 
	$SPUwrôeDMA
(
vÆ
)

70 *(*)(
•u
.
•uMemC
 + spu.
•uAddr
Ë
vÆ
;

72 
•u
.
•uAddr
 += 2;

73 
•u
.
•uAddr
 &= 0x7fffe;

74 
•u
.
bMemDúty
 = 1;

75 
	}
}

81 
CALLBACK
 
	$SPUwrôeDMAMem
(*
pusPSXMem
, 
iSize
,

82 
cy˛es
)

84 
i
;

86 
	`do_ßm∂es_if_√eded
(
cy˛es
, 1);

87 
•u
.
bMemDúty
 = 1;

89 if(
•u
.
•uAddr
 + 
iSize
*2 < 0x80000)

91 
	`mem˝y
(
•u
.
•uMemC
 + spu.
•uAddr
, 
pusPSXMem
, 
iSize
*2);

92 
•u
.
•uAddr
 +
iSize
*2;

96 
i
=0;i<
iSize
;i++)

98 *(*)(
•u
.
•uMemC
 + spu.
•uAddr
Ë*
pusPSXMem
++;

99 
•u
.
•uAddr
 += 2;

100 
•u
.
•uAddr
 &= 0x7fffe;

102 
	}
}

	@src/spu/spu_pcsxrearmed/dma.h

28 
CALLBACK
 
SPUªadDMA
();

29 
CALLBACK
 
SPUªadDMAMem
(* 
pusPSXMem
, 
iSize
, 
cy˛es
);

30 
CALLBACK
 
SPUwrôeDMA
(
vÆ
);

31 
CALLBACK
 
SPUwrôeDMAMem
(* 
pusPSXMem
,
iSize
, 
cy˛es
);

	@src/spu/spu_pcsxrearmed/externals.h

18 
	~<°döt.h
>

24 #ifde‡
__GNUC__


25 
	#noölöe
 
	`__©åibuã__
((
noölöe
))

	)

26 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x), 0)

	)

28 
	#noölöe


	)

29 
	#u∆ikñy
(
x
Ë
	)
x

31 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
_TMS320C6X
)

32 
	#¥ñﬂd
 
__buûtö_¥e„tch


	)

34 
	#¥ñﬂd
(...)

	)

37 
	#PSE_LT_SPU
 4

	)

38 
	#PSE_SPU_ERR_SUCCESS
 0

	)

39 
	#PSE_SPU_ERR
 -60

	)

40 
	#PSE_SPU_ERR_NOTCONFIGURED
 
PSE_SPU_ERR
 - 1

	)

41 
	#PSE_SPU_ERR_INIT
 
PSE_SPU_ERR
 - 2

	)

42 #i‚de‡
max


43 
	#max
(
a
,
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

44 
	#mö
(
a
,
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

52 
	#MAXCHAN
 24

	)

55 
	#NSSIZE
 ((44100 / 50 + 16Ë& ~1)

	)

61 
	eADSR_Sèã
 {

62 
	mADSR_ATTACK
 = 0,

63 
	mADSR_DECAY
 = 1,

64 
	mADSR_SUSTAIN
 = 2,

65 
	mADSR_RELEASE
 = 3,

71 
	mSèã
:2;

72 
	mAâackModeExp
:1;

73 
	mSu°aöModeExp
:1;

74 
	mSu°aöIn¸ó£
:1;

75 
	mRñó£ModeExp
:1;

76 
	mAâackR©e
;

77 
	mDeˇyR©e
;

78 
	mSu°aöLevñ
;

79 
	mSu°aöR©e
;

80 
	mRñó£R©e
;

81 
	mEnvñ›eVﬁ
;

82 } 
	tADSRInfoEx
;

89 
	#FLAG_MUTE
 1

	)

92 
	#FLAG_IPOL0
 2

	)

93 
	#FLAG_IPOL1
 4

	)

100 
	miSBPos
;

101 
	m•os
;

102 
	msöc
;

103 
	msöc_öv
;

105 * 
	mpCuº
;

106 * 
	mpLo›
;

108 
	mbRevîb
:1;

109 
	mbRVBA˘ive
:1;

110 
	mbNoi£
:1;

111 
	mbFMod
:2;

112 
	m¥evÊags
:3;

114 
	miLe·Vﬁume
;

115 
	miRightVﬁume
;

116 
ADSRInfoEx
 
	mADSRX
;

117 
	miRawPôch
;

118 } 
	tSPUCHAN
;

124 
	mSèπAddr
;

125 
	mCuºAddr
;

127 
	mVﬁLe·
;

128 
	mVﬁRight
;

130 
	mFB_SRC_A
;

131 
	mFB_SRC_B
;

132 
	mIIR_ALPHA
;

133 
	mACC_COEF_A
;

134 
	mACC_COEF_B
;

135 
	mACC_COEF_C
;

136 
	mACC_COEF_D
;

137 
	mIIR_COEF
;

138 
	mFB_ALPHA
;

139 
	mFB_X
;

140 
	mIIR_DEST_A0
;

141 
	mIIR_DEST_A1
;

142 
	mACC_SRC_A0
;

143 
	mACC_SRC_A1
;

144 
	mACC_SRC_B0
;

145 
	mACC_SRC_B1
;

146 
	mIIR_SRC_A0
;

147 
	mIIR_SRC_A1
;

148 
	mIIR_DEST_B0
;

149 
	mIIR_DEST_B1
;

150 
	mACC_SRC_C0
;

151 
	mACC_SRC_C1
;

152 
	mACC_SRC_D0
;

153 
	mACC_SRC_D1
;

154 
	mIIR_SRC_B1
;

155 
	mIIR_SRC_B0
;

156 
	mMIX_DEST_A0
;

157 
	mMIX_DEST_A1
;

158 
	mMIX_DEST_B0
;

159 
	mMIX_DEST_B1
;

160 
	mIN_COEF_L
;

161 
	mIN_COEF_R
;

163 
	mdúty
;

166 
	mFB_SRC_A0
, 
	mFB_SRC_A1
, 
	mFB_SRC_B0
, 
	mFB_SRC_B1
;

167 } 
	tREVERBInfo
;

173 
	#SB_SIZE
 (32 + 4)

	)

177 
	m•uCål
;

178 
	m•uSèt
;

180 
	m•uAddr
;

182 *
	m•uMemC
;

183 *
	m•uMem
;

185 * 
	mpSpuIrq
;

187 
	mcy˛es_∂ayed
;

188 
	mdecode_pos
;

189 
	mdecode_dúty_ch
;

190 
	mbSpuInô
:1;

191 
	mbSPUIsO≥n
:1;

192 
	mbMemDúty
:1;

194 
	mdwNoi£VÆ
;

195 
	mdwNoi£Cou¡
;

196 
	mdwNewCh™√l
;

197 
	mdwCh™√lOn
;

198 
	mdwCh™√lDód
;

200 * 
	mpSpuBuf„r
;

201 * 
	mpS
;

203 (
CALLBACK
 *
	múqCÆlback
)();

204 (
CALLBACK
 *
	mcddavCÆlback
)(,);

205 (
CALLBACK
 *
	mscheduÀCÆlback
)();

207 
xa_decode_t
 * 
	mx≠GlobÆ
;

208 * 
	mXAFìd
;

209 * 
	mXAPœy
;

210 * 
	mXASèπ
;

211 * 
	mXAEnd
;

214 
	mXABuf„rRoom
;

216 * 
	mCDDAFìd
;

217 * 
	mCDDAPœy
;

218 * 
	mCDDASèπ
;

219 * 
	mCDDAEnd
;

221 
	mXARïót
;

222 
	mXALa°VÆ
;

224 
	miLe·XAVﬁ
;

225 
	miRightXAVﬁ
;

227 
SPUCHAN
 * 
	ms_ch™
;

228 
REVERBInfo
 * 
	mrvb
;

231 * 
	mSB
;

232 * 
	mSSumLR
;

234 
	m∑d
[29];

235 
	mªgAªa
[0x400];

236 } 
	tSPUInfo
;

242 #i‚de‡
_IN_SPU


244 
SPUInfo
 
•u
;

246 
do_ßm∂es
(
cy˛es_to
, 
do_sync
);

247 
scheduÀ_√xt_úq
();

249 
	#ªgAªaGë
(
ch
,
off£t
Ë\

	)

250 
	g•u
.
	gªgAªa
[((
ch
<<4)|(
off£t
))>>1]

252 
	#do_ßm∂es_if_√eded
(
c
, 
sync
Ë\

	)

254 i‡(
	gsync
 || ()((
	gc
Ë- 
	g•u
.
	gcy˛es_∂ayed
) >= 16 * 768) \

255 
do_ßm∂es
(
c
, 
sync
); \

	@src/spu/spu_pcsxrearmed/freeze.c

18 
	~"°dafx.h
"

20 
	#_IN_FREEZE


	)

22 
	~"exã∫Æs.h
"

23 
	~"ªgi°îs.h
"

24 
	~"•u.h
"

32 
	mAâackModeExp
;

33 
	mAâackTime
;

34 
	mDeˇyTime
;

35 
	mSu°aöLevñ
;

36 
	mSu°aöModeExp
;

37 
	mSu°aöModeDec
;

38 
	mSu°aöTime
;

39 
	mRñó£ModeExp
;

40 
	mRñó£VÆ
;

41 
	mRñó£Time
;

42 
	mRñó£SèπTime
;

43 
	mRñó£Vﬁ
;

44 
	mlTime
;

45 
	mlVﬁume
;

46 } 
	tADSRInfo
;

50 
	mSèã
;

51 
	mAâackModeExp
;

52 
	mAâackR©e
;

53 
	mDeˇyR©e
;

54 
	mSu°aöLevñ
;

55 
	mSu°aöModeExp
;

56 
	mSu°aöIn¸ó£
;

57 
	mSu°aöR©e
;

58 
	mRñó£ModeExp
;

59 
	mRñó£R©e
;

60 
	mEnvñ›eVﬁ
;

61 
	mlVﬁume
;

62 
	mlDummy1
;

63 
	mlDummy2
;

64 } 
	tADSRInfoEx_‹ig
;

71 
	mbNew
;

73 
	miSBPos
;

74 
	m•os
;

75 
	msöc
;

76 
	mSB
[32+32];

77 
	msvÆ
;

79 
	miSèπ
;

80 
	miCuº
;

81 
	miLo›
;

83 
	mbOn
;

84 
	mbSt›
;

85 
	mbRevîb
;

86 
	miA˘Fªq
;

87 
	miU£dFªq
;

88 
	miLe·Vﬁume
;

89 
	miLe·VﬁRaw
;

90 
	mbIgn‹eLo›
;

91 
	miMuã
;

92 
	miRightVﬁume
;

93 
	miRightVﬁRaw
;

94 
	miRawPôch
;

95 
	miIrqD⁄e
;

96 
	ms_1
;

97 
	ms_2
;

98 
	mbRVBA˘ive
;

99 
	miRVBOff£t
;

100 
	miRVBRïót
;

101 
	mbNoi£
;

102 
	mbFMod
;

103 
	miRVBNum
;

104 
	miOldNoi£
;

105 
ADSRInfo
 
	mADSR
;

106 
ADSRInfoEx_‹ig
 
	mADSRX
;

107 } 
	tSPUCHAN_‹ig
;

111 
	mszSPUName
[8];

112 
uöt32_t
 
	mulFªezeVîsi⁄
;

113 
uöt32_t
 
	mulFªezeSize
;

114 
	mcSPUP‹t
[0x200];

115 
	mcSPURam
[0x80000];

116 
xa_decode_t
 
	mxaS
;

117 } 
	tSPUFªeze_t
;

121 
	m•uIrq
;

122 
uöt32_t
 
	mpSpuIrq
;

123 
uöt32_t
 
	m•uAddr
;

124 
uöt32_t
 
	mdummy1
;

125 
uöt32_t
 
	mdummy2
;

126 
uöt32_t
 
	mdummy3
;

128 
SPUCHAN_‹ig
 
	ms_ch™
[
MAXCHAN
];

130 } 
	tSPUOSSFªeze_t
;

134 
LﬂdSèãV5
(
SPUFªeze_t
 * 
pF
);

135 
LﬂdSèãUnknown
(
SPUFªeze_t
 * 
pF
, 
uöt32_t
 
cy˛es
);

139 
	$ßve_ch™√l
(
SPUCHAN_‹ig
 *
d
, c⁄° 
SPUCHAN
 *
s
, 
ch
)

141 
	`mem£t
(
d
, 0, (*d));

142 
d
->
bNew
 = !!(
•u
.
dwNewCh™√l
 & (1<<
ch
));

143 
d
->
iSBPos
 = 
s
->iSBPos;

144 
d
->
•os
 = 
s
->spos;

145 
d
->
söc
 = 
s
->sinc;

146 
	`mem˝y
(
d
->
SB
, 
•u
.SB + 
ch
 * 
SB_SIZE
, (d->SB[0]) * SB_SIZE);

147 
d
->
iSèπ
 = (
	`ªgAªaGë
(
ch
,6)&~1)<<3;

148 
d
->
iCuº
 = 0;

149 
d
->
iLo›
 = 0;

150 
d
->
bOn
 = !!(
•u
.
dwCh™√lOn
 & (1<<
ch
));

151 
d
->
bSt›
 = 
s
->
ADSRX
.
Sèã
 =
ADSR_RELEASE
;

152 
d
->
bRevîb
 = 
s
->bReverb;

153 
d
->
iA˘Fªq
 = 1;

154 
d
->
iU£dFªq
 = 2;

155 
d
->
iLe·Vﬁume
 = 
s
->iLeftVolume;

157 
d
->
bIgn‹eLo›
 = (
s
->
¥evÊags
 ^ 2) << 1;

158 
d
->
iRightVﬁume
 = 
s
->iRightVolume;

159 
d
->
iRawPôch
 = 
s
->iRawPitch;

160 
d
->
s_1
 = 
•u
.
SB
[
ch
 * 
SB_SIZE
 + 27];

161 
d
->
s_2
 = 
•u
.
SB
[
ch
 * 
SB_SIZE
 + 26];

162 
d
->
bRVBA˘ive
 = 
s
->bRVBActive;

163 
d
->
bNoi£
 = 
s
->bNoise;

164 
d
->
bFMod
 = 
s
->bFMod;

165 
d
->
ADSRX
.
Sèã
 = 
s
->ADSRX.State;

166 
d
->
ADSRX
.
AâackModeExp
 = 
s
->ADSRX.AttackModeExp;

167 
d
->
ADSRX
.
AâackR©e
 = 
s
->ADSRX.AttackRate;

168 
d
->
ADSRX
.
DeˇyR©e
 = 
s
->ADSRX.DecayRate;

169 
d
->
ADSRX
.
Su°aöLevñ
 = 
s
->ADSRX.SustainLevel;

170 
d
->
ADSRX
.
Su°aöModeExp
 = 
s
->ADSRX.SustainModeExp;

171 
d
->
ADSRX
.
Su°aöIn¸ó£
 = 
s
->ADSRX.SustainIncrease;

172 
d
->
ADSRX
.
Su°aöR©e
 = 
s
->ADSRX.SustainRate;

173 
d
->
ADSRX
.
Rñó£ModeExp
 = 
s
->ADSRX.ReleaseModeExp;

174 
d
->
ADSRX
.
Rñó£R©e
 = 
s
->ADSRX.ReleaseRate;

175 
d
->
ADSRX
.
Envñ›eVﬁ
 = 
s
->ADSRX.EnvelopeVol;

176 
d
->
ADSRX
.
lVﬁume
 = d->
bOn
;

177 
	}
}

179 
	$lﬂd_ch™√l
(
SPUCHAN
 *
d
, c⁄° 
SPUCHAN_‹ig
 *
s
, 
ch
)

181 
	`mem£t
(
d
, 0, (*d));

182 i‡(
s
->
bNew
Ë
•u
.
dwNewCh™√l
 |1<<
ch
;

183 
d
->
iSBPos
 = 
s
->iSBPos;

184 i‡((
uöt32_t
)
d
->
iSBPos
 >= 28) d->iSBPos = 27;

185 
d
->
•os
 = 
s
->spos;

186 
d
->
söc
 = 
s
->sinc;

187 
d
->
söc_öv
 = 0;

188 
	`mem˝y
(
•u
.
SB
 + 
ch
 * 
SB_SIZE
, 
s
->SB, (spu.SB[0]) * SB_SIZE);

189 
d
->
pCuº
 = (*)((
uöçå_t
)
s
->
iCuº
 & 0x7fff0);

190 
d
->
pLo›
 = (*)((
uöçå_t
)
s
->
iLo›
 & 0x7fff0);

191 
d
->
bRevîb
 = 
s
->bReverb;

192 
d
->
iLe·Vﬁume
 = 
s
->iLeftVolume;

193 
d
->
iRightVﬁume
 = 
s
->iRightVolume;

194 
d
->
iRawPôch
 = 
s
->iRawPitch;

195 
d
->
bRVBA˘ive
 = 
s
->bRVBActive;

196 
d
->
bNoi£
 = 
s
->bNoise;

197 
d
->
bFMod
 = 
s
->bFMod;

198 
d
->
¥evÊags
 = (
s
->
bIgn‹eLo›
 >> 1) ^ 2;

199 
d
->
ADSRX
.
Sèã
 = 
s
->ADSRX.State;

200 i‡(
s
->
bSt›
Ë
d
->
ADSRX
.
Sèã
 = 
ADSR_RELEASE
;

201 
d
->
ADSRX
.
AâackModeExp
 = 
s
->ADSRX.AttackModeExp;

202 
d
->
ADSRX
.
AâackR©e
 = 
s
->ADSRX.AttackRate;

203 
d
->
ADSRX
.
DeˇyR©e
 = 
s
->ADSRX.DecayRate;

204 
d
->
ADSRX
.
Su°aöLevñ
 = 
s
->ADSRX.SustainLevel;

205 
d
->
ADSRX
.
Su°aöModeExp
 = 
s
->ADSRX.SustainModeExp;

206 
d
->
ADSRX
.
Su°aöIn¸ó£
 = 
s
->ADSRX.SustainIncrease;

207 
d
->
ADSRX
.
Su°aöR©e
 = 
s
->ADSRX.SustainRate;

208 
d
->
ADSRX
.
Rñó£ModeExp
 = 
s
->ADSRX.ReleaseModeExp;

209 
d
->
ADSRX
.
Rñó£R©e
 = 
s
->ADSRX.ReleaseRate;

210 
d
->
ADSRX
.
Envñ›eVﬁ
 = 
s
->ADSRX.EnvelopeVol;

211 i‡(
s
->
bOn
Ë
•u
.
dwCh™√lOn
 |1<<
ch
;

212 
d
->
ADSRX
.
Envñ›eVﬁ
 = 0;

213 
	}
}

216 
	$lﬂd_ªgi°î
(
ªg
, 
cy˛es
)

218 *
r
 = &
•u
.
ªgAªa
[((
ªg
 & 0xfff) - 0xc00) >> 1];

219 *
r
 ^= 1;

220 
	`SPUwrôeRegi°î
(
ªg
, *
r
 ^ 1, 
cy˛es
);

221 
	}
}

227 
CALLBACK
 
	$SPU‰ìze
(
uöt32_t
 
ulFªezeMode
, 
SPUFªeze_t
 * 
pF
,

228 
uöt32_t
 
cy˛es
)

230 
i
;
SPUOSSFªeze_t
 * 
pFO
;

232 if(!
pF
)  0;

234 
	`do_ßm∂es
(
cy˛es
, 1);

236 if(
ulFªezeMode
)

238 if(
ulFªezeMode
==1)

239 
	`mem£t
(
pF
,0,(
SPUFªeze_t
)+(
SPUOSSFªeze_t
));

241 
	`°r˝y
(
pF
->
szSPUName
,"PBOSS");

242 
pF
->
ulFªezeVîsi⁄
=5;

243 
pF
->
ulFªezeSize
=(
SPUFªeze_t
)+(
SPUOSSFªeze_t
);

245 if(
ulFªezeMode
==2)  1;

247 
	`mem˝y
(
pF
->
cSPURam
,
•u
.
•uMem
,0x80000);

248 
	`mem˝y
(
pF
->
cSPUP‹t
,
•u
.
ªgAªa
,0x200);

250 if(
•u
.
x≠GlobÆ
 && spu.
XAPœy
!=•u.
XAFìd
)

252 
pF
->
xaS
=*
•u
.
x≠GlobÆ
;

255 
	`mem£t
(&
pF
->
xaS
,0,(
xa_decode_t
));

257 
pFO
=(
SPUOSSFªeze_t
 *)(
pF
+1);

259 
pFO
->
•uIrq
 = 
•u
.
ªgAªa
[(
H_SPUúqAddr
 - 0x0c00) / 2];

260 if(
•u
.
pSpuIrq
Ë
pFO
->pSpuIrq = (
uöçå_t
)•u.pSpuIrq - (uöçå_t)•u.
•uMemC
;

262 
pFO
->
•uAddr
=
•u
.spuAddr;

263 if(
pFO
->
•uAddr
==0)ÖFO->spuAddr=0xbaadf00d;

265 
i
=0;i<
MAXCHAN
;i++)

267 
	`ßve_ch™√l
(&
pFO
->
s_ch™
[
i
],&
•u
.s_chan[i],i);

268 if(
•u
.
s_ch™
[
i
].
pCuº
)

269 
pFO
->
s_ch™
[
i
].
iCuº
=
•u
.s_ch™[i].
pCuº
-•u.
•uMemC
;

270 if(
•u
.
s_ch™
[
i
].
pLo›
)

271 
pFO
->
s_ch™
[
i
].
iLo›
=
•u
.s_ch™[i].
pLo›
-•u.
•uMemC
;

278 if(
ulFªezeMode
!=0)  0;

280 
	`mem˝y
(
•u
.
•uMem
,
pF
->
cSPURam
,0x80000);

281 
	`mem˝y
(
•u
.
ªgAªa
,
pF
->
cSPUP‹t
,0x200);

282 
•u
.
bMemDúty
 = 1;

284 if(
pF
->
xaS
.
nßm∂es
<=4032)

285 
	`SPU∂ayADPCMch™√l
(&
pF
->
xaS
);

287 
•u
.
x≠GlobÆ
=0;

289 if(!
	`°rcmp
(
pF
->
szSPUName
,"PBOSS"Ë&&ÖF->
ulFªezeVîsi⁄
==5)

290 
	`LﬂdSèãV5
(
pF
);

291 
	`LﬂdSèãUnknown
(
pF
, 
cy˛es
);

294 
i
=0;i<=62;i+=2)

295 
	`lﬂd_ªgi°î
(
H_Revîb
+
i
, 
cy˛es
);

296 
	`lﬂd_ªgi°î
(
H_SPURevîbAddr
, 
cy˛es
);

297 
	`lﬂd_ªgi°î
(
H_SPUrvﬁL
, 
cy˛es
);

298 
	`lﬂd_ªgi°î
(
H_SPUrvﬁR
, 
cy˛es
);

300 
	`lﬂd_ªgi°î
(
H_SPU˘æ
, 
cy˛es
);

301 
	`lﬂd_ªgi°î
(
H_SPU°©
, 
cy˛es
);

302 
	`lﬂd_ªgi°î
(
H_CDLe·
, 
cy˛es
);

303 
	`lﬂd_ªgi°î
(
H_CDRight
, 
cy˛es
);

306 
i
=0;i<
MAXCHAN
;i++Ë
•u
.
SB
[ò* 
SB_SIZE
 + 28]=0;

308 
	`CÀ¨W‹kögSèã
();

309 
•u
.
cy˛es_∂ayed
 = 
cy˛es
;

311 i‡(
•u
.
•uCål
 & 
CTRL_IRQ
)

312 
	`scheduÀ_√xt_úq
();

315 
	}
}

319 
	$LﬂdSèãV5
(
SPUFªeze_t
 * 
pF
)

321 
i
;
SPUOSSFªeze_t
 * 
pFO
;

323 
pFO
=(
SPUOSSFªeze_t
 *)(
pF
+1);

325 
•u
.
pSpuIrq
 = spu.
•uMemC
 + ((•u.
ªgAªa
[(
H_SPUúqAddr
 - 0x0c00) / 2] << 3) & ~0xf);

327 if(
pFO
->
•uAddr
)

329 i‡(
pFO
->
•uAddr
 =0xbØdf00dË
•u
.spuAddr = 0;

330 
•u
.
•uAddr
 = 
pFO
->spuAddr & 0x7fffe;

333 
•u
.
dwNewCh™√l
=0;

334 
•u
.
dwCh™√lOn
=0;

335 
•u
.
dwCh™√lDód
=0;

336 
i
=0;i<
MAXCHAN
;i++)

338 
	`lﬂd_ch™√l
(&
•u
.
s_ch™
[
i
],&
pFO
->s_chan[i],i);

340 
•u
.
s_ch™
[
i
].
pCuº
 +(
uöçå_t
)•u.
•uMemC
;

341 
•u
.
s_ch™
[
i
].
pLo›
 +(
uöçå_t
)•u.
•uMemC
;

343 
	}
}

347 
	$LﬂdSèãUnknown
(
SPUFªeze_t
 * 
pF
, 
uöt32_t
 
cy˛es
)

349 
i
;

351 
i
=0;i<
MAXCHAN
;i++)

353 
•u
.
s_ch™
[
i
].
pLo›
=•u.
•uMemC
;

356 
•u
.
dwNewCh™√l
=0;

357 
•u
.
dwCh™√lOn
=0;

358 
•u
.
dwCh™√lDód
=0;

359 
•u
.
pSpuIrq
=•u.
•uMemC
;

361 
i
=0;i<0xc0;i++)

363 
	`lﬂd_ªgi°î
(0x1f801c00 + 
i
*2, 
cy˛es
);

365 
	}
}

	@src/spu/spu_pcsxrearmed/gauss_i.h

18 #i‚de‡
GAUSS_H


19 
	#GAUSS_H


	)

21 c⁄° 
	ggauss
[]={

	@src/spu/spu_pcsxrearmed/nullsnd.c

1 
	~"out.h
"

4 
	$n⁄e_öô
()

7 
	}
}

10 
	$n⁄e_föish
()

12 
	}
}

15 
	$n⁄e_busy
()

18 
	}
}

21 
	$n⁄e_„ed
(*
buf
, 
byãs
)

23 
	}
}

25 
	$out_ªgi°î_n⁄e
(
out_drivî
 *
drv
)

27 
drv
->
«me
 = "none";

28 
drv
->
öô
 = 
n⁄e_öô
;

29 
drv
->
föish
 = 
n⁄e_föish
;

30 
drv
->
busy
 = 
n⁄e_busy
;

31 
drv
->
„ed
 = 
n⁄e_„ed
;

32 
	}
}

	@src/spu/spu_pcsxrearmed/oss.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<f˙é.h
>

23 
	~<sys/io˘l.h
>

24 
	~<uni°d.h
>

25 
	~<sys/soundˇrd.h
>

26 
	~"out.h
"

32 
	#OSS_MODE_STEREO
 1

	)

33 
	#OSS_MODE_MONO
 0

	)

35 
	#OSS_SPEED_44100
 44100

	)

37 
	#FRAGMENT_SHIFT
 12

	)

38 
	#FRAGMENT_SIZE
 (1 << 
FRAGMENT_SHIFT
)

	)

40 
	goss_audio_fd
 = -1;

41 
î∫o
;

47 
	$oss_öô
()

49 
p•ìd
=44100;

50 
p°îeo
;

51 
f‹m©
;

52 
my‰ag
;

53 
oss_•ìd
, 
oss_°îeo
;

55 
p°îeo
 = 
OSS_MODE_STEREO
;

56 
oss_•ìd
 = 
p•ìd
;

57 
oss_°îeo
 = 
p°îeo
;

59 if((
oss_audio_fd
=
	`›í
("/dev/d•",
O_WRONLY
,0))==-1)

61 
	`¥ötf
("OSS deviceÇotávailable\n");

65 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_RESET
,0)==-1)

67 
	`¥ötf
("SoundÑeset failed\n");

74 
my‰ag
 = (10<<16Ë| 
FRAGMENT_SHIFT
;

76 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_SETFRAGMENT
,&
my‰ag
)==-1)

78 
	`¥ötf
("Sound set fragment failed!\n");

82 
f‹m©
 = 
AFMT_S16_NE
;

84 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_SETFMT
,&
f‹m©
) == -1)

86 
	`¥ötf
("Sound formatÇot supported!\n");

90 if(
f‹m©
!=
AFMT_S16_NE
)

92 
	`¥ötf
("Sound formatÇot supported!\n");

96 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_STEREO
,&
oss_°îeo
)==-1 || !oss_stereo)

98 
	`¥ötf
("Stereo modeÇot supported!\n");

102 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_SPEED
,&
oss_•ìd
)==-1)

104 
	`¥ötf
("Sound frequencyÇot supported\n");

108 if(
oss_•ìd
!=
p•ìd
)

110 
	`¥ötf
("Sound frequencyÇot supported\n");

115 
	}
}

121 
	$oss_föish
()

123 if(
oss_audio_fd
 != -1 )

125 
	`˛o£
(
oss_audio_fd
);

126 
oss_audio_fd
 = -1;

128 
	}
}

134 
	$oss_busy
()

136 
audio_buf_öfo
 
öfo
;

137 
l
;

139 if(
oss_audio_fd
 == -1)  1;

140 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_GETOSPACE
,&
öfo
)==-1)

141 
l
=0;

144 if(
öfo
.
‰agmíts
<(öfo.
‰ag°ŸÆ
>>1))

145 
l
=1;

146 
l
=0;

149  
l
;

150 
	}
}

156 
	$oss_„ed
(*
buf
, 
byãs
)

158 
audio_buf_öfo
 
öfo
;

159 
sbuf
[4096];

161 if(
oss_audio_fd
 == -1) ;

162 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_GETOSPACE
,&
öfo
)==0)

165 if(
byãs
 > 
öfo
.
‰agmíts
 * 
FRAGMENT_SIZE
)

166 
byãs
 = 
öfo
.
‰agmíts
 * 
FRAGMENT_SIZE
;

167 if(
byãs
 == 0)

170 if(
öfo
.
‰agmíts
==öfo.
‰ag°ŸÆ
)

172 
	`mem£t
(
sbuf
, 0, (sbuf));

173 
	`wrôe
(
oss_audio_fd
, 
sbuf
, (sbuf));

174 
	`wrôe
(
oss_audio_fd
, 
sbuf
, (sbuf));

175 
	`wrôe
(
oss_audio_fd
, 
sbuf
, (sbuf));

179 
	`wrôe
(
oss_audio_fd
, 
buf
, 
byãs
);

180 
	}
}

182 
	$out_ªgi°î_oss
(
out_drivî
 *
drv
)

184 
drv
->
«me
 = "oss";

185 
drv
->
öô
 = 
oss_öô
;

186 
drv
->
föish
 = 
oss_föish
;

187 
drv
->
busy
 = 
oss_busy
;

188 
drv
->
„ed
 = 
oss_„ed
;

189 
	}
}

	@src/spu/spu_pcsxrearmed/out.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~"out.h
"

5 
	~"•u_c⁄fig.h
"

7 
	#MAX_OUT_DRIVERS
 5

	)

9 
out_drivî
 
	gout_drivîs
[
MAX_OUT_DRIVERS
];

10 
out_drivî
 *
	gout_cuºít
;

11 
	gdrivî_cou¡
;

13 
	#REGISTER_DRIVER
(
d
) { \

14 
out_ªgi°î_
##
	`d
(
out_drivî
 *
drv
); \

15 
out_ªgi°î_
##
	`d
(&
out_drivîs
[
drivî_cou¡
++]); \

16 }

	)

18 
	$SëupSound
()

20 
i
;

22 i‡(
drivî_cou¡
 == 0) {

25 i‡(
•u_c⁄fig
.
iDißbÀd
) {

26 
	`REGISTER_DRIVER
(
n⁄e
);

28 #ifde‡
HAVE_OSS


29 
	`REGISTER_DRIVER
(
oss
);

31 #ifde‡
HAVE_ALSA


32 
	`REGISTER_DRIVER
(
Æß
);

34 #ifde‡
HAVE_SDL


35 
	`REGISTER_DRIVER
(
sdl
);

37 #ifde‡
HAVE_PULSE


38 
	`REGISTER_DRIVER
(
pul£
);

40 #ifde‡
HAVE_LIBRETRO


41 
	`REGISTER_DRIVER
(
libªåo
);

43 
	`REGISTER_DRIVER
(
n⁄e
);

48 
i
 = 0; i < 
drivî_cou¡
; i++)

49 i‡(
out_drivîs
[
i
].
	`öô
() == 0)

52 i‡(
i
 < 0 || i >
drivî_cou¡
) {

53 
	`¥ötf
("the impossible happened\n");

54 
	`ab‹t
();

57 
out_cuºít
 = &
out_drivîs
[
i
];

58 
	`¥ötf
("£À˘ed sound ouçuàdrivî: %s\n", 
out_cuºít
->
«me
);

59 
	}
}

	@src/spu/spu_pcsxrearmed/out.h

2 
	sout_drivî
 {

3 c⁄° *
	m«me
;

4 (*
	möô
)();

5 (*
	mföish
)();

6 (*
	mbusy
)();

7 (*
	m„ed
)(*
	md©a
, 
	mbyãs
);

10 
out_drivî
 *
out_cuºít
;

12 
SëupSound
();

	@src/spu/spu_pcsxrearmed/psemuxa.h

6 #i‚de‡
DECODEXA_H


7 
	#DECODEXA_H


	)

11 
	my0
, 
	my1
;

12 } 
	tADPCM_Decode_t
;

16 
	m‰eq
;

17 
	mnbôs
;

18 
	m°îeo
;

19 
	mnßm∂es
;

20 
ADPCM_Decode_t
 
	mÀ·
, 
	mright
;

21 
	mpcm
[16384];

22 } 
	txa_decode_t
;

24 
xa_decode_£˘‹
–
xa_decode_t
 *
xdp
,

25 *
£˘‹p
,

26 
is_fú°_£˘‹
 );

	@src/spu/spu_pcsxrearmed/pulseaudio.c

20 
	~<°dio.h
>

22 
	~<pul£/pul£audio.h
>

23 
	~"out.h
"

30 
∑_thªaded_maölo›
 *
	mmaölo›
;

31 
∑_c⁄ãxt
 *
	mc⁄ãxt
;

32 
∑_maölo›_≠i
 *
	m≠i
;

33 
∑_°ªam
 *
	m°ªam
;

34 
∑_ßm∂e_•ec
 
	m•ec
;

35 
	mfú°
;

36 } 
	tDevi˚
;

39 
	m‰equícy
;

40 
	mœãncy_ö_m£c
;

41 } 
	tSëtögs
;

47 
Devi˚
 
	gdevi˚
 = {

48 .
maölo›
 = 
NULL
,

49 .
	g≠i
 = 
NULL
,

50 .
	gc⁄ãxt
 = 
NULL
,

51 .
	g°ªam
 = 
NULL


54 
Sëtögs
 
	g£âögs
 = {

55 .
‰equícy
 = 44100,

56 .
	gœãncy_ö_m£c
 = 20,

60 c⁄° 
	gmixÀn
 = 3240;

68 
	$c⁄ãxt_°©e_cb
 (
∑_c⁄ãxt
 *
c⁄ãxt
, *
u£rd©a
)

70 
Devi˚
 *
dev
 = 
u£rd©a
;

72 i‡((
c⁄ãxt
 =
NULL
Ë|| (
dev
 == NULL))

75 
	`∑_c⁄ãxt_gë_°©e
 (
c⁄ãxt
))

77 
PA_CONTEXT_READY
:

78 
PA_CONTEXT_TERMINATED
:

79 
PA_CONTEXT_FAILED
:

80 
	`∑_thªaded_maölo›_sig«l
 (
dev
->
maölo›
, 0);

83 
PA_CONTEXT_UNCONNECTED
:

84 
PA_CONTEXT_CONNECTING
:

85 
PA_CONTEXT_AUTHORIZING
:

86 
PA_CONTEXT_SETTING_NAME
:

89 
	}
}

91 
	$°ªam_°©e_cb
 (
∑_°ªam
 *
°ªam
, * 
u£rd©a
)

93 
Devi˚
 *
dev
 = 
u£rd©a
;

95 i‡((
°ªam
 =
NULL
Ë|| (
dev
 == NULL))

98 
	`∑_°ªam_gë_°©e
 (
°ªam
))

100 
PA_STREAM_READY
:

101 
PA_STREAM_FAILED
:

102 
PA_STREAM_TERMINATED
:

103 
	`∑_thªaded_maölo›_sig«l
 (
dev
->
maölo›
, 0);

106 
PA_STREAM_UNCONNECTED
:

107 
PA_STREAM_CREATING
:

110 
	}
}

112 
	$°ªam_œãncy_upd©e_cb
 (
∑_°ªam
 *
°ªam
, *
u£rd©a
)

114 
Devi˚
 *
dev
 = 
u£rd©a
;

116 i‡((
°ªam
 =
NULL
Ë|| (
dev
 == NULL))

119 
	`∑_thªaded_maölo›_sig«l
 (
dev
->
maölo›
, 0);

120 
	}
}

122 
	$°ªam_ªque°_cb
 (
∑_°ªam
 *
°ªam
, 
size_t
 
Àngth
, *
u£rd©a
)

124 
Devi˚
 *
dev
 = 
u£rd©a
;

126 i‡((
°ªam
 =
NULL
Ë|| (
dev
 == NULL))

128 
	`∑_thªaded_maölo›_sig«l
 (
dev
->
maölo›
, 0);

129 
	}
}

135 
	$pul£_öô
()

137 
îr‹_numbî
;

140 
devi˚
.
maölo›
 = 
	`∑_thªaded_maölo›_√w
 ();

141 i‡(
devi˚
.
maölo›
 =
NULL
)

143 
	`Ârötf
 (
°dîr
, "CouldÇotácquire PulseAudio mainÜoop\n");

148 
devi˚
.
≠i
 = 
	`∑_thªaded_maölo›_gë_≠i
 (devi˚.
maölo›
);

149 
devi˚
.
c⁄ãxt
 = 
	`∑_c⁄ãxt_√w
 (devi˚.
≠i
, "PCSX");

150 
	`∑_c⁄ãxt_£t_°©e_ˇŒback
 (
devi˚
.
c⁄ãxt
, 
c⁄ãxt_°©e_cb
, &device);

152 i‡(
devi˚
.
c⁄ãxt
 =
NULL
)

154 
	`Ârötf
 (
°dîr
, "CouldÇotácquire PulseAudio device context\n");

159 i‡(
	`∑_c⁄ãxt_c⁄√˘
 (
devi˚
.
c⁄ãxt
, 
NULL
, 0, NULL) < 0)

161 
îr‹_numbî
 = 
	`∑_c⁄ãxt_î∫o
 (
devi˚
.
c⁄ãxt
);

162 
	`Ârötf
 (
°dîr
, "CouldÇŸ c⁄√˘ÅÿPul£Audiÿ£rvî: %s\n", 
	`∑_°ªº‹
(
îr‹_numbî
));

167 
	`∑_thªaded_maölo›_lock
 (
devi˚
.
maölo›
);

168 i‡(
	`∑_thªaded_maölo›_°¨t
 (
devi˚
.
maölo›
) < 0)

170 
	`Ârötf
 (
°dîr
, "CouldÇot start mainloop\n");

174 
∑_c⁄ãxt_°©e_t
 
c⁄ãxt_°©e
;

175 
c⁄ãxt_°©e
 = 
	`∑_c⁄ãxt_gë_°©e
 (
devi˚
.
c⁄ãxt
);

176 
c⁄ãxt_°©e
 !
PA_CONTEXT_READY
)

178 
c⁄ãxt_°©e
 = 
	`∑_c⁄ãxt_gë_°©e
 (
devi˚
.
c⁄ãxt
);

179 i‡(! 
	`PA_CONTEXT_IS_GOOD
 (
c⁄ãxt_°©e
))

181 
îr‹_numbî
 = 
	`∑_c⁄ãxt_î∫o
 (
devi˚
.
c⁄ãxt
);

182 
	`Ârötf
 (
°dîr
, "C⁄ãxà°©êi†nŸ good: %s\n", 
	`∑_°ªº‹
 (
îr‹_numbî
));

185 i‡(
c⁄ãxt_°©e
 =
PA_CONTEXT_READY
)

188 
	`Ârötf
 (
°dîr
, "Pul£Audiÿc⁄ãxà°©êi†%d\n", 
c⁄ãxt_°©e
);

189 
	`∑_thªaded_maölo›_waô
 (
devi˚
.
maölo›
);

193 
devi˚
.
•ec
.
f‹m©
 = 
PA_SAMPLE_S16NE
;

194 
devi˚
.
•ec
.
ch™√ls
 = 2;

195 
devi˚
.
•ec
.
øã
 = 
£âögs
.
‰equícy
;

197 
∑_buf„r_©å
 
buf„r_©åibuãs
;

198 
buf„r_©åibuãs
.
éígth
 = 
	`∑_byãs_≥r_£c⁄d
 (& 
devi˚
.
•ec
) / 5;

199 
buf„r_©åibuãs
.
maxÀngth
 = buf„r_©åibuãs.
éígth
 * 3;

200 
buf„r_©åibuãs
.
möªq
 = buf„r_©åibuãs.
éígth
 / 3;

201 
buf„r_©åibuãs
.
¥ebuf
 = buf„r_©åibuãs.
éígth
;

210 
devi˚
.
°ªam
 = 
	`∑_°ªam_√w
 (devi˚.
c⁄ãxt
, "PCSX", &devi˚.
•ec
, 
NULL
);

211 i‡(
devi˚
.
°ªam
 =
NULL
)

213 
îr‹_numbî
 = 
	`∑_c⁄ãxt_î∫o
 (
devi˚
.
c⁄ãxt
);

214 
	`Ârötf
 (
°dîr
, "CouldÇŸácquúê√w Pul£Audiÿ°ªam: %s\n", 
	`∑_°ªº‹
 (
îr‹_numbî
));

219 
	`∑_°ªam_£t_°©e_ˇŒback
 (
devi˚
.
°ªam
, 
°ªam_°©e_cb
, &device);

220 
	`∑_°ªam_£t_wrôe_ˇŒback
 (
devi˚
.
°ªam
, 
°ªam_ªque°_cb
, &device);

221 
	`∑_°ªam_£t_œãncy_upd©e_ˇŒback
 (
devi˚
.
°ªam
, 
°ªam_œãncy_upd©e_cb
, &device);

224 
∑_°ªam_Êags_t
 
Êags
 = (∑_°ªam_Êags_tË(
PA_STREAM_ADJUST_LATENCY
 | 
PA_STREAM_INTERPOLATE_TIMING
 | 
PA_STREAM_AUTO_TIMING_UPDATE
);

226 i‡(
	`∑_°ªam_c⁄√˘_∂ayback
 (
devi˚
.
°ªam
, 
NULL
, &
buf„r_©åibuãs
, 
Êags
, NULL, NULL) < 0)

228 
îr‹_numbî
 = 
	`∑_c⁄ãxt_î∫o
 (
devi˚
.
c⁄ãxt
);

229 
	`Ârötf
 (
°dîr
, "CouldÇŸ c⁄√˘ f‹Öœyback: %s\n", 
	`∑_°ªº‹
 (
îr‹_numbî
));

234 
∑_°ªam_°©e_t
 
°ªam_°©e
;

235 
°ªam_°©e
 = 
	`∑_°ªam_gë_°©e
 (
devi˚
.
°ªam
);

236 
°ªam_°©e
 !
PA_STREAM_READY
)

238 
°ªam_°©e
 = 
	`∑_°ªam_gë_°©e
 (
devi˚
.
°ªam
);

240 i‡(
°ªam_°©e
 =
PA_STREAM_READY
)

243 i‡(! 
	`PA_STREAM_IS_GOOD
 (
°ªam_°©e
))

245 
îr‹_numbî
 = 
	`∑_c⁄ãxt_î∫o
 (
devi˚
.
c⁄ãxt
);

246 
	`Ârötf
 (
°dîr
, "Såóm sèã i†nŸ good: %s\n", 
	`∑_°ªº‹
 (
îr‹_numbî
));

250 
	`Ârötf
 (
°dîr
, "Pul£Audiÿ°ªam sèã i†%d\n", 
°ªam_°©e
);

251 
	`∑_thªaded_maölo›_waô
 (
devi˚
.
maölo›
);

254 
	`∑_thªaded_maölo›_u∆ock
 (
devi˚
.
maölo›
);

256 
	`Ârötf
 (
°dîr
, "PulseAudio should be connected\n");

258 
	}
}

263 
	$pul£_föish
()

265 i‡(
devi˚
.
maölo›
 !
NULL
)

266 
	`∑_thªaded_maölo›_°›
 (
devi˚
.
maölo›
);

269 i‡(
devi˚
.
°ªam
 !
NULL
)

271 
	`∑_°ªam_uƒef
 (
devi˚
.
°ªam
);

272 
devi˚
.
°ªam
 = 
NULL
;

275 i‡(
devi˚
.
c⁄ãxt
 !
NULL
)

277 
	`∑_c⁄ãxt_disc⁄√˘
 (
devi˚
.
c⁄ãxt
);

278 
	`∑_c⁄ãxt_uƒef
 (
devi˚
.
c⁄ãxt
);

279 
devi˚
.
c⁄ãxt
 = 
NULL
;

282 i‡(
devi˚
.
maölo›
 !
NULL
)

284 
	`∑_thªaded_maölo›_‰ì
 (
devi˚
.
maölo›
);

285 
devi˚
.
maölo›
 = 
NULL
;

288 
	}
}

294 
	$pul£_busy
()

296 
‰ì_•a˚
;

298 i‡((
devi˚
.
maölo›
 =
NULL
Ë|| (devi˚.
≠i
 =NULLË|| ( devi˚.
c⁄ãxt
 =NULLË|| (devi˚.
°ªam
 == NULL))

301 
	`∑_thªaded_maölo›_lock
 (
devi˚
.
maölo›
);

302 
‰ì_•a˚
 = 
	`∑_°ªam_wrôabÀ_size
 (
devi˚
.
°ªam
);

303 
	`∑_thªaded_maölo›_u∆ock
 (
devi˚
.
maölo›
);

307 i‡(
‰ì_•a˚
 < 
mixÀn
 * 3)

319 
	}
}

325 
	$pul£_„ed
(*
pSound
, 
lByãs
)

327 i‡(
devi˚
.
maölo›
 !
NULL
)

329 
	`∑_thªaded_maölo›_lock
 (
devi˚
.
maölo›
);

330 i‡(
	`∑_°ªam_wrôe
 (
devi˚
.
°ªam
, 
pSound
, 
lByãs
, 
NULL
, 0LL, 
PA_SEEK_RELATIVE
) < 0)

332 
	`Ârötf
 (
°dîr
, "CouldÇotÖerform write\n");

337 
	`∑_thªaded_maölo›_u∆ock
 (
devi˚
.
maölo›
);

340 
	}
}

342 
	$out_ªgi°î_pul£
(
out_drivî
 *
drv
)

344 
drv
->
«me
 = "pulseaudio";

345 
drv
->
öô
 = 
pul£_öô
;

346 
drv
->
föish
 = 
pul£_föish
;

347 
drv
->
busy
 = 
pul£_busy
;

348 
drv
->
„ed
 = 
pul£_„ed
;

349 
	}
}

	@src/spu/spu_pcsxrearmed/registers.c

18 
	~"°dafx.h
"

20 
	#_IN_REGISTERS


	)

22 
	~"exã∫Æs.h
"

23 
	~"ªgi°îs.h
"

24 
	~"•u_c⁄fig.h
"

26 
SoundOn
(
°¨t
,
íd
,
vÆ
);

27 
SoundOff
(
°¨t
,
íd
,
vÆ
);

28 
FModOn
(
°¨t
,
íd
,
vÆ
);

29 
Noi£On
(
°¨t
,
íd
,
vÆ
);

30 
SëVﬁumeL
(
ch
,
vﬁ
);

31 
SëVﬁumeR
(
ch
,
vﬁ
);

32 
SëPôch
(
ch
,
vÆ
);

33 
RevîbOn
(
°¨t
,
íd
,
vÆ
);

39 c⁄° 
uöt32_t
 
	gign‹e_du≥
[8] = {

46 
CALLBACK
 
	$SPUwrôeRegi°î
(
ªg
, 
vÆ
,

47 
cy˛es
)

49 
r
 = 
ªg
 & 0xfff;

50 
rofs
 = (
r
 - 0xc00) >> 1;

51 
ch™ged
 = 
•u
.
ªgAªa
[
rofs
] !
vÆ
;

52 
•u
.
ªgAªa
[
rofs
] = 
vÆ
;

54 i‡(!
ch™ged
 && (
ign‹e_du≥
[
rofs
 >> 5] & (1 << (rofs & 0x1f))))

57 i‡(
vÆ
 =0 && (
r
 & 0xff8) == 0xd88)

60 
	`do_ßm∂es_if_√eded
(
cy˛es
, 0);

62 if(
r
>=0x0c00 &&Ñ<0x0d80)

64 
ch
=(
r
>>4)-0xc0;

65 
r
&0x0f)

69 
	`SëVﬁumeL
(()
ch
,
vÆ
);

73 
	`SëVﬁumeR
(()
ch
,
vÆ
);

77 
	`SëPôch
(
ch
,
vÆ
);

78 
upd_úq
;

86 c⁄° 
lvÆ
=
vÆ
;

88 
•u
.
s_ch™
[
ch
].
ADSRX
.
AâackModeExp
=(
lvÆ
&0x8000)?1:0;

89 
•u
.
s_ch™
[
ch
].
ADSRX
.
AâackR©e
=(
lvÆ
>>8) & 0x007f;

90 
•u
.
s_ch™
[
ch
].
ADSRX
.
DeˇyR©e
=(
lvÆ
>>4) & 0x000f;

91 
•u
.
s_ch™
[
ch
].
ADSRX
.
Su°aöLevñ
=
lvÆ
 & 0x000f;

98 c⁄° 
lvÆ
=
vÆ
;

101 
•u
.
s_ch™
[
ch
].
ADSRX
.
Su°aöModeExp
 = (
lvÆ
&0x8000)?1:0;

102 
•u
.
s_ch™
[
ch
].
ADSRX
.
Su°aöIn¸ó£
(
lvÆ
&0x4000)?0:1;

103 
•u
.
s_ch™
[
ch
].
ADSRX
.
Su°aöR©e
 = (
lvÆ
>>6) & 0x007f;

104 
•u
.
s_ch™
[
ch
].
ADSRX
.
Rñó£ModeExp
 = (
lvÆ
&0x0020)?1:0;

105 
•u
.
s_ch™
[
ch
].
ADSRX
.
Rñó£R©e
 = 
lvÆ
 & 0x001f;

114 
•u
.
s_ch™
[
ch
].
pLo›
=•u.
•uMemC
+((
vÆ
&~1)<<3);

115 
upd_úq
;

121 
r
)

124 
H_SPUaddr
:

125 
•u
.
•uAddr
 = (Ë
vÆ
<<3;

128 
H_SPUd©a
:

129 *(*)(
•u
.
•uMemC
 + spu.
•uAddr
Ë
vÆ
;

130 
•u
.
•uAddr
 += 2;

131 
•u
.
•uAddr
 &= 0x7fffe;

134 
H_SPU˘æ
:

135 i‡(!(
•u
.
•uCål
 & 
CTRL_IRQ
)) {

136 
•u
.
•uSèt
&=~
STAT_IRQ
;

137 i‡(
vÆ
 & 
CTRL_IRQ
)

138 
	`scheduÀ_√xt_úq
();

140 
•u
.
•uCål
=
vÆ
;

143 
H_SPU°©
:

144 
•u
.
•uSèt
=
vÆ
&0xf800;

147 
H_SPURevîbAddr
:

148 
rvbd
;

150 
H_SPUúqAddr
:

151 
•u
.
pSpuIrq
=•u.
•uMemC
+(((Ë
vÆ
<<3)&~0xf);

152 
upd_úq
;

154 
H_SPUrvﬁL
:

155 
•u
.
rvb
->
VﬁLe·
=
vÆ
;

158 
H_SPUrvﬁR
:

159 
•u
.
rvb
->
VﬁRight
=
vÆ
;

189 
H_SPU⁄1
:

190 
	`SoundOn
(0,16,
vÆ
);

193 
H_SPU⁄2
:

194 
	`SoundOn
(16,24,
vÆ
);

197 
H_SPUoff1
:

198 
	`SoundOff
(0,16,
vÆ
);

201 
H_SPUoff2
:

202 
	`SoundOff
(16,24,
vÆ
);

205 
H_CDLe·
:

206 
•u
.
iLe·XAVﬁ
=
vÆ
 & 0x7fff;

207 if(
•u
.
cddavCÆlback
Ë•u.
	`cddavCÆlback
(0,
vÆ
);

209 
H_CDRight
:

210 
•u
.
iRightXAVﬁ
=
vÆ
 & 0x7fff;

211 if(
•u
.
cddavCÆlback
Ë•u.
	`cddavCÆlback
(1,
vÆ
);

214 
H_FMod1
:

215 
	`FModOn
(0,16,
vÆ
);

218 
H_FMod2
:

219 
	`FModOn
(16,24,
vÆ
);

222 
H_Noi£1
:

223 
	`Noi£On
(0,16,
vÆ
);

226 
H_Noi£2
:

227 
	`Noi£On
(16,24,
vÆ
);

230 
H_RVB⁄1
:

231 
	`RevîbOn
(0,16,
vÆ
);

234 
H_RVB⁄2
:

235 
	`RevîbOn
(16,24,
vÆ
);

238 
H_Revîb
+0 : 
rvbd
;

239 
H_Revîb
+2 : 
rvbd
;

240 
H_Revîb
+4 : 
•u
.
rvb
->
IIR_ALPHA
=()
vÆ
; ;

241 
H_Revîb
+6 : 
•u
.
rvb
->
ACC_COEF_A
=()
vÆ
; ;

242 
H_Revîb
+8 : 
•u
.
rvb
->
ACC_COEF_B
=()
vÆ
; ;

243 
H_Revîb
+10 : 
•u
.
rvb
->
ACC_COEF_C
=()
vÆ
; ;

244 
H_Revîb
+12 : 
•u
.
rvb
->
ACC_COEF_D
=()
vÆ
; ;

245 
H_Revîb
+14 : 
•u
.
rvb
->
IIR_COEF
=()
vÆ
; ;

246 
H_Revîb
+16 : 
•u
.
rvb
->
FB_ALPHA
=()
vÆ
; ;

247 
H_Revîb
+18 : 
•u
.
rvb
->
FB_X
=()
vÆ
; ;

248 
H_Revîb
+20 : 
rvbd
;

249 
H_Revîb
+22 : 
rvbd
;

250 
H_Revîb
+24 : 
rvbd
;

251 
H_Revîb
+26 : 
rvbd
;

252 
H_Revîb
+28 : 
rvbd
;

253 
H_Revîb
+30 : 
rvbd
;

254 
H_Revîb
+32 : 
rvbd
;

255 
H_Revîb
+34 : 
rvbd
;

256 
H_Revîb
+36 : 
rvbd
;

257 
H_Revîb
+38 : 
rvbd
;

258 
H_Revîb
+40 : 
rvbd
;

259 
H_Revîb
+42 : 
rvbd
;

260 
H_Revîb
+44 : 
rvbd
;

261 
H_Revîb
+46 : 
rvbd
;

262 
H_Revîb
+48 : 
rvbd
;

263 
H_Revîb
+50 : 
rvbd
;

264 
H_Revîb
+52 : 
rvbd
;

265 
H_Revîb
+54 : 
rvbd
;

266 
H_Revîb
+56 : 
rvbd
;

267 
H_Revîb
+58 : 
rvbd
;

268 
H_Revîb
+60 : 
•u
.
rvb
->
IN_COEF_L
=()
vÆ
; ;

269 
H_Revîb
+62 : 
•u
.
rvb
->
IN_COEF_R
=()
vÆ
; ;

273 
upd_úq
:

274 i‡(
•u
.
•uCål
 & 
CTRL_IRQ
)

275 
	`scheduÀ_√xt_úq
();

278 
rvbd
:

279 
•u
.
rvb
->
dúty
 = 1;

280 
	}
}

286 
CALLBACK
 
	$SPUªadRegi°î
(
ªg
)

288 c⁄° 
r
=
ªg
&0xfff;

290 if(
r
>=0x0c00 &&Ñ<0x0d80)

292 
r
&0x0f)

296 c⁄° 
ch
=(
r
>>4)-0xc0;

297 if(
•u
.
dwNewCh™√l
&(1<<
ch
))  1;

298 if((
•u
.
dwCh™√lOn
&(1<<
ch
)) &&

299 !
•u
.
s_ch™
[
ch
].
ADSRX
.
Envñ›eVﬁ
)

301  ()(
•u
.
s_ch™
[
ch
].
ADSRX
.
Envñ›eVﬁ
>>16);

306 c⁄° 
ch
=(
r
>>4)-0xc0;

307  ()((
•u
.
s_ch™
[
ch
].
pLo›
-•u.
•uMemC
)>>3);

312 
r
)

314 
H_SPU˘æ
:

315  
•u
.
•uCål
;

317 
H_SPU°©
:

318  
•u
.
•uSèt
;

320 
H_SPUaddr
:

321  ()(
•u
.
•uAddr
>>3);

323 
H_SPUd©a
:

325 
s
 = *(*)(
•u
.
•uMemC
 + spu.
•uAddr
);

326 
•u
.
•uAddr
 += 2;

327 
•u
.
•uAddr
 &= 0x7fffe;

328  
s
;

339  
•u
.
ªgAªa
[(
r
-0xc00)>>1];

340 
	}
}

346 
	$SoundOn
(
°¨t
,
íd
,
vÆ
)

348 
ch
;

350 
ch
=
°¨t
;ch<
íd
;ch++,
vÆ
>>=1)

352 if((
vÆ
&1Ë&& 
	`ªgAªaGë
(
ch
,6))

354 
•u
.
s_ch™
[
ch
].
pCuº
=•u.
•uMemC
+((
	`ªgAªaGë
(ch,6)&~1)<<3);

355 
•u
.
s_ch™
[
ch
].
pLo›
=•u.
•uMemC
+((
	`ªgAªaGë
(ch,14)&~1)<<3);

356 
•u
.
dwNewCh™√l
|=(1<<
ch
);

359 
	}
}

365 
	$SoundOff
(
°¨t
,
íd
,
vÆ
)

367 
ch
;

368 
ch
=
°¨t
;ch<
íd
;ch++,
vÆ
>>=1)

370 if(
vÆ
&1)

372 
•u
.
s_ch™
[
ch
].
ADSRX
.
Sèã
 = 
ADSR_RELEASE
;

376 
•u
.
dwNewCh™√l
 &~(1<<
ch
);

379 
	}
}

385 
	$FModOn
(
°¨t
,
íd
,
vÆ
)

387 
ch
;

389 
ch
=
°¨t
;ch<
íd
;ch++,
vÆ
>>=1)

391 if(
vÆ
&1)

393 if(
ch
>0)

395 
•u
.
s_ch™
[
ch
].
bFMod
=1;

396 
•u
.
s_ch™
[
ch
-1].
bFMod
=2;

401 
•u
.
s_ch™
[
ch
].
bFMod
=0;

402 if(
ch
>0&&
•u
.
s_ch™
[ch-1].
bFMod
==2)

403 
•u
.
s_ch™
[
ch
-1].
bFMod
=0;

406 
	}
}

412 
	$Noi£On
(
°¨t
,
íd
,
vÆ
)

414 
ch
;

416 
ch
=
°¨t
;ch<
íd
;ch++,
vÆ
>>=1)

418 
•u
.
s_ch™
[
ch
].
bNoi£
=
vÆ
&1;

420 
	}
}

429 
	$SëVﬁumeL
(
ch
,
vﬁ
)

431 if(
vﬁ
&0x8000)

433 
sInc
=1;

434 if(
vﬁ
&0x2000Ë
sInc
=-1;

435 if(
vﬁ
&0x1000) vol^=0xffff;

436 
vﬁ
=((vol&0x7f)+1)/2;

437 
vﬁ
+=vﬁ/(2*
sInc
);

438 
vﬁ
*=128;

442 if(
vﬁ
&0x4000)

444 
vﬁ
=0x3fff-(vol&0x3fff);

447 
vﬁ
&=0x3fff;

448 
•u
.
s_ch™
[
ch
].
iLe·Vﬁume
=
vﬁ
;

449 
	}
}

455 
	$SëVﬁumeR
(
ch
,
vﬁ
)

457 if(
vﬁ
&0x8000)

459 
sInc
=1;

460 if(
vﬁ
&0x2000Ë
sInc
=-1;

461 if(
vﬁ
&0x1000) vol^=0xffff;

462 
vﬁ
=((vol&0x7f)+1)/2;

463 
vﬁ
+=vﬁ/(2*
sInc
);

464 
vﬁ
*=128;

468 if(
vﬁ
&0x4000)

469 
vﬁ
=0x3fff-(vol&0x3fff);

472 
vﬁ
&=0x3fff;

474 
•u
.
s_ch™
[
ch
].
iRightVﬁume
=
vﬁ
;

475 
	}
}

481 
	$SëPôch
(
ch
,
vÆ
)

483 
NP
;

484 if(
vÆ
>0x3fffË
NP
=0x3fff;

485 
NP
=
vÆ
;

487 
•u
.
s_ch™
[
ch
].
iRawPôch
=
NP
;

488 
•u
.
s_ch™
[
ch
].
söc
=(
NP
<<4)|8;

489 
•u
.
s_ch™
[
ch
].
söc_öv
=0;

490 i‡(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 == 1)

491 
•u
.
SB
[
ch
 * 
SB_SIZE
 + 32] = 1;

492 
	}
}

498 
	$RevîbOn
(
°¨t
,
íd
,
vÆ
)

500 
ch
;

502 
ch
=
°¨t
;ch<
íd
;ch++,
vÆ
>>=1)

504 
•u
.
s_ch™
[
ch
].
bRevîb
=
vÆ
&1;

506 
	}
}

	@src/spu/spu_pcsxrearmed/registers.h

18 
	#H_SPURevîbAddr
 0x0da2

	)

19 
	#H_SPUúqAddr
 0x0da4

	)

20 
	#H_SPUaddr
 0x0da6

	)

21 
	#H_SPUd©a
 0x0da8

	)

22 
	#H_SPU˘æ
 0x0dØ

	)

23 
	#H_SPU°©
 0x0d´

	)

24 
	#H_SPUmvﬁL
 0x0d80

	)

25 
	#H_SPUmvﬁR
 0x0d82

	)

26 
	#H_SPUrvﬁL
 0x0d84

	)

27 
	#H_SPUrvﬁR
 0x0d86

	)

28 
	#H_SPU⁄1
 0x0d88

	)

29 
	#H_SPU⁄2
 0x0d8a

	)

30 
	#H_SPUoff1
 0x0d8c

	)

31 
	#H_SPUoff2
 0x0d8e

	)

32 
	#H_FMod1
 0x0d90

	)

33 
	#H_FMod2
 0x0d92

	)

34 
	#H_Noi£1
 0x0d94

	)

35 
	#H_Noi£2
 0x0d96

	)

36 
	#H_RVB⁄1
 0x0d98

	)

37 
	#H_RVB⁄2
 0x0d9a

	)

38 
	#H_SPUMuã1
 0x0d9c

	)

39 
	#H_SPUMuã2
 0x0d9e

	)

40 
	#H_CDLe·
 0x0db0

	)

41 
	#H_CDRight
 0x0db2

	)

42 
	#H_ExtLe·
 0x0db4

	)

43 
	#H_ExtRight
 0x0db6

	)

44 
	#H_Revîb
 0x0dc0

	)

45 
	#H_SPUPôch0
 0x0c04

	)

46 
	#H_SPUPôch1
 0x0c14

	)

47 
	#H_SPUPôch2
 0x0c24

	)

48 
	#H_SPUPôch3
 0x0c34

	)

49 
	#H_SPUPôch4
 0x0c44

	)

50 
	#H_SPUPôch5
 0x0c54

	)

51 
	#H_SPUPôch6
 0x0c64

	)

52 
	#H_SPUPôch7
 0x0c74

	)

53 
	#H_SPUPôch8
 0x0c84

	)

54 
	#H_SPUPôch9
 0x0c94

	)

55 
	#H_SPUPôch10
 0x0ˇ4

	)

56 
	#H_SPUPôch11
 0x0cb4

	)

57 
	#H_SPUPôch12
 0x0cc4

	)

58 
	#H_SPUPôch13
 0x0cd4

	)

59 
	#H_SPUPôch14
 0x0˚4

	)

60 
	#H_SPUPôch15
 0x0cf4

	)

61 
	#H_SPUPôch16
 0x0d04

	)

62 
	#H_SPUPôch17
 0x0d14

	)

63 
	#H_SPUPôch18
 0x0d24

	)

64 
	#H_SPUPôch19
 0x0d34

	)

65 
	#H_SPUPôch20
 0x0d44

	)

66 
	#H_SPUPôch21
 0x0d54

	)

67 
	#H_SPUPôch22
 0x0d64

	)

68 
	#H_SPUPôch23
 0x0d74

	)

70 
	#H_SPUSèπAdr0
 0x0c06

	)

71 
	#H_SPUSèπAdr1
 0x0c16

	)

72 
	#H_SPUSèπAdr2
 0x0c26

	)

73 
	#H_SPUSèπAdr3
 0x0c36

	)

74 
	#H_SPUSèπAdr4
 0x0c46

	)

75 
	#H_SPUSèπAdr5
 0x0c56

	)

76 
	#H_SPUSèπAdr6
 0x0c66

	)

77 
	#H_SPUSèπAdr7
 0x0c76

	)

78 
	#H_SPUSèπAdr8
 0x0c86

	)

79 
	#H_SPUSèπAdr9
 0x0c96

	)

80 
	#H_SPUSèπAdr10
 0x0ˇ6

	)

81 
	#H_SPUSèπAdr11
 0x0cb6

	)

82 
	#H_SPUSèπAdr12
 0x0cc6

	)

83 
	#H_SPUSèπAdr13
 0x0cd6

	)

84 
	#H_SPUSèπAdr14
 0x0˚6

	)

85 
	#H_SPUSèπAdr15
 0x0cf6

	)

86 
	#H_SPUSèπAdr16
 0x0d06

	)

87 
	#H_SPUSèπAdr17
 0x0d16

	)

88 
	#H_SPUSèπAdr18
 0x0d26

	)

89 
	#H_SPUSèπAdr19
 0x0d36

	)

90 
	#H_SPUSèπAdr20
 0x0d46

	)

91 
	#H_SPUSèπAdr21
 0x0d56

	)

92 
	#H_SPUSèπAdr22
 0x0d66

	)

93 
	#H_SPUSèπAdr23
 0x0d76

	)

95 
	#H_SPULo›Adr0
 0x0c0e

	)

96 
	#H_SPULo›Adr1
 0x0c1e

	)

97 
	#H_SPULo›Adr2
 0x0c2e

	)

98 
	#H_SPULo›Adr3
 0x0c3e

	)

99 
	#H_SPULo›Adr4
 0x0c4e

	)

100 
	#H_SPULo›Adr5
 0x0c5e

	)

101 
	#H_SPULo›Adr6
 0x0c6e

	)

102 
	#H_SPULo›Adr7
 0x0c7e

	)

103 
	#H_SPULo›Adr8
 0x0c8e

	)

104 
	#H_SPULo›Adr9
 0x0c9e

	)

105 
	#H_SPULo›Adr10
 0x0ˇe

	)

106 
	#H_SPULo›Adr11
 0x0cbe

	)

107 
	#H_SPULo›Adr12
 0x0c˚

	)

108 
	#H_SPULo›Adr13
 0x0cde

	)

109 
	#H_SPULo›Adr14
 0x0˚e

	)

110 
	#H_SPULo›Adr15
 0x0c„

	)

111 
	#H_SPULo›Adr16
 0x0d0e

	)

112 
	#H_SPULo›Adr17
 0x0d1e

	)

113 
	#H_SPULo›Adr18
 0x0d2e

	)

114 
	#H_SPULo›Adr19
 0x0d3e

	)

115 
	#H_SPULo›Adr20
 0x0d4e

	)

116 
	#H_SPULo›Adr21
 0x0d5e

	)

117 
	#H_SPULo›Adr22
 0x0d6e

	)

118 
	#H_SPULo›Adr23
 0x0d7e

	)

120 
	#H_SPU_ADSRLevñ0
 0x0c08

	)

121 
	#H_SPU_ADSRLevñ1
 0x0c18

	)

122 
	#H_SPU_ADSRLevñ2
 0x0c28

	)

123 
	#H_SPU_ADSRLevñ3
 0x0c38

	)

124 
	#H_SPU_ADSRLevñ4
 0x0c48

	)

125 
	#H_SPU_ADSRLevñ5
 0x0c58

	)

126 
	#H_SPU_ADSRLevñ6
 0x0c68

	)

127 
	#H_SPU_ADSRLevñ7
 0x0c78

	)

128 
	#H_SPU_ADSRLevñ8
 0x0c88

	)

129 
	#H_SPU_ADSRLevñ9
 0x0c98

	)

130 
	#H_SPU_ADSRLevñ10
 0x0ˇ8

	)

131 
	#H_SPU_ADSRLevñ11
 0x0cb8

	)

132 
	#H_SPU_ADSRLevñ12
 0x0cc8

	)

133 
	#H_SPU_ADSRLevñ13
 0x0cd8

	)

134 
	#H_SPU_ADSRLevñ14
 0x0˚8

	)

135 
	#H_SPU_ADSRLevñ15
 0x0cf8

	)

136 
	#H_SPU_ADSRLevñ16
 0x0d08

	)

137 
	#H_SPU_ADSRLevñ17
 0x0d18

	)

138 
	#H_SPU_ADSRLevñ18
 0x0d28

	)

139 
	#H_SPU_ADSRLevñ19
 0x0d38

	)

140 
	#H_SPU_ADSRLevñ20
 0x0d48

	)

141 
	#H_SPU_ADSRLevñ21
 0x0d58

	)

142 
	#H_SPU_ADSRLevñ22
 0x0d68

	)

143 
	#H_SPU_ADSRLevñ23
 0x0d78

	)

145 
	#CTRL_IRQ
 0x40

	)

146 
	#CTRL_REVERB
 0x80

	)

147 
	#CTRL_NOISE
 0x3f00

	)

148 
	#CTRL_MUTE
 0x4000

	)

149 
	#CTRL_ON
 0x8000

	)

151 
	#STAT_IRQ
 0x40

	)

155 
CALLBACK
 
SPUwrôeRegi°î
(
ªg
, 
vÆ
, 
cy˛es
);

	@src/spu/spu_pcsxrearmed/reverb.c

22 
	~"°dafx.h
"

24 
	#_IN_REVERB


	)

27 #ifde‡
_IN_SPU


33 
INLINE
 
	$SèπREVERB
(
ch
)

35 if(
•u
.
s_ch™
[
ch
].
bRevîb
 && (•u.
•uCål
&0x80))

37 
•u
.
s_ch™
[
ch
].
bRVBA˘ive
=!!
•u_c⁄fig
.
iU£Revîb
;

39 
•u
.
s_ch™
[
ch
].
bRVBA˘ive
=0;

40 
	}
}

44 
INLINE
 
	$rvb2øm_offs
(
cuº
, 
•a˚
, 
iOff
)

46 
iOff
 +
cuº
;

47 i‡(
iOff
 >0x40000ËiOf‡-
•a˚
;

48  
iOff
;

49 
	}
}

52 
	#g_buf„r
(
v¨
Ë\

	)

53 (()(sig√d )
	g•u
.
	g•uMem
[
rvb2øm_offs
(
cuº_addr
, 
•a˚
, 
rvb
->
v¨
)])

56 
	#s_buf„r
(
v¨
, 
iVÆ
Ë\

	)

57 
sßt32_to_16
(
iVÆ
); \

58 
	g•u
.
	g•uMem
[
rvb2øm_offs
(
cuº_addr
, 
•a˚
, 
rvb
->
v¨
)] = 
iVÆ


60 
	#s_buf„r1
(
v¨
, 
iVÆ
Ë\

	)

61 
sßt32_to_16
(
iVÆ
); \

62 
	g•u
.
	g•uMem
[
rvb2øm_offs
(
cuº_addr
, 
•a˚
, 
rvb
->
v¨
 + 1)] = 
iVÆ


67 
	$MixREVERB
(*
SSumLR
, *
RVB
, 
ns_to
, 
cuº_addr
)

69 c⁄° 
REVERBInfo
 *
rvb
 = 
•u
.rvb;

70 
IIR_ALPHA
 = 
rvb
->IIR_ALPHA;

71 
IIR_COEF
 = 
rvb
->IIR_COEF;

72 
•a˚
 = 0x40000 - 
rvb
->
SèπAddr
;

73 
l
, 
r
, 
ns
;

75 
ns
 = 0;Ç†< 
ns_to
 * 2; )

77 
ACC0
, 
ACC1
, 
FB_A0
, 
FB_A1
, 
FB_B0
, 
FB_B1
;

78 
mix_de°_a0
, 
mix_de°_a1
, 
mix_de°_b0
, 
mix_de°_b1
;

80 
öput_L
 = 
RVB
[
ns
] * 
rvb
->
IN_COEF_L
;

81 
öput_R
 = 
RVB
[
ns
+1] * 
rvb
->
IN_COEF_R
;

83 
IIR_INPUT_A0
 = ((
	`g_buf„r
(
IIR_SRC_A0
Ë* 
IIR_COEF
Ë+ 
öput_L
) >> 15;

84 
IIR_INPUT_A1
 = ((
	`g_buf„r
(
IIR_SRC_A1
Ë* 
IIR_COEF
Ë+ 
öput_R
) >> 15;

85 
IIR_INPUT_B0
 = ((
	`g_buf„r
(
IIR_SRC_B0
Ë* 
IIR_COEF
Ë+ 
öput_L
) >> 15;

86 
IIR_INPUT_B1
 = ((
	`g_buf„r
(
IIR_SRC_B1
Ë* 
IIR_COEF
Ë+ 
öput_R
) >> 15;

88 
iú_de°_a0
 = 
	`g_buf„r
(
IIR_DEST_A0
);

89 
iú_de°_a1
 = 
	`g_buf„r
(
IIR_DEST_A1
);

90 
iú_de°_b0
 = 
	`g_buf„r
(
IIR_DEST_B0
);

91 
iú_de°_b1
 = 
	`g_buf„r
(
IIR_DEST_B1
);

93 
IIR_A0
 = 
iú_de°_a0
 + ((
IIR_INPUT_A0
 - iú_de°_a0Ë* 
IIR_ALPHA
 >> 15);

94 
IIR_A1
 = 
iú_de°_a1
 + ((
IIR_INPUT_A1
 - iú_de°_a1Ë* 
IIR_ALPHA
 >> 15);

95 
IIR_B0
 = 
iú_de°_b0
 + ((
IIR_INPUT_B0
 - iú_de°_b0Ë* 
IIR_ALPHA
 >> 15);

96 
IIR_B1
 = 
iú_de°_b1
 + ((
IIR_INPUT_B1
 - iú_de°_b1Ë* 
IIR_ALPHA
 >> 15);

98 
	`¥ñﬂd
(
SSumLR
 + 
ns
 + 64*2/4 - 4);

100 
	`s_buf„r1
(
IIR_DEST_A0
, 
IIR_A0
);

101 
	`s_buf„r1
(
IIR_DEST_A1
, 
IIR_A1
);

102 
	`s_buf„r1
(
IIR_DEST_B0
, 
IIR_B0
);

103 
	`s_buf„r1
(
IIR_DEST_B1
, 
IIR_B1
);

105 
	`¥ñﬂd
(
RVB
 + 
ns
 + 64*2/4 - 4);

107 
ACC0
 = (
	`g_buf„r
(
ACC_SRC_A0
Ë* 
rvb
->
ACC_COEF_A
 +

108 
	`g_buf„r
(
ACC_SRC_B0
Ë* 
rvb
->
ACC_COEF_B
 +

109 
	`g_buf„r
(
ACC_SRC_C0
Ë* 
rvb
->
ACC_COEF_C
 +

110 
	`g_buf„r
(
ACC_SRC_D0
Ë* 
rvb
->
ACC_COEF_D
) >> 15;

111 
ACC1
 = (
	`g_buf„r
(
ACC_SRC_A1
Ë* 
rvb
->
ACC_COEF_A
 +

112 
	`g_buf„r
(
ACC_SRC_B1
Ë* 
rvb
->
ACC_COEF_B
 +

113 
	`g_buf„r
(
ACC_SRC_C1
Ë* 
rvb
->
ACC_COEF_C
 +

114 
	`g_buf„r
(
ACC_SRC_D1
Ë* 
rvb
->
ACC_COEF_D
) >> 15;

116 
FB_A0
 = 
	`g_buf„r
(
FB_SRC_A0
);

117 
FB_A1
 = 
	`g_buf„r
(
FB_SRC_A1
);

118 
FB_B0
 = 
	`g_buf„r
(
FB_SRC_B0
);

119 
FB_B1
 = 
	`g_buf„r
(
FB_SRC_B1
);

121 
mix_de°_a0
 = 
ACC0
 - ((
FB_A0
 * 
rvb
->
FB_ALPHA
) >> 15);

122 
mix_de°_a1
 = 
ACC1
 - ((
FB_A1
 * 
rvb
->
FB_ALPHA
) >> 15);

124 
mix_de°_b0
 = 
FB_A0
 + (((
ACC0
 - FB_A0Ë* 
rvb
->
FB_ALPHA
 - 
FB_B0
 *Ñvb->
FB_X
) >> 15);

125 
mix_de°_b1
 = 
FB_A1
 + (((
ACC1
 - FB_A1Ë* 
rvb
->
FB_ALPHA
 - 
FB_B1
 *Ñvb->
FB_X
) >> 15);

127 
	`s_buf„r
(
MIX_DEST_A0
, 
mix_de°_a0
);

128 
	`s_buf„r
(
MIX_DEST_A1
, 
mix_de°_a1
);

129 
	`s_buf„r
(
MIX_DEST_B0
, 
mix_de°_b0
);

130 
	`s_buf„r
(
MIX_DEST_B1
, 
mix_de°_b1
);

132 
l
 = (
mix_de°_a0
 + 
mix_de°_b0
) / 2;

133 
r
 = (
mix_de°_a1
 + 
mix_de°_b1
) / 2;

135 
l
 = (»* 
rvb
->
VﬁLe·
) >> 15;

136 
r
 = (∏* 
rvb
->
VﬁRight
) >> 15;

138 
SSumLR
[
ns
++] +
l
;

139 
SSumLR
[
ns
++] +
r
;

140 
SSumLR
[
ns
++] +
l
;

141 
SSumLR
[
ns
++] +
r
;

143 
cuº_addr
++;

144 i‡(
cuº_addr
 >0x40000Ëcuº_add∏
rvb
->
SèπAddr
;

146 
	}
}

148 
	$MixREVERB_off
(*
SSumLR
, 
ns_to
, 
cuº_addr
)

150 c⁄° 
REVERBInfo
 *
rvb
 = 
•u
.rvb;

151 
•a˚
 = 0x40000 - 
rvb
->
SèπAddr
;

152 
l
, 
r
, 
ns
;

154 
ns
 = 0;Ç†< 
ns_to
 * 2; )

156 
	`¥ñﬂd
(
SSumLR
 + 
ns
 + 64*2/4 - 4);

158 
l
 = (
	`g_buf„r
(
MIX_DEST_A0
Ë+ g_buf„r(
MIX_DEST_B0
)) / 2;

159 
r
 = (
	`g_buf„r
(
MIX_DEST_A1
Ë+ g_buf„r(
MIX_DEST_B1
)) / 2;

161 
l
 = (»* 
rvb
->
VﬁLe·
) >> 15;

162 
r
 = (∏* 
rvb
->
VﬁRight
) >> 15;

164 
SSumLR
[
ns
++] +
l
;

165 
SSumLR
[
ns
++] +
r
;

166 
SSumLR
[
ns
++] +
l
;

167 
SSumLR
[
ns
++] +
r
;

169 
cuº_addr
++;

170 i‡(
cuº_addr
 >0x40000Ëcuº_add∏
rvb
->
SèπAddr
;

172 
	}
}

174 
	$REVERBPªp
()

176 
REVERBInfo
 *
rvb
 = 
•u
.rvb;

177 
•a˚
, 
t
;

179 
t
 = 
•u
.
ªgAªa
[(
H_SPURevîbAddr
 - 0xc00) >> 1];

180 i‡(
t
 == 0xFFFF ||Å <= 0x200)

181 
•u
.
rvb
->
SèπAddr
 = spu.rvb->
CuºAddr
 = 0;

182 i‡(
•u
.
rvb
->
SèπAddr
 !(
t
 << 2))

183 
•u
.
rvb
->
SèπAddr
 = spu.rvb->
CuºAddr
 = 
t
 << 2;

185 
•a˚
 = 0x40000 - 
rvb
->
SèπAddr
;

187 
	#¥ï_offs
(
v
, 
r
Ë\

	)

188 
t
 = 
•u
.
ªgAªa
[(0x1c0 + 
r
) >> 1] * 4; \

189 
t
 >
•a˚
) \

190 
t
 -
•a˚
; \

191 
rvb
->
v
 = 
t


192 
	#¥ï_offs2
(
d
, 
r1
, 
r2
Ë\

	)

193 
t
 = 
•u
.
ªgAªa
[(0x1c0 + 
r1
) >> 1] * 4; \

194 
t
 -
•u
.
ªgAªa
[(0x1c0 + 
r2
) >> 1] * 4; \

195 
t
 < 0) \

196 
t
 +
•a˚
; \

197 
t
 >
•a˚
) \

198 
t
 -
•a˚
; \

199 
rvb
->
d
 = 
t


201 
	`¥ï_offs
(
IIR_SRC_A0
, 32);

202 
	`¥ï_offs
(
IIR_SRC_A1
, 34);

203 
	`¥ï_offs
(
IIR_SRC_B0
, 36);

204 
	`¥ï_offs
(
IIR_SRC_B1
, 38);

205 
	`¥ï_offs
(
IIR_DEST_A0
, 20);

206 
	`¥ï_offs
(
IIR_DEST_A1
, 22);

207 
	`¥ï_offs
(
IIR_DEST_B0
, 36);

208 
	`¥ï_offs
(
IIR_DEST_B1
, 38);

209 
	`¥ï_offs
(
ACC_SRC_A0
, 24);

210 
	`¥ï_offs
(
ACC_SRC_A1
, 26);

211 
	`¥ï_offs
(
ACC_SRC_B0
, 28);

212 
	`¥ï_offs
(
ACC_SRC_B1
, 30);

213 
	`¥ï_offs
(
ACC_SRC_C0
, 40);

214 
	`¥ï_offs
(
ACC_SRC_C1
, 42);

215 
	`¥ï_offs
(
ACC_SRC_D0
, 44);

216 
	`¥ï_offs
(
ACC_SRC_D1
, 46);

217 
	`¥ï_offs
(
MIX_DEST_A0
, 52);

218 
	`¥ï_offs
(
MIX_DEST_A1
, 54);

219 
	`¥ï_offs
(
MIX_DEST_B0
, 56);

220 
	`¥ï_offs
(
MIX_DEST_B1
, 58);

221 
	`¥ï_offs2
(
FB_SRC_A0
, 52, 0);

222 
	`¥ï_offs2
(
FB_SRC_A1
, 54, 0);

223 
	`¥ï_offs2
(
FB_SRC_B0
, 56, 2);

224 
	`¥ï_offs2
(
FB_SRC_B1
, 58, 2);

226 #unde‡
¥ï_offs


227 #unde‡
¥ï_offs2


228 
rvb
->
dúty
 = 0;

229 
	}
}

231 
INLINE
 
	$REVERBDo
(*
SSumLR
, *
RVB
, 
ns_to
, 
cuº_addr
)

233 i‡(
•u
.
•uCål
 & 0x80)

235 
	`MixREVERB
(
SSumLR
, 
RVB
, 
ns_to
, 
cuº_addr
);

237 i‡(
•u
.
rvb
->
VﬁLe·
 || spu.rvb->
VﬁRight
)

239 
	`MixREVERB_off
(
SSumLR
, 
ns_to
, 
cuº_addr
);

241 
	}
}

	@src/spu/spu_pcsxrearmed/sdl.c

19 
	~<°dlib.h
>

20 
	~<SDL.h
>

21 
	~<°döt.h
>

22 
	~"out.h
"

23 
	~"•u_c⁄fig.h
"

24 
	~"psxcomm⁄.h
"

26 
	#SOUND_BUFFER_SIZE
 22050

27 
	#ROOM_IN_BUFFER
 (
SOUND_BUFFER_SIZE
 - 
buf„ªd_byãs
)

	)

28 *
	gsound_buf„r
 = 
NULL
;

29 
	gbuf_ªad_pos
 = 0;

30 
	gbuf_wrôe_pos
 = 0;

31 
	gwaôög_to_„ed
 = 0;

33 #ifde‡
DEBUG_FEED_RATIO


34 
upd©e_„ed_øtio
();

35 
	gcur_„ed_øtio
 = 1.0f;

36 
	g√w_øtio_vÆ
 = 0;

37 
	gtŸÆ_byãs_c⁄sumed
 = 0;

38 
	gtŸÆ_byãs_„d
 = 0;

39 
	gdr›≥d_byãs
 = 0;

40 
	gmis£d_byãs
 = 0;

44 
	gbuf„ªd_byãs
 = 0;

47 
SDL_£m
 *
	gsound_£m
 = 
NULL
;

54 
	$SOUND_FûlAudio
(*
unu£d
, 
Uöt8
 *
°ªam
, 
Àn
) {

55 
uöt8_t
 *
out_buf
 = (uöt8_à*)
°ªam
;

56 
uöt8_t
 *
ö_buf
 = (uöt8_à*)
sound_buf„r
;

58 
byãs_to_c›y
 = (
Àn
 > 
buf„ªd_byãs
) ? buffered_bytes :Üen;

60 #ifde‡
DEBUG_FEED_RATIO


61 
mis£d_byãs
 +
Àn
 - 
byãs_to_c›y
;

62 
tŸÆ_byãs_c⁄sumed
 +
Àn
;

63 
	`upd©e_„ed_øtio
();

66 i‡(
byãs_to_c›y
 > 0) {

67 i‡(
buf_ªad_pos
 + 
byãs_to_c›y
 <
SOUND_BUFFER_SIZE
 ) {

68 
	`mem˝y
(
out_buf
, 
ö_buf
 + 
buf_ªad_pos
, 
byãs_to_c›y
);

70 
èû
 = 
SOUND_BUFFER_SIZE
 - 
buf_ªad_pos
;

71 
	`mem˝y
(
out_buf
, 
ö_buf
 + 
buf_ªad_pos
, 
èû
);

72 
	`mem˝y
(
out_buf
 + 
èû
, 
ö_buf
, 
byãs_to_c›y
 -Åail);

75 
buf_ªad_pos
 = (buf_ªad_po†+ 
byãs_to_c›y
);

76 i‡(
buf_ªad_pos
 >
SOUND_BUFFER_SIZE
)

77 
buf_ªad_pos
 -
SOUND_BUFFER_SIZE
;

81 
	`__sync_„tch_™d_sub
(&
buf„ªd_byãs
, 
byãs_to_c›y
);

85 i‡(
Àn
 - 
byãs_to_c›y
 > 0) {

86 
	`mem£t
(
out_buf
 + 
byãs_to_c›y
, 0, 
Àn
 - bytes_to_copy);

91 i‡(
waôög_to_„ed
)

92 
	`SDL_SemPo°
(
sound_£m
);

93 
	}
}

96 
	$InôSDL
() {

97 i‡(
	`SDL_WasInô
(
SDL_INIT_EVERYTHING
)) {

98 
	`SDL_InôSubSy°em
(
SDL_INIT_AUDIO
);

100 
	`SDL_Inô
(
SDL_INIT_AUDIO
 | 
SDL_INIT_NOPARACHUTE
);

102 
	}
}

104 
	$De°roySDL
() {

105 i‡(
sound_£m
)

106 
	`SDL_De°roySem≠h‹e
(
sound_£m
);

108 i‡(
	`SDL_WasInô
(
SDL_INIT_EVERYTHING
 & ~
SDL_INIT_AUDIO
)) {

109 
	`SDL_QuôSubSy°em
(
SDL_INIT_AUDIO
);

111 
	`SDL_Quô
();

113 
	}
}

115 
	$sdl_öô
() {

116 i‡(
sound_buf„r
 !
NULL
)  -1;

118 
	`InôSDL
();

120 
SDL_AudioS≥c
 
•ec
;

122 i‡(
C⁄fig
.
SyncAudio
) {

123 
sound_£m
 = 
	`SDL_Cª©eSem≠h‹e
(0);

124 i‡(
sound_£m
)

125 
	`¥ötf
("Created SDLáudio output semaphore successfully.\n");

127 
	`¥ötf
("FailedÅo create SDLáudio output semaphore,áudio willÇot be synced.\n");

129 
•ec
.
ˇŒback
 = 
SOUND_FûlAudio
;

131 
•ec
.
‰eq
 = 44100;

132 
•ec
.
f‹m©
 = 
AUDIO_S16SYS
;

133 
•ec
.
ch™√ls
 = 2;

136 
•ec
.
ßm∂es
 = 1024;

139 i‡(
	`SDL_O≥nAudio
(&
•ec
, 
NULL
) < 0) {

140 
	`De°roySDL
();

144 
sound_buf„r
 = (*)
	`ˇŒoc
(
SOUND_BUFFER_SIZE
,1);

145 i‡(
sound_buf„r
 =
NULL
) {

146 
	`¥ötf
("-> ERROR: SPUÖlugö couldÇŸáŒoˇã %d-byã sound buf„r\n", 
SOUND_BUFFER_SIZE
);

147 
	`SDL_Clo£Audio
();

151 
buf_ªad_pos
 = 0;

152 
buf_wrôe_pos
 = 0;

153 
	`SDL_Pau£Audio
(0);

155 
	}
}

157 
	$sdl_föish
() {

158 i‡(
sound_buf„r
 =
NULL
) ;

160 
	`SDL_Clo£Audio
();

161 
	`De°roySDL
();

163 i‡(
sound_buf„r
Ë
	`‰ì
(sound_buffer);

164 
sound_buf„r
 = 
NULL
;

165 
	}
}

173 
	$sdl_busy
() {

174 
size
;

175 i‡(
pSndBuf„r
 =
NULL
)  1;

176 
size
 = 
iRódPos
 - 
iWrôePos
;

177 i‡(
size
 <0Ësizê+
iBufSize
;

178 i‡(
size
 < 
iBufSize
 / 2)  1;

180 
	}
}

182 
	$sdl_busy
() {

187 i‡((
ROOM_IN_BUFFER
 < 
SOUND_BUFFER_SIZE
*5/8Ë|| 
sound_buf„r
 =
NULL
)

191 
	}
}

200 
	$sdl_„ed
(*
pSound
, 
lByãs
) {

201 #ifde‡
DEBUG_FEED_RATIO


202 
tŸÆ_byãs_„d
 +
lByãs
;

205 
byãs_to_c›y
 = 
lByãs
;

207 i‡(
sound_£m
) {

208 
ROOM_IN_BUFFER
 < 
lByãs
) {

210 
waôög_to_„ed
 = 1;

211 
	`SDL_SemWaô
(
sound_£m
);

213 
waôög_to_„ed
 = 0;

216 i‡(
ROOM_IN_BUFFER
 == 0) {

217 #ifde‡
DEBUG_FEED_RATIO


218 
dr›≥d_byãs
 +
byãs_to_c›y
;

223 i‡(
byãs_to_c›y
 > 
ROOM_IN_BUFFER
) bytes_to_copy = ROOM_IN_BUFFER;

225 #ifde‡
DEBUG_FEED_RATIO


226 
dr›≥d_byãs
 +
lByãs
 - 
byãs_to_c›y
;

230 
uöt8_t
 *
ö_buf
 = (uöt8_à*)
pSound
;

231 
uöt8_t
 *
out_buf
 = (uöt8_à*)
sound_buf„r
;

233 i‡(
buf_wrôe_pos
 + 
byãs_to_c›y
 <
SOUND_BUFFER_SIZE
 ) {

234 
	`mem˝y
(
out_buf
 + 
buf_wrôe_pos
, 
ö_buf
, 
byãs_to_c›y
);

236 
èû
 = 
SOUND_BUFFER_SIZE
 - 
buf_wrôe_pos
;

237 
	`mem˝y
(
out_buf
 + 
buf_wrôe_pos
, 
ö_buf
, 
èû
);

238 
	`mem˝y
(
out_buf
, 
ö_buf
 + 
èû
, 
byãs_to_c›y
 -Åail);

241 
buf_wrôe_pos
 = (buf_wrôe_po†+ 
byãs_to_c›y
Ë% 
SOUND_BUFFER_SIZE
;

245 
	`__sync_„tch_™d_add
(&
buf„ªd_byãs
, 
byãs_to_c›y
);

246 
	}
}

248 #ifde‡
DEBUG_FEED_RATIO


249 
	$upd©e_„ed_øtio
() {

250 c⁄° 
ˇŒs_bëwìn_√w_øtio
 = 5;

251 
ˇŒs_u¡û_√w_øtio
 = 
ˇŒs_bëwìn_√w_øtio
;

252 
ˇŒs_u¡û_√w_øtio
--;

253 i‡(
ˇŒs_u¡û_√w_øtio
 > 0)

257 i‡(
tŸÆ_byãs_c⁄sumed
 == 0)

258 
tŸÆ_byãs_c⁄sumed
 = 1;

260 
ˇŒs_u¡û_√w_øtio
 = 
ˇŒs_bëwìn_√w_øtio
;

261 
cur_„ed_øtio
 = ()
tŸÆ_byãs_„d
 / ()
tŸÆ_byãs_c⁄sumed
;

262 
√w_øtio_vÆ
 = 1;

263 
tŸÆ_byãs_„d
 = 
tŸÆ_byãs_c⁄sumed
 = 0;

265 
	`¥ötf
("‰: %‡ buf: %d dr›: %d miss: %d\n", 
cur_„ed_øtio
, 
buf„ªd_byãs
, 
dr›≥d_byãs
, 
mis£d_byãs
);

267 
dr›≥d_byãs
 = 
mis£d_byãs
 = 0;

268 
	}
}

271 
	$out_ªgi°î_sdl
(
out_drivî
 *
drv
)

273 
drv
->
«me
 = "sdl";

274 
drv
->
öô
 = 
sdl_öô
;

275 
drv
->
föish
 = 
sdl_föish
;

276 
drv
->
busy
 = 
sdl_busy
;

277 
drv
->
„ed
 = 
sdl_„ed
;

278 
	}
}

	@src/spu/spu_pcsxrearmed/spu.c

21 #i‡!
deföed
(
_WIN32
Ë&& !deföed(
NO_OS
)

22 
	~<sys/time.h
>

23 
	#THREAD_ENABLED
 1

	)

25 
	~"°dafx.h
"

27 
	#_IN_SPU


	)

29 
	~"exã∫Æs.h
"

30 
	~"ªgi°îs.h
"

31 
	~"out.h
"

32 
	~"•u_c⁄fig.h
"

34 #ifde‡
__¨m__


35 
	~"¨m_„©uªs.h
"

38 #ifde‡
HAVE_ARMV7


39 
	#sßt32_to_16
(
v
) \

40 
	`asm
("sßà%0,#16,%1" : "Ù" (
v
Ë: "r" (v))

	)

42 
	#sßt32_to_16
(
v
) do { \

43 i‡(
v
 < -32768) v = -32768; \

44 i‡(
v
 > 32767) v = 32767; \

45 } 0)

	)

49 
	#IRQ_NEAR_BLOCKS
 32

	)

71 
SPUInfo
 
	g•u
;

72 
SPUC⁄fig
 
	g•u_c⁄fig
;

74 
	giFMod
[
NSSIZE
];

75 
	gRVB
[
NSSIZE
 * 2];

76 
	gCh™Buf
[
NSSIZE
];

78 
	#CDDA_BUFFER_SIZE
 (16384 * (
uöt32_t
))

79 

	)

86 
	~"ªvîb.c
"

87 
	~"ad§.c
"

131 
	$I¡îpﬁ©eUp
(*
SB
, 
söc
)

133 if(
SB
[32]==1)

135 c⁄° 
id1
=
SB
[30]-SB[29];

136 c⁄° 
id2
=
SB
[31]-SB[30];

138 
SB
[32]=0;

140 if(
id1
>0)

142 if(
id2
<
id1
)

143 {
SB
[28]=
id1
;SB[32]=2;}

145 if(
id2
<(
id1
<<1))

146 
SB
[28]=(
id1
*
söc
)>>16;

148 
SB
[28]=(
id1
*
söc
)>>17;

152 if(
id2
>
id1
)

153 {
SB
[28]=
id1
;SB[32]=2;}

155 if(
id2
>(
id1
<<1))

156 
SB
[28]=(
id1
*
söc
)>>16;

158 
SB
[28]=(
id1
*
söc
)>>17;

162 if(
SB
[32]==2)

164 
SB
[32]=0;

166 
SB
[28]=(SB[28]*
söc
)>>17;

170 
SB
[29]+=SB[28];

173 
SB
[29]+=SB[28];

174 
	}
}

180 
	$I¡îpﬁ©eDown
(*
SB
, 
söc
)

182 if(
söc
>=0x20000L)

184 
SB
[29]+=(SB[30]-SB[29])/2;

185 if(
söc
>=0x30000L)

186 
SB
[29]+=(SB[31]-SB[30])/2;

188 
	}
}

193 
	#gvÆ0
 (((*)(&
SB
[29]))[
gpos
&3])

	)

194 
	#gvÆ
(
x
Ë(()((*)(&
SB
[29]))[(
gpos
+x)&3])

	)

196 
	~"gauss_i.h
"

200 
	~"xa.c
"

202 
	$do_úq
()

206 
•u
.
•uSèt
 |
STAT_IRQ
;

207 if(
•u
.
úqCÆlback
Ë•u.
	`úqCÆlback
();

209 
	}
}

211 
	$check_úq
(
ch
, *
pos
)

213 if((
•u
.
•uCål
 & 
CTRL_IRQ
Ë&& 
pos
 =•u.
pSpuIrq
)

216 
	`do_úq
();

220 
	}
}

226 
	$SèπSoundSB
(*
SB
)

228 
SB
[26]=0;

229 
SB
[27]=0;

231 
SB
[28]=0;

232 
SB
[29]=0;

233 
SB
[30]=0;

234 
SB
[31]=0;

235 
	}
}

237 
	$SèπSoundMaö
(
ch
)

239 
SPUCHAN
 *
s_ch™
 = &
•u
.s_ch™[
ch
];

241 
	`SèπADSR
(
ch
);

242 
	`SèπREVERB
(
ch
);

244 
s_ch™
->
¥evÊags
=2;

245 
s_ch™
->
iSBPos
=27;

246 
s_ch™
->
•os
=0;

248 
•u
.
dwNewCh™√l
&=~(1<<
ch
);

249 
•u
.
dwCh™√lOn
|=1<<
ch
;

250 
•u
.
dwCh™√lDód
&=~(1<<
ch
);

251 
	}
}

253 
	$SèπSound
(
ch
)

255 
	`SèπSoundMaö
(
ch
);

256 
	`SèπSoundSB
(
•u
.
SB
 + 
ch
 * 
SB_SIZE
);

257 
	}
}

263 
INLINE
 
	$FModCh™geFªquícy
(*
SB
, 
pôch
, 
ns
)

265 
NP
=
pôch
;

266 
söc
;

268 
NP
=((32768L+
iFMod
[
ns
])*NP)>>15;

270 if(
NP
>0x3fff) NP=0x3fff;

271 if(
NP
<0x1) NP=0x1;

273 
söc
=
NP
<<4;

274 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
==1)

275 
SB
[32]=1;

276 
iFMod
[
ns
]=0;

278  
söc
;

279 
	}
}

283 
INLINE
 
	$St‹eI¡îpﬁ©i⁄VÆ
(*
SB
, 
söc
, 
Á
, 
fmod_‰eq
)

285 if(
fmod_‰eq
)

286 
SB
[29]=
Á
;

289 
	`sßt32_to_16
(
Á
);

291 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
>=2)

293 
gpos
 = 
SB
[28];

294 
gvÆ0
 = 
Á
;

295 
gpos
 = (gpos+1) & 3;

296 
SB
[28] = 
gpos
;

299 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
==1)

301 
SB
[28] = 0;

302 
SB
[29] = SB[30];

303 
SB
[30] = SB[31];

304 
SB
[31] = 
Á
;

305 
SB
[32] = 1;

307 
SB
[29]=
Á
;

309 
	}
}

313 
INLINE
 
	$iGëI¡îpﬁ©i⁄VÆ
(*
SB
, 
söc
, 
•os
, 
fmod_‰eq
)

315 
Á
;

317 if(
fmod_‰eq
Ë 
SB
[29];

319 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
)

324 
xd
;
gpos
;

325 
xd
 = (
•os
 >> 1)+1;

326 
gpos
 = 
SB
[28];

328 
Á
 = 
	`gvÆ
(3Ë- 3*gvÆ(2Ë+ 3*gvÆ(1Ë- 
gvÆ0
;

329 
Á
 *(
xd
 - (2<<15)) / 6;

330 
Á
 >>= 15;

331 
Á
 +
	`gvÆ
(2Ë- gvÆ(1Ë- gvÆ(1Ë+ 
gvÆ0
;

332 
Á
 *(
xd
 - (1<<15)) >> 1;

333 
Á
 >>= 15;

334 
Á
 +
	`gvÆ
(1Ë- 
gvÆ0
;

335 
Á
 *
xd
;

336 
Á
 >>= 15;

337 
Á
 = f®+ 
gvÆ0
;

343 
vl
, 
vr
;
gpos
;

344 
vl
 = (
•os
 >> 6) & ~3;

345 
gpos
 = 
SB
[28];

346 
vr
=(
gauss
[
vl
]*()
gvÆ0
)&~2047;

347 
vr
+=(
gauss
[
vl
+1]*
	`gvÆ
(1))&~2047;

348 
vr
+=(
gauss
[
vl
+2]*
	`gvÆ
(2))&~2047;

349 
vr
+=(
gauss
[
vl
+3]*
	`gvÆ
(3))&~2047;

350 
Á
 = 
vr
>>11;

355 if(
söc
<0x10000L)

356 
	`I¡îpﬁ©eUp
(
SB
, 
söc
);

357 
	`I¡îpﬁ©eDown
(
SB
, 
söc
);

358 
Á
=
SB
[29];

363 
Á
=
SB
[29];

368  
Á
;

369 
	}
}

371 
	$decode_block_d©a
(*
de°
, c⁄° *
§c
, 
¥edi˘_ƒ
, 
shi·_Á˘‹
)

373 c⁄° 
f
[16][2] = {

380 
nSam∂e
;

381 
Á
, 
s_1
, 
s_2
, 
d
, 
s
;

383 
s_1
 = 
de°
[27];

384 
s_2
 = 
de°
[26];

386 
nSam∂e
 = 0;ÇSam∂ê< 28; 
§c
++)

388 
d
 = ()*
§c
;

389 
s
 = ()(sig√d )((
d
 & 0x0f) << 12);

391 
Á
 = 
s
 >> 
shi·_Á˘‹
;

392 
Á
 +((
s_1
 * 
f
[
¥edi˘_ƒ
][0])>>6Ë+ ((
s_2
 * f[predict_nr][1])>>6);

393 
s_2
=
s_1
;s_1=
Á
;

395 
de°
[
nSam∂e
++] = 
Á
;

397 
s
 = ()(sig√d )((
d
 & 0xf0) << 8);

398 
Á
 = 
s
 >> 
shi·_Á˘‹
;

399 
Á
 +((
s_1
 * 
f
[
¥edi˘_ƒ
][0])>>6Ë+ ((
s_2
 * f[predict_nr][1])>>6);

400 
s_2
=
s_1
;s_1=
Á
;

402 
de°
[
nSam∂e
++] = 
Á
;

404 
	}
}

406 
	$decode_block
(*
unu£d
, 
ch
, *
SB
)

408 
SPUCHAN
 *
s_ch™
 = &
•u
.s_ch™[
ch
];

409 *
°¨t
;

410 
¥edi˘_ƒ
, 
shi·_Á˘‹
, 
Êags
;

411 
ªt
 = 0;

413 
°¨t
 = 
s_ch™
->
pCuº
;

414 i‡(
°¨t
 =
•u
.
•uMemC
)

415 
ªt
 = 1;

417 i‡(
s_ch™
->
¥evÊags
 & 1)

419 i‡(!(
s_ch™
->
¥evÊags
 & 2))

420 
ªt
 = 1;

422 
°¨t
 = 
s_ch™
->
pLo›
;

425 
	`check_úq
(
ch
, 
°¨t
);

427 
¥edi˘_ƒ
 = 
°¨t
[0];

428 
shi·_Á˘‹
 = 
¥edi˘_ƒ
 & 0xf;

429 
¥edi˘_ƒ
 >>= 4;

431 
	`decode_block_d©a
(
SB
, 
°¨t
 + 2, 
¥edi˘_ƒ
, 
shi·_Á˘‹
);

433 
Êags
 = 
°¨t
[1];

434 i‡(
Êags
 & 4)

435 
s_ch™
->
pLo›
 = 
°¨t
;

437 
°¨t
 += 16;

439 i‡(
Êags
 & 1) {

440 
°¨t
 = 
s_ch™
->
pLo›
;

441 
	`check_úq
(
ch
, 
°¨t
);

444 i‡(
°¨t
 - 
•u
.
•uMemC
 >= 0x80000)

445 
°¨t
 = 
•u
.
•uMemC
;

447 
s_ch™
->
pCuº
 = 
°¨t
;

448 
s_ch™
->
¥evÊags
 = 
Êags
;

450  
ªt
;

451 
	}
}

454 
	$skù_block
(
ch
)

456 
SPUCHAN
 *
s_ch™
 = &
•u
.s_ch™[
ch
];

457 *
°¨t
 = 
s_ch™
->
pCuº
;

458 
Êags
;

459 
ªt
 = 0;

461 i‡(
s_ch™
->
¥evÊags
 & 1) {

462 i‡(!(
s_ch™
->
¥evÊags
 & 2))

463 
ªt
 = 1;

465 
°¨t
 = 
s_ch™
->
pLo›
;

468 
	`check_úq
(
ch
, 
°¨t
);

470 
Êags
 = 
°¨t
[1];

471 i‡(
Êags
 & 4)

472 
s_ch™
->
pLo›
 = 
°¨t
;

474 
°¨t
 += 16;

476 i‡(
Êags
 & 1) {

477 
°¨t
 = 
s_ch™
->
pLo›
;

478 
	`check_úq
(
ch
, 
°¨t
);

481 
s_ch™
->
pCuº
 = 
°¨t
;

482 
s_ch™
->
¥evÊags
 = 
Êags
;

484  
ªt
;

485 
	}
}

488 
	$sˇn_f‹_úq
(
ch
, *
upd_ßm∂es
)

490 
SPUCHAN
 *
s_ch™
 = &
•u
.s_ch™[
ch
];

491 
pos
, 
söc
, 
söc_öv
, 
íd
;

492 *
block
;

493 
Êags
;

495 
block
 = 
s_ch™
->
pCuº
;

496 
pos
 = 
s_ch™
->
•os
;

497 
söc
 = 
s_ch™
->sinc;

498 
íd
 = 
pos
 + *
upd_ßm∂es
 * 
söc
;

500 
pos
 +(28 - 
s_ch™
->
iSBPos
) << 16;

501 
pos
 < 
íd
)

503 i‡(
block
 =
•u
.
pSpuIrq
)

505 
Êags
 = 
block
[1];

506 
block
 += 16;

507 i‡(
Êags
 & 1) {

508 
block
 = 
s_ch™
->
pLo›
;

509 i‡(
block
 =
•u
.
pSpuIrq
)

512 
pos
 += 28 << 16;

515 i‡(
pos
 < 
íd
)

517 
söc_öv
 = 
s_ch™
->sinc_inv;

518 i‡(
söc_öv
 == 0)

519 
söc_öv
 = 
s_ch™
->söc_öv = (0x80000000u / (
uöt32_t
)
söc
) << 1;

521 
pos
 -
s_ch™
->
•os
;

522 *
upd_ßm∂es
 = (((
uöt64_t
)
pos
 * 
söc_öv
) >> 32) + 1;

526 
	}
}

528 
	#make_do_ßm∂es
(
«me
, 
fmod_code
, 
öãΩ_°¨t
, 
öãΩ1_code
, 
öãΩ2_code
, 
öãΩ_íd
) \

529 
noölöe
 
do_ßm∂es_
##
	`«me
( \

530 (*
decode_f
)(*
c⁄ãxt
, 
ch
, *
SB
), *
˘x
, \

531 
ch
, 
ns_to
, *
SB
, 
söc
, *
•os
, *
sbpos
) \

533 
ns
, 
d
, 
Á
; \

534 
ªt
 = 
ns_to
; \

535 
öãΩ_°¨t
; \

537 
ns
 = 0;Ç†< 
ns_to
;Çs++) \

539 
fmod_code
; \

541 *
•os
 +
söc
; \

542 *
•os
 >= 0x10000) \

544 
Á
 = 
SB
[(*
sbpos
)++]; \

545 i‡(*
sbpos
 >= 28) \

547 *
sbpos
 = 0; \

548 
d
 = 
	`decode_f
(
˘x
, 
ch
, 
SB
); \

549 i‡(
d
 && 
ns
 < 
ªt
) \

550 
ªt
 = 
ns
; \

553 
öãΩ1_code
; \

554 *
•os
 -= 0x10000; \

557 
öãΩ2_code
; \

560 
öãΩ_íd
; \

562  
ªt
; \

563 }

	)

565 
	#fmod_ªcv_check
 \

566 if(
•u
.
s_ch™
[
ch
].
bFMod
==1 && 
iFMod
[
ns
]) \

567 
söc
 = 
	`FModCh™geFªquícy
(
SB
, 
•u
.
s_ch™
[
ch
].
iRawPôch
, 
ns
)

	)

569 
make_do_ßm∂es
(, 
fmod_ªcv_check
, ,

570 
St‹eI¡îpﬁ©i⁄VÆ
(
SB
, 
söc
, 
Á
, 
•u
.
s_ch™
[
ch
].
bFMod
==2),

571 
Ch™Buf
[
ns
] = 
iGëI¡îpﬁ©i⁄VÆ
(
SB
, 
söc
, *
•os
, 
•u
.
s_ch™
[
ch
].
bFMod
==2), )

572 
	$make_do_ßm∂es
(
noöt
, , 
Á
 = 
SB
[29], , 
Ch™Buf
[
ns
] = fa, SB[29] = fa)

574 
	#sim∂e_öãΩ_°‹e
 \

575 
SB
[28] = 0; \

576 
SB
[29] = SB[30]; \

577 
SB
[30] = SB[31]; \

578 
SB
[31] = 
Á
; \

579 
SB
[32] = 1

	)

581 
	#sim∂e_öãΩ_gë
 \

582 if(
söc
<0x10000) \

583 
	`I¡îpﬁ©eUp
(
SB
, 
söc
); \

584 
	`I¡îpﬁ©eDown
(
SB
, 
söc
); \

585 
Ch™Buf
[
ns
] = 
SB
[29]

	)

587 
	$make_do_ßm∂es
(
sim∂e
, , ,

588 
sim∂e_öãΩ_°‹e
, 
sim∂e_öãΩ_gë
, )

590 
	$do_ßm∂es_skù
(
ch
, 
ns_to
)

592 
SPUCHAN
 *
s_ch™
 = &
•u
.s_ch™[
ch
];

593 
•os
 = 
s_ch™
->spos;

594 
söc
 = 
s_ch™
->sinc;

595 
ªt
 = 
ns_to
, 
ns
, 
d
;

597 
•os
 +
s_ch™
->
iSBPos
 << 16;

599 
ns
 = 0;Ç†< 
ns_to
;Çs++)

601 
•os
 +
söc
;

602 
•os
 >= 28*0x10000)

604 
d
 = 
	`skù_block
(
ch
);

605 i‡(
d
 && 
ns
 < 
ªt
)

606 
ªt
 = 
ns
;

607 
•os
 -= 28*0x10000;

611 
s_ch™
->
iSBPos
 = 
•os
 >> 16;

612 
s_ch™
->
•os
 = spos & 0xffff;

614  
ªt
;

615 
	}
}

617 
	$do_ls‰_ßm∂es
(
ns_to
, 
˘æ
,

618 *
dwNoi£Cou¡
, *
dwNoi£VÆ
)

620 
cou¡î
 = *
dwNoi£Cou¡
;

621 
vÆ
 = *
dwNoi£VÆ
;

622 
Àvñ
, 
shi·
, 
bô
;

623 
ns
;

626 
Àvñ
 = (
˘æ
 >> 10) & 0x0f;

627 
Àvñ
 = 0x8000 >>Üevel;

629 
ns
 = 0;Ç†< 
ns_to
;Çs++)

631 
cou¡î
 += 2;

632 i‡(
cou¡î
 >
Àvñ
)

634 
cou¡î
 -
Àvñ
;

635 
shi·
 = (
vÆ
 >> 10) & 0x1f;

636 
bô
 = (0x69696969 >> 
shi·
) & 1;

637 
bô
 ^(
vÆ
 >> 15) & 1;

638 
vÆ
 = (vÆ << 1Ë| 
bô
;

641 
Ch™Buf
[
ns
] = (sig√d )
vÆ
;

644 *
dwNoi£Cou¡
 = 
cou¡î
;

645 *
dwNoi£VÆ
 = 
vÆ
;

646 
	}
}

648 
	$do_ßm∂es_noi£
(
ch
, 
ns_to
)

650 
ªt
;

652 
ªt
 = 
	`do_ßm∂es_skù
(
ch
, 
ns_to
);

654 
	`do_ls‰_ßm∂es
(
ns_to
, 
•u
.
•uCål
, &•u.
dwNoi£Cou¡
, &•u.
dwNoi£VÆ
);

656  
ªt
;

657 
	}
}

659 #ifde‡
HAVE_ARMV5


661 
mix_ch™
(*
SSumLR
, 
cou¡
, 
lv
, 
rv
);

662 
mix_ch™_rvb
(*
SSumLR
, 
cou¡
, 
lv
, 
rv
, *
rvb
);

664 
	$mix_ch™
(*
SSumLR
, 
cou¡
, 
lv
, 
rv
)

666 c⁄° *
§c
 = 
Ch™Buf
;

667 
l
, 
r
;

669 
cou¡
--)

671 
svÆ
 = *
§c
++;

673 
l
 = (
svÆ
 * 
lv
) >> 14;

674 
r
 = (
svÆ
 * 
rv
) >> 14;

675 *
SSumLR
++ +
l
;

676 *
SSumLR
++ +
r
;

678 
	}
}

680 
	$mix_ch™_rvb
(*
SSumLR
, 
cou¡
, 
lv
, 
rv
, *
rvb
)

682 c⁄° *
§c
 = 
Ch™Buf
;

683 *
d°
 = 
SSumLR
;

684 *
drvb
 = 
rvb
;

685 
l
, 
r
;

687 
cou¡
--)

689 
svÆ
 = *
§c
++;

691 
l
 = (
svÆ
 * 
lv
) >> 14;

692 
r
 = (
svÆ
 * 
rv
) >> 14;

693 *
d°
++ +
l
;

694 *
d°
++ +
r
;

695 *
drvb
++ +
l
;

696 *
drvb
++ +
r
;

698 
	}
}

703 
noölöe
 
	$do_decode_bufs
(*
mem
, 
which
,

704 
cou¡
, 
decode_pos
)

706 *
d°
 = &
mem
[0x800/2 + 
which
*0x400/2];

707 c⁄° *
§c
 = 
Ch™Buf
;

708 
curs‹
 = 
decode_pos
;

710 
cou¡
-- > 0)

712 
curs‹
 &= 0x1ff;

713 
d°
[
curs‹
] = *
§c
++;

714 
curs‹
++;

718 
	}
}

720 
	$do_sûít_ch™s
(
ns_to
, 
sûítch
)

722 
mask
;

723 
SPUCHAN
 *
s_ch™
;

724 
ch
;

726 
mask
 = 
sûítch
 & 0xffffff;

727 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1)

729 i‡(!(
mask
 & 1)) ;

730 i‡(
•u
.
dwCh™√lDód
 & (1<<
ch
)) ;

732 
s_ch™
 = &
•u
.s_ch™[
ch
];

733 i‡(
s_ch™
->
pCuº
 > 
•u
.
pSpuIrq
 && s_ch™->
pLo›
 > spu.pSpuIrq)

736 
s_ch™
->
•os
 +s_ch™->
iSBPos
 << 16;

737 
s_ch™
->
iSBPos
 = 0;

739 
s_ch™
->
•os
 +s_ch™->
söc
 * 
ns_to
;

740 
s_ch™
->
•os
 >= 28 * 0x10000)

742 *
°¨t
 = 
s_ch™
->
pCuº
;

744 
	`skù_block
(
ch
);

745 i‡(
°¨t
 =
s_ch™
->
pCuº
 || sèπ - 
•u
.
•uMemC
 < 0x1000)

748 
•u
.
dwCh™√lDód
 |1<<
ch
;

749 
s_ch™
->
•os
 = 0;

753 
s_ch™
->
•os
 -= 28 * 0x10000;

756 
	}
}

758 
	$do_ch™√ls
(
ns_to
)

760 
mask
;

761 
do_rvb
, 
ch
, 
d
;

762 
SPUCHAN
 *
s_ch™
;

763 *
SB
, 
söc
;

765 
do_rvb
 = 
•u
.
rvb
->
SèπAddr
 && 
•u_c⁄fig
.
iU£Revîb
;

766 i‡(
do_rvb
)

767 
	`mem£t
(
RVB
, 0, 
ns_to
 * (RVB[0]) * 2);

769 
mask
 = 
•u
.
dwNewCh™√l
 & 0xffffff;

770 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1) {

771 i‡(
mask
 & 1)

772 
	`SèπSound
(
ch
);

775 
mask
 = 
•u
.
dwCh™√lOn
 & 0xffffff;

776 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1)

778 i‡(!(
mask
 & 1)) ;

780 
s_ch™
 = &
•u
.s_ch™[
ch
];

781 
SB
 = 
•u
.SB + 
ch
 * 
SB_SIZE
;

782 
söc
 = 
s_ch™
->sinc;

784 i‡(
s_ch™
->
bNoi£
)

785 
d
 = 
	`do_ßm∂es_noi£
(
ch
, 
ns_to
);

786 i‡(
s_ch™
->
bFMod
 == 2

787 || (
s_ch™
->
bFMod
 =0 && 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 == 0))

788 
d
 = 
	`do_ßm∂es_noöt
(
decode_block
, 
NULL
, 
ch
, 
ns_to
,

789 
SB
, 
söc
, &
s_ch™
->
•os
, &s_ch™->
iSBPos
);

790 i‡(
s_ch™
->
bFMod
 =0 && 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 == 1)

791 
d
 = 
	`do_ßm∂es_sim∂e
(
decode_block
, 
NULL
, 
ch
, 
ns_to
,

792 
SB
, 
söc
, &
s_ch™
->
•os
, &s_ch™->
iSBPos
);

794 
d
 = 
	`do_ßm∂es_deÁu…
(
decode_block
, 
NULL
, 
ch
, 
ns_to
,

795 
SB
, 
söc
, &
s_ch™
->
•os
, &s_ch™->
iSBPos
);

797 
d
 = 
	`MixADSR
(&
s_ch™
->
ADSRX
, d);

798 i‡(
d
 < 
ns_to
) {

799 
•u
.
dwCh™√lOn
 &~(1 << 
ch
);

800 
s_ch™
->
ADSRX
.
Envñ›eVﬁ
 = 0;

801 
	`mem£t
(&
Ch™Buf
[
d
], 0, (
ns_to
 - d) * (ChanBuf[0]));

804 i‡(
ch
 == 1 || ch == 3)

806 
	`do_decode_bufs
(
•u
.
•uMem
, 
ch
/2, 
ns_to
, spu.
decode_pos
);

807 
•u
.
decode_dúty_ch
 |1 << 
ch
;

810 i‡(
s_ch™
->
bFMod
 == 2)

811 
	`mem˝y
(
iFMod
, &
Ch™Buf
, 
ns_to
 * (iFMod[0]));

812 i‡(
s_ch™
->
bRVBA˘ive
 && 
do_rvb
)

813 
	`mix_ch™_rvb
(
•u
.
SSumLR
, 
ns_to
, 
s_ch™
->
iLe·Vﬁume
, s_ch™->
iRightVﬁume
, 
RVB
);

815 
	`mix_ch™
(
•u
.
SSumLR
, 
ns_to
, 
s_ch™
->
iLe·Vﬁume
, s_ch™->
iRightVﬁume
);

818 i‡(
•u
.
rvb
->
SèπAddr
) {

819 i‡(
do_rvb
)

820 
	`REVERBDo
(
•u
.
SSumLR
, 
RVB
, 
ns_to
, spu.
rvb
->
CuºAddr
);

822 
•u
.
rvb
->
CuºAddr
 +
ns_to
 / 2;

823 
•u
.
rvb
->
CuºAddr
 >= 0x40000)

824 
•u
.
rvb
->
CuºAddr
 -0x40000 - spu.rvb->
SèπAddr
;

826 
	}
}

828 
do_ßm∂es_föish
(*
SSumLR
, 
ns_to
,

829 
sûítch
, 
decode_pos
);

833 #i‡
deföed
(
THREAD_ENABLED
Ë|| deföed(
WANT_THREAD_CODE
)

836 
	s•u_w‹kî
 {

839 
	mexô_thªad
;

840 
	mi_ªady
;

841 
	mi_ª≠ed
;

842 
	mœ°_boŸ_˙t
;

843 
	møm_dúty
;

846 
	m_∑d0
[128/4];

850 
	mi_d⁄e
;

851 
	ma˘ive
;

852 
	mboŸ_˙t
;

854 
	m_∑d1
[128/4];

856 
	sw‹k_ôem
 {

857 
	mns_to
;

858 
	m˘æ
;

859 
	mdecode_pos
;

860 
	mrvb_addr
;

861 
	mch™√ls_√w
;

862 
	mch™√ls_⁄
;

863 
	mch™√ls_sûít
;

865 
	m•os
;

866 
	msbpos
;

867 
	msöc
;

868 
	m°¨t
;

869 
	mlo›
;

870 
	mns_to
;

871 
	mvﬁ_l
;

872 
	mvﬁ_r
;

873 
ADSRInfoEx
 
	mad§
;

875 } 
	mch
[24];

876 
	mSSumLR
[
NSSIZE
 * 2];

877 } 
	mi
[4];

878 } *
	gw‹kî
;

880 
	#WORK_MAXCNT
 ((
w‹kî
->
i
Ë/ (w‹kî->i[0]))

	)

881 
	#WORK_I_MASK
 (
WORK_MAXCNT
 - 1)

	)

883 
thªad_w‹k_°¨t
();

884 
thªad_w‹k_waô_sync
(
w‹k_ôem
 *
w‹k
, 
f‹˚
);

885 
thªad_sync_ˇches
();

886 
thªad_gë_i_d⁄e
();

888 
	$decode_block_w‹k
(*
c⁄ãxt
, 
ch
, *
SB
)

890 c⁄° *
øm
 = 
•u
.
•uMemC
;

891 
¥edi˘_ƒ
, 
shi·_Á˘‹
, 
Êags
;

892 
w‹k_ôem
 *
w‹k
 = 
c⁄ãxt
;

893 
°¨t
 = 
w‹k
->
ch
[ch].start;

894 
lo›
 = 
w‹k
->
ch
[ch].loop;

896 
¥edi˘_ƒ
 = 
øm
[
°¨t
];

897 
shi·_Á˘‹
 = 
¥edi˘_ƒ
 & 0xf;

898 
¥edi˘_ƒ
 >>= 4;

900 
	`decode_block_d©a
(
SB
, 
øm
 + 
°¨t
 + 2, 
¥edi˘_ƒ
, 
shi·_Á˘‹
);

902 
Êags
 = 
øm
[
°¨t
 + 1];

903 i‡(
Êags
 & 4)

904 
lo›
 = 
°¨t
;

906 
°¨t
 += 16;

908 i‡(
Êags
 & 1)

909 
°¨t
 = 
lo›
;

911 
w‹k
->
ch
[ch].
°¨t
 = start & 0x7ffff;

912 
w‹k
->
ch
[ch].
lo›
 =Üoop;

915 
	}
}

917 
	$queue_ch™√l_w‹k
(
ns_to
, 
sûítch
)

919 
w‹k_ôem
 *
w‹k
;

920 
SPUCHAN
 *
s_ch™
;

921 
mask
;

922 
ch
, 
d
;

924 
w‹k
 = &
w‹kî
->
i
[w‹kî->
i_ªady
 & 
WORK_I_MASK
];

925 
w‹k
->
ns_to
 =Çs_to;

926 
w‹k
->
˘æ
 = 
•u
.
•uCål
;

927 
w‹k
->
decode_pos
 = 
•u
.decode_pos;

928 
w‹k
->
ch™√ls_sûít
 = 
sûítch
;

930 
mask
 = 
w‹k
->
ch™√ls_√w
 = 
•u
.
dwNewCh™√l
 & 0xffffff;

931 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1) {

932 i‡(
mask
 & 1)

933 
	`SèπSoundMaö
(
ch
);

936 
mask
 = 
w‹k
->
ch™√ls_⁄
 = 
•u
.
dwCh™√lOn
 & 0xffffff;

937 
•u
.
decode_dúty_ch
 |
mask
 & 0x0a;

939 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1)

941 i‡(!(
mask
 & 1)) ;

943 
s_ch™
 = &
•u
.s_ch™[
ch
];

944 
w‹k
->
ch
[ch].
•os
 = 
s_ch™
->spos;

945 
w‹k
->
ch
[ch].
sbpos
 = 
s_ch™
->
iSBPos
;

946 
w‹k
->
ch
[ch].
söc
 = 
s_ch™
->sinc;

947 
w‹k
->
ch
[ch].
ad§
 = 
s_ch™
->
ADSRX
;

948 
w‹k
->
ch
[ch].
vﬁ_l
 = 
s_ch™
->
iLe·Vﬁume
;

949 
w‹k
->
ch
[ch].
vﬁ_r
 = 
s_ch™
->
iRightVﬁume
;

950 
w‹k
->
ch
[ch].
°¨t
 = 
s_ch™
->
pCuº
 - 
•u
.
•uMemC
;

951 
w‹k
->
ch
[ch].
lo›
 = 
s_ch™
->
pLo›
 - 
•u
.
•uMemC
;

952 i‡(
s_ch™
->
¥evÊags
 & 1)

953 
w‹k
->
ch
[ch].
°¨t
 = w‹k->ch[ch].
lo›
;

955 
d
 = 
	`do_ßm∂es_skù
(
ch
, 
ns_to
);

956 
w‹k
->
ch
[ch].
ns_to
 = 
d
;

959 
d
 = 
	`SkùADSR
(&
s_ch™
->
ADSRX
, d);

960 i‡(
d
 < 
ns_to
) {

961 
•u
.
dwCh™√lOn
 &~(1 << 
ch
);

962 
s_ch™
->
ADSRX
.
Envñ›eVﬁ
 = 0;

966 
w‹k
->
rvb_addr
 = 0;

967 i‡(
•u
.
rvb
->
SèπAddr
) {

968 i‡(
•u_c⁄fig
.
iU£Revîb
)

969 
w‹k
->
rvb_addr
 = 
•u
.
rvb
->
CuºAddr
;

971 
•u
.
rvb
->
CuºAddr
 +
ns_to
 / 2;

972 
•u
.
rvb
->
CuºAddr
 >= 0x40000)

973 
•u
.
rvb
->
CuºAddr
 -0x40000 - spu.rvb->
SèπAddr
;

976 
w‹kî
->
i_ªady
++;

977 
	`thªad_w‹k_°¨t
();

978 
	}
}

980 
	$do_ch™√l_w‹k
(
w‹k_ôem
 *
w‹k
)

982 
mask
;

983 
decode_dúty_ch
 = 0;

984 c⁄° 
SPUCHAN
 *
s_ch™
;

985 *
SB
, 
söc
, 
•os
, 
sbpos
;

986 
d
, 
ch
, 
ns_to
;

988 
ns_to
 = 
w‹k
->ns_to;

990 i‡(
w‹k
->
rvb_addr
)

991 
	`mem£t
(
RVB
, 0, 
ns_to
 * (RVB[0]) * 2);

993 
mask
 = 
w‹k
->
ch™√ls_√w
;

994 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1) {

995 i‡(
mask
 & 1)

996 
	`SèπSoundSB
(
•u
.
SB
 + 
ch
 * 
SB_SIZE
);

999 
mask
 = 
w‹k
->
ch™√ls_⁄
;

1000 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1)

1002 i‡(!(
mask
 & 1)) ;

1004 
d
 = 
w‹k
->
ch
[ch].
ns_to
;

1005 
•os
 = 
w‹k
->
ch
[ch].spos;

1006 
sbpos
 = 
w‹k
->
ch
[ch].sbpos;

1007 
söc
 = 
w‹k
->
ch
[ch].sinc;

1009 
s_ch™
 = &
•u
.s_ch™[
ch
];

1010 
SB
 = 
•u
.SB + 
ch
 * 
SB_SIZE
;

1012 i‡(
s_ch™
->
bNoi£
)

1013 
	`do_ls‰_ßm∂es
(
d
, 
w‹k
->
˘æ
, &
•u
.
dwNoi£Cou¡
, &•u.
dwNoi£VÆ
);

1014 i‡(
s_ch™
->
bFMod
 == 2

1015 || (
s_ch™
->
bFMod
 =0 && 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 == 0))

1016 
	`do_ßm∂es_noöt
(
decode_block_w‹k
, 
w‹k
, 
ch
, 
d
, 
SB
, 
söc
, &
•os
, &
sbpos
);

1017 i‡(
s_ch™
->
bFMod
 =0 && 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 == 1)

1018 
	`do_ßm∂es_sim∂e
(
decode_block_w‹k
, 
w‹k
, 
ch
, 
d
, 
SB
, 
söc
, &
•os
, &
sbpos
);

1020 
	`do_ßm∂es_deÁu…
(
decode_block_w‹k
, 
w‹k
, 
ch
, 
d
, 
SB
, 
söc
, &
•os
, &
sbpos
);

1022 
d
 = 
	`MixADSR
(&
w‹k
->
ch
[ch].
ad§
, d);

1023 i‡(
d
 < 
ns_to
) {

1024 
w‹k
->
ch
[ch].
ad§
.
Envñ›eVﬁ
 = 0;

1025 
	`mem£t
(&
Ch™Buf
[
d
], 0, (
ns_to
 - d) * (ChanBuf[0]));

1028 i‡(
ch
 == 1 || ch == 3)

1030 
	`do_decode_bufs
(
•u
.
•uMem
, 
ch
/2, 
ns_to
, 
w‹k
->
decode_pos
);

1031 
decode_dúty_ch
 |1 << 
ch
;

1034 i‡(
s_ch™
->
bFMod
 == 2)

1035 
	`mem˝y
(
iFMod
, &
Ch™Buf
, 
ns_to
 * (iFMod[0]));

1036 i‡(
s_ch™
->
bRVBA˘ive
 && 
w‹k
->
rvb_addr
)

1037 
	`mix_ch™_rvb
(
w‹k
->
SSumLR
, 
ns_to
,

1038 
w‹k
->
ch
[ch].
vﬁ_l
, w‹k->ch[ch].
vﬁ_r
, 
RVB
);

1040 
	`mix_ch™
(
w‹k
->
SSumLR
, 
ns_to
, w‹k->
ch
[ch].
vﬁ_l
, w‹k->ch[ch].
vﬁ_r
);

1043 i‡(
w‹k
->
rvb_addr
)

1044 
	`REVERBDo
(
w‹k
->
SSumLR
, 
RVB
, 
ns_to
, w‹k->
rvb_addr
);

1045 
	}
}

1047 
	$sync_w‹kî_thªad
(
f‹˚
)

1049 
w‹k_ôem
 *
w‹k
;

1050 
d⁄e
, 
u£d_•a˚
;

1053 
f‹˚
 |
•u
.
rvb
->
dúty
 && spu.rvb->
SèπAddr
;

1055 
d⁄e
 = 
	`thªad_gë_i_d⁄e
(Ë- 
w‹kî
->
i_ª≠ed
;

1056 
u£d_•a˚
 = 
w‹kî
->
i_ªady
 - w‹kî->
i_ª≠ed
;

1061 (
f‹˚
 && 
u£d_•a˚
 > 0Ë|| u£d_•a˚ >
WORK_MAXCNT
 || 
d⁄e
 > 0) {

1062 
w‹k
 = &
w‹kî
->
i
[w‹kî->
i_ª≠ed
 & 
WORK_I_MASK
];

1063 
	`thªad_w‹k_waô_sync
(
w‹k
, 
f‹˚
);

1065 
	`do_ßm∂es_föish
(
w‹k
->
SSumLR
, w‹k->
ns_to
,

1066 
w‹k
->
ch™√ls_sûít
, w‹k->
decode_pos
);

1068 
w‹kî
->
i_ª≠ed
++;

1069 
d⁄e
 = 
	`thªad_gë_i_d⁄e
(Ë- 
w‹kî
->
i_ª≠ed
;

1070 
u£d_•a˚
 = 
w‹kî
->
i_ªady
 - w‹kî->
i_ª≠ed
;

1072 i‡(
f‹˚
)

1073 
	`thªad_sync_ˇches
();

1074 
	}
}

1078 
	$queue_ch™√l_w‹k
(
ns_to
, 
sûítch
Ë{
	}
}

1079 
	$sync_w‹kî_thªad
(
f‹˚
Ë{
	}
}

1081 c⁄° * c⁄° 
	gw‹kî
 = 
NULL
;

1090 
	$do_ßm∂es
(
cy˛es_to
, 
do_dúe˘
)

1092 
sûítch
;

1093 
cy˛e_diff
;

1094 
ns_to
;

1096 
cy˛e_diff
 = 
cy˛es_to
 - 
•u
.
cy˛es_∂ayed
;

1097 i‡(
cy˛e_diff
 < -2*1048576 || cycle_diff > 2*1048576)

1100 
•u
.
cy˛es_∂ayed
 = 
cy˛es_to
;

1104 
sûítch
 = ~(
•u
.
dwCh™√lOn
 | spu.
dwNewCh™√l
) & 0xffffff;

1106 
do_dúe˘
 |(
sûítch
 == 0xffffff);

1107 i‡(
w‹kî
 !
NULL
)

1108 
	`sync_w‹kî_thªad
(
do_dúe˘
);

1110 i‡(
cy˛e_diff
 < 2 * 768)

1113 
ns_to
 = (
cy˛e_diff
 / 768 + 1) & ~1;

1114 i‡(
ns_to
 > 
NSSIZE
) {

1117 
ns_to
 = 
NSSIZE
;

1137 i‡(
	`u∆ikñy
((
•u
.
•uCål
 & 
CTRL_IRQ
)

1138 && 
•u
.
pSpuIrq
 < spu.
•uMemC
+0x1000))

1140 
úq_pos
 = (
•u
.
pSpuIrq
 - spu.
•uMemC
) / 2 & 0x1ff;

1141 
À·
 = (
úq_pos
 - 
•u
.
decode_pos
) & 0x1ff;

1142 i‡(0 < 
À·
 &&Üe· <
ns_to
)

1145 
	`do_úq
();

1149 i‡(
	`u∆ikñy
(
•u
.
rvb
->
dúty
))

1150 
	`REVERBPªp
();

1152 i‡(
do_dúe˘
 || 
w‹kî
 =
NULL
 || !
•u_c⁄fig
.
iU£Thªad
) {

1153 
	`do_ch™√ls
(
ns_to
);

1154 
	`do_ßm∂es_föish
(
•u
.
SSumLR
, 
ns_to
, 
sûítch
, spu.
decode_pos
);

1157 
	`queue_ch™√l_w‹k
(
ns_to
, 
sûítch
);

1162 i‡(
•u
.
•uCål
 & 
CTRL_IRQ
)

1163 
	`do_sûít_ch™s
(
ns_to
, 
sûítch
);

1165 
•u
.
cy˛es_∂ayed
 +
ns_to
 * 768;

1166 
•u
.
decode_pos
 = (•u.decode_po†+ 
ns_to
) & 0x1ff;

1167 
	}
}

1169 
	$do_ßm∂es_föish
(*
SSumLR
, 
ns_to
,

1170 
sûítch
, 
decode_pos
)

1172 
vﬁmu…
 = 
•u_c⁄fig
.
iVﬁume
;

1173 
ns
;

1174 
d
;

1177 if(
	`u∆ikñy
(
sûítch
 & 
•u
.
decode_dúty_ch
 & (1<<1)))

1179 
	`mem£t
(&
•u
.
•uMem
[0x800/2], 0, 0x400);

1180 
•u
.
decode_dúty_ch
 &= ~(1<<1);

1182 if(
	`u∆ikñy
(
sûítch
 & 
•u
.
decode_dúty_ch
 & (1<<3)))

1184 
	`mem£t
(&
•u
.
•uMem
[0xc00/2], 0, 0x400);

1185 
•u
.
decode_dúty_ch
 &= ~(1<<3);

1188 
	`MixXA
(
SSumLR
, 
ns_to
, 
decode_pos
);

1190 if((
•u
.
•uCål
&0x4000)==0)

1192 
	`mem£t
(
•u
.
pS
, 0, 
ns_to
 * 2 * (spu.pS[0]));

1193 
•u
.
pS
 +
ns_to
 * 2;

1196 
ns
 = 0;Ç†< 
ns_to
 * 2; )

1198 
d
 = 
SSumLR
[
ns
]; SSumLR[ns] = 0;

1199 
d
 = d * 
vﬁmu…
 >> 10;

1200 
	`sßt32_to_16
(
d
);

1201 *
•u
.
pS
++ = 
d
;

1202 
ns
++;

1204 
d
 = 
SSumLR
[
ns
]; SSumLR[ns] = 0;

1205 
d
 = d * 
vﬁmu…
 >> 10;

1206 
	`sßt32_to_16
(
d
);

1207 *
•u
.
pS
++ = 
d
;

1208 
ns
++;

1210 
	}
}

1212 
	$scheduÀ_√xt_úq
()

1214 
upd_ßm∂es
;

1215 
ch
;

1217 i‡(
•u
.
scheduÀCÆlback
 =
NULL
)

1221 
upd_ßm∂es
 = 44100 / 50;

1223 
ch
 = 0; ch < 
MAXCHAN
; ch++)

1225 i‡(
•u
.
dwCh™√lDód
 & (1 << 
ch
))

1227 i‡(()(
•u
.
pSpuIrq
 - spu.
s_ch™
[
ch
].
pCuº
Ë> 
IRQ_NEAR_BLOCKS
 * 16

1228 && ()(
•u
.
pSpuIrq
 - spu.
s_ch™
[
ch
].
pLo›
Ë> 
IRQ_NEAR_BLOCKS
 * 16)

1231 
	`sˇn_f‹_úq
(
ch
, &
upd_ßm∂es
);

1234 i‡(
	`u∆ikñy
(
•u
.
pSpuIrq
 < spu.
•uMemC
 + 0x1000))

1236 
úq_pos
 = (
•u
.
pSpuIrq
 - spu.
•uMemC
) / 2 & 0x1ff;

1237 
À·
 = (
úq_pos
 - 
•u
.
decode_pos
) & 0x1ff;

1238 i‡(0 < 
À·
 &&Üe· < 
upd_ßm∂es
) {

1240 
upd_ßm∂es
 = 
À·
;

1245 i‡(
upd_ßm∂es
 < 44100 / 50)

1246 
•u
.
	`scheduÀCÆlback
(
upd_ßm∂es
 * 768);

1247 
	}
}

1254 
CALLBACK
 
	$SPUasync
(
cy˛e
, 
Êags
)

1256 
	`do_ßm∂es
(
cy˛e
, 
•u_c⁄fig
.
iU£FixedUpd©es
);

1258 i‡(
•u
.
•uCål
 & 
CTRL_IRQ
)

1259 
	`scheduÀ_√xt_úq
();

1261 i‡(
Êags
 & 1) {

1262 
out_cuºít
->
	`„ed
(
•u
.
pSpuBuf„r
, (*)•u.
pS
 - spu.pSpuBuffer);

1263 
•u
.
pS
 = (*)•u.
pSpuBuf„r
;

1265 i‡(
•u_c⁄fig
.
iTempo
) {

1266 i‡(!
out_cuºít
->
	`busy
())

1269 
•u
.
cy˛es_∂ayed
 -= 44100 / 60 / 2 * 768;

1272 
	}
}

1276 
CALLBACK
 
	$SPU∂ayADPCMch™√l
(
xa_decode_t
 *
x≠
)

1278 
	`FìdXA
(
x≠
);

1279 
	}
}

1288 
CALLBACK
 
	$SPUgëADPCMBuf„rRoom
()

1290  
•u
.
XABuf„rRoom
;

1291 
	}
}

1295 
CALLBACK
 
	$SPU∂ayCDDAch™√l
(*
pcm
, 
nbyãs
)

1297 i‡(!
pcm
)  -1;

1298 i‡(
nbyãs
<=0)  -1;

1300  
	`FìdCDDA
((*)
pcm
, 
nbyãs
);

1301 
	}
}

1304 
	$CÀ¨W‹kögSèã
()

1306 
	`mem£t
(
iFMod
, 0, (iFMod));

1307 
•u
.
pS
=(*)•u.
pSpuBuf„r
;

1308 
	}
}

1311 
	$SëupSåóms
()

1313 
•u
.
pSpuBuf„r
 = (*)
	`mÆloc
(32768);

1314 
•u
.
SSumLR
 = 
	`ˇŒoc
(
NSSIZE
 * 2, (spu.SSumLR[0]));

1316 
•u
.
XASèπ
 =

1317 (
uöt32_t
 *)
	`mÆloc
(44100 * (uint32_t));

1318 
•u
.
XAEnd
 = spu.
XASèπ
 + 44100;

1319 
•u
.
XAPœy
 = spu.
XASèπ
;

1320 
•u
.
XAFìd
 = spu.
XASèπ
;

1322 
	`Upd©eXABuf„rRoom
();

1324 
•u
.
CDDASèπ
 =

1325 (
uöt32_t
 *)
	`mÆloc
(
CDDA_BUFFER_SIZE
);

1326 
•u
.
CDDAEnd
 = spu.
CDDASèπ
 + 16384;

1327 
•u
.
CDDAPœy
 = spu.
CDDASèπ
;

1328 
•u
.
CDDAFìd
 = spu.
CDDASèπ
;

1330 
	`CÀ¨W‹kögSèã
();

1331 
	}
}

1334 
	$RemoveSåóms
()

1336 
	`‰ì
(
•u
.
pSpuBuf„r
);

1337 
•u
.
pSpuBuf„r
 = 
NULL
;

1338 
	`‰ì
(
•u
.
SSumLR
);

1339 
•u
.
SSumLR
 = 
NULL
;

1340 
	`‰ì
(
•u
.
XASèπ
);

1341 
•u
.
XASèπ
 = 
NULL
;

1342 
	`‰ì
(
•u
.
CDDASèπ
);

1343 
•u
.
CDDASèπ
 = 
NULL
;

1344 
	}
}

1346 #i‡
deföed
(
C64X_DSP
)

1349 
	~"•u_c64x.c
"

1351 #ñi‡
deföed
(
THREAD_ENABLED
)

1353 
	~<±hªad.h
>

1354 
	~<£m≠h‹e.h
>

1355 
	~<uni°d.h
>

1358 
±hªad_t
 
	mthªad
;

1359 
£m_t
 
	m£m_avaû
;

1360 
£m_t
 
	m£m_d⁄e
;

1361 } 
	gt
;

1365 
	$thªad_w‹k_°¨t
()

1367 
	`£m_po°
(&
t
.
£m_avaû
);

1368 
	}
}

1370 
	$thªad_w‹k_waô_sync
(
w‹k_ôem
 *
w‹k
, 
f‹˚
)

1372 
	`£m_waô
(&
t
.
£m_d⁄e
);

1373 
	}
}

1375 
	$thªad_gë_i_d⁄e
()

1377  
w‹kî
->
i_d⁄e
;

1378 
	}
}

1380 
	$thªad_sync_ˇches
()

1382 
	}
}

1384 *
	$•u_w‹kî_thªad
(*
unu£d
)

1386 
w‹k_ôem
 *
w‹k
;

1389 
	`£m_waô
(&
t
.
£m_avaû
);

1390 i‡(
w‹kî
->
exô_thªad
)

1393 
w‹k
 = &
w‹kî
->
i
[w‹kî->
i_d⁄e
 & 
WORK_I_MASK
];

1394 
	`do_ch™√l_w‹k
(
w‹k
);

1395 
w‹kî
->
i_d⁄e
++;

1397 
	`£m_po°
(&
t
.
£m_d⁄e
);

1400  
NULL
;

1401 
	}
}

1403 
	$öô_•u_thªad
()

1405 
ªt
;

1414 
w‹kî
 = 
	`ˇŒoc
(1, (*worker));

1415 i‡(
w‹kî
 =
NULL
)

1417 
ªt
 = 
	`£m_öô
(&
t
.
£m_avaû
, 0, 0);

1418 i‡(
ªt
 != 0)

1419 
Áû_£m_avaû
;

1420 
ªt
 = 
	`£m_öô
(&
t
.
£m_d⁄e
, 0, 0);

1421 i‡(
ªt
 != 0)

1422 
Áû_£m_d⁄e
;

1424 
ªt
 = 
	`±hªad_¸óã
(&
t
.
thªad
, 
NULL
, 
•u_w‹kî_thªad
, NULL);

1425 i‡(
ªt
 != 0)

1426 
Áû_thªad
;

1428 
	`¥ötf
("Started spu_worker_thread()\n");

1430 
•u_c⁄fig
.
iThªadAvaû
 = 1;

1433 
Áû_thªad
:

1434 
	`£m_de°roy
(&
t
.
£m_d⁄e
);

1435 
Áû_£m_d⁄e
:

1436 
	`£m_de°roy
(&
t
.
£m_avaû
);

1437 
Áû_£m_avaû
:

1438 
	`‰ì
(
w‹kî
);

1439 
w‹kî
 = 
NULL
;

1440 
•u_c⁄fig
.
iThªadAvaû
 = 0;

1441 
	}
}

1443 
	$exô_•u_thªad
()

1445 i‡(
w‹kî
 =
NULL
)

1447 
w‹kî
->
exô_thªad
 = 1;

1448 
	`£m_po°
(&
t
.
£m_avaû
);

1449 
	`±hªad_joö
(
t
.
thªad
, 
NULL
);

1450 
	`£m_de°roy
(&
t
.
£m_d⁄e
);

1451 
	`£m_de°roy
(&
t
.
£m_avaû
);

1452 
	`‰ì
(
w‹kî
);

1453 
w‹kî
 = 
NULL
;

1454 
	}
}

1458 
	$öô_•u_thªad
()

1460 
	}
}

1462 
	$exô_•u_thªad
()

1464 
	}
}

1469 
CALLBACK
 
	$SPUöô
()

1471 
i
;

1473 
•u
.
•uMemC
 = 
	`ˇŒoc
(1, 512 * 1024);

1474 
	`InôADSR
();

1476 
•u
.
s_ch™
 = 
	`ˇŒoc
(
MAXCHAN
+1, (spu.s_chan[0]));

1477 
•u
.
rvb
 = 
	`ˇŒoc
(1, (
REVERBInfo
));

1478 
•u
.
SB
 = 
	`ˇŒoc
(
MAXCHAN
, (•u.SB[0]Ë* 
SB_SIZE
);

1480 
•u
.
•uAddr
 = 0;

1481 
•u
.
decode_pos
 = 0;

1482 
•u
.
pSpuIrq
 = spu.
•uMemC
;

1484 
	`SëupSåóms
();

1499 i‡(
•u_c⁄fig
.
iU£Thªad
)

1500 
	`öô_•u_thªad
();

1502 
i
 = 0; i < 
MAXCHAN
; i++)

1504 
•u
.
s_ch™
[
i
].
ADSRX
.
Su°aöLevñ
 = 0xf;

1505 
•u
.
s_ch™
[
i
].
ADSRX
.
Su°aöIn¸ó£
 = 1;

1506 
•u
.
s_ch™
[
i
].
pLo›
 = spu.
•uMemC
;

1507 
•u
.
s_ch™
[
i
].
pCuº
 = spu.
•uMemC
;

1510 
•u
.
bSpuInô
=1;

1513 
	}
}

1516 
CALLBACK
 
	$SPU›í
()

1518 i‡(
•u
.
bSPUIsO≥n
)  0;

1520 
	`SëupSound
();

1522 
•u
.
bSPUIsO≥n
 = 1;

1524  
PSE_SPU_ERR_SUCCESS
;

1525 
	}
}

1528 
CALLBACK
 
	$SPU˛o£
()

1530 i‡(!
•u
.
bSPUIsO≥n
)  0;

1532 
•u
.
bSPUIsO≥n
 = 0;

1534 
out_cuºít
->
	`föish
();

1537 
	}
}

1540 
CALLBACK
 
	$SPUshutdown
()

1542 
	`SPU˛o£
();

1544 
	`exô_•u_thªad
();

1546 
	`‰ì
(
•u
.
•uMemC
);

1547 
•u
.
•uMemC
 = 
NULL
;

1548 
	`‰ì
(
•u
.
SB
);

1549 
•u
.
SB
 = 
NULL
;

1550 
	`‰ì
(
•u
.
s_ch™
);

1551 
•u
.
s_ch™
 = 
NULL
;

1552 
	`‰ì
(
•u
.
rvb
);

1553 
•u
.
rvb
 = 
NULL
;

1555 
	`RemoveSåóms
();

1556 
•u
.
bSpuInô
=0;

1559 
	}
}

1562 
CALLBACK
 
	$SPUã°
()

1565 
	}
}

1568 
CALLBACK
 
	$SPUc⁄figuª
()

1570 #ifde‡
_MACOSX


1571 
	`DoC⁄figuøti⁄
();

1576 
	}
}

1579 
CALLBACK
 
	$SPUabout
()

1581 #ifde‡
_MACOSX


1582 
	`DoAbout
();

1586 
	}
}

1594 
CALLBACK
 
SPUªgi°îCÆlback
((CALLBACK *
ˇŒback
)())

1596 
•u
.
úqCÆlback
 = 
ˇŒback
;

1597 
	}
}

1601 
CALLBACK
 
SPUªgi°îScheduÀCb
((CALLBACK *
ˇŒback
)())

1603 
•u
.
scheduÀCÆlback
 = 
ˇŒback
;

1604 
	}
}

1607 
CALLBACK
 
SPUªgi°îCDDAVﬁume
((CALLBACK *
CDDAVˇŒback
)(,))

1609 
•u
.
cddavCÆlback
 = 
CDDAVˇŒback
;

1610 
	}
}

1637 
	$•u_gë_debug_öfo
(*
ch™s_out
, *
run_ch™s
, *
fmod_ch™s_out
, *
noi£_ch™s_out
)

1639 
ch
 = 0, 
fmod_ch™s
 = 0, 
noi£_ch™s
 = 0, 
úq_ch™s
 = 0;

1641 i‡(
•u
.
s_ch™
 =
NULL
)

1644 ;
ch
<
MAXCHAN
;ch++)

1646 i‡(!(
•u
.
dwCh™√lOn
 & (1<<
ch
)))

1648 i‡(
•u
.
s_ch™
[
ch
].
bFMod
 == 2)

1649 
fmod_ch™s
 |1 << 
ch
;

1650 i‡(
•u
.
s_ch™
[
ch
].
bNoi£
)

1651 
noi£_ch™s
 |1 << 
ch
;

1652 if((
•u
.
•uCål
&
CTRL_IRQ
Ë&& spu.
s_ch™
[
ch
].
pCuº
 <•u.
pSpuIrq
 && spu.s_ch™[ch].
pLo›
 <= spu.pSpuIrq)

1653 
úq_ch™s
 |1 << 
ch
;

1656 *
ch™s_out
 = 
•u
.
dwCh™√lOn
;

1657 *
run_ch™s
 = ~
•u
.
dwCh™√lOn
 & ~•u.
dwCh™√lDód
 & 
úq_ch™s
;

1658 *
fmod_ch™s_out
 = 
fmod_ch™s
;

1659 *
noi£_ch™s_out
 = 
noi£_ch™s
;

1660 
	}
}

	@src/spu/spu_pcsxrearmed/spu.h

18 
CÀ¨W‹kögSèã
();

19 
CALLBACK
 
SPU∂ayADPCMch™√l
(
xa_decode_t
 *
x≠
);

20 
CALLBACK
 
SPU∂ayCDDAch™√l
(*
pcm
, 
byãs
);

	@src/spu/spu_pcsxrearmed/spu_c64x.c

24 
	~<dlf˙.h
>

25 
	~<°ddef.h
>

26 
	~<uni°d.h
>

28 
	~<öc_libc64_möi.h
>

29 
	~"•u_c64x.h
"

32 *
	mh™dÀ
;

33 (*
	md•_›í
)();

34 
d•_mem_ªgi⁄_t
 (*
d•_shm_Æloc
)(
d•_ˇche_t
 
	m_ty≥
, 
sU32
 
	m_numByãs
);

35 (*
	md•_shm_‰ì
)(
d•_mem_ªgi⁄_t
 
	m_mem
);

36 (*
	md•_˛o£
)();

37 (*
	md•_comp⁄ít_lﬂd
)(c⁄° *
	m_∑th
, c⁄° *
	m_«me
, 
d•_comp⁄ít_id_t
 *
	m_id
);

38 (*
	md•_ˇche_öv_vút
)(*
	m_vútAddr
, 
sU32
 
	m_size
);

39 (*
	md•_Ωc_£nd
)(c⁄° 
d•_msg_t
 *
	m_msgTo
);

40 (*
	md•_Ωc_ªcv
)(
d•_msg_t
 *
	m_msgFrom
);

41 (*
	md•_Ωc
)(c⁄° 
d•_msg_t
 *
	m_msgTo
, d•_msg_à*
	m_msgFrom
);

42 (*
	md•_logbuf_¥öt
)();

44 
d•_mem_ªgi⁄_t
 
	mªgi⁄
;

45 
d•_comp⁄ít_id_t
 
	mcompid
;

46 
	m°Æe_ˇches
:1;

47 
	mªq_£¡
:1;

48 } 
	gf
;

50 
noölöe
 
	$d•_Áu…
()

52 
d•_msg_t
 
msg
;

54 
f
.
	`d•_ˇche_öv_vút
(
w‹kî
, (*worker));

55 
	`¥ötf
("dsp crash/fault/corruption:\n");

56 
	`¥ötf
("stateÑdy/reap/done: %u %u %u\n",

57 
w‹kî
->
i_ªady
, w‹kî->
i_ª≠ed
, w‹kî->
i_d⁄e
);

58 
	`¥ötf
("active/boot: %u %u\n",

59 
w‹kî
->
a˘ive
, w‹kî->
boŸ_˙t
);

61 i‡(
f
.
ªq_£¡
) {

62 
f
.
	`d•_Ωc_ªcv
(&
msg
);

63 
f
.
ªq_£¡
 = 0;

65 
f
.
	`d•_logbuf_¥öt
();

66 
•u_c⁄fig
.
iU£Thªad
 = 0;

67 
	}
}

69 
	$thªad_w‹k_°¨t
()

71 
ªgi⁄_mem
 *
mem
;

72 
d•_msg_t
 
msg
;

73 
ªt
;

76 
	`__sync_synchr⁄ize
();

81 
f
.
	`d•_ˇche_öv_vút
(&
w‹kî
->
i_d⁄e
, 64);

82 i‡(
w‹kî
->
a˘ive
 =
ACTIVE_CNT
)

87 i‡(
f
.
ªq_£¡
) {

88 i‡(
w‹kî
->
boŸ_˙t
 =w‹kî->
œ°_boŸ_˙t
) {

94 
ªt
 = 
f
.
	`d•_Ωc_ªcv
(&
msg
);

95 i‡(
ªt
 != 0) {

96 
	`Ârötf
(
°dîr
, "d•_Ωc_ªcv faûed: %d\n", 
ªt
);

97 
f
.
	`d•_logbuf_¥öt
();

98 
f
.
ªq_£¡
 = 0;

99 
•u_c⁄fig
.
iU£Thªad
 = 0;

104 
f
.
	`d•_ˇche_öv_vút
(&
w‹kî
->
i_d⁄e
, 64);

105 
w‹kî
->
œ°_boŸ_˙t
 = w‹kî->
boŸ_˙t
;

106 
w‹kî
->
øm_dúty
 = 
•u
.
bMemDúty
;

107 
•u
.
bMemDúty
 = 0;

109 
mem
 = (*)
f
.
ªgi⁄
.
vút_addr
;

110 
	`mem˝y
(&
mem
->
ö
.
•u_c⁄fig
, &spu_config, (mem->in.spu_config));

112 
	`DSP_MSG_INIT
(&
msg
, 
f
.
compid
, 
CCMD_DOIT
, f.
ªgi⁄
.
phys_addr
, 0);

113 
ªt
 = 
f
.
	`d•_Ωc_£nd
(&
msg
);

114 i‡(
ªt
 != 0) {

115 
	`Ârötf
(
°dîr
, "d•_Ωc_£nd faûed: %d\n", 
ªt
);

116 
f
.
	`d•_logbuf_¥öt
();

117 
•u_c⁄fig
.
iU£Thªad
 = 0;

120 
f
.
ªq_£¡
 = 1;

123 
f
.
	`d•_Ωc_ªcv
(&
msg
);

124 
f
.
ªq_£¡
 = 0;

126 
	}
}

128 
	$thªad_gë_i_d⁄e
()

130 
f
.
	`d•_ˇche_öv_vút
(&
w‹kî
->
i_d⁄e
, (worker->i_done));

131  
w‹kî
->
i_d⁄e
;

132 
	}
}

134 
	$thªad_w‹k_waô_sync
(
w‹k_ôem
 *
w‹k
, 
f‹˚
)

136 
limô
 = 1000;

137 
ns_to
;

139 i‡(()(
w‹kî
->
i_d⁄e
 - w‹kî->
i_ª≠ed
Ë> 
WORK_MAXCNT
) {

140 
	`d•_Áu…
();

144 
w‹kî
->
i_d⁄e
 =w‹kî->
i_ª≠ed
 && 
limô
-- > 0) {

145 i‡(!
f
.
ªq_£¡
) {

146 
	`¥ötf
("dsp:ÑeqÇot sent?\n");

150 i‡(
w‹kî
->
boŸ_˙t
 !w‹kî->
œ°_boŸ_˙t
 && !w‹kî->
a˘ive
) {

151 
	`¥ötf
("dsp: broken sync\n");

152 
w‹kî
->
œ°_boŸ_˙t
 = ~0;

156 
	`u¶ìp
(500);

157 
f
.
	`d•_ˇche_öv_vút
(&
w‹kî
->
i_d⁄e
, 64);

160 
ns_to
 = 
w‹k
->ns_to;

161 
f
.
	`d•_ˇche_öv_vút
(
w‹k
->
SSumLR
, (w‹k->SSumLR[0]Ë* 2 * 
ns_to
);

162 
	`¥ñﬂd
(
w‹k
->
SSumLR
);

163 
	`¥ñﬂd
(
w‹k
->
SSumLR
 + 64/4);

165 
f
.
°Æe_ˇches
 = 1;

167 i‡(
limô
 == 0)

168 
	`¥ötf
("dsp: waitÅimeout\n");

171 i‡(
w‹kî
->
i_ª≠ed
 !w‹kî->
i_d⁄e
 - 1)

174 i‡(
f
.
ªq_£¡
 && (
f‹˚
 || 
w‹kî
->
i_d⁄e
 =w‹kî->
i_ªady
)) {

175 
d•_msg_t
 
msg
;

176 
ªt
;

178 
ªt
 = 
f
.
	`d•_Ωc_ªcv
(&
msg
);

179 i‡(
ªt
 != 0) {

180 
	`Ârötf
(
°dîr
, "d•_Ωc_ªcv faûed: %d\n", 
ªt
);

181 
f
.
	`d•_logbuf_¥öt
();

182 
•u_c⁄fig
.
iU£Thªad
 = 0;

184 
f
.
ªq_£¡
 = 0;

186 
	}
}

188 
	$thªad_sync_ˇches
()

190 i‡(
f
.
°Æe_ˇches
) {

191 
f
.
	`d•_ˇche_öv_vút
(
•u
.
SB
, (•u.SB[0]Ë* 
SB_SIZE
 * 24);

192 
f
.
	`d•_ˇche_öv_vút
(
•u
.
•uMemC
 + 0x800, 0x800);

193 i‡(
•u
.
rvb
->
SèπAddr
) {

194 
À·
 = 0x40000 - 
•u
.
rvb
->
SèπAddr
;

195 
f
.
	`d•_ˇche_öv_vút
(
•u
.
•uMem
 + spu.
rvb
->
SèπAddr
, 
À·
 * 2);

197 
f
.
°Æe_ˇches
 = 0;

199 
	}
}

201 
	$öô_•u_thªad
()

203 
d•_msg_t
 
öô_msg
, 
msg_ö
;

204 
ªgi⁄_mem
 *
mem
;

205 
ªt
;

207 i‡(
f
.
h™dÀ
 =
NULL
) {

208 c⁄° 
lib
[] = "libc64.so.1";

209 
Áûed
 = 0;

211 
f
.
h™dÀ
 = 
	`dl›í
(
lib
, 
RTLD_NOW
);

212 i‡(
f
.
h™dÀ
 =
NULL
) {

213 
	`Ârötf
(
°dîr
, "ˇn'àlﬂd %s: %s\n", 
lib
, 
	`dÀº‹
());

214 
Áû_›í
;

216 
	#LDS
(
«me
) \

217 
Áûed
 |(
f
.
«me
 = 
	`dlsym
(f.
h™dÀ
, #«me)Ë=
NULL


	)

218 
	`LDS
(
d•_›í
);

219 
	`LDS
(
d•_˛o£
);

220 
	`LDS
(
d•_shm_Æloc
);

221 
	`LDS
(
d•_shm_‰ì
);

222 
	`LDS
(
d•_ˇche_öv_vút
);

223 
	`LDS
(
d•_comp⁄ít_lﬂd
);

224 
	`LDS
(
d•_Ωc_£nd
);

225 
	`LDS
(
d•_Ωc_ªcv
);

226 
	`LDS
(
d•_Ωc
);

227 
	`LDS
(
d•_logbuf_¥öt
);

228 #unde‡
LDS


229 i‡(
Áûed
) {

230 
	`Ârötf
(
°dîr
, "missög symbﬁ(sËö %s\n", 
lib
);

231 
	`dl˛o£
(
f
.
h™dÀ
);

232 
f
.
h™dÀ
 = 
NULL
;

233 
Áû_›í
;

237 
ªt
 = 
f
.
	`d•_›í
();

238 i‡(
ªt
 != 0) {

239 
	`Ârötf
(
°dîr
, "d•_›í faûed: %d\n", 
ªt
);

240 
Áû_›í
;

243 
ªt
 = 
f
.
	`d•_comp⁄ít_lﬂd
(
NULL
, 
COMPONENT_NAME
, &f.
compid
);

244 i‡(
ªt
 != 0) {

245 
	`Ârötf
(
°dîr
, "d•_comp⁄ít_lﬂd faûed: %d\n", 
ªt
);

246 
Áû_˛ﬂd
;

249 
f
.
ªgi⁄
 = f.
	`d•_shm_Æloc
(
DSP_CACHE_R
, (*
mem
));

250 i‡(
f
.
ªgi⁄
.
size
 < (*
mem
Ë|| f.ªgi⁄.
vút_addr
 == 0) {

251 
	`Ârötf
(
°dîr
, "dsp_shm_alloc failed\n");

252 
Áû_mem
;

254 
mem
 = (*)
f
.
ªgi⁄
.
vút_addr
;

256 
	`mem˝y
(&
mem
->
ö
.
•u_c⁄fig
, &spu_config, (mem->in.spu_config));

258 
	`DSP_MSG_INIT
(&
öô_msg
, 
f
.
compid
, 
CCMD_INIT
, f.
ªgi⁄
.
phys_addr
, 0);

259 
ªt
 = 
f
.
	`d•_Ωc
(&
öô_msg
, &
msg_ö
);

260 i‡(
ªt
 != 0) {

261 
	`Ârötf
(
°dîr
, "d•_Ω¯Áûed: %d\n", 
ªt
);

262 
Áû_öô
;

265 i‡(
mem
->
sizeof_ªgi⁄_mem
 != (*mem)) {

266 
	`Ârötf
(
°dîr
, "error: size mismatch 1: %d vs %zd\n",

267 
mem
->
sizeof_ªgi⁄_mem
, (*mem));

268 
Áû_öô
;

270 i‡(
mem
->
off£tof_s_ch™1
 !
	`off£tof
(
	`ty≥of
(*mem), 
ö
.
s_ch™
[1])) {

271 
	`Ârötf
(
°dîr
, "error: size mismatch 2: %d vs %zd\n",

272 
mem
->
off£tof_s_ch™1
, 
	`off£tof
(
	`ty≥of
(*mem), 
ö
.
s_ch™
[1]));

273 
Áû_öô
;

275 i‡(
mem
->
off£tof_•os_3_20
 !
	`off£tof
(
	`ty≥of
(*mem), 
w‹kî
.
i
[3].
ch
[20])) {

276 
	`Ârötf
(
°dîr
, "error: size mismatch 3: %d vs %zd\n",

277 
mem
->
off£tof_•os_3_20
, 
	`off£tof
(
	`ty≥of
(*mem), 
w‹kî
.
i
[3].
ch
[20]));

278 
Áû_öô
;

282 
	`‰ì
(
•u
.
•uMemC
);

283 
•u
.
•uMemC
 = 
mem
->
•u_øm
;

284 
	`‰ì
(
•u
.
SB
);

285 
•u
.
SB
 = 
mem
->SB;

286 
	`‰ì
(
•u
.
s_ch™
);

287 
•u
.
s_ch™
 = 
mem
->
ö
.s_chan;

288 
	`‰ì
(
•u
.
rvb
);

289 
•u
.
rvb
 = &
mem
->
ö
.rvb;

290 
w‹kî
 = &
mem
->worker;

292 
	`¥ötf
("•u: C64x DSPÑódy (id=%d).\n", ()
f
.
compid
);

293 
f
.
	`d•_logbuf_¥öt
();

295 
•u_c⁄fig
.
iThªadAvaû
 = 1;

296 ()
do_ch™√l_w‹k
;

299 
Áû_öô
:

300 
f
.
	`d•_shm_‰ì
(f.
ªgi⁄
);

301 
Áû_mem
:

303 
Áû_˛ﬂd
:

304 
f
.
	`d•_logbuf_¥öt
();

305 
f
.
	`d•_˛o£
();

306 
Áû_›í
:

307 
	`¥ötf
("spu: C64x DSP init failed.\n");

308 
•u_c⁄fig
.
iU£Thªad
 = spu_c⁄fig.
iThªadAvaû
 = 0;

309 
w‹kî
 = 
NULL
;

310 
	}
}

312 
	$exô_•u_thªad
()

314 
d•_msg_t
 
msg
;

316 i‡(
w‹kî
 =
NULL
)

319 i‡(
f
.
ªq_£¡
) {

320 
f
.
	`d•_Ωc_ªcv
(&
msg
);

321 
f
.
ªq_£¡
 = 0;

324 
f
.
	`d•_logbuf_¥öt
();

325 
f
.
	`d•_shm_‰ì
(f.
ªgi⁄
);

326 
f
.
	`d•_˛o£
();

328 
•u
.
•uMemC
 = 
NULL
;

329 
•u
.
SB
 = 
NULL
;

330 
•u
.
s_ch™
 = 
NULL
;

331 
•u
.
rvb
 = 
NULL
;

332 
w‹kî
 = 
NULL
;

333 
	}
}

337 
ªgi⁄_mem
 *
	gdbg_d•_mem
;

339 
	$dbg_d•_mem_upd©e
()

341 
ªgi⁄_mem
 *
mem
;

343 i‡(
dbg_d•_mem
 =
NULL
)

344 
dbg_d•_mem
 = 
	`mÆloc
((*dbg_dsp_mem));

345 i‡(
dbg_d•_mem
 =
NULL
)

348 
mem
 = (*)
f
.
ªgi⁄
.
vút_addr
;

349 
f
.
	`d•_ˇche_öv_vút
(
mem
, (*mem));

350 
	`mem˝y
(
dbg_d•_mem
, 
mem
, (*dbg_dsp_mem));

351 
	}
}

	@src/spu/spu_pcsxrearmed/spu_c64x.h

1 
	#COMPONENT_NAME
 "pcsxr_•u"

	)

4 
	mCCMD_INIT
 = 0x101,

5 
	mCCMD_DOIT
 = 0x102,

8 
	sªgi⁄_mem
 {

9 
	m•u_øm
[512 * 1024];

10 
	mSB
[
SB_SIZE
 * 24];

13 
	m_∑d1
[128/4 - ((
SB_SIZE
 * 24) & (128/4 - 1))];

14 
	s•u_ö
 {

16 
SPUCHAN
 
	ms_ch™
[24 + 1];

17 
REVERBInfo
 
	mrvb
;

18 
SPUC⁄fig
 
	m•u_c⁄fig
;

19 } 
	mö
;

20 
	m_∑d2
[128/4 - (((
•u_ö
) / 4) & (128/4 - 1))];

21 
•u_w‹kî
 
	mw‹kî
;

23 
	msizeof_ªgi⁄_mem
;

24 
	moff£tof_s_ch™1
;

25 
	moff£tof_•os_3_20
;

28 
	#ACTIVE_CNT
 3

	)

	@src/spu/spu_pcsxrearmed/spu_c64x_dspcode.c

24 
	#SYSCALLS_C


	)

25 
	~<libc64_d•/ö˛ude/öc_ovîœy.h
>

26 
	~<°ddef.h
>

28 
	~"•u.c
"

29 
	~"•u_c64x.h
"

32 
	$thªad_w‹k_°¨t
(Ë{
	}
}

33 
	$thªad_w‹k_waô_sync
(
w‹k_ôem
 *
w‹k
, 
f‹˚
Ë{
	}
}

34 
	$thªad_sync_ˇches
(Ë{
	}
}

35 
	$thªad_gë_i_d⁄e
(Ë{  0; 
	}
}

36 
out_drivî
 *
	gout_cuºít
;

37 
	$SëupSound
(Ë{
	}
}

40 
	$íabÀ_l2_ˇche
()

42 vﬁ©ûê
uöt32_t
 *
L2CFG
 = (volatile uint32_t *)0x01840000;

43 
uöt32_t
 *
MARi
 = (*)0x01848000;

44 
i
;

50 
i
 = 0x10; i < 0x80; i++)

51 
MARi
[
i
] = 0;

53  ; 
i
 < 0xa0; i++)

54 
MARi
[
i
] = 1;

56  ; 
i
 < 0x100; i++)

57 
MARi
[
i
] = 0;

60 i‡(!(*
L2CFG
 & 2)) {

61 *
L2CFG
 = 2;

63 *
L2CFG
;

65 
	}
}

67 
	$övÆid©e_ˇche
(
w‹k_ôem
 *
w‹k
)

71 
sysˇŒs
.
	`ˇche_öv
(
•u
.
s_ch™
, (spu.s_chan[0]) * 24, 1);

72 
sysˇŒs
.
	`ˇche_öv
(
w‹k
->
SSumLR
,

73 (
w‹k
->
SSumLR
[0]Ë* 2 * w‹k->
ns_to
, 1);

74 
	}
}

76 
	$wrôeout_ˇche
(
w‹k_ôem
 *
w‹k
)

78 
ns_to
 = 
w‹k
->ns_to;

80 
sysˇŒs
.
	`ˇche_wb
(
w‹k
->
SSumLR
, (w‹k->SSumLR[0]Ë* 2 * 
ns_to
, 1);

83 
sysˇŒs
.
	`ˇche_öv
(
w‹k
, 
	`off£tof
(
	`ty≥of
(*w‹k), 
SSumLR
), 1);

84 
	}
}

86 
	$do_¥o˚ssög
()

88 
À·
, 
dúty
 = 0, 
had_rvb
 = 0;

89 
w‹k_ôem
 *
w‹k
;

91 
w‹kî
->
a˘ive
)

94 
sysˇŒs
.
	`ˇche_öv
(
w‹kî
, 64, 1);

96 
À·
 = 
w‹kî
->
i_ªady
 - w‹kî->
i_d⁄e
;

97 i‡(
À·
 > 0) {

98 
dúty
 = 1;

99 
w‹kî
->
a˘ive
 = 
ACTIVE_CNT
;

100 
sysˇŒs
.
	`ˇche_wb
(&
w‹kî
->
a˘ive
, 4, 1);

102 
w‹k
 = &
w‹kî
->
i
[w‹kî->
i_d⁄e
 & 
WORK_I_MASK
];

103 
	`övÆid©e_ˇche
(
w‹k
);

104 
had_rvb
 |
w‹k
->
rvb_addr
;

105 
•u
.
•uCål
 = 
w‹k
->
˘æ
;

106 
	`do_ch™√l_w‹k
(
w‹k
);

107 
	`wrôeout_ˇche
(
w‹k
);

109 
w‹kî
->
i_d⁄e
++;

110 
sysˇŒs
.
	`ˇche_wb
(&
w‹kî
->
i_d⁄e
, 4, 1);

115 i‡(
dúty
) {

116 
sysˇŒs
.
	`ˇche_wb
(
•u
.
•uMemC
 + 0x800, 0x800, 1);

117 
sysˇŒs
.
	`ˇche_wb
(
•u
.
SB
, (•u.SB[0]Ë* 
SB_SIZE
 * 24, 1);

118 i‡(
had_rvb
) {

119 
À·
 = 0x40000 - 
•u
.
rvb
->
SèπAddr
;

120 
sysˇŒs
.
	`ˇche_wb
(
•u
.
•uMem
 + spu.
rvb
->
SèπAddr
, 
À·
 * 2, 1);

121 
had_rvb
 = 0;

123 
dúty
 = 0;

129 
w‹kî
->
a˘ive
--;

130 
sysˇŒs
.
	`ˇche_wb
(&
w‹kî
->
a˘ive
, 4, 1);

132 
	}
}

134 
	$exec
(
d•_comp⁄ít_cmd_t
 
cmd
,

135 
¨g1
, 
¨g2
,

136 *
ªt1
, *
ªt2
)

138 
ªgi⁄_mem
 *
mem
 = (*)
¨g1
;

140 
cmd
) {

141 
CCMD_INIT
:

142 
	`íabÀ_l2_ˇche
();

143 
	`InôADSR
();

145 
•u
.
•uMemC
 = 
mem
->
•u_øm
;

146 
•u
.
SB
 = 
mem
->SB;

147 
•u
.
s_ch™
 = 
mem
->
ö
.s_chan;

148 
•u
.
rvb
 = &
mem
->
ö
.rvb;

149 
w‹kî
 = &
mem
->worker;

150 
	`mem˝y
(&
•u_c⁄fig
, &
mem
->
ö
.spu_config, (spu_config));

152 
mem
->
sizeof_ªgi⁄_mem
 = (*mem);

153 
mem
->
off£tof_s_ch™1
 = 
	`off£tof
(
	`ty≥of
(*mem), 
ö
.
s_ch™
[1]);

154 
mem
->
off£tof_•os_3_20
 = 
	`off£tof
(
	`ty≥of
(*mem), 
w‹kî
.
i
[3].
ch
[20]);

156 
sysˇŒs
.
	`ˇche_wb
(&
mem
->
sizeof_ªgi⁄_mem
, 3 * 4, 1);

159 
CCMD_DOIT
:

160 
w‹kî
->
a˘ive
 = 
ACTIVE_CNT
;

161 
w‹kî
->
boŸ_˙t
++;

162 
sysˇŒs
.
	`ˇche_öv
(
w‹kî
, 128, 1);

163 
sysˇŒs
.
	`ˇche_wb
(&
w‹kî
->
i_d⁄e
, 128, 1);

164 
	`mem˝y
(&
•u_c⁄fig
, &
mem
->
ö
.spu_config, (spu_config));

166 i‡(
w‹kî
->
øm_dúty
)

168 
sysˇŒs
.
	`ˇche_wbInvAŒ
();

170 
	`do_¥o˚ssög
();

172 
sysˇŒs
.
	`ˇche_öv
(&
mem
->
SB
, (mem->SB), 0);

173 
sysˇŒs
.
	`ˇche_öv
(&
mem
->
ö
, (mem->in), 0);

177 
sysˇŒs
.
	`¥ötf
("bad cmd: %x\n", 
cmd
);

182 
	}
}

184 #¥agm®
DATA_SECTION
(
comp⁄ít_ã°_d•
, ".sec_com");

185 
d•_comp⁄ít_t
 
	gcomp⁄ít_ã°_d•
 = {

187 
NULL
,

188 
exec
,

189 
NULL
,

190 
NULL
,

193 
COMPONENT_NAME
,

196 
	gDSP_COMPONENT_MAIN


	@src/spu/spu_pcsxrearmed/spu_config.h

1 #i‚de‡
SPU_CONFIG_H


2 
	#SPU_CONFIG_H


	)

7 
	miVﬁume
;

8 
	miXAPôch
;

9 
	miU£Revîb
;

10 
	miU£I¡îpﬁ©i⁄
;

11 
	miTempo
;

12 
	miU£Thªad
;

13 
	miU£FixedUpd©es
;

16 
	miThªadAvaû
;

19 
	miDißbÀd
;

22 
	miHaveC⁄figuøti⁄
;

23 } 
	tSPUC⁄fig
;

25 
SPUC⁄fig
 
•u_c⁄fig
;

	@src/spu/spu_pcsxrearmed/stdafx.h

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 #ifde‡
_WIN32


23 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<wödows.h
>

26 #unde‡
CALLBACK


27 
	#CALLBACK


	)

28 
	#DWORD
 

	)

29 
	#LOWORD
(
l
Ë(()÷))

	)

30 
	#HIWORD
(
l
Ë(()((()÷Ë>> 16Ë& 0xFFFF))

	)

33 #i‚de‡
INLINE


34 
	#INLINE
 
ölöe


	)

37 
	~"p£muxa.h
"

	@src/spu/spu_pcsxrearmed/xa.c

18 
	~"°dafx.h
"

19 
	#_IN_XA


	)

20 
	~<°döt.h
>

23 #ifde‡
_IN_SPU


28 
	ggauss_±r
 = 0;

29 
	ggauss_wödow
[8] = {0, 0, 0, 0, 0, 0, 0, 0};

31 
	#gvÆl0
 
gauss_wödow
[
gauss_±r
]

	)

32 
	#gvÆl
(
x
Ë
gauss_wödow
[(
gauss_±r
+x)&3]

	)

33 
	#gvÆr0
 
gauss_wödow
[4+
gauss_±r
]

	)

34 
	#gvÆr
(
x
Ë
gauss_wödow
[4+((
gauss_±r
+x)&3)]

	)

51 
INLINE
 
	$Upd©eXABuf„rRoom
()

53 
xa_buf_size
 = 
•u
.
XAEnd
-•u.
XASèπ
;

54 
xa_u£d_•a˚
 = 
•u
.
XAFìd
 - spu.
XAPœy
;

55 i‡(
xa_u£d_•a˚
 < 0)

56 
xa_u£d_•a˚
 +
xa_buf_size
;

58 
xa_unu£d_•a˚
 = 
xa_buf_size
 - 
xa_u£d_•a˚
;

59 
•u
.
XABuf„rRoom
 = 
xa_unu£d_•a˚
;

60 
	}
}

66 
INLINE
 
	$MixXA
(*
SSumLR
, 
ns_to
, 
decode_pos
)

68 
curs‹
 = 
decode_pos
;

69 
ns
;

70 
l
, 
r
;

71 
uöt32_t
 
v
;

73 if(
•u
.
XAPœy
 !•u.
XAFìd
 || spu.
XARïót
 > 0)

75 if(
•u
.
XAPœy
 =•u.
XAFìd
)

76 
•u
.
XARïót
--;

78 
v
 = 
•u
.
XALa°VÆ
;

79 
ns
 = 0;Ç†< 
ns_to
*2; )

81 if(
•u
.
XAPœy
 !•u.
XAFìd
Ë
v
=*spu.XAPlay++;

82 if(
•u
.
XAPœy
 =•u.
XAEnd
Ë•u.XAPœy=•u.
XASèπ
;

84 
l
 = (()()
v
 * 
•u
.
iLe·XAVﬁ
) >> 15;

85 
r
 = (()()(
v
 >> 16Ë* 
•u
.
iLe·XAVﬁ
) >> 15;

86 
SSumLR
[
ns
++] +
l
;

87 
SSumLR
[
ns
++] +
r
;

89 
•u
.
•uMem
[
curs‹
] = 
v
;

90 
•u
.
•uMem
[
curs‹
 + 0x400/2] = 
v
 >> 16;

91 
curs‹
 = (cursor + 1) & 0x1ff;

93 
•u
.
XALa°VÆ
 = 
v
;

96 
ns
 = 0;Ç†< 
ns_to
 * 2 && 
•u
.
CDDAPœy
!=•u.
CDDAFìd
 && (•u.CDDAPœy!=•u.
CDDAEnd
-1||•u.CDDAFìd!=•u.
CDDASèπ
);)

98 
v
=*
•u
.
CDDAPœy
++;

99 if(
•u
.
CDDAPœy
==•u.
CDDAEnd
Ë•u.CDDAPœy=•u.
CDDASèπ
;

101 
l
 = (()()
v
 * 
•u
.
iLe·XAVﬁ
) >> 15;

102 
r
 = (()()(
v
 >> 16Ë* 
•u
.
iLe·XAVﬁ
) >> 15;

103 
SSumLR
[
ns
++] +
l
;

104 
SSumLR
[
ns
++] +
r
;

106 
•u
.
•uMem
[
curs‹
] = 
v
;

107 
•u
.
•uMem
[
curs‹
 + 0x400/2] = 
v
 >> 16;

108 
curs‹
 = (cursor + 1) & 0x1ff;

112 
	`Upd©eXABuf„rRoom
();

113 
	}
}

119 
	$timeGëTime_•u
()

121 #i‡
	`deföed
(
NO_OS
)

123 #ñi‡
	`deföed
(
_WIN32
)

124  
	`GëTickCou¡
();

126 
timevÆ
 
tv
;

127 
	`gëtimeofday
(&
tv
, 0);

128  
tv
.
tv_£c
 * 1000 +Åv.
tv_u£c
/1000;

130 
	}
}

138 
INLINE
 
	$FìdXA
(
xa_decode_t
 *
x≠
)

140 i‡((!
x≠
Ë|| (x≠->
nßm∂es
 =0Ë|| (x≠->
‰eq
 == 0))

143 
söc
,
•os
,
i
,
iSize
,
iPœ˚
,
vl
,
vr
;

145 if(!
•u
.
bSPUIsO≥n
) ;

147 
•u
.
x≠GlobÆ
 = 
x≠
;

148 
•u
.
XARïót
 = 100;

152 
iSize
=((45500*
x≠
->
nßm∂es
)/x≠->
‰eq
);

154 
iSize
=((44100*
x≠
->
nßm∂es
)/x≠->
‰eq
);

172 
¥öt_xa_˘r
 = 0;

173 i‡(
¥öt_xa_˘r
++ > 20) {

174 
xa_buf_size
 = 
•u
.
XAEnd
-•u.
XASèπ
;

175 
xa_u£d_•a˚
 = 
•u
.
XAFìd
 - spu.
XAPœy
;

176 i‡(
xa_u£d_•a˚
 < 0)

177 
xa_u£d_•a˚
 +
xa_buf_size
;

179 
xa_unu£d_•a˚
 = 
xa_buf_size
 - 
xa_u£d_•a˚
;

180 
	`¥ötf
("XAF: %p XAP: %p iSize: %d bufsize: %d used: %d unused: %d\n",

181 
•u
.
XAFìd
, spu.
XAPœy
, 
iSize
, 
xa_buf_size
, 
xa_u£d_•a˚
, 
xa_unu£d_•a˚
);

182 
¥öt_xa_˘r
 = 0;

183 i‡(
xa_unu£d_•a˚
 < 
iSize
)

184 
	`¥ötf
("FìdXA(Ëîr‹: buf„∏fuŒ, %d sam∂e†ˇ¬Ÿ fôánd wû»bêdr›≥d.\n", 
iSize
);

189 i‡(
•u
.
XABuf„rRoom
 < 
iSize
)

191 
iPœ˚
 = 
iSize
;

197 if(
•u_c⁄fig
.
iXAPôch
)

199 
DWORD
 
dwLT
=0;

200 
DWORD
 
dwFPS
=0;

201 
iFPSC¡
=0;

202 
iLa°Size
=0;

203 
DWORD
 
dwL1
=0;

204 
DWORD
 
dw
=
	`timeGëTime_•u
(),
dw1
,
dw2
;

206 
iPœ˚
=
iSize
;

208 
dwFPS
+=
dw
-
dwLT
;
iFPSC¡
++;

210 
dwLT
=
dw
;

212 if(
iFPSC¡
>=10)

214 if(!
dwFPS
) dwFPS=1;

215 
dw1
=1000000/
dwFPS
;

216 if(
dw1
>=(
dwL1
-100) && dw1<=(dwL1+100)) dw1=dwL1;

217 
dwL1
=
dw1
;

218 
dw2
=(
x≠
->
‰eq
*100/x≠->
nßm∂es
);

219 if((!
dw1
)||((
dw2
+100)>=dw1)Ë
iLa°Size
=0;

222 
iLa°Size
=
iSize
*
dw2
/
dw1
;

223 if(
iLa°Size
>
iPœ˚
) iLastSize=iPlace;

224 
iSize
=
iLa°Size
;

226 
iFPSC¡
=0;
dwFPS
=0;

230 if(
iLa°Size
Ë
iSize
=iLastSize;

235 
•os
=0x10000L;

236 
söc
 = (
x≠
->
nßm∂es
 << 16Ë/ 
iSize
;

238 if(
x≠
->
°îeo
)

240 
uöt32_t
 * 
pS
=(uöt32_à*)
x≠
->
pcm
;

241 
uöt32_t
 
l
=0;

243 if(
•u_c⁄fig
.
iXAPôch
)

245 
öt32_t
 
l1
,
l2
;
s
;

246 
i
=0;i<
iSize
;i++)

248 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
==2)

250 
•os
>=0x10000L)

252 
l
 = *
pS
++;

253 
gauss_wödow
[
gauss_±r
] = ()
	`LOWORD
(
l
);

254 
gauss_wödow
[4+
gauss_±r
] = ()
	`HIWORD
(
l
);

255 
gauss_±r
 = (gauss_ptr+1) & 3;

256 
•os
 -= 0x10000L;

258 
vl
 = (
•os
 >> 6) & ~3;

259 
vr
=(
gauss
[
vl
]*
gvÆl0
)&~2047;

260 
vr
+=(
gauss
[
vl
+1]*
	`gvÆl
(1))&~2047;

261 
vr
+=(
gauss
[
vl
+2]*
	`gvÆl
(2))&~2047;

262 
vr
+=(
gauss
[
vl
+3]*
	`gvÆl
(3))&~2047;

263 
l
(
vr
 >> 11) & 0xffff;

264 
vr
=(
gauss
[
vl
]*
gvÆr0
)&~2047;

265 
vr
+=(
gauss
[
vl
+1]*
	`gvÆr
(1))&~2047;

266 
vr
+=(
gauss
[
vl
+2]*
	`gvÆr
(2))&~2047;

267 
vr
+=(
gauss
[
vl
+3]*
	`gvÆr
(3))&~2047;

268 
l
 |
vr
 << 5;

272 
•os
>=0x10000L)

274 
l
 = *
pS
++;

275 
•os
 -= 0x10000L;

279 
s
=()
	`LOWORD
(
l
);

280 
l1
=
s
;

281 
l1
=÷1*
iPœ˚
)/
iSize
;

282 
	`sßt32_to_16
(
l1
);

283 
s
=()
	`HIWORD
(
l
);

284 
l2
=
s
;

285 
l2
=÷2*
iPœ˚
)/
iSize
;

286 
	`sßt32_to_16
(
l2
);

287 
l
=(
l1
&0xffff)|(
l2
<<16);

289 *
•u
.
XAFìd
++=
l
;

291 if(
•u
.
XAFìd
==•u.
XAEnd
Ë•u.XAFìd=•u.
XASèπ
;

292 if(
•u
.
XAFìd
==•u.
XAPœy
)

294 if(
•u
.
XAPœy
!=•u.
XASèπ
Ë•u.
XAFìd
=spu.XAPlay-1;

298 
•os
 +
söc
;

303 
i
=0;i<
iSize
;i++)

305 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
==2)

307 
•os
>=0x10000L)

309 
l
 = *
pS
++;

310 
gauss_wödow
[
gauss_±r
] = ()
	`LOWORD
(
l
);

311 
gauss_wödow
[4+
gauss_±r
] = ()
	`HIWORD
(
l
);

312 
gauss_±r
 = (gauss_ptr+1) & 3;

313 
•os
 -= 0x10000L;

315 
vl
 = (
•os
 >> 6) & ~3;

316 
vr
=(
gauss
[
vl
]*
gvÆl0
)&~2047;

317 
vr
+=(
gauss
[
vl
+1]*
	`gvÆl
(1))&~2047;

318 
vr
+=(
gauss
[
vl
+2]*
	`gvÆl
(2))&~2047;

319 
vr
+=(
gauss
[
vl
+3]*
	`gvÆl
(3))&~2047;

320 
l
(
vr
 >> 11) & 0xffff;

321 
vr
=(
gauss
[
vl
]*
gvÆr0
)&~2047;

322 
vr
+=(
gauss
[
vl
+1]*
	`gvÆr
(1))&~2047;

323 
vr
+=(
gauss
[
vl
+2]*
	`gvÆr
(2))&~2047;

324 
vr
+=(
gauss
[
vl
+3]*
	`gvÆr
(3))&~2047;

325 
l
 |
vr
 << 5;

329 
•os
>=0x10000L)

331 
l
 = *
pS
++;

332 
•os
 -= 0x10000L;

336 *
•u
.
XAFìd
++=
l
;

338 if(
•u
.
XAFìd
==•u.
XAEnd
Ë•u.XAFìd=•u.
XASèπ
;

339 if(
•u
.
XAFìd
==•u.
XAPœy
)

341 if(
•u
.
XAPœy
!=•u.
XASèπ
Ë•u.
XAFìd
=spu.XAPlay-1;

345 
•os
 +
söc
;

351 * 
pS
=(*)
x≠
->
pcm
;

352 
uöt32_t
 
l
;
s
=0;

354 if(
•u_c⁄fig
.
iXAPôch
)

356 
öt32_t
 
l1
;

357 
i
=0;i<
iSize
;i++)

359 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
==2)

361 
•os
>=0x10000L)

363 
gauss_wödow
[
gauss_±r
] = ()*
pS
++;

364 
gauss_±r
 = (gauss_ptr+1) & 3;

365 
•os
 -= 0x10000L;

367 
vl
 = (
•os
 >> 6) & ~3;

368 
vr
=(
gauss
[
vl
]*
gvÆl0
)&~2047;

369 
vr
+=(
gauss
[
vl
+1]*
	`gvÆl
(1))&~2047;

370 
vr
+=(
gauss
[
vl
+2]*
	`gvÆl
(2))&~2047;

371 
vr
+=(
gauss
[
vl
+3]*
	`gvÆl
(3))&~2047;

372 
l1
=
s

vr
 >> 11;

373 
l1
 &= 0xffff;

377 
•os
>=0x10000L)

379 
s
 = *
pS
++;

380 
•os
 -= 0x10000L;

382 
l1
=
s
;

385 
l1
=÷1*
iPœ˚
)/
iSize
;

386 
	`sßt32_to_16
(
l1
);

387 
l
=(
l1
&0xffff)|(l1<<16);

388 *
•u
.
XAFìd
++=
l
;

390 if(
•u
.
XAFìd
==•u.
XAEnd
Ë•u.XAFìd=•u.
XASèπ
;

391 if(
•u
.
XAFìd
==•u.
XAPœy
)

393 if(
•u
.
XAPœy
!=•u.
XASèπ
Ë•u.
XAFìd
=spu.XAPlay-1;

397 
•os
 +
söc
;

402 
i
=0;i<
iSize
;i++)

404 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
==2)

406 
•os
>=0x10000L)

408 
gauss_wödow
[
gauss_±r
] = ()*
pS
++;

409 
gauss_±r
 = (gauss_ptr+1) & 3;

410 
•os
 -= 0x10000L;

412 
vl
 = (
•os
 >> 6) & ~3;

413 
vr
=(
gauss
[
vl
]*
gvÆl0
)&~2047;

414 
vr
+=(
gauss
[
vl
+1]*
	`gvÆl
(1))&~2047;

415 
vr
+=(
gauss
[
vl
+2]*
	`gvÆl
(2))&~2047;

416 
vr
+=(
gauss
[
vl
+3]*
	`gvÆl
(3))&~2047;

417 
l
=
s

vr
 >> 11;

421 
•os
>=0x10000L)

423 
s
 = *
pS
++;

424 
•os
 -= 0x10000L;

426 
l
=
s
;

429 
l
 &= 0xffff;

430 *
•u
.
XAFìd
++=(
l
|(l<<16));

432 if(
•u
.
XAFìd
==•u.
XAEnd
Ë•u.XAFìd=•u.
XASèπ
;

433 if(
•u
.
XAFìd
==•u.
XAPœy
)

435 if(
•u
.
XAPœy
!=•u.
XASèπ
Ë•u.
XAFìd
=spu.XAPlay-1;

439 
•os
 +
söc
;

445 
	`Upd©eXABuf„rRoom
();

446 
	}
}

452 
INLINE
 
	$FìdCDDA
(*
pcm
, 
nByãs
)

454 
•a˚
;

455 
•a˚
=(
•u
.
CDDAPœy
-•u.
CDDAFìd
-1)*4 & (
CDDA_BUFFER_SIZE
 - 1);

456 if(
•a˚
<
nByãs
)

459 
nByãs
>0)

461 if(
•u
.
CDDAFìd
==•u.
CDDAEnd
Ë•u.CDDAFìd=•u.
CDDASèπ
;

462 
•a˚
=(
•u
.
CDDAPœy
-•u.
CDDAFìd
-1)*4 & (
CDDA_BUFFER_SIZE
 - 1);

463 if(
•u
.
CDDAFìd
+
•a˚
/4>•u.
CDDAEnd
)

464 
•a˚
=(
•u
.
CDDAEnd
-•u.
CDDAFìd
)*4;

465 if(
•a˚
>
nByãs
)

466 
•a˚
=
nByãs
;

468 
	`mem˝y
(
•u
.
CDDAFìd
,
pcm
,
•a˚
);

469 
•u
.
CDDAFìd
+=
•a˚
/4;

470 
nByãs
-=
•a˚
;

471 
pcm
+=
•a˚
;

475 
	}
}

	@src/spu/spu_pcsxrearmed/xa.h

18 
INLINE
 
MixXA
();

19 
INLINE
 
FìdXA
(
xa_decode_t
 *
x≠
);

20 
INLINE
 
FìdCDDA
(*
pcm
, 
nByãs
);

	@/usr/include/alsa/asoundlib.h

28 #i‚de‡
__ASOUNDLIB_H


29 
	#__ASOUNDLIB_H


	)

31 
	~<uni°d.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<°rög.h
>

36 
	~<f˙é.h
>

37 
	~<as£π.h
>

38 
	~<sys/pﬁl.h
>

39 
	~<î∫o.h
>

40 
	~<°d¨g.h
>

41 
	~<ídün.h
>

43 #i‚de‡
__GNUC__


44 
	#__ölöe__
 
ölöe


	)

47 
	~<Æß/asoundef.h
>

48 
	~<Æß/vîsi⁄.h
>

49 
	~<Æß/globÆ.h
>

50 
	~<Æß/öput.h
>

51 
	~<Æß/ouçut.h
>

52 
	~<Æß/îr‹.h
>

53 
	~<Æß/c⁄f.h
>

54 
	~<Æß/pcm.h
>

55 
	~<Æß/øwmidi.h
>

56 
	~<Æß/timî.h
>

57 
	~<Æß/hwdï.h
>

58 
	~<Æß/c⁄åﬁ.h
>

59 
	~<Æß/mixî.h
>

60 
	~<Æß/£q_evít.h
>

61 
	~<Æß/£q.h
>

62 
	~<Æß/£qmid.h
>

63 
	~<Æß/£q_midi_evít.h
>

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
)

194 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #ifde‡
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #ifde‡
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

256 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

257 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

258 (*
__cmp
Ë(c⁄° 
dúít
 **,

259 c⁄° 
dúít
 **))

260 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
sˇndú
,

264 (c⁄° *
__ª°ri˘
 
__dú
,

265 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

266 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

267 (*
__cmp
Ë(c⁄° 
dúít
 **,

268 c⁄° 
dúít
 **)),

269 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

271 
	#sˇndú
 
sˇndú64


	)

275 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


278 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

279 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

280 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

281 (*
__cmp
Ë(c⁄° 
dúít64
 **,

282 c⁄° 
dúít64
 **))

283 
	`__n⁄nuŒ
 ((1, 2));

286 #ifde‡
__USE_GNU


292 #i‚de‡
__USE_FILE_OFFSET64


293 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

294 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

295 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

296 (*
__cmp
Ë(c⁄° 
dúít
 **,

297 c⁄° 
dúít
 **))

298 
	`__n⁄nuŒ
 ((2, 3));

300 #ifde‡
__REDIRECT


301 
	`__REDIRECT
 (
sˇndú©
,

302 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

303 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

304 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

305 (*
__cmp
Ë(c⁄° 
dúít
 **,

306 c⁄° 
dúít
 **)),

307 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

309 
	#sˇndú©
 
sˇndú©64


	)

315 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

316 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

317 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

318 (*
__cmp
Ë(c⁄° 
dúít64
 **,

319 c⁄° 
dúít64
 **))

320 
	`__n⁄nuŒ
 ((2, 3));

324 #i‚de‡
__USE_FILE_OFFSET64


325 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

326 c⁄° 
dúít
 **
__e2
)

327 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 #ifde‡
__REDIRECT


330 
	`__REDIRECT_NTH
 (
Æphas‹t
,

331 (c⁄° 
dúít
 **
__e1
,

332 c⁄° 
dúít
 **
__e2
),

333 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	#Æphas‹t
 
Æphas‹t64


	)

339 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


340 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

341 c⁄° 
dúít64
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 #ifde‡
__USE_MISC


352 #i‚de‡
__USE_FILE_OFFSET64


353 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

354 
size_t
 
__nbyãs
,

355 
__off_t
 *
__ª°ri˘
 
__ba£p
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

358 #ifde‡
__REDIRECT


359 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

360 (
__fd
, *
__ª°ri˘
 
__buf
,

361 
size_t
 
__nbyãs
,

362 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

363 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

365 
	#gëdúíåõs
 
gëdúíåõs64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

371 
size_t
 
__nbyãs
,

372 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

377 #ifde‡
__USE_GNU


379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

381 c⁄° 
dúít
 **
__e2
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

384 #ifde‡
__REDIRECT


385 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

386 (c⁄° 
dúít
 **
__e1
,

387 c⁄° 
dúít
 **
__e2
),

388 
vîsi⁄s‹t64
)

389 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

391 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

397 c⁄° 
dúít64
 **
__e2
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

402 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

78 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


79 
	~<bôs/°©.h
>

81 
	#S_IFMT
 
__S_IFMT


	)

82 
	#S_IFDIR
 
__S_IFDIR


	)

83 
	#S_IFCHR
 
__S_IFCHR


	)

84 
	#S_IFBLK
 
__S_IFBLK


	)

85 
	#S_IFREG
 
__S_IFREG


	)

86 #ifde‡
__S_IFIFO


87 
	#S_IFIFO
 
__S_IFIFO


	)

89 #ifde‡
__S_IFLNK


90 
	#S_IFLNK
 
__S_IFLNK


	)

92 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


93 
	#S_IFSOCK
 
__S_IFSOCK


	)

98 
	#S_ISUID
 
__S_ISUID


	)

99 
	#S_ISGID
 
__S_ISGID


	)

101 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


103 
	#S_ISVTX
 
__S_ISVTX


	)

106 
	#S_IRUSR
 
__S_IREAD


	)

107 
	#S_IWUSR
 
__S_IWRITE


	)

108 
	#S_IXUSR
 
__S_IEXEC


	)

110 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

112 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

113 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

114 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

116 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

118 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

119 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

120 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

122 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

125 #ifdef 
__USE_MISC


126 #i‚de‡
R_OK


129 
	#R_OK
 4

	)

130 
	#W_OK
 2

	)

131 
	#X_OK
 1

	)

132 
	#F_OK
 0

	)

137 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


138 
	#SEEK_SET
 0

	)

139 
	#SEEK_CUR
 1

	)

140 
	#SEEK_END
 2

	)

148 
f˙é
 (
__fd
, 
__cmd
, ...);

157 #i‚de‡
__USE_FILE_OFFSET64


158 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

160 #ifde‡
__REDIRECT


161 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

162 
	`__n⁄nuŒ
 ((1));

164 
	#›í
 
›í64


	)

167 #ifde‡
__USE_LARGEFILE64


168 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

171 #ifde‡
__USE_ATFILE


181 #i‚de‡
__USE_FILE_OFFSET64


182 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

183 
	`__n⁄nuŒ
 ((2));

185 #ifde‡
__REDIRECT


186 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

187 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

189 
	#›í©
 
›í©64


	)

192 #ifde‡
__USE_LARGEFILE64


193 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

194 
	`__n⁄nuŒ
 ((2));

203 #i‚de‡
__USE_FILE_OFFSET64


204 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

206 #ifde‡
__REDIRECT


207 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

208 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

210 
	#¸ót
 
¸ót64


	)

213 #ifde‡
__USE_LARGEFILE64


214 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

217 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

218 && !
deföed
 
__USE_POSIX
))

227 
	#F_ULOCK
 0

	)

228 
	#F_LOCK
 1

	)

229 
	#F_TLOCK
 2

	)

230 
	#F_TEST
 3

	)

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

238 
	#lockf
 
lockf64


	)

241 #ifde‡
__USE_LARGEFILE64


242 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

246 #ifde‡
__USE_XOPEN2K


249 #i‚de‡
__USE_FILE_OFFSET64


250 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

251 
__advi£
Ë
__THROW
;

253 #ifde‡
__REDIRECT_NTH


254 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

255 
__off64_t
 
__Àn
, 
__advi£
),

256 
posix_Ádvi£64
);

258 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

261 #ifde‡
__USE_LARGEFILE64


262 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

263 
__advi£
Ë
__THROW
;

271 #i‚de‡
__USE_FILE_OFFSET64


272 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

274 #ifde‡
__REDIRECT


275 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

276 
__off64_t
 
__Àn
),

277 
posix_ÁŒoˇã64
);

279 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

289 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

290 && 
deföed
 
__va_¨g_∑ck_Àn


291 
	~<bôs/f˙é2.h
>

294 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/pulse/pulseaudio.h

1 #i‚de‡
fo›ul£audiohfoo


2 
	#fo›ul£audiohfoo


	)

24 
	~<pul£/dúe˘i⁄.h
>

25 
	~<pul£/maölo›-≠i.h
>

26 
	~<pul£/ßm∂e.h
>

27 
	~<pul£/f‹m©.h
>

28 
	~<pul£/def.h
>

29 
	~<pul£/c⁄ãxt.h
>

30 
	~<pul£/°ªam.h
>

31 
	~<pul£/öåo•e˘.h
>

32 
	~<pul£/subs¸ibe.h
>

33 
	~<pul£/sˇche.h
>

34 
	~<pul£/vîsi⁄.h
>

35 
	~<pul£/îr‹.h
>

36 
	~<pul£/›î©i⁄.h
>

37 
	~<pul£/ch™√lm≠.h
>

38 
	~<pul£/vﬁume.h
>

39 
	~<pul£/xmÆloc.h
>

40 
	~<pul£/utf8.h
>

41 
	~<pul£/thªad-maölo›.h
>

42 
	~<pul£/maölo›.h
>

43 
	~<pul£/maölo›-sig«l.h
>

44 
	~<pul£/utû.h
>

45 
	~<pul£/timevÆ.h
>

46 
	~<pul£/¥›li°.h
>

47 
	~<pul£/π˛ock.h
>

	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

102 #ifde‡
__USE_XOPEN2K8


103 #i‚de‡
__ssize_t_deföed


104 
__ssize_t
 
	tssize_t
;

105 
	#__ssize_t_deföed


	)

110 
__BEGIN_NAMESPACE_STD


111 #i‚de‡
__USE_FILE_OFFSET64


112 
_G_Âos_t
 
	tÂos_t
;

114 
_G_Âos64_t
 
	tÂos_t
;

116 
__END_NAMESPACE_STD


117 #ifde‡
__USE_LARGEFILE64


118 
_G_Âos64_t
 
	tÂos64_t
;

122 
	#_IOFBF
 0

	)

123 
	#_IOLBF
 1

	)

124 
	#_IONBF
 2

	)

128 #i‚de‡
BUFSIZ


129 
	#BUFSIZ
 
_IO_BUFSIZ


	)

135 #i‚de‡
EOF


136 
	#EOF
 (-1)

	)

142 
	#SEEK_SET
 0

	)

143 
	#SEEK_CUR
 1

	)

144 
	#SEEK_END
 2

	)

145 #ifde‡
__USE_GNU


146 
	#SEEK_DATA
 3

	)

147 
	#SEEK_HOLE
 4

	)

151 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


153 
	#P_tmpdú
 "/tmp"

	)

166 
	~<bôs/°dio_lim.h
>

170 
_IO_FILE
 *
°dö
;

171 
_IO_FILE
 *
°dout
;

172 
_IO_FILE
 *
°dîr
;

174 
	#°dö
 
°dö


	)

175 
	#°dout
 
°dout


	)

176 
	#°dîr
 
°dîr


	)

178 
__BEGIN_NAMESPACE_STD


180 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

182 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

183 
__END_NAMESPACE_STD


185 #ifde‡
__USE_ATFILE


187 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

188 c⁄° *
__√w
Ë
__THROW
;

191 
__BEGIN_NAMESPACE_STD


196 #i‚de‡
__USE_FILE_OFFSET64


197 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

199 #ifde‡
__REDIRECT


200 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

202 
	#tmpfûe
 
tmpfûe64


	)

206 #ifde‡
__USE_LARGEFILE64


207 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

211 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

212 
__END_NAMESPACE_STD


214 #ifde‡
__USE_MISC


217 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

221 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


229 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

230 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

234 
__BEGIN_NAMESPACE_STD


239 
	`f˛o£
 (
FILE
 *
__°ªam
);

244 
	`fÊush
 (
FILE
 *
__°ªam
);

245 
__END_NAMESPACE_STD


247 #ifde‡
__USE_MISC


254 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

257 #ifde‡
__USE_GNU


264 
	`f˛o£Æl
 ();

268 
__BEGIN_NAMESPACE_STD


269 #i‚de‡
__USE_FILE_OFFSET64


274 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

275 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

280 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

281 c⁄° *
__ª°ri˘
 
__modes
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

284 #ifde‡
__REDIRECT


285 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

286 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

287 
__wur
;

288 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

289 c⁄° *
__ª°ri˘
 
__modes
,

290 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

291 
__wur
;

293 
	#f›í
 
f›í64


	)

294 
	#‰e›í
 
‰e›í64


	)

297 
__END_NAMESPACE_STD


298 #ifde‡
__USE_LARGEFILE64


299 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

301 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

302 c⁄° *
__ª°ri˘
 
__modes
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

306 #ifdef 
__USE_POSIX


308 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

311 #ifdef 
__USE_GNU


314 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

315 c⁄° *
__ª°ri˘
 
__modes
,

316 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

319 #ifde‡
__USE_XOPEN2K8


321 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

322 
__THROW
 
__wur
;

327 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

331 
__BEGIN_NAMESPACE_STD


334 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

338 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
__modes
, 
size_t
 
__n
Ë
__THROW
;

340 
__END_NAMESPACE_STD


342 #ifdef 
__USE_MISC


345 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

346 
size_t
 
__size
Ë
__THROW
;

349 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

353 
__BEGIN_NAMESPACE_STD


358 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

366 
	$•rötf
 (*
__ª°ri˘
 
__s
,

367 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

373 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
_G_va_li°
 
__¨g
);

379 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

381 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

382 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

383 
__END_NAMESPACE_STD


385 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


386 
__BEGIN_NAMESPACE_C99


388 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

389 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

390 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

392 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

393 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

394 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

395 
__END_NAMESPACE_C99


398 #ifde‡
__USE_GNU


401 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

402 
_G_va_li°
 
__¨g
)

403 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

404 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

405 c⁄° *
__ª°ri˘
 
__fmt
, ...)

406 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

408 c⁄° *
__ª°ri˘
 
__fmt
, ...)

409 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

412 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

436 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

451 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

486 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (c⁄° *
__ª°ri˘
 
__s
,

506 c⁄° *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

516 c⁄° *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #ifde‡
__USE_POSIX199506


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #ifde‡
__USE_POSIX199506


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

627 #i‡!
deföed
 
__USE_ISOC11
 \

628 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

640 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

642 
__END_NAMESPACE_STD


644 #ifde‡
__USE_GNU


651 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

652 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

656 #ifdef 
__USE_XOPEN2K8


667 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

668 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

670 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

671 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

672 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

680 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

681 
size_t
 *
__ª°ri˘
 
__n
,

682 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

686 
__BEGIN_NAMESPACE_STD


691 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

697 
	`puts
 (c⁄° *
__s
);

704 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

711 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

712 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

717 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

718 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

719 
__END_NAMESPACE_STD


721 #ifde‡
__USE_GNU


728 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

729 
FILE
 *
__ª°ri˘
 
__°ªam
);

732 #ifde‡
__USE_MISC


739 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

741 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

742 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

746 
__BEGIN_NAMESPACE_STD


751 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

756 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

761 
	`ªwöd
 (
FILE
 *
__°ªam
);

762 
__END_NAMESPACE_STD


769 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


770 #i‚de‡
__USE_FILE_OFFSET64


775 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

780 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

782 #ifde‡
__REDIRECT


783 
	`__REDIRECT
 (
f£eko
,

784 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

785 
f£eko64
);

786 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

788 
	#f£eko
 
f£eko64


	)

789 
	#·ñlo
 
·ñlo64


	)

794 
__BEGIN_NAMESPACE_STD


795 #i‚de‡
__USE_FILE_OFFSET64


800 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

805 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

807 #ifde‡
__REDIRECT


808 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

809 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

810 
	`__REDIRECT
 (
f£ços
,

811 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

813 
	#fgëpos
 
fgëpos64


	)

814 
	#f£ços
 
f£ços64


	)

817 
__END_NAMESPACE_STD


819 #ifde‡
__USE_LARGEFILE64


820 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

821 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

822 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

823 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

826 
__BEGIN_NAMESPACE_STD


828 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

830 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

833 
__END_NAMESPACE_STD


835 #ifde‡
__USE_MISC


837 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

838 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

839 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

843 
__BEGIN_NAMESPACE_STD


848 
	`≥º‹
 (c⁄° *
__s
);

849 
__END_NAMESPACE_STD


855 
	~<bôs/sys_îæi°.h
>

858 #ifdef 
__USE_POSIX


860 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

863 #ifde‡
__USE_MISC


865 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

869 #ifde‡
__USE_POSIX2


874 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

880 
	`p˛o£
 (
FILE
 *
__°ªam
);

884 #ifdef 
__USE_POSIX


886 *
	$˘îmid
 (*
__s
Ë
__THROW
;

890 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


892 *
	`cu£rid
 (*
__s
);

896 #ifdef 
__USE_GNU


897 
ob°ack
;

900 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

901 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

903 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

904 c⁄° *
__ª°ri˘
 
__f‹m©
,

905 
_G_va_li°
 
__¨gs
)

906 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

910 #ifde‡
__USE_POSIX199506


914 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

921 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

924 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


928 
	#__√ed_gë›t


	)

929 
	~<gë›t.h
>

934 #ifde‡
__USE_EXTERN_INLINES


935 
	~<bôs/°dio.h
>

937 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


938 
	~<bôs/°dio2.h
>

940 #ifde‡
__LDBL_COMPAT


941 
	~<bôs/°dio-ldbl.h
>

944 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

45 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

46 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

47 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

48 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

49 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

50 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

51 #ifde‡
__WIFCONTINUED


52 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
__BEGIN_NAMESPACE_STD


60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

73 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__BEGIN_NAMESPACE_C99


78 
__exãnsi⁄__
 struct

80 
	mquŸ
;

81 
	mªm
;

82 } 
	tŒdiv_t
;

83 
	#__Œdiv_t_deföed
 1

	)

84 
	g__END_NAMESPACE_C99


89 
	#RAND_MAX
 2147483647

	)

94 
	#EXIT_FAILURE
 1

	)

95 
	#EXIT_SUCCESS
 0

	)

99 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

100 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

103 
__BEGIN_NAMESPACE_STD


105 
	$©of
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©oi
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 
	$©ﬁ
 (c⁄° *
__≈å
)

112 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_ISOC99


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

119 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

120 
__END_NAMESPACE_C99


123 
__BEGIN_NAMESPACE_STD


125 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

126 **
__ª°ri˘
 
__íd±r
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1));

128 
__END_NAMESPACE_STD


130 #ifdef 
__USE_ISOC99


131 
__BEGIN_NAMESPACE_C99


133 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

134 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

136 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

137 **
__ª°ri˘
 
__íd±r
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 
__END_NAMESPACE_C99


142 
__BEGIN_NAMESPACE_STD


144 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

145 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

149 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 
__END_NAMESPACE_STD


153 #ifde‡
__USE_MISC


155 
__exãnsi⁄__


156 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

157 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

158 
__THROW
 
	`__n⁄nuŒ
 ((1));

160 
__exãnsi⁄__


161 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

162 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__exãnsi⁄__


170 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

174 
__exãnsi⁄__


175 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


182 #ifde‡
__USE_GNU


196 
	~<xloˇÀ.h
>

200 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

202 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

204 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

205 **
__ª°ri˘
 
__íd±r
,

206 
__ba£
, 
__loˇÀ_t
 
__loc
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

209 
__exãnsi⁄__


210 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

212 
__loˇÀ_t
 
__loc
)

213 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

215 
__exãnsi⁄__


216 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

217 **
__ª°ri˘
 
__íd±r
,

218 
__ba£
, 
__loˇÀ_t
 
__loc
)

219 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

221 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

222 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

223 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

225 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

226 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

227 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

229 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

230 **
__ª°ri˘
 
__íd±r
,

231 
__loˇÀ_t
 
__loc
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

236 #ifde‡
__USE_EXTERN_INLINES


237 
__BEGIN_NAMESPACE_STD


238 
__exã∫_ölöe
 

239 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

241  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

242 
	}
}

243 
__exã∫_ölöe
 

244 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

246  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

247 
	}
}

248 
	g__END_NAMESPACE_STD


250 #ifde‡
__USE_ISOC99


251 
__BEGIN_NAMESPACE_C99


252 
__exãnsi⁄__
 
__exã∫_ölöe
 

253 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

255  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

256 
	}
}

257 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


266 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

269 
	$a64l
 (c⁄° *
__s
)

270 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

274 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


275 
	~<sys/ty≥s.h
>

282 
	$øndom
 (Ë
__THROW
;

285 
	$§™dom
 (
__£ed
Ë
__THROW
;

291 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

292 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

296 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

299 #ifde‡
__USE_MISC


304 
	søndom_d©a


306 
öt32_t
 *
Âå
;

307 
öt32_t
 *
Ωå
;

308 
öt32_t
 *
°©e
;

309 
ønd_ty≥
;

310 
ønd_deg
;

311 
ønd_£p
;

312 
öt32_t
 *
íd_±r
;

315 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

316 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

319 
__THROW
 
	`__n⁄nuŒ
 ((2));

321 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

322 
size_t
 
__°©ñí
,

323 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

324 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

326 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

327 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
__BEGIN_NAMESPACE_STD


335 
	$ønd
 (Ë
__THROW
;

337 
	$§™d
 (
__£ed
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifde‡
__USE_POSIX199506


342 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

346 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


350 
	$dønd48
 (Ë
__THROW
;

351 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$Ã™d48
 (Ë
__THROW
;

355 
	$ƒ™d48
 (
__xsubi
[3])

356 
__THROW
 
	`__n⁄nuŒ
 ((1));

359 
	$mønd48
 (Ë
__THROW
;

360 
	$jønd48
 (
__xsubi
[3])

361 
__THROW
 
	`__n⁄nuŒ
 ((1));

364 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

365 *
	$£ed48
 (
__£ed16v
[3])

366 
__THROW
 
	`__n⁄nuŒ
 ((1));

367 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_MISC


373 
	sdønd48_d©a


375 
__x
[3];

376 
__ﬁd_x
[3];

377 
__c
;

378 
__öô
;

379 
__exãnsi⁄__
 
__a
;

384 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

385 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$î™d48_r
 (
__xsubi
[3],

387 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

388 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

392 *
__ª°ri˘
 
__ªsu…
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

394 
	$ƒ™d48_r
 (
__xsubi
[3],

395 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

396 *
__ª°ri˘
 
__ªsu…
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

401 *
__ª°ri˘
 
__ªsu…
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

403 
	$jønd48_r
 (
__xsubi
[3],

404 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

405 *
__ª°ri˘
 
__ªsu…
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

409 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

410 
__THROW
 
	`__n⁄nuŒ
 ((2));

412 
	$£ed48_r
 (
__£ed16v
[3],

413 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

415 
	$lc⁄g48_r
 (
__∑øm
[7],

416 
dønd48_d©a
 *
__buf„r
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

423 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


424 
	#__mÆloc_™d_ˇŒoc_deföed


	)

425 
__BEGIN_NAMESPACE_STD


427 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

429 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

430 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

431 
__END_NAMESPACE_STD


434 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


435 
__BEGIN_NAMESPACE_STD


441 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

442 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

444 
	$‰ì
 (*
__±r
Ë
__THROW
;

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_MISC


449 
	$c‰ì
 (*
__±r
Ë
__THROW
;

452 #ifde‡
__USE_MISC


453 
	~<Æloˇ.h
>

456 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

457 || 
deföed
 
__USE_MISC


459 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

462 #ifde‡
__USE_XOPEN2K


464 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

465 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

468 #ifde‡
__USE_ISOC11


470 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

471 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

474 
__BEGIN_NAMESPACE_STD


476 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

480 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

482 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


484 #ifde‡
__˝lu•lus


485 "C++" 
	$©_quick_exô
 ((*
__func
) ())

486 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

488 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 
__END_NAMESPACE_STD


493 #ifdef 
__USE_MISC


496 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

497 
__THROW
 
	`__n⁄nuŒ
 ((1));

500 
__BEGIN_NAMESPACE_STD


504 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

506 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


510 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

512 
__END_NAMESPACE_STD


514 #ifde‡
__USE_ISOC99


515 
__BEGIN_NAMESPACE_C99


518 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
__END_NAMESPACE_C99


523 
__BEGIN_NAMESPACE_STD


525 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

526 
__END_NAMESPACE_STD


528 #ifde‡
__USE_GNU


531 *
	$£cuª_gëív
 (c⁄° *
__«me
)

532 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

535 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


539 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

542 #ifde‡
__USE_XOPEN2K


545 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

546 
__THROW
 
	`__n⁄nuŒ
 ((2));

549 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

552 #ifdef 
__USE_MISC


556 
	$˛óªnv
 (Ë
__THROW
;

560 #i‡
deföed
 
__USE_MISC
 \

561 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

567 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

570 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


579 #i‚de‡
__USE_FILE_OFFSET64


580 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

582 #ifde‡
__REDIRECT


583 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

584 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

586 
	#mk°emp
 
mk°emp64


	)

589 #ifde‡
__USE_LARGEFILE64


590 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

594 #ifde‡
__USE_MISC


601 #i‚de‡
__USE_FILE_OFFSET64


602 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

604 #ifde‡
__REDIRECT


605 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

606 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 
	#mk°emps
 
mk°emps64


	)

611 #ifde‡
__USE_LARGEFILE64


612 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

613 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_XOPEN2K8


623 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 #ifde‡
__USE_GNU


633 #i‚de‡
__USE_FILE_OFFSET64


634 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__REDIRECT


637 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

638 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
	#mko°emp
 
mko°emp64


	)

643 #ifde‡
__USE_LARGEFILE64


644 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

653 #i‚de‡
__USE_FILE_OFFSET64


654 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

655 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #ifde‡
__REDIRECT


658 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

659 
__Êags
), 
mko°emps64
)

660 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

662 
	#mko°emps
 
mko°emps64


	)

665 #ifde‡
__USE_LARGEFILE64


666 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

667 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

672 
__BEGIN_NAMESPACE_STD


677 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

678 
__END_NAMESPACE_STD


681 #ifdef 
__USE_GNU


684 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

685 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


694 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

695 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

700 #i‚de‡
__COMPAR_FN_T


701 
	#__COMPAR_FN_T


	)

702 (*
	t__com∑r_‚_t
) (const *, const *);

704 #ifdef 
__USE_GNU


705 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

708 #ifde‡
__USE_GNU


709 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

712 
__BEGIN_NAMESPACE_STD


715 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

716 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

717 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

719 #ifde‡
__USE_EXTERN_INLINES


720 
	~<bôs/°dlib-b£¨ch.h
>

725 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

726 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

727 #ifde‡
__USE_GNU


728 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

729 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

730 
	`__n⁄nuŒ
 ((1, 4));

735 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

736 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

737 
__END_NAMESPACE_STD


739 #ifde‡
__USE_ISOC99


740 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

741 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

745 
__BEGIN_NAMESPACE_STD


749 
div_t
 
	$div
 (
__numî
, 
__díom
)

750 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

751 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

752 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

753 
__END_NAMESPACE_STD


755 #ifde‡
__USE_ISOC99


756 
__BEGIN_NAMESPACE_C99


757 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

758 
__díom
)

759 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

760 
__END_NAMESPACE_C99


764 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

765 || 
deföed
 
__USE_MISC


772 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

773 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

778 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

779 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

784 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

785 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

788 #ifde‡
__USE_MISC


790 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

791 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

792 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

793 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

794 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

795 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

796 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

797 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

802 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

804 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

805 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

806 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

807 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

809 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

810 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

811 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

812 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

813 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

814 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

815 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

816 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

820 
__BEGIN_NAMESPACE_STD


823 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

826 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

827 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

830 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

834 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

835 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

837 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

838 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

839 
__THROW
;

840 
__END_NAMESPACE_STD


843 #ifde‡
__USE_MISC


848 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

852 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


859 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

860 *c⁄° *
__ª°ri˘
 
__tokís
,

861 **
__ª°ri˘
 
__vÆuï
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

866 #ifde‡
__USE_XOPEN


868 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #ifde‡
__USE_XOPEN2KXSI


876 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

879 #ifde‡
__USE_XOPEN_EXTENDED


884 
	$gø¡±
 (
__fd
Ë
__THROW
;

888 
	$u∆ock±
 (
__fd
Ë
__THROW
;

893 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

896 #ifde‡
__USE_GNU


900 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

901 
__THROW
 
	`__n⁄nuŒ
 ((2));

904 
	`gë±
 ();

907 #ifde‡
__USE_MISC


911 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

915 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


918 
	$ây¶Ÿ
 (Ë
__THROW
;

921 
	~<bôs/°dlib-Êﬂt.h
>

924 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


925 
	~<bôs/°dlib.h
>

927 #ifde‡
__LDBL_COMPAT


928 
	~<bôs/°dlib-ldbl.h
>

932 #unde‡
__√ed_mÆloc_™d_ˇŒoc


934 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
	`__GNUC_PREREQ
 (3,4)

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

644 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
__exã∫_Æways_ölöe
 *

647 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

648 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

650  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

651 
	}
}

656 
	g__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/resource.h

18 #i‚def 
_SYS_RESOURCE_H


19 
	#_SYS_RESOURCE_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ªsour˚.h
>

26 #i‚de‡
__id_t_deföed


27 
__id_t
 
	tid_t
;

28 
	#__id_t_deföed


	)

31 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


38 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

39 
__rußge_who
 
	t__rußge_who_t
;

40 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

42 
	t__æimô_ªsour˚_t
;

43 
	t__rußge_who_t
;

44 
	t__¥i‹ôy_which_t
;

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

51 
æimô
 *
__æimôs
Ë
__THROW
;

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

55 
æimô
 *
__æimôs
), 
gëæimô64
);

57 
	#gëæimô
 
gëæimô64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

62 
æimô64
 *
__æimôs
Ë
__THROW
;

68 #i‚de‡
__USE_FILE_OFFSET64


69 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

70 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
;

72 #ifde‡
__REDIRECT_NTH


73 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

74 c⁄° 
æimô
 *
__æimôs
),

75 
£ålimô64
);

77 
	#£ålimô
 
£ålimô64


	)

80 #ifde‡
__USE_LARGEFILE64


81 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

82 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW
;

87 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

93 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

97 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

98 
__THROW
;

100 
__END_DECLS


	@/usr/include/sys/shm.h

18 #i‚de‡
_SYS_SHM_H


19 
	#_SYS_SHM_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/shm.h
>

33 
	#__√ed_time_t


	)

34 
	~<time.h
>

36 #ifde‡
__USE_XOPEN


37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

44 
__BEGIN_DECLS


50 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
Ë
__THROW
;

53 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
Ë
__THROW
;

56 *
	$shm©
 (
__shmid
, c⁄° *
__shmaddr
, 
__shmÊg
)

57 
__THROW
;

60 
	$shmdt
 (c⁄° *
__shmaddr
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/sys/soundcard.h

1 
	~<löux/soundˇrd.h
>

	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_ATFILE


30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

33 #ifde‡
__USE_ATFILE


34 
	#__√ed_time•ec


	)

36 
	~<time.h
>

39 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


42 #i‚de‡
__dev_t_deföed


43 
__dev_t
 
	tdev_t
;

44 
	#__dev_t_deföed


	)

47 #i‚de‡
__gid_t_deföed


48 
__gid_t
 
	tgid_t
;

49 
	#__gid_t_deföed


	)

52 #i‚de‡
__öo_t_deföed


53 #i‚de‡
__USE_FILE_OFFSET64


54 
__öo_t
 
	töo_t
;

56 
__öo64_t
 
	töo_t
;

58 
	#__öo_t_deföed


	)

61 #i‚de‡
__mode_t_deföed


62 
__mode_t
 
	tmode_t
;

63 
	#__mode_t_deföed


	)

66 #i‚de‡
__∆ök_t_deföed


67 
__∆ök_t
 
	t∆ök_t
;

68 
	#__∆ök_t_deföed


	)

71 #i‚de‡
__off_t_deföed


72 #i‚de‡
__USE_FILE_OFFSET64


73 
__off_t
 
	toff_t
;

75 
__off64_t
 
	toff_t
;

77 
	#__off_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

86 #ifde‡
__USE_UNIX98


87 #i‚de‡
__blk˙t_t_deföed


88 #i‚de‡
__USE_FILE_OFFSET64


89 
__blk˙t_t
 
	tblk˙t_t
;

91 
__blk˙t64_t
 
	tblk˙t_t
;

93 
	#__blk˙t_t_deföed


	)

96 #i‚de‡
__blksize_t_deföed


97 
__blksize_t
 
	tblksize_t
;

98 
	#__blksize_t_deföed


	)

102 
	g__BEGIN_DECLS


104 
	~<bôs/°©.h
>

106 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


107 
	#S_IFMT
 
__S_IFMT


	)

108 
	#S_IFDIR
 
__S_IFDIR


	)

109 
	#S_IFCHR
 
__S_IFCHR


	)

110 
	#S_IFBLK
 
__S_IFBLK


	)

111 
	#S_IFREG
 
__S_IFREG


	)

112 #ifde‡
__S_IFIFO


113 
	#S_IFIFO
 
__S_IFIFO


	)

115 #ifde‡
__S_IFLNK


116 
	#S_IFLNK
 
__S_IFLNK


	)

118 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
) \

119 && 
deföed
 
	g__S_IFSOCK


120 
	#S_IFSOCK
 
__S_IFSOCK


	)

126 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

128 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

129 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

130 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

131 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

132 #ifde‡
__S_IFIFO


133 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

135 #ifde‡
__S_IFLNK


136 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

139 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


140 
	#S_ISLNK
(
mode
Ë0

	)

143 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K
) \

144 && 
deföed
 
	g__S_IFSOCK


145 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

146 #ñi‡
deföed
 
__USE_XOPEN2K


147 
	#S_ISSOCK
(
mode
Ë0

	)

154 #ifdef 
__USE_POSIX199309


155 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

156 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

157 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

163 
	#S_ISUID
 
__S_ISUID


	)

164 
	#S_ISGID
 
__S_ISGID


	)

166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
	#S_ISVTX
 
__S_ISVTX


	)

171 
	#S_IRUSR
 
__S_IREAD


	)

172 
	#S_IWUSR
 
__S_IWRITE


	)

173 
	#S_IXUSR
 
__S_IEXEC


	)

175 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

177 #ifde‡
__USE_MISC


178 
	#S_IREAD
 
S_IRUSR


	)

179 
	#S_IWRITE
 
S_IWUSR


	)

180 
	#S_IEXEC
 
S_IXUSR


	)

183 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

184 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

185 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

187 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

189 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

190 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

191 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

193 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

196 #ifdef 
__USE_MISC


198 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

199 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

200 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

202 
	#S_BLKSIZE
 512

	)

206 #i‚de‡
__USE_FILE_OFFSET64


208 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

209 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

213 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

215 #ifde‡
__REDIRECT_NTH


216 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

217 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

218 
	`__n⁄nuŒ
 ((1, 2));

219 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

220 
	`__n⁄nuŒ
 ((2));

222 
	#°©
 
°©64


	)

223 
	#f°©
 
f°©64


	)

226 #ifde‡
__USE_LARGEFILE64


227 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

228 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

229 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

232 #ifde‡
__USE_ATFILE


236 #i‚de‡
__USE_FILE_OFFSET64


237 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

238 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

239 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

243 
°©
 *
__ª°ri˘
 
__buf
,

244 
__Êag
),

245 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

247 
	#f°©©
 
f°©©64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

258 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


262 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

263 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

265 #ifde‡
__REDIRECT_NTH


266 
	`__REDIRECT_NTH
 (
l°©
,

267 (c⁄° *
__ª°ri˘
 
__fûe
,

268 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 
	#l°©
 
l°©64


	)

274 #ifde‡
__USE_LARGEFILE64


275 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

276 
°©64
 *
__ª°ri˘
 
__buf
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

283 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #ifde‡
__USE_MISC


290 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


296 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

299 #ifde‡
__USE_ATFILE


302 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

303 
__Êag
)

304 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

313 #ifdef 
__USE_GNU


316 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

320 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1));

323 #ifde‡
__USE_ATFILE


327 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

328 
__THROW
 
	`__n⁄nuŒ
 ((2));

334 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


335 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_ATFILE


342 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

343 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

352 #ifde‡
__USE_ATFILE


356 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 #ifde‡
__USE_ATFILE


363 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

364 c⁄° 
time•ec
 
__times
[2],

365 
__Êags
)

366 
__THROW
 
	`__n⁄nuŒ
 ((2));

369 #ifde‡
__USE_XOPEN2K8


371 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

389 #i‚de‡
_STAT_VER


390 
	#_STAT_VER
 0

	)

392 #i‚de‡
_MKNOD_VER


393 
	#_MKNOD_VER
 0

	)

397 #i‚de‡
__USE_FILE_OFFSET64


398 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

399 
__THROW
 
	`__n⁄nuŒ
 ((3));

400 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

401 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

402 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
, 
__Êag
)

406 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

410 
°©
 *
__°©_buf
), 
__fx°©64
)

411 
	`__n⁄nuŒ
 ((3));

412 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__x°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__lx°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

419 c⁄° *
__fûíame
,

420 
°©
 *
__°©_buf
, 
__Êag
),

421 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

424 
	#__fx°©
 
__fx°©64


	)

425 
	#__x°©
 
__x°©64


	)

426 
	#__lx°©
 
__lx°©64


	)

430 #ifde‡
__USE_LARGEFILE64


431 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

433 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

434 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

435 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
, 
__Êag
)

439 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

441 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

442 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

444 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

445 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

446 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

448 #ifde‡
__USE_EXTERN_INLINES


451 
__exã∫_ölöe
 

452 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

454  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

455 
	}
}

457 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


458 
__exã∫_ölöe
 

459 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

461  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

462 
	}
}

465 
__exã∫_ölöe
 

466 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

468  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

469 
	}
}

471 #ifde‡
__USE_ATFILE


472 
__exã∫_ölöe
 

473 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

474 
__Êag
))

476  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

477 
	}
}

480 #ifde‡
__USE_MISC


481 
__exã∫_ölöe
 

482 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

484  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

485 
	}
}

488 #ifde‡
__USE_ATFILE


489 
__exã∫_ölöe
 

490 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

491 
__dev_t
 
__dev
))

493  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

494 
	}
}

497 #i‡
deföed
 
__USE_LARGEFILE64
 \

498 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

499 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

500 
__exã∫_ölöe
 

501 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

503  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

504 
	}
}

506 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


507 
__exã∫_ölöe
 

508 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

510  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

511 
	}
}

514 
__exã∫_ölöe
 

515 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

517  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

518 
	}
}

520 #ifde‡
__USE_ATFILE


521 
__exã∫_ölöe
 

522 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

523 
__Êag
))

525  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

526 
	}
}

533 
	g__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_MISC


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_MISC


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_MISC


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_MISC


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	#__√ed_gë›t


	)

873 
	~<gë›t.h
>

877 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


881 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #i‡
deföed
 
__USE_MISC


888 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

893 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

899 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

901 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

908 
	$vh™gup
 (Ë
__THROW
;

911 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

919 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

920 
size_t
 
__off£t
, 
__sˇÀ
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1));

927 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

931 *
	$gëu£rshñl
 (Ë
__THROW
;

932 
	$ídu£rshñl
 (Ë
__THROW
;

933 
	$£tu£rshñl
 (Ë
__THROW
;

939 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

943 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

946 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

958 
	`fsync
 (
__fd
);

961 #ifde‡
__USE_GNU


964 
	$syncfs
 (
__fd
Ë
__THROW
;

968 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


971 
	`gëho°id
 ();

974 
	$sync
 (Ë
__THROW
;

977 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


980 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

985 
	$gëdèbÀsize
 (Ë
__THROW
;

991 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


994 #i‚de‡
__USE_FILE_OFFSET64


995 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

996 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

998 #ifde‡
__REDIRECT_NTH


999 
	`__REDIRECT_NTH
 (
åunˇã
,

1000 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1001 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1003 
	#åunˇã
 
åunˇã64


	)

1006 #ifde‡
__USE_LARGEFILE64


1007 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1013 #i‡
deföed
 
__USE_POSIX199309
 \

1014 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1020 #ifde‡
__REDIRECT_NTH


1021 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1022 
·runˇã64
Ë
__wur
;

1024 
	#·runˇã
 
·runˇã64


	)

1027 #ifde‡
__USE_LARGEFILE64


1028 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1034 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1035 || 
deföed
 
__USE_MISC


1039 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1045 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1049 #ifde‡
__USE_MISC


1060 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1065 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1077 
	#F_ULOCK
 0

	)

1078 
	#F_LOCK
 1

	)

1079 
	#F_TLOCK
 2

	)

1080 
	#F_TEST
 3

	)

1082 #i‚de‡
__USE_FILE_OFFSET64


1083 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1085 #ifde‡
__REDIRECT


1086 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1087 
lockf64
Ë
__wur
;

1089 
	#lockf
 
lockf64


	)

1092 #ifde‡
__USE_LARGEFILE64


1093 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1098 #ifde‡
__USE_GNU


1103 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1104 (
__exãnsi⁄__
 \

1105 ({ 
__ªsu…
; \

1106 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1107 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1108 
__ªsu…
; 
	}
}))

	)

1111 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1114 
fd©async
 (
__fûdes
);

1120 #ifdef 
__USE_XOPEN


1122 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1127 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1128 
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1148 *
	`cu£rid
 (*
__s
);

1154 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1155 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1156 (*
__∑ª¡
) (),

1157 (*
__chûd
Ë()Ë
__THROW
;

1162 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1163 
	~<bôs/uni°d.h
>

1166 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.8"

	)

41 
	#ZLIB_VERNUM
 0x1280

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 8

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

843 
Byãf
 *
di˘i⁄¨y
,

844 
uI¡
 *
di˘Lígth
));

857 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

876 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

877 
z_°ªamp
 
sour˚
));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

902 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

903 
wödowBôs
));

914 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

915 
bôs
,

916 
vÆue
));

935 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

963 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

964 
gz_hódîp
 
hód
));

1025 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1026 
	tz_c⁄°
 
	tFAR
 * FAR *));

1027 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1029 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1030 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1031 
out_func
 
out
, 
FAR
 *
out_desc
));

1099 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1107 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1148 #i‚de‡
Z_SOLO


1160 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1161 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1174 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1175 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1176 
Àvñ
));

1190 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1197 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1198 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1224 
gzFûe_s
 *
	tgzFûe
;

1264 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1287 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1304 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1313 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1341 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1342 
voidpc
 
buf
, 
Àn
));

1349 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1364 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1372 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1385 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1391 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1400 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1412 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1447 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1475 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1490 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1511 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1524 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1525 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1536 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1552 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1569 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1600 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1633 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1634 c⁄° *
vîsi⁄
, 
°ªam_size
));

1635 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1636 c⁄° *
vîsi⁄
, 
°ªam_size
));

1637 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1638 
wödowBôs
, 
memLevñ
,

1639 
°øãgy
, c⁄° *
vîsi⁄
,

1640 
°ªam_size
));

1641 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1642 c⁄° *
vîsi⁄
, 
°ªam_size
));

1643 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1644 
FAR
 *
wödow
,

1645 c⁄° *
vîsi⁄
,

1646 
°ªam_size
));

1647 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1648 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1649 
	#öÊ©eInô
(
°rm
) \

1650 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1651 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1652 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1653 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1654 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1655 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1656 ()(
z_°ªam
))

	)

1657 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1658 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1659 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1661 #i‚de‡
Z_SOLO


1670 
	sgzFûe_s
 {

1671 
have
;

1672 *
√xt
;

1673 
z_off64_t
 
pos
;

1675 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1676 #ifde‡
Z_PREFIX_SET


1677 #unde‡
z_gzgëc


1678 
	#z_gzgëc
(
g
) \

1679 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1681 
	#gzgëc
(
g
) \

1682 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1691 #ifde‡
Z_LARGE64


1692 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1693 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1694 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1695 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1696 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1697 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1700 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1701 #ifde‡
Z_PREFIX_SET


1702 
	#z_gz›í
 
z_gz›í64


	)

1703 
	#z_gz£ek
 
z_gz£ek64


	)

1704 
	#z_gzãŒ
 
z_gzãŒ64


	)

1705 
	#z_gzoff£t
 
z_gzoff£t64


	)

1706 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1707 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1709 
	#gz›í
 
gz›í64


	)

1710 
	#gz£ek
 
gz£ek64


	)

1711 
	#gzãŒ
 
gzãŒ64


	)

1712 
	#gzoff£t
 
gzoff£t64


	)

1713 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1714 
	#¸c32_comböe
 
¸c32_comböe64


	)

1716 #i‚de‡
Z_LARGE64


1717 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1718 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1719 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1720 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1721 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1722 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1725 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1726 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1727 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1728 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1729 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1730 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1735 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1736 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1741 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1742 
	söã∫Æ_°©e
 {
dummy
;};

1746 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1747 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1748 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1749 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1750 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1751 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1752 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1753 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1754 c⁄° *
mode
));

1756 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1757 #i‚de‡
Z_SOLO


1758 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1759 c⁄° *
f‹m©
,

1760 
va_li°
 
va
));

1764 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/alsa/asoundef.h

28 #i‚de‡
__ALSA_ASOUNDEF_H


29 
	#__ALSA_ASOUNDEF_H


	)

31 #ifde‡
__˝lu•lus


41 
	#IEC958_AES0_PROFESSIONAL
 (1<<0Ë

	)

42 
	#IEC958_AES0_NONAUDIO
 (1<<1Ë

	)

43 
	#IEC958_AES0_PRO_EMPHASIS
 (7<<2Ë

	)

44 
	#IEC958_AES0_PRO_EMPHASIS_NOTID
 (0<<2Ë

	)

45 
	#IEC958_AES0_PRO_EMPHASIS_NONE
 (1<<2Ë

	)

46 
	#IEC958_AES0_PRO_EMPHASIS_5015
 (3<<2Ë

	)

47 
	#IEC958_AES0_PRO_EMPHASIS_CCITT
 (7<<2Ë

	)

48 
	#IEC958_AES0_PRO_FREQ_UNLOCKED
 (1<<5Ë

	)

49 
	#IEC958_AES0_PRO_FS
 (3<<6Ë

	)

50 
	#IEC958_AES0_PRO_FS_NOTID
 (0<<6Ë

	)

51 
	#IEC958_AES0_PRO_FS_44100
 (1<<6Ë

	)

52 
	#IEC958_AES0_PRO_FS_48000
 (2<<6Ë

	)

53 
	#IEC958_AES0_PRO_FS_32000
 (3<<6Ë

	)

54 
	#IEC958_AES0_CON_NOT_COPYRIGHT
 (1<<2Ë

	)

55 
	#IEC958_AES0_CON_EMPHASIS
 (7<<3Ë

	)

56 
	#IEC958_AES0_CON_EMPHASIS_NONE
 (0<<3Ë

	)

57 
	#IEC958_AES0_CON_EMPHASIS_5015
 (1<<3Ë

	)

58 
	#IEC958_AES0_CON_MODE
 (3<<6Ë

	)

59 
	#IEC958_AES1_PRO_MODE
 (15<<0Ë

	)

60 
	#IEC958_AES1_PRO_MODE_NOTID
 (0<<0Ë

	)

61 
	#IEC958_AES1_PRO_MODE_STEREOPHONIC
 (2<<0Ë

	)

62 
	#IEC958_AES1_PRO_MODE_SINGLE
 (4<<0Ë

	)

63 
	#IEC958_AES1_PRO_MODE_TWO
 (8<<0Ë

	)

64 
	#IEC958_AES1_PRO_MODE_PRIMARY
 (12<<0Ë

	)

65 
	#IEC958_AES1_PRO_MODE_BYTE3
 (15<<0Ë

	)

66 
	#IEC958_AES1_PRO_USERBITS
 (15<<4Ë

	)

67 
	#IEC958_AES1_PRO_USERBITS_NOTID
 (0<<4Ë

	)

68 
	#IEC958_AES1_PRO_USERBITS_192
 (8<<4Ë

	)

69 
	#IEC958_AES1_PRO_USERBITS_UDEF
 (12<<4Ë

	)

70 
	#IEC958_AES1_CON_CATEGORY
 0x7‡

	)

71 
	#IEC958_AES1_CON_GENERAL
 0x00

	)

72 
	#IEC958_AES1_CON_LASEROPT_MASK
 0x07

	)

73 
	#IEC958_AES1_CON_LASEROPT_ID
 0x01

	)

74 
	#IEC958_AES1_CON_IEC908_CD
 (
IEC958_AES1_CON_LASEROPT_ID
|0x00Ë

	)

75 
	#IEC958_AES1_CON_NON_IEC908_CD
 (
IEC958_AES1_CON_LASEROPT_ID
|0x08Ë

	)

76 
	#IEC958_AES1_CON_MINI_DISC
 (
IEC958_AES1_CON_LASEROPT_ID
|0x48Ë

	)

77 
	#IEC958_AES1_CON_DVD
 (
IEC958_AES1_CON_LASEROPT_ID
|0x18Ë

	)

78 
	#IEC958_AES1_CON_LASTEROPT_OTHER
 (
IEC958_AES1_CON_LASEROPT_ID
|0x78Ë

	)

79 
	#IEC958_AES1_CON_DIGDIGCONV_MASK
 0x07

	)

80 
	#IEC958_AES1_CON_DIGDIGCONV_ID
 0x02

	)

81 
	#IEC958_AES1_CON_PCM_CODER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x00Ë

	)

82 
	#IEC958_AES1_CON_MIXER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x10Ë

	)

83 
	#IEC958_AES1_CON_RATE_CONVERTER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x18Ë

	)

84 
	#IEC958_AES1_CON_SAMPLER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x20Ë

	)

85 
	#IEC958_AES1_CON_DSP
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x28Ë

	)

86 
	#IEC958_AES1_CON_DIGDIGCONV_OTHER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x78Ë

	)

87 
	#IEC958_AES1_CON_MAGNETIC_MASK
 0x07

	)

88 
	#IEC958_AES1_CON_MAGNETIC_ID
 0x03

	)

89 
	#IEC958_AES1_CON_DAT
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x00Ë

	)

90 
	#IEC958_AES1_CON_VCR
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x08Ë

	)

91 
	#IEC958_AES1_CON_DCC
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x40Ë

	)

92 
	#IEC958_AES1_CON_MAGNETIC_DISC
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x18Ë

	)

93 
	#IEC958_AES1_CON_MAGNETIC_OTHER
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x78Ë

	)

94 
	#IEC958_AES1_CON_BROADCAST1_MASK
 0x07

	)

95 
	#IEC958_AES1_CON_BROADCAST1_ID
 0x04

	)

96 
	#IEC958_AES1_CON_DAB_JAPAN
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x00Ë

	)

97 
	#IEC958_AES1_CON_DAB_EUROPE
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x08Ë

	)

98 
	#IEC958_AES1_CON_DAB_USA
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x60Ë

	)

99 
	#IEC958_AES1_CON_SOFTWARE
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x40Ë

	)

100 
	#IEC958_AES1_CON_IEC62105
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x20Ë

	)

101 
	#IEC958_AES1_CON_BROADCAST1_OTHER
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x78Ë

	)

102 
	#IEC958_AES1_CON_BROADCAST2_MASK
 0x0‡

	)

103 
	#IEC958_AES1_CON_BROADCAST2_ID
 0x0ê

	)

104 
	#IEC958_AES1_CON_MUSICAL_MASK
 0x07

	)

105 
	#IEC958_AES1_CON_MUSICAL_ID
 0x05

	)

106 
	#IEC958_AES1_CON_SYNTHESIZER
 (
IEC958_AES1_CON_MUSICAL_ID
|0x00Ë

	)

107 
	#IEC958_AES1_CON_MICROPHONE
 (
IEC958_AES1_CON_MUSICAL_ID
|0x08Ë

	)

108 
	#IEC958_AES1_CON_MUSICAL_OTHER
 (
IEC958_AES1_CON_MUSICAL_ID
|0x78Ë

	)

109 
	#IEC958_AES1_CON_ADC_MASK
 0x1‡

	)

110 
	#IEC958_AES1_CON_ADC_ID
 0x06

	)

111 
	#IEC958_AES1_CON_ADC
 (
IEC958_AES1_CON_ADC_ID
|0x00Ë

	)

112 
	#IEC958_AES1_CON_ADC_OTHER
 (
IEC958_AES1_CON_ADC_ID
|0x60Ë

	)

113 
	#IEC958_AES1_CON_ADC_COPYRIGHT_MASK
 0x1‡

	)

114 
	#IEC958_AES1_CON_ADC_COPYRIGHT_ID
 0x16

	)

115 
	#IEC958_AES1_CON_ADC_COPYRIGHT
 (
IEC958_AES1_CON_ADC_COPYRIGHT_ID
|0x00Ë

	)

116 
	#IEC958_AES1_CON_ADC_COPYRIGHT_OTHER
 (
IEC958_AES1_CON_ADC_COPYRIGHT_ID
|0x60Ë

	)

117 
	#IEC958_AES1_CON_SOLIDMEM_MASK
 0x0‡

	)

118 
	#IEC958_AES1_CON_SOLIDMEM_ID
 0x08

	)

119 
	#IEC958_AES1_CON_SOLIDMEM_DIGITAL_RECORDER_PLAYER
 (
IEC958_AES1_CON_SOLIDMEM_ID
|0x00Ë

	)

120 
	#IEC958_AES1_CON_SOLIDMEM_OTHER
 (
IEC958_AES1_CON_SOLIDMEM_ID
|0x70Ë

	)

121 
	#IEC958_AES1_CON_EXPERIMENTAL
 0x40

	)

122 
	#IEC958_AES1_CON_ORIGINAL
 (1<<7Ë

	)

123 
	#IEC958_AES2_PRO_SBITS
 (7<<0Ë

	)

124 
	#IEC958_AES2_PRO_SBITS_20
 (2<<0Ë

	)

125 
	#IEC958_AES2_PRO_SBITS_24
 (4<<0Ë

	)

126 
	#IEC958_AES2_PRO_SBITS_UDEF
 (6<<0Ë

	)

127 
	#IEC958_AES2_PRO_WORDLEN
 (7<<3Ë

	)

128 
	#IEC958_AES2_PRO_WORDLEN_NOTID
 (0<<3Ë

	)

129 
	#IEC958_AES2_PRO_WORDLEN_22_18
 (2<<3Ë

	)

130 
	#IEC958_AES2_PRO_WORDLEN_23_19
 (4<<3Ë

	)

131 
	#IEC958_AES2_PRO_WORDLEN_24_20
 (5<<3Ë

	)

132 
	#IEC958_AES2_PRO_WORDLEN_20_16
 (6<<3Ë

	)

133 
	#IEC958_AES2_CON_SOURCE
 (15<<0Ë

	)

134 
	#IEC958_AES2_CON_SOURCE_UNSPEC
 (0<<0Ë

	)

135 
	#IEC958_AES2_CON_CHANNEL
 (15<<4Ë

	)

136 
	#IEC958_AES2_CON_CHANNEL_UNSPEC
 (0<<4Ë

	)

137 
	#IEC958_AES3_CON_FS
 (15<<0Ë

	)

138 
	#IEC958_AES3_CON_FS_44100
 (0<<0Ë

	)

139 
	#IEC958_AES3_CON_FS_NOTID
 (1<<0Ë

	)

140 
	#IEC958_AES3_CON_FS_48000
 (2<<0Ë

	)

141 
	#IEC958_AES3_CON_FS_32000
 (3<<0Ë

	)

142 
	#IEC958_AES3_CON_FS_22050
 (4<<0Ë

	)

143 
	#IEC958_AES3_CON_FS_24000
 (6<<0Ë

	)

144 
	#IEC958_AES3_CON_FS_88200
 (8<<0Ë

	)

145 
	#IEC958_AES3_CON_FS_768000
 (9<<0Ë

	)

146 
	#IEC958_AES3_CON_FS_96000
 (10<<0Ë

	)

147 
	#IEC958_AES3_CON_FS_176400
 (12<<0Ë

	)

148 
	#IEC958_AES3_CON_FS_192000
 (14<<0Ë

	)

149 
	#IEC958_AES3_CON_CLOCK
 (3<<4Ë

	)

150 
	#IEC958_AES3_CON_CLOCK_1000PPM
 (0<<4Ë

	)

151 
	#IEC958_AES3_CON_CLOCK_50PPM
 (1<<4Ë

	)

152 
	#IEC958_AES3_CON_CLOCK_VARIABLE
 (2<<4Ë

	)

153 
	#IEC958_AES4_CON_MAX_WORDLEN_24
 (1<<0Ë

	)

154 
	#IEC958_AES4_CON_WORDLEN
 (7<<1Ë

	)

155 
	#IEC958_AES4_CON_WORDLEN_NOTID
 (0<<1Ë

	)

156 
	#IEC958_AES4_CON_WORDLEN_20_16
 (1<<1Ë

	)

157 
	#IEC958_AES4_CON_WORDLEN_22_18
 (2<<1Ë

	)

158 
	#IEC958_AES4_CON_WORDLEN_23_19
 (4<<1Ë

	)

159 
	#IEC958_AES4_CON_WORDLEN_24_20
 (5<<1Ë

	)

160 
	#IEC958_AES4_CON_WORDLEN_21_17
 (6<<1Ë

	)

161 
	#IEC958_AES4_CON_ORIGFS
 (15<<4Ë

	)

162 
	#IEC958_AES4_CON_ORIGFS_NOTID
 (0<<4Ë

	)

163 
	#IEC958_AES4_CON_ORIGFS_192000
 (1<<4Ë

	)

164 
	#IEC958_AES4_CON_ORIGFS_12000
 (2<<4Ë

	)

165 
	#IEC958_AES4_CON_ORIGFS_176400
 (3<<4Ë

	)

166 
	#IEC958_AES4_CON_ORIGFS_96000
 (5<<4Ë

	)

167 
	#IEC958_AES4_CON_ORIGFS_8000
 (6<<4Ë

	)

168 
	#IEC958_AES4_CON_ORIGFS_88200
 (7<<4Ë

	)

169 
	#IEC958_AES4_CON_ORIGFS_16000
 (8<<4Ë

	)

170 
	#IEC958_AES4_CON_ORIGFS_24000
 (9<<4Ë

	)

171 
	#IEC958_AES4_CON_ORIGFS_11025
 (10<<4Ë

	)

172 
	#IEC958_AES4_CON_ORIGFS_22050
 (11<<4Ë

	)

173 
	#IEC958_AES4_CON_ORIGFS_32000
 (12<<4Ë

	)

174 
	#IEC958_AES4_CON_ORIGFS_48000
 (13<<4Ë

	)

175 
	#IEC958_AES4_CON_ORIGFS_44100
 (15<<4Ë

	)

176 
	#IEC958_AES5_CON_CGMSA
 (3<<0Ë

	)

177 
	#IEC958_AES5_CON_CGMSA_COPYFREELY
 (0<<0Ë

	)

178 
	#IEC958_AES5_CON_CGMSA_COPYONCE
 (1<<0Ë

	)

179 
	#IEC958_AES5_CON_CGMSA_COPYNOMORE
 (2<<0Ë

	)

180 
	#IEC958_AES5_CON_CGMSA_COPYNEVER
 (3<<0Ë

	)

190 
	#MIDI_CHANNELS
 16

	)

191 
	#MIDI_GM_DRUM_CHANNEL
 (10-1Ë

	)

199 
	#MIDI_CMD_NOTE_OFF
 0x80

	)

200 
	#MIDI_CMD_NOTE_ON
 0x90

	)

201 
	#MIDI_CMD_NOTE_PRESSURE
 0xa0

	)

202 
	#MIDI_CMD_CONTROL
 0xb0

	)

203 
	#MIDI_CMD_PGM_CHANGE
 0xc0

	)

204 
	#MIDI_CMD_CHANNEL_PRESSURE
 0xd0

	)

205 
	#MIDI_CMD_BENDER
 0xe0

	)

207 
	#MIDI_CMD_COMMON_SYSEX
 0xf0

	)

208 
	#MIDI_CMD_COMMON_MTC_QUARTER
 0xf1

	)

209 
	#MIDI_CMD_COMMON_SONG_POS
 0xf2

	)

210 
	#MIDI_CMD_COMMON_SONG_SELECT
 0xf3

	)

211 
	#MIDI_CMD_COMMON_TUNE_REQUEST
 0xf6

	)

212 
	#MIDI_CMD_COMMON_SYSEX_END
 0xf7

	)

213 
	#MIDI_CMD_COMMON_CLOCK
 0xf8

	)

214 
	#MIDI_CMD_COMMON_START
 0xÁ

	)

215 
	#MIDI_CMD_COMMON_CONTINUE
 0xfb

	)

216 
	#MIDI_CMD_COMMON_STOP
 0xf¯

	)

217 
	#MIDI_CMD_COMMON_SENSING
 0x„

	)

218 
	#MIDI_CMD_COMMON_RESET
 0xf‡

	)

228 
	#MIDI_CTL_MSB_BANK
 0x00

	)

229 
	#MIDI_CTL_MSB_MODWHEEL
 0x01

	)

230 
	#MIDI_CTL_MSB_BREATH
 0x02

	)

231 
	#MIDI_CTL_MSB_FOOT
 0x04

	)

232 
	#MIDI_CTL_MSB_PORTAMENTO_TIME
 0x05

	)

233 
	#MIDI_CTL_MSB_DATA_ENTRY
 0x06

	)

234 
	#MIDI_CTL_MSB_MAIN_VOLUME
 0x07

	)

235 
	#MIDI_CTL_MSB_BALANCE
 0x08

	)

236 
	#MIDI_CTL_MSB_PAN
 0x0®

	)

237 
	#MIDI_CTL_MSB_EXPRESSION
 0x0b

	)

238 
	#MIDI_CTL_MSB_EFFECT1
 0x0¯

	)

239 
	#MIDI_CTL_MSB_EFFECT2
 0x0d

	)

240 
	#MIDI_CTL_MSB_GENERAL_PURPOSE1
 0x10

	)

241 
	#MIDI_CTL_MSB_GENERAL_PURPOSE2
 0x11

	)

242 
	#MIDI_CTL_MSB_GENERAL_PURPOSE3
 0x12

	)

243 
	#MIDI_CTL_MSB_GENERAL_PURPOSE4
 0x13

	)

244 
	#MIDI_CTL_LSB_BANK
 0x20

	)

245 
	#MIDI_CTL_LSB_MODWHEEL
 0x21

	)

246 
	#MIDI_CTL_LSB_BREATH
 0x22

	)

247 
	#MIDI_CTL_LSB_FOOT
 0x24

	)

248 
	#MIDI_CTL_LSB_PORTAMENTO_TIME
 0x25

	)

249 
	#MIDI_CTL_LSB_DATA_ENTRY
 0x26

	)

250 
	#MIDI_CTL_LSB_MAIN_VOLUME
 0x27

	)

251 
	#MIDI_CTL_LSB_BALANCE
 0x28

	)

252 
	#MIDI_CTL_LSB_PAN
 0x2®

	)

253 
	#MIDI_CTL_LSB_EXPRESSION
 0x2b

	)

254 
	#MIDI_CTL_LSB_EFFECT1
 0x2¯

	)

255 
	#MIDI_CTL_LSB_EFFECT2
 0x2d

	)

256 
	#MIDI_CTL_LSB_GENERAL_PURPOSE1
 0x30

	)

257 
	#MIDI_CTL_LSB_GENERAL_PURPOSE2
 0x31

	)

258 
	#MIDI_CTL_LSB_GENERAL_PURPOSE3
 0x32

	)

259 
	#MIDI_CTL_LSB_GENERAL_PURPOSE4
 0x33

	)

260 
	#MIDI_CTL_SUSTAIN
 0x40

	)

261 
	#MIDI_CTL_PORTAMENTO
 0x41

	)

262 
	#MIDI_CTL_SOSTENUTO
 0x42

	)

263 
	#MIDI_CTL_SUSTENUTO
 0x42

	)

264 
	#MIDI_CTL_SOFT_PEDAL
 0x43

	)

265 
	#MIDI_CTL_LEGATO_FOOTSWITCH
 0x44

	)

266 
	#MIDI_CTL_HOLD2
 0x45

	)

267 
	#MIDI_CTL_SC1_SOUND_VARIATION
 0x46

	)

268 
	#MIDI_CTL_SC2_TIMBRE
 0x47

	)

269 
	#MIDI_CTL_SC3_RELEASE_TIME
 0x48

	)

270 
	#MIDI_CTL_SC4_ATTACK_TIME
 0x49

	)

271 
	#MIDI_CTL_SC5_BRIGHTNESS
 0x4®

	)

272 
	#MIDI_CTL_SC6
 0x4b

	)

273 
	#MIDI_CTL_SC7
 0x4¯

	)

274 
	#MIDI_CTL_SC8
 0x4d

	)

275 
	#MIDI_CTL_SC9
 0x4ê

	)

276 
	#MIDI_CTL_SC10
 0x4‡

	)

277 
	#MIDI_CTL_GENERAL_PURPOSE5
 0x50

	)

278 
	#MIDI_CTL_GENERAL_PURPOSE6
 0x51

	)

279 
	#MIDI_CTL_GENERAL_PURPOSE7
 0x52

	)

280 
	#MIDI_CTL_GENERAL_PURPOSE8
 0x53

	)

281 
	#MIDI_CTL_PORTAMENTO_CONTROL
 0x54

	)

282 
	#MIDI_CTL_E1_REVERB_DEPTH
 0x5b

	)

283 
	#MIDI_CTL_E2_TREMOLO_DEPTH
 0x5¯

	)

284 
	#MIDI_CTL_E3_CHORUS_DEPTH
 0x5d

	)

285 
	#MIDI_CTL_E4_DETUNE_DEPTH
 0x5ê

	)

286 
	#MIDI_CTL_E5_PHASER_DEPTH
 0x5‡

	)

287 
	#MIDI_CTL_DATA_INCREMENT
 0x60

	)

288 
	#MIDI_CTL_DATA_DECREMENT
 0x61

	)

289 
	#MIDI_CTL_NONREG_PARM_NUM_LSB
 0x62

	)

290 
	#MIDI_CTL_NONREG_PARM_NUM_MSB
 0x63

	)

291 
	#MIDI_CTL_REGIST_PARM_NUM_LSB
 0x64

	)

292 
	#MIDI_CTL_REGIST_PARM_NUM_MSB
 0x65

	)

293 
	#MIDI_CTL_ALL_SOUNDS_OFF
 0x78

	)

294 
	#MIDI_CTL_RESET_CONTROLLERS
 0x79

	)

295 
	#MIDI_CTL_LOCAL_CONTROL_SWITCH
 0x7®

	)

296 
	#MIDI_CTL_ALL_NOTES_OFF
 0x7b

	)

297 
	#MIDI_CTL_OMNI_OFF
 0x7¯

	)

298 
	#MIDI_CTL_OMNI_ON
 0x7d

	)

299 
	#MIDI_CTL_MONO1
 0x7ê

	)

300 
	#MIDI_CTL_MONO2
 0x7‡

	)

306 #ifde‡
__˝lu•lus


	@/usr/include/alsa/conf.h

28 #i‚de‡
__ALSA_CONF_H


29 
	#__ALSA_CONF_H


	)

31 #ifde‡
__˝lu•lus


43 
	#SND_CONFIG_DLSYM_VERSION_EVALUATE
 
_dlsym_c⁄fig_evÆu©e_001


	)

45 
	#SND_CONFIG_DLSYM_VERSION_HOOK
 
_dlsym_c⁄fig_hook_001


	)

48 
	e_¢d_c⁄fig_ty≥
 {

50 
SND_CONFIG_TYPE_INTEGER
,

52 
SND_CONFIG_TYPE_INTEGER64
,

54 
SND_CONFIG_TYPE_REAL
,

56 
SND_CONFIG_TYPE_STRING
,

58 
SND_CONFIG_TYPE_POINTER
,

60 
SND_CONFIG_TYPE_COMPOUND
 = 1024

61 } 
	t¢d_c⁄fig_ty≥_t
;

69 
_¢d_c⁄fig
 
	t¢d_c⁄fig_t
;

77 
_¢d_c⁄fig_ôî©‹
 *
	t¢d_c⁄fig_ôî©‹_t
;

83 
_¢d_c⁄fig_upd©e
 
	t¢d_c⁄fig_upd©e_t
;

85 
¢d_c⁄fig_t
 *
¢d_c⁄fig
;

87 
¢d_c⁄fig_t›
(
¢d_c⁄fig_t
 **
c⁄fig
);

89 
¢d_c⁄fig_lﬂd
(
¢d_c⁄fig_t
 *
c⁄fig
, 
¢d_öput_t
 *
ö
);

90 
¢d_c⁄fig_lﬂd_ovîride
(
¢d_c⁄fig_t
 *
c⁄fig
, 
¢d_öput_t
 *
ö
);

91 
¢d_c⁄fig_ßve
(
¢d_c⁄fig_t
 *
c⁄fig
, 
¢d_ouçut_t
 *
out
);

92 
¢d_c⁄fig_upd©e
();

93 
¢d_c⁄fig_upd©e_r
(
¢d_c⁄fig_t
 **
t›
, 
¢d_c⁄fig_upd©e_t
 **
upd©e
, c⁄° *
∑th
);

94 
¢d_c⁄fig_upd©e_‰ì
(
¢d_c⁄fig_upd©e_t
 *
upd©e
);

95 
¢d_c⁄fig_upd©e_‰ì_globÆ
();

97 
¢d_c⁄fig_upd©e_ªf
(
¢d_c⁄fig_t
 **
t›
);

98 
¢d_c⁄fig_ªf
(
¢d_c⁄fig_t
 *
t›
);

99 
¢d_c⁄fig_uƒef
(
¢d_c⁄fig_t
 *
t›
);

101 
¢d_c⁄fig_£¨ch
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
key
,

102 
¢d_c⁄fig_t
 **
ªsu…
);

103 
¢d_c⁄fig_£¨chv
(
¢d_c⁄fig_t
 *
c⁄fig
,

104 
¢d_c⁄fig_t
 **
ªsu…
, ...);

105 
¢d_c⁄fig_£¨ch_deföôi⁄
(
¢d_c⁄fig_t
 *
c⁄fig
,

106 c⁄° *
ba£
, c⁄° *
key
,

107 
¢d_c⁄fig_t
 **
ªsu…
);

109 
¢d_c⁄fig_ex∑nd
(
¢d_c⁄fig_t
 *
c⁄fig
, snd_c⁄fig_à*
roŸ
,

110 c⁄° *
¨gs
, 
¢d_c⁄fig_t
 *
¥iv©e_d©a
,

111 
¢d_c⁄fig_t
 **
ªsu…
);

112 
¢d_c⁄fig_evÆu©e
(
¢d_c⁄fig_t
 *
c⁄fig
, snd_c⁄fig_à*
roŸ
,

113 
¢d_c⁄fig_t
 *
¥iv©e_d©a
, snd_c⁄fig_à**
ªsu…
);

115 
¢d_c⁄fig_add
(
¢d_c⁄fig_t
 *
c⁄fig
, snd_c⁄fig_à*
Àaf
);

116 
¢d_c⁄fig_dñëe
(
¢d_c⁄fig_t
 *
c⁄fig
);

117 
¢d_c⁄fig_dñëe_compound_membîs
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
);

118 
¢d_c⁄fig_c›y
(
¢d_c⁄fig_t
 **
d°
, snd_c⁄fig_à*
§c
);

120 
¢d_c⁄fig_make
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
,

121 
¢d_c⁄fig_ty≥_t
 
ty≥
);

122 
¢d_c⁄fig_make_öãgî
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

123 
¢d_c⁄fig_make_öãgî64
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

124 
¢d_c⁄fig_make_ªÆ
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

125 
¢d_c⁄fig_make_°rög
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

126 
¢d_c⁄fig_make_poöãr
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

127 
¢d_c⁄fig_make_compound
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, 
joö
);

129 
¢d_c⁄fig_imake_öãgî
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° 
vÆue
);

130 
¢d_c⁄fig_imake_öãgî64
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° 
vÆue
);

131 
¢d_c⁄fig_imake_ªÆ
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° 
vÆue
);

132 
¢d_c⁄fig_imake_°rög
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° *
ascii
);

133 
¢d_c⁄fig_imake_ß„_°rög
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° *
ascii
);

134 
¢d_c⁄fig_imake_poöãr
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° *
±r
);

136 
¢d_c⁄fig_ty≥_t
 
¢d_c⁄fig_gë_ty≥
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
);

138 
¢d_c⁄fig_£t_id
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
id
);

139 
¢d_c⁄fig_£t_öãgî
(
¢d_c⁄fig_t
 *
c⁄fig
, 
vÆue
);

140 
¢d_c⁄fig_£t_öãgî64
(
¢d_c⁄fig_t
 *
c⁄fig
, 
vÆue
);

141 
¢d_c⁄fig_£t_ªÆ
(
¢d_c⁄fig_t
 *
c⁄fig
, 
vÆue
);

142 
¢d_c⁄fig_£t_°rög
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
vÆue
);

143 
¢d_c⁄fig_£t_ascii
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
ascii
);

144 
¢d_c⁄fig_£t_poöãr
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
±r
);

145 
¢d_c⁄fig_gë_id
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° **
vÆue
);

146 
¢d_c⁄fig_gë_öãgî
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

147 
¢d_c⁄fig_gë_öãgî64
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

148 
¢d_c⁄fig_gë_ªÆ
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

149 
¢d_c⁄fig_gë_úól
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

150 
¢d_c⁄fig_gë_°rög
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° **
vÆue
);

151 
¢d_c⁄fig_gë_ascii
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, **
vÆue
);

152 
¢d_c⁄fig_gë_poöãr
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° **
vÆue
);

153 
¢d_c⁄fig_ã°_id
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
id
);

155 
¢d_c⁄fig_ôî©‹_t
 
¢d_c⁄fig_ôî©‹_fú°
(c⁄° 
¢d_c⁄fig_t
 *
node
);

156 
¢d_c⁄fig_ôî©‹_t
 
¢d_c⁄fig_ôî©‹_√xt
(c⁄° snd_c⁄fig_ôî©‹_à
ôî©‹
);

157 
¢d_c⁄fig_ôî©‹_t
 
¢d_c⁄fig_ôî©‹_íd
(c⁄° 
¢d_c⁄fig_t
 *
node
);

158 
¢d_c⁄fig_t
 *
¢d_c⁄fig_ôî©‹_íåy
(c⁄° 
¢d_c⁄fig_ôî©‹_t
 
ôî©‹
);

177 
	#¢d_c⁄fig_f‹_óch
(
pos
, 
√xt
, 
node
) \

178 
pos
 = 
	`¢d_c⁄fig_ôî©‹_fú°
(
node
), 
√xt
 = 
	`¢d_c⁄fig_ôî©‹_√xt
’os);Öo†!
	`¢d_c⁄fig_ôî©‹_íd
“ode);Öo†√xt,Çexà¢d_c⁄fig_ôî©‹_√xt’os))

	)

182 
¢d_c⁄fig_gë_boﬁ_ascii
(c⁄° *
ascii
);

183 
¢d_c⁄fig_gë_boﬁ
(c⁄° 
¢d_c⁄fig_t
 *
c⁄f
);

184 
¢d_c⁄fig_gë_˘l_iÁ˚_ascii
(c⁄° *
ascii
);

185 
¢d_c⁄fig_gë_˘l_iÁ˚
(c⁄° 
¢d_c⁄fig_t
 *
c⁄f
);

192 
¢d_dev«me
 
	t¢d_dev«me_t
;

197 
	s¢d_dev«me
 {

198 *
	g«me
;

199 *
	gcommít
;

200 
¢d_dev«me_t
 *
	g√xt
;

203 
¢d_«mes_li°
(c⁄° *
iÁ˚
, 
¢d_dev«me_t
 **
li°
);

204 
¢d_«mes_li°_‰ì
(
¢d_dev«me_t
 *
li°
);

208 #ifde‡
__˝lu•lus


	@/usr/include/alsa/control.h

28 #i‚de‡
__ALSA_CONTROL_H


29 
	#__ALSA_CONTROL_H


	)

31 #ifde‡
__˝lu•lus


43 
	#SND_CONTROL_DLSYM_VERSION
 
_dlsym_c⁄åﬁ_001


	)

46 
	s¢d_´s_õc958
 {

47 
°©us
[24];

48 
subcode
[147];

49 
∑d
;

50 
dig_sub‰ame
[4];

51 } 
	t¢d_´s_õc958_t
;

54 
_¢d_˘l_ˇrd_öfo
 
	t¢d_˘l_ˇrd_öfo_t
;

57 
_¢d_˘l_ñem_id
 
	t¢d_˘l_ñem_id_t
;

60 
_¢d_˘l_ñem_li°
 
	t¢d_˘l_ñem_li°_t
;

63 
_¢d_˘l_ñem_öfo
 
	t¢d_˘l_ñem_öfo_t
;

66 
_¢d_˘l_ñem_vÆue
 
	t¢d_˘l_ñem_vÆue_t
;

69 
_¢d_˘l_evít
 
	t¢d_˘l_evít_t
;

72 
	e_¢d_˘l_ñem_ty≥
 {

74 
SND_CTL_ELEM_TYPE_NONE
 = 0,

76 
SND_CTL_ELEM_TYPE_BOOLEAN
,

78 
SND_CTL_ELEM_TYPE_INTEGER
,

80 
SND_CTL_ELEM_TYPE_ENUMERATED
,

82 
SND_CTL_ELEM_TYPE_BYTES
,

84 
SND_CTL_ELEM_TYPE_IEC958
,

86 
SND_CTL_ELEM_TYPE_INTEGER64
,

87 
SND_CTL_ELEM_TYPE_LAST
 = 
SND_CTL_ELEM_TYPE_INTEGER64


88 } 
	t¢d_˘l_ñem_ty≥_t
;

91 
	e_¢d_˘l_ñem_iÁ˚
 {

93 
SND_CTL_ELEM_IFACE_CARD
 = 0,

95 
SND_CTL_ELEM_IFACE_HWDEP
,

97 
SND_CTL_ELEM_IFACE_MIXER
,

99 
SND_CTL_ELEM_IFACE_PCM
,

101 
SND_CTL_ELEM_IFACE_RAWMIDI
,

103 
SND_CTL_ELEM_IFACE_TIMER
,

105 
SND_CTL_ELEM_IFACE_SEQUENCER
,

106 
SND_CTL_ELEM_IFACE_LAST
 = 
SND_CTL_ELEM_IFACE_SEQUENCER


107 } 
	t¢d_˘l_ñem_iÁ˚_t
;

110 
	e_¢d_˘l_evít_ty≥
 {

112 
SND_CTL_EVENT_ELEM
 = 0,

113 
SND_CTL_EVENT_LAST
 = 
SND_CTL_EVENT_ELEM


114 }
	t¢d_˘l_evít_ty≥_t
;

118 
	#SND_CTL_EVENT_MASK_REMOVE
 (~0U)

	)

120 
	#SND_CTL_EVENT_MASK_VALUE
 (1<<0)

	)

122 
	#SND_CTL_EVENT_MASK_INFO
 (1<<1)

	)

124 
	#SND_CTL_EVENT_MASK_ADD
 (1<<2)

	)

126 
	#SND_CTL_EVENT_MASK_TLV
 (1<<3)

	)

129 
	#SND_CTL_NAME_NONE
 ""

	)

131 
	#SND_CTL_NAME_PLAYBACK
 "Pœyback "

	)

133 
	#SND_CTL_NAME_CAPTURE
 "C≠tuª "

	)

136 
	#SND_CTL_NAME_IEC958_NONE
 ""

	)

138 
	#SND_CTL_NAME_IEC958_SWITCH
 "Swôch"

	)

140 
	#SND_CTL_NAME_IEC958_VOLUME
 "Vﬁume"

	)

142 
	#SND_CTL_NAME_IEC958_DEFAULT
 "DeÁu…"

	)

144 
	#SND_CTL_NAME_IEC958_MASK
 "Mask"

	)

146 
	#SND_CTL_NAME_IEC958_CON_MASK
 "C⁄ Mask"

	)

148 
	#SND_CTL_NAME_IEC958_PRO_MASK
 "PrÿMask"

	)

150 
	#SND_CTL_NAME_IEC958_PCM_STREAM
 "PCM Såóm"

	)

152 
	#SND_CTL_NAME_IEC958
(
ex∂
,
dúe˘i⁄
,
wh©
Ë"IEC958 "Éx∂ 
SND_CTL_NAME_
##dúe˘i⁄ 
SND_CTL_NAME_IEC958_
##
	)
what

155 
	#SND_CTL_POWER_MASK
 0xff00

	)

157 
	#SND_CTL_POWER_D0
 0x0000

	)

159 
	#SND_CTL_POWER_D1
 0x0100

	)

161 
	#SND_CTL_POWER_D2
 0x0200

	)

163 
	#SND_CTL_POWER_D3
 0x0300

	)

165 
	#SND_CTL_POWER_D3hŸ
 (
SND_CTL_POWER_D3
|0x0000)

	)

167 
	#SND_CTL_POWER_D3cﬁd
 (
SND_CTL_POWER_D3
|0x0001)

	)

170 
	#SND_CTL_TLVT_CONTAINER
 0x0000

	)

172 
	#SND_CTL_TLVT_DB_SCALE
 0x0001

	)

174 
	#SND_CTL_TLVT_DB_LINEAR
 0x0002

	)

176 
	#SND_CTL_TLVT_DB_RANGE
 0x0003

	)

178 
	#SND_CTL_TLVT_DB_MINMAX
 0x0004

	)

180 
	#SND_CTL_TLVT_DB_MINMAX_MUTE
 0x0005

	)

183 
	#SND_CTL_TLV_DB_GAIN_MUTE
 -9999999

	)

186 
	#SND_CTL_TLVT_CHMAP_FIXED
 0x00101

	)

188 
	#SND_CTL_TLVT_CHMAP_VAR
 0x00102

	)

190 
	#SND_CTL_TLVT_CHMAP_PAIRED
 0x00103

	)

193 
	e_¢d_˘l_ty≥
 {

195 
SND_CTL_TYPE_HW
,

197 
SND_CTL_TYPE_SHM
,

199 
SND_CTL_TYPE_INET
,

201 
SND_CTL_TYPE_EXT


202 } 
	t¢d_˘l_ty≥_t
;

205 
	#SND_CTL_NONBLOCK
 0x0001

	)

208 
	#SND_CTL_ASYNC
 0x0002

	)

211 
	#SND_CTL_READONLY
 0x0004

	)

214 
_¢d_˘l
 
	t¢d_˘l_t
;

217 
	#SND_SCTL_NOFREE
 0x0001

	)

220 
_¢d_s˘l
 
	t¢d_s˘l_t
;

222 
¢d_ˇrd_lﬂd
(
ˇrd
);

223 
¢d_ˇrd_√xt
(*
ˇrd
);

224 
¢d_ˇrd_gë_ödex
(c⁄° *
«me
);

225 
¢d_ˇrd_gë_«me
(
ˇrd
, **
«me
);

226 
¢d_ˇrd_gë_l⁄g«me
(
ˇrd
, **
«me
);

228 
¢d_devi˚_«me_höt
(
ˇrd
, c⁄° *
iÁ˚
, ***
höts
);

229 
¢d_devi˚_«me_‰ì_höt
(**
höts
);

230 *
¢d_devi˚_«me_gë_höt
(c⁄° *
höt
, c⁄° *
id
);

232 
¢d_˘l_›í
(
¢d_˘l_t
 **
˘l
, c⁄° *
«me
, 
mode
);

233 
¢d_˘l_›í_lc⁄f
(
¢d_˘l_t
 **
˘l
, c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

234 
¢d_˘l_›í_ÁŒback
(
¢d_˘l_t
 **
˘l
, 
¢d_c⁄fig_t
 *
roŸ
, c⁄° *
«me
, c⁄° *
‹ig_«me
, 
mode
);

235 
¢d_˘l_˛o£
(
¢d_˘l_t
 *
˘l
);

236 
¢d_˘l_n⁄block
(
¢d_˘l_t
 *
˘l
, 
n⁄block
);

237 
__ölöe__
 
¢d_˘l_ab‹t
(
¢d_˘l_t
 *
˘l
Ë{  
¢d_˘l_n⁄block
(ctl, 2); }

238 
¢d_async_add_˘l_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
¢d_˘l_t
 *
˘l
,

239 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

240 
¢d_˘l_t
 *
¢d_async_h™dÀr_gë_˘l
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

241 
¢d_˘l_pﬁl_des¸ùt‹s_cou¡
(
¢d_˘l_t
 *
˘l
);

242 
¢d_˘l_pﬁl_des¸ùt‹s
(
¢d_˘l_t
 *
˘l
, 
pﬁlfd
 *
pfds
, 
•a˚
);

243 
¢d_˘l_pﬁl_des¸ùt‹s_ªvíts
(
¢d_˘l_t
 *
˘l
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

244 
¢d_˘l_subs¸ibe_evíts
(
¢d_˘l_t
 *
˘l
, 
subs¸ibe
);

245 
¢d_˘l_ˇrd_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ˇrd_öfo_t
 *
öfo
);

246 
¢d_˘l_ñem_li°
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_li°_t
 *
li°
);

247 
¢d_˘l_ñem_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
);

248 
¢d_˘l_ñem_ªad
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_vÆue_t
 *
d©a
);

249 
¢d_˘l_ñem_wrôe
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_vÆue_t
 *
d©a
);

250 
¢d_˘l_ñem_lock
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_id_t
 *
id
);

251 
¢d_˘l_ñem_u∆ock
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_id_t
 *
id
);

252 
¢d_˘l_ñem_év_ªad
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

253 *
év
, 
év_size
);

254 
¢d_˘l_ñem_év_wrôe
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

255 c⁄° *
év
);

256 
¢d_˘l_ñem_év_comm™d
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

257 c⁄° *
év
);

258 #ifde‡
__ALSA_HWDEP_H


259 
¢d_˘l_hwdï_√xt_devi˚
(
¢d_˘l_t
 *
˘l
, * 
devi˚
);

260 
¢d_˘l_hwdï_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_hwdï_öfo_t
 * 
öfo
);

262 #ifde‡
__ALSA_PCM_H


263 
¢d_˘l_pcm_√xt_devi˚
(
¢d_˘l_t
 *
˘l
, *
devi˚
);

264 
¢d_˘l_pcm_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_pcm_öfo_t
 * 
öfo
);

265 
¢d_˘l_pcm_¥e„r_subdevi˚
(
¢d_˘l_t
 *
˘l
, 
subdev
);

267 #ifde‡
__ALSA_RAWMIDI_H


268 
¢d_˘l_øwmidi_√xt_devi˚
(
¢d_˘l_t
 *
˘l
, * 
devi˚
);

269 
¢d_˘l_øwmidi_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_øwmidi_öfo_t
 * 
öfo
);

270 
¢d_˘l_øwmidi_¥e„r_subdevi˚
(
¢d_˘l_t
 *
˘l
, 
subdev
);

272 
¢d_˘l_£t_powî_°©e
(
¢d_˘l_t
 *
˘l
, 
°©e
);

273 
¢d_˘l_gë_powî_°©e
(
¢d_˘l_t
 *
˘l
, *
°©e
);

275 
¢d_˘l_ªad
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_evít_t
 *
evít
);

276 
¢d_˘l_waô
(
¢d_˘l_t
 *
˘l
, 
timeout
);

277 c⁄° *
¢d_˘l_«me
(
¢d_˘l_t
 *
˘l
);

278 
¢d_˘l_ty≥_t
 
¢d_˘l_ty≥
(
¢d_˘l_t
 *
˘l
);

280 c⁄° *
¢d_˘l_ñem_ty≥_«me
(
¢d_˘l_ñem_ty≥_t
 
ty≥
);

281 c⁄° *
¢d_˘l_ñem_iÁ˚_«me
(
¢d_˘l_ñem_iÁ˚_t
 
iÁ˚
);

282 c⁄° *
¢d_˘l_evít_ty≥_«me
(
¢d_˘l_evít_ty≥_t
 
ty≥
);

284 
¢d_˘l_evít_ñem_gë_mask
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

285 
¢d_˘l_evít_ñem_gë_numid
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

286 
¢d_˘l_evít_ñem_gë_id
(c⁄° 
¢d_˘l_evít_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

287 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_evít_ñem_gë_öãrÁ˚
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

288 
¢d_˘l_evít_ñem_gë_devi˚
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

289 
¢d_˘l_evít_ñem_gë_subdevi˚
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

290 c⁄° *
¢d_˘l_evít_ñem_gë_«me
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

291 
¢d_˘l_evít_ñem_gë_ödex
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

293 
¢d_˘l_ñem_li°_Æloc_•a˚
(
¢d_˘l_ñem_li°_t
 *
obj
, 
íåõs
);

294 
¢d_˘l_ñem_li°_‰ì_•a˚
(
¢d_˘l_ñem_li°_t
 *
obj
);

296 *
¢d_˘l_ascii_ñem_id_gë
(
¢d_˘l_ñem_id_t
 *
id
);

297 
¢d_˘l_ascii_ñem_id_∑r£
(
¢d_˘l_ñem_id_t
 *
d°
, c⁄° *
°r
);

298 
¢d_˘l_ascii_vÆue_∑r£
(
¢d_˘l_t
 *
h™dÀ
,

299 
¢d_˘l_ñem_vÆue_t
 *
d°
,

300 
¢d_˘l_ñem_öfo_t
 *
öfo
,

301 c⁄° *
vÆue
);

303 
size_t
 
¢d_˘l_ñem_id_sizeof
();

308 
	#¢d_˘l_ñem_id_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_id
)

	)

309 
¢d_˘l_ñem_id_mÆloc
(
¢d_˘l_ñem_id_t
 **
±r
);

310 
¢d_˘l_ñem_id_‰ì
(
¢d_˘l_ñem_id_t
 *
obj
);

311 
¢d_˘l_ñem_id_˛ór
(
¢d_˘l_ñem_id_t
 *
obj
);

312 
¢d_˘l_ñem_id_c›y
(
¢d_˘l_ñem_id_t
 *
d°
, c⁄° snd_˘l_ñem_id_à*
§c
);

313 
¢d_˘l_ñem_id_gë_numid
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

314 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_id_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

315 
¢d_˘l_ñem_id_gë_devi˚
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

316 
¢d_˘l_ñem_id_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

317 c⁄° *
¢d_˘l_ñem_id_gë_«me
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

318 
¢d_˘l_ñem_id_gë_ödex
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

319 
¢d_˘l_ñem_id_£t_numid
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

320 
¢d_˘l_ñem_id_£t_öãrÁ˚
(
¢d_˘l_ñem_id_t
 *
obj
, 
¢d_˘l_ñem_iÁ˚_t
 
vÆ
);

321 
¢d_˘l_ñem_id_£t_devi˚
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

322 
¢d_˘l_ñem_id_£t_subdevi˚
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

323 
¢d_˘l_ñem_id_£t_«me
(
¢d_˘l_ñem_id_t
 *
obj
, c⁄° *
vÆ
);

324 
¢d_˘l_ñem_id_£t_ödex
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

326 
size_t
 
¢d_˘l_ˇrd_öfo_sizeof
();

331 
	#¢d_˘l_ˇrd_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ˇrd_öfo
)

	)

332 
¢d_˘l_ˇrd_öfo_mÆloc
(
¢d_˘l_ˇrd_öfo_t
 **
±r
);

333 
¢d_˘l_ˇrd_öfo_‰ì
(
¢d_˘l_ˇrd_öfo_t
 *
obj
);

334 
¢d_˘l_ˇrd_öfo_˛ór
(
¢d_˘l_ˇrd_öfo_t
 *
obj
);

335 
¢d_˘l_ˇrd_öfo_c›y
(
¢d_˘l_ˇrd_öfo_t
 *
d°
, c⁄° snd_˘l_ˇrd_öfo_à*
§c
);

336 
¢d_˘l_ˇrd_öfo_gë_ˇrd
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

337 c⁄° *
¢d_˘l_ˇrd_öfo_gë_id
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

338 c⁄° *
¢d_˘l_ˇrd_öfo_gë_drivî
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

339 c⁄° *
¢d_˘l_ˇrd_öfo_gë_«me
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

340 c⁄° *
¢d_˘l_ˇrd_öfo_gë_l⁄g«me
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

341 c⁄° *
¢d_˘l_ˇrd_öfo_gë_mixî«me
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

342 c⁄° *
¢d_˘l_ˇrd_öfo_gë_comp⁄íts
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

344 
size_t
 
¢d_˘l_evít_sizeof
();

349 
	#¢d_˘l_evít_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_evít
)

	)

350 
¢d_˘l_evít_mÆloc
(
¢d_˘l_evít_t
 **
±r
);

351 
¢d_˘l_evít_‰ì
(
¢d_˘l_evít_t
 *
obj
);

352 
¢d_˘l_evít_˛ór
(
¢d_˘l_evít_t
 *
obj
);

353 
¢d_˘l_evít_c›y
(
¢d_˘l_evít_t
 *
d°
, c⁄° snd_˘l_evít_à*
§c
);

354 
¢d_˘l_evít_ty≥_t
 
¢d_˘l_evít_gë_ty≥
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

356 
size_t
 
¢d_˘l_ñem_li°_sizeof
();

361 
	#¢d_˘l_ñem_li°_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_li°
)

	)

362 
¢d_˘l_ñem_li°_mÆloc
(
¢d_˘l_ñem_li°_t
 **
±r
);

363 
¢d_˘l_ñem_li°_‰ì
(
¢d_˘l_ñem_li°_t
 *
obj
);

364 
¢d_˘l_ñem_li°_˛ór
(
¢d_˘l_ñem_li°_t
 *
obj
);

365 
¢d_˘l_ñem_li°_c›y
(
¢d_˘l_ñem_li°_t
 *
d°
, c⁄° snd_˘l_ñem_li°_à*
§c
);

366 
¢d_˘l_ñem_li°_£t_off£t
(
¢d_˘l_ñem_li°_t
 *
obj
, 
vÆ
);

367 
¢d_˘l_ñem_li°_gë_u£d
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
);

368 
¢d_˘l_ñem_li°_gë_cou¡
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
);

369 
¢d_˘l_ñem_li°_gë_id
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
, 
¢d_˘l_ñem_id_t
 *
±r
);

370 
¢d_˘l_ñem_li°_gë_numid
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

371 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_li°_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

372 
¢d_˘l_ñem_li°_gë_devi˚
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

373 
¢d_˘l_ñem_li°_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

374 c⁄° *
¢d_˘l_ñem_li°_gë_«me
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

375 
¢d_˘l_ñem_li°_gë_ödex
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

377 
size_t
 
¢d_˘l_ñem_öfo_sizeof
();

382 
	#¢d_˘l_ñem_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_öfo
)

	)

383 
¢d_˘l_ñem_öfo_mÆloc
(
¢d_˘l_ñem_öfo_t
 **
±r
);

384 
¢d_˘l_ñem_öfo_‰ì
(
¢d_˘l_ñem_öfo_t
 *
obj
);

385 
¢d_˘l_ñem_öfo_˛ór
(
¢d_˘l_ñem_öfo_t
 *
obj
);

386 
¢d_˘l_ñem_öfo_c›y
(
¢d_˘l_ñem_öfo_t
 *
d°
, c⁄° snd_˘l_ñem_öfo_à*
§c
);

387 
¢d_˘l_ñem_ty≥_t
 
¢d_˘l_ñem_öfo_gë_ty≥
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

388 
¢d_˘l_ñem_öfo_is_ªadabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

389 
¢d_˘l_ñem_öfo_is_wrôabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

390 
¢d_˘l_ñem_öfo_is_vﬁ©ûe
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

391 
¢d_˘l_ñem_öfo_is_öa˘ive
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

392 
¢d_˘l_ñem_öfo_is_locked
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

393 
¢d_˘l_ñem_öfo_is_év_ªadabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

394 
¢d_˘l_ñem_öfo_is_év_wrôabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

395 
¢d_˘l_ñem_öfo_is_év_comm™dabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

396 
¢d_˘l_ñem_öfo_is_ow√r
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

397 
¢d_˘l_ñem_öfo_is_u£r
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

398 
pid_t
 
¢d_˘l_ñem_öfo_gë_ow√r
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

399 
¢d_˘l_ñem_öfo_gë_cou¡
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

400 
¢d_˘l_ñem_öfo_gë_mö
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

401 
¢d_˘l_ñem_öfo_gë_max
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

402 
¢d_˘l_ñem_öfo_gë_°ï
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

403 
¢d_˘l_ñem_öfo_gë_mö64
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

404 
¢d_˘l_ñem_öfo_gë_max64
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

405 
¢d_˘l_ñem_öfo_gë_°ï64
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

406 
¢d_˘l_ñem_öfo_gë_ôems
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

407 
¢d_˘l_ñem_öfo_£t_ôem
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

408 c⁄° *
¢d_˘l_ñem_öfo_gë_ôem_«me
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

409 
¢d_˘l_ñem_öfo_gë_dimísi⁄s
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

410 
¢d_˘l_ñem_öfo_gë_dimísi⁄
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
, 
idx
);

411 
¢d_˘l_ñem_öfo_£t_dimísi⁄
(
¢d_˘l_ñem_öfo_t
 *
öfo
,

412 c⁄° 
dimísi⁄
[4]);

413 
¢d_˘l_ñem_öfo_gë_id
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

414 
¢d_˘l_ñem_öfo_gë_numid
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

415 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_öfo_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

416 
¢d_˘l_ñem_öfo_gë_devi˚
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

417 
¢d_˘l_ñem_öfo_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

418 c⁄° *
¢d_˘l_ñem_öfo_gë_«me
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

419 
¢d_˘l_ñem_öfo_gë_ödex
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

420 
¢d_˘l_ñem_öfo_£t_id
(
¢d_˘l_ñem_öfo_t
 *
obj
, c⁄° 
¢d_˘l_ñem_id_t
 *
±r
);

421 
¢d_˘l_ñem_öfo_£t_numid
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

422 
¢d_˘l_ñem_öfo_£t_öãrÁ˚
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
¢d_˘l_ñem_iÁ˚_t
 
vÆ
);

423 
¢d_˘l_ñem_öfo_£t_devi˚
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

424 
¢d_˘l_ñem_öfo_£t_subdevi˚
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

425 
¢d_˘l_ñem_öfo_£t_«me
(
¢d_˘l_ñem_öfo_t
 *
obj
, c⁄° *
vÆ
);

426 
¢d_˘l_ñem_öfo_£t_ödex
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

428 
¢d_˘l_add_öãgî_ñem_£t
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
,

429 
ñemít_cou¡
,

430 
membî_cou¡
,

431 
mö
, 
max
, 
°ï
);

432 
¢d_˘l_add_öãgî64_ñem_£t
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
,

433 
ñemít_cou¡
,

434 
membî_cou¡
,

435 
mö
, 
max
,

436 
°ï
);

437 
¢d_˘l_add_boﬁón_ñem_£t
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
,

438 
ñemít_cou¡
,

439 
membî_cou¡
);

440 
¢d_˘l_add_íumî©ed_ñem_£t
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
,

441 
ñemít_cou¡
,

442 
membî_cou¡
,

443 
ôems
,

444 c⁄° *c⁄° 
œbñs
[]);

445 
¢d_˘l_add_byãs_ñem_£t
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
,

446 
ñemít_cou¡
,

447 
membî_cou¡
);

449 
¢d_˘l_ñem_add_öãgî
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
, 
imö
, 
imax
, 
i°ï
);

450 
¢d_˘l_ñem_add_öãgî64
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
, 
imö
, 
imax
, 
i°ï
);

451 
¢d_˘l_ñem_add_boﬁón
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
);

452 
¢d_˘l_ñem_add_íumî©ed
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
, 
ôems
, c⁄° *c⁄° 
«mes
[]);

453 
¢d_˘l_ñem_add_õc958
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
);

454 
¢d_˘l_ñem_ªmove
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_id_t
 *
id
);

456 
size_t
 
¢d_˘l_ñem_vÆue_sizeof
();

461 
	#¢d_˘l_ñem_vÆue_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_vÆue
)

	)

462 
¢d_˘l_ñem_vÆue_mÆloc
(
¢d_˘l_ñem_vÆue_t
 **
±r
);

463 
¢d_˘l_ñem_vÆue_‰ì
(
¢d_˘l_ñem_vÆue_t
 *
obj
);

464 
¢d_˘l_ñem_vÆue_˛ór
(
¢d_˘l_ñem_vÆue_t
 *
obj
);

465 
¢d_˘l_ñem_vÆue_c›y
(
¢d_˘l_ñem_vÆue_t
 *
d°
, c⁄° snd_˘l_ñem_vÆue_à*
§c
);

466 
¢d_˘l_ñem_vÆue_com∑ª
(
¢d_˘l_ñem_vÆue_t
 *
À·
, c⁄° snd_˘l_ñem_vÆue_à*
right
);

467 
¢d_˘l_ñem_vÆue_gë_id
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

468 
¢d_˘l_ñem_vÆue_gë_numid
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

469 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_vÆue_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

470 
¢d_˘l_ñem_vÆue_gë_devi˚
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

471 
¢d_˘l_ñem_vÆue_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

472 c⁄° *
¢d_˘l_ñem_vÆue_gë_«me
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

473 
¢d_˘l_ñem_vÆue_gë_ödex
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

474 
¢d_˘l_ñem_vÆue_£t_id
(
¢d_˘l_ñem_vÆue_t
 *
obj
, c⁄° 
¢d_˘l_ñem_id_t
 *
±r
);

475 
¢d_˘l_ñem_vÆue_£t_numid
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

476 
¢d_˘l_ñem_vÆue_£t_öãrÁ˚
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
¢d_˘l_ñem_iÁ˚_t
 
vÆ
);

477 
¢d_˘l_ñem_vÆue_£t_devi˚
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

478 
¢d_˘l_ñem_vÆue_£t_subdevi˚
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

479 
¢d_˘l_ñem_vÆue_£t_«me
(
¢d_˘l_ñem_vÆue_t
 *
obj
, c⁄° *
vÆ
);

480 
¢d_˘l_ñem_vÆue_£t_ödex
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

481 
¢d_˘l_ñem_vÆue_gë_boﬁón
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

482 
¢d_˘l_ñem_vÆue_gë_öãgî
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

483 
¢d_˘l_ñem_vÆue_gë_öãgî64
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

484 
¢d_˘l_ñem_vÆue_gë_íumî©ed
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

485 
¢d_˘l_ñem_vÆue_gë_byã
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

486 
¢d_˘l_ñem_vÆue_£t_boﬁón
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

487 
¢d_˘l_ñem_vÆue_£t_öãgî
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

488 
¢d_˘l_ñem_vÆue_£t_öãgî64
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

489 
¢d_˘l_ñem_vÆue_£t_íumî©ed
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

490 
¢d_˘l_ñem_vÆue_£t_byã
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

491 
¢d_˘l_ñem_£t_byãs
(
¢d_˘l_ñem_vÆue_t
 *
obj
, *
d©a
, 
size_t
 
size
);

492 c⁄° * 
¢d_˘l_ñem_vÆue_gë_byãs
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

493 
¢d_˘l_ñem_vÆue_gë_õc958
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
¢d_´s_õc958_t
 *
±r
);

494 
¢d_˘l_ñem_vÆue_£t_õc958
(
¢d_˘l_ñem_vÆue_t
 *
obj
, c⁄° 
¢d_´s_õc958_t
 *
±r
);

496 
¢d_év_∑r£_dB_öfo
(*
év
, 
év_size
,

497 **
db_évp
);

498 
¢d_év_gë_dB_ønge
(*
év
, 
øngemö
, 
øngemax
,

499 *
mö
, *
max
);

500 
¢d_év_c⁄vît_to_dB
(*
év
, 
øngemö
, 
øngemax
,

501 
vﬁume
, *
db_gaö
);

502 
¢d_év_c⁄vît_‰om_dB
(*
év
, 
øngemö
, 
øngemax
,

503 
db_gaö
, *
vÆue
, 
xdú
);

504 
¢d_˘l_gë_dB_ønge
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

505 *
mö
, *
max
);

506 
¢d_˘l_c⁄vît_to_dB
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

507 
vﬁume
, *
db_gaö
);

508 
¢d_˘l_c⁄vît_‰om_dB
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

509 
db_gaö
, *
vÆue
, 
xdú
);

520 
_¢d_h˘l_ñem
 
	t¢d_h˘l_ñem_t
;

523 
_¢d_h˘l
 
	t¢d_h˘l_t
;

531 (*
¢d_h˘l_com∑ª_t
)(c⁄° 
	t¢d_h˘l_ñem_t
 *
	te1
,

532 c⁄° 
	t¢d_h˘l_ñem_t
 *
	te2
);

533 
¢d_h˘l_com∑ª_Á°
(c⁄° 
¢d_h˘l_ñem_t
 *
c1
,

534 c⁄° 
¢d_h˘l_ñem_t
 *
c2
);

542 (*
¢d_h˘l_ˇŒback_t
)(
	t¢d_h˘l_t
 *
	th˘l
,

543 
	tmask
,

544 
	t¢d_h˘l_ñem_t
 *
	tñem
);

551 (*
¢d_h˘l_ñem_ˇŒback_t
)(
	t¢d_h˘l_ñem_t
 *
	tñem
,

552 
	tmask
);

554 
¢d_h˘l_›í
(
¢d_h˘l_t
 **
h˘l
, c⁄° *
«me
, 
mode
);

555 
¢d_h˘l_›í_˘l
(
¢d_h˘l_t
 **
h˘Õ
, 
¢d_˘l_t
 *
˘l
);

556 
¢d_h˘l_˛o£
(
¢d_h˘l_t
 *
h˘l
);

557 
¢d_h˘l_n⁄block
(
¢d_h˘l_t
 *
h˘l
, 
n⁄block
);

558 
__ölöe__
 
¢d_h˘l_ab‹t
(
¢d_h˘l_t
 *
h˘l
Ë{  
¢d_h˘l_n⁄block
(hctl, 2); }

559 
¢d_h˘l_pﬁl_des¸ùt‹s_cou¡
(
¢d_h˘l_t
 *
h˘l
);

560 
¢d_h˘l_pﬁl_des¸ùt‹s
(
¢d_h˘l_t
 *
h˘l
, 
pﬁlfd
 *
pfds
, 
•a˚
);

561 
¢d_h˘l_pﬁl_des¸ùt‹s_ªvíts
(
¢d_h˘l_t
 *
˘l
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

562 
¢d_h˘l_gë_cou¡
(
¢d_h˘l_t
 *
h˘l
);

563 
¢d_h˘l_£t_com∑ª
(
¢d_h˘l_t
 *
h˘l
, 
¢d_h˘l_com∑ª_t
 
hs‹t
);

564 
¢d_h˘l_ñem_t
 *
¢d_h˘l_fú°_ñem
(
¢d_h˘l_t
 *
h˘l
);

565 
¢d_h˘l_ñem_t
 *
¢d_h˘l_œ°_ñem
(
¢d_h˘l_t
 *
h˘l
);

566 
¢d_h˘l_ñem_t
 *
¢d_h˘l_föd_ñem
(
¢d_h˘l_t
 *
h˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
);

567 
¢d_h˘l_£t_ˇŒback
(
¢d_h˘l_t
 *
h˘l
, 
¢d_h˘l_ˇŒback_t
 
ˇŒback
);

568 
¢d_h˘l_£t_ˇŒback_¥iv©e
(
¢d_h˘l_t
 *
h˘l
, *
d©a
);

569 *
¢d_h˘l_gë_ˇŒback_¥iv©e
(
¢d_h˘l_t
 *
h˘l
);

570 
¢d_h˘l_lﬂd
(
¢d_h˘l_t
 *
h˘l
);

571 
¢d_h˘l_‰ì
(
¢d_h˘l_t
 *
h˘l
);

572 
¢d_h˘l_h™dÀ_evíts
(
¢d_h˘l_t
 *
h˘l
);

573 c⁄° *
¢d_h˘l_«me
(
¢d_h˘l_t
 *
h˘l
);

574 
¢d_h˘l_waô
(
¢d_h˘l_t
 *
h˘l
, 
timeout
);

575 
¢d_˘l_t
 *
¢d_h˘l_˘l
(
¢d_h˘l_t
 *
h˘l
);

577 
¢d_h˘l_ñem_t
 *
¢d_h˘l_ñem_√xt
(¢d_h˘l_ñem_à*
ñem
);

578 
¢d_h˘l_ñem_t
 *
¢d_h˘l_ñem_¥ev
(¢d_h˘l_ñem_à*
ñem
);

579 
¢d_h˘l_ñem_öfo
(
¢d_h˘l_ñem_t
 *
ñem
, 
¢d_˘l_ñem_öfo_t
 * 
öfo
);

580 
¢d_h˘l_ñem_ªad
(
¢d_h˘l_ñem_t
 *
ñem
, 
¢d_˘l_ñem_vÆue_t
 * 
vÆue
);

581 
¢d_h˘l_ñem_wrôe
(
¢d_h˘l_ñem_t
 *
ñem
, 
¢d_˘l_ñem_vÆue_t
 * 
vÆue
);

582 
¢d_h˘l_ñem_év_ªad
(
¢d_h˘l_ñem_t
 *
ñem
, *
év
, 
év_size
);

583 
¢d_h˘l_ñem_év_wrôe
(
¢d_h˘l_ñem_t
 *
ñem
, c⁄° *
év
);

584 
¢d_h˘l_ñem_év_comm™d
(
¢d_h˘l_ñem_t
 *
ñem
, c⁄° *
év
);

586 
¢d_h˘l_t
 *
¢d_h˘l_ñem_gë_h˘l
(
¢d_h˘l_ñem_t
 *
ñem
);

588 
¢d_h˘l_ñem_gë_id
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

589 
¢d_h˘l_ñem_gë_numid
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

590 
¢d_˘l_ñem_iÁ˚_t
 
¢d_h˘l_ñem_gë_öãrÁ˚
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

591 
¢d_h˘l_ñem_gë_devi˚
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

592 
¢d_h˘l_ñem_gë_subdevi˚
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

593 c⁄° *
¢d_h˘l_ñem_gë_«me
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

594 
¢d_h˘l_ñem_gë_ödex
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

595 
¢d_h˘l_ñem_£t_ˇŒback
(
¢d_h˘l_ñem_t
 *
obj
, 
¢d_h˘l_ñem_ˇŒback_t
 
vÆ
);

596 * 
¢d_h˘l_ñem_gë_ˇŒback_¥iv©e
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

597 
¢d_h˘l_ñem_£t_ˇŒback_¥iv©e
(
¢d_h˘l_ñem_t
 *
obj
, * 
vÆ
);

610 
¢d_s˘l_buûd
(
¢d_s˘l_t
 **
˘l
, 
¢d_˘l_t
 *
h™dÀ
, 
¢d_c⁄fig_t
 *
c⁄fig
,

611 
¢d_c⁄fig_t
 *
¥iv©e_d©a
, 
mode
);

612 
¢d_s˘l_‰ì
(
¢d_s˘l_t
 *
h™dÀ
);

613 
¢d_s˘l_ö°Æl
(
¢d_s˘l_t
 *
h™dÀ
);

614 
¢d_s˘l_ªmove
(
¢d_s˘l_t
 *
h™dÀ
);

618 #ifde‡
__˝lu•lus


	@/usr/include/alsa/error.h

28 #i‚de‡
__ALSA_ERROR_H


29 
	#__ALSA_ERROR_H


	)

31 #ifde‡
__˝lu•lus


41 
	#SND_ERROR_BEGIN
 500000

	)

42 
	#SND_ERROR_INCOMPATIBLE_VERSION
 (
SND_ERROR_BEGIN
+0Ë

	)

43 
	#SND_ERROR_ALISP_NIL
 (
SND_ERROR_BEGIN
+1Ë

	)

45 c⁄° *
¢d_°ªº‹
(
î∫um
);

59 (*
¢d_lib_îr‹_h™dÀr_t
)(c⁄° *
	tfûe
, 
	tlöe
, c⁄° *
	tfun˘i⁄
, 
	tîr
, c⁄° *
	tfmt
, ...) ;

60 
¢d_lib_îr‹_h™dÀr_t
 
¢d_lib_îr‹
;

61 
¢d_lib_îr‹_£t_h™dÀr
(
¢d_lib_îr‹_h™dÀr_t
 
h™dÀr
);

63 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 > 95)

64 
	#SNDERR
(...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 0, 
__VA_ARGS__
Ë

	)

65 
	#SYSERR
(...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 
î∫o
, 
__VA_ARGS__
Ë

	)

67 
	#SNDERR
(
¨gs
...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 0, ##¨gsË

	)

68 
	#SYSERR
(
¨gs
...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 
î∫o
, ##¨gsË

	)

73 #ifde‡
__˝lu•lus


78 (*
	t¢d_loˇl_îr‹_h™dÀr_t
)(c⁄° *
	tfûe
, 
	tlöe
,

79 c⁄° *
	tfunc
, 
	tîr
,

80 c⁄° *
	tfmt
, 
	tva_li°
 
	t¨g
);

82 
¢d_loˇl_îr‹_h™dÀr_t
 
	`¢d_lib_îr‹_£t_loˇl
(¢d_loˇl_îr‹_h™dÀr_à
func
);

	@/usr/include/alsa/global.h

28 #i‚de‡
__ALSA_GLOBAL_H_


29 
	#__ALSA_GLOBAL_H_


	)

32 
	~<time.h
>

34 #ifde‡
__˝lu•lus


47 c⁄° *
¢d_asoundlib_vîsi⁄
();

49 #i‚de‡
ATTRIBUTE_UNUSED


51 
	#ATTRIBUTE_UNUSED
 
	`__©åibuã__
 ((
__unu£d__
))

	)

54 #ifde‡
PIC


57 
	#__SND_DLSYM_VERSION
(
«me
, 
vîsi⁄
Ë
_
 ##Çamê## 
	)
version

62 
	#SND_DLSYM_BUILD_VERSION
(
«me
, 
vîsi⁄
Ë
	`__SND_DLSYM_VERSION
“ame, vîsi⁄);

	)

66 
	s¢d_dlsym_lök
 {

67 
¢d_dlsym_lök
 *
√xt
;

68 c⁄° *
dlsym_«me
;

69 c⁄° *
dlsym_±r
;

72 
¢d_dlsym_lök
 *
¢d_dlsym_°¨t
;

75 
	#__SND_DLSYM_VERSION
(
¥efix
, 
«me
, 
vîsi⁄
Ë
_
 ##Öªfix ##Çamê## 
	)
version

80 
	#SND_DLSYM_BUILD_VERSION
(
«me
, 
vîsi⁄
) \

81 
¢d_dlsym_lök
 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
); \

82 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_c⁄°ru˘‹_
, 
«me
, 
vîsi⁄
Ë(Ë
	`__©åibuã__
 ((
c⁄°ru˘‹
)); \

83 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_c⁄°ru˘‹_
, 
«me
, 
vîsi⁄
) () { \

84 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
).
√xt
 = 
¢d_dlsym_°¨t
; \

85 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
).
dlsym_«me
 = #name; \

86 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
).
dlsym_±r
 = (*)&name; \

87 
¢d_dlsym_°¨t
 = &
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
); \

88 }

	)

92 #i‚de‡
__STRING


94 
	#__STRING
(
x
Ë#x

	)

98 
	#SND_DLSYM_VERSION
(
vîsi⁄
Ë
	`__STRING
(vîsi⁄)

	)

100 *
¢d_dl›í
(c⁄° *
fûe
, 
mode
);

101 *
¢d_dlsym
(*
h™dÀ
, c⁄° *
«me
, c⁄° *
vîsi⁄
);

102 
¢d_dl˛o£
(*
h™dÀ
);

106 
	#__¢d_Æloˇ
(
±r
,
ty≥
Ëdÿ{ *±∏—y≥##
_t
 *Ë
	`Æloˇ
—y≥##
	`_sizeof
()); 
	`mem£t
(*±r, 0,Åy≥##_sizeof()); } 0)

	)

114 
_¢d_async_h™dÀr
 
	t¢d_async_h™dÀr_t
;

121 (*
	g¢d_async_ˇŒback_t
)(
	t¢d_async_h™dÀr_t
 *
	th™dÀr
);

123 
¢d_async_add_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
fd
,

124 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

125 
¢d_async_dñ_h™dÀr
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

126 
¢d_async_h™dÀr_gë_fd
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

127 
¢d_async_h™dÀr_gë_signo
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

128 *
¢d_async_h™dÀr_gë_ˇŒback_¥iv©e
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

130 
¢d_shm_¨ó
 *
¢d_shm_¨ó_¸óã
(
shmid
, *
±r
);

131 
¢d_shm_¨ó
 *
¢d_shm_¨ó_sh¨e
(¢d_shm_¨ó *
¨ó
);

132 
¢d_shm_¨ó_de°roy
(
¢d_shm_¨ó
 *
¨ó
);

134 
¢d_u£r_fûe
(c⁄° *
fûe
, **
ªsu…
);

136 #ifde‡
__GLIBC__


137 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_POSIX_SOURCE
)

138 
	stimevÆ
 {

139 
time_t
 
	gtv_£c
;

140 
	gtv_u£c
;

143 
	stime•ec
 {

144 
time_t
 
	gtv_£c
;

145 
	gtv_n£c
;

151 
timevÆ
 
	t¢d_time°amp_t
;

153 
time•ec
 
	t¢d_htime°amp_t
;

157 #ifde‡
__˝lu•lus


	@/usr/include/alsa/hwdep.h

28 #i‚de‡
__ALSA_HWDEP_H


29 
	#__ALSA_HWDEP_H


	)

31 #ifde‡
__˝lu•lus


42 
	#SND_HWDEP_DLSYM_VERSION
 
_dlsym_hwdï_001


	)

45 
_¢d_hwdï_öfo
 
	t¢d_hwdï_öfo_t
;

48 
_¢d_hwdï_d•_°©us
 
	t¢d_hwdï_d•_°©us_t
;

51 
_¢d_hwdï_d•_image
 
	t¢d_hwdï_d•_image_t
;

54 
	e_¢d_hwdï_iÁ˚
 {

55 
SND_HWDEP_IFACE_OPL2
 = 0,

56 
SND_HWDEP_IFACE_OPL3
,

57 
SND_HWDEP_IFACE_OPL4
,

58 
SND_HWDEP_IFACE_SB16CSP
,

59 
SND_HWDEP_IFACE_EMU10K1
,

60 
SND_HWDEP_IFACE_YSS225
,

61 
SND_HWDEP_IFACE_ICS2115
,

62 
SND_HWDEP_IFACE_SSCAPE
,

63 
SND_HWDEP_IFACE_VX
,

64 
SND_HWDEP_IFACE_MIXART
,

65 
SND_HWDEP_IFACE_USX2Y
,

66 
SND_HWDEP_IFACE_EMUX_WAVETABLE
,

67 
SND_HWDEP_IFACE_BLUETOOTH
,

68 
SND_HWDEP_IFACE_USX2Y_PCM
,

69 
SND_HWDEP_IFACE_PCXHR
,

70 
SND_HWDEP_IFACE_SB_RC
,

71 
SND_HWDEP_IFACE_HDA
,

72 
SND_HWDEP_IFACE_USB_STREAM
,

73 
SND_HWDEP_IFACE_FW_DICE
,

74 
SND_HWDEP_IFACE_FW_FIREWORKS
,

75 
SND_HWDEP_IFACE_FW_BEBOB
,

76 
SND_HWDEP_IFACE_FW_OXFW
,

77 
SND_HWDEP_IFACE_FW_DIGI00X
,

78 
SND_HWDEP_IFACE_FW_TASCAM
,

80 
SND_HWDEP_IFACE_LAST
 = 
SND_HWDEP_IFACE_FW_TASCAM


81 } 
	t¢d_hwdï_iÁ˚_t
;

84 
	#SND_HWDEP_OPEN_READ
 (
O_RDONLY
)

	)

86 
	#SND_HWDEP_OPEN_WRITE
 (
O_WRONLY
)

	)

88 
	#SND_HWDEP_OPEN_DUPLEX
 (
O_RDWR
)

	)

90 
	#SND_HWDEP_OPEN_NONBLOCK
 (
O_NONBLOCK
)

	)

93 
	e_¢d_hwdï_ty≥
 {

95 
SND_HWDEP_TYPE_HW
,

97 
SND_HWDEP_TYPE_SHM
,

99 
SND_HWDEP_TYPE_INET


100 } 
	t¢d_hwdï_ty≥_t
;

103 
_¢d_hwdï
 
	t¢d_hwdï_t
;

105 
¢d_hwdï_›í
(
¢d_hwdï_t
 **
hwdï
, c⁄° *
«me
, 
mode
);

106 
¢d_hwdï_˛o£
(
¢d_hwdï_t
 *
hwdï
);

107 
¢d_hwdï_pﬁl_des¸ùt‹s
(
¢d_hwdï_t
 *
hwdï
, 
pﬁlfd
 *
pfds
, 
•a˚
);

108 
¢d_hwdï_pﬁl_des¸ùt‹s_cou¡
(
¢d_hwdï_t
 *
hwdï
);

109 
¢d_hwdï_pﬁl_des¸ùt‹s_ªvíts
(
¢d_hwdï_t
 *
hwdï
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

110 
¢d_hwdï_n⁄block
(
¢d_hwdï_t
 *
hwdï
, 
n⁄block
);

111 
¢d_hwdï_öfo
(
¢d_hwdï_t
 *
hwdï
, 
¢d_hwdï_öfo_t
 * 
öfo
);

112 
¢d_hwdï_d•_°©us
(
¢d_hwdï_t
 *
hwdï
, 
¢d_hwdï_d•_°©us_t
 *
°©us
);

113 
¢d_hwdï_d•_lﬂd
(
¢d_hwdï_t
 *
hwdï
, 
¢d_hwdï_d•_image_t
 *
block
);

114 
¢d_hwdï_io˘l
(
¢d_hwdï_t
 *
hwdï
, 
ªque°
, * 
¨g
);

115 
ssize_t
 
¢d_hwdï_wrôe
(
¢d_hwdï_t
 *
hwdï
, c⁄° *
buf„r
, 
size_t
 
size
);

116 
ssize_t
 
¢d_hwdï_ªad
(
¢d_hwdï_t
 *
hwdï
, *
buf„r
, 
size_t
 
size
);

118 
size_t
 
¢d_hwdï_öfo_sizeof
();

120 
	#¢d_hwdï_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_hwdï_öfo
)

	)

121 
¢d_hwdï_öfo_mÆloc
(
¢d_hwdï_öfo_t
 **
±r
);

122 
¢d_hwdï_öfo_‰ì
(
¢d_hwdï_öfo_t
 *
obj
);

123 
¢d_hwdï_öfo_c›y
(
¢d_hwdï_öfo_t
 *
d°
, c⁄° snd_hwdï_öfo_à*
§c
);

125 
¢d_hwdï_öfo_gë_devi˚
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

126 
¢d_hwdï_öfo_gë_ˇrd
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

127 c⁄° *
¢d_hwdï_öfo_gë_id
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

128 c⁄° *
¢d_hwdï_öfo_gë_«me
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

129 
¢d_hwdï_iÁ˚_t
 
¢d_hwdï_öfo_gë_iÁ˚
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

130 
¢d_hwdï_öfo_£t_devi˚
(
¢d_hwdï_öfo_t
 *
obj
, 
vÆ
);

132 
size_t
 
¢d_hwdï_d•_°©us_sizeof
();

134 
	#¢d_hwdï_d•_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_hwdï_d•_°©us
)

	)

135 
¢d_hwdï_d•_°©us_mÆloc
(
¢d_hwdï_d•_°©us_t
 **
±r
);

136 
¢d_hwdï_d•_°©us_‰ì
(
¢d_hwdï_d•_°©us_t
 *
obj
);

137 
¢d_hwdï_d•_°©us_c›y
(
¢d_hwdï_d•_°©us_t
 *
d°
, c⁄° snd_hwdï_d•_°©us_à*
§c
);

139 
¢d_hwdï_d•_°©us_gë_vîsi⁄
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

140 c⁄° *
¢d_hwdï_d•_°©us_gë_id
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

141 
¢d_hwdï_d•_°©us_gë_num_d•s
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

142 
¢d_hwdï_d•_°©us_gë_d•_lﬂded
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

143 
¢d_hwdï_d•_°©us_gë_chù_ªady
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

145 
size_t
 
¢d_hwdï_d•_image_sizeof
();

147 
	#¢d_hwdï_d•_image_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_hwdï_d•_image
)

	)

148 
¢d_hwdï_d•_image_mÆloc
(
¢d_hwdï_d•_image_t
 **
±r
);

149 
¢d_hwdï_d•_image_‰ì
(
¢d_hwdï_d•_image_t
 *
obj
);

150 
¢d_hwdï_d•_image_c›y
(
¢d_hwdï_d•_image_t
 *
d°
, c⁄° snd_hwdï_d•_image_à*
§c
);

152 
¢d_hwdï_d•_image_gë_ödex
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

153 c⁄° *
¢d_hwdï_d•_image_gë_«me
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

154 c⁄° *
¢d_hwdï_d•_image_gë_image
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

155 
size_t
 
¢d_hwdï_d•_image_gë_Àngth
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

157 
¢d_hwdï_d•_image_£t_ödex
(
¢d_hwdï_d•_image_t
 *
obj
, 
_ödex
);

158 
¢d_hwdï_d•_image_£t_«me
(
¢d_hwdï_d•_image_t
 *
obj
, c⁄° *
«me
);

159 
¢d_hwdï_d•_image_£t_image
(
¢d_hwdï_d•_image_t
 *
obj
, *
buf„r
);

160 
¢d_hwdï_d•_image_£t_Àngth
(
¢d_hwdï_d•_image_t
 *
obj
, 
size_t
 
Àngth
);

164 #ifde‡
__˝lu•lus


	@/usr/include/alsa/input.h

28 #i‚de‡
__ALSA_INPUT_H


29 
	#__ALSA_INPUT_H


	)

31 #ifde‡
__˝lu•lus


54 
_¢d_öput
 
	t¢d_öput_t
;

57 
	e_¢d_öput_ty≥
 {

59 
SND_INPUT_STDIO
,

61 
SND_INPUT_BUFFER


62 } 
	t¢d_öput_ty≥_t
;

64 
¢d_öput_°dio_›í
(
¢d_öput_t
 **
öpuç
, c⁄° *
fûe
, c⁄° *
mode
);

65 
¢d_öput_°dio_©èch
(
¢d_öput_t
 **
öpuç
, 
FILE
 *
Â
, 
_˛o£
);

66 
¢d_öput_buf„r_›í
(
¢d_öput_t
 **
öpuç
, c⁄° *
buf„r
, 
ssize_t
 
size
);

67 
¢d_öput_˛o£
(
¢d_öput_t
 *
öput
);

68 
¢d_öput_sˇnf
(
¢d_öput_t
 *
öput
, c⁄° *
f‹m©
, ...)

69 #i‚de‡
DOC_HIDDEN


70 
__©åibuã__
 ((
f‹m©
 (
sˇnf
, 2, 3)))

73 *
¢d_öput_gës
(
¢d_öput_t
 *
öput
, *
°r
, 
size_t
 
size
);

74 
¢d_öput_gëc
(
¢d_öput_t
 *
öput
);

75 
¢d_öput_ungëc
(
¢d_öput_t
 *
öput
, 
c
);

79 #ifde‡
__˝lu•lus


	@/usr/include/alsa/mixer.h

28 #i‚de‡
__ALSA_MIXER_H


29 
	#__ALSA_MIXER_H


	)

31 #ifde‡
__˝lu•lus


42 
_¢d_mixî
 
	t¢d_mixî_t
;

44 
_¢d_mixî_˛ass
 
	t¢d_mixî_˛ass_t
;

46 
_¢d_mixî_ñem
 
	t¢d_mixî_ñem_t
;

55 (*
¢d_mixî_ˇŒback_t
)(
	t¢d_mixî_t
 *
	t˘l
,

56 
	tmask
,

57 
	t¢d_mixî_ñem_t
 *
	tñem
);

65 (*
¢d_mixî_ñem_ˇŒback_t
)(
	t¢d_mixî_ñem_t
 *
	tñem
,

66 
	tmask
);

74 (*
¢d_mixî_com∑ª_t
)(c⁄° 
	t¢d_mixî_ñem_t
 *
	te1
,

75 c⁄° 
	t¢d_mixî_ñem_t
 *
	te2
);

85 (*
¢d_mixî_evít_t
)(
	t¢d_mixî_˛ass_t
 *
	t˛ass_
, 
	tmask
,

86 
	t¢d_h˘l_ñem_t
 *
	thñem
, 
	t¢d_mixî_ñem_t
 *
	tmñem
);

90 
	e_¢d_mixî_ñem_ty≥
 {

92 
SND_MIXER_ELEM_SIMPLE
,

93 
SND_MIXER_ELEM_LAST
 = 
SND_MIXER_ELEM_SIMPLE


94 } 
	t¢d_mixî_ñem_ty≥_t
;

96 
¢d_mixî_›í
(
¢d_mixî_t
 **
mixî
, 
mode
);

97 
¢d_mixî_˛o£
(
¢d_mixî_t
 *
mixî
);

98 
¢d_mixî_ñem_t
 *
¢d_mixî_fú°_ñem
(
¢d_mixî_t
 *
mixî
);

99 
¢d_mixî_ñem_t
 *
¢d_mixî_œ°_ñem
(
¢d_mixî_t
 *
mixî
);

100 
¢d_mixî_h™dÀ_evíts
(
¢d_mixî_t
 *
mixî
);

101 
¢d_mixî_©èch
(
¢d_mixî_t
 *
mixî
, c⁄° *
«me
);

102 
¢d_mixî_©èch_h˘l
(
¢d_mixî_t
 *
mixî
, 
¢d_h˘l_t
 *
h˘l
);

103 
¢d_mixî_dëach
(
¢d_mixî_t
 *
mixî
, c⁄° *
«me
);

104 
¢d_mixî_dëach_h˘l
(
¢d_mixî_t
 *
mixî
, 
¢d_h˘l_t
 *
h˘l
);

105 
¢d_mixî_gë_h˘l
(
¢d_mixî_t
 *
mixî
, c⁄° *
«me
, 
¢d_h˘l_t
 **
h˘l
);

106 
¢d_mixî_pﬁl_des¸ùt‹s_cou¡
(
¢d_mixî_t
 *
mixî
);

107 
¢d_mixî_pﬁl_des¸ùt‹s
(
¢d_mixî_t
 *
mixî
, 
pﬁlfd
 *
pfds
, 
•a˚
);

108 
¢d_mixî_pﬁl_des¸ùt‹s_ªvíts
(
¢d_mixî_t
 *
mixî
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

109 
¢d_mixî_lﬂd
(
¢d_mixî_t
 *
mixî
);

110 
¢d_mixî_‰ì
(
¢d_mixî_t
 *
mixî
);

111 
¢d_mixî_waô
(
¢d_mixî_t
 *
mixî
, 
timeout
);

112 
¢d_mixî_£t_com∑ª
(
¢d_mixî_t
 *
mixî
, 
¢d_mixî_com∑ª_t
 
ms‹t
);

113 
¢d_mixî_£t_ˇŒback
(
¢d_mixî_t
 *
obj
, 
¢d_mixî_ˇŒback_t
 
vÆ
);

114 * 
¢d_mixî_gë_ˇŒback_¥iv©e
(c⁄° 
¢d_mixî_t
 *
obj
);

115 
¢d_mixî_£t_ˇŒback_¥iv©e
(
¢d_mixî_t
 *
obj
, * 
vÆ
);

116 
¢d_mixî_gë_cou¡
(c⁄° 
¢d_mixî_t
 *
obj
);

117 
¢d_mixî_˛ass_uƒegi°î
(
¢d_mixî_˛ass_t
 *
˛ss
);

119 
¢d_mixî_ñem_t
 *
¢d_mixî_ñem_√xt
(¢d_mixî_ñem_à*
ñem
);

120 
¢d_mixî_ñem_t
 *
¢d_mixî_ñem_¥ev
(¢d_mixî_ñem_à*
ñem
);

121 
¢d_mixî_ñem_£t_ˇŒback
(
¢d_mixî_ñem_t
 *
obj
, 
¢d_mixî_ñem_ˇŒback_t
 
vÆ
);

122 * 
¢d_mixî_ñem_gë_ˇŒback_¥iv©e
(c⁄° 
¢d_mixî_ñem_t
 *
obj
);

123 
¢d_mixî_ñem_£t_ˇŒback_¥iv©e
(
¢d_mixî_ñem_t
 *
obj
, * 
vÆ
);

124 
¢d_mixî_ñem_ty≥_t
 
¢d_mixî_ñem_gë_ty≥
(c⁄° 
¢d_mixî_ñem_t
 *
obj
);

126 
¢d_mixî_˛ass_ªgi°î
(
¢d_mixî_˛ass_t
 *
˛ass_
, 
¢d_mixî_t
 *
mixî
);

127 
¢d_mixî_ñem_√w
(
¢d_mixî_ñem_t
 **
ñem
,

128 
¢d_mixî_ñem_ty≥_t
 
ty≥
,

129 
com∑ª_weight
,

130 *
¥iv©e_d©a
,

131 (*
¥iv©e_‰ì
)(
¢d_mixî_ñem_t
 *
ñem
));

132 
¢d_mixî_ñem_add
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_˛ass_t
 *
˛ass_
);

133 
¢d_mixî_ñem_ªmove
(
¢d_mixî_ñem_t
 *
ñem
);

134 
¢d_mixî_ñem_‰ì
(
¢d_mixî_ñem_t
 *
ñem
);

135 
¢d_mixî_ñem_öfo
(
¢d_mixî_ñem_t
 *
ñem
);

136 
¢d_mixî_ñem_vÆue
(
¢d_mixî_ñem_t
 *
ñem
);

137 
¢d_mixî_ñem_©èch
(
¢d_mixî_ñem_t
 *
mñem
, 
¢d_h˘l_ñem_t
 *
hñem
);

138 
¢d_mixî_ñem_dëach
(
¢d_mixî_ñem_t
 *
mñem
, 
¢d_h˘l_ñem_t
 *
hñem
);

139 
¢d_mixî_ñem_em±y
(
¢d_mixî_ñem_t
 *
mñem
);

140 *
¢d_mixî_ñem_gë_¥iv©e
(c⁄° 
¢d_mixî_ñem_t
 *
mñem
);

142 
size_t
 
¢d_mixî_˛ass_sizeof
();

147 
	#¢d_mixî_˛ass_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_mixî_˛ass
)

	)

148 
¢d_mixî_˛ass_mÆloc
(
¢d_mixî_˛ass_t
 **
±r
);

149 
¢d_mixî_˛ass_‰ì
(
¢d_mixî_˛ass_t
 *
obj
);

150 
¢d_mixî_˛ass_c›y
(
¢d_mixî_˛ass_t
 *
d°
, c⁄° snd_mixî_˛ass_à*
§c
);

151 
¢d_mixî_t
 *
¢d_mixî_˛ass_gë_mixî
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

152 
¢d_mixî_evít_t
 
¢d_mixî_˛ass_gë_evít
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

153 *
¢d_mixî_˛ass_gë_¥iv©e
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

154 
¢d_mixî_com∑ª_t
 
¢d_mixî_˛ass_gë_com∑ª
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

155 
¢d_mixî_˛ass_£t_evít
(
¢d_mixî_˛ass_t
 *
˛ass_
, 
¢d_mixî_evít_t
 
evít
);

156 
¢d_mixî_˛ass_£t_¥iv©e
(
¢d_mixî_˛ass_t
 *
˛ass_
, *
¥iv©e_d©a
);

157 
¢d_mixî_˛ass_£t_¥iv©e_‰ì
(
¢d_mixî_˛ass_t
 *
˛ass_
, (*
¥iv©e_‰ì
)(snd_mixer_class_t *));

158 
¢d_mixî_˛ass_£t_com∑ª
(
¢d_mixî_˛ass_t
 *
˛ass_
, 
¢d_mixî_com∑ª_t
 
com∑ª
);

170 
	e_¢d_mixî_£Àm_ch™√l_id
 {

172 
SND_MIXER_SCHN_UNKNOWN
 = -1,

174 
SND_MIXER_SCHN_FRONT_LEFT
 = 0,

176 
SND_MIXER_SCHN_FRONT_RIGHT
,

178 
SND_MIXER_SCHN_REAR_LEFT
,

180 
SND_MIXER_SCHN_REAR_RIGHT
,

182 
SND_MIXER_SCHN_FRONT_CENTER
,

184 
SND_MIXER_SCHN_WOOFER
,

186 
SND_MIXER_SCHN_SIDE_LEFT
,

188 
SND_MIXER_SCHN_SIDE_RIGHT
,

190 
SND_MIXER_SCHN_REAR_CENTER
,

191 
SND_MIXER_SCHN_LAST
 = 31,

193 
SND_MIXER_SCHN_MONO
 = 
SND_MIXER_SCHN_FRONT_LEFT


194 } 
	t¢d_mixî_£Àm_ch™√l_id_t
;

197 
	e¢d_mixî_£Àm_ªg›t_ab°ø˘
 {

199 
SND_MIXER_SABSTRACT_NONE
 = 0,

201 
SND_MIXER_SABSTRACT_BASIC
,

205 
	s¢d_mixî_£Àm_ªg›t
 {

207 
vî
;

209 
¢d_mixî_£Àm_ªg›t_ab°ø˘
 
ab°ø˘
;

211 c⁄° *
devi˚
;

213 
¢d_pcm_t
 *
∂ayback_pcm
;

215 
¢d_pcm_t
 *
ˇ±uª_pcm
;

219 
_¢d_mixî_£Àm_id
 
	t¢d_mixî_£Àm_id_t
;

221 c⁄° *
¢d_mixî_£Àm_ch™√l_«me
(
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
);

223 
¢d_mixî_£Àm_ªgi°î
(
¢d_mixî_t
 *
mixî
,

224 
¢d_mixî_£Àm_ªg›t
 *
›ti⁄s
,

225 
¢d_mixî_˛ass_t
 **
˛as•
);

226 
¢d_mixî_£Àm_gë_id
(
¢d_mixî_ñem_t
 *
ñemít
,

227 
¢d_mixî_£Àm_id_t
 *
id
);

228 c⁄° *
¢d_mixî_£Àm_gë_«me
(
¢d_mixî_ñem_t
 *
ñem
);

229 
¢d_mixî_£Àm_gë_ödex
(
¢d_mixî_ñem_t
 *
ñem
);

230 
¢d_mixî_ñem_t
 *
¢d_mixî_föd_£Àm
(
¢d_mixî_t
 *
mixî
,

231 c⁄° 
¢d_mixî_£Àm_id_t
 *
id
);

233 
¢d_mixî_£Àm_is_a˘ive
(
¢d_mixî_ñem_t
 *
ñem
);

234 
¢d_mixî_£Àm_is_∂ayback_m⁄o
(
¢d_mixî_ñem_t
 *
ñem
);

235 
¢d_mixî_£Àm_has_∂ayback_ch™√l
(
¢d_mixî_ñem_t
 *
obj
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
);

236 
¢d_mixî_£Àm_is_ˇ±uª_m⁄o
(
¢d_mixî_ñem_t
 *
ñem
);

237 
¢d_mixî_£Àm_has_ˇ±uª_ch™√l
(
¢d_mixî_ñem_t
 *
obj
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
);

238 
¢d_mixî_£Àm_gë_ˇ±uª_group
(
¢d_mixî_ñem_t
 *
ñem
);

239 
¢d_mixî_£Àm_has_comm⁄_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
);

240 
¢d_mixî_£Àm_has_∂ayback_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
);

241 
¢d_mixî_£Àm_has_∂ayback_vﬁume_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

242 
¢d_mixî_£Àm_has_ˇ±uª_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
);

243 
¢d_mixî_£Àm_has_ˇ±uª_vﬁume_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

244 
¢d_mixî_£Àm_has_comm⁄_swôch
(
¢d_mixî_ñem_t
 *
ñem
);

245 
¢d_mixî_£Àm_has_∂ayback_swôch
(
¢d_mixî_ñem_t
 *
ñem
);

246 
¢d_mixî_£Àm_has_∂ayback_swôch_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

247 
¢d_mixî_£Àm_has_ˇ±uª_swôch
(
¢d_mixî_ñem_t
 *
ñem
);

248 
¢d_mixî_£Àm_has_ˇ±uª_swôch_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

249 
¢d_mixî_£Àm_has_ˇ±uª_swôch_ex˛usive
(
¢d_mixî_ñem_t
 *
ñem
);

251 
¢d_mixî_£Àm_ask_∂ayback_vﬁ_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, *
dBvÆue
);

252 
¢d_mixî_£Àm_ask_ˇ±uª_vﬁ_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, *
dBvÆue
);

253 
¢d_mixî_£Àm_ask_∂ayback_dB_vﬁ
(
¢d_mixî_ñem_t
 *
ñem
, 
dBvÆue
, 
dú
, *
vÆue
);

254 
¢d_mixî_£Àm_ask_ˇ±uª_dB_vﬁ
(
¢d_mixî_ñem_t
 *
ñem
, 
dBvÆue
, 
dú
, *
vÆue
);

255 
¢d_mixî_£Àm_gë_∂ayback_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

256 
¢d_mixî_£Àm_gë_ˇ±uª_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

257 
¢d_mixî_£Àm_gë_∂ayback_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

258 
¢d_mixî_£Àm_gë_ˇ±uª_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

259 
¢d_mixî_£Àm_gë_∂ayback_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

260 
¢d_mixî_£Àm_gë_ˇ±uª_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

261 
¢d_mixî_£Àm_£t_∂ayback_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

262 
¢d_mixî_£Àm_£t_ˇ±uª_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

263 
¢d_mixî_£Àm_£t_∂ayback_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
, 
dú
);

264 
¢d_mixî_£Àm_£t_ˇ±uª_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
, 
dú
);

265 
¢d_mixî_£Àm_£t_∂ayback_vﬁume_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

266 
¢d_mixî_£Àm_£t_ˇ±uª_vﬁume_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

267 
¢d_mixî_£Àm_£t_∂ayback_dB_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, 
dú
);

268 
¢d_mixî_£Àm_£t_ˇ±uª_dB_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, 
dú
);

269 
¢d_mixî_£Àm_£t_∂ayback_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

270 
¢d_mixî_£Àm_£t_ˇ±uª_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

271 
¢d_mixî_£Àm_£t_∂ayback_swôch_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

272 
¢d_mixî_£Àm_£t_ˇ±uª_swôch_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

273 
¢d_mixî_£Àm_gë_∂ayback_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

274 *
mö
, *
max
);

275 
¢d_mixî_£Àm_gë_∂ayback_dB_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

276 *
mö
, *
max
);

277 
¢d_mixî_£Àm_£t_∂ayback_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

278 
mö
, 
max
);

279 
¢d_mixî_£Àm_gë_ˇ±uª_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

280 *
mö
, *
max
);

281 
¢d_mixî_£Àm_gë_ˇ±uª_dB_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

282 *
mö
, *
max
);

283 
¢d_mixî_£Àm_£t_ˇ±uª_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

284 
mö
, 
max
);

286 
¢d_mixî_£Àm_is_íumî©ed
(
¢d_mixî_ñem_t
 *
ñem
);

287 
¢d_mixî_£Àm_is_íum_∂ayback
(
¢d_mixî_ñem_t
 *
ñem
);

288 
¢d_mixî_£Àm_is_íum_ˇ±uª
(
¢d_mixî_ñem_t
 *
ñem
);

289 
¢d_mixî_£Àm_gë_íum_ôems
(
¢d_mixî_ñem_t
 *
ñem
);

290 
¢d_mixî_£Àm_gë_íum_ôem_«me
(
¢d_mixî_ñem_t
 *
ñem
, 
idx
, 
size_t
 
maxÀn
, *
°r
);

291 
¢d_mixî_£Àm_gë_íum_ôem
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
idxp
);

292 
¢d_mixî_£Àm_£t_íum_ôem
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
idx
);

294 
size_t
 
¢d_mixî_£Àm_id_sizeof
();

299 
	#¢d_mixî_£Àm_id_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_mixî_£Àm_id
)

	)

300 
¢d_mixî_£Àm_id_mÆloc
(
¢d_mixî_£Àm_id_t
 **
±r
);

301 
¢d_mixî_£Àm_id_‰ì
(
¢d_mixî_£Àm_id_t
 *
obj
);

302 
¢d_mixî_£Àm_id_c›y
(
¢d_mixî_£Àm_id_t
 *
d°
, c⁄° snd_mixî_£Àm_id_à*
§c
);

303 c⁄° *
¢d_mixî_£Àm_id_gë_«me
(c⁄° 
¢d_mixî_£Àm_id_t
 *
obj
);

304 
¢d_mixî_£Àm_id_gë_ödex
(c⁄° 
¢d_mixî_£Àm_id_t
 *
obj
);

305 
¢d_mixî_£Àm_id_£t_«me
(
¢d_mixî_£Àm_id_t
 *
obj
, c⁄° *
vÆ
);

306 
¢d_mixî_£Àm_id_£t_ödex
(
¢d_mixî_£Àm_id_t
 *
obj
, 
vÆ
);

312 #ifde‡
__˝lu•lus


	@/usr/include/alsa/output.h

28 #i‚de‡
__ALSA_OUTPUT_H


29 
	#__ALSA_OUTPUT_H


	)

31 #ifde‡
__˝lu•lus


54 
_¢d_ouçut
 
	t¢d_ouçut_t
;

57 
	e_¢d_ouçut_ty≥
 {

59 
SND_OUTPUT_STDIO
,

61 
SND_OUTPUT_BUFFER


62 } 
	t¢d_ouçut_ty≥_t
;

64 
¢d_ouçut_°dio_›í
(
¢d_ouçut_t
 **
ouçuç
, c⁄° *
fûe
, c⁄° *
mode
);

65 
¢d_ouçut_°dio_©èch
(
¢d_ouçut_t
 **
ouçuç
, 
FILE
 *
Â
, 
_˛o£
);

66 
¢d_ouçut_buf„r_›í
(
¢d_ouçut_t
 **
ouçuç
);

67 
size_t
 
¢d_ouçut_buf„r_°rög
(
¢d_ouçut_t
 *
ouçut
, **
buf
);

68 
¢d_ouçut_˛o£
(
¢d_ouçut_t
 *
ouçut
);

69 
¢d_ouçut_¥ötf
(
¢d_ouçut_t
 *
ouçut
, c⁄° *
f‹m©
, ...)

70 #i‚de‡
DOC_HIDDEN


71 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 2, 3)))

74 
¢d_ouçut_v¥ötf
(
¢d_ouçut_t
 *
ouçut
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
);

75 
¢d_ouçut_puts
(
¢d_ouçut_t
 *
ouçut
, c⁄° *
°r
);

76 
¢d_ouçut_putc
(
¢d_ouçut_t
 *
ouçut
, 
c
);

77 
¢d_ouçut_Êush
(
¢d_ouçut_t
 *
ouçut
);

81 #ifde‡
__˝lu•lus


	@/usr/include/alsa/pcm.h

29 #i‚de‡
__ALSA_PCM_H


30 
	#__ALSA_PCM_H


	)

32 #ifde‡
__˝lu•lus


43 
	#SND_PCM_DLSYM_VERSION
 
_dlsym_pcm_001


	)

46 
_¢d_pcm_öfo
 
	t¢d_pcm_öfo_t
;

62 
_¢d_pcm_hw_∑øms
 
	t¢d_pcm_hw_∑øms_t
;

65 
_¢d_pcm_sw_∑øms
 
	t¢d_pcm_sw_∑øms_t
;

67 
_¢d_pcm_°©us
 
	t¢d_pcm_°©us_t
;

69 
_¢d_pcm_ac˚ss_mask
 
	t¢d_pcm_ac˚ss_mask_t
;

71 
_¢d_pcm_f‹m©_mask
 
	t¢d_pcm_f‹m©_mask_t
;

73 
_¢d_pcm_subf‹m©_mask
 
	t¢d_pcm_subf‹m©_mask_t
;

76 
	e_¢d_pcm_˛ass
 {

79 
SND_PCM_CLASS_GENERIC
 = 0,

81 
SND_PCM_CLASS_MULTI
,

83 
SND_PCM_CLASS_MODEM
,

85 
SND_PCM_CLASS_DIGITIZER
,

86 
SND_PCM_CLASS_LAST
 = 
SND_PCM_CLASS_DIGITIZER


87 } 
	t¢d_pcm_˛ass_t
;

90 
	e_¢d_pcm_sub˛ass
 {

92 
SND_PCM_SUBCLASS_GENERIC_MIX
 = 0,

94 
SND_PCM_SUBCLASS_MULTI_MIX
,

95 
SND_PCM_SUBCLASS_LAST
 = 
SND_PCM_SUBCLASS_MULTI_MIX


96 } 
	t¢d_pcm_sub˛ass_t
;

99 
	e_¢d_pcm_°ªam
 {

101 
SND_PCM_STREAM_PLAYBACK
 = 0,

103 
SND_PCM_STREAM_CAPTURE
,

104 
SND_PCM_STREAM_LAST
 = 
SND_PCM_STREAM_CAPTURE


105 } 
	t¢d_pcm_°ªam_t
;

108 
	e_¢d_pcm_ac˚ss
 {

110 
SND_PCM_ACCESS_MMAP_INTERLEAVED
 = 0,

112 
SND_PCM_ACCESS_MMAP_NONINTERLEAVED
,

114 
SND_PCM_ACCESS_MMAP_COMPLEX
,

116 
SND_PCM_ACCESS_RW_INTERLEAVED
,

118 
SND_PCM_ACCESS_RW_NONINTERLEAVED
,

119 
SND_PCM_ACCESS_LAST
 = 
SND_PCM_ACCESS_RW_NONINTERLEAVED


120 } 
	t¢d_pcm_ac˚ss_t
;

123 
	e_¢d_pcm_f‹m©
 {

125 
SND_PCM_FORMAT_UNKNOWN
 = -1,

127 
SND_PCM_FORMAT_S8
 = 0,

129 
SND_PCM_FORMAT_U8
,

131 
SND_PCM_FORMAT_S16_LE
,

133 
SND_PCM_FORMAT_S16_BE
,

135 
SND_PCM_FORMAT_U16_LE
,

137 
SND_PCM_FORMAT_U16_BE
,

139 
SND_PCM_FORMAT_S24_LE
,

141 
SND_PCM_FORMAT_S24_BE
,

143 
SND_PCM_FORMAT_U24_LE
,

145 
SND_PCM_FORMAT_U24_BE
,

147 
SND_PCM_FORMAT_S32_LE
,

149 
SND_PCM_FORMAT_S32_BE
,

151 
SND_PCM_FORMAT_U32_LE
,

153 
SND_PCM_FORMAT_U32_BE
,

155 
SND_PCM_FORMAT_FLOAT_LE
,

157 
SND_PCM_FORMAT_FLOAT_BE
,

159 
SND_PCM_FORMAT_FLOAT64_LE
,

161 
SND_PCM_FORMAT_FLOAT64_BE
,

163 
SND_PCM_FORMAT_IEC958_SUBFRAME_LE
,

165 
SND_PCM_FORMAT_IEC958_SUBFRAME_BE
,

167 
SND_PCM_FORMAT_MU_LAW
,

169 
SND_PCM_FORMAT_A_LAW
,

171 
SND_PCM_FORMAT_IMA_ADPCM
,

173 
SND_PCM_FORMAT_MPEG
,

175 
SND_PCM_FORMAT_GSM
,

177 
SND_PCM_FORMAT_SPECIAL
 = 31,

179 
SND_PCM_FORMAT_S24_3LE
 = 32,

181 
SND_PCM_FORMAT_S24_3BE
,

183 
SND_PCM_FORMAT_U24_3LE
,

185 
SND_PCM_FORMAT_U24_3BE
,

187 
SND_PCM_FORMAT_S20_3LE
,

189 
SND_PCM_FORMAT_S20_3BE
,

191 
SND_PCM_FORMAT_U20_3LE
,

193 
SND_PCM_FORMAT_U20_3BE
,

195 
SND_PCM_FORMAT_S18_3LE
,

197 
SND_PCM_FORMAT_S18_3BE
,

199 
SND_PCM_FORMAT_U18_3LE
,

201 
SND_PCM_FORMAT_U18_3BE
,

203 
SND_PCM_FORMAT_G723_24
,

205 
SND_PCM_FORMAT_G723_24_1B
,

207 
SND_PCM_FORMAT_G723_40
,

209 
SND_PCM_FORMAT_G723_40_1B
,

211 
SND_PCM_FORMAT_DSD_U8
,

213 
SND_PCM_FORMAT_DSD_U16_LE
,

215 
SND_PCM_FORMAT_DSD_U32_LE
,

217 
SND_PCM_FORMAT_DSD_U16_BE
,

219 
SND_PCM_FORMAT_DSD_U32_BE
,

220 
SND_PCM_FORMAT_LAST
 = 
SND_PCM_FORMAT_DSD_U32_BE
,

222 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


224 
SND_PCM_FORMAT_S16
 = 
SND_PCM_FORMAT_S16_LE
,

226 
SND_PCM_FORMAT_U16
 = 
SND_PCM_FORMAT_U16_LE
,

228 
SND_PCM_FORMAT_S24
 = 
SND_PCM_FORMAT_S24_LE
,

230 
SND_PCM_FORMAT_U24
 = 
SND_PCM_FORMAT_U24_LE
,

232 
SND_PCM_FORMAT_S32
 = 
SND_PCM_FORMAT_S32_LE
,

234 
SND_PCM_FORMAT_U32
 = 
SND_PCM_FORMAT_U32_LE
,

236 
SND_PCM_FORMAT_FLOAT
 = 
SND_PCM_FORMAT_FLOAT_LE
,

238 
SND_PCM_FORMAT_FLOAT64
 = 
SND_PCM_FORMAT_FLOAT64_LE
,

240 
SND_PCM_FORMAT_IEC958_SUBFRAME
 = 
SND_PCM_FORMAT_IEC958_SUBFRAME_LE


241 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


243 
SND_PCM_FORMAT_S16
 = 
SND_PCM_FORMAT_S16_BE
,

245 
SND_PCM_FORMAT_U16
 = 
SND_PCM_FORMAT_U16_BE
,

247 
SND_PCM_FORMAT_S24
 = 
SND_PCM_FORMAT_S24_BE
,

249 
SND_PCM_FORMAT_U24
 = 
SND_PCM_FORMAT_U24_BE
,

251 
SND_PCM_FORMAT_S32
 = 
SND_PCM_FORMAT_S32_BE
,

253 
SND_PCM_FORMAT_U32
 = 
SND_PCM_FORMAT_U32_BE
,

255 
SND_PCM_FORMAT_FLOAT
 = 
SND_PCM_FORMAT_FLOAT_BE
,

257 
SND_PCM_FORMAT_FLOAT64
 = 
SND_PCM_FORMAT_FLOAT64_BE
,

259 
SND_PCM_FORMAT_IEC958_SUBFRAME
 = 
SND_PCM_FORMAT_IEC958_SUBFRAME_BE


263 } 
	t¢d_pcm_f‹m©_t
;

266 
	e_¢d_pcm_subf‹m©
 {

268 
SND_PCM_SUBFORMAT_STD
 = 0,

269 
SND_PCM_SUBFORMAT_LAST
 = 
SND_PCM_SUBFORMAT_STD


270 } 
	t¢d_pcm_subf‹m©_t
;

273 
	e_¢d_pcm_°©e
 {

275 
SND_PCM_STATE_OPEN
 = 0,

277 
SND_PCM_STATE_SETUP
,

279 
SND_PCM_STATE_PREPARED
,

281 
SND_PCM_STATE_RUNNING
,

283 
SND_PCM_STATE_XRUN
,

285 
SND_PCM_STATE_DRAINING
,

287 
SND_PCM_STATE_PAUSED
,

289 
SND_PCM_STATE_SUSPENDED
,

291 
SND_PCM_STATE_DISCONNECTED
,

292 
SND_PCM_STATE_LAST
 = 
SND_PCM_STATE_DISCONNECTED


293 } 
	t¢d_pcm_°©e_t
;

296 
	e_¢d_pcm_°¨t
 {

298 
SND_PCM_START_DATA
 = 0,

300 
SND_PCM_START_EXPLICIT
,

301 
SND_PCM_START_LAST
 = 
SND_PCM_START_EXPLICIT


302 } 
	t¢d_pcm_°¨t_t
;

305 
	e_¢d_pcm_xrun
 {

307 
SND_PCM_XRUN_NONE
 = 0,

309 
SND_PCM_XRUN_STOP
,

310 
SND_PCM_XRUN_LAST
 = 
SND_PCM_XRUN_STOP


311 } 
	t¢d_pcm_xrun_t
;

314 
	e_¢d_pcm_t°amp
 {

316 
SND_PCM_TSTAMP_NONE
 = 0,

318 
SND_PCM_TSTAMP_ENABLE
,

322 
SND_PCM_TSTAMP_MMAP
 = 
SND_PCM_TSTAMP_ENABLE
,

323 
SND_PCM_TSTAMP_LAST
 = 
SND_PCM_TSTAMP_ENABLE


324 } 
	t¢d_pcm_t°amp_t
;

326 
	e_¢d_pcm_t°amp_ty≥
 {

327 
SND_PCM_TSTAMP_TYPE_GETTIMEOFDAY
 = 0,

328 
SND_PCM_TSTAMP_TYPE_MONOTONIC
,

329 
SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW
,

330 
SND_PCM_TSTAMP_TYPE_LAST
 = 
SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW
,

331 } 
	t¢d_pcm_t°amp_ty≥_t
;

333 
	s_¢d_pcm_audio_t°amp_c⁄fig
 {

335 
ty≥_ªque°ed
:4;

336 
ªp‹t_dñay
:1;

337 } 
	t¢d_pcm_audio_t°amp_c⁄fig_t
;

339 
	s_¢d_pcm_audio_t°amp_ªp‹t
 {

343 
vÆid
:1;

346 
a˘uÆ_ty≥
:4;

349 
accuøcy_ªp‹t
:1;

350 
accuøcy
;

351 } 
	t¢d_pcm_audio_t°amp_ªp‹t_t
;

354 
	t¢d_pcm_u‰ames_t
;

356 
	t¢d_pcm_s‰ames_t
;

359 
	#SND_PCM_NONBLOCK
 0x00000001

	)

361 
	#SND_PCM_ASYNC
 0x00000002

	)

363 
	#SND_PCM_ABORT
 0x00008000

	)

365 
	#SND_PCM_NO_AUTO_RESAMPLE
 0x00010000

	)

367 
	#SND_PCM_NO_AUTO_CHANNELS
 0x00020000

	)

369 
	#SND_PCM_NO_AUTO_FORMAT
 0x00040000

	)

371 
	#SND_PCM_NO_SOFTVOL
 0x00080000

	)

374 
_¢d_pcm
 
	t¢d_pcm_t
;

377 
	e_¢d_pcm_ty≥
 {

379 
SND_PCM_TYPE_HW
 = 0,

381 
SND_PCM_TYPE_HOOKS
,

384 
SND_PCM_TYPE_MULTI
,

386 
SND_PCM_TYPE_FILE
,

388 
SND_PCM_TYPE_NULL
,

390 
SND_PCM_TYPE_SHM
,

392 
SND_PCM_TYPE_INET
,

394 
SND_PCM_TYPE_COPY
,

396 
SND_PCM_TYPE_LINEAR
,

398 
SND_PCM_TYPE_ALAW
,

400 
SND_PCM_TYPE_MULAW
,

402 
SND_PCM_TYPE_ADPCM
,

404 
SND_PCM_TYPE_RATE
,

406 
SND_PCM_TYPE_ROUTE
,

408 
SND_PCM_TYPE_PLUG
,

410 
SND_PCM_TYPE_SHARE
,

412 
SND_PCM_TYPE_METER
,

414 
SND_PCM_TYPE_MIX
,

416 
SND_PCM_TYPE_DROUTE
,

418 
SND_PCM_TYPE_LBSERVER
,

420 
SND_PCM_TYPE_LINEAR_FLOAT
,

422 
SND_PCM_TYPE_LADSPA
,

424 
SND_PCM_TYPE_DMIX
,

426 
SND_PCM_TYPE_JACK
,

428 
SND_PCM_TYPE_DSNOOP
,

430 
SND_PCM_TYPE_DSHARE
,

432 
SND_PCM_TYPE_IEC958
,

434 
SND_PCM_TYPE_SOFTVOL
,

436 
SND_PCM_TYPE_IOPLUG
,

438 
SND_PCM_TYPE_EXTPLUG
,

440 
SND_PCM_TYPE_MMAP_EMUL
,

441 
SND_PCM_TYPE_LAST
 = 
SND_PCM_TYPE_MMAP_EMUL


445 
_¢d_pcm_ty≥
 
	t¢d_pcm_ty≥_t
;

448 
	s_¢d_pcm_ch™√l_¨ó
 {

450 *
addr
;

452 
fú°
;

454 
°ï
;

455 } 
	t¢d_pcm_ch™√l_¨ó_t
;

458 
	u_¢d_pcm_sync_id
 {

460 
id
[16];

462 
id16
[8];

464 
id32
[4];

465 } 
	t¢d_pcm_sync_id_t
;

468 
_¢d_pcm_sc›e
 
	t¢d_pcm_sc›e_t
;

470 
¢d_pcm_›í
(
¢d_pcm_t
 **
pcm
, c⁄° *
«me
,

471 
¢d_pcm_°ªam_t
 
°ªam
, 
mode
);

472 
¢d_pcm_›í_lc⁄f
(
¢d_pcm_t
 **
pcm
, c⁄° *
«me
,

473 
¢d_pcm_°ªam_t
 
°ªam
, 
mode
,

474 
¢d_c⁄fig_t
 *
lc⁄f
);

475 
¢d_pcm_›í_ÁŒback
(
¢d_pcm_t
 **
pcm
, 
¢d_c⁄fig_t
 *
roŸ
,

476 c⁄° *
«me
, c⁄° *
‹ig_«me
,

477 
¢d_pcm_°ªam_t
 
°ªam
, 
mode
);

479 
¢d_pcm_˛o£
(
¢d_pcm_t
 *
pcm
);

480 c⁄° *
¢d_pcm_«me
(
¢d_pcm_t
 *
pcm
);

481 
¢d_pcm_ty≥_t
 
¢d_pcm_ty≥
(
¢d_pcm_t
 *
pcm
);

482 
¢d_pcm_°ªam_t
 
¢d_pcm_°ªam
(
¢d_pcm_t
 *
pcm
);

483 
¢d_pcm_pﬁl_des¸ùt‹s_cou¡
(
¢d_pcm_t
 *
pcm
);

484 
¢d_pcm_pﬁl_des¸ùt‹s
(
¢d_pcm_t
 *
pcm
, 
pﬁlfd
 *
pfds
, 
•a˚
);

485 
¢d_pcm_pﬁl_des¸ùt‹s_ªvíts
(
¢d_pcm_t
 *
pcm
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

486 
¢d_pcm_n⁄block
(
¢d_pcm_t
 *
pcm
, 
n⁄block
);

487 
__ölöe__
 
¢d_pcm_ab‹t
(
¢d_pcm_t
 *
pcm
Ë{  
¢d_pcm_n⁄block
(pcm, 2); }

488 
¢d_async_add_pcm_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
¢d_pcm_t
 *
pcm
,

489 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

490 
¢d_pcm_t
 *
¢d_async_h™dÀr_gë_pcm
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

491 
¢d_pcm_öfo
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_öfo_t
 *
öfo
);

492 
¢d_pcm_hw_∑øms_cuºít
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

493 
¢d_pcm_hw_∑øms
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

494 
¢d_pcm_hw_‰ì
(
¢d_pcm_t
 *
pcm
);

495 
¢d_pcm_sw_∑øms_cuºít
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
);

496 
¢d_pcm_sw_∑øms
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
);

497 
¢d_pcm_¥ï¨e
(
¢d_pcm_t
 *
pcm
);

498 
¢d_pcm_ª£t
(
¢d_pcm_t
 *
pcm
);

499 
¢d_pcm_°©us
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_°©us_t
 *
°©us
);

500 
¢d_pcm_°¨t
(
¢d_pcm_t
 *
pcm
);

501 
¢d_pcm_dr›
(
¢d_pcm_t
 *
pcm
);

502 
¢d_pcm_døö
(
¢d_pcm_t
 *
pcm
);

503 
¢d_pcm_∑u£
(
¢d_pcm_t
 *
pcm
, 
íabÀ
);

504 
¢d_pcm_°©e_t
 
¢d_pcm_°©e
(
¢d_pcm_t
 *
pcm
);

505 
¢d_pcm_hwsync
(
¢d_pcm_t
 *
pcm
);

506 
¢d_pcm_dñay
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_s‰ames_t
 *
dñayp
);

507 
¢d_pcm_ªsume
(
¢d_pcm_t
 *
pcm
);

508 
¢d_pcm_htime°amp
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_u‰ames_t
 *
avaû
, 
¢d_htime°amp_t
 *
t°amp
);

509 
¢d_pcm_s‰ames_t
 
¢d_pcm_avaû
(
¢d_pcm_t
 *
pcm
);

510 
¢d_pcm_s‰ames_t
 
¢d_pcm_avaû_upd©e
(
¢d_pcm_t
 *
pcm
);

511 
¢d_pcm_avaû_dñay
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_s‰ames_t
 *
avaûp
, snd_pcm_s‰ames_à*
dñayp
);

512 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªwödabÀ
(
¢d_pcm_t
 *
pcm
);

513 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªwöd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_u‰ames_t
 
‰ames
);

514 
¢d_pcm_s‰ames_t
 
¢d_pcm_f‹w¨dabÀ
(
¢d_pcm_t
 *
pcm
);

515 
¢d_pcm_s‰ames_t
 
¢d_pcm_f‹w¨d
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_u‰ames_t
 
‰ames
);

516 
¢d_pcm_s‰ames_t
 
¢d_pcm_wrôei
(
¢d_pcm_t
 *
pcm
, c⁄° *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

517 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªadi
(
¢d_pcm_t
 *
pcm
, *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

518 
¢d_pcm_s‰ames_t
 
¢d_pcm_wrôí
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

519 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªadn
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

520 
¢d_pcm_waô
(
¢d_pcm_t
 *
pcm
, 
timeout
);

522 
¢d_pcm_lök
(
¢d_pcm_t
 *
pcm1
, snd_pcm_à*
pcm2
);

523 
¢d_pcm_u∆ök
(
¢d_pcm_t
 *
pcm
);

526 
	#SND_CHMAP_API_VERSION
 ((1 << 16Ë| (0 << 8Ë| 1)

	)

529 
	e¢d_pcm_chm≠_ty≥
 {

530 
SND_CHMAP_TYPE_NONE
 = 0,

531 
SND_CHMAP_TYPE_FIXED
,

532 
SND_CHMAP_TYPE_VAR
,

533 
SND_CHMAP_TYPE_PAIRED
,

534 
SND_CHMAP_TYPE_LAST
 = 
SND_CHMAP_TYPE_PAIRED
,

538 
	e¢d_pcm_chm≠_posôi⁄
 {

539 
SND_CHMAP_UNKNOWN
 = 0,

540 
SND_CHMAP_NA
,

541 
SND_CHMAP_MONO
,

542 
SND_CHMAP_FL
,

543 
SND_CHMAP_FR
,

544 
SND_CHMAP_RL
,

545 
SND_CHMAP_RR
,

546 
SND_CHMAP_FC
,

547 
SND_CHMAP_LFE
,

548 
SND_CHMAP_SL
,

549 
SND_CHMAP_SR
,

550 
SND_CHMAP_RC
,

551 
SND_CHMAP_FLC
,

552 
SND_CHMAP_FRC
,

553 
SND_CHMAP_RLC
,

554 
SND_CHMAP_RRC
,

555 
SND_CHMAP_FLW
,

556 
SND_CHMAP_FRW
,

557 
SND_CHMAP_FLH
,

558 
SND_CHMAP_FCH
,

559 
SND_CHMAP_FRH
,

560 
SND_CHMAP_TC
,

561 
SND_CHMAP_TFL
,

562 
SND_CHMAP_TFR
,

563 
SND_CHMAP_TFC
,

564 
SND_CHMAP_TRL
,

565 
SND_CHMAP_TRR
,

566 
SND_CHMAP_TRC
,

567 
SND_CHMAP_TFLC
,

568 
SND_CHMAP_TFRC
,

569 
SND_CHMAP_TSL
,

570 
SND_CHMAP_TSR
,

571 
SND_CHMAP_LLFE
,

572 
SND_CHMAP_RLFE
,

573 
SND_CHMAP_BC
,

574 
SND_CHMAP_BLC
,

575 
SND_CHMAP_BRC
,

576 
SND_CHMAP_LAST
 = 
SND_CHMAP_BRC
,

580 
	#SND_CHMAP_POSITION_MASK
 0xffff

	)

583 
	#SND_CHMAP_PHASE_INVERSE
 (0x01 << 16)

	)

585 
	#SND_CHMAP_DRIVER_SPEC
 (0x02 << 16)

	)

588 
	s¢d_pcm_chm≠
 {

589 
ch™√ls
;

590 
pos
[0];

591 } 
	t¢d_pcm_chm≠_t
;

594 
	s¢d_pcm_chm≠_quîy
 {

595 
¢d_pcm_chm≠_ty≥
 
ty≥
;

596 
¢d_pcm_chm≠_t
 
m≠
;

597 } 
	t¢d_pcm_chm≠_quîy_t
;

600 
¢d_pcm_chm≠_quîy_t
 **
¢d_pcm_quîy_chm≠s
(
¢d_pcm_t
 *
pcm
);

601 
¢d_pcm_chm≠_quîy_t
 **
¢d_pcm_quîy_chm≠s_‰om_hw
(
ˇrd
, 
dev
,

602 
subdev
,

603 
¢d_pcm_°ªam_t
 
°ªam
);

604 
¢d_pcm_‰ì_chm≠s
(
¢d_pcm_chm≠_quîy_t
 **
m≠s
);

605 
¢d_pcm_chm≠_t
 *
¢d_pcm_gë_chm≠
(
¢d_pcm_t
 *
pcm
);

606 
¢d_pcm_£t_chm≠
(
¢d_pcm_t
 *
pcm
, c⁄° 
¢d_pcm_chm≠_t
 *
m≠
);

608 c⁄° *
¢d_pcm_chm≠_ty≥_«me
(
¢d_pcm_chm≠_ty≥
 
vÆ
);

609 c⁄° *
¢d_pcm_chm≠_«me
(
¢d_pcm_chm≠_posôi⁄
 
vÆ
);

610 c⁄° *
¢d_pcm_chm≠_l⁄g_«me
(
¢d_pcm_chm≠_posôi⁄
 
vÆ
);

611 
¢d_pcm_chm≠_¥öt
(c⁄° 
¢d_pcm_chm≠_t
 *
m≠
, 
size_t
 
maxÀn
, *
buf
);

612 
¢d_pcm_chm≠_‰om_°rög
(c⁄° *
°r
);

613 
¢d_pcm_chm≠_t
 *
¢d_pcm_chm≠_∑r£_°rög
(c⁄° *
°r
);

622 
¢d_pcm_ªcovî
(
¢d_pcm_t
 *
pcm
, 
îr
, 
sûít
);

623 
¢d_pcm_£t_∑øms
(
¢d_pcm_t
 *
pcm
,

624 
¢d_pcm_f‹m©_t
 
f‹m©
,

625 
¢d_pcm_ac˚ss_t
 
ac˚ss
,

626 
ch™√ls
,

627 
øã
,

628 
so·_ªßm∂e
,

629 
œãncy
);

630 
¢d_pcm_gë_∑øms
(
¢d_pcm_t
 *
pcm
,

631 
¢d_pcm_u‰ames_t
 *
buf„r_size
,

632 
¢d_pcm_u‰ames_t
 *
≥riod_size
);

643 
size_t
 
¢d_pcm_öfo_sizeof
();

648 
	#¢d_pcm_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_öfo
)

	)

649 
¢d_pcm_öfo_mÆloc
(
¢d_pcm_öfo_t
 **
±r
);

650 
¢d_pcm_öfo_‰ì
(
¢d_pcm_öfo_t
 *
obj
);

651 
¢d_pcm_öfo_c›y
(
¢d_pcm_öfo_t
 *
d°
, c⁄° snd_pcm_öfo_à*
§c
);

652 
¢d_pcm_öfo_gë_devi˚
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

653 
¢d_pcm_öfo_gë_subdevi˚
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

654 
¢d_pcm_°ªam_t
 
¢d_pcm_öfo_gë_°ªam
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

655 
¢d_pcm_öfo_gë_ˇrd
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

656 c⁄° *
¢d_pcm_öfo_gë_id
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

657 c⁄° *
¢d_pcm_öfo_gë_«me
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

658 c⁄° *
¢d_pcm_öfo_gë_subdevi˚_«me
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

659 
¢d_pcm_˛ass_t
 
¢d_pcm_öfo_gë_˛ass
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

660 
¢d_pcm_sub˛ass_t
 
¢d_pcm_öfo_gë_sub˛ass
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

661 
¢d_pcm_öfo_gë_subdevi˚s_cou¡
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

662 
¢d_pcm_öfo_gë_subdevi˚s_avaû
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

663 
¢d_pcm_sync_id_t
 
¢d_pcm_öfo_gë_sync
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

664 
¢d_pcm_öfo_£t_devi˚
(
¢d_pcm_öfo_t
 *
obj
, 
vÆ
);

665 
¢d_pcm_öfo_£t_subdevi˚
(
¢d_pcm_öfo_t
 *
obj
, 
vÆ
);

666 
¢d_pcm_öfo_£t_°ªam
(
¢d_pcm_öfo_t
 *
obj
, 
¢d_pcm_°ªam_t
 
vÆ
);

677 
¢d_pcm_hw_∑øms_™y
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

679 
¢d_pcm_hw_∑øms_ˇn_mm≠_ßm∂e_ªsﬁuti⁄
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

680 
¢d_pcm_hw_∑øms_is_doubÀ
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

681 
¢d_pcm_hw_∑øms_is_b©ch
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

682 
¢d_pcm_hw_∑øms_is_block_å™s„r
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

683 
¢d_pcm_hw_∑øms_is_m⁄Ÿ⁄ic
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

684 
¢d_pcm_hw_∑øms_ˇn_ovîønge
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

685 
¢d_pcm_hw_∑øms_ˇn_∑u£
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

686 
¢d_pcm_hw_∑øms_ˇn_ªsume
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

687 
¢d_pcm_hw_∑øms_is_hÆf_du∂ex
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

688 
¢d_pcm_hw_∑øms_is_joöt_du∂ex
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

689 
¢d_pcm_hw_∑øms_ˇn_sync_°¨t
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

690 
¢d_pcm_hw_∑øms_ˇn_dißbÀ_≥riod_wakeup
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

691 
¢d_pcm_hw_∑øms_suµ‹ts_audio_wÆl˛ock_ts
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

692 
¢d_pcm_hw_∑øms_suµ‹ts_audio_ts_ty≥
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
ty≥
);

693 
¢d_pcm_hw_∑øms_gë_øã_numdí
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
,

694 *
øã_num
,

695 *
øã_dí
);

696 
¢d_pcm_hw_∑øms_gë_sbôs
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

697 
¢d_pcm_hw_∑øms_gë_fifo_size
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

700 
_¢d_pcm_hw_°øãgy
 
	t¢d_pcm_hw_°øãgy_t
;

703 
	s_¢d_pcm_hw_°øãgy_sim∂e_choi˚s_li°
 {

704 
vÆue
;

705 
bad√ss
;

706 } 
	t¢d_pcm_hw_°øãgy_sim∂e_choi˚s_li°_t
;

708 
¢d_pcm_hw_∑øms_°øãgy
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
,

709 c⁄° 
¢d_pcm_hw_°øãgy_t
 *
°øãgy
,

710 
bad√ss_mö
,

711 
bad√ss_max
);

713 
¢d_pcm_hw_°øãgy_‰ì
(
¢d_pcm_hw_°øãgy_t
 *
°øãgy
);

714 
¢d_pcm_hw_°øãgy_sim∂e
(
¢d_pcm_hw_°øãgy_t
 **
°øãgyp
,

715 
bad√ss_mö
,

716 
bad√ss_max
);

717 
¢d_pcm_hw_∑øms_åy_ex∂aö_Áûuª
(
¢d_pcm_t
 *
pcm
,

718 
¢d_pcm_hw_∑øms_t
 *
Áû
,

719 
¢d_pcm_hw_∑øms_t
 *
suc˚ss
,

720 
dïth
,

721 
¢d_ouçut_t
 *
out
);

725 
size_t
 
¢d_pcm_hw_∑øms_sizeof
();

730 
	#¢d_pcm_hw_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_hw_∑øms
)

	)

731 
¢d_pcm_hw_∑øms_mÆloc
(
¢d_pcm_hw_∑øms_t
 **
±r
);

732 
¢d_pcm_hw_∑øms_‰ì
(
¢d_pcm_hw_∑øms_t
 *
obj
);

733 
¢d_pcm_hw_∑øms_c›y
(
¢d_pcm_hw_∑øms_t
 *
d°
, c⁄° snd_pcm_hw_∑øms_à*
§c
);

735 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_HW_PARAMS_API
)

737 
¢d_pcm_hw_∑øms_gë_ac˚ss
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 *
_ac˚ss
);

738 
¢d_pcm_hw_∑øms_ã°_ac˚ss
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 
_ac˚ss
);

739 
¢d_pcm_hw_∑øms_£t_ac˚ss
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 
_ac˚ss
);

740 
¢d_pcm_hw_∑øms_£t_ac˚ss_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 *
_ac˚ss
);

741 
¢d_pcm_hw_∑øms_£t_ac˚ss_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 *
_ac˚ss
);

742 
¢d_pcm_hw_∑øms_£t_ac˚ss_mask
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_mask_t
 *
mask
);

743 
¢d_pcm_hw_∑øms_gë_ac˚ss_mask
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_mask_t
 *
mask
);

745 
¢d_pcm_hw_∑øms_gë_f‹m©
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 *
vÆ
);

746 
¢d_pcm_hw_∑øms_ã°_f‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 
vÆ
);

747 
¢d_pcm_hw_∑øms_£t_f‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 
vÆ
);

748 
¢d_pcm_hw_∑øms_£t_f‹m©_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 *
f‹m©
);

749 
¢d_pcm_hw_∑øms_£t_f‹m©_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 *
f‹m©
);

750 
¢d_pcm_hw_∑øms_£t_f‹m©_mask
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_mask_t
 *
mask
);

751 
¢d_pcm_hw_∑øms_gë_f‹m©_mask
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_mask_t
 *
mask
);

753 
¢d_pcm_hw_∑øms_gë_subf‹m©
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 *
subf‹m©
);

754 
¢d_pcm_hw_∑øms_ã°_subf‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

755 
¢d_pcm_hw_∑øms_£t_subf‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

756 
¢d_pcm_hw_∑øms_£t_subf‹m©_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 *
subf‹m©
);

757 
¢d_pcm_hw_∑øms_£t_subf‹m©_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 *
subf‹m©
);

758 
¢d_pcm_hw_∑øms_£t_subf‹m©_mask
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_mask_t
 *
mask
);

759 
¢d_pcm_hw_∑øms_gë_subf‹m©_mask
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_mask_t
 *
mask
);

761 
¢d_pcm_hw_∑øms_gë_ch™√ls
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

762 
¢d_pcm_hw_∑øms_gë_ch™√ls_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

763 
¢d_pcm_hw_∑øms_gë_ch™√ls_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

764 
¢d_pcm_hw_∑øms_ã°_ch™√ls
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

765 
¢d_pcm_hw_∑øms_£t_ch™√ls
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

766 
¢d_pcm_hw_∑øms_£t_ch™√ls_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

767 
¢d_pcm_hw_∑øms_£t_ch™√ls_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

768 
¢d_pcm_hw_∑øms_£t_ch™√ls_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
max
);

769 
¢d_pcm_hw_∑øms_£t_ch™√ls_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

770 
¢d_pcm_hw_∑øms_£t_ch™√ls_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

771 
¢d_pcm_hw_∑øms_£t_ch™√ls_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

773 
¢d_pcm_hw_∑øms_gë_øã
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

774 
¢d_pcm_hw_∑øms_gë_øã_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

775 
¢d_pcm_hw_∑øms_gë_øã_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

776 
¢d_pcm_hw_∑øms_ã°_øã
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

777 
¢d_pcm_hw_∑øms_£t_øã
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

778 
¢d_pcm_hw_∑øms_£t_øã_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

779 
¢d_pcm_hw_∑øms_£t_øã_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

780 
¢d_pcm_hw_∑øms_£t_øã_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

781 
¢d_pcm_hw_∑øms_£t_øã_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

782 
¢d_pcm_hw_∑øms_£t_øã_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

783 
¢d_pcm_hw_∑øms_£t_øã_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

784 
¢d_pcm_hw_∑øms_£t_øã_ªßm∂e
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

785 
¢d_pcm_hw_∑øms_gë_øã_ªßm∂e
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

786 
¢d_pcm_hw_∑øms_£t_exp‹t_buf„r
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

787 
¢d_pcm_hw_∑øms_gë_exp‹t_buf„r
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

788 
¢d_pcm_hw_∑øms_£t_≥riod_wakeup
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

789 
¢d_pcm_hw_∑øms_gë_≥riod_wakeup
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

791 
¢d_pcm_hw_∑øms_gë_≥riod_time
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

792 
¢d_pcm_hw_∑øms_gë_≥riod_time_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

793 
¢d_pcm_hw_∑øms_gë_≥riod_time_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

794 
¢d_pcm_hw_∑øms_ã°_≥riod_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

795 
¢d_pcm_hw_∑øms_£t_≥riod_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

796 
¢d_pcm_hw_∑øms_£t_≥riod_time_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

797 
¢d_pcm_hw_∑øms_£t_≥riod_time_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

798 
¢d_pcm_hw_∑øms_£t_≥riod_time_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

799 
¢d_pcm_hw_∑øms_£t_≥riod_time_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

800 
¢d_pcm_hw_∑øms_£t_≥riod_time_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

801 
¢d_pcm_hw_∑øms_£t_≥riod_time_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

803 
¢d_pcm_hw_∑øms_gë_≥riod_size
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
‰ames
, *
dú
);

804 
¢d_pcm_hw_∑øms_gë_≥riod_size_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
‰ames
, *
dú
);

805 
¢d_pcm_hw_∑øms_gë_≥riod_size_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
‰ames
, *
dú
);

806 
¢d_pcm_hw_∑øms_ã°_≥riod_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
, 
dú
);

807 
¢d_pcm_hw_∑øms_£t_≥riod_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
, 
dú
);

808 
¢d_pcm_hw_∑øms_£t_≥riod_size_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

809 
¢d_pcm_hw_∑øms_£t_≥riod_size_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

810 
¢d_pcm_hw_∑øms_£t_≥riod_size_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
mö
, *
mödú
, snd_pcm_u‰ames_à*
max
, *
maxdú
);

811 
¢d_pcm_hw_∑øms_£t_≥riod_size_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

812 
¢d_pcm_hw_∑øms_£t_≥riod_size_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

813 
¢d_pcm_hw_∑øms_£t_≥riod_size_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

814 
¢d_pcm_hw_∑øms_£t_≥riod_size_öãgî
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

816 
¢d_pcm_hw_∑øms_gë_≥riods
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

817 
¢d_pcm_hw_∑øms_gë_≥riods_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

818 
¢d_pcm_hw_∑øms_gë_≥riods_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

819 
¢d_pcm_hw_∑øms_ã°_≥riods
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

820 
¢d_pcm_hw_∑øms_£t_≥riods
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

821 
¢d_pcm_hw_∑øms_£t_≥riods_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

822 
¢d_pcm_hw_∑øms_£t_≥riods_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

823 
¢d_pcm_hw_∑øms_£t_≥riods_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

824 
¢d_pcm_hw_∑øms_£t_≥riods_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

825 
¢d_pcm_hw_∑øms_£t_≥riods_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

826 
¢d_pcm_hw_∑øms_£t_≥riods_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

827 
¢d_pcm_hw_∑øms_£t_≥riods_öãgî
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

829 
¢d_pcm_hw_∑øms_gë_buf„r_time
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

830 
¢d_pcm_hw_∑øms_gë_buf„r_time_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

831 
¢d_pcm_hw_∑øms_gë_buf„r_time_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

832 
¢d_pcm_hw_∑øms_ã°_buf„r_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

833 
¢d_pcm_hw_∑øms_£t_buf„r_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

834 
¢d_pcm_hw_∑øms_£t_buf„r_time_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

835 
¢d_pcm_hw_∑øms_£t_buf„r_time_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

836 
¢d_pcm_hw_∑øms_£t_buf„r_time_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

837 
¢d_pcm_hw_∑øms_£t_buf„r_time_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

838 
¢d_pcm_hw_∑øms_£t_buf„r_time_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

839 
¢d_pcm_hw_∑øms_£t_buf„r_time_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

841 
¢d_pcm_hw_∑øms_gë_buf„r_size
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

842 
¢d_pcm_hw_∑øms_gë_buf„r_size_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

843 
¢d_pcm_hw_∑øms_gë_buf„r_size_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

844 
¢d_pcm_hw_∑øms_ã°_buf„r_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

845 
¢d_pcm_hw_∑øms_£t_buf„r_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

846 
¢d_pcm_hw_∑øms_£t_buf„r_size_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

847 
¢d_pcm_hw_∑øms_£t_buf„r_size_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

848 
¢d_pcm_hw_∑øms_£t_buf„r_size_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
mö
, snd_pcm_u‰ames_à*
max
);

849 
¢d_pcm_hw_∑øms_£t_buf„r_size_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

850 
¢d_pcm_hw_∑øms_£t_buf„r_size_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

851 
¢d_pcm_hw_∑øms_£t_buf„r_size_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

855 
¢d_pcm_hw_∑øms_gë_mö_Æign
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

866 
size_t
 
¢d_pcm_sw_∑øms_sizeof
();

871 
	#¢d_pcm_sw_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_sw_∑øms
)

	)

872 
¢d_pcm_sw_∑øms_mÆloc
(
¢d_pcm_sw_∑øms_t
 **
±r
);

873 
¢d_pcm_sw_∑øms_‰ì
(
¢d_pcm_sw_∑øms_t
 *
obj
);

874 
¢d_pcm_sw_∑øms_c›y
(
¢d_pcm_sw_∑øms_t
 *
d°
, c⁄° snd_pcm_sw_∑øms_à*
§c
);

875 
¢d_pcm_sw_∑øms_gë_bound¨y
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

877 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_SW_PARAMS_API
)

879 
¢d_pcm_sw_∑øms_£t_t°amp_mode
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_t°amp_t
 
vÆ
);

880 
¢d_pcm_sw_∑øms_gë_t°amp_mode
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_t°amp_t
 *
vÆ
);

881 
¢d_pcm_sw_∑øms_£t_t°amp_ty≥
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_t°amp_ty≥_t
 
vÆ
);

882 
¢d_pcm_sw_∑øms_gë_t°amp_ty≥
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_t°amp_ty≥_t
 *
vÆ
);

883 
¢d_pcm_sw_∑øms_£t_avaû_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

884 
¢d_pcm_sw_∑øms_gë_avaû_mö
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

885 
¢d_pcm_sw_∑øms_£t_≥riod_evít
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
vÆ
);

886 
¢d_pcm_sw_∑øms_gë_≥riod_evít
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, *
vÆ
);

887 
¢d_pcm_sw_∑øms_£t_°¨t_thªshﬁd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

888 
¢d_pcm_sw_∑øms_gë_°¨t_thªshﬁd
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑ømsm
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

889 
¢d_pcm_sw_∑øms_£t_°›_thªshﬁd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

890 
¢d_pcm_sw_∑øms_gë_°›_thªshﬁd
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

891 
¢d_pcm_sw_∑øms_£t_sûí˚_thªshﬁd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

892 
¢d_pcm_sw_∑øms_gë_sûí˚_thªshﬁd
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

893 
¢d_pcm_sw_∑øms_£t_sûí˚_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

894 
¢d_pcm_sw_∑øms_gë_sûí˚_size
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

901 #i‚de‡
ALSA_LIBRARY_BUILD


902 #i‡
deföed
(
ALSA_PCM_OLD_HW_PARAMS_API
Ë|| deföed(
ALSA_PCM_OLD_SW_PARAMS_API
)

903 
	~"pcm_ﬁd.h
"

914 
size_t
 
¢d_pcm_ac˚ss_mask_sizeof
();

919 
	#¢d_pcm_ac˚ss_mask_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_ac˚ss_mask
)

	)

920 
¢d_pcm_ac˚ss_mask_mÆloc
(
¢d_pcm_ac˚ss_mask_t
 **
±r
);

921 
¢d_pcm_ac˚ss_mask_‰ì
(
¢d_pcm_ac˚ss_mask_t
 *
obj
);

922 
¢d_pcm_ac˚ss_mask_c›y
(
¢d_pcm_ac˚ss_mask_t
 *
d°
, c⁄° snd_pcm_ac˚ss_mask_à*
§c
);

923 
¢d_pcm_ac˚ss_mask_n⁄e
(
¢d_pcm_ac˚ss_mask_t
 *
mask
);

924 
¢d_pcm_ac˚ss_mask_™y
(
¢d_pcm_ac˚ss_mask_t
 *
mask
);

925 
¢d_pcm_ac˚ss_mask_ã°
(c⁄° 
¢d_pcm_ac˚ss_mask_t
 *
mask
, 
¢d_pcm_ac˚ss_t
 
vÆ
);

926 
¢d_pcm_ac˚ss_mask_em±y
(c⁄° 
¢d_pcm_ac˚ss_mask_t
 *
mask
);

927 
¢d_pcm_ac˚ss_mask_£t
(
¢d_pcm_ac˚ss_mask_t
 *
mask
, 
¢d_pcm_ac˚ss_t
 
vÆ
);

928 
¢d_pcm_ac˚ss_mask_ª£t
(
¢d_pcm_ac˚ss_mask_t
 *
mask
, 
¢d_pcm_ac˚ss_t
 
vÆ
);

939 
size_t
 
¢d_pcm_f‹m©_mask_sizeof
();

944 
	#¢d_pcm_f‹m©_mask_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_f‹m©_mask
)

	)

945 
¢d_pcm_f‹m©_mask_mÆloc
(
¢d_pcm_f‹m©_mask_t
 **
±r
);

946 
¢d_pcm_f‹m©_mask_‰ì
(
¢d_pcm_f‹m©_mask_t
 *
obj
);

947 
¢d_pcm_f‹m©_mask_c›y
(
¢d_pcm_f‹m©_mask_t
 *
d°
, c⁄° snd_pcm_f‹m©_mask_à*
§c
);

948 
¢d_pcm_f‹m©_mask_n⁄e
(
¢d_pcm_f‹m©_mask_t
 *
mask
);

949 
¢d_pcm_f‹m©_mask_™y
(
¢d_pcm_f‹m©_mask_t
 *
mask
);

950 
¢d_pcm_f‹m©_mask_ã°
(c⁄° 
¢d_pcm_f‹m©_mask_t
 *
mask
, 
¢d_pcm_f‹m©_t
 
vÆ
);

951 
¢d_pcm_f‹m©_mask_em±y
(c⁄° 
¢d_pcm_f‹m©_mask_t
 *
mask
);

952 
¢d_pcm_f‹m©_mask_£t
(
¢d_pcm_f‹m©_mask_t
 *
mask
, 
¢d_pcm_f‹m©_t
 
vÆ
);

953 
¢d_pcm_f‹m©_mask_ª£t
(
¢d_pcm_f‹m©_mask_t
 *
mask
, 
¢d_pcm_f‹m©_t
 
vÆ
);

964 
size_t
 
¢d_pcm_subf‹m©_mask_sizeof
();

969 
	#¢d_pcm_subf‹m©_mask_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_subf‹m©_mask
)

	)

970 
¢d_pcm_subf‹m©_mask_mÆloc
(
¢d_pcm_subf‹m©_mask_t
 **
±r
);

971 
¢d_pcm_subf‹m©_mask_‰ì
(
¢d_pcm_subf‹m©_mask_t
 *
obj
);

972 
¢d_pcm_subf‹m©_mask_c›y
(
¢d_pcm_subf‹m©_mask_t
 *
d°
, c⁄° snd_pcm_subf‹m©_mask_à*
§c
);

973 
¢d_pcm_subf‹m©_mask_n⁄e
(
¢d_pcm_subf‹m©_mask_t
 *
mask
);

974 
¢d_pcm_subf‹m©_mask_™y
(
¢d_pcm_subf‹m©_mask_t
 *
mask
);

975 
¢d_pcm_subf‹m©_mask_ã°
(c⁄° 
¢d_pcm_subf‹m©_mask_t
 *
mask
, 
¢d_pcm_subf‹m©_t
 
vÆ
);

976 
¢d_pcm_subf‹m©_mask_em±y
(c⁄° 
¢d_pcm_subf‹m©_mask_t
 *
mask
);

977 
¢d_pcm_subf‹m©_mask_£t
(
¢d_pcm_subf‹m©_mask_t
 *
mask
, 
¢d_pcm_subf‹m©_t
 
vÆ
);

978 
¢d_pcm_subf‹m©_mask_ª£t
(
¢d_pcm_subf‹m©_mask_t
 *
mask
, 
¢d_pcm_subf‹m©_t
 
vÆ
);

989 
size_t
 
¢d_pcm_°©us_sizeof
();

994 
	#¢d_pcm_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_°©us
)

	)

995 
¢d_pcm_°©us_mÆloc
(
¢d_pcm_°©us_t
 **
±r
);

996 
¢d_pcm_°©us_‰ì
(
¢d_pcm_°©us_t
 *
obj
);

997 
¢d_pcm_°©us_c›y
(
¢d_pcm_°©us_t
 *
d°
, c⁄° snd_pcm_°©us_à*
§c
);

998 
¢d_pcm_°©e_t
 
¢d_pcm_°©us_gë_°©e
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

999 
¢d_pcm_°©us_gë_åiggî_t°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_time°amp_t
 *
±r
);

1000 
¢d_pcm_°©us_gë_åiggî_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

1001 
¢d_pcm_°©us_gë_t°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_time°amp_t
 *
±r
);

1002 
¢d_pcm_°©us_gë_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

1003 
¢d_pcm_°©us_gë_audio_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

1004 
¢d_pcm_°©us_gë_drivî_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

1005 
¢d_pcm_°©us_gë_audio_ht°amp_ªp‹t
(c⁄° 
¢d_pcm_°©us_t
 *
obj
,

1006 
¢d_pcm_audio_t°amp_ªp‹t_t
 *
audio_t°amp_ªp‹t
);

1007 
¢d_pcm_°©us_£t_audio_ht°amp_c⁄fig
(
¢d_pcm_°©us_t
 *
obj
,

1008 
¢d_pcm_audio_t°amp_c⁄fig_t
 *
audio_t°amp_c⁄fig
);

1010 
ölöe
 
¢d_pcm_∑ck_audio_t°amp_c⁄fig
(*
d©a
,

1011 
¢d_pcm_audio_t°amp_c⁄fig_t
 *
c⁄fig
)

1013 *
d©a
 = 
c⁄fig
->
ªp‹t_dñay
;

1014 *
d©a
 <<= 4;

1015 *
d©a
 |
c⁄fig
->
ty≥_ªque°ed
;

1018 
ölöe
 
¢d_pcm_u≈ack_audio_t°amp_ªp‹t
(
d©a
, 
accuøcy
,

1019 
¢d_pcm_audio_t°amp_ªp‹t_t
 *
ªp‹t
)

1021 
d©a
 >>= 16;

1022 
ªp‹t
->
vÆid
 = 
d©a
 & 1;

1023 
ªp‹t
->
a˘uÆ_ty≥
 = (
d©a
 >> 1) & 0xF;

1024 
ªp‹t
->
accuøcy_ªp‹t
 = (
d©a
 >> 5) & 1;

1025 
ªp‹t
->
accuøcy
 =áccuracy;

1028 
¢d_pcm_s‰ames_t
 
¢d_pcm_°©us_gë_dñay
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

1029 
¢d_pcm_u‰ames_t
 
¢d_pcm_°©us_gë_avaû
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

1030 
¢d_pcm_u‰ames_t
 
¢d_pcm_°©us_gë_avaû_max
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

1031 
¢d_pcm_u‰ames_t
 
¢d_pcm_°©us_gë_ovîønge
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

1042 c⁄° *
¢d_pcm_ty≥_«me
(
¢d_pcm_ty≥_t
 
ty≥
);

1043 c⁄° *
¢d_pcm_°ªam_«me
(c⁄° 
¢d_pcm_°ªam_t
 
°ªam
);

1044 c⁄° *
¢d_pcm_ac˚ss_«me
(c⁄° 
¢d_pcm_ac˚ss_t
 
_ac˚ss
);

1045 c⁄° *
¢d_pcm_f‹m©_«me
(c⁄° 
¢d_pcm_f‹m©_t
 
f‹m©
);

1046 c⁄° *
¢d_pcm_f‹m©_des¸ùti⁄
(c⁄° 
¢d_pcm_f‹m©_t
 
f‹m©
);

1047 c⁄° *
¢d_pcm_subf‹m©_«me
(c⁄° 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

1048 c⁄° *
¢d_pcm_subf‹m©_des¸ùti⁄
(c⁄° 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

1049 
¢d_pcm_f‹m©_t
 
¢d_pcm_f‹m©_vÆue
(c⁄° * 
«me
);

1050 c⁄° *
¢d_pcm_t°amp_mode_«me
(c⁄° 
¢d_pcm_t°amp_t
 
mode
);

1051 c⁄° *
¢d_pcm_°©e_«me
(c⁄° 
¢d_pcm_°©e_t
 
°©e
);

1062 
¢d_pcm_dump
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

1063 
¢d_pcm_dump_hw_£tup
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

1064 
¢d_pcm_dump_sw_£tup
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

1065 
¢d_pcm_dump_£tup
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

1066 
¢d_pcm_hw_∑øms_dump
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_ouçut_t
 *
out
);

1067 
¢d_pcm_sw_∑øms_dump
(
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_ouçut_t
 *
out
);

1068 
¢d_pcm_°©us_dump
(
¢d_pcm_°©us_t
 *
°©us
, 
¢d_ouçut_t
 *
out
);

1079 
¢d_pcm_mm≠_begö
(
¢d_pcm_t
 *
pcm
,

1080 c⁄° 
¢d_pcm_ch™√l_¨ó_t
 **
¨ós
,

1081 
¢d_pcm_u‰ames_t
 *
off£t
,

1082 
¢d_pcm_u‰ames_t
 *
‰ames
);

1083 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_commô
(
¢d_pcm_t
 *
pcm
,

1084 
¢d_pcm_u‰ames_t
 
off£t
,

1085 
¢d_pcm_u‰ames_t
 
‰ames
);

1086 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_wrôei
(
¢d_pcm_t
 *
pcm
, c⁄° *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

1087 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_ªadi
(
¢d_pcm_t
 *
pcm
, *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

1088 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_wrôí
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

1089 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_ªadn
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

1100 
¢d_pcm_f‹m©_sig√d
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1101 
¢d_pcm_f‹m©_unsig√d
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1102 
¢d_pcm_f‹m©_löór
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1103 
¢d_pcm_f‹m©_Êﬂt
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1104 
¢d_pcm_f‹m©_lôée_ídün
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1105 
¢d_pcm_f‹m©_big_ídün
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1106 
¢d_pcm_f‹m©_˝u_ídün
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1107 
¢d_pcm_f‹m©_width
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1108 
¢d_pcm_f‹m©_physiˇl_width
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1109 
¢d_pcm_f‹m©_t
 
¢d_pcm_buûd_löór_f‹m©
(
width
, 
pwidth
, 
unsignd
, 
big_ídün
);

1110 
ssize_t
 
¢d_pcm_f‹m©_size
(
¢d_pcm_f‹m©_t
 
f‹m©
, 
size_t
 
ßm∂es
);

1111 
u_öt8_t
 
¢d_pcm_f‹m©_sûí˚
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1112 
u_öt16_t
 
¢d_pcm_f‹m©_sûí˚_16
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1113 
u_öt32_t
 
¢d_pcm_f‹m©_sûí˚_32
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1114 
u_öt64_t
 
¢d_pcm_f‹m©_sûí˚_64
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1115 
¢d_pcm_f‹m©_£t_sûí˚
(
¢d_pcm_f‹m©_t
 
f‹m©
, *
buf
, 
ßm∂es
);

1117 
¢d_pcm_s‰ames_t
 
¢d_pcm_byãs_to_‰ames
(
¢d_pcm_t
 *
pcm
, 
ssize_t
 
byãs
);

1118 
ssize_t
 
¢d_pcm_‰ames_to_byãs
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_s‰ames_t
 
‰ames
);

1119 
¢d_pcm_byãs_to_ßm∂es
(
¢d_pcm_t
 *
pcm
, 
ssize_t
 
byãs
);

1120 
ssize_t
 
¢d_pcm_ßm∂es_to_byãs
(
¢d_pcm_t
 *
pcm
, 
ßm∂es
);

1122 
¢d_pcm_¨ó_sûí˚
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√l
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1123 
ßm∂es
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1124 
¢d_pcm_¨ós_sûí˚
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√ls
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1125 
ch™√ls
, 
¢d_pcm_u‰ames_t
 
‰ames
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1126 
¢d_pcm_¨ó_c›y
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√l
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1127 c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
§c_ch™√l
, 
¢d_pcm_u‰ames_t
 
§c_off£t
,

1128 
ßm∂es
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1129 
¢d_pcm_¨ós_c›y
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√ls
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1130 c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
§c_ch™√ls
, 
¢d_pcm_u‰ames_t
 
§c_off£t
,

1131 
ch™√ls
, 
¢d_pcm_u‰ames_t
 
‰ames
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1143 
	e_¢d_pcm_hook_ty≥
 {

1144 
SND_PCM_HOOK_TYPE_HW_PARAMS
 = 0,

1145 
SND_PCM_HOOK_TYPE_HW_FREE
,

1146 
SND_PCM_HOOK_TYPE_CLOSE
,

1147 
SND_PCM_HOOK_TYPE_LAST
 = 
SND_PCM_HOOK_TYPE_CLOSE


1148 } 
	t¢d_pcm_hook_ty≥_t
;

1151 
_¢d_pcm_hook
 
	t¢d_pcm_hook_t
;

1153 (*
¢d_pcm_hook_func_t
)(
	t¢d_pcm_hook_t
 *
	thook
);

1154 
¢d_pcm_t
 *
¢d_pcm_hook_gë_pcm
(
¢d_pcm_hook_t
 *
hook
);

1155 *
¢d_pcm_hook_gë_¥iv©e
(
¢d_pcm_hook_t
 *
hook
);

1156 
¢d_pcm_hook_£t_¥iv©e
(
¢d_pcm_hook_t
 *
hook
, *
¥iv©e_d©a
);

1157 
¢d_pcm_hook_add
(
¢d_pcm_hook_t
 **
hookp
, 
¢d_pcm_t
 *
pcm
,

1158 
¢d_pcm_hook_ty≥_t
 
ty≥
,

1159 
¢d_pcm_hook_func_t
 
func
, *
¥iv©e_d©a
);

1160 
¢d_pcm_hook_ªmove
(
¢d_pcm_hook_t
 *
hook
);

1172 
	s_¢d_pcm_sc›e_›s
 {

1176 (*
íabÀ
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1180 (*
dißbÀ
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1184 (*
°¨t
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1188 (*
°›
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1192 (*
upd©e
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1196 (*
ª£t
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1200 (*
˛o£
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1201 } 
	t¢d_pcm_sc›e_›s_t
;

1203 
¢d_pcm_u‰ames_t
 
¢d_pcm_mëî_gë_bufsize
(
¢d_pcm_t
 *
pcm
);

1204 
¢d_pcm_mëî_gë_ch™√ls
(
¢d_pcm_t
 *
pcm
);

1205 
¢d_pcm_mëî_gë_øã
(
¢d_pcm_t
 *
pcm
);

1206 
¢d_pcm_u‰ames_t
 
¢d_pcm_mëî_gë_now
(
¢d_pcm_t
 *
pcm
);

1207 
¢d_pcm_u‰ames_t
 
¢d_pcm_mëî_gë_bound¨y
(
¢d_pcm_t
 *
pcm
);

1208 
¢d_pcm_mëî_add_sc›e
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sc›e_t
 *
sc›e
);

1209 
¢d_pcm_sc›e_t
 *
¢d_pcm_mëî_£¨ch_sc›e
(
¢d_pcm_t
 *
pcm
, c⁄° *
«me
);

1210 
¢d_pcm_sc›e_mÆloc
(
¢d_pcm_sc›e_t
 **
±r
);

1211 
¢d_pcm_sc›e_£t_›s
(
¢d_pcm_sc›e_t
 *
sc›e
,

1212 c⁄° 
¢d_pcm_sc›e_›s_t
 *
vÆ
);

1213 
¢d_pcm_sc›e_£t_«me
(
¢d_pcm_sc›e_t
 *
sc›e
, c⁄° *
vÆ
);

1214 c⁄° *
¢d_pcm_sc›e_gë_«me
(
¢d_pcm_sc›e_t
 *
sc›e
);

1215 *
¢d_pcm_sc›e_gë_ˇŒback_¥iv©e
(
¢d_pcm_sc›e_t
 *
sc›e
);

1216 
¢d_pcm_sc›e_£t_ˇŒback_¥iv©e
(
¢d_pcm_sc›e_t
 *
sc›e
, *
vÆ
);

1217 
¢d_pcm_sc›e_s16_›í
(
¢d_pcm_t
 *
pcm
, c⁄° *
«me
,

1218 
¢d_pcm_sc›e_t
 **
sc›ï
);

1219 
öt16_t
 *
¢d_pcm_sc›e_s16_gë_ch™√l_buf„r
(
¢d_pcm_sc›e_t
 *
sc›e
,

1220 
ch™√l
);

1232 
	e_¢d_•cm_œãncy
 {

1235 
SND_SPCM_LATENCY_STANDARD
 = 0,

1238 
SND_SPCM_LATENCY_MEDIUM
,

1241 
SND_SPCM_LATENCY_REALTIME


1242 } 
	t¢d_•cm_œãncy_t
;

1245 
	e_¢d_•cm_xrun_ty≥
 {

1247 
SND_SPCM_XRUN_IGNORE
 = 0,

1249 
SND_SPCM_XRUN_STOP


1250 } 
	t¢d_•cm_xrun_ty≥_t
;

1253 
	e_¢d_•cm_du∂ex_ty≥
 {

1255 
SND_SPCM_DUPLEX_LIBERAL
 = 0,

1257 
SND_SPCM_DUPLEX_PEDANTIC


1258 } 
	t¢d_•cm_du∂ex_ty≥_t
;

1260 
¢d_•cm_öô
(
¢d_pcm_t
 *
pcm
,

1261 
øã
,

1262 
ch™√ls
,

1263 
¢d_pcm_f‹m©_t
 
f‹m©
,

1264 
¢d_pcm_subf‹m©_t
 
subf‹m©
,

1265 
¢d_•cm_œãncy_t
 
œãncy
,

1266 
¢d_pcm_ac˚ss_t
 
_ac˚ss
,

1267 
¢d_•cm_xrun_ty≥_t
 
xrun_ty≥
);

1269 
¢d_•cm_öô_du∂ex
(
¢d_pcm_t
 *
∂ayback_pcm
,

1270 
¢d_pcm_t
 *
ˇ±uª_pcm
,

1271 
øã
,

1272 
ch™√ls
,

1273 
¢d_pcm_f‹m©_t
 
f‹m©
,

1274 
¢d_pcm_subf‹m©_t
 
subf‹m©
,

1275 
¢d_•cm_œãncy_t
 
œãncy
,

1276 
¢d_pcm_ac˚ss_t
 
_ac˚ss
,

1277 
¢d_•cm_xrun_ty≥_t
 
xrun_ty≥
,

1278 
¢d_•cm_du∂ex_ty≥_t
 
du∂ex_ty≥
);

1280 
¢d_•cm_öô_gë_∑øms
(
¢d_pcm_t
 *
pcm
,

1281 *
øã
,

1282 
¢d_pcm_u‰ames_t
 *
buf„r_size
,

1283 
¢d_pcm_u‰ames_t
 *
≥riod_size
);

1295 c⁄° *
¢d_pcm_°¨t_mode_«me
(
¢d_pcm_°¨t_t
 
mode
Ë
__©åibuã__
((
dïªˇãd
));

1296 c⁄° *
¢d_pcm_xrun_mode_«me
(
¢d_pcm_xrun_t
 
mode
Ë
__©åibuã__
((
dïªˇãd
));

1297 
¢d_pcm_sw_∑øms_£t_°¨t_mode
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_°¨t_t
 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1298 
¢d_pcm_°¨t_t
 
¢d_pcm_sw_∑øms_gë_°¨t_mode
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
Ë
__©åibuã__
((
dïªˇãd
));

1299 
¢d_pcm_sw_∑øms_£t_xrun_mode
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_xrun_t
 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1300 
¢d_pcm_xrun_t
 
¢d_pcm_sw_∑øms_gë_xrun_mode
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
Ë
__©åibuã__
((
dïªˇãd
));

1301 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_SW_PARAMS_API
)

1302 
¢d_pcm_sw_∑øms_£t_x„r_Æign
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1303 
¢d_pcm_sw_∑øms_gë_x„r_Æign
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1304 
¢d_pcm_sw_∑øms_£t_¶ìp_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1305 
¢d_pcm_sw_∑øms_gë_¶ìp_mö
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, *
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1307 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_HW_PARAMS_API
)

1308 
¢d_pcm_hw_∑øms_gë_tick_time
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1309 
¢d_pcm_hw_∑øms_gë_tick_time_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1310 
¢d_pcm_hw_∑øms_gë_tick_time_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1311 
¢d_pcm_hw_∑øms_ã°_tick_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
Ë
__©åibuã__
((
dïªˇãd
));

1312 
¢d_pcm_hw_∑øms_£t_tick_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
Ë
__©åibuã__
((
dïªˇãd
));

1313 
¢d_pcm_hw_∑øms_£t_tick_time_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1314 
¢d_pcm_hw_∑øms_£t_tick_time_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1315 
¢d_pcm_hw_∑øms_£t_tick_time_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
Ë
__©åibuã__
((
dïªˇãd
));

1316 
¢d_pcm_hw_∑øms_£t_tick_time_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1317 
¢d_pcm_hw_∑øms_£t_tick_time_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1318 
¢d_pcm_hw_∑øms_£t_tick_time_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1323 #ifde‡
__˝lu•lus


	@/usr/include/alsa/rawmidi.h

28 #i‚de‡
__ALSA_RAWMIDI_H


29 
	#__ALSA_RAWMIDI_H


	)

31 #ifde‡
__˝lu•lus


42 
	#SND_RAWMIDI_DLSYM_VERSION
 
_dlsym_øwmidi_001


	)

45 
_¢d_øwmidi_öfo
 
	t¢d_øwmidi_öfo_t
;

47 
_¢d_øwmidi_∑øms
 
	t¢d_øwmidi_∑øms_t
;

49 
_¢d_øwmidi_°©us
 
	t¢d_øwmidi_°©us_t
;

52 
	e_¢d_øwmidi_°ªam
 {

54 
SND_RAWMIDI_STREAM_OUTPUT
 = 0,

56 
SND_RAWMIDI_STREAM_INPUT
,

57 
SND_RAWMIDI_STREAM_LAST
 = 
SND_RAWMIDI_STREAM_INPUT


58 } 
	t¢d_øwmidi_°ªam_t
;

61 
	#SND_RAWMIDI_APPEND
 0x0001

	)

63 
	#SND_RAWMIDI_NONBLOCK
 0x0002

	)

65 
	#SND_RAWMIDI_SYNC
 0x0004

	)

68 
_¢d_øwmidi
 
	t¢d_øwmidi_t
;

71 
	e_¢d_øwmidi_ty≥
 {

73 
SND_RAWMIDI_TYPE_HW
,

75 
SND_RAWMIDI_TYPE_SHM
,

77 
SND_RAWMIDI_TYPE_INET
,

79 
SND_RAWMIDI_TYPE_VIRTUAL


80 } 
	t¢d_øwmidi_ty≥_t
;

82 
¢d_øwmidi_›í
(
¢d_øwmidi_t
 **
ö_rmidi
, snd_øwmidi_à**
out_rmidi
,

83 c⁄° *
«me
, 
mode
);

84 
¢d_øwmidi_›í_lc⁄f
(
¢d_øwmidi_t
 **
ö_rmidi
, snd_øwmidi_à**
out_rmidi
,

85 c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

86 
¢d_øwmidi_˛o£
(
¢d_øwmidi_t
 *
rmidi
);

87 
¢d_øwmidi_pﬁl_des¸ùt‹s_cou¡
(
¢d_øwmidi_t
 *
rmidi
);

88 
¢d_øwmidi_pﬁl_des¸ùt‹s
(
¢d_øwmidi_t
 *
rmidi
, 
pﬁlfd
 *
pfds
, 
•a˚
);

89 
¢d_øwmidi_pﬁl_des¸ùt‹s_ªvíts
(
¢d_øwmidi_t
 *
øwmidi
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvít
);

90 
¢d_øwmidi_n⁄block
(
¢d_øwmidi_t
 *
rmidi
, 
n⁄block
);

91 
size_t
 
¢d_øwmidi_öfo_sizeof
();

96 
	#¢d_øwmidi_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_øwmidi_öfo
)

	)

97 
¢d_øwmidi_öfo_mÆloc
(
¢d_øwmidi_öfo_t
 **
±r
);

98 
¢d_øwmidi_öfo_‰ì
(
¢d_øwmidi_öfo_t
 *
obj
);

99 
¢d_øwmidi_öfo_c›y
(
¢d_øwmidi_öfo_t
 *
d°
, c⁄° snd_øwmidi_öfo_à*
§c
);

100 
¢d_øwmidi_öfo_gë_devi˚
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

101 
¢d_øwmidi_öfo_gë_subdevi˚
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

102 
¢d_øwmidi_°ªam_t
 
¢d_øwmidi_öfo_gë_°ªam
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

103 
¢d_øwmidi_öfo_gë_ˇrd
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

104 
¢d_øwmidi_öfo_gë_Êags
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

105 c⁄° *
¢d_øwmidi_öfo_gë_id
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

106 c⁄° *
¢d_øwmidi_öfo_gë_«me
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

107 c⁄° *
¢d_øwmidi_öfo_gë_subdevi˚_«me
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

108 
¢d_øwmidi_öfo_gë_subdevi˚s_cou¡
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

109 
¢d_øwmidi_öfo_gë_subdevi˚s_avaû
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

110 
¢d_øwmidi_öfo_£t_devi˚
(
¢d_øwmidi_öfo_t
 *
obj
, 
vÆ
);

111 
¢d_øwmidi_öfo_£t_subdevi˚
(
¢d_øwmidi_öfo_t
 *
obj
, 
vÆ
);

112 
¢d_øwmidi_öfo_£t_°ªam
(
¢d_øwmidi_öfo_t
 *
obj
, 
¢d_øwmidi_°ªam_t
 
vÆ
);

113 
¢d_øwmidi_öfo
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_öfo_t
 * 
öfo
);

114 
size_t
 
¢d_øwmidi_∑øms_sizeof
();

119 
	#¢d_øwmidi_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_øwmidi_∑øms
)

	)

120 
¢d_øwmidi_∑øms_mÆloc
(
¢d_øwmidi_∑øms_t
 **
±r
);

121 
¢d_øwmidi_∑øms_‰ì
(
¢d_øwmidi_∑øms_t
 *
obj
);

122 
¢d_øwmidi_∑øms_c›y
(
¢d_øwmidi_∑øms_t
 *
d°
, c⁄° snd_øwmidi_∑øms_à*
§c
);

123 
¢d_øwmidi_∑øms_£t_buf„r_size
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
, 
size_t
 
vÆ
);

124 
size_t
 
¢d_øwmidi_∑øms_gë_buf„r_size
(c⁄° 
¢d_øwmidi_∑øms_t
 *
∑øms
);

125 
¢d_øwmidi_∑øms_£t_avaû_mö
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
, 
size_t
 
vÆ
);

126 
size_t
 
¢d_øwmidi_∑øms_gë_avaû_mö
(c⁄° 
¢d_øwmidi_∑øms_t
 *
∑øms
);

127 
¢d_øwmidi_∑øms_£t_no_a˘ive_£nsög
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
, 
vÆ
);

128 
¢d_øwmidi_∑øms_gë_no_a˘ive_£nsög
(c⁄° 
¢d_øwmidi_∑øms_t
 *
∑øms
);

129 
¢d_øwmidi_∑øms
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 * 
∑øms
);

130 
¢d_øwmidi_∑øms_cuºít
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
);

131 
size_t
 
¢d_øwmidi_°©us_sizeof
();

136 
	#¢d_øwmidi_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_øwmidi_°©us
)

	)

137 
¢d_øwmidi_°©us_mÆloc
(
¢d_øwmidi_°©us_t
 **
±r
);

138 
¢d_øwmidi_°©us_‰ì
(
¢d_øwmidi_°©us_t
 *
obj
);

139 
¢d_øwmidi_°©us_c›y
(
¢d_øwmidi_°©us_t
 *
d°
, c⁄° snd_øwmidi_°©us_à*
§c
);

140 
¢d_øwmidi_°©us_gë_t°amp
(c⁄° 
¢d_øwmidi_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

141 
size_t
 
¢d_øwmidi_°©us_gë_avaû
(c⁄° 
¢d_øwmidi_°©us_t
 *
obj
);

142 
size_t
 
¢d_øwmidi_°©us_gë_xruns
(c⁄° 
¢d_øwmidi_°©us_t
 *
obj
);

143 
¢d_øwmidi_°©us
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_°©us_t
 * 
°©us
);

144 
¢d_øwmidi_døö
(
¢d_øwmidi_t
 *
rmidi
);

145 
¢d_øwmidi_dr›
(
¢d_øwmidi_t
 *
rmidi
);

146 
ssize_t
 
¢d_øwmidi_wrôe
(
¢d_øwmidi_t
 *
rmidi
, c⁄° *
buf„r
, 
size_t
 
size
);

147 
ssize_t
 
¢d_øwmidi_ªad
(
¢d_øwmidi_t
 *
rmidi
, *
buf„r
, 
size_t
 
size
);

148 c⁄° *
¢d_øwmidi_«me
(
¢d_øwmidi_t
 *
rmidi
);

149 
¢d_øwmidi_ty≥_t
 
¢d_øwmidi_ty≥
(
¢d_øwmidi_t
 *
rmidi
);

150 
¢d_øwmidi_°ªam_t
 
¢d_øwmidi_°ªam
(
¢d_øwmidi_t
 *
øwmidi
);

154 #ifde‡
__˝lu•lus


	@/usr/include/alsa/seq.h

29 #i‚de‡
__ALSA_SEQ_H


30 
	#__ALSA_SEQ_H


	)

32 #ifde‡
__˝lu•lus


44 
	#SND_SEQ_DLSYM_VERSION
 
_dlsym_£q_001


	)

47 
_¢d_£q
 
	t¢d_£q_t
;

52 
	#SND_SEQ_OPEN_OUTPUT
 1

	)

53 
	#SND_SEQ_OPEN_INPUT
 2

	)

54 
	#SND_SEQ_OPEN_DUPLEX
 (
SND_SEQ_OPEN_OUTPUT
|
SND_SEQ_OPEN_INPUT
Ë

	)

59 
	#SND_SEQ_NONBLOCK
 0x0001

	)

62 
	e_¢d_£q_ty≥
 {

63 
SND_SEQ_TYPE_HW
,

64 
SND_SEQ_TYPE_SHM
,

65 
SND_SEQ_TYPE_INET


66 } 
	t¢d_£q_ty≥_t
;

69 
	#SND_SEQ_ADDRESS_UNKNOWN
 253

	)

70 
	#SND_SEQ_ADDRESS_SUBSCRIBERS
 254

	)

71 
	#SND_SEQ_ADDRESS_BROADCAST
 255

	)

74 
	#SND_SEQ_CLIENT_SYSTEM
 0

	)

78 
¢d_£q_›í
(
¢d_£q_t
 **
h™dÀ
, c⁄° *
«me
, 
°ªams
, 
mode
);

79 
¢d_£q_›í_lc⁄f
(
¢d_£q_t
 **
h™dÀ
, c⁄° *
«me
, 
°ªams
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

80 c⁄° *
¢d_£q_«me
(
¢d_£q_t
 *
£q
);

81 
¢d_£q_ty≥_t
 
¢d_£q_ty≥
(
¢d_£q_t
 *
£q
);

82 
¢d_£q_˛o£
(
¢d_£q_t
 *
h™dÀ
);

83 
¢d_£q_pﬁl_des¸ùt‹s_cou¡
(
¢d_£q_t
 *
h™dÀ
, 
evíts
);

84 
¢d_£q_pﬁl_des¸ùt‹s
(
¢d_£q_t
 *
h™dÀ
, 
pﬁlfd
 *
pfds
, 
•a˚
, 
evíts
);

85 
¢d_£q_pﬁl_des¸ùt‹s_ªvíts
(
¢d_£q_t
 *
£q
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

86 
¢d_£q_n⁄block
(
¢d_£q_t
 *
h™dÀ
, 
n⁄block
);

87 
¢d_£q_˛õ¡_id
(
¢d_£q_t
 *
h™dÀ
);

89 
size_t
 
¢d_£q_gë_ouçut_buf„r_size
(
¢d_£q_t
 *
h™dÀ
);

90 
size_t
 
¢d_£q_gë_öput_buf„r_size
(
¢d_£q_t
 *
h™dÀ
);

91 
¢d_£q_£t_ouçut_buf„r_size
(
¢d_£q_t
 *
h™dÀ
, 
size_t
 
size
);

92 
¢d_£q_£t_öput_buf„r_size
(
¢d_£q_t
 *
h™dÀ
, 
size_t
 
size
);

95 
_¢d_£q_sy°em_öfo
 
	t¢d_£q_sy°em_öfo_t
;

97 
size_t
 
¢d_£q_sy°em_öfo_sizeof
();

99 
	#¢d_£q_sy°em_öfo_Æloˇ
(
±r
) \

100 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_sy°em_öfo
)

	)

101 
¢d_£q_sy°em_öfo_mÆloc
(
¢d_£q_sy°em_öfo_t
 **
±r
);

102 
¢d_£q_sy°em_öfo_‰ì
(
¢d_£q_sy°em_öfo_t
 *
±r
);

103 
¢d_£q_sy°em_öfo_c›y
(
¢d_£q_sy°em_öfo_t
 *
d°
, c⁄° snd_£q_sy°em_öfo_à*
§c
);

105 
¢d_£q_sy°em_öfo_gë_queues
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

106 
¢d_£q_sy°em_öfo_gë_˛õ¡s
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

107 
¢d_£q_sy°em_öfo_gë_p‹ts
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

108 
¢d_£q_sy°em_öfo_gë_ch™√ls
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

109 
¢d_£q_sy°em_öfo_gë_cur_˛õ¡s
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

110 
¢d_£q_sy°em_öfo_gë_cur_queues
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

112 
¢d_£q_sy°em_öfo
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_sy°em_öfo_t
 *
öfo
);

125 
_¢d_£q_˛õ¡_öfo
 
	t¢d_£q_˛õ¡_öfo_t
;

128 
	e¢d_£q_˛õ¡_ty≥
 {

129 
SND_SEQ_USER_CLIENT
 = 1,

130 
SND_SEQ_KERNEL_CLIENT
 = 2

131 } 
	t¢d_£q_˛õ¡_ty≥_t
;

133 
size_t
 
¢d_£q_˛õ¡_öfo_sizeof
();

135 
	#¢d_£q_˛õ¡_öfo_Æloˇ
(
±r
) \

136 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_˛õ¡_öfo
)

	)

137 
¢d_£q_˛õ¡_öfo_mÆloc
(
¢d_£q_˛õ¡_öfo_t
 **
±r
);

138 
¢d_£q_˛õ¡_öfo_‰ì
(
¢d_£q_˛õ¡_öfo_t
 *
±r
);

139 
¢d_£q_˛õ¡_öfo_c›y
(
¢d_£q_˛õ¡_öfo_t
 *
d°
, c⁄° snd_£q_˛õ¡_öfo_à*
§c
);

141 
¢d_£q_˛õ¡_öfo_gë_˛õ¡
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

142 
¢d_£q_˛õ¡_ty≥_t
 
¢d_£q_˛õ¡_öfo_gë_ty≥
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

143 c⁄° *
¢d_£q_˛õ¡_öfo_gë_«me
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

144 
¢d_£q_˛õ¡_öfo_gë_brﬂdˇ°_fûãr
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

145 
¢d_£q_˛õ¡_öfo_gë_îr‹_boun˚
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

146 
¢d_£q_˛õ¡_öfo_gë_ˇrd
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

147 
¢d_£q_˛õ¡_öfo_gë_pid
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

148 c⁄° *
¢d_£q_˛õ¡_öfo_gë_evít_fûãr
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

149 
¢d_£q_˛õ¡_öfo_gë_num_p‹ts
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

150 
¢d_£q_˛õ¡_öfo_gë_evít_lo°
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

152 
¢d_£q_˛õ¡_öfo_£t_˛õ¡
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
˛õ¡
);

153 
¢d_£q_˛õ¡_öfo_£t_«me
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, c⁄° *
«me
);

154 
¢d_£q_˛õ¡_öfo_£t_brﬂdˇ°_fûãr
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
vÆ
);

155 
¢d_£q_˛õ¡_öfo_£t_îr‹_boun˚
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
vÆ
);

156 
¢d_£q_˛õ¡_öfo_£t_evít_fûãr
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, *
fûãr
);

158 
¢d_£q_˛õ¡_öfo_evít_fûãr_˛ór
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

159 
¢d_£q_˛õ¡_öfo_evít_fûãr_add
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
evít_ty≥
);

160 
¢d_£q_˛õ¡_öfo_evít_fûãr_dñ
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
evít_ty≥
);

161 
¢d_£q_˛õ¡_öfo_evít_fûãr_check
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
evít_ty≥
);

163 
¢d_£q_gë_˛õ¡_öfo
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

164 
¢d_£q_gë_™y_˛õ¡_öfo
(
¢d_£q_t
 *
h™dÀ
, 
˛õ¡
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

165 
¢d_£q_£t_˛õ¡_öfo
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

166 
¢d_£q_quîy_√xt_˛õ¡
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

172 
_¢d_£q_˛õ¡_poﬁ
 
	t¢d_£q_˛õ¡_poﬁ_t
;

174 
size_t
 
¢d_£q_˛õ¡_poﬁ_sizeof
();

176 
	#¢d_£q_˛õ¡_poﬁ_Æloˇ
(
±r
) \

177 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_˛õ¡_poﬁ
)

	)

178 
¢d_£q_˛õ¡_poﬁ_mÆloc
(
¢d_£q_˛õ¡_poﬁ_t
 **
±r
);

179 
¢d_£q_˛õ¡_poﬁ_‰ì
(
¢d_£q_˛õ¡_poﬁ_t
 *
±r
);

180 
¢d_£q_˛õ¡_poﬁ_c›y
(
¢d_£q_˛õ¡_poﬁ_t
 *
d°
, c⁄° snd_£q_˛õ¡_poﬁ_à*
§c
);

182 
¢d_£q_˛õ¡_poﬁ_gë_˛õ¡
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

183 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_ouçut_poﬁ
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

184 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_öput_poﬁ
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

185 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_ouçut_room
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

186 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_ouçut_‰ì
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

187 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_öput_‰ì
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

188 
¢d_£q_˛õ¡_poﬁ_£t_ouçut_poﬁ
(
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
, 
size_t
 
size
);

189 
¢d_£q_˛õ¡_poﬁ_£t_öput_poﬁ
(
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
, 
size_t
 
size
);

190 
¢d_£q_˛õ¡_poﬁ_£t_ouçut_room
(
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
, 
size_t
 
size
);

192 
¢d_£q_gë_˛õ¡_poﬁ
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

193 
¢d_£q_£t_˛õ¡_poﬁ
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

207 
_¢d_£q_p‹t_öfo
 
	t¢d_£q_p‹t_öfo_t
;

210 
	#SND_SEQ_PORT_SYSTEM_TIMER
 0

	)

211 
	#SND_SEQ_PORT_SYSTEM_ANNOUNCE
 1

	)

214 
	#SND_SEQ_PORT_CAP_READ
 (1<<0Ë

	)

215 
	#SND_SEQ_PORT_CAP_WRITE
 (1<<1Ë

	)

217 
	#SND_SEQ_PORT_CAP_SYNC_READ
 (1<<2Ë

	)

218 
	#SND_SEQ_PORT_CAP_SYNC_WRITE
 (1<<3Ë

	)

220 
	#SND_SEQ_PORT_CAP_DUPLEX
 (1<<4Ë

	)

222 
	#SND_SEQ_PORT_CAP_SUBS_READ
 (1<<5Ë

	)

223 
	#SND_SEQ_PORT_CAP_SUBS_WRITE
 (1<<6Ë

	)

224 
	#SND_SEQ_PORT_CAP_NO_EXPORT
 (1<<7Ë

	)

228 
	#SND_SEQ_PORT_TYPE_SPECIFIC
 (1<<0)

	)

230 
	#SND_SEQ_PORT_TYPE_MIDI_GENERIC
 (1<<1)

	)

232 
	#SND_SEQ_PORT_TYPE_MIDI_GM
 (1<<2)

	)

234 
	#SND_SEQ_PORT_TYPE_MIDI_GS
 (1<<3)

	)

236 
	#SND_SEQ_PORT_TYPE_MIDI_XG
 (1<<4)

	)

238 
	#SND_SEQ_PORT_TYPE_MIDI_MT32
 (1<<5)

	)

240 
	#SND_SEQ_PORT_TYPE_MIDI_GM2
 (1<<6)

	)

243 
	#SND_SEQ_PORT_TYPE_SYNTH
 (1<<10)

	)

246 
	#SND_SEQ_PORT_TYPE_DIRECT_SAMPLE
 (1<<11)

	)

249 
	#SND_SEQ_PORT_TYPE_SAMPLE
 (1<<12)

	)

251 
	#SND_SEQ_PORT_TYPE_HARDWARE
 (1<<16)

	)

253 
	#SND_SEQ_PORT_TYPE_SOFTWARE
 (1<<17)

	)

255 
	#SND_SEQ_PORT_TYPE_SYNTHESIZER
 (1<<18)

	)

258 
	#SND_SEQ_PORT_TYPE_PORT
 (1<<19)

	)

260 
	#SND_SEQ_PORT_TYPE_APPLICATION
 (1<<20)

	)

263 
size_t
 
¢d_£q_p‹t_öfo_sizeof
();

265 
	#¢d_£q_p‹t_öfo_Æloˇ
(
±r
) \

266 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_p‹t_öfo
)

	)

267 
¢d_£q_p‹t_öfo_mÆloc
(
¢d_£q_p‹t_öfo_t
 **
±r
);

268 
¢d_£q_p‹t_öfo_‰ì
(
¢d_£q_p‹t_öfo_t
 *
±r
);

269 
¢d_£q_p‹t_öfo_c›y
(
¢d_£q_p‹t_öfo_t
 *
d°
, c⁄° snd_£q_p‹t_öfo_à*
§c
);

271 
¢d_£q_p‹t_öfo_gë_˛õ¡
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

272 
¢d_£q_p‹t_öfo_gë_p‹t
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

273 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_p‹t_öfo_gë_addr
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

274 c⁄° *
¢d_£q_p‹t_öfo_gë_«me
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

275 
¢d_£q_p‹t_öfo_gë_ˇ∑bûôy
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

276 
¢d_£q_p‹t_öfo_gë_ty≥
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

277 
¢d_£q_p‹t_öfo_gë_midi_ch™√ls
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

278 
¢d_£q_p‹t_öfo_gë_midi_voi˚s
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

279 
¢d_£q_p‹t_öfo_gë_sy¡h_voi˚s
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

280 
¢d_£q_p‹t_öfo_gë_ªad_u£
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

281 
¢d_£q_p‹t_öfo_gë_wrôe_u£
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

282 
¢d_£q_p‹t_öfo_gë_p‹t_•ecifõd
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

283 
¢d_£q_p‹t_öfo_gë_time°ampög
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

284 
¢d_£q_p‹t_öfo_gë_time°amp_ªÆ
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

285 
¢d_£q_p‹t_öfo_gë_time°amp_queue
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

287 
¢d_£q_p‹t_öfo_£t_˛õ¡
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
˛õ¡
);

288 
¢d_£q_p‹t_öfo_£t_p‹t
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
p‹t
);

289 
¢d_£q_p‹t_öfo_£t_addr
(
¢d_£q_p‹t_öfo_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

290 
¢d_£q_p‹t_öfo_£t_«me
(
¢d_£q_p‹t_öfo_t
 *
öfo
, c⁄° *
«me
);

291 
¢d_£q_p‹t_öfo_£t_ˇ∑bûôy
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ˇ∑bûôy
);

292 
¢d_£q_p‹t_öfo_£t_ty≥
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ty≥
);

293 
¢d_£q_p‹t_öfo_£t_midi_ch™√ls
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ch™√ls
);

294 
¢d_£q_p‹t_öfo_£t_midi_voi˚s
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
voi˚s
);

295 
¢d_£q_p‹t_öfo_£t_sy¡h_voi˚s
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
voi˚s
);

296 
¢d_£q_p‹t_öfo_£t_p‹t_•ecifõd
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
vÆ
);

297 
¢d_£q_p‹t_öfo_£t_time°ampög
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
íabÀ
);

298 
¢d_£q_p‹t_öfo_£t_time°amp_ªÆ
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ªÆtime
);

299 
¢d_£q_p‹t_öfo_£t_time°amp_queue
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
queue
);

301 
¢d_£q_¸óã_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

302 
¢d_£q_dñëe_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
p‹t
);

303 
¢d_£q_gë_p‹t_öfo
(
¢d_£q_t
 *
h™dÀ
, 
p‹t
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

304 
¢d_£q_gë_™y_p‹t_öfo
(
¢d_£q_t
 *
h™dÀ
, 
˛õ¡
, 
p‹t
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

305 
¢d_£q_£t_p‹t_öfo
(
¢d_£q_t
 *
h™dÀ
, 
p‹t
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

306 
¢d_£q_quîy_√xt_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

319 
_¢d_£q_p‹t_subs¸ibe
 
	t¢d_£q_p‹t_subs¸ibe_t
;

321 
size_t
 
¢d_£q_p‹t_subs¸ibe_sizeof
();

323 
	#¢d_£q_p‹t_subs¸ibe_Æloˇ
(
±r
) \

324 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_p‹t_subs¸ibe
)

	)

325 
¢d_£q_p‹t_subs¸ibe_mÆloc
(
¢d_£q_p‹t_subs¸ibe_t
 **
±r
);

326 
¢d_£q_p‹t_subs¸ibe_‰ì
(
¢d_£q_p‹t_subs¸ibe_t
 *
±r
);

327 
¢d_£q_p‹t_subs¸ibe_c›y
(
¢d_£q_p‹t_subs¸ibe_t
 *
d°
, c⁄° snd_£q_p‹t_subs¸ibe_à*
§c
);

329 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_p‹t_subs¸ibe_gë_£ndî
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

330 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_p‹t_subs¸ibe_gë_de°
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

331 
¢d_£q_p‹t_subs¸ibe_gë_queue
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

332 
¢d_£q_p‹t_subs¸ibe_gë_ex˛usive
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

333 
¢d_£q_p‹t_subs¸ibe_gë_time_upd©e
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

334 
¢d_£q_p‹t_subs¸ibe_gë_time_ªÆ
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

336 
¢d_£q_p‹t_subs¸ibe_£t_£ndî
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

337 
¢d_£q_p‹t_subs¸ibe_£t_de°
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

338 
¢d_£q_p‹t_subs¸ibe_£t_queue
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
q
);

339 
¢d_£q_p‹t_subs¸ibe_£t_ex˛usive
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
vÆ
);

340 
¢d_£q_p‹t_subs¸ibe_£t_time_upd©e
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
vÆ
);

341 
¢d_£q_p‹t_subs¸ibe_£t_time_ªÆ
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
vÆ
);

343 
¢d_£q_gë_p‹t_subs¸ùti⁄
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_subs¸ibe_t
 *
sub
);

344 
¢d_£q_subs¸ibe_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_subs¸ibe_t
 *
sub
);

345 
¢d_£q_unsubs¸ibe_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_subs¸ibe_t
 *
sub
);

351 
_¢d_£q_quîy_subs¸ibe
 
	t¢d_£q_quîy_subs¸ibe_t
;

355 
SND_SEQ_QUERY_SUBS_READ
,

356 
SND_SEQ_QUERY_SUBS_WRITE


357 } 
	t¢d_£q_quîy_subs_ty≥_t
;

359 
size_t
 
¢d_£q_quîy_subs¸ibe_sizeof
();

361 
	#¢d_£q_quîy_subs¸ibe_Æloˇ
(
±r
) \

362 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_quîy_subs¸ibe
)

	)

363 
¢d_£q_quîy_subs¸ibe_mÆloc
(
¢d_£q_quîy_subs¸ibe_t
 **
±r
);

364 
¢d_£q_quîy_subs¸ibe_‰ì
(
¢d_£q_quîy_subs¸ibe_t
 *
±r
);

365 
¢d_£q_quîy_subs¸ibe_c›y
(
¢d_£q_quîy_subs¸ibe_t
 *
d°
, c⁄° snd_£q_quîy_subs¸ibe_à*
§c
);

367 
¢d_£q_quîy_subs¸ibe_gë_˛õ¡
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

368 
¢d_£q_quîy_subs¸ibe_gë_p‹t
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

369 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_quîy_subs¸ibe_gë_roŸ
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

370 
¢d_£q_quîy_subs_ty≥_t
 
¢d_£q_quîy_subs¸ibe_gë_ty≥
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

371 
¢d_£q_quîy_subs¸ibe_gë_ödex
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

372 
¢d_£q_quîy_subs¸ibe_gë_num_subs
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

373 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_quîy_subs¸ibe_gë_addr
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

374 
¢d_£q_quîy_subs¸ibe_gë_queue
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

375 
¢d_£q_quîy_subs¸ibe_gë_ex˛usive
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

376 
¢d_£q_quîy_subs¸ibe_gë_time_upd©e
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

377 
¢d_£q_quîy_subs¸ibe_gë_time_ªÆ
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

379 
¢d_£q_quîy_subs¸ibe_£t_˛õ¡
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
˛õ¡
);

380 
¢d_£q_quîy_subs¸ibe_£t_p‹t
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
p‹t
);

381 
¢d_£q_quîy_subs¸ibe_£t_roŸ
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

382 
¢d_£q_quîy_subs¸ibe_£t_ty≥
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
¢d_£q_quîy_subs_ty≥_t
 
ty≥
);

383 
¢d_£q_quîy_subs¸ibe_£t_ödex
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
_ödex
);

385 
¢d_£q_quîy_p‹t_subs¸ibîs
(
¢d_£q_t
 *
£q
, 
¢d_£q_quîy_subs¸ibe_t
 * 
subs
);

398 
_¢d_£q_queue_öfo
 
	t¢d_£q_queue_öfo_t
;

400 
_¢d_£q_queue_°©us
 
	t¢d_£q_queue_°©us_t
;

402 
_¢d_£q_queue_ãmpo
 
	t¢d_£q_queue_ãmpo_t
;

404 
_¢d_£q_queue_timî
 
	t¢d_£q_queue_timî_t
;

407 
	#SND_SEQ_QUEUE_DIRECT
 253

	)

409 
size_t
 
¢d_£q_queue_öfo_sizeof
();

411 
	#¢d_£q_queue_öfo_Æloˇ
(
±r
) \

412 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_öfo
)

	)

413 
¢d_£q_queue_öfo_mÆloc
(
¢d_£q_queue_öfo_t
 **
±r
);

414 
¢d_£q_queue_öfo_‰ì
(
¢d_£q_queue_öfo_t
 *
±r
);

415 
¢d_£q_queue_öfo_c›y
(
¢d_£q_queue_öfo_t
 *
d°
, c⁄° snd_£q_queue_öfo_à*
§c
);

417 
¢d_£q_queue_öfo_gë_queue
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

418 c⁄° *
¢d_£q_queue_öfo_gë_«me
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

419 
¢d_£q_queue_öfo_gë_ow√r
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

420 
¢d_£q_queue_öfo_gë_locked
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

421 
¢d_£q_queue_öfo_gë_Êags
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

423 
¢d_£q_queue_öfo_£t_«me
(
¢d_£q_queue_öfo_t
 *
öfo
, c⁄° *
«me
);

424 
¢d_£q_queue_öfo_£t_ow√r
(
¢d_£q_queue_öfo_t
 *
öfo
, 
ow√r
);

425 
¢d_£q_queue_öfo_£t_locked
(
¢d_£q_queue_öfo_t
 *
öfo
, 
locked
);

426 
¢d_£q_queue_öfo_£t_Êags
(
¢d_£q_queue_öfo_t
 *
öfo
, 
Êags
);

428 
¢d_£q_¸óã_queue
(
¢d_£q_t
 *
£q
, 
¢d_£q_queue_öfo_t
 *
öfo
);

429 
¢d_£q_Æloc_«med_queue
(
¢d_£q_t
 *
£q
, c⁄° *
«me
);

430 
¢d_£q_Æloc_queue
(
¢d_£q_t
 *
h™dÀ
);

431 
¢d_£q_‰ì_queue
(
¢d_£q_t
 *
h™dÀ
, 
q
);

432 
¢d_£q_gë_queue_öfo
(
¢d_£q_t
 *
£q
, 
q
, 
¢d_£q_queue_öfo_t
 *
öfo
);

433 
¢d_£q_£t_queue_öfo
(
¢d_£q_t
 *
£q
, 
q
, 
¢d_£q_queue_öfo_t
 *
öfo
);

434 
¢d_£q_quîy_«med_queue
(
¢d_£q_t
 *
£q
, c⁄° *
«me
);

436 
¢d_£q_gë_queue_ußge
(
¢d_£q_t
 *
h™dÀ
, 
q
);

437 
¢d_£q_£t_queue_ußge
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
u£d
);

441 
size_t
 
¢d_£q_queue_°©us_sizeof
();

443 
	#¢d_£q_queue_°©us_Æloˇ
(
±r
) \

444 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_°©us
)

	)

445 
¢d_£q_queue_°©us_mÆloc
(
¢d_£q_queue_°©us_t
 **
±r
);

446 
¢d_£q_queue_°©us_‰ì
(
¢d_£q_queue_°©us_t
 *
±r
);

447 
¢d_£q_queue_°©us_c›y
(
¢d_£q_queue_°©us_t
 *
d°
, c⁄° snd_£q_queue_°©us_à*
§c
);

449 
¢d_£q_queue_°©us_gë_queue
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

450 
¢d_£q_queue_°©us_gë_evíts
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

451 
¢d_£q_tick_time_t
 
¢d_£q_queue_°©us_gë_tick_time
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

452 c⁄° 
¢d_£q_ªÆ_time_t
 *
¢d_£q_queue_°©us_gë_ªÆ_time
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

453 
¢d_£q_queue_°©us_gë_°©us
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

455 
¢d_£q_gë_queue_°©us
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_°©us_t
 *
°©us
);

459 
size_t
 
¢d_£q_queue_ãmpo_sizeof
();

461 
	#¢d_£q_queue_ãmpo_Æloˇ
(
±r
) \

462 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_ãmpo
)

	)

463 
¢d_£q_queue_ãmpo_mÆloc
(
¢d_£q_queue_ãmpo_t
 **
±r
);

464 
¢d_£q_queue_ãmpo_‰ì
(
¢d_£q_queue_ãmpo_t
 *
±r
);

465 
¢d_£q_queue_ãmpo_c›y
(
¢d_£q_queue_ãmpo_t
 *
d°
, c⁄° snd_£q_queue_ãmpo_à*
§c
);

467 
¢d_£q_queue_ãmpo_gë_queue
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

468 
¢d_£q_queue_ãmpo_gë_ãmpo
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

469 
¢d_£q_queue_ãmpo_gë_µq
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

470 
¢d_£q_queue_ãmpo_gë_skew
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

471 
¢d_£q_queue_ãmpo_gë_skew_ba£
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

472 
¢d_£q_queue_ãmpo_£t_ãmpo
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
ãmpo
);

473 
¢d_£q_queue_ãmpo_£t_µq
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
µq
);

474 
¢d_£q_queue_ãmpo_£t_skew
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
skew
);

475 
¢d_£q_queue_ãmpo_£t_skew_ba£
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
ba£
);

477 
¢d_£q_gë_queue_ãmpo
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_ãmpo_t
 *
ãmpo
);

478 
¢d_£q_£t_queue_ãmpo
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_ãmpo_t
 *
ãmpo
);

485 
SND_SEQ_TIMER_ALSA
 = 0,

486 
SND_SEQ_TIMER_MIDI_CLOCK
 = 1,

487 
SND_SEQ_TIMER_MIDI_TICK
 = 2

488 } 
	t¢d_£q_queue_timî_ty≥_t
;

490 
size_t
 
¢d_£q_queue_timî_sizeof
();

492 
	#¢d_£q_queue_timî_Æloˇ
(
±r
) \

493 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_timî
)

	)

494 
¢d_£q_queue_timî_mÆloc
(
¢d_£q_queue_timî_t
 **
±r
);

495 
¢d_£q_queue_timî_‰ì
(
¢d_£q_queue_timî_t
 *
±r
);

496 
¢d_£q_queue_timî_c›y
(
¢d_£q_queue_timî_t
 *
d°
, c⁄° snd_£q_queue_timî_à*
§c
);

498 
¢d_£q_queue_timî_gë_queue
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

499 
¢d_£q_queue_timî_ty≥_t
 
¢d_£q_queue_timî_gë_ty≥
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

500 c⁄° 
¢d_timî_id_t
 *
¢d_£q_queue_timî_gë_id
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

501 
¢d_£q_queue_timî_gë_ªsﬁuti⁄
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

503 
¢d_£q_queue_timî_£t_ty≥
(
¢d_£q_queue_timî_t
 *
öfo
, 
¢d_£q_queue_timî_ty≥_t
 
ty≥
);

504 
¢d_£q_queue_timî_£t_id
(
¢d_£q_queue_timî_t
 *
öfo
, c⁄° 
¢d_timî_id_t
 *
id
);

505 
¢d_£q_queue_timî_£t_ªsﬁuti⁄
(
¢d_£q_queue_timî_t
 *
öfo
, 
ªsﬁuti⁄
);

507 
¢d_£q_gë_queue_timî
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_timî_t
 *
timî
);

508 
¢d_£q_£t_queue_timî
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_timî_t
 *
timî
);

519 
¢d_£q_‰ì_evít
(
¢d_£q_evít_t
 *
ev
);

520 
ssize_t
 
¢d_£q_evít_Àngth
(
¢d_£q_evít_t
 *
ev
);

521 
¢d_£q_evít_ouçut
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 *
ev
);

522 
¢d_£q_evít_ouçut_buf„r
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 *
ev
);

523 
¢d_£q_evít_ouçut_dúe˘
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 *
ev
);

524 
¢d_£q_evít_öput
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 **
ev
);

525 
¢d_£q_evít_öput_≥ndög
(
¢d_£q_t
 *
£q
, 
„tch_£quí˚r
);

526 
¢d_£q_døö_ouçut
(
¢d_£q_t
 *
h™dÀ
);

527 
¢d_£q_evít_ouçut_≥ndög
(
¢d_£q_t
 *
£q
);

528 
¢d_£q_exåa˘_ouçut
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 **
ev
);

529 
¢d_£q_dr›_ouçut
(
¢d_£q_t
 *
h™dÀ
);

530 
¢d_£q_dr›_ouçut_buf„r
(
¢d_£q_t
 *
h™dÀ
);

531 
¢d_£q_dr›_öput
(
¢d_£q_t
 *
h™dÀ
);

532 
¢d_£q_dr›_öput_buf„r
(
¢d_£q_t
 *
h™dÀ
);

535 
_¢d_£q_ªmove_evíts
 
	t¢d_£q_ªmove_evíts_t
;

538 
	#SND_SEQ_REMOVE_INPUT
 (1<<0Ë

	)

539 
	#SND_SEQ_REMOVE_OUTPUT
 (1<<1Ë

	)

540 
	#SND_SEQ_REMOVE_DEST
 (1<<2Ë

	)

541 
	#SND_SEQ_REMOVE_DEST_CHANNEL
 (1<<3Ë

	)

542 
	#SND_SEQ_REMOVE_TIME_BEFORE
 (1<<4Ë

	)

543 
	#SND_SEQ_REMOVE_TIME_AFTER
 (1<<5Ë

	)

544 
	#SND_SEQ_REMOVE_TIME_TICK
 (1<<6Ë

	)

545 
	#SND_SEQ_REMOVE_EVENT_TYPE
 (1<<7Ë

	)

546 
	#SND_SEQ_REMOVE_IGNORE_OFF
 (1<<8Ë

	)

547 
	#SND_SEQ_REMOVE_TAG_MATCH
 (1<<9Ë

	)

549 
size_t
 
¢d_£q_ªmove_evíts_sizeof
();

551 
	#¢d_£q_ªmove_evíts_Æloˇ
(
±r
) \

552 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_ªmove_evíts
)

	)

553 
¢d_£q_ªmove_evíts_mÆloc
(
¢d_£q_ªmove_evíts_t
 **
±r
);

554 
¢d_£q_ªmove_evíts_‰ì
(
¢d_£q_ªmove_evíts_t
 *
±r
);

555 
¢d_£q_ªmove_evíts_c›y
(
¢d_£q_ªmove_evíts_t
 *
d°
, c⁄° snd_£q_ªmove_evíts_à*
§c
);

557 
¢d_£q_ªmove_evíts_gë_c⁄dôi⁄
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

558 
¢d_£q_ªmove_evíts_gë_queue
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

559 c⁄° 
¢d_£q_time°amp_t
 *
¢d_£q_ªmove_evíts_gë_time
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

560 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_ªmove_evíts_gë_de°
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

561 
¢d_£q_ªmove_evíts_gë_ch™√l
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

562 
¢d_£q_ªmove_evíts_gë_evít_ty≥
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

563 
¢d_£q_ªmove_evíts_gë_èg
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

565 
¢d_£q_ªmove_evíts_£t_c⁄dôi⁄
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
Êags
);

566 
¢d_£q_ªmove_evíts_£t_queue
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
queue
);

567 
¢d_£q_ªmove_evíts_£t_time
(
¢d_£q_ªmove_evíts_t
 *
öfo
, c⁄° 
¢d_£q_time°amp_t
 *
time
);

568 
¢d_£q_ªmove_evíts_£t_de°
(
¢d_£q_ªmove_evíts_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

569 
¢d_£q_ªmove_evíts_£t_ch™√l
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
ch™√l
);

570 
¢d_£q_ªmove_evíts_£t_evít_ty≥
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
ty≥
);

571 
¢d_£q_ªmove_evíts_£t_èg
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
èg
);

573 
¢d_£q_ªmove_evíts
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_ªmove_evíts_t
 *
öfo
);

584 
¢d_£q_£t_bô
(
ƒ
, *
¨øy
);

585 
¢d_£q_un£t_bô
(
ƒ
, *
¨øy
);

586 
¢d_£q_ch™ge_bô
(
ƒ
, *
¨øy
);

587 
¢d_£q_gë_bô
(
ƒ
, *
¨øy
);

601 
SND_SEQ_EVFLG_RESULT
,

602 
SND_SEQ_EVFLG_NOTE
,

603 
SND_SEQ_EVFLG_CONTROL
,

604 
SND_SEQ_EVFLG_QUEUE
,

605 
SND_SEQ_EVFLG_SYSTEM
,

606 
SND_SEQ_EVFLG_MESSAGE
,

607 
SND_SEQ_EVFLG_CONNECTION
,

608 
SND_SEQ_EVFLG_SAMPLE
,

609 
SND_SEQ_EVFLG_USERS
,

610 
SND_SEQ_EVFLG_INSTR
,

611 
SND_SEQ_EVFLG_QUOTE
,

612 
SND_SEQ_EVFLG_NONE
,

613 
SND_SEQ_EVFLG_RAW
,

614 
SND_SEQ_EVFLG_FIXED
,

615 
SND_SEQ_EVFLG_VARIABLE
,

616 
SND_SEQ_EVFLG_VARUSR


620 
SND_SEQ_EVFLG_NOTE_ONEARG
,

621 
SND_SEQ_EVFLG_NOTE_TWOARG


625 
SND_SEQ_EVFLG_QUEUE_NOARG
,

626 
SND_SEQ_EVFLG_QUEUE_TICK
,

627 
SND_SEQ_EVFLG_QUEUE_TIME
,

628 
SND_SEQ_EVFLG_QUEUE_VALUE


636 c⁄° 
¢d_£q_evít_ty≥s
[];

638 
	#_SND_SEQ_TYPE
(
x
Ë(1<<(x)Ë

	)

639 
	#_SND_SEQ_TYPE_OPT
(
x
Ë((x)<<24Ë

	)

642 
	#¢d_£q_ty≥_check
(
ev
,
x
Ë(
¢d_£q_evít_ty≥s
[”v)->
ty≥
] & 
	`_SND_SEQ_TYPE
(x))

	)

645 
	#¢d_£q_ev_is_ªsu…_ty≥
(
ev
) \

646 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_RESULT
)

	)

648 
	#¢d_£q_ev_is_nŸe_ty≥
(
ev
) \

649 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_NOTE
)

	)

651 
	#¢d_£q_ev_is_c⁄åﬁ_ty≥
(
ev
) \

652 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_CONTROL
)

	)

654 
	#¢d_£q_ev_is_ch™√l_ty≥
(
ev
) \

655 (
¢d_£q_evít_ty≥s
[(
ev
)->
ty≥
] & (
	`_SND_SEQ_TYPE
(
SND_SEQ_EVFLG_NOTE
Ë| _SND_SEQ_TYPE(
SND_SEQ_EVFLG_CONTROL
)))

	)

658 
	#¢d_£q_ev_is_queue_ty≥
(
ev
) \

659 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_QUEUE
)

	)

661 
	#¢d_£q_ev_is_mesßge_ty≥
(
ev
) \

662 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_MESSAGE
)

	)

664 
	#¢d_£q_ev_is_subs¸ibe_ty≥
(
ev
) \

665 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_CONNECTION
)

	)

667 
	#¢d_£q_ev_is_ßm∂e_ty≥
(
ev
) \

668 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_SAMPLE
)

	)

670 
	#¢d_£q_ev_is_u£r_ty≥
(
ev
) \

671 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_USERS
)

	)

673 
	#¢d_£q_ev_is_ö°r_ty≥
(
ev
) \

674 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_INSTR
)

	)

676 
	#¢d_£q_ev_is_fixed_ty≥
(
ev
) \

677 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_FIXED
)

	)

679 
	#¢d_£q_ev_is_v¨übÀ_ty≥
(
ev
) \

680 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_VARIABLE
)

	)

682 
	#¢d_£q_ev_is_v¨u§_ty≥
(
ev
) \

683 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_VARUSR
)

	)

685 
	#¢d_£q_ev_is_ª£rved
(
ev
) \

686 (! 
¢d_£q_evít_ty≥s
[(
ev
)->
ty≥
])

	)

692 
	#¢d_£q_ev_is_¥i‹
(
ev
) \

693 (((
ev
)->
Êags
 & 
SND_SEQ_PRIORITY_MASK
Ë=
SND_SEQ_PRIORITY_HIGH
)

	)

696 
	#¢d_£q_ev_Àngth_ty≥
(
ev
) \

697 ((
ev
)->
Êags
 & 
SND_SEQ_EVENT_LENGTH_MASK
)

	)

699 
	#¢d_£q_ev_is_fixed
(
ev
) \

700 (
	`¢d_£q_ev_Àngth_ty≥
(
ev
Ë=
SND_SEQ_EVENT_LENGTH_FIXED
)

	)

702 
	#¢d_£q_ev_is_v¨übÀ
(
ev
) \

703 (
	`¢d_£q_ev_Àngth_ty≥
(
ev
Ë=
SND_SEQ_EVENT_LENGTH_VARIABLE
)

	)

705 
	#¢d_£q_ev_is_v¨u§
(
ev
) \

706 (
	`¢d_£q_ev_Àngth_ty≥
(
ev
Ë=
SND_SEQ_EVENT_LENGTH_VARUSR
)

	)

709 
	#¢d_£q_ev_time°amp_ty≥
(
ev
) \

710 ((
ev
)->
Êags
 & 
SND_SEQ_TIME_STAMP_MASK
)

	)

712 
	#¢d_£q_ev_is_tick
(
ev
) \

713 (
	`¢d_£q_ev_time°amp_ty≥
(
ev
Ë=
SND_SEQ_TIME_STAMP_TICK
)

	)

715 
	#¢d_£q_ev_is_ªÆ
(
ev
) \

716 (
	`¢d_£q_ev_time°amp_ty≥
(
ev
Ë=
SND_SEQ_TIME_STAMP_REAL
)

	)

719 
	#¢d_£q_ev_timemode_ty≥
(
ev
) \

720 ((
ev
)->
Êags
 & 
SND_SEQ_TIME_MODE_MASK
)

	)

722 
	#¢d_£q_ev_is_ab°ime
(
ev
) \

723 (
	`¢d_£q_ev_timemode_ty≥
(
ev
Ë=
SND_SEQ_TIME_MODE_ABS
)

	)

725 
	#¢d_£q_ev_is_ª…ime
(
ev
) \

726 (
	`¢d_£q_ev_timemode_ty≥
(
ev
Ë=
SND_SEQ_TIME_MODE_REL
)

	)

729 
	#¢d_£q_ev_is_dúe˘
(
ev
) \

730 ((
ev
)->
queue
 =
SND_SEQ_QUEUE_DIRECT
)

	)

734 #ifde‡
__˝lu•lus


	@/usr/include/alsa/seq_event.h

28 #i‚de‡
__ALSA_SEQ_EVENT_H


29 
	#__ALSA_SEQ_EVENT_H


	)

41 
	t¢d_£q_evít_ty≥_t
;

44 
	e¢d_£q_evít_ty≥
 {

46 
	mSND_SEQ_EVENT_SYSTEM
 = 0,

48 
	mSND_SEQ_EVENT_RESULT
,

51 
	mSND_SEQ_EVENT_NOTE
 = 5,

53 
	mSND_SEQ_EVENT_NOTEON
,

55 
	mSND_SEQ_EVENT_NOTEOFF
,

57 
	mSND_SEQ_EVENT_KEYPRESS
,

60 
	mSND_SEQ_EVENT_CONTROLLER
 = 10,

62 
	mSND_SEQ_EVENT_PGMCHANGE
,

64 
	mSND_SEQ_EVENT_CHANPRESS
,

66 
	mSND_SEQ_EVENT_PITCHBEND
,

68 
	mSND_SEQ_EVENT_CONTROL14
,

70 
	mSND_SEQ_EVENT_NONREGPARAM
,

72 
	mSND_SEQ_EVENT_REGPARAM
,

75 
	mSND_SEQ_EVENT_SONGPOS
 = 20,

77 
	mSND_SEQ_EVENT_SONGSEL
,

79 
	mSND_SEQ_EVENT_QFRAME
,

81 
	mSND_SEQ_EVENT_TIMESIGN
,

83 
	mSND_SEQ_EVENT_KEYSIGN
,

86 
	mSND_SEQ_EVENT_START
 = 30,

88 
	mSND_SEQ_EVENT_CONTINUE
,

90 
	mSND_SEQ_EVENT_STOP
,

92 
	mSND_SEQ_EVENT_SETPOS_TICK
,

94 
	mSND_SEQ_EVENT_SETPOS_TIME
,

96 
	mSND_SEQ_EVENT_TEMPO
,

98 
	mSND_SEQ_EVENT_CLOCK
,

100 
	mSND_SEQ_EVENT_TICK
,

102 
	mSND_SEQ_EVENT_QUEUE_SKEW
,

104 
	mSND_SEQ_EVENT_SYNC_POS
,

107 
	mSND_SEQ_EVENT_TUNE_REQUEST
 = 40,

109 
	mSND_SEQ_EVENT_RESET
,

111 
	mSND_SEQ_EVENT_SENSING
,

114 
	mSND_SEQ_EVENT_ECHO
 = 50,

116 
	mSND_SEQ_EVENT_OSS
,

119 
	mSND_SEQ_EVENT_CLIENT_START
 = 60,

121 
	mSND_SEQ_EVENT_CLIENT_EXIT
,

123 
	mSND_SEQ_EVENT_CLIENT_CHANGE
,

125 
	mSND_SEQ_EVENT_PORT_START
,

127 
	mSND_SEQ_EVENT_PORT_EXIT
,

129 
	mSND_SEQ_EVENT_PORT_CHANGE
,

132 
	mSND_SEQ_EVENT_PORT_SUBSCRIBED
,

134 
	mSND_SEQ_EVENT_PORT_UNSUBSCRIBED
,

137 
	mSND_SEQ_EVENT_USR0
 = 90,

139 
	mSND_SEQ_EVENT_USR1
,

141 
	mSND_SEQ_EVENT_USR2
,

143 
	mSND_SEQ_EVENT_USR3
,

145 
	mSND_SEQ_EVENT_USR4
,

147 
	mSND_SEQ_EVENT_USR5
,

149 
	mSND_SEQ_EVENT_USR6
,

151 
	mSND_SEQ_EVENT_USR7
,

153 
	mSND_SEQ_EVENT_USR8
,

155 
	mSND_SEQ_EVENT_USR9
,

158 
	mSND_SEQ_EVENT_SYSEX
 = 130,

160 
	mSND_SEQ_EVENT_BOUNCE
,

162 
	mSND_SEQ_EVENT_USR_VAR0
 = 135,

164 
	mSND_SEQ_EVENT_USR_VAR1
,

166 
	mSND_SEQ_EVENT_USR_VAR2
,

168 
	mSND_SEQ_EVENT_USR_VAR3
,

170 
	mSND_SEQ_EVENT_USR_VAR4
,

173 
	mSND_SEQ_EVENT_NONE
 = 255

178 
	s¢d_£q_addr
 {

179 
	m˛õ¡
;

180 
	mp‹t
;

181 } 
	t¢d_£q_addr_t
;

184 
	s¢d_£q_c⁄√˘
 {

185 
¢d_£q_addr_t
 
	m£ndî
;

186 
¢d_£q_addr_t
 
	mde°
;

187 } 
	t¢d_£q_c⁄√˘_t
;

191 
	s¢d_£q_ªÆ_time
 {

192 
	mtv_£c
;

193 
	mtv_n£c
;

194 } 
	t¢d_£q_ªÆ_time_t
;

197 
	t¢d_£q_tick_time_t
;

200 
	u¢d_£q_time°amp
 {

201 
¢d_£q_tick_time_t
 
	mtick
;

202 
¢d_£q_ªÆ_time
 
	mtime
;

203 } 
	t¢d_£q_time°amp_t
;

211 
	#SND_SEQ_TIME_STAMP_TICK
 (0<<0Ë

	)

212 
	#SND_SEQ_TIME_STAMP_REAL
 (1<<0Ë

	)

213 
	#SND_SEQ_TIME_STAMP_MASK
 (1<<0Ë

	)

215 
	#SND_SEQ_TIME_MODE_ABS
 (0<<1Ë

	)

216 
	#SND_SEQ_TIME_MODE_REL
 (1<<1Ë

	)

217 
	#SND_SEQ_TIME_MODE_MASK
 (1<<1Ë

	)

219 
	#SND_SEQ_EVENT_LENGTH_FIXED
 (0<<2Ë

	)

220 
	#SND_SEQ_EVENT_LENGTH_VARIABLE
 (1<<2Ë

	)

221 
	#SND_SEQ_EVENT_LENGTH_VARUSR
 (2<<2Ë

	)

222 
	#SND_SEQ_EVENT_LENGTH_MASK
 (3<<2Ë

	)

224 
	#SND_SEQ_PRIORITY_NORMAL
 (0<<4Ë

	)

225 
	#SND_SEQ_PRIORITY_HIGH
 (1<<4Ë

	)

226 
	#SND_SEQ_PRIORITY_MASK
 (1<<4Ë

	)

230 
	s¢d_£q_ev_nŸe
 {

231 
	mch™√l
;

232 
	mnŸe
;

233 
	mvñocôy
;

234 
	moff_vñocôy
;

235 
	mduøti⁄
;

236 } 
	t¢d_£q_ev_nŸe_t
;

239 
	s¢d_£q_ev_˘æ
 {

240 
	mch™√l
;

241 
	munu£d
[3];

242 
	m∑øm
;

243 sig√d 
	mvÆue
;

244 } 
	t¢d_£q_ev_˘æ_t
;

247 
	s¢d_£q_ev_øw8
 {

248 
	md
[12];

249 } 
	t¢d_£q_ev_øw8_t
;

252 
	s¢d_£q_ev_øw32
 {

253 
	md
[3];

254 } 
	t¢d_£q_ev_øw32_t
;

257 
	s¢d_£q_ev_ext
 {

258 
	mÀn
;

259 *
	m±r
;

260 } 
__©åibuã__
((
∑cked
));

262 
¢d_£q_ev_ext
 
	t¢d_£q_ev_ext_t
;

263 #ifde‡
DOC_HIDDEN


265 
¢d_£q_ev_ext
 
	t¢d_£q_ev_ext_t
;

269 
	s¢d_£q_ªsu…
 {

270 
	mevít
;

271 
	mªsu…
;

272 } 
	t¢d_£q_ªsu…_t
;

275 
	s¢d_£q_queue_skew
 {

276 
	mvÆue
;

277 
	mba£
;

278 } 
	t¢d_£q_queue_skew_t
;

281 
	s¢d_£q_ev_queue_c⁄åﬁ
 {

282 
	mqueue
;

283 
	munu£d
[3];

285 sig√d 
	mvÆue
;

286 
¢d_£q_time°amp_t
 
	mtime
;

287 
	mposôi⁄
;

288 
¢d_£q_queue_skew_t
 
	mskew
;

289 
	md32
[2];

290 
	md8
[8];

291 } 
	m∑øm
;

292 } 
	t¢d_£q_ev_queue_c⁄åﬁ_t
;

296 
	s¢d_£q_evít
 {

297 
¢d_£q_evít_ty≥_t
 
	mty≥
;

298 
	mÊags
;

299 
	mèg
;

301 
	mqueue
;

302 
¢d_£q_time°amp_t
 
	mtime
;

304 
¢d_£q_addr_t
 
	msour˚
;

305 
¢d_£q_addr_t
 
	mde°
;

308 
¢d_£q_ev_nŸe_t
 
	mnŸe
;

309 
¢d_£q_ev_˘æ_t
 
	mc⁄åﬁ
;

310 
¢d_£q_ev_øw8_t
 
	møw8
;

311 
¢d_£q_ev_øw32_t
 
	møw32
;

312 
¢d_£q_ev_ext_t
 
	mext
;

313 
¢d_£q_ev_queue_c⁄åﬁ_t
 
	mqueue
;

314 
¢d_£q_time°amp_t
 
	mtime
;

315 
¢d_£q_addr_t
 
	maddr
;

316 
¢d_£q_c⁄√˘_t
 
	mc⁄√˘
;

317 
¢d_£q_ªsu…_t
 
	mªsu…
;

318 } 
	md©a
;

319 } 
	t¢d_£q_evít_t
;

	@/usr/include/alsa/seq_midi_event.h

28 #i‚de‡
__ALSA_SEQ_MIDI_EVENT_H


29 
	#__ALSA_SEQ_MIDI_EVENT_H


	)

31 #ifde‡
__˝lu•lus


43 
¢d_midi_evít
 
	t¢d_midi_evít_t
;

45 
¢d_midi_evít_√w
(
size_t
 
bufsize
, 
¢d_midi_evít_t
 **
rdev
);

46 
¢d_midi_evít_ªsize_buf„r
(
¢d_midi_evít_t
 *
dev
, 
size_t
 
bufsize
);

47 
¢d_midi_evít_‰ì
(
¢d_midi_evít_t
 *
dev
);

48 
¢d_midi_evít_öô
(
¢d_midi_evít_t
 *
dev
);

49 
¢d_midi_evít_ª£t_ícode
(
¢d_midi_evít_t
 *
dev
);

50 
¢d_midi_evít_ª£t_decode
(
¢d_midi_evít_t
 *
dev
);

51 
¢d_midi_evít_no_°©us
(
¢d_midi_evít_t
 *
dev
, 
⁄
);

53 
¢d_midi_evít_ícode
(
¢d_midi_evít_t
 *
dev
, c⁄° *
buf
, 
cou¡
, 
¢d_£q_evít_t
 *
ev
);

54 
¢d_midi_evít_ícode_byã
(
¢d_midi_evít_t
 *
dev
, 
c
, 
¢d_£q_evít_t
 *
ev
);

56 
¢d_midi_evít_decode
(
¢d_midi_evít_t
 *
dev
, *
buf
, 
cou¡
, c⁄° 
¢d_£q_evít_t
 *
ev
);

60 #ifde‡
__˝lu•lus


	@/usr/include/alsa/seqmid.h

28 #i‚de‡
__ALSA_SEQMID_H


29 
	#__ALSA_SEQMID_H


	)

31 #ifde‡
__˝lu•lus


48 
	#¢d_£q_ev_˛ór
(
ev
) \

49 
	`mem£t
(
ev
, 0, (
¢d_£q_evít_t
))

	)

58 
	#¢d_£q_ev_£t_èg
(
ev
,
t
) \

59 ((
ev
)->
èg
 = (
t
))

	)

71 
	#¢d_£q_ev_£t_de°
(
ev
,
c
,
p
) \

72 ((
ev
)->
de°
.
˛õ¡
 = (
c
), (ev)->de°.
p‹t
 = (
p
))

	)

82 
	#¢d_£q_ev_£t_subs
(
ev
) \

83 ((
ev
)->
de°
.
˛õ¡
 = 
SND_SEQ_ADDRESS_SUBSCRIBERS
,\

84 (
ev
)->
de°
.
p‹t
 = 
SND_SEQ_ADDRESS_UNKNOWN
)

	)

94 
	#¢d_£q_ev_£t_brﬂdˇ°
(
ev
) \

95 ((
ev
)->
de°
.
˛õ¡
 = 
SND_SEQ_ADDRESS_BROADCAST
,\

96 (
ev
)->
de°
.
p‹t
 = 
SND_SEQ_ADDRESS_BROADCAST
)

	)

105 
	#¢d_£q_ev_£t_sour˚
(
ev
,
p
) \

106 ((
ev
)->
sour˚
.
p‹t
 = (
p
))

	)

117 
	#¢d_£q_ev_£t_dúe˘
(
ev
) \

118 ((
ev
)->
queue
 = 
SND_SEQ_QUEUE_DIRECT
)

	)

132 
	#¢d_£q_ev_scheduÀ_tick
(
ev
, 
q
, 
ªœtive
, 
âick
) \

133 ((
ev
)->
Êags
 &~(
SND_SEQ_TIME_STAMP_MASK
 | 
SND_SEQ_TIME_MODE_MASK
),\

134 (
ev
)->
Êags
 |
SND_SEQ_TIME_STAMP_TICK
,\

135 (
ev
)->
Êags
 |(
ªœtive
Ë? 
SND_SEQ_TIME_MODE_REL
 : 
SND_SEQ_TIME_MODE_ABS
,\

136 (
ev
)->
time
.
tick
 = (
âick
),\

137 (
ev
)->
queue
 = (
q
))

	)

151 
	#¢d_£q_ev_scheduÀ_ªÆ
(
ev
, 
q
, 
ªœtive
, 
πime
) \

152 ((
ev
)->
Êags
 &~(
SND_SEQ_TIME_STAMP_MASK
 | 
SND_SEQ_TIME_MODE_MASK
),\

153 (
ev
)->
Êags
 |
SND_SEQ_TIME_STAMP_REAL
,\

154 (
ev
)->
Êags
 |(
ªœtive
Ë? 
SND_SEQ_TIME_MODE_REL
 : 
SND_SEQ_TIME_MODE_ABS
,\

155 (
ev
)->
time
.timê*(
πime
),\

156 (
ev
)->
queue
 = (
q
))

	)

163 
	#¢d_£q_ev_£t_¥i‹ôy
(
ev
, 
high_¥i‹
) \

164 ((
ev
)->
Êags
 &~
SND_SEQ_PRIORITY_MASK
,\

165 (
ev
)->
Êags
 |(
high_¥i‹
Ë? 
SND_SEQ_PRIORITY_HIGH
 : 
SND_SEQ_PRIORITY_NORMAL
)

	)

175 
	#¢d_£q_ev_£t_fixed
(
ev
) \

176 ((
ev
)->
Êags
 &~
SND_SEQ_EVENT_LENGTH_MASK
,\

177 (
ev
)->
Êags
 |
SND_SEQ_EVENT_LENGTH_FIXED
)

	)

189 
	#¢d_£q_ev_£t_v¨übÀ
(
ev
, 
d©Æí
, 
d©≠å
) \

190 ((
ev
)->
Êags
 &~
SND_SEQ_EVENT_LENGTH_MASK
,\

191 (
ev
)->
Êags
 |
SND_SEQ_EVENT_LENGTH_VARIABLE
,\

192 (
ev
)->
d©a
.
ext
.
Àn
 = (
d©Æí
),\

193 (
ev
)->
d©a
.
ext
.
±r
 = (
d©≠å
))

	)

205 
	#¢d_£q_ev_£t_v¨u§
(
ev
, 
d©Æí
, 
d©≠å
) \

206 ((
ev
)->
Êags
 &~
SND_SEQ_EVENT_LENGTH_MASK
,\

207 (
ev
)->
Êags
 |
SND_SEQ_EVENT_LENGTH_VARUSR
,\

208 (
ev
)->
d©a
.
ext
.
Àn
 = (
d©Æí
),\

209 (
ev
)->
d©a
.
ext
.
±r
 = (
d©≠å
))

	)

218 
	#¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
typ
, 
q
, 
vÆ
) \

219 ((
ev
)->
ty≥
 = (
typ
),\

220 
	`¢d_£q_ev_£t_de°
(
ev
, 
SND_SEQ_CLIENT_SYSTEM
, 
SND_SEQ_PORT_SYSTEM_TIMER
),\

221 (
ev
)->
d©a
.
queue
.queuê(
q
),\

222 (
ev
)->
d©a
.
queue
.
∑øm
.
vÆue
 = (
vÆ
))

	)

231 
	#¢d_£q_ev_£t_queue_°¨t
(
ev
, 
q
) \

232 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_START
, 
q
, 0)

	)

241 
	#¢d_£q_ev_£t_queue_°›
(
ev
, 
q
) \

242 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_STOP
, 
q
, 0)

	)

251 
	#¢d_£q_ev_£t_queue_c⁄töue
(
ev
, 
q
) \

252 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_CONTINUE
, 
q
, 0)

	)

260 
	#¢d_£q_ev_£t_queue_ãmpo
(
ev
, 
q
, 
vÆ
) \

261 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_TEMPO
, 
q
, 
vÆ
)

	)

269 
	#¢d_£q_ev_£t_queue_pos_ªÆ
(
ev
, 
q
, 
πime
) \

270 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_SETPOS_TIME
,\

271 
	`¢d_£q_ev_£t_de°
(
ev
, 
SND_SEQ_CLIENT_SYSTEM
, 
SND_SEQ_PORT_SYSTEM_TIMER
),\

272 (
ev
)->
d©a
.
queue
.queuê(
q
),\

273 (
ev
)->
d©a
.
queue
.
∑øm
.
time
.timê*(
πime
))

	)

281 
	#¢d_£q_ev_£t_queue_pos_tick
(
ev
, 
q
, 
âime
) \

282 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_SETPOS_TICK
,\

283 
	`¢d_£q_ev_£t_de°
(
ev
, 
SND_SEQ_CLIENT_SYSTEM
, 
SND_SEQ_PORT_SYSTEM_TIMER
),\

284 (
ev
)->
d©a
.
queue
.queuê(
q
),\

285 (
ev
)->
d©a
.
queue
.
∑øm
.
time
.
tick
 = (
âime
))

	)

288 
¢d_£q_c⁄åﬁ_queue
(
¢d_£q_t
 *
£q
, 
q
, 
ty≥
, 
vÆue
, 
¢d_£q_evít_t
 *
ev
);

296 
	#¢d_£q_°¨t_queue
(
£q
, 
q
, 
ev
) \

297 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_START
, 0, 
ev
)

	)

305 
	#¢d_£q_°›_queue
(
£q
, 
q
, 
ev
) \

306 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_STOP
, 0, 
ev
)

	)

314 
	#¢d_£q_c⁄töue_queue
(
£q
, 
q
, 
ev
) \

315 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_CONTINUE
, 0, 
ev
)

	)

324 
	#¢d_£q_ch™ge_queue_ãmpo
(
£q
, 
q
, 
ãmpo
, 
ev
) \

325 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_TEMPO
, 
ãmpo
, 
ev
)

	)

328 
¢d_£q_¸óã_sim∂e_p‹t
(
¢d_£q_t
 *
£q
, c⁄° *
«me
,

329 
ˇps
, 
ty≥
);

331 
¢d_£q_dñëe_sim∂e_p‹t
(
¢d_£q_t
 *
£q
, 
p‹t
);

336 
¢d_£q_c⁄√˘_‰om
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
§c_˛õ¡
, 
§c_p‹t
);

337 
¢d_£q_c⁄√˘_to
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
de°_˛õ¡
, 
de°_p‹t
);

338 
¢d_£q_disc⁄√˘_‰om
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
§c_˛õ¡
, 
§c_p‹t
);

339 
¢d_£q_disc⁄√˘_to
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
de°_˛õ¡
, 
de°_p‹t
);

344 
¢d_£q_£t_˛õ¡_«me
(
¢d_£q_t
 *
£q
, c⁄° *
«me
);

345 
¢d_£q_£t_˛õ¡_evít_fûãr
(
¢d_£q_t
 *
£q
, 
evít_ty≥
);

346 
¢d_£q_£t_˛õ¡_poﬁ_ouçut
(
¢d_£q_t
 *
£q
, 
size_t
 
size
);

347 
¢d_£q_£t_˛õ¡_poﬁ_ouçut_room
(
¢d_£q_t
 *
£q
, 
size_t
 
size
);

348 
¢d_£q_£t_˛õ¡_poﬁ_öput
(
¢d_£q_t
 *
£q
, 
size_t
 
size
);

350 
¢d_£q_sync_ouçut_queue
(
¢d_£q_t
 *
£q
);

355 
¢d_£q_∑r£_addªss
(
¢d_£q_t
 *
£q
, 
¢d_£q_addr_t
 *
addr
, c⁄° *
°r
);

360 
¢d_£q_ª£t_poﬁ_ouçut
(
¢d_£q_t
 *
£q
);

361 
¢d_£q_ª£t_poﬁ_öput
(
¢d_£q_t
 *
£q
);

371 
	#¢d_£q_ev_£t_nŸe
(
ev
, 
ch
, 
key
, 
vñ
, 
dur
) \

372 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_NOTE
,\

373 
	`¢d_£q_ev_£t_fixed
(
ev
),\

374 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

375 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

376 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
),\

377 (
ev
)->
d©a
.
nŸe
.
duøti⁄
 = (
dur
))

	)

386 
	#¢d_£q_ev_£t_nŸe⁄
(
ev
, 
ch
, 
key
, 
vñ
) \

387 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_NOTEON
,\

388 
	`¢d_£q_ev_£t_fixed
(
ev
),\

389 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

390 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

391 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
))

	)

400 
	#¢d_£q_ev_£t_nŸeoff
(
ev
, 
ch
, 
key
, 
vñ
) \

401 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_NOTEOFF
,\

402 
	`¢d_£q_ev_£t_fixed
(
ev
),\

403 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

404 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

405 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
))

	)

414 
	#¢d_£q_ev_£t_key¥ess
(
ev
,
ch
,
key
,
vñ
) \

415 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_KEYPRESS
,\

416 
	`¢d_£q_ev_£t_fixed
(
ev
),\

417 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

418 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

419 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
))

	)

428 
	#¢d_£q_ev_£t_c⁄åﬁÀr
(
ev
,
ch
,
cc
,
vÆ
) \

429 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_CONTROLLER
,\

430 
	`¢d_£q_ev_£t_fixed
(
ev
),\

431 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

432 (
ev
)->
d©a
.
c⁄åﬁ
.
∑øm
 = (
cc
),\

433 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

441 
	#¢d_£q_ev_£t_pgmch™ge
(
ev
,
ch
,
vÆ
) \

442 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_PGMCHANGE
,\

443 
	`¢d_£q_ev_£t_fixed
(
ev
),\

444 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

445 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

453 
	#¢d_£q_ev_£t_pôchbíd
(
ev
,
ch
,
vÆ
) \

454 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_PITCHBEND
,\

455 
	`¢d_£q_ev_£t_fixed
(
ev
),\

456 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

457 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

465 
	#¢d_£q_ev_£t_ch™¥ess
(
ev
,
ch
,
vÆ
) \

466 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_CHANPRESS
,\

467 
	`¢d_£q_ev_£t_fixed
(
ev
),\

468 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

469 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

479 
	#¢d_£q_ev_£t_sy£x
(
ev
,
d©Æí
,
d©≠å
) \

480 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_SYSEX
,\

481 
	`¢d_£q_ev_£t_v¨übÀ
(
ev
, 
d©Æí
, 
d©≠å
))

	)

485 #ifde‡
__˝lu•lus


	@/usr/include/alsa/timer.h

28 #i‚de‡
__ALSA_TIMER_H


29 
	#__ALSA_TIMER_H


	)

31 #ifde‡
__˝lu•lus


42 
	#SND_TIMER_DLSYM_VERSION
 
_dlsym_timî_001


	)

44 
	#SND_TIMER_QUERY_DLSYM_VERSION
 
_dlsym_timî_quîy_001


	)

47 
_¢d_timî_id
 
	t¢d_timî_id_t
;

49 
_¢d_timî_göfo
 
	t¢d_timî_göfo_t
;

51 
_¢d_timî_g∑øms
 
	t¢d_timî_g∑øms_t
;

53 
_¢d_timî_g°©us
 
	t¢d_timî_g°©us_t
;

55 
_¢d_timî_öfo
 
	t¢d_timî_öfo_t
;

57 
_¢d_timî_∑øms
 
	t¢d_timî_∑øms_t
;

59 
_¢d_timî_°©us
 
	t¢d_timî_°©us_t
;

61 
	e_¢d_timî_˛ass
 {

62 
SND_TIMER_CLASS_NONE
 = -1,

63 
SND_TIMER_CLASS_SLAVE
 = 0,

64 
SND_TIMER_CLASS_GLOBAL
,

65 
SND_TIMER_CLASS_CARD
,

66 
SND_TIMER_CLASS_PCM
,

67 
SND_TIMER_CLASS_LAST
 = 
SND_TIMER_CLASS_PCM


68 } 
	t¢d_timî_˛ass_t
;

71 
	e_¢d_timî_¶ave_˛ass
 {

72 
SND_TIMER_SCLASS_NONE
 = 0,

73 
SND_TIMER_SCLASS_APPLICATION
,

74 
SND_TIMER_SCLASS_SEQUENCER
,

75 
SND_TIMER_SCLASS_OSS_SEQUENCER
,

76 
SND_TIMER_SCLASS_LAST
 = 
SND_TIMER_SCLASS_OSS_SEQUENCER


77 } 
	t¢d_timî_¶ave_˛ass_t
;

80 
	e_¢d_timî_evít
 {

81 
SND_TIMER_EVENT_RESOLUTION
 = 0,

82 
SND_TIMER_EVENT_TICK
,

83 
SND_TIMER_EVENT_START
,

84 
SND_TIMER_EVENT_STOP
,

85 
SND_TIMER_EVENT_CONTINUE
,

86 
SND_TIMER_EVENT_PAUSE
,

87 
SND_TIMER_EVENT_EARLY
,

88 
SND_TIMER_EVENT_SUSPEND
,

89 
SND_TIMER_EVENT_RESUME
,

91 
SND_TIMER_EVENT_MSTART
 = 
SND_TIMER_EVENT_START
 + 10,

92 
SND_TIMER_EVENT_MSTOP
 = 
SND_TIMER_EVENT_STOP
 + 10,

93 
SND_TIMER_EVENT_MCONTINUE
 = 
SND_TIMER_EVENT_CONTINUE
 + 10,

94 
SND_TIMER_EVENT_MPAUSE
 = 
SND_TIMER_EVENT_PAUSE
 + 10,

95 
SND_TIMER_EVENT_MSUSPEND
 = 
SND_TIMER_EVENT_SUSPEND
 + 10,

96 
SND_TIMER_EVENT_MRESUME
 = 
SND_TIMER_EVENT_RESUME
 + 10

97 } 
	t¢d_timî_evít_t
;

100 
	s_¢d_timî_ªad
 {

101 
ªsﬁuti⁄
;

102 
ticks
;

103 } 
	t¢d_timî_ªad_t
;

106 
	s_¢d_timî_åód
 {

107 
¢d_timî_evít_t
 
evít
;

108 
¢d_htime°amp_t
 
t°amp
;

109 
vÆ
;

110 } 
	t¢d_timî_åód_t
;

113 
	#SND_TIMER_GLOBAL_SYSTEM
 0

	)

115 
	#SND_TIMER_GLOBAL_RTC
 1

	)

117 
	#SND_TIMER_GLOBAL_HPET
 2

	)

119 
	#SND_TIMER_GLOBAL_HRTIMER
 3

	)

122 
	#SND_TIMER_OPEN_NONBLOCK
 (1<<0)

	)

124 
	#SND_TIMER_OPEN_TREAD
 (1<<1)

	)

127 
	e_¢d_timî_ty≥
 {

129 
SND_TIMER_TYPE_HW
 = 0,

131 
SND_TIMER_TYPE_SHM
,

133 
SND_TIMER_TYPE_INET


134 } 
	t¢d_timî_ty≥_t
;

137 
_¢d_timî_quîy
 
	t¢d_timî_quîy_t
;

139 
_¢d_timî
 
	t¢d_timî_t
;

142 
¢d_timî_quîy_›í
(
¢d_timî_quîy_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
);

143 
¢d_timî_quîy_›í_lc⁄f
(
¢d_timî_quîy_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

144 
¢d_timî_quîy_˛o£
(
¢d_timî_quîy_t
 *
h™dÀ
);

145 
¢d_timî_quîy_√xt_devi˚
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_id_t
 *
tid
);

146 
¢d_timî_quîy_öfo
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_göfo_t
 *
öfo
);

147 
¢d_timî_quîy_∑øms
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_g∑øms_t
 *
∑øms
);

148 
¢d_timî_quîy_°©us
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_g°©us_t
 *
°©us
);

150 
¢d_timî_›í
(
¢d_timî_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
);

151 
¢d_timî_›í_lc⁄f
(
¢d_timî_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

152 
¢d_timî_˛o£
(
¢d_timî_t
 *
h™dÀ
);

153 
¢d_async_add_timî_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
¢d_timî_t
 *
timî
,

154 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

155 
¢d_timî_t
 *
¢d_async_h™dÀr_gë_timî
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

156 
¢d_timî_pﬁl_des¸ùt‹s_cou¡
(
¢d_timî_t
 *
h™dÀ
);

157 
¢d_timî_pﬁl_des¸ùt‹s
(
¢d_timî_t
 *
h™dÀ
, 
pﬁlfd
 *
pfds
, 
•a˚
);

158 
¢d_timî_pﬁl_des¸ùt‹s_ªvíts
(
¢d_timî_t
 *
timî
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

159 
¢d_timî_öfo
(
¢d_timî_t
 *
h™dÀ
, 
¢d_timî_öfo_t
 *
timî
);

160 
¢d_timî_∑øms
(
¢d_timî_t
 *
h™dÀ
, 
¢d_timî_∑øms_t
 *
∑øms
);

161 
¢d_timî_°©us
(
¢d_timî_t
 *
h™dÀ
, 
¢d_timî_°©us_t
 *
°©us
);

162 
¢d_timî_°¨t
(
¢d_timî_t
 *
h™dÀ
);

163 
¢d_timî_°›
(
¢d_timî_t
 *
h™dÀ
);

164 
¢d_timî_c⁄töue
(
¢d_timî_t
 *
h™dÀ
);

165 
ssize_t
 
¢d_timî_ªad
(
¢d_timî_t
 *
h™dÀ
, *
buf„r
, 
size_t
 
size
);

167 
size_t
 
¢d_timî_id_sizeof
();

169 
	#¢d_timî_id_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_id
)

	)

170 
¢d_timî_id_mÆloc
(
¢d_timî_id_t
 **
±r
);

171 
¢d_timî_id_‰ì
(
¢d_timî_id_t
 *
obj
);

172 
¢d_timî_id_c›y
(
¢d_timî_id_t
 *
d°
, c⁄° snd_timî_id_à*
§c
);

174 
¢d_timî_id_£t_˛ass
(
¢d_timî_id_t
 *
id
, 
dev_˛ass
);

175 
¢d_timî_id_gë_˛ass
(
¢d_timî_id_t
 *
id
);

176 
¢d_timî_id_£t_s˛ass
(
¢d_timî_id_t
 *
id
, 
dev_s˛ass
);

177 
¢d_timî_id_gë_s˛ass
(
¢d_timî_id_t
 *
id
);

178 
¢d_timî_id_£t_ˇrd
(
¢d_timî_id_t
 *
id
, 
ˇrd
);

179 
¢d_timî_id_gë_ˇrd
(
¢d_timî_id_t
 *
id
);

180 
¢d_timî_id_£t_devi˚
(
¢d_timî_id_t
 *
id
, 
devi˚
);

181 
¢d_timî_id_gë_devi˚
(
¢d_timî_id_t
 *
id
);

182 
¢d_timî_id_£t_subdevi˚
(
¢d_timî_id_t
 *
id
, 
subdevi˚
);

183 
¢d_timî_id_gë_subdevi˚
(
¢d_timî_id_t
 *
id
);

185 
size_t
 
¢d_timî_göfo_sizeof
();

187 
	#¢d_timî_göfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_göfo
)

	)

188 
¢d_timî_göfo_mÆloc
(
¢d_timî_göfo_t
 **
±r
);

189 
¢d_timî_göfo_‰ì
(
¢d_timî_göfo_t
 *
obj
);

190 
¢d_timî_göfo_c›y
(
¢d_timî_göfo_t
 *
d°
, c⁄° snd_timî_göfo_à*
§c
);

192 
¢d_timî_göfo_£t_tid
(
¢d_timî_göfo_t
 *
obj
, 
¢d_timî_id_t
 *
tid
);

193 
¢d_timî_id_t
 *
¢d_timî_göfo_gë_tid
(
¢d_timî_göfo_t
 *
obj
);

194 
¢d_timî_göfo_gë_Êags
(
¢d_timî_göfo_t
 *
obj
);

195 
¢d_timî_göfo_gë_ˇrd
(
¢d_timî_göfo_t
 *
obj
);

196 *
¢d_timî_göfo_gë_id
(
¢d_timî_göfo_t
 *
obj
);

197 *
¢d_timî_göfo_gë_«me
(
¢d_timî_göfo_t
 *
obj
);

198 
¢d_timî_göfo_gë_ªsﬁuti⁄
(
¢d_timî_göfo_t
 *
obj
);

199 
¢d_timî_göfo_gë_ªsﬁuti⁄_mö
(
¢d_timî_göfo_t
 *
obj
);

200 
¢d_timî_göfo_gë_ªsﬁuti⁄_max
(
¢d_timî_göfo_t
 *
obj
);

201 
¢d_timî_göfo_gë_˛õ¡s
(
¢d_timî_göfo_t
 *
obj
);

203 
size_t
 
¢d_timî_öfo_sizeof
();

205 
	#¢d_timî_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_öfo
)

	)

206 
¢d_timî_öfo_mÆloc
(
¢d_timî_öfo_t
 **
±r
);

207 
¢d_timî_öfo_‰ì
(
¢d_timî_öfo_t
 *
obj
);

208 
¢d_timî_öfo_c›y
(
¢d_timî_öfo_t
 *
d°
, c⁄° snd_timî_öfo_à*
§c
);

210 
¢d_timî_öfo_is_¶ave
(
¢d_timî_öfo_t
 * 
öfo
);

211 
¢d_timî_öfo_gë_ˇrd
(
¢d_timî_öfo_t
 * 
öfo
);

212 c⁄° *
¢d_timî_öfo_gë_id
(
¢d_timî_öfo_t
 * 
öfo
);

213 c⁄° *
¢d_timî_öfo_gë_«me
(
¢d_timî_öfo_t
 * 
öfo
);

214 
¢d_timî_öfo_gë_ªsﬁuti⁄
(
¢d_timî_öfo_t
 * 
öfo
);

216 
size_t
 
¢d_timî_∑øms_sizeof
();

218 
	#¢d_timî_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_∑øms
)

	)

219 
¢d_timî_∑øms_mÆloc
(
¢d_timî_∑øms_t
 **
±r
);

220 
¢d_timî_∑øms_‰ì
(
¢d_timî_∑øms_t
 *
obj
);

221 
¢d_timî_∑øms_c›y
(
¢d_timî_∑øms_t
 *
d°
, c⁄° snd_timî_∑øms_à*
§c
);

223 
¢d_timî_∑øms_£t_auto_°¨t
(
¢d_timî_∑øms_t
 * 
∑øms
, 
auto_°¨t
);

224 
¢d_timî_∑øms_gë_auto_°¨t
(
¢d_timî_∑øms_t
 * 
∑øms
);

225 
¢d_timî_∑øms_£t_ex˛usive
(
¢d_timî_∑øms_t
 * 
∑øms
, 
ex˛usive
);

226 
¢d_timî_∑øms_gë_ex˛usive
(
¢d_timî_∑øms_t
 * 
∑øms
);

227 
¢d_timî_∑øms_£t_óæy_evít
(
¢d_timî_∑øms_t
 * 
∑øms
, 
óæy_evít
);

228 
¢d_timî_∑øms_gë_óæy_evít
(
¢d_timî_∑øms_t
 * 
∑øms
);

229 
¢d_timî_∑øms_£t_ticks
(
¢d_timî_∑øms_t
 * 
∑øms
, 
ticks
);

230 
¢d_timî_∑øms_gë_ticks
(
¢d_timî_∑øms_t
 * 
∑øms
);

231 
¢d_timî_∑øms_£t_queue_size
(
¢d_timî_∑øms_t
 * 
∑øms
, 
queue_size
);

232 
¢d_timî_∑øms_gë_queue_size
(
¢d_timî_∑øms_t
 * 
∑øms
);

233 
¢d_timî_∑øms_£t_fûãr
(
¢d_timî_∑øms_t
 * 
∑øms
, 
fûãr
);

234 
¢d_timî_∑øms_gë_fûãr
(
¢d_timî_∑øms_t
 * 
∑øms
);

236 
size_t
 
¢d_timî_°©us_sizeof
();

238 
	#¢d_timî_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_°©us
)

	)

239 
¢d_timî_°©us_mÆloc
(
¢d_timî_°©us_t
 **
±r
);

240 
¢d_timî_°©us_‰ì
(
¢d_timî_°©us_t
 *
obj
);

241 
¢d_timî_°©us_c›y
(
¢d_timî_°©us_t
 *
d°
, c⁄° snd_timî_°©us_à*
§c
);

243 
¢d_htime°amp_t
 
¢d_timî_°©us_gë_time°amp
(
¢d_timî_°©us_t
 * 
°©us
);

244 
¢d_timî_°©us_gë_ªsﬁuti⁄
(
¢d_timî_°©us_t
 * 
°©us
);

245 
¢d_timî_°©us_gë_lo°
(
¢d_timî_°©us_t
 * 
°©us
);

246 
¢d_timî_°©us_gë_ovîrun
(
¢d_timî_°©us_t
 * 
°©us
);

247 
¢d_timî_°©us_gë_queue
(
¢d_timî_°©us_t
 * 
°©us
);

250 
¢d_timî_öfo_gë_ticks
(
¢d_timî_öfo_t
 * 
öfo
);

254 #ifde‡
__˝lu•lus


	@/usr/include/alsa/version.h

5 
	#SND_LIB_MAJOR
 1

	)

6 
	#SND_LIB_MINOR
 1

	)

7 
	#SND_LIB_SUBMINOR
 3

	)

8 
	#SND_LIB_EXTRAVER
 1000000

	)

10 
	#SND_LIB_VERSION
 ((
SND_LIB_MAJOR
<<16)|\

11 (
SND_LIB_MINOR
<<8)|\

12 
SND_LIB_SUBMINOR
)

	)

14 
	#SND_LIB_VERSION_STR
 "1.1.3"

	)

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

	@/usr/include/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 #ifde‡
__USE_ISOC99


26 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

27 #ifde‡
__MATH_DECLARE_LDOUBLE


28 #ifde‡
__NO_LONG_DOUBLE_MATH


29 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

31 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

36 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


38 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

40 #ifde‡
__USE_ISOC99


41 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

42 #ifde‡
__MATH_DECLARE_LDOUBLE


43 #ifde‡
__NO_LONG_DOUBLE_MATH


44 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

46 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

52 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

53 #ifde‡
__USE_ISOC99


54 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

55 #ifde‡
__MATH_DECLARE_LDOUBLE


56 #ifde‡
__NO_LONG_DOUBLE_MATH


57 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

59 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

65 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

66 #ifde‡
__USE_ISOC99


67 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

68 #ifde‡
__MATH_DECLARE_LDOUBLE


69 #ifde‡
__NO_LONG_DOUBLE_MATH


70 
__REDIRECT_NTH
 (
©™2l
, (, ),

71 
__©™2_föôe
);

73 
__REDIRECT_NTH
 (
©™2l
, (, ),

74 
__©™2l_föôe
);

79 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


81 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

83 #ifde‡
__USE_ISOC99


84 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

85 #ifde‡
__MATH_DECLARE_LDOUBLE


86 #ifde‡
__NO_LONG_DOUBLE_MATH


87 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

89 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

95 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

96 #ifde‡
__USE_ISOC99


97 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

102 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

108 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

109 #ifde‡
__USE_ISOC99


110 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

111 #ifde‡
__MATH_DECLARE_LDOUBLE


112 #ifde‡
__NO_LONG_DOUBLE_MATH


113 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

115 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

120 #ifde‡
__USE_GNU


122 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

123 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

124 #ifde‡
__MATH_DECLARE_LDOUBLE


125 #ifde‡
__NO_LONG_DOUBLE_MATH


126 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

128 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

133 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

134 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

135 #ifde‡
__MATH_DECLARE_LDOUBLE


136 #ifde‡
__NO_LONG_DOUBLE_MATH


137 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

139 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

144 #ifde‡
__USE_ISOC99


146 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

147 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

148 #ifde‡
__MATH_DECLARE_LDOUBLE


149 #ifde‡
__NO_LONG_DOUBLE_MATH


150 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

152 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

158 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

159 #ifde‡
__USE_ISOC99


160 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

161 #ifde‡
__MATH_DECLARE_LDOUBLE


162 #ifde‡
__NO_LONG_DOUBLE_MATH


163 
__REDIRECT_NTH
 (
fmodl
, (, ),

164 
__fmod_föôe
);

166 
__REDIRECT_NTH
 (
fmodl
, (, ),

167 
__fmodl_föôe
);

172 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


174 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

176 #ifde‡
__USE_ISOC99


177 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

178 #ifde‡
__MATH_DECLARE_LDOUBLE


179 #ifde‡
__NO_LONG_DOUBLE_MATH


180 
__REDIRECT_NTH
 (
hypŸl
, (, ),

181 
__hypŸ_föôe
);

183 
__REDIRECT_NTH
 (
hypŸl
, (, ),

184 
__hypŸl_föôe
);

189 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


191 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

193 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


194 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

195 #ifde‡
__MATH_DECLARE_LDOUBLE


196 #ifde‡
__NO_LONG_DOUBLE_MATH


197 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

199 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

204 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


206 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

208 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


209 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

210 #ifde‡
__MATH_DECLARE_LDOUBLE


211 #ifde‡
__NO_LONG_DOUBLE_MATH


212 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

214 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


221 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

223 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


224 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

225 #ifde‡
__MATH_DECLARE_LDOUBLE


226 #ifde‡
__NO_LONG_DOUBLE_MATH


227 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

229 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

234 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


236 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

238 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


239 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

240 #ifde‡
__MATH_DECLARE_LDOUBLE


241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

244 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


251 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

253 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


254 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

255 #ifde‡
__MATH_DECLARE_LDOUBLE


256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

259 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

264 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


266 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

268 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


269 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

270 #ifde‡
__MATH_DECLARE_LDOUBLE


271 #ifde‡
__NO_LONG_DOUBLE_MATH


272 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

274 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

279 #ifde‡
__USE_MISC


281 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

282 #ifde‡
__USE_ISOC99


283 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

284 #ifde‡
__MATH_DECLARE_LDOUBLE


285 #ifde‡
__NO_LONG_DOUBLE_MATH


286 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

287 
__lgamma_r_föôe
);

289 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

290 
__lgammÆ_r_föôe
);

296 
__lgamma_r_föôe
 (, *);

297 
__lgammaf_r_föôe
 (, *);

298 #ifde‡
__NO_LONG_DOUBLE_MATH


299 
__REDIRECT_NTH
 (
__lgammÆ_r_föôe
, (, *),

300 
__lgamma_r_föôe
);

302 
__lgammÆ_r_föôe
 (, *);

305 #i‡((
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

306 && 
deföed
 
	g__exã∫_Æways_ölöe
)

308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

310 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


311  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

313 
__loˇl_signgam
 = 0;

314  
	`__lgamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

316 
	}
}

318 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


319 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

321 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


322  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

324 
__loˇl_signgam
 = 0;

325  
	`__lgammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

327 
	}
}

328 #ifde‡
__MATH_DECLARE_LDOUBLE


329 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

331 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


332  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

334 
__loˇl_signgam
 = 0;

335  
	`__lgammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

337 
	}
}

341 #i‡((
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)) \

342 && 
deföed
 
	g__exã∫_Æways_ölöe
)

344 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

346  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

347 
	}
}

348 #ifde‡
__USE_ISOC99


349 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

351  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

352 
	}
}

353 #ifde‡
__MATH_DECLARE_LDOUBLE


354 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

356  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

357 
	}
}

363 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

364 #ifde‡
__USE_ISOC99


365 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

366 #ifde‡
__MATH_DECLARE_LDOUBLE


367 #ifde‡
__NO_LONG_DOUBLE_MATH


368 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

370 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

376 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

377 #ifde‡
__USE_ISOC99


378 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

379 #ifde‡
__MATH_DECLARE_LDOUBLE


380 #ifde‡
__NO_LONG_DOUBLE_MATH


381 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

383 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

388 #ifde‡
__USE_ISOC99


390 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

391 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

396 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

402 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

403 #ifde‡
__USE_ISOC99


404 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

405 #ifde‡
__MATH_DECLARE_LDOUBLE


406 #ifde‡
__NO_LONG_DOUBLE_MATH


407 
__REDIRECT_NTH
 (
powl
, (, ),

408 
__pow_föôe
);

410 
__REDIRECT_NTH
 (
powl
, (, ),

411 
__powl_föôe
);

416 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


418 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

420 #ifde‡
__USE_ISOC99


421 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

422 #ifde‡
__MATH_DECLARE_LDOUBLE


423 #ifde‡
__NO_LONG_DOUBLE_MATH


424 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

425 
__ªmaödî_föôe
);

427 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

428 
__ªmaödîl_föôe
);

433 #i‡(
deföed
 
__USE_MISC
 \

434 || (
deföed
 
	g__USE_XOPEN_EXTENDED
 && !deföed 
	g__USE_XOPEN2K8
))

436 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

438 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


439 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

440 #ifde‡
__MATH_DECLARE_LDOUBLE


441 #ifde‡
__NO_LONG_DOUBLE_MATH


442 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

443 
__sˇlb_föôe
);

445 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

446 
__sˇlbl_föôe
);

452 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

453 #ifde‡
__USE_ISOC99


454 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

455 #ifde‡
__MATH_DECLARE_LDOUBLE


456 #ifde‡
__NO_LONG_DOUBLE_MATH


457 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

459 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

465 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

466 #ifde‡
__USE_ISOC99


467 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

468 #ifde‡
__MATH_DECLARE_LDOUBLE


469 #ifde‡
__NO_LONG_DOUBLE_MATH


470 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

472 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

477 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


479 
__gamma_r_föôe
 (, *);

480 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

482 
__loˇl_signgam
 = 0;

483 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

484  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

485 
	}
}

486 
__gammaf_r_föôe
 (, *);

487 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

489 
__loˇl_signgam
 = 0;

490 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

491  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

492 
	}
}

493 #ifde‡
__MATH_DECLARE_LDOUBLE


494 
__gammÆ_r_föôe
 (, *);

495 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

497 
__loˇl_signgam
 = 0;

498 #ifde‡
__NO_LONG_DOUBLE_MATH


499 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

501 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

503  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

504 
	}
}

	@/usr/include/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #ñi‡
__GNUC_PREREQ
 (6,0)

33 
	#__DECL_SIMD_x86_64
 
	`__©åibuã__
 ((
	`__simd__
 ("nŸöbønch")))

	)

36 #ifde‡
__DECL_SIMD_x86_64


37 #unde‡
__DECL_SIMD_cos


38 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_cosf


40 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_sö


42 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_söf


44 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_söcos


46 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_söcosf


48 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_log


50 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_logf


52 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_exp


54 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

55 #unde‡
__DECL_SIMD_expf


56 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

57 #unde‡
__DECL_SIMD_pow


58 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

59 #unde‡
__DECL_SIMD_powf


60 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL_VEC
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


199 #i‡(!
deföed
 
__˝lu•lus
 \

200 || 
	g__˝lu•lus
 < 201103L \

201 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

204 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

211 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

215 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

218 #ifde‡
__USE_ISOC99


219 
__BEGIN_NAMESPACE_C99


221 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

222 
	g__END_NAMESPACE_C99


225 #ifde‡
__USE_ISOC99


226 
__BEGIN_NAMESPACE_C99


228 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

229 
	g__END_NAMESPACE_C99


234 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

236 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

237 #i‡(!
deföed
 
__˝lu•lus
 \

238 || 
	g__˝lu•lus
 < 201103L \

239 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

241 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

245 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && 
__MATH_DECLARING_DOUBLE
)

247 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

248 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

249 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

250 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

256 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

260 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

261 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

262 
	g__END_NAMESPACE_C99


265 #ifde‡
__USE_ISOC99


266 
__BEGIN_NAMESPACE_C99


268 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

269 
	g__END_NAMESPACE_C99


272 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

274 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

277 #ifde‡
__USE_MISC


281 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

285 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


286 
__BEGIN_NAMESPACE_C99


289 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

292 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

293 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


294 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

297 #ifde‡
__USE_GNU


299 
__MATHCALL
 (
√xtdown
,, (
_MdoubÀ_
 
__x
));

301 
__MATHCALL
 (
√xtup
,, (
_MdoubÀ_
 
__x
));

305 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

307 #ifde‡
__USE_ISOC99


309 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

313 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

316 #ifde‡
__USE_ISOC99


318 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

322 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

326 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

330 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

335 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

342 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

343 
__exãnsi⁄__


344 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

348 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

349 
__exãnsi⁄__


350 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

354 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

357 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

360 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

364 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

365 
__©åibuã__
 ((
__c⁄°__
));

368 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

369 
__©åibuã__
 ((
__c⁄°__
));

373 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

376 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


377 
	g__END_NAMESPACE_C99


380 #ifde‡
__USE_GNU


382 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

383 
__©åibuã__
 ((
__c⁄°__
));

386 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

387 && 
	g__MATH_DECLARING_DOUBLE
 \

388 && !
deföed
 
	g__USE_XOPEN2K8
)

390 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


390 #i‡!
deföed
 
__SSE2_MATH__
 && !deföed 
__x86_64__


391 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

392 && 
deföed
 
	g__OPTIMIZE__
)

396 #unde‡
m©h_îrh™dlög


405 #ifde‡
__USE_ISOC99


406 
	#__ölöe_m©h›
(
func
, 
›
) \

407 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

408 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

409 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›NP
(
func
, 
›
) \

411 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

412 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

415 
	#__ölöe_m©h›
(
func
, 
›
) \

416 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

417 
	#__ölöe_m©h›NP
(
func
, 
›
) \

418 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

421 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

422 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

423 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

424 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

427 #ifde‡
__USE_ISOC99


428 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

429 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

434 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

437 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

438 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

439 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

440 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

443 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

444 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

445 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

447 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

448 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

450 
Êﬂt_ty≥
 
__ªsu…
; \

451 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

452  
__ªsu…
; \

453 }

	)

456 #ifde‡
__USE_ISOC99


457 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

460 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

461 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

462 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

463 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

464 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

465 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

469 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

470 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

471 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

472 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

473 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

478 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

479 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

480 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

482 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

483 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

484 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

485 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

486 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

487 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

488 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

489 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

490 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

491 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

492 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

493 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

496 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

497 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

498 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

500 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

501 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

503 
code
; \

504 }

	)

507 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

508 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

509 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

511 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

512 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

514 
code
; \

515 }

	)

517 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

518 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

519 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

521 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

522 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

523 
Êﬂt_ty≥
 
¨g3
)) \

525 
code
; \

526 }

	)

530 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


534 #ifde‡
__FAST_MATH__


535 #ifde‡
__USE_GNU


536 
	#__söcos_code
 \

537 
__co§
; \

538 
__sör
; \

539 
__swtmp
; \

540 
__asm
 
__vﬁ©ûe__
 \

555 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

556 *
__söx
 = 
__sör
; \

557 *
__cosx
 = 
__co§


	)

559 
__MATH_INLINE
 

560 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

562 
__söcos_code
;

563 
	}
}

565 
__MATH_INLINE
 

566 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

568 
__söcos_code
;

569 
	}
}

571 
__MATH_INLINE
 

572 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

574 
__söcos_code
;

575 
	}
}

582 #i‡
__GNUC_PREREQ
 (3, 5)

583 
	#__expm1_code
 \

584 
__ãmp
; \

585 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

586  
__ãmp
 ? __ãm∞: 
__x


	)

588 
	#__expm1_code
 \

589 
__vÆue
; \

590 
__exp⁄ít
; \

591 
__ãmp
; \

592 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

602 
__asm
 
__vﬁ©ûe__
 \

604 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

605 
__ãmp
 -= 1.0; \

606 
__ãmp
 +
__vÆue
; \

607  
__ãmp
 ? __ãm∞: 
__x


	)

609 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

611 #i‡
	`__GNUC_PREREQ
 (3, 4)

612 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

614 
	#__exp_code
 \

615 
__vÆue
; \

616 
__exp⁄ít
; \

617 
__asm
 
__vﬁ©ûe__
 \

625 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

626 
__vÆue
 += 1.0; \

627 
__asm
 
__vﬁ©ûe__
 \

629 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

630  
__vÆue


	)

631 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

632 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

636 #i‡!
	`__GNUC_PREREQ
 (3, 5)

637 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

638 
__vÆue
; \

639 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

640 
__asm
 
__vﬁ©ûe__
 \

642 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

643  
__vÆue
)

648 #i‡
	`__GNUC_PREREQ
 (3, 4)

649 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

650  
	$__buûtö_©™2l
 (
__y
, 
__x
))

652 
	#__©™2_code
 \

653 
__vÆue
; \

654 
__asm
 
__vﬁ©ûe__
 \

656 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

657  
__vÆue


	)

658 #ifde‡
__FAST_MATH__


659 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

661 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

665 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

666 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

667 
__vÆue
; \

668 
__asm
 
__vﬁ©ûe__
 \

673 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

674  
__vÆue
)

678 #ifde‡
__FAST_MATH__


679 #i‡!
	`__GNUC_PREREQ
 (3,3)

680 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

681 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

682 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

684 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

688 #i‡
	`__GNUC_PREREQ
 (2, 8)

689 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

690 #ifde‡
__USE_ISOC99


691 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

692 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

694 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

696 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

697 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

700 #ifde‡
__FAST_MATH__


701 #i‡!
	`__GNUC_PREREQ
 (3, 4)

703 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

705 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

707 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 #i‡!
	`__GNUC_PREREQ
 (3, 5)

711 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

713 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

714 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

717 #i‡!
	`__GNUC_PREREQ
 (3, 4)

718 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

722 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

723 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

724 { 
__xld
: 
__x
 
	}
}; \

725 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

726 
	g__n
.
	g__xi
[1] = 0x80000000; \

727 
	g__n
.
	g__xi
[0] = 0; \

728  
	g__n
.
	g__xld
)

731 #ifde‡
__FAST_MATH__


733 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

734 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

735  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

737 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

738 
__ex
 = 
	`__ex∂
 (
__x
); \

739  0.5 * (
__ex
 + 1.0 / __ex))

741 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

742 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

743  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

746 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

747 
__vÆue
; \

748 
__ign‹e
; \

749 
__cw
; \

750 
__cwtmp
; \

751 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

759 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

760 "=m" (
__cw
) \

761 : "0" (
__x
)); \

762  
__vÆue
)

764 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

765 
__vÆue
; \

766 
__ign‹e
; \

767 
__cw
; \

768 
__cwtmp
; \

769 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

777 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

778 "=m" (
__cw
) \

779 : "0" (
__x
)); \

780  
__vÆue
)

782 #ifde‡
__FAST_MATH__


783 
	#__ldexp_code
 \

784 
__vÆue
; \

785 
__asm
 
__vﬁ©ûe__
 \

787 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

788  
__vÆue


	)

790 
__MATH_INLINE
 

791 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

793 
__ldexp_code
;

794 
	}
}

799 #ifde‡
__USE_ISOC99


801 #ifde‡
__FAST_MATH__


802 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

806 
	#__M_SQRT2
 1.41421356237309504880L

	)

808 #i‡!
	`__GNUC_PREREQ
 (3, 5)

809 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

810 
__vÆue
; \

811 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

812 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

814 
__asm
 
__vﬁ©ûe__
 \

818 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

819  
__vÆue
)

824 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

825 
__y
 = 
	`__Áb¶
 (
__x
); \

826  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

827 * 
	$__sgn1l
 (
__x
)))

829 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

830  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

832 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

833 
__y
 = 
	`__Áb¶
 (
__x
); \

834  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

837 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

838  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

840 #i‡!
	`__GNUC_PREREQ
 (3, 5)

841 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

842 
__vÆue
; \

843 
__junk
; \

844 
__asm
 
__vﬁ©ûe__
 \

846 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

847  
__vÆue
)

853 #ifde‡
__USE_ISOC99


854 #ifde‡
__FAST_MATH__


856 #i‡!
	`__GNUC_PREREQ
 (3, 5)

857 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

860 
__MATH_INLINE
 

861 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

863 
__ldexp_code
;

864 
	}
}

866 
__MATH_INLINE
 

867 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

869 
__ldexp_code
;

870 
	}
}

872 
__ölöe_m©h›NP
 (
röt
, "frndint")

875 
	#__Ãöt_code
 \

876 
__Ãöåes
; \

877 
__asm__
 
__vﬁ©ûe__
 \

879 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

880  
__Ãöåes


	)

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãötf
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöt
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 
__MATH_INLINE
 

892 
__NTH
 (
	$Ãöé
 (
__x
))

894 
__Ãöt_code
;

895 
	}
}

896 #unde‡
__Ãöt_code


898 
	#__Œröt_code
 \

899 
__Œröåes
; \

900 
__asm__
 
__vﬁ©ûe__
 \

902 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

903  
__Œröåes


	)

904 
__exãnsi⁄__


905 
__MATH_INLINE
 

906 
__NTH
 (
	$Œrötf
 (
__x
))

908 
__Œröt_code
;

909 
	}
}

910 
__exãnsi⁄__


911 
__MATH_INLINE
 

912 
__NTH
 (
	$Œröt
 (
__x
))

914 
__Œröt_code
;

915 
	}
}

916 
__exãnsi⁄__


917 
__MATH_INLINE
 

918 
__NTH
 (
	$Œröé
 (
__x
))

920 
__Œröt_code
;

921 
	}
}

922 #unde‡
__Œröt_code


927 #ifde‡
__USE_MISC


929 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

930 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

931 
__vÆue
; \

932 
__˛obbîed
; \

933 
__asm
 
__vﬁ©ûe__
 \

938 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

939  
__vÆue
)

944 
__MATH_INLINE
 

945 
__NTH
 (
	$__föôe
 (
__x
))

947  (
__exãnsi⁄__


948 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

950 
	}
}

955 #unde‡
__©™2_code


956 #ifde‡
__FAST_MATH__


957 #unde‡
__expm1_code


958 #unde‡
__exp_code


959 #unde‡
__söcos_code


966 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


967 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

968 
__ölöe_m©hcode2_
 (, 
__õì754_©™2l
, 
__y
, 
__x
,

969 
__vÆue
;

970 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

971 : "Ò" (
__vÆue
)

972 : "0" (
__x
), "u" (
__y
) : "st(1)");

973  
__vÆue
;)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	#__√ed_timevÆ


	)

179 
	~<bôs/time.h
>

187 
	srußge


190 
timevÆ
 
	mru_utime
;

192 
timevÆ
 
	mru_°ime
;

194 
__exãnsi⁄__
 union

196 
	mru_maxrss
;

197 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

202 
__exãnsi⁄__
 union

204 
	mru_ixrss
;

205 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

208 
__exãnsi⁄__
 union

210 
	mru_idrss
;

211 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

214 
__exãnsi⁄__
 union

216 
	mru_i§ss
;

217 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

221 
__exãnsi⁄__
 union

223 
	mru_möÊt
;

224 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

227 
__exãnsi⁄__
 union

229 
	mru_majÊt
;

230 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

233 
__exãnsi⁄__
 union

235 
	mru_nsw≠
;

236 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

240 
__exãnsi⁄__
 union

242 
	mru_öblock
;

243 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

246 
__exãnsi⁄__
 union

248 
	mru_oublock
;

249 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

252 
__exãnsi⁄__
 union

254 
	mru_msg¢d
;

255 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

258 
__exãnsi⁄__
 union

260 
	mru_msgrcv
;

261 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

264 
__exãnsi⁄__
 union

266 
	mru_nsig«ls
;

267 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

272 
__exãnsi⁄__
 union

274 
	mru_nvcsw
;

275 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

279 
__exãnsi⁄__
 union

281 
	mru_nivcsw
;

282 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

287 
	#PRIO_MIN
 -20

	)

288 
	#PRIO_MAX
 20

	)

292 
	e__¥i‹ôy_which


294 
	mPRIO_PROCESS
 = 0,

295 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

296 
	mPRIO_PGRP
 = 1,

297 
	#PRIO_PGRP
 
PRIO_PGRP


	)

298 
	mPRIO_USER
 = 2

299 
	#PRIO_USER
 
PRIO_USER


	)

303 
	g__BEGIN_DECLS


305 #ifde‡
__USE_GNU


307 #i‚de‡
__USE_FILE_OFFSET64


308 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

309 c⁄° 
æimô
 *
__√w_limô
,

310 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

312 #ifde‡
__REDIRECT_NTH


313 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

314 
__æimô_ªsour˚
 
__ªsour˚
,

315 c⁄° 
æimô
 *
__√w_limô
,

316 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

318 
	#¥limô
 
¥limô64


	)

321 #ifde‡
__USE_LARGEFILE64


322 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

323 c⁄° 
æimô64
 *
__√w_limô
,

324 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

328 
__END_DECLS


	@/usr/include/bits/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_SEM_T
 32

	)

28 
	#__SIZEOF_SEM_T
 16

	)

33 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

38 
	m__size
[
__SIZEOF_SEM_T
];

39 
	m__Æign
;

40 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/shm.h

18 #i‚de‡
_SYS_SHM_H


22 
	~<bôs/ty≥s.h
>

25 
	#SHM_R
 0400

	)

26 
	#SHM_W
 0200

	)

29 
	#SHM_RDONLY
 010000

	)

30 
	#SHM_RND
 020000

	)

31 
	#SHM_REMAP
 040000

	)

32 
	#SHM_EXEC
 0100000

	)

35 
	#SHM_LOCK
 11

	)

36 
	#SHM_UNLOCK
 12

	)

38 
	g__BEGIN_DECLS


41 
	#SHMLBA
 (
	`__gë∑gesize
 ())

	)

42 
	$__gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

46 
__sysˇŒ_ul⁄g_t
 
	tshm©t_t
;

49 
	sshmid_ds


51 
ùc_≥rm
 
shm_≥rm
;

52 
size_t
 
shm_£gsz
;

53 
__time_t
 
shm_©ime
;

54 #i‚de‡
__x86_64__


55 
__glibc_ª£rved1
;

57 
__time_t
 
shm_dtime
;

58 #i‚de‡
__x86_64__


59 
__glibc_ª£rved2
;

61 
__time_t
 
shm_˘ime
;

62 #i‚de‡
__x86_64__


63 
__glibc_ª£rved3
;

65 
__pid_t
 
shm_˝id
;

66 
__pid_t
 
shm_Õid
;

67 
shm©t_t
 
shm_«âch
;

68 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved4
;

69 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved5
;

72 #ifde‡
__USE_MISC


75 
	#SHM_STAT
 13

	)

76 
	#SHM_INFO
 14

	)

79 
	#SHM_DEST
 01000

	)

80 
	#SHM_LOCKED
 02000

	)

81 
	#SHM_HUGETLB
 04000

	)

82 
	#SHM_NORESERVE
 010000

	)

84 
	sshmöfo


86 
__sysˇŒ_ul⁄g_t
 
shmmax
;

87 
__sysˇŒ_ul⁄g_t
 
shmmö
;

88 
__sysˇŒ_ul⁄g_t
 
shmmni
;

89 
__sysˇŒ_ul⁄g_t
 
shm£g
;

90 
__sysˇŒ_ul⁄g_t
 
shmÆl
;

91 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved1
;

92 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved2
;

93 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved3
;

94 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved4
;

97 
	sshm_öfo


99 
u£d_ids
;

100 
__sysˇŒ_ul⁄g_t
 
shm_tŸ
;

101 
__sysˇŒ_ul⁄g_t
 
shm_rss
;

102 
__sysˇŒ_ul⁄g_t
 
shm_swp
;

103 
__sysˇŒ_ul⁄g_t
 
sw≠_©ãm±s
;

104 
__sysˇŒ_ul⁄g_t
 
sw≠_suc˚s£s
;

109 
__END_DECLS


	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_INLINE_u«lig√d
 1

	)

27 
	#_HAVE_STRING_ARCH_memp˝y
 1

	)

31 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

32 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

33 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

34 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

35 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

36 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

37 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

38 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

39 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

40 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

41 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

42 || 
deföed
 
	g__btvî2__
)

46 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

47 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

49 #i‚de‡
__STRING_INLINE


50 #i‚de‡
__exã∫_ölöe


51 
	#__STRING_INLINE
 
ölöe


	)

53 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

58 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

59 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

60 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

62 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

63 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

64 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

65 | ((c⁄° *Ë(
§c
))[
idx
])

	)

69 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

70 
	#mem˝y
(
de°
, 
§c
, 
n
) \

71 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

72 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

73 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

74 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

75 ((
n
) == 0 \

76 ? (
de°
) \

77 : (((
n
) % 4 == 0) \

78 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

79 : (((
n
) % 2 == 0) \

80 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

81 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

83 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

84 
size_t
 
__n
);

86 
__STRING_INLINE
 *

87 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

89 
__d0
, 
__d1
;

90 *
__tmp
 = 
__de°
;

91 
__asm__
 
__vﬁ©ûe__


99 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

100 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

102  
__de°
;

103 
	}
}

105 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

106 
size_t
 
__n
);

108 
__STRING_INLINE
 *

109 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

111 
__d0
, 
__d1
;

112 *
__tmp
 = 
__de°
;

113 
__asm__
 
__vﬁ©ûe__


126 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

127 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

129  
__de°
;

130 
	}
}

132 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

134 
__STRING_INLINE
 *

135 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

137 
__d0
, 
__d1
, 
__d2
;

138 *
__tmp
 = 
__de°
;

139 
__asm__
 
__vﬁ©ûe__


150 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

151 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

152 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

153 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

155  
__de°
;

156 
	}
}

158 
	#_HAVE_STRING_ARCH_memmove
 1

	)

159 #i‚de‡
_FORCE_INLINES


162 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

164 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

165 
	`__asm__
 ("memmove");

167 
__STRING_INLINE
 *

168 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

170 
__d0
, 
__d1
, 
__d2
;

171 *
__tmp
 = 
__de°
;

172 i‡(
__de°
 < 
__§c
)

173 
__asm__
 
__vﬁ©ûe__


176 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

177 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

178 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

179 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

181 
__asm__
 
__vﬁ©ûe__


187 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

188 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

189 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

190 "2" (
__n
 + (*Ë
__tmp
),

191 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

192  
__de°
;

193 
	}
}

197 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

198 #i‚de‡
_FORCE_INLINES


199 #i‚de‡
__PIC__


201 
__STRING_INLINE
 

202 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

204 
__d0
, 
__d1
, 
__d2
;

205 
__ªs
;

206 
__asm__
 
__vﬁ©ûe__


214 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

215 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

216 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

217 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

219  
__ªs
;

220 
	}
}

225 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

226 
	#_USE_STRING_ARCH_mem£t
 1

	)

227 
	#mem£t
(
s
, 
c
, 
n
) \

228 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

229 ? ((
n
) == 1 \

230 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

231 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

232 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

233 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

236 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

237 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

238 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

240 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

241 *((*Ë
__s
Ë(Ë(
c
); \

242 
__s
; })

	)

244 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

245 ({ *
__s
 = (
s
); \

247 
__ui
; \

248 
__usi
; \

249 
__uc
; \

250 } *
__u
 = 
__s
; \

251 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

257 i‡((
n
) == 3 || (n) >= 5) \

258 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

261 
n
) \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__ui
 = 
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

273 
__u
->
__usi
 = (Ë
__c
; \

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

275 
__u
->
__uc
 = (Ë
__c
; \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__usi
 = (Ë
__c
; \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__uc
 = (Ë
__c
; \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

312 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

314 
__u
->
__ui
 = 
__c
; \

319 
__s
; })

	)

321 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

322 (((
n
) % 4 == 0) \

323 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

324 
n
) \

325 : (((
n
) % 2 == 0) \

326 ? 
	`__mem£t_c˙_by2
 (
s
, \

327 ((Ë((Ë(
c
))) * 0x01010101,\

328 
n
) \

329 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

331 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

332 
size_t
 
__n
);

334 
__STRING_INLINE
 *

335 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

337 *
__tmp
 = 
__s
;

338 
__d0
;

339 #ifde‡
__i686__


340 
__asm__
 
__vﬁ©ûe__


343 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

344 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

345 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

348 
__asm__
 
__vﬁ©ûe__


354 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

355 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359  
__s
;

360 
	}
}

362 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

363 
size_t
 
__n
);

365 
__STRING_INLINE
 *

366 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

368 
__d0
, 
__d1
;

369 *
__tmp
 = 
__s
;

370 #ifde‡
__i686__


371 
__asm__
 
__vﬁ©ûe__


375 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

376 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

377 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

380 
__asm__
 
__vﬁ©ûe__


386 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

387 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

388 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

391  
__s
;

392 
	}
}

394 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

395 (((
n
) % 4 == 0) \

396 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

397 : (((
n
) % 2 == 0) \

398 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

399 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

401 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

403 
__STRING_INLINE
 *

404 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

406 *
__tmp
 = 
__s
;

407 
__d0
;

408 
__asm__
 
__vﬁ©ûe__


418 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

419 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

420 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

422  
__s
;

423 
	}
}

425 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

427 
__STRING_INLINE
 *

428 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
;

431 *
__tmp
 = 
__s
;

432 
__asm__
 
__vﬁ©ûe__


443 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

444 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

445 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

447  
__s
;

448 
	}
}

452 
	#_HAVE_STRING_ARCH_memchr
 1

	)

453 #i‚de‡
_FORCE_INLINES


454 
__STRING_INLINE
 *

455 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

457 
__d0
;

458 #ifde‡
__i686__


459 
__d1
;

461 *
__ªs
;

462 i‡(
__n
 == 0)

463  
NULL
;

464 #ifde‡
__i686__


465 
__asm__
 
__vﬁ©ûe__


469 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

470 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

471 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

474 
__asm__
 
__vﬁ©ûe__


480 : "=D" (
__ªs
), "=&c" (
__d0
)

481 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

482 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

485  
__ªs
 - 1;

486 
	}
}

489 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

490 #i‚de‡
_FORCE_INLINES


491 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

493 
__STRING_INLINE
 *

494 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

496 
__d0
;

497 #ifde‡
__i686__


498 
__d1
;

500 *
__ªs
;

501 i‡(
__n
 == 0)

502  
NULL
;

503 #ifde‡
__i686__


504 
__asm__
 
__vﬁ©ûe__


510 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

511 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

512 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

515 
__asm__
 
__vﬁ©ûe__


522 : "=D" (
__ªs
), "=&c" (
__d0
)

523 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

524 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

527  
__ªs
;

528 
	}
}

529 #ifde‡
__USE_GNU


530 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

535 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

536 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

538 #i‚de‡
_FORCE_INLINES


539 
__STRING_INLINE
 *

540 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

542 
__d0
;

543 *
__ªs
;

544 
__asm__
 
__vﬁ©ûe__


547 : "=D" (
__ªs
), "=&c" (
__d0
)

548 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

549 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

551  
__ªs
 - 1;

552 
	}
}

553 #ifde‡
__USE_GNU


554 
__STRING_INLINE
 *

555 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

557  
	`__øwmemchr
 (
__s
, 
__c
);

558 
	}
}

564 
	#_HAVE_STRING_ARCH_°æí
 1

	)

565 
	#°æí
(
°r
) \

566 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

567 ? 
	`__buûtö_°æí
 (
°r
) \

568 : 
	`__°æí_g
 (
°r
)))

	)

569 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

571 
__STRING_INLINE
 
size_t


572 
	$__°æí_g
 (c⁄° *
__°r
)

574 
__dummy
;

575 c⁄° *
__tmp
 = 
__°r
;

576 
__asm__
 
__vﬁ©ûe__


582 : "Ù" (
__tmp
), "=&q" (
__dummy
)

583 : "0" (
__°r
),

584 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

586  
__tmp
 - 
__°r
 - 1;

587 
	}
}

591 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

592 
	#°r˝y
(
de°
, 
§c
) \

593 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

594 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

595 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

596 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

597 (c⁄° *Ë(
§c
), \

598 
	`°æí
 (
§c
) + 1)) \

599 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

601 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

602 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

604 
__ui
; \

605 
__usi
; \

606 
__uc
; \

607 
__c
; \

608 } *
__u
 = (*Ë
__de°
; \

609 
§˛í
) \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

618 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

619 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

620 
__u
->
__uc
 = '\0'; \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__uc
 = '\0'; \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

632 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

637 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

638 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

640 
__u
->
__uc
 = '\0'; \

643 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

645 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

648 (*Ë
__de°
; }))

	)

650 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

652 
__STRING_INLINE
 *

653 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

655 *
__tmp
 = 
__de°
;

656 
__dummy
;

657 
__asm__
 
__vﬁ©ûe__


666 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

667 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

668 : "0" (
__§c
), "1" (
__tmp
),

669 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

671  
__de°
;

672 
	}
}

675 #ifde‡
__USE_GNU


676 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

678 
	#__°p˝y
(
de°
, 
§c
) \

679 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

680 ? (
	`°æí
 (
§c
) + 1 <= 8 \

681 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

682 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

683 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

684 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

685 ((
§˛í
) % 4 == 0 \

686 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

687 : ((
§˛í
) % 2 == 0 \

688 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

689 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

692 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

694 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

695 (
	`__exãnsi⁄__
 ({ union { \

696 
__ui
; \

697 
__usi
; \

698 
__uc
; \

699 
__c
; \

700 } *
__u
 = (*Ë(
de°
); \

701 
§˛í
) \

704 
__u
->
__uc
 = '\0'; \

707 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

708 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

713 
__u
->
__uc
 = '\0'; \

716 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

717 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

721 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

722 
__u
->
__uc
 = '\0'; \

725 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

726 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

727 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

728 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

731 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

732 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

733 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

734 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

735 
__u
->
__uc
 = '\0'; \

738 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

739 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

740 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

741 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

744 (*Ë
__u
; }))

	)

746 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

747 
size_t
 
__§˛í
);

749 
__STRING_INLINE
 *

750 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

752 *
__tmp
 = 
__de°
;

753 
__d0
, 
__d1
;

754 
__asm__
 
__vﬁ©ûe__


762 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

763 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

765  
__tmp
;

766 
	}
}

768 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

769 
size_t
 
__§˛í
);

771 
__STRING_INLINE
 *

772 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

774 *
__tmp
 = 
__de°
;

775 
__d0
, 
__d1
;

776 
__asm__
 
__vﬁ©ûe__


789 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

790 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

791 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

792 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

794  
__tmp
 + 2;

795 
	}
}

797 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

798 
size_t
 
__§˛í
);

800 
__STRING_INLINE
 *

801 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

803 
__d0
, 
__d1
;

804 *
__tmp
 = 
__de°
;

805 
__asm__
 
__vﬁ©ûe__


816 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

817 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

818 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

819 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

821  
__tmp
;

822 
	}
}

824 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

826 
__STRING_INLINE
 *

827 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

829 *
__tmp
 = 
__de°
;

830 
__dummy
;

831 
__asm__
 
__vﬁ©ûe__


840 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

841 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

842 : "0" (
__§c
), "1" (
__tmp
),

843 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

845  
__tmp
 - 1;

846 
	}
}

851 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

852 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

853 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

854 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

855 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

856 (c⁄° *Ë(
§c
), 
n
) \

857 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

858 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

859 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

860 (((
§˛í
) % 4 == 0) \

861 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

862 : (((
§˛í
) % 2 == 0) \

863 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

864 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

866 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

867 
size_t
 
__§˛í
, size_à
__n
);

869 
__STRING_INLINE
 *

870 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

872 *
__tmp
 = 
__de°
;

873 
__dummy1
, 
__dummy2
;

874 
__asm__
 
__vﬁ©ûe__


882 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

883 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

884 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

885 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

887 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

888  
__de°
;

889 
	}
}

891 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

892 
size_t
 
__§˛í
, size_à
__n
);

894 
__STRING_INLINE
 *

895 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

897 *
__tmp
 = 
__de°
;

898 
__dummy1
, 
__dummy2
;

899 
__asm__
 
__vﬁ©ûe__


912 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

913 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

914 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

915 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

917 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

918  
__de°
;

919 
	}
}

921 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

922 
size_t
 
__§˛í
, size_à
__n
);

924 
__STRING_INLINE
 *

925 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

927 
__d0
, 
__d1
;

928 *
__tmp
 = 
__de°
;

929 
__asm__
 
__vﬁ©ûe__


940 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

941 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

942 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

943 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

945 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

946  
__de°
;

947 
	}
}

949 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

950 
size_t
 
__n
);

952 
__STRING_INLINE
 *

953 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

955 *
__tmp
 = 
__de°
;

956 
__dummy
;

957 i‡(
__n
 > 0)

958 
__asm__
 
__vﬁ©ûe__


974 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

975 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

978  
__de°
;

979 
	}
}

983 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

984 
	#°rˇt
(
de°
, 
§c
) \

985 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

986 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

987 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

989 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

990 
size_t
 
__§˛í
);

992 
__STRING_INLINE
 *

993 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

995 #ifde‡
__i686__


996 
__d0
;

997 *
__tmp
;

998 
__asm__
 
__vﬁ©ûe__


1000 : "=D" (
__tmp
), "=&c" (
__d0
),

1001 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1002 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1003 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1005 --
__tmp
;

1007 *
__tmp
 = 
__de°
;

1008 
__asm__
 
__vﬁ©ûe__


1014 : "Ù" (
__tmp
),

1015 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1016 : "0" (
__tmp
),

1017 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1020 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1021  
__de°
;

1022 
	}
}

1024 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1026 
__STRING_INLINE
 *

1027 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1029 *
__tmp
 = 
__de°
;

1030 
__dummy
;

1031 
__asm__
 
__vﬁ©ûe__


1044 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1045 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1046 : "1" (
__tmp
), "2" (
__§c
),

1047 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1049  
__de°
;

1050 
	}
}

1054 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1055 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1056 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1057 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1058 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1059 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1060 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1061 (c⁄° *Ë(
§c
), \

1062 (
n
)Ë0, 
__de°
)) \

1063 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1065 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1066 
size_t
 
__n
);

1068 
__STRING_INLINE
 *

1069 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1071 *
__tmp
 = 
__de°
;

1072 
__dummy
;

1073 #ifde‡
__i686__


1074 
__asm__
 
__vﬁ©ûe__


1088 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1089 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1092 
__asm__
 
__vﬁ©ûe__


1109 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1110 : "1" ((Ë
__tmp
 - 1), "2" (
__§c
), "3" (
__n
)

1113  
__de°
;

1114 
	}
}

1118 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1119 
	#°rcmp
(
s1
, 
s2
) \

1120 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1121 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1122 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1123 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1124 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1125 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1126 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1127 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1128 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1129 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1130 (c⁄° *Ë(
s2
), \

1131 
	`°æí
 (
s1
)) \

1132 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1133 (c⁄° *Ë(
s2
), \

1134 
	`°æí
 (
s1
))) \

1135 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1136 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1137 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1138 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1139 (c⁄° *Ë(
s2
), \

1140 
	`°æí
 (
s2
)) \

1141 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1142 (c⁄° *Ë(
s2
), \

1143 
	`°æí
 (
s2
))) \

1144 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1146 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1147 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1148 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1150 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1151 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1153 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1154 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1155 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1158 
__ªsu…
; }))

	)

1160 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1161 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1162 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1163 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1165 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1166 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1168 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1169 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1170 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1173 
__ªsu…
; }))

	)

1175 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1176 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1177 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1178 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1180 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1181 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1183 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1184 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1185 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1188 
__ªsu…
; }))

	)

1190 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1192 
__STRING_INLINE
 

1193 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1195 
__ªs
;

1196 
__asm__
 
__vﬁ©ûe__


1212 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1213 : "1" (
__s1
), "2" (
__s2
),

1214 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1215 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1217  
__ªs
;

1218 
	}
}

1222 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1223 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1224 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1225 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1226 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1227 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1228 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1230 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1231 
size_t
 
__n
);

1233 
__STRING_INLINE
 

1234 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1236 
__ªs
;

1237 
__asm__
 
__vﬁ©ûe__


1256 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1257 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1258 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1259 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1261  
__ªs
;

1262 
	}
}

1266 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1267 
	#_USE_STRING_ARCH_°rchr
 1

	)

1268 
	#°rchr
(
s
, 
c
) \

1269 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1270 ? ((
c
) == '\0' \

1271 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1272 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1273 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1275 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1277 
__STRING_INLINE
 *

1278 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1280 
__d0
;

1281 *
__ªs
;

1282 
__asm__
 
__vﬁ©ûe__


1292 : "Ù" (
__ªs
), "=&a" (
__d0
)

1293 : "0" (
__s
), "1" (
__c
),

1294 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1296  
__ªs
;

1297 
	}
}

1299 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1301 
__STRING_INLINE
 *

1302 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1304 
__d0
;

1305 *
__ªs
;

1306 
__asm__
 
__vﬁ©ûe__


1317 : "Ù" (
__ªs
), "=&a" (
__d0
)

1318 : "0" (
__s
), "1" (
__c
),

1319 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1321  
__ªs
;

1322 
	}
}

1326 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1327 
	#__°rch∫ul
(
s
, 
c
) \

1328 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1329 ? ((
c
) == '\0' \

1330 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1331 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1332 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1334 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1336 
__STRING_INLINE
 *

1337 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1339 
__d0
;

1340 *
__ªs
;

1341 
__asm__
 
__vﬁ©ûe__


1351 : "Ù" (
__ªs
), "=&a" (
__d0
)

1352 : "0" (
__s
), "1" (
__c
),

1353 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1355  
__ªs
;

1356 
	}
}

1358 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1360 
__STRING_INLINE
 *

1361 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1363 
__d0
;

1364 *
__ªs
;

1365 
__asm__
 
__vﬁ©ûe__


1376 : "Ù" (
__ªs
), "=&a" (
__d0
)

1377 : "0" (
__s
), "1" (
__c
),

1378 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1380  
__ªs
;

1381 
	}
}

1382 #ifde‡
__USE_GNU


1383 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1387 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1389 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1390 
	#ödex
(
s
, 
c
) \

1391 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1392 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1393 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1398 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1399 
	#°ºchr
(
s
, 
c
) \

1400 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1401 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1402 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1404 #ifde‡
__i686__


1405 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1407 
__STRING_INLINE
 *

1408 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1410 
__d0
, 
__d1
;

1411 *
__ªs
;

1412 
__asm__
 
__vﬁ©ûe__


1420 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1421 : "0" (1), "1" (
__s
), "2" (
__c
),

1422 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1424  
__ªs
 - 1;

1425 
	}
}

1427 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1429 
__STRING_INLINE
 *

1430 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1432 
__d0
, 
__d1
;

1433 *
__ªs
;

1434 
__asm__
 
__vﬁ©ûe__


1443 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1444 : "0" (1), "1" (
__s
), "2" (
__c
),

1445 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1447  
__ªs
 - 1;

1448 
	}
}

1450 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1452 
__STRING_INLINE
 *

1453 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1455 
__d0
, 
__d1
;

1456 *
__ªs
;

1457 
__asm__
 
__vﬁ©ûe__


1467 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1468 : "0" (0), "1" (
__s
), "2" (
__c
),

1469 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1471  
__ªs
;

1472 
	}
}

1474 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1476 
__STRING_INLINE
 *

1477 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1479 
__d0
, 
__d1
;

1480 *
__ªs
;

1481 
__asm__
 
__vﬁ©ûe__


1492 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1493 : "0" (0), "1" (
__s
), "2" (
__c
),

1494 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1496  
__ªs
;

1497 
	}
}

1501 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1503 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1504 
	#rödex
(
s
, 
c
) \

1505 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1506 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1507 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1513 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1514 
	#°rc•n
(
s
, 
ªje˘
) \

1515 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1516 ? ((
ªje˘
)[0] == '\0' \

1517 ? 
	`°æí
 (
s
) \

1518 : ((
ªje˘
)[1] == '\0' \

1519 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1520 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1521 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1523 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1525 #i‚de‡
_FORCE_INLINES


1526 
__STRING_INLINE
 
size_t


1527 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1529 
__d0
;

1530 *
__ªs
;

1531 
__asm__
 
__vﬁ©ûe__


1540 : "Ù" (
__ªs
), "=&a" (
__d0
)

1541 : "0" (
__s
), "1" (
__ªje˘
),

1542 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1544  (
__ªs
 - 1Ë- 
__s
;

1545 
	}
}

1548 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1549 
size_t
 
__ªje˘_Àn
);

1551 
__STRING_INLINE
 
size_t


1552 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1554 
__d0
, 
__d1
, 
__d2
;

1555 c⁄° *
__ªs
;

1556 
__asm__
 
__vﬁ©ûe__


1567 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1568 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1570  (
__ªs
 - 1Ë- 
__s
;

1571 
	}
}

1573 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1574 #ifde‡
__PIC__


1576 
__STRING_INLINE
 
size_t


1577 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1579 
__d0
, 
__d1
, 
__d2
;

1580 c⁄° *
__ªs
;

1581 
__asm__
 
__vﬁ©ûe__


1598 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1599 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1601  (
__ªs
 - 1Ë- 
__s
;

1602 
	}
}

1604 
__STRING_INLINE
 
size_t


1605 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1607 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1608 c⁄° *
__ªs
;

1609 
__asm__
 
__vﬁ©ûe__


1623 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1624 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1627  (
__ªs
 - 1Ë- 
__s
;

1628 
	}
}

1634 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1635 
	#°r•n
(
s
, 
ac˚±
) \

1636 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1637 ? ((
ac˚±
)[0] == '\0' \

1638 ? ((Ë(
s
), 0) \

1639 : ((
ac˚±
)[1] == '\0' \

1640 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1641 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1642 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1644 #i‚de‡
_FORCE_INLINES


1645 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1647 
__STRING_INLINE
 
size_t


1648 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1650 
__d0
;

1651 *
__ªs
;

1653 
__asm__
 
__vﬁ©ûe__


1659 : "Ù" (
__ªs
), "=&q" (
__d0
)

1660 : "0" (
__s
), "1" (
__ac˚±
),

1661 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1663  (
__ªs
 - 1Ë- 
__s
;

1664 
	}
}

1667 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1668 
size_t
 
__ac˚±_Àn
);

1670 
__STRING_INLINE
 
size_t


1671 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1673 
__d0
, 
__d1
, 
__d2
;

1674 c⁄° *
__ªs
;

1675 
__asm__
 
__vﬁ©ûe__


1686 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1687 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1690 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1691 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1693  (
__ªs
 - 1Ë- 
__s
;

1694 
	}
}

1696 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1697 #ifde‡
__PIC__


1699 
__STRING_INLINE
 
size_t


1700 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1702 
__d0
, 
__d1
, 
__d2
;

1703 c⁄° *
__ªs
;

1704 
__asm__
 
__vﬁ©ûe__


1720 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1721 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1723  (
__ªs
 - 1Ë- 
__s
;

1724 
	}
}

1726 
__STRING_INLINE
 
size_t


1727 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1729 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1730 c⁄° *
__ªs
;

1731 
__asm__
 
__vﬁ©ûe__


1745 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1746 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1748  (
__ªs
 - 1Ë- 
__s
;

1749 
	}
}

1754 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1755 
	#°Ωbrk
(
s
, 
ac˚±
) \

1756 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1757 ? ((
ac˚±
)[0] == '\0' \

1758 ? ((Ë(
s
), (*) 0) \

1759 : ((
ac˚±
)[1] == '\0' \

1760 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1761 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1762 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1764 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1765 
size_t
 
__ac˚±_Àn
);

1767 
__STRING_INLINE
 *

1768 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1770 
__d0
, 
__d1
, 
__d2
;

1771 *
__ªs
;

1772 
__asm__
 
__vﬁ©ûe__


1787 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1788 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1790  
__ªs
;

1791 
	}
}

1793 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1794 #ifde‡
__PIC__


1796 
__STRING_INLINE
 *

1797 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1799 
__d0
, 
__d1
, 
__d2
;

1800 *
__ªs
;

1801 
__asm__
 
__vﬁ©ûe__


1822 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1823 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1825  
__ªs
;

1826 
	}
}

1828 
__STRING_INLINE
 *

1829 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1831 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1832 *
__ªs
;

1833 
__asm__
 
__vﬁ©ûe__


1852 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1853 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1855  
__ªs
;

1856 
	}
}

1861 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1862 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1863 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1864 ? ((
√edÀ
)[0] == '\0' \

1865 ? (
hay°ack
) \

1866 : ((
√edÀ
)[1] == '\0' \

1867 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1868 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1869 
	`°æí
 (
√edÀ
)))) \

1870 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1874 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1875 c⁄° 
__√edÀ
[],

1876 
size_t
 
__√edÀ_Àn
);

1878 
__STRING_INLINE
 *

1879 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1880 
size_t
 
__√edÀ_Àn
)

1882 
__d0
, 
__d1
, 
__d2
;

1883 *
__ªs
;

1884 
__asm__
 
__vﬁ©ûe__


1897 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1898 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1900  
__ªs
;

1901 
	}
}

1903 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1904 c⁄° *
__√edÀ
);

1905 #ifde‡
__PIC__


1907 
__STRING_INLINE
 *

1908 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1910 
__d0
, 
__d1
, 
__d2
;

1911 *
__ªs
;

1912 
__asm__
 
__vﬁ©ûe__


1931 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1932 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1933 "d" (
__√edÀ
)

1935  
__ªs
;

1936 
	}
}

1938 
__STRING_INLINE
 *

1939 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1941 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1942 *
__ªs
;

1943 
__asm__
 
__vﬁ©ûe__


1960 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1961 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1962 "b" (
__√edÀ
)

1964  
__ªs
;

1965 
	}
}

1971 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1972 #ifde‡
__i686__


1973 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1974 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1975 ? 
	`__buûtö_ffs
 (
w‹d
) \

1976 : ({ 
__˙t
, 
__tmp
; \

1977 
__asm__
 
__vﬁ©ûe__
 \

1980 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1981 : "rm" (
w‹d
), "1" (-1)); \

1982 
__˙t
 + 1; }))

	)

1984 #i‚de‡
ff¶


1985 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1990 #i‚de‡
_FORCE_INLINES


1991 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

52 
	#__°rög2_1b±r_p
(
__x
) \

53 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

56 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


57 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

61 #i‚de‡
_HAVE_STRING_ARCH_°rchr


62 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

63 
	#°rchr
(
s
, 
c
) \

64 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

65 && (
c
) == '\0' \

66 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

67 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

72 #ifde‡
__USE_GNU


73 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


74 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

77 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

83 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


84 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

89 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


90 #ifde‡
_USE_STRING_ARCH_°rchr


91 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

92 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

93 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

94 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

95 ? 
	`°rˇt
 (
__de°
, 
§c
) \

96 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

97 
§c
, 
n
)Ë'\0', 
__de°
)) \

98 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

100 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

106 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


107 
	#°rcmp
(
s1
, 
s2
) \

108 
__exãnsi⁄__
 \

109 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

110 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

111 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

112 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

113 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

114 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

115 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

116 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

118 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

119 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

120 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

121 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

122 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

123 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

124 : -
	`__°rcmp_cg
 (
s2
, 
s1
, 
__s2_Àn
)) \

125 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

127 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

128 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

129 (c⁄° *Ë(c⁄° *Ë(
s2
); \

130 
__ªsu…
 = \

131 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

132 - 
__s2
[0]); \

133 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

135 
__ªsu…
 = (((const *) \

136 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

137 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

139 
__ªsu…
 = (((const *) \

140 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

141 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

142 
__ªsu…
 = (((const *) \

143 (c⁄° *Ë(
s1
))[3] \

144 - 
__s2
[3]); \

147 
__ªsu…
; }))

	)

152 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


153 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

154 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

155 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

156 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

157 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

158 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

159 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

165 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


166 
	#°rc•n
(
s
, 
ªje˘
Ë
	`__buûtö_°rc•n
 (s,Ñeje˘)

	)

172 #i‚de‡
_HAVE_STRING_ARCH_°r•n


173 
	#°r•n
(
s
, 
ac˚±
Ë
	`__buûtö_°r•n
 (s,ác˚±)

	)

178 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


179 
	#°Ωbrk
(
s
, 
ac˚±
Ë
	`__buûtö_°Ωbrk
 (s,ác˚±)

	)

183 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


184 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


185 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

186 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

187 && ((c⁄° *Ë(
£p
))[0] != '\0' \

188 && ((c⁄° *Ë(
£p
))[1] == '\0' \

189 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

190 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

193 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

194 
__STRING_INLINE
 *

195 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

197 *
__ªsu…
;

198 i‡(
__s
 =
NULL
)

199 
__s
 = *
__√xç
;

200 *
__s
 =
__£p
)

201 ++
__s
;

202 
__ªsu…
 = 
NULL
;

203 i‡(*
__s
 != '\0')

205 
__ªsu…
 = 
__s
++;

206 *
__s
 != '\0')

207 i‡(*
__s
++ =
__£p
)

209 
__s
[-1] = '\0';

213 *
__√xç
 = 
__s
;

214  
__ªsu…
;

215 
	}
}

216 #ifde‡
__USE_POSIX


217 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

222 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


223 #i‚de‡
_HAVE_STRING_ARCH_°r£p


225 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

226 
	#__°r£p
(
s
, 
ªje˘
) \

227 
__exãnsi⁄__
 \

228 ({ 
__r0
, 
__r1
, 
__r2
; \

229 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

230 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

231 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

232 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

233 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

234 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

235 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

236 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

237 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

238 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

239 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

240 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

243 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

244 
__STRING_INLINE
 *

245 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

247 *
__ªtvÆ
 = *
__s
;

248 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

249 *(*
__s
)++ = '\0';

250  
__ªtvÆ
;

251 
	}
}

253 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

254 
__STRING_INLINE
 *

255 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

257 *
__ªtvÆ
 = *
__s
;

258 i‡(
__ªtvÆ
 !
NULL
)

260 *
__˝
 = 
__ªtvÆ
;

263 i‡(*
__˝
 == '\0')

265 
__˝
 = 
NULL
;

268 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

270 *
__˝
++ = '\0';

273 ++
__˝
;

275 *
__s
 = 
__˝
;

277  
__ªtvÆ
;

278 
	}
}

280 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

281 
__ªje˘3
);

282 
__STRING_INLINE
 *

283 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

285 *
__ªtvÆ
 = *
__s
;

286 i‡(
__ªtvÆ
 !
NULL
)

288 *
__˝
 = 
__ªtvÆ
;

291 i‡(*
__˝
 == '\0')

293 
__˝
 = 
NULL
;

296 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

298 *
__˝
++ = '\0';

301 ++
__˝
;

303 *
__s
 = 
__˝
;

305  
__ªtvÆ
;

306 
	}
}

307 #ifde‡
__USE_MISC


308 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

315 #ifde‡
__USE_MISC


317 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


318 
	#__√ed_mÆloc_™d_ˇŒoc


	)

319 
	~<°dlib.h
>

322 #i‚de‡
_HAVE_STRING_ARCH_°rdup


324 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

325 
	#__°rdup
(
s
) \

326 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

327 ? (((c⁄° *Ë(
s
))[0] == '\0' \

328 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

329 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

330 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

331 i‡(
__ªtvÆ
 !
NULL
) \

332 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

333 
__ªtvÆ
; 
	}
})) \

334 : 
	`__°rdup
 (
s
)))

	)

336 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


337 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

341 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


343 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

344 
__THROW
 
__©åibuã_mÆloc__
;

345 
	#__°∫dup
(
s
, 
n
) \

346 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

347 ? (((c⁄° *Ë(
s
))[0] == '\0' \

348 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

349 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

350 
size_t
 
__n
 = (
n
); \

351 *
__ªtvÆ
; \

352 i‡(
__n
 < 
__Àn
) \

353 
__Àn
 = 
__n
 + 1; \

354 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

355 i‡(
__ªtvÆ
 !
NULL
) \

357 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

358 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

359 
__Àn
 - 1); \

361 
__ªtvÆ
; 
	}
})) \

362 : 
	`__°∫dup
 (
s
, 
n
)))

	)

364 #ifde‡
__USE_XOPEN2K8


365 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

371 #i‚de‡
_FORCE_INLINES


372 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 #i‡
deföed
 
__USE_GNU
 || !deföed 
__USE_XOPEN2K8


81 
	#NL_NMAX
 
INT_MAX


	)

85 
	#NL_SETMAX
 
INT_MAX


	)

88 
	#NL_TEXTMAX
 
INT_MAX


	)

91 
	#NZERO
 20

	)

95 #ifde‡
INT_MAX


96 #i‡
INT_MAX
 == 32767

97 
	#WORD_BIT
 16

	)

99 #i‡
INT_MAX
 == 2147483647

100 
	#WORD_BIT
 32

	)

103 
	#WORD_BIT
 64

	)

106 #ñi‡
deföed
 
__INT_MAX__


107 #i‡
__INT_MAX__
 == 32767

108 
	#WORD_BIT
 16

	)

110 #i‡
__INT_MAX__
 == 2147483647

111 
	#WORD_BIT
 32

	)

114 
	#WORD_BIT
 64

	)

118 
	#WORD_BIT
 32

	)

122 #ifde‡
LONG_MAX


123 #i‡
LONG_MAX
 == 2147483647

124 
	#LONG_BIT
 32

	)

127 
	#LONG_BIT
 64

	)

129 #ñi‡
deföed
 
__LONG_MAX__


130 #i‡
__LONG_MAX__
 == 2147483647

131 
	#LONG_BIT
 32

	)

134 
	#LONG_BIT
 64

	)

137 
	~<bôs/w‹dsize.h
>

138 #i‡
__WORDSIZE
 == 64

139 
	#LONG_BIT
 64

	)

141 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

330 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

331 #i‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 24

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/soundcard.h

24 #i‚de‡
SOUNDCARD_H


25 
	#SOUNDCARD_H


	)

36 
	#SOUND_VERSION
 0x030802

	)

37 
	#OPEN_SOUND_SYSTEM


	)

40 
	~<löux/io˘l.h
>

43 
	~<ídün.h
>

49 
	#SNDCARD_ADLIB
 1

	)

50 
	#SNDCARD_SB
 2

	)

51 
	#SNDCARD_PAS
 3

	)

52 
	#SNDCARD_GUS
 4

	)

53 
	#SNDCARD_MPU401
 5

	)

54 
	#SNDCARD_SB16
 6

	)

55 
	#SNDCARD_SB16MIDI
 7

	)

56 
	#SNDCARD_UART6850
 8

	)

57 
	#SNDCARD_GUS16
 9

	)

58 
	#SNDCARD_MSS
 10

	)

59 
	#SNDCARD_PSS
 11

	)

60 
	#SNDCARD_SSCAPE
 12

	)

61 
	#SNDCARD_PSS_MPU
 13

	)

62 
	#SNDCARD_PSS_MSS
 14

	)

63 
	#SNDCARD_SSCAPE_MSS
 15

	)

64 
	#SNDCARD_TRXPRO
 16

	)

65 
	#SNDCARD_TRXPRO_SB
 17

	)

66 
	#SNDCARD_TRXPRO_MPU
 18

	)

67 
	#SNDCARD_MAD16
 19

	)

68 
	#SNDCARD_MAD16_MPU
 20

	)

69 
	#SNDCARD_CS4232
 21

	)

70 
	#SNDCARD_CS4232_MPU
 22

	)

71 
	#SNDCARD_MAUI
 23

	)

72 
	#SNDCARD_PSEUDO_MSS
 24

	)

73 
	#SNDCARD_GUSPNP
 25

	)

74 
	#SNDCARD_UART401
 26

	)

81 #i‚de‡
_SIOWR


82 #i‡
deföed
(
_IOWR
Ë&& (deföed(
_AIX
Ë|| (!deföed(
sun
Ë&& !deföed(
•¨c
Ë&& !deföed(
__•¨c__
Ë&& !deföed(
__INCio˘lh
Ë&& !deföed(
__Lynx__
)))

84 
	#SIOCPARM_MASK
 
IOCPARM_MASK


	)

85 
	#SIOC_VOID
 
IOC_VOID


	)

86 
	#SIOC_OUT
 
IOC_OUT


	)

87 
	#SIOC_IN
 
IOC_IN


	)

88 
	#SIOC_INOUT
 
IOC_INOUT


	)

89 
	#_SIOC_SIZE
 
_IOC_SIZE


	)

90 
	#_SIOC_DIR
 
_IOC_DIR


	)

91 
	#_SIOC_NONE
 
_IOC_NONE


	)

92 
	#_SIOC_READ
 
_IOC_READ


	)

93 
	#_SIOC_WRITE
 
_IOC_WRITE


	)

94 
	#_SIO
 
_IO


	)

95 
	#_SIOR
 
_IOR


	)

96 
	#_SIOW
 
_IOW


	)

97 
	#_SIOWR
 
_IOWR


	)

107 
	#SIOCPARM_MASK
 0x1ff‡

	)

108 
	#SIOC_VOID
 0x00000000

	)

109 
	#SIOC_OUT
 0x20000000

	)

110 
	#SIOC_IN
 0x40000000

	)

111 
	#SIOC_INOUT
 (
SIOC_IN
|
SIOC_OUT
)

	)

113 
	#_SIO
(
x
,
y
Ë(()(
SIOC_VOID
|(x<<8)|y))

	)

114 
	#_SIOR
(
x
,
y
,
t
Ë(()(
SIOC_OUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

115 
	#_SIOW
(
x
,
y
,
t
Ë(()(
SIOC_IN
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

117 
	#_SIOWR
(
x
,
y
,
t
Ë(()(
SIOC_INOUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

118 
	#_SIOC_SIZE
(
x
Ë((x>>16)&
SIOCPARM_MASK
)

	)

119 
	#_SIOC_DIR
(
x
Ë(x & 0xf0000000)

	)

120 
	#_SIOC_NONE
 
SIOC_VOID


	)

121 
	#_SIOC_READ
 
SIOC_OUT


	)

122 
	#_SIOC_WRITE
 
SIOC_IN


	)

126 
	#SNDCTL_SEQ_RESET
 
	`_SIO
 ('Q', 0)

	)

127 
	#SNDCTL_SEQ_SYNC
 
	`_SIO
 ('Q', 1)

	)

128 
	#SNDCTL_SYNTH_INFO
 
	`_SIOWR
('Q', 2, 
sy¡h_öfo
)

	)

129 
	#SNDCTL_SEQ_CTRLRATE
 
	`_SIOWR
('Q', 3, Ë

	)

130 
	#SNDCTL_SEQ_GETOUTCOUNT
 
	`_SIOR
 ('Q', 4, )

	)

131 
	#SNDCTL_SEQ_GETINCOUNT
 
	`_SIOR
 ('Q', 5, )

	)

132 
	#SNDCTL_SEQ_PERCMODE
 
	`_SIOW
 ('Q', 6, )

	)

133 
	#SNDCTL_FM_LOAD_INSTR
 
	`_SIOW
 ('Q', 7, 
sbi_ö°rumít
Ë

	)

134 
	#SNDCTL_SEQ_TESTMIDI
 
	`_SIOW
 ('Q', 8, )

	)

135 
	#SNDCTL_SEQ_RESETSAMPLES
 
	`_SIOW
 ('Q', 9, )

	)

136 
	#SNDCTL_SEQ_NRSYNTHS
 
	`_SIOR
 ('Q',10, )

	)

137 
	#SNDCTL_SEQ_NRMIDIS
 
	`_SIOR
 ('Q',11, )

	)

138 
	#SNDCTL_MIDI_INFO
 
	`_SIOWR
('Q',12, 
midi_öfo
)

	)

139 
	#SNDCTL_SEQ_THRESHOLD
 
	`_SIOW
 ('Q',13, )

	)

140 
	#SNDCTL_SYNTH_MEMAVL
 
	`_SIOWR
('Q',14, Ë

	)

141 
	#SNDCTL_FM_4OP_ENABLE
 
	`_SIOW
 ('Q',15, Ë

	)

142 
	#SNDCTL_SEQ_PANIC
 
	`_SIO
 ('Q',17)

	)

143 
	#SNDCTL_SEQ_OUTOFBAND
 
	`_SIOW
 ('Q',18, 
£q_evít_ªc
)

	)

144 
	#SNDCTL_SEQ_GETTIME
 
	`_SIOR
 ('Q',19, )

	)

145 
	#SNDCTL_SYNTH_ID
 
	`_SIOWR
('Q',20, 
sy¡h_öfo
)

	)

146 
	#SNDCTL_SYNTH_CONTROL
 
	`_SIOWR
('Q',21, 
sy¡h_c⁄åﬁ
)

	)

147 
	#SNDCTL_SYNTH_REMOVESAMPLE
 
	`_SIOWR
('Q',22, 
ªmove_ßm∂e
)

	)

149 
	ssy¡h_c⁄åﬁ


151 
	mdevno
;

152 
	md©a
[4000];

153 }
	tsy¡h_c⁄åﬁ
;

155 
	sªmove_ßm∂e


157 
	mdevno
;

158 
	mb™kno
;

159 
	mö°∫o
;

160 } 
	tªmove_ßm∂e
;

162 
	s£q_evít_ªc
 {

163 
	m¨r
[8];

164 } 
	t£q_evít_ªc
;

166 
	#SNDCTL_TMR_TIMEBASE
 
	`_SIOWR
('T', 1, )

	)

167 
	#SNDCTL_TMR_START
 
	`_SIO
 ('T', 2)

	)

168 
	#SNDCTL_TMR_STOP
 
	`_SIO
 ('T', 3)

	)

169 
	#SNDCTL_TMR_CONTINUE
 
	`_SIO
 ('T', 4)

	)

170 
	#SNDCTL_TMR_TEMPO
 
	`_SIOWR
('T', 5, )

	)

171 
	#SNDCTL_TMR_SOURCE
 
	`_SIOWR
('T', 6, )

	)

172 
	#TMR_INTERNAL
 0x00000001

	)

173 
	#TMR_EXTERNAL
 0x00000002

	)

174 
	#TMR_MODE_MIDI
 0x00000010

	)

175 
	#TMR_MODE_FSK
 0x00000020

	)

176 
	#TMR_MODE_CLS
 0x00000040

	)

177 
	#TMR_MODE_SMPTE
 0x00000080

	)

178 
	#SNDCTL_TMR_METRONOME
 
	`_SIOW
 ('T', 7, )

	)

179 
	#SNDCTL_TMR_SELECT
 
	`_SIOW
 ('T', 8, )

	)

185 
	#_LINUX_PATCHKEY_H_INDIRECT


	)

186 
	~<löux/∑tchkey.h
>

187 #unde‡
_LINUX_PATCHKEY_H_INDIRECT


189 #i‡
deföed
(
__BYTE_ORDER
)

190 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


191 
	#AFMT_S16_NE
 
AFMT_S16_BE


	)

192 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


193 
	#AFMT_S16_NE
 
AFMT_S16_LE


	)

209 
	s∑tch_öfo
 {

210 
	mkey
;

211 
	#WAVE_PATCH
 
	`_PATCHKEY
(0x04)

	)

212 
	#GUS_PATCH
 
WAVE_PATCH


	)

213 
	#WAVEFRONT_PATCH
 
	`_PATCHKEY
(0x06)

	)

215 
	mdevi˚_no
;

216 
	mö°r_no
;

218 
	mmode
;

223 
	#WAVE_16_BITS
 0x01

	)

224 
	#WAVE_UNSIGNED
 0x02

	)

225 
	#WAVE_LOOPING
 0x04

	)

226 
	#WAVE_BIDIR_LOOP
 0x08

	)

227 
	#WAVE_LOOP_BACK
 0x10

	)

228 
	#WAVE_SUSTAIN_ON
 0x20

	)

229 
	#WAVE_ENVELOPES
 0x40

	)

230 
	#WAVE_FAST_RELEASE
 0x80

	)

233 
	#WAVE_VIBRATO
 0x00010000

	)

234 
	#WAVE_TREMOLO
 0x00020000

	)

235 
	#WAVE_SCALE
 0x00040000

	)

236 
	#WAVE_FRACTIONS
 0x00080000

	)

238 
	#WAVE_ROM
 0x40000000

	)

239 
	#WAVE_MULAW
 0x20000000

	)

242 
	mÀn
;

243 
	mlo›_°¨t
, 
	mlo›_íd
;

261 
	mba£_‰eq
;

262 
	mba£_nŸe
;

263 
	mhigh_nŸe
;

264 
	mlow_nŸe
;

265 
	m∑¬ög
;

266 
	mdëunög
;

271 
	mív_øã
[ 6 ];

272 
	mív_off£t
[ 6 ];

280 
	måemﬁo_swìp
;

281 
	måemﬁo_øã
;

282 
	måemﬁo_dïth
;

284 
	mvibøto_swìp
;

285 
	mvibøto_øã
;

286 
	mvibøto_dïth
;

288 
	msˇÀ_‰equícy
;

289 
	msˇÀ_Á˘‹
;

291 
	mvﬁume
;

292 
	m‰a˘i⁄s
;

293 
	mª£rved1
;

294 
	m•¨e
[2];

295 
	md©a
[1];

298 
	ssy£x_öfo
 {

299 
	mkey
;

300 
	#SYSEX_PATCH
 
	`_PATCHKEY
(0x05)

	)

301 
	#MAUI_PATCH
 
	`_PATCHKEY
(0x06)

	)

302 
	mdevi˚_no
;

303 
	mÀn
;

304 
	md©a
[1];

327 
	#SEQ_NOTEOFF
 0

	)

328 
	#SEQ_FMNOTEOFF
 
SEQ_NOTEOFF


	)

329 
	#SEQ_NOTEON
 1

	)

330 
	#SEQ_FMNOTEON
 
SEQ_NOTEON


	)

331 
	#SEQ_WAIT
 
TMR_WAIT_ABS


	)

332 
	#SEQ_PGMCHANGE
 3

	)

333 
	#SEQ_FMPGMCHANGE
 
SEQ_PGMCHANGE


	)

334 
	#SEQ_SYNCTIMER
 
TMR_START


	)

335 
	#SEQ_MIDIPUTC
 5

	)

336 
	#SEQ_DRUMON
 6

	)

337 
	#SEQ_DRUMOFF
 7

	)

338 
	#SEQ_ECHO
 
TMR_ECHO


	)

339 
	#SEQ_AFTERTOUCH
 9

	)

340 
	#SEQ_CONTROLLER
 10

	)

354 
	#CTL_BANK_SELECT
 0x00

	)

355 
	#CTL_MODWHEEL
 0x01

	)

356 
	#CTL_BREATH
 0x02

	)

358 
	#CTL_FOOT
 0x04

	)

359 
	#CTL_PORTAMENTO_TIME
 0x05

	)

360 
	#CTL_DATA_ENTRY
 0x06

	)

361 
	#CTL_MAIN_VOLUME
 0x07

	)

362 
	#CTL_BALANCE
 0x08

	)

364 
	#CTL_PAN
 0x0a

	)

365 
	#CTL_EXPRESSION
 0x0b

	)

370 
	#CTL_GENERAL_PURPOSE1
 0x10

	)

371 
	#CTL_GENERAL_PURPOSE2
 0x11

	)

372 
	#CTL_GENERAL_PURPOSE3
 0x12

	)

373 
	#CTL_GENERAL_PURPOSE4
 0x13

	)

383 
	#CTL_DAMPER_PEDAL
 0x40

	)

384 
	#CTL_SUSTAIN
 0x40

	)

385 
	#CTL_HOLD
 0x40

	)

386 
	#CTL_PORTAMENTO
 0x41

	)

387 
	#CTL_SOSTENUTO
 0x42

	)

388 
	#CTL_SOFT_PEDAL
 0x43

	)

390 
	#CTL_HOLD2
 0x45

	)

393 
	#CTL_GENERAL_PURPOSE5
 0x50

	)

394 
	#CTL_GENERAL_PURPOSE6
 0x51

	)

395 
	#CTL_GENERAL_PURPOSE7
 0x52

	)

396 
	#CTL_GENERAL_PURPOSE8
 0x53

	)

398 
	#CTL_EXT_EFF_DEPTH
 0x5b

	)

399 
	#CTL_TREMOLO_DEPTH
 0x5c

	)

400 
	#CTL_CHORUS_DEPTH
 0x5d

	)

401 
	#CTL_DETUNE_DEPTH
 0x5e

	)

402 
	#CTL_CELESTE_DEPTH
 0x5ê

	)

403 
	#CTL_PHASER_DEPTH
 0x5f

	)

404 
	#CTL_DATA_INCREMENT
 0x60

	)

405 
	#CTL_DATA_DECREMENT
 0x61

	)

406 
	#CTL_NONREG_PARM_NUM_LSB
 0x62

	)

407 
	#CTL_NONREG_PARM_NUM_MSB
 0x63

	)

408 
	#CTL_REGIST_PARM_NUM_LSB
 0x64

	)

409 
	#CTL_REGIST_PARM_NUM_MSB
 0x65

	)

414 
	#CTRL_PITCH_BENDER
 255

	)

415 
	#CTRL_PITCH_BENDER_RANGE
 254

	)

416 
	#CTRL_EXPRESSION
 253

	)

417 
	#CTRL_MAIN_VOLUME
 252

	)

418 
	#SEQ_BALANCE
 11

	)

419 
	#SEQ_VOLMODE
 12

	)

425 
	#VOL_METHOD_ADAGIO
 1

	)

426 
	#VOL_METHOD_LINEAR
 2

	)

437 
	#SEQ_FULLSIZE
 0xfd

	)

458 
	#SEQ_PRIVATE
 0x„

	)

459 
	#SEQ_EXTENDED
 0xf‡

	)

465 
	tsbi_ö°r_d©a
[32];

467 
	ssbi_ö°rumít
 {

468 
	mkey
;

469 
	#FM_PATCH
 
	`_PATCHKEY
(0x01)

	)

470 
	#OPL3_PATCH
 
	`_PATCHKEY
(0x03)

	)

471 
	mdevi˚
;

472 
	mch™√l
;

473 
sbi_ö°r_d©a
 
	m›î©‹s
;

476 
	ssy¡h_öfo
 {

477 
	m«me
[30];

478 
	mdevi˚
;

479 
	msy¡h_ty≥
;

480 
	#SYNTH_TYPE_FM
 0

	)

481 
	#SYNTH_TYPE_SAMPLE
 1

	)

482 
	#SYNTH_TYPE_MIDI
 2

	)

484 
	msy¡h_subty≥
;

485 
	#FM_TYPE_ADLIB
 0x00

	)

486 
	#FM_TYPE_OPL3
 0x01

	)

487 
	#MIDI_TYPE_MPU401
 0x401

	)

489 
	#SAMPLE_TYPE_BASIC
 0x10

	)

490 
	#SAMPLE_TYPE_GUS
 
SAMPLE_TYPE_BASIC


	)

491 
	#SAMPLE_TYPE_WAVEFRONT
 0x11

	)

493 
	m≥rc_mode
;

494 
	mƒ_voi˚s
;

495 
	mƒ_drums
;

496 
	mö°r_b™k_size
;

497 
	mˇ∑bûôõs
;

498 
	#SYNTH_CAP_PERCMODE
 0x00000001

	)

499 
	#SYNTH_CAP_OPL3
 0x00000002

	)

500 
	#SYNTH_CAP_INPUT
 0x00000004

	)

501 
	mdummõs
[19];

504 
	ssound_timî_öfo
 {

505 
	m«me
[32];

506 
	mˇps
;

509 
	#MIDI_CAP_MPU401
 1

	)

511 
	smidi_öfo
 {

512 
	m«me
[30];

513 
	mdevi˚
;

514 
	mˇ∑bûôõs
;

515 
	mdev_ty≥
;

516 
	mdummõs
[18];

523 
	mcmd
;

524 
	mƒ_¨gs
, 
	mƒ_ªtu∫s
;

525 
	md©a
[30];

526 } 
	tmpu_comm™d_ªc
;

528 
	#SNDCTL_MIDI_PRETIME
 
	`_SIOWR
('m', 0, )

	)

529 
	#SNDCTL_MIDI_MPUMODE
 
	`_SIOWR
('m', 1, )

	)

530 
	#SNDCTL_MIDI_MPUCMD
 
	`_SIOWR
('m', 2, 
mpu_comm™d_ªc
)

	)

536 
	#SNDCTL_DSP_RESET
 
	`_SIO
 ('P', 0)

	)

537 
	#SNDCTL_DSP_SYNC
 
	`_SIO
 ('P', 1)

	)

538 
	#SNDCTL_DSP_SPEED
 
	`_SIOWR
('P', 2, )

	)

539 
	#SNDCTL_DSP_STEREO
 
	`_SIOWR
('P', 3, )

	)

540 
	#SNDCTL_DSP_GETBLKSIZE
 
	`_SIOWR
('P', 4, )

	)

541 
	#SNDCTL_DSP_SAMPLESIZE
 
SNDCTL_DSP_SETFMT


	)

542 
	#SNDCTL_DSP_CHANNELS
 
	`_SIOWR
('P', 6, )

	)

543 
	#SOUND_PCM_WRITE_CHANNELS
 
SNDCTL_DSP_CHANNELS


	)

544 
	#SOUND_PCM_WRITE_FILTER
 
	`_SIOWR
('P', 7, )

	)

545 
	#SNDCTL_DSP_POST
 
	`_SIO
 ('P', 8)

	)

546 
	#SNDCTL_DSP_SUBDIVIDE
 
	`_SIOWR
('P', 9, )

	)

547 
	#SNDCTL_DSP_SETFRAGMENT
 
	`_SIOWR
('P',10, )

	)

550 
	#SNDCTL_DSP_GETFMTS
 
	`_SIOR
 ('P',11, Ë

	)

551 
	#SNDCTL_DSP_SETFMT
 
	`_SIOWR
('P',5, Ë

	)

552 
	#AFMT_QUERY
 0x00000000

	)

553 
	#AFMT_MU_LAW
 0x00000001

	)

554 
	#AFMT_A_LAW
 0x00000002

	)

555 
	#AFMT_IMA_ADPCM
 0x00000004

	)

556 
	#AFMT_U8
 0x00000008

	)

557 
	#AFMT_S16_LE
 0x00000010

	)

558 
	#AFMT_S16_BE
 0x00000020

	)

559 
	#AFMT_S8
 0x00000040

	)

560 
	#AFMT_U16_LE
 0x00000080

	)

561 
	#AFMT_U16_BE
 0x00000100

	)

562 
	#AFMT_MPEG
 0x00000200

	)

563 
	#AFMT_AC3
 0x00000400

	)

568 
	saudio_buf_öfo
 {

569 
	m‰agmíts
;

570 
	m‰ag°ŸÆ
;

571 
	m‰agsize
;

573 
	mbyãs
;

575 } 
	taudio_buf_öfo
;

577 
	#SNDCTL_DSP_GETOSPACE
 
	`_SIOR
 ('P',12, 
audio_buf_öfo
)

	)

578 
	#SNDCTL_DSP_GETISPACE
 
	`_SIOR
 ('P',13, 
audio_buf_öfo
)

	)

579 
	#SNDCTL_DSP_NONBLOCK
 
	`_SIO
 ('P',14)

	)

580 
	#SNDCTL_DSP_GETCAPS
 
	`_SIOR
 ('P',15, )

	)

581 
	#DSP_CAP_REVISION
 0x000000f‡

	)

582 
	#DSP_CAP_DUPLEX
 0x00000100

	)

583 
	#DSP_CAP_REALTIME
 0x00000200

	)

584 
	#DSP_CAP_BATCH
 0x00000400

	)

588 
	#DSP_CAP_COPROC
 0x00000800

	)

591 
	#DSP_CAP_TRIGGER
 0x00001000

	)

592 
	#DSP_CAP_MMAP
 0x00002000

	)

593 
	#DSP_CAP_MULTI
 0x00004000

	)

594 
	#DSP_CAP_BIND
 0x00008000

	)

597 
	#SNDCTL_DSP_GETTRIGGER
 
	`_SIOR
 ('P',16, )

	)

598 
	#SNDCTL_DSP_SETTRIGGER
 
	`_SIOW
 ('P',16, )

	)

599 
	#PCM_ENABLE_INPUT
 0x00000001

	)

600 
	#PCM_ENABLE_OUTPUT
 0x00000002

	)

602 
	scou¡_öfo
 {

603 
	mbyãs
;

604 
	mblocks
;

605 
	m±r
;

606 } 
	tcou¡_öfo
;

608 
	#SNDCTL_DSP_GETIPTR
 
	`_SIOR
 ('P',17, 
cou¡_öfo
)

	)

609 
	#SNDCTL_DSP_GETOPTR
 
	`_SIOR
 ('P',18, 
cou¡_öfo
)

	)

611 
	sbuffmem_desc
 {

612 *
	mbuf„r
;

613 
	msize
;

614 } 
	tbuffmem_desc
;

615 
	#SNDCTL_DSP_MAPINBUF
 
	`_SIOR
 ('P', 19, 
buffmem_desc
)

	)

616 
	#SNDCTL_DSP_MAPOUTBUF
 
	`_SIOR
 ('P', 20, 
buffmem_desc
)

	)

617 
	#SNDCTL_DSP_SETSYNCRO
 
	`_SIO
 ('P', 21)

	)

618 
	#SNDCTL_DSP_SETDUPLEX
 
	`_SIO
 ('P', 22)

	)

619 
	#SNDCTL_DSP_GETODELAY
 
	`_SIOR
 ('P', 23, )

	)

621 
	#SNDCTL_DSP_GETCHANNELMASK
 
	`_SIOWR
('P', 64, )

	)

622 
	#SNDCTL_DSP_BIND_CHANNEL
 
	`_SIOWR
('P', 65, )

	)

623 
	#DSP_BIND_QUERY
 0x00000000

	)

624 
	#DSP_BIND_FRONT
 0x00000001

	)

625 
	#DSP_BIND_SURR
 0x00000002

	)

626 
	#DSP_BIND_CENTER_LFE
 0x00000004

	)

627 
	#DSP_BIND_HANDSET
 0x00000008

	)

628 
	#DSP_BIND_MIC
 0x00000010

	)

629 
	#DSP_BIND_MODEM1
 0x00000020

	)

630 
	#DSP_BIND_MODEM2
 0x00000040

	)

631 
	#DSP_BIND_I2S
 0x00000080

	)

632 
	#DSP_BIND_SPDIF
 0x00000100

	)

634 
	#SNDCTL_DSP_SETSPDIF
 
	`_SIOW
 ('P', 66, )

	)

635 
	#SNDCTL_DSP_GETSPDIF
 
	`_SIOR
 ('P', 67, )

	)

636 
	#SPDIF_PRO
 0x0001

	)

637 
	#SPDIF_N_AUD
 0x0002

	)

638 
	#SPDIF_COPY
 0x0004

	)

639 
	#SPDIF_PRE
 0x0008

	)

640 
	#SPDIF_CC
 0x07f0

	)

641 
	#SPDIF_L
 0x0800

	)

642 
	#SPDIF_DRS
 0x4000

	)

643 
	#SPDIF_V
 0x8000

	)

656 
	#SNDCTL_DSP_PROFILE
 
	`_SIOW
 ('P', 23, )

	)

657 
	#APF_NORMAL
 0

	)

658 
	#APF_NETWORK
 1

	)

659 
	#APF_CPUINTENS
 2

	)

661 
	#SOUND_PCM_READ_RATE
 
	`_SIOR
 ('P', 2, )

	)

662 
	#SOUND_PCM_READ_CHANNELS
 
	`_SIOR
 ('P', 6, )

	)

663 
	#SOUND_PCM_READ_BITS
 
	`_SIOR
 ('P', 5, )

	)

664 
	#SOUND_PCM_READ_FILTER
 
	`_SIOR
 ('P', 7, )

	)

667 
	#SOUND_PCM_WRITE_BITS
 
SNDCTL_DSP_SETFMT


	)

668 
	#SOUND_PCM_WRITE_RATE
 
SNDCTL_DSP_SPEED


	)

669 
	#SOUND_PCM_POST
 
SNDCTL_DSP_POST


	)

670 
	#SOUND_PCM_RESET
 
SNDCTL_DSP_RESET


	)

671 
	#SOUND_PCM_SYNC
 
SNDCTL_DSP_SYNC


	)

672 
	#SOUND_PCM_SUBDIVIDE
 
SNDCTL_DSP_SUBDIVIDE


	)

673 
	#SOUND_PCM_SETFRAGMENT
 
SNDCTL_DSP_SETFRAGMENT


	)

674 
	#SOUND_PCM_GETFMTS
 
SNDCTL_DSP_GETFMTS


	)

675 
	#SOUND_PCM_SETFMT
 
SNDCTL_DSP_SETFMT


	)

676 
	#SOUND_PCM_GETOSPACE
 
SNDCTL_DSP_GETOSPACE


	)

677 
	#SOUND_PCM_GETISPACE
 
SNDCTL_DSP_GETISPACE


	)

678 
	#SOUND_PCM_NONBLOCK
 
SNDCTL_DSP_NONBLOCK


	)

679 
	#SOUND_PCM_GETCAPS
 
SNDCTL_DSP_GETCAPS


	)

680 
	#SOUND_PCM_GETTRIGGER
 
SNDCTL_DSP_GETTRIGGER


	)

681 
	#SOUND_PCM_SETTRIGGER
 
SNDCTL_DSP_SETTRIGGER


	)

682 
	#SOUND_PCM_SETSYNCRO
 
SNDCTL_DSP_SETSYNCRO


	)

683 
	#SOUND_PCM_GETIPTR
 
SNDCTL_DSP_GETIPTR


	)

684 
	#SOUND_PCM_GETOPTR
 
SNDCTL_DSP_GETOPTR


	)

685 
	#SOUND_PCM_MAPINBUF
 
SNDCTL_DSP_MAPINBUF


	)

686 
	#SOUND_PCM_MAPOUTBUF
 
SNDCTL_DSP_MAPOUTBUF


	)

693 
	sc›r_buf„r
 {

694 
	mcomm™d
;

695 
	mÊags
;

696 
	#CPF_NONE
 0x0000

	)

697 
	#CPF_FIRST
 0x0001

	)

698 
	#CPF_LAST
 0x0002

	)

699 
	mÀn
;

700 
	moffs
;

702 
	md©a
[4000];

703 } 
	tc›r_buf„r
;

705 
	sc›r_debug_buf
 {

706 
	mcomm™d
;

707 
	m∑rm1
;

708 
	m∑rm2
;

709 
	mÊags
;

710 
	mÀn
;

711 } 
	tc›r_debug_buf
;

713 
	sc›r_msg
 {

714 
	mÀn
;

715 
	md©a
[4000];

716 } 
	tc›r_msg
;

718 
	#SNDCTL_COPR_RESET
 
	`_SIO
 ('C', 0)

	)

719 
	#SNDCTL_COPR_LOAD
 
	`_SIOWR
('C', 1, 
c›r_buf„r
)

	)

720 
	#SNDCTL_COPR_RDATA
 
	`_SIOWR
('C', 2, 
c›r_debug_buf
)

	)

721 
	#SNDCTL_COPR_RCODE
 
	`_SIOWR
('C', 3, 
c›r_debug_buf
)

	)

722 
	#SNDCTL_COPR_WDATA
 
	`_SIOW
 ('C', 4, 
c›r_debug_buf
)

	)

723 
	#SNDCTL_COPR_WCODE
 
	`_SIOW
 ('C', 5, 
c›r_debug_buf
)

	)

724 
	#SNDCTL_COPR_RUN
 
	`_SIOWR
('C', 6, 
c›r_debug_buf
)

	)

725 
	#SNDCTL_COPR_HALT
 
	`_SIOWR
('C', 7, 
c›r_debug_buf
)

	)

726 
	#SNDCTL_COPR_SENDMSG
 
	`_SIOWR
('C', 8, 
c›r_msg
)

	)

727 
	#SNDCTL_COPR_RCVMSG
 
	`_SIOR
 ('C', 9, 
c›r_msg
)

	)

742 
	#SOUND_MIXER_NRDEVICES
 25

	)

743 
	#SOUND_MIXER_VOLUME
 0

	)

744 
	#SOUND_MIXER_BASS
 1

	)

745 
	#SOUND_MIXER_TREBLE
 2

	)

746 
	#SOUND_MIXER_SYNTH
 3

	)

747 
	#SOUND_MIXER_PCM
 4

	)

748 
	#SOUND_MIXER_SPEAKER
 5

	)

749 
	#SOUND_MIXER_LINE
 6

	)

750 
	#SOUND_MIXER_MIC
 7

	)

751 
	#SOUND_MIXER_CD
 8

	)

752 
	#SOUND_MIXER_IMIX
 9

	)

753 
	#SOUND_MIXER_ALTPCM
 10

	)

754 
	#SOUND_MIXER_RECLEV
 11

	)

755 
	#SOUND_MIXER_IGAIN
 12

	)

756 
	#SOUND_MIXER_OGAIN
 13

	)

763 
	#SOUND_MIXER_LINE1
 14

	)

764 
	#SOUND_MIXER_LINE2
 15

	)

765 
	#SOUND_MIXER_LINE3
 16

	)

766 
	#SOUND_MIXER_DIGITAL1
 17

	)

767 
	#SOUND_MIXER_DIGITAL2
 18

	)

768 
	#SOUND_MIXER_DIGITAL3
 19

	)

769 
	#SOUND_MIXER_PHONEIN
 20

	)

770 
	#SOUND_MIXER_PHONEOUT
 21

	)

771 
	#SOUND_MIXER_VIDEO
 22

	)

772 
	#SOUND_MIXER_RADIO
 23

	)

773 
	#SOUND_MIXER_MONITOR
 24

	)

777 
	#SOUND_ONOFF_MIN
 28

	)

778 
	#SOUND_ONOFF_MAX
 30

	)

781 
	#SOUND_MIXER_NONE
 31

	)

787 
	#SOUND_MIXER_ENHANCE
 
SOUND_MIXER_NONE


	)

788 
	#SOUND_MIXER_MUTE
 
SOUND_MIXER_NONE


	)

789 
	#SOUND_MIXER_LOUD
 
SOUND_MIXER_NONE


	)

792 
	#SOUND_DEVICE_LABELS
 {"Vol ", "Bass ", "Trebl", "Synth", "Pcm ", "Spkr ", "Line ", \

795 "Ph⁄eIn", "Ph⁄eOut", "Video", "Radio", "M⁄ô‹"}

	)

797 
	#SOUND_DEVICE_NAMES
 {"vol", "bass", "treble", "synth", "pcm", "speaker", "line", \

800 "phö", "phout", "video", "ødio", "m⁄ô‹"}

	)

804 
	#SOUND_MIXER_RECSRC
 0xf‡

	)

805 
	#SOUND_MIXER_DEVMASK
 0x„

	)

806 
	#SOUND_MIXER_RECMASK
 0xfd

	)

807 
	#SOUND_MIXER_CAPS
 0xfc

	)

808 
	#SOUND_CAP_EXCL_INPUT
 0x00000001

	)

809 
	#SOUND_MIXER_STEREODEVS
 0xfb

	)

810 
	#SOUND_MIXER_OUTSRC
 0xÁ

	)

811 
	#SOUND_MIXER_OUTMASK
 0xf9

	)

815 
	#SOUND_MASK_VOLUME
 (1 << 
SOUND_MIXER_VOLUME
)

	)

816 
	#SOUND_MASK_BASS
 (1 << 
SOUND_MIXER_BASS
)

	)

817 
	#SOUND_MASK_TREBLE
 (1 << 
SOUND_MIXER_TREBLE
)

	)

818 
	#SOUND_MASK_SYNTH
 (1 << 
SOUND_MIXER_SYNTH
)

	)

819 
	#SOUND_MASK_PCM
 (1 << 
SOUND_MIXER_PCM
)

	)

820 
	#SOUND_MASK_SPEAKER
 (1 << 
SOUND_MIXER_SPEAKER
)

	)

821 
	#SOUND_MASK_LINE
 (1 << 
SOUND_MIXER_LINE
)

	)

822 
	#SOUND_MASK_MIC
 (1 << 
SOUND_MIXER_MIC
)

	)

823 
	#SOUND_MASK_CD
 (1 << 
SOUND_MIXER_CD
)

	)

824 
	#SOUND_MASK_IMIX
 (1 << 
SOUND_MIXER_IMIX
)

	)

825 
	#SOUND_MASK_ALTPCM
 (1 << 
SOUND_MIXER_ALTPCM
)

	)

826 
	#SOUND_MASK_RECLEV
 (1 << 
SOUND_MIXER_RECLEV
)

	)

827 
	#SOUND_MASK_IGAIN
 (1 << 
SOUND_MIXER_IGAIN
)

	)

828 
	#SOUND_MASK_OGAIN
 (1 << 
SOUND_MIXER_OGAIN
)

	)

829 
	#SOUND_MASK_LINE1
 (1 << 
SOUND_MIXER_LINE1
)

	)

830 
	#SOUND_MASK_LINE2
 (1 << 
SOUND_MIXER_LINE2
)

	)

831 
	#SOUND_MASK_LINE3
 (1 << 
SOUND_MIXER_LINE3
)

	)

832 
	#SOUND_MASK_DIGITAL1
 (1 << 
SOUND_MIXER_DIGITAL1
)

	)

833 
	#SOUND_MASK_DIGITAL2
 (1 << 
SOUND_MIXER_DIGITAL2
)

	)

834 
	#SOUND_MASK_DIGITAL3
 (1 << 
SOUND_MIXER_DIGITAL3
)

	)

835 
	#SOUND_MASK_PHONEIN
 (1 << 
SOUND_MIXER_PHONEIN
)

	)

836 
	#SOUND_MASK_PHONEOUT
 (1 << 
SOUND_MIXER_PHONEOUT
)

	)

837 
	#SOUND_MASK_RADIO
 (1 << 
SOUND_MIXER_RADIO
)

	)

838 
	#SOUND_MASK_VIDEO
 (1 << 
SOUND_MIXER_VIDEO
)

	)

839 
	#SOUND_MASK_MONITOR
 (1 << 
SOUND_MIXER_MONITOR
)

	)

842 
	#SOUND_MASK_MUTE
 (1 << 
SOUND_MIXER_MUTE
)

	)

843 
	#SOUND_MASK_ENHANCE
 (1 << 
SOUND_MIXER_ENHANCE
)

	)

844 
	#SOUND_MASK_LOUD
 (1 << 
SOUND_MIXER_LOUD
)

	)

846 
	#MIXER_READ
(
dev
Ë
	`_SIOR
('M', dev, )

	)

847 
	#SOUND_MIXER_READ_VOLUME
 
	`MIXER_READ
(
SOUND_MIXER_VOLUME
)

	)

848 
	#SOUND_MIXER_READ_BASS
 
	`MIXER_READ
(
SOUND_MIXER_BASS
)

	)

849 
	#SOUND_MIXER_READ_TREBLE
 
	`MIXER_READ
(
SOUND_MIXER_TREBLE
)

	)

850 
	#SOUND_MIXER_READ_SYNTH
 
	`MIXER_READ
(
SOUND_MIXER_SYNTH
)

	)

851 
	#SOUND_MIXER_READ_PCM
 
	`MIXER_READ
(
SOUND_MIXER_PCM
)

	)

852 
	#SOUND_MIXER_READ_SPEAKER
 
	`MIXER_READ
(
SOUND_MIXER_SPEAKER
)

	)

853 
	#SOUND_MIXER_READ_LINE
 
	`MIXER_READ
(
SOUND_MIXER_LINE
)

	)

854 
	#SOUND_MIXER_READ_MIC
 
	`MIXER_READ
(
SOUND_MIXER_MIC
)

	)

855 
	#SOUND_MIXER_READ_CD
 
	`MIXER_READ
(
SOUND_MIXER_CD
)

	)

856 
	#SOUND_MIXER_READ_IMIX
 
	`MIXER_READ
(
SOUND_MIXER_IMIX
)

	)

857 
	#SOUND_MIXER_READ_ALTPCM
 
	`MIXER_READ
(
SOUND_MIXER_ALTPCM
)

	)

858 
	#SOUND_MIXER_READ_RECLEV
 
	`MIXER_READ
(
SOUND_MIXER_RECLEV
)

	)

859 
	#SOUND_MIXER_READ_IGAIN
 
	`MIXER_READ
(
SOUND_MIXER_IGAIN
)

	)

860 
	#SOUND_MIXER_READ_OGAIN
 
	`MIXER_READ
(
SOUND_MIXER_OGAIN
)

	)

861 
	#SOUND_MIXER_READ_LINE1
 
	`MIXER_READ
(
SOUND_MIXER_LINE1
)

	)

862 
	#SOUND_MIXER_READ_LINE2
 
	`MIXER_READ
(
SOUND_MIXER_LINE2
)

	)

863 
	#SOUND_MIXER_READ_LINE3
 
	`MIXER_READ
(
SOUND_MIXER_LINE3
)

	)

866 
	#SOUND_MIXER_READ_MUTE
 
	`MIXER_READ
(
SOUND_MIXER_MUTE
)

	)

867 
	#SOUND_MIXER_READ_ENHANCE
 
	`MIXER_READ
(
SOUND_MIXER_ENHANCE
)

	)

868 
	#SOUND_MIXER_READ_LOUD
 
	`MIXER_READ
(
SOUND_MIXER_LOUD
)

	)

870 
	#SOUND_MIXER_READ_RECSRC
 
	`MIXER_READ
(
SOUND_MIXER_RECSRC
)

	)

871 
	#SOUND_MIXER_READ_DEVMASK
 
	`MIXER_READ
(
SOUND_MIXER_DEVMASK
)

	)

872 
	#SOUND_MIXER_READ_RECMASK
 
	`MIXER_READ
(
SOUND_MIXER_RECMASK
)

	)

873 
	#SOUND_MIXER_READ_STEREODEVS
 
	`MIXER_READ
(
SOUND_MIXER_STEREODEVS
)

	)

874 
	#SOUND_MIXER_READ_CAPS
 
	`MIXER_READ
(
SOUND_MIXER_CAPS
)

	)

876 
	#MIXER_WRITE
(
dev
Ë
	`_SIOWR
('M', dev, )

	)

877 
	#SOUND_MIXER_WRITE_VOLUME
 
	`MIXER_WRITE
(
SOUND_MIXER_VOLUME
)

	)

878 
	#SOUND_MIXER_WRITE_BASS
 
	`MIXER_WRITE
(
SOUND_MIXER_BASS
)

	)

879 
	#SOUND_MIXER_WRITE_TREBLE
 
	`MIXER_WRITE
(
SOUND_MIXER_TREBLE
)

	)

880 
	#SOUND_MIXER_WRITE_SYNTH
 
	`MIXER_WRITE
(
SOUND_MIXER_SYNTH
)

	)

881 
	#SOUND_MIXER_WRITE_PCM
 
	`MIXER_WRITE
(
SOUND_MIXER_PCM
)

	)

882 
	#SOUND_MIXER_WRITE_SPEAKER
 
	`MIXER_WRITE
(
SOUND_MIXER_SPEAKER
)

	)

883 
	#SOUND_MIXER_WRITE_LINE
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE
)

	)

884 
	#SOUND_MIXER_WRITE_MIC
 
	`MIXER_WRITE
(
SOUND_MIXER_MIC
)

	)

885 
	#SOUND_MIXER_WRITE_CD
 
	`MIXER_WRITE
(
SOUND_MIXER_CD
)

	)

886 
	#SOUND_MIXER_WRITE_IMIX
 
	`MIXER_WRITE
(
SOUND_MIXER_IMIX
)

	)

887 
	#SOUND_MIXER_WRITE_ALTPCM
 
	`MIXER_WRITE
(
SOUND_MIXER_ALTPCM
)

	)

888 
	#SOUND_MIXER_WRITE_RECLEV
 
	`MIXER_WRITE
(
SOUND_MIXER_RECLEV
)

	)

889 
	#SOUND_MIXER_WRITE_IGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_IGAIN
)

	)

890 
	#SOUND_MIXER_WRITE_OGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_OGAIN
)

	)

891 
	#SOUND_MIXER_WRITE_LINE1
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE1
)

	)

892 
	#SOUND_MIXER_WRITE_LINE2
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE2
)

	)

893 
	#SOUND_MIXER_WRITE_LINE3
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE3
)

	)

896 
	#SOUND_MIXER_WRITE_MUTE
 
	`MIXER_WRITE
(
SOUND_MIXER_MUTE
)

	)

897 
	#SOUND_MIXER_WRITE_ENHANCE
 
	`MIXER_WRITE
(
SOUND_MIXER_ENHANCE
)

	)

898 
	#SOUND_MIXER_WRITE_LOUD
 
	`MIXER_WRITE
(
SOUND_MIXER_LOUD
)

	)

900 
	#SOUND_MIXER_WRITE_RECSRC
 
	`MIXER_WRITE
(
SOUND_MIXER_RECSRC
)

	)

902 
	smixî_öfo


904 
	mid
[16];

905 
	m«me
[32];

906 
	mmodify_cou¡î
;

907 
	mfûÀrs
[10];

908 } 
	tmixî_öfo
;

910 
	s_ﬁd_mixî_öfo


912 
	mid
[16];

913 
	m«me
[32];

914 } 
	t_ﬁd_mixî_öfo
;

916 
	#SOUND_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
mixî_öfo
)

	)

917 
	#SOUND_OLD_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
_ﬁd_mixî_öfo
)

	)

925 
	tmixî_ªc‹d
[128];

927 
	#SOUND_MIXER_ACCESS
 
	`_SIOWR
('M', 102, 
mixî_ªc‹d
)

	)

932 
	#SOUND_MIXER_AGC
 
	`_SIOWR
('M', 103, )

	)

933 
	#SOUND_MIXER_3DSE
 
	`_SIOWR
('M', 104, )

	)

939 
	#SOUND_MIXER_PRIVATE1
 
	`_SIOWR
('M', 111, )

	)

940 
	#SOUND_MIXER_PRIVATE2
 
	`_SIOWR
('M', 112, )

	)

941 
	#SOUND_MIXER_PRIVATE3
 
	`_SIOWR
('M', 113, )

	)

942 
	#SOUND_MIXER_PRIVATE4
 
	`_SIOWR
('M', 114, )

	)

943 
	#SOUND_MIXER_PRIVATE5
 
	`_SIOWR
('M', 115, )

	)

953 
	smixî_vﬁ_èbÀ
 {

954 
	mnum
;

955 
	m«me
[32];

956 
	mÀvñs
[32];

957 } 
	tmixî_vﬁ_èbÀ
;

959 
	#SOUND_MIXER_GETLEVELS
 
	`_SIOWR
('M', 116, 
mixî_vﬁ_èbÀ
)

	)

960 
	#SOUND_MIXER_SETLEVELS
 
	`_SIOWR
('M', 117, 
mixî_vﬁ_èbÀ
)

	)

968 
	#OSS_GETVERSION
 
	`_SIOR
 ('M', 118, )

	)

988 
	#EV_SEQ_LOCAL
 0x80

	)

989 
	#EV_TIMING
 0x81

	)

990 
	#EV_CHN_COMMON
 0x92

	)

991 
	#EV_CHN_VOICE
 0x93

	)

992 
	#EV_SYSEX
 0x94

	)

1002 
	#MIDI_NOTEOFF
 0x80

	)

1003 
	#MIDI_NOTEON
 0x90

	)

1004 
	#MIDI_KEY_PRESSURE
 0xA0

	)

1010 
	#MIDI_CTL_CHANGE
 0xB0

	)

1011 
	#MIDI_PGM_CHANGE
 0xC0

	)

1012 
	#MIDI_CHN_PRESSURE
 0xD0

	)

1013 
	#MIDI_PITCH_BEND
 0xE0

	)

1015 
	#MIDI_SYSTEM_PREFIX
 0xF0

	)

1020 
	#TMR_WAIT_REL
 1

	)

1021 
	#TMR_WAIT_ABS
 2

	)

1022 
	#TMR_STOP
 3

	)

1023 
	#TMR_START
 4

	)

1024 
	#TMR_CONTINUE
 5

	)

1025 
	#TMR_TEMPO
 6

	)

1026 
	#TMR_ECHO
 8

	)

1027 
	#TMR_CLOCK
 9

	)

1028 
	#TMR_SPP
 10

	)

1029 
	#TMR_TIMESIG
 11

	)

1034 
	#LOCL_STARTAUDIO
 1

	)

1052 
	#SEQ_DECLAREBUF
(Ë
	`SEQ_USE_EXTBUF
()

	)

1054 
£qbuf_dump
();

1056 
	#SEQ_PM_DEFINES
 
__foo_b¨___


	)

1058 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
)

	)

1059 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
)

	)

1061 
	#_SEQ_EXTERN
 

	)

1062 
	#SEQ_USE_EXTBUF
() \

1063 
_SEQ_EXTERN
 
_£qbuf
[]; \

1064 
_SEQ_EXTERN
 
_£qbuÊí
; _SEQ_EXTERN 
_£qbuÂå


	)

1066 #i‚de‡
USE_SIMPLE_MACROS


1086 
	#SEQ_DEFINEBUF
(
Àn
Ë
_£qbuf
[Àn]; 
_£qbuÊí
 =Üí;
_£qbuÂå
 = 0

	)

1087 
	#_SEQ_NEEDBUF
(
Àn
Ëi‡((
_£qbuÂå
+÷í)Ë> 
_£qbuÊí
Ë
	`£qbuf_dump
()

	)

1088 
	#_SEQ_ADVBUF
(
Àn
Ë
_£qbuÂå
 +
	)
len

1089 
	#SEQ_DUMPBUF
 
£qbuf_dump


	)

1105 
	#_SEQ_NEEDBUF
(
Àn
Ë

	)

1108 
	#SEQ_VOLUME_MODE
(
dev
, 
mode
Ë{
	`_SEQ_NEEDBUF
(8);\

1109 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1110 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_VOLMODE
;\

1111 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1112 
_£qbuf
[
_£qbuÂå
+3] = (
mode
);\

1113 
_£qbuf
[
_£qbuÂå
+4] = 0;\

1114 
_£qbuf
[
_£qbuÂå
+5] = 0;\

1115 
_£qbuf
[
_£qbuÂå
+6] = 0;\

1116 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1117 
	`_SEQ_ADVBUF
(8);}

	)

1123 
	#_CHN_VOICE
(
dev
, 
evít
, 
chn
, 
nŸe
, 
∑rm
) \

1124 {
	`_SEQ_NEEDBUF
(8);\

1125 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_VOICE
;\

1126 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1127 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1128 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1129 
_£qbuf
[
_£qbuÂå
+4] = (
nŸe
);\

1130 
_£qbuf
[
_£qbuÂå
+5] = (
∑rm
);\

1131 
_£qbuf
[
_£qbuÂå
+6] = (0);\

1132 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1133 
	`_SEQ_ADVBUF
(8);}

	)

1135 
	#SEQ_START_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1136 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEON
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1138 
	#SEQ_STOP_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1139 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEOFF
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1141 
	#SEQ_KEY_PRESSURE
(
dev
, 
chn
, 
nŸe
, 
¥essuª
) \

1142 
	`_CHN_VOICE
(
dev
, 
MIDI_KEY_PRESSURE
, 
chn
, 
nŸe
, 
¥essuª
)

	)

1148 
	#_CHN_COMMON
(
dev
, 
evít
, 
chn
, 
p1
, 
p2
, 
w14
) \

1149 {
	`_SEQ_NEEDBUF
(8);\

1150 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_COMMON
;\

1151 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1152 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1153 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1154 
_£qbuf
[
_£qbuÂå
+4] = (
p1
);\

1155 
_£qbuf
[
_£qbuÂå
+5] = (
p2
);\

1156 *(*)&
_£qbuf
[
_£qbuÂå
+6] = (
w14
);\

1157 
	`_SEQ_ADVBUF
(8);}

	)

1173 
	#SEQ_SYSEX
(
dev
, 
buf
, 
Àn
) \

1174 {
ii
, 
Œ
=(
Àn
); \

1175 *
buÂ
=
buf
;\

1176 i‡(
Œ
>6)ll=6;\

1177 
	`_SEQ_NEEDBUF
(8);\

1178 
_£qbuf
[
_£qbuÂå
] = 
EV_SYSEX
;\

1179 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1180 
ii
=0;ii<
Œ
;ii++)\

1181 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 
buÂ
[ii];\

1182 
ii
=
Œ
;ii<6;ii++)\

1183 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 0xff;\

1184 
	`_SEQ_ADVBUF
(8);}

	)

1186 
	#SEQ_CHN_PRESSURE
(
dev
, 
chn
, 
¥essuª
) \

1187 
	`_CHN_COMMON
(
dev
, 
MIDI_CHN_PRESSURE
, 
chn
, 
¥essuª
, 0, 0)

	)

1189 
	#SEQ_SET_PATCH
 
SEQ_PGM_CHANGE


	)

1190 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1191 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0)

	)

1193 
	#SEQ_CONTROL
(
dev
, 
chn
, 
c⁄åﬁÀr
, 
vÆue
) \

1194 
	`_CHN_COMMON
(
dev
, 
MIDI_CTL_CHANGE
, 
chn
, 
c⁄åﬁÀr
, 0, 
vÆue
)

	)

1196 
	#SEQ_BENDER
(
dev
, 
chn
, 
vÆue
) \

1197 
	`_CHN_COMMON
(
dev
, 
MIDI_PITCH_BEND
, 
chn
, 0, 0, 
vÆue
)

	)

1200 
	#SEQ_V2_X_CONTROL
(
dev
, 
voi˚
, 
c⁄åﬁÀr
, 
vÆue
Ë{
	`_SEQ_NEEDBUF
(8);\

1201 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1202 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_CONTROLLER
;\

1203 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1204 
_£qbuf
[
_£qbuÂå
+3] = (
voi˚
);\

1205 
_£qbuf
[
_£qbuÂå
+4] = (
c⁄åﬁÀr
);\

1206 
_£qbuf
[
_£qbuÂå
+5] = ((
vÆue
)&0xff);\

1207 
_£qbuf
[
_£qbuÂå
+6] = ((
vÆue
>>8)&0xff);\

1208 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1209 
	`_SEQ_ADVBUF
(8);}

	)

1214 
	#SEQ_PITCHBEND
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER
, vÆue)

	)

1215 
	#SEQ_BENDER_RANGE
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER_RANGE
, vÆue)

	)

1216 
	#SEQ_EXPRESSION
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_EXPRESSION
, vÆue*128)

	)

1217 
	#SEQ_MAIN_VOLUME
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_MAIN_VOLUME
, (vÆue*16383)/100)

	)

1218 
	#SEQ_PANNING
(
dev
, 
voi˚
, 
pos
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_PAN
, (pos+128Ë/ 2)

	)

1224 
	#_TIMER_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1225 
_£qbuf
[
_£qbuÂå
+0] = 
EV_TIMING
; \

1226 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1227 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1228 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1229 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1230 
	`_SEQ_ADVBUF
(8);}

	)

1232 
	#SEQ_START_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_START
, 0)

	)

1233 
	#SEQ_STOP_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_STOP
, 0)

	)

1234 
	#SEQ_CONTINUE_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_CONTINUE
, 0)

	)

1235 
	#SEQ_WAIT_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_ABS
,Åicks)

	)

1236 
	#SEQ_DELTA_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_REL
,Åicks)

	)

1237 
	#SEQ_ECHO_BACK
(
key
Ë
	`_TIMER_EVENT
(
TMR_ECHO
, key)

	)

1238 
	#SEQ_SET_TEMPO
(
vÆue
Ë
	`_TIMER_EVENT
(
TMR_TEMPO
, vÆue)

	)

1239 
	#SEQ_SONGPOS
(
pos
Ë
	`_TIMER_EVENT
(
TMR_SPP
,Öos)

	)

1240 
	#SEQ_TIME_SIGNATURE
(
sig
Ë
	`_TIMER_EVENT
(
TMR_TIMESIG
, sig)

	)

1246 
	#_LOCAL_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1247 
_£qbuf
[
_£qbuÂå
+0] = 
EV_SEQ_LOCAL
; \

1248 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1249 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1250 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1251 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1252 
	`_SEQ_ADVBUF
(8);}

	)

1254 
	#SEQ_PLAYAUDIO
(
devmask
Ë
	`_LOCAL_EVENT
(
LOCL_STARTAUDIO
, devmask)

	)

1259 
	#SEQ_MIDIOUT
(
devi˚
, 
byã
Ë{
	`_SEQ_NEEDBUF
(4);\

1260 
_£qbuf
[
_£qbuÂå
] = 
SEQ_MIDIPUTC
;\

1261 
_£qbuf
[
_£qbuÂå
+1] = (
byã
);\

1262 
_£qbuf
[
_£qbuÂå
+2] = (
devi˚
);\

1263 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1264 
	`_SEQ_ADVBUF
(4);}

	)

1269 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1270 {i‡(
_£qbuÂå
Ë
	`SEQ_DUMPBUF
();\

1271 i‡(
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
)==-1) \

1272 
	`≥º‹
("Wrôê∑tch: /dev/£quí˚r");}

	)

1273 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1274 (
	`SEQ_DUMPBUF
(), 
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
))

	)

	@/usr/include/pulse/channelmap.h

1 #i‚de‡
fooch™√lm≠hfoo


2 
	#fooch™√lm≠hfoo


	)

24 
	~<pul£/ßm∂e.h
>

25 
	~<pul£/cde˛.h
>

26 
	~<pul£/gccma¸o.h
>

27 
	~<pul£/vîsi⁄.h
>

71 
PA_C_DECL_BEGIN


74 
	e∑_ch™√l_posôi⁄
 {

75 
	mPA_CHANNEL_POSITION_INVALID
 = -1,

76 
	mPA_CHANNEL_POSITION_MONO
 = 0,

78 
	mPA_CHANNEL_POSITION_FRONT_LEFT
,

79 
	mPA_CHANNEL_POSITION_FRONT_RIGHT
,

80 
	mPA_CHANNEL_POSITION_FRONT_CENTER
,

83 
	mPA_CHANNEL_POSITION_LEFT
 = 
PA_CHANNEL_POSITION_FRONT_LEFT
,

84 
	mPA_CHANNEL_POSITION_RIGHT
 = 
PA_CHANNEL_POSITION_FRONT_RIGHT
,

85 
	mPA_CHANNEL_POSITION_CENTER
 = 
PA_CHANNEL_POSITION_FRONT_CENTER
,

88 
	mPA_CHANNEL_POSITION_REAR_CENTER
,

89 
	mPA_CHANNEL_POSITION_REAR_LEFT
,

90 
	mPA_CHANNEL_POSITION_REAR_RIGHT
,

92 
	mPA_CHANNEL_POSITION_LFE
,

94 
	mPA_CHANNEL_POSITION_SUBWOOFER
 = 
PA_CHANNEL_POSITION_LFE
,

97 
	mPA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER
,

98 
	mPA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER
,

100 
	mPA_CHANNEL_POSITION_SIDE_LEFT
,

101 
	mPA_CHANNEL_POSITION_SIDE_RIGHT
,

103 
	mPA_CHANNEL_POSITION_AUX0
,

104 
	mPA_CHANNEL_POSITION_AUX1
,

105 
	mPA_CHANNEL_POSITION_AUX2
,

106 
	mPA_CHANNEL_POSITION_AUX3
,

107 
	mPA_CHANNEL_POSITION_AUX4
,

108 
	mPA_CHANNEL_POSITION_AUX5
,

109 
	mPA_CHANNEL_POSITION_AUX6
,

110 
	mPA_CHANNEL_POSITION_AUX7
,

111 
	mPA_CHANNEL_POSITION_AUX8
,

112 
	mPA_CHANNEL_POSITION_AUX9
,

113 
	mPA_CHANNEL_POSITION_AUX10
,

114 
	mPA_CHANNEL_POSITION_AUX11
,

115 
	mPA_CHANNEL_POSITION_AUX12
,

116 
	mPA_CHANNEL_POSITION_AUX13
,

117 
	mPA_CHANNEL_POSITION_AUX14
,

118 
	mPA_CHANNEL_POSITION_AUX15
,

119 
	mPA_CHANNEL_POSITION_AUX16
,

120 
	mPA_CHANNEL_POSITION_AUX17
,

121 
	mPA_CHANNEL_POSITION_AUX18
,

122 
	mPA_CHANNEL_POSITION_AUX19
,

123 
	mPA_CHANNEL_POSITION_AUX20
,

124 
	mPA_CHANNEL_POSITION_AUX21
,

125 
	mPA_CHANNEL_POSITION_AUX22
,

126 
	mPA_CHANNEL_POSITION_AUX23
,

127 
	mPA_CHANNEL_POSITION_AUX24
,

128 
	mPA_CHANNEL_POSITION_AUX25
,

129 
	mPA_CHANNEL_POSITION_AUX26
,

130 
	mPA_CHANNEL_POSITION_AUX27
,

131 
	mPA_CHANNEL_POSITION_AUX28
,

132 
	mPA_CHANNEL_POSITION_AUX29
,

133 
	mPA_CHANNEL_POSITION_AUX30
,

134 
	mPA_CHANNEL_POSITION_AUX31
,

136 
	mPA_CHANNEL_POSITION_TOP_CENTER
,

138 
	mPA_CHANNEL_POSITION_TOP_FRONT_LEFT
,

139 
	mPA_CHANNEL_POSITION_TOP_FRONT_RIGHT
,

140 
	mPA_CHANNEL_POSITION_TOP_FRONT_CENTER
,

142 
	mPA_CHANNEL_POSITION_TOP_REAR_LEFT
,

143 
	mPA_CHANNEL_POSITION_TOP_REAR_RIGHT
,

144 
	mPA_CHANNEL_POSITION_TOP_REAR_CENTER
,

146 
	mPA_CHANNEL_POSITION_MAX


147 } 
	t∑_ch™√l_posôi⁄_t
;

150 
	#PA_CHANNEL_POSITION_INVALID
 
PA_CHANNEL_POSITION_INVALID


	)

151 
	#PA_CHANNEL_POSITION_MONO
 
PA_CHANNEL_POSITION_MONO


	)

152 
	#PA_CHANNEL_POSITION_LEFT
 
PA_CHANNEL_POSITION_LEFT


	)

153 
	#PA_CHANNEL_POSITION_RIGHT
 
PA_CHANNEL_POSITION_RIGHT


	)

154 
	#PA_CHANNEL_POSITION_CENTER
 
PA_CHANNEL_POSITION_CENTER


	)

155 
	#PA_CHANNEL_POSITION_FRONT_LEFT
 
PA_CHANNEL_POSITION_FRONT_LEFT


	)

156 
	#PA_CHANNEL_POSITION_FRONT_RIGHT
 
PA_CHANNEL_POSITION_FRONT_RIGHT


	)

157 
	#PA_CHANNEL_POSITION_FRONT_CENTER
 
PA_CHANNEL_POSITION_FRONT_CENTER


	)

158 
	#PA_CHANNEL_POSITION_REAR_CENTER
 
PA_CHANNEL_POSITION_REAR_CENTER


	)

159 
	#PA_CHANNEL_POSITION_REAR_LEFT
 
PA_CHANNEL_POSITION_REAR_LEFT


	)

160 
	#PA_CHANNEL_POSITION_REAR_RIGHT
 
PA_CHANNEL_POSITION_REAR_RIGHT


	)

161 
	#PA_CHANNEL_POSITION_LFE
 
PA_CHANNEL_POSITION_LFE


	)

162 
	#PA_CHANNEL_POSITION_SUBWOOFER
 
PA_CHANNEL_POSITION_SUBWOOFER


	)

163 
	#PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER
 
PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER


	)

164 
	#PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER
 
PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER


	)

165 
	#PA_CHANNEL_POSITION_SIDE_LEFT
 
PA_CHANNEL_POSITION_SIDE_LEFT


	)

166 
	#PA_CHANNEL_POSITION_SIDE_RIGHT
 
PA_CHANNEL_POSITION_SIDE_RIGHT


	)

167 
	#PA_CHANNEL_POSITION_AUX0
 
PA_CHANNEL_POSITION_AUX0


	)

168 
	#PA_CHANNEL_POSITION_AUX1
 
PA_CHANNEL_POSITION_AUX1


	)

169 
	#PA_CHANNEL_POSITION_AUX2
 
PA_CHANNEL_POSITION_AUX2


	)

170 
	#PA_CHANNEL_POSITION_AUX3
 
PA_CHANNEL_POSITION_AUX3


	)

171 
	#PA_CHANNEL_POSITION_AUX4
 
PA_CHANNEL_POSITION_AUX4


	)

172 
	#PA_CHANNEL_POSITION_AUX5
 
PA_CHANNEL_POSITION_AUX5


	)

173 
	#PA_CHANNEL_POSITION_AUX6
 
PA_CHANNEL_POSITION_AUX6


	)

174 
	#PA_CHANNEL_POSITION_AUX7
 
PA_CHANNEL_POSITION_AUX7


	)

175 
	#PA_CHANNEL_POSITION_AUX8
 
PA_CHANNEL_POSITION_AUX8


	)

176 
	#PA_CHANNEL_POSITION_AUX9
 
PA_CHANNEL_POSITION_AUX9


	)

177 
	#PA_CHANNEL_POSITION_AUX10
 
PA_CHANNEL_POSITION_AUX10


	)

178 
	#PA_CHANNEL_POSITION_AUX11
 
PA_CHANNEL_POSITION_AUX11


	)

179 
	#PA_CHANNEL_POSITION_AUX12
 
PA_CHANNEL_POSITION_AUX12


	)

180 
	#PA_CHANNEL_POSITION_AUX13
 
PA_CHANNEL_POSITION_AUX13


	)

181 
	#PA_CHANNEL_POSITION_AUX14
 
PA_CHANNEL_POSITION_AUX14


	)

182 
	#PA_CHANNEL_POSITION_AUX15
 
PA_CHANNEL_POSITION_AUX15


	)

183 
	#PA_CHANNEL_POSITION_AUX16
 
PA_CHANNEL_POSITION_AUX16


	)

184 
	#PA_CHANNEL_POSITION_AUX17
 
PA_CHANNEL_POSITION_AUX17


	)

185 
	#PA_CHANNEL_POSITION_AUX18
 
PA_CHANNEL_POSITION_AUX18


	)

186 
	#PA_CHANNEL_POSITION_AUX19
 
PA_CHANNEL_POSITION_AUX19


	)

187 
	#PA_CHANNEL_POSITION_AUX20
 
PA_CHANNEL_POSITION_AUX20


	)

188 
	#PA_CHANNEL_POSITION_AUX21
 
PA_CHANNEL_POSITION_AUX21


	)

189 
	#PA_CHANNEL_POSITION_AUX22
 
PA_CHANNEL_POSITION_AUX22


	)

190 
	#PA_CHANNEL_POSITION_AUX23
 
PA_CHANNEL_POSITION_AUX23


	)

191 
	#PA_CHANNEL_POSITION_AUX24
 
PA_CHANNEL_POSITION_AUX24


	)

192 
	#PA_CHANNEL_POSITION_AUX25
 
PA_CHANNEL_POSITION_AUX25


	)

193 
	#PA_CHANNEL_POSITION_AUX26
 
PA_CHANNEL_POSITION_AUX26


	)

194 
	#PA_CHANNEL_POSITION_AUX27
 
PA_CHANNEL_POSITION_AUX27


	)

195 
	#PA_CHANNEL_POSITION_AUX28
 
PA_CHANNEL_POSITION_AUX28


	)

196 
	#PA_CHANNEL_POSITION_AUX29
 
PA_CHANNEL_POSITION_AUX29


	)

197 
	#PA_CHANNEL_POSITION_AUX30
 
PA_CHANNEL_POSITION_AUX30


	)

198 
	#PA_CHANNEL_POSITION_AUX31
 
PA_CHANNEL_POSITION_AUX31


	)

199 
	#PA_CHANNEL_POSITION_TOP_CENTER
 
PA_CHANNEL_POSITION_TOP_CENTER


	)

200 
	#PA_CHANNEL_POSITION_TOP_FRONT_LEFT
 
PA_CHANNEL_POSITION_TOP_FRONT_LEFT


	)

201 
	#PA_CHANNEL_POSITION_TOP_FRONT_RIGHT
 
PA_CHANNEL_POSITION_TOP_FRONT_RIGHT


	)

202 
	#PA_CHANNEL_POSITION_TOP_FRONT_CENTER
 
PA_CHANNEL_POSITION_TOP_FRONT_CENTER


	)

203 
	#PA_CHANNEL_POSITION_TOP_REAR_LEFT
 
PA_CHANNEL_POSITION_TOP_REAR_LEFT


	)

204 
	#PA_CHANNEL_POSITION_TOP_REAR_RIGHT
 
PA_CHANNEL_POSITION_TOP_REAR_RIGHT


	)

205 
	#PA_CHANNEL_POSITION_TOP_REAR_CENTER
 
PA_CHANNEL_POSITION_TOP_REAR_CENTER


	)

206 
	#PA_CHANNEL_POSITION_MAX
 
PA_CHANNEL_POSITION_MAX


	)

210 
uöt64_t
 
	t∑_ch™√l_posôi⁄_mask_t
;

213 
	#PA_CHANNEL_POSITION_MASK
(
f
Ë((
∑_ch™√l_posôi⁄_mask_t
Ë(1ULL << (f)))

	)

216 
	e∑_ch™√l_m≠_def
 {

217 
	mPA_CHANNEL_MAP_AIFF
,

221 
	mPA_CHANNEL_MAP_ALSA
,

227 
	mPA_CHANNEL_MAP_AUX
,

230 
	mPA_CHANNEL_MAP_WAVEEX
,

235 
	mPA_CHANNEL_MAP_OSS
,

243 
	mPA_CHANNEL_MAP_DEF_MAX
,

245 
	mPA_CHANNEL_MAP_DEFAULT
 = 
PA_CHANNEL_MAP_AIFF


247 } 
	t∑_ch™√l_m≠_def_t
;

250 
	#PA_CHANNEL_MAP_AIFF
 
PA_CHANNEL_MAP_AIFF


	)

251 
	#PA_CHANNEL_MAP_ALSA
 
PA_CHANNEL_MAP_ALSA


	)

252 
	#PA_CHANNEL_MAP_AUX
 
PA_CHANNEL_MAP_AUX


	)

253 
	#PA_CHANNEL_MAP_WAVEEX
 
PA_CHANNEL_MAP_WAVEEX


	)

254 
	#PA_CHANNEL_MAP_OSS
 
PA_CHANNEL_MAP_OSS


	)

255 
	#PA_CHANNEL_MAP_DEF_MAX
 
PA_CHANNEL_MAP_DEF_MAX


	)

256 
	#PA_CHANNEL_MAP_DEFAULT
 
PA_CHANNEL_MAP_DEFAULT


	)

262 
	s∑_ch™√l_m≠
 {

263 
uöt8_t
 
	mch™√ls
;

266 
∑_ch™√l_posôi⁄_t
 
	mm≠
[
PA_CHANNELS_MAX
];

268 } 
	t∑_ch™√l_m≠
;

273 
∑_ch™√l_m≠
* 
∑_ch™√l_m≠_öô
’a_ch™√l_m≠ *
m
);

276 
∑_ch™√l_m≠
* 
∑_ch™√l_m≠_öô_m⁄o
’a_ch™√l_m≠ *
m
);

279 
∑_ch™√l_m≠
* 
∑_ch™√l_m≠_öô_°îeo
’a_ch™√l_m≠ *
m
);

285 
∑_ch™√l_m≠
* 
∑_ch™√l_m≠_öô_auto
’a_ch™√l_m≠ *
m
, 
ch™√ls
, 
∑_ch™√l_m≠_def_t
 
def
);

291 
∑_ch™√l_m≠
* 
∑_ch™√l_m≠_öô_exãnd
’a_ch™√l_m≠ *
m
, 
ch™√ls
, 
∑_ch™√l_m≠_def_t
 
def
);

294 c⁄° * 
	$∑_ch™√l_posôi⁄_to_°rög
(
∑_ch™√l_posôi⁄_t
 
pos
Ë
PA_GCC_PURE
;

297 
∑_ch™√l_posôi⁄_t
 
	$∑_ch™√l_posôi⁄_‰om_°rög
(c⁄° *
s
Ë
PA_GCC_PURE
;

300 c⁄° * 
	`∑_ch™√l_posôi⁄_to_¥ëty_°rög
(
∑_ch™√l_posôi⁄_t
 
pos
);

307 
	#PA_CHANNEL_MAP_SNPRINT_MAX
 336

	)

310 * 
	`∑_ch™√l_m≠_¢¥öt
(*
s
, 
size_t
 
l
, c⁄° 
∑_ch™√l_m≠
 *
m≠
);

316 
∑_ch™√l_m≠
 *
	`∑_ch™√l_m≠_∑r£
’a_ch™√l_m≠ *
m≠
, c⁄° *
s
);

319 
	$∑_ch™√l_m≠_equÆ
(c⁄° 
∑_ch™√l_m≠
 *
a
, c⁄°Öa_ch™√l_m≠ *
b
Ë
PA_GCC_PURE
;

322 
	$∑_ch™√l_m≠_vÆid
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

326 
	$∑_ch™√l_m≠_com∑tibÀ
(c⁄° 
∑_ch™√l_m≠
 *
m≠
, c⁄° 
∑_ßm∂e_•ec
 *
ss
Ë
PA_GCC_PURE
;

329 
	$∑_ch™√l_m≠_su≥r£t
(c⁄° 
∑_ch™√l_m≠
 *
a
, c⁄°Öa_ch™√l_m≠ *
b
Ë
PA_GCC_PURE
;

334 
	$∑_ch™√l_m≠_ˇn_bÆ™˚
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

339 
	$∑_ch™√l_m≠_ˇn_Áde
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

344 
	$∑_ch™√l_m≠_ˇn_l„_bÆ™˚
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

350 c⁄° * 
	$∑_ch™√l_m≠_to_«me
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

355 c⁄° * 
	$∑_ch™√l_m≠_to_¥ëty_«me
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

359 
	$∑_ch™√l_m≠_has_posôi⁄
(c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
∑_ch™√l_posôi⁄_t
 
p
Ë
PA_GCC_PURE
;

362 
∑_ch™√l_posôi⁄_mask_t
 
	$∑_ch™√l_m≠_mask
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

364 
PA_C_DECL_END


	@/usr/include/pulse/context.h

1 #i‚de‡
fooc⁄ãxthfoo


2 
	#fooc⁄ãxthfoo


	)

24 
	~<pul£/ßm∂e.h
>

25 
	~<pul£/def.h
>

26 
	~<pul£/maölo›-≠i.h
>

27 
	~<pul£/cde˛.h
>

28 
	~<pul£/›î©i⁄.h
>

29 
	~<pul£/¥›li°.h
>

30 
	~<pul£/vîsi⁄.h
>

151 
PA_C_DECL_BEGIN


154 
∑_c⁄ãxt
 
	t∑_c⁄ãxt
;

157 (*
	t∑_c⁄ãxt_nŸify_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, *
	tu£rd©a
);

160 (*
	t∑_c⁄ãxt_suc˚ss_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, 
	tsuc˚ss
, *
	tu£rd©a
);

167 (*
	t∑_c⁄ãxt_evít_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, c⁄° *
	t«me
, 
	t∑_¥›li°
 *
	tp
, *
	tu£rd©a
);

172 
∑_c⁄ãxt
 *
	`∑_c⁄ãxt_√w
(
∑_maölo›_≠i
 *
maölo›
, c⁄° *
«me
);

177 
∑_c⁄ãxt
 *
	`∑_c⁄ãxt_√w_wôh_¥›li°
(
∑_maölo›_≠i
 *
maölo›
, c⁄° *
«me
, 
∑_¥›li°
 *
¥›li°
);

180 
	`∑_c⁄ãxt_uƒef
(
∑_c⁄ãxt
 *
c
);

183 
∑_c⁄ãxt
* 
	`∑_c⁄ãxt_ªf
’a_c⁄ãxà*
c
);

186 
	`∑_c⁄ãxt_£t_°©e_ˇŒback
(
∑_c⁄ãxt
 *
c
, 
∑_c⁄ãxt_nŸify_cb_t
 
cb
, *
u£rd©a
);

190 
	`∑_c⁄ãxt_£t_evít_ˇŒback
(
∑_c⁄ãxt
 *
p
, 
∑_c⁄ãxt_evít_cb_t
 
cb
, *
u£rd©a
);

193 
	`∑_c⁄ãxt_î∫o
(
∑_c⁄ãxt
 *
c
);

196 
	`∑_c⁄ãxt_is_≥ndög
(
∑_c⁄ãxt
 *
c
);

199 
∑_c⁄ãxt_°©e_t
 
	`∑_c⁄ãxt_gë_°©e
(
∑_c⁄ãxt
 *
c
);

209 
	`∑_c⁄ãxt_c⁄√˘
(
∑_c⁄ãxt
 *
c
, c⁄° *
£rvî
, 
∑_c⁄ãxt_Êags_t
 
Êags
, c⁄° 
∑_•awn_≠i
 *
≠i
);

212 
	`∑_c⁄ãxt_disc⁄√˘
(
∑_c⁄ãxt
 *
c
);

215 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_døö
(
∑_c⁄ãxt
 *
c
, 
∑_c⁄ãxt_nŸify_cb_t
 
cb
, *
u£rd©a
);

220 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_exô_d´m⁄
(
∑_c⁄ãxt
 *
c
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

223 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_deÁu…_sök
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

226 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_deÁu…_sour˚
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

229 
	`∑_c⁄ãxt_is_loˇl
(
∑_c⁄ãxt
 *
c
);

232 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

235 c⁄° * 
	`∑_c⁄ãxt_gë_£rvî
(
∑_c⁄ãxt
 *
c
);

238 
uöt32_t
 
	`∑_c⁄ãxt_gë_¥Ÿocﬁ_vîsi⁄
(
∑_c⁄ãxt
 *
c
);

241 
uöt32_t
 
	`∑_c⁄ãxt_gë_£rvî_¥Ÿocﬁ_vîsi⁄
(
∑_c⁄ãxt
 *
c
);

248 
∑_›î©i⁄
 *
	`∑_c⁄ãxt_¥›li°_upd©e
(
∑_c⁄ãxt
 *
c
, 
∑_upd©e_mode_t
 
mode
, 
∑_¥›li°
 *
p
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

251 
∑_›î©i⁄
 *
	`∑_c⁄ãxt_¥›li°_ªmove
(
∑_c⁄ãxt
 *
c
, c⁄° *c⁄° 
keys
[], 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

256 
uöt32_t
 
	`∑_c⁄ãxt_gë_ödex
(
∑_c⁄ãxt
 *
s
);

260 
∑_time_evít
* 
	`∑_c⁄ãxt_πtime_√w
(
∑_c⁄ãxt
 *
c
, 
∑_u£c_t
 
u£c
, 
∑_time_evít_cb_t
 
cb
, *
u£rd©a
);

264 
	`∑_c⁄ãxt_πtime_ª°¨t
(
∑_c⁄ãxt
 *
c
, 
∑_time_evít
 *
e
, 
∑_u£c_t
 
u£c
);

279 
size_t
 
	`∑_c⁄ãxt_gë_tûe_size
(
∑_c⁄ãxt
 *
c
, c⁄° 
∑_ßm∂e_•ec
 *
ss
);

287 
	`∑_c⁄ãxt_lﬂd_cookõ_‰om_fûe
(
∑_c⁄ãxt
 *
c
, c⁄° *
cookõ_fûe_∑th
);

289 
PA_C_DECL_END


	@/usr/include/pulse/def.h

1 #i‚de‡
foodefhfoo


2 
	#foodefhfoo


	)

24 
	~<öây≥s.h
>

25 
	~<sys/time.h
>

27 
	~<pul£/cde˛.h
>

28 
	~<pul£/ßm∂e.h
>

29 
	~<pul£/vîsi⁄.h
>

34 
PA_C_DECL_BEGIN


37 
	e∑_c⁄ãxt_°©e
 {

38 
	mPA_CONTEXT_UNCONNECTED
,

39 
	mPA_CONTEXT_CONNECTING
,

40 
	mPA_CONTEXT_AUTHORIZING
,

41 
	mPA_CONTEXT_SETTING_NAME
,

42 
	mPA_CONTEXT_READY
,

43 
	mPA_CONTEXT_FAILED
,

44 
	mPA_CONTEXT_TERMINATED


45 } 
	t∑_c⁄ãxt_°©e_t
;

48 
ölöe
 
	$PA_CONTEXT_IS_GOOD
(
∑_c⁄ãxt_°©e_t
 
x
) {

50 
x
 =
PA_CONTEXT_CONNECTING
 ||

51 
x
 =
PA_CONTEXT_AUTHORIZING
 ||

52 
x
 =
PA_CONTEXT_SETTING_NAME
 ||

53 
x
 =
PA_CONTEXT_READY
;

54 
	}
}

57 
	#PA_CONTEXT_UNCONNECTED
 
PA_CONTEXT_UNCONNECTED


	)

58 
	#PA_CONTEXT_CONNECTING
 
PA_CONTEXT_CONNECTING


	)

59 
	#PA_CONTEXT_AUTHORIZING
 
PA_CONTEXT_AUTHORIZING


	)

60 
	#PA_CONTEXT_SETTING_NAME
 
PA_CONTEXT_SETTING_NAME


	)

61 
	#PA_CONTEXT_READY
 
PA_CONTEXT_READY


	)

62 
	#PA_CONTEXT_FAILED
 
PA_CONTEXT_FAILED


	)

63 
	#PA_CONTEXT_TERMINATED
 
PA_CONTEXT_TERMINATED


	)

64 
	#PA_CONTEXT_IS_GOOD
 
PA_CONTEXT_IS_GOOD


	)

68 
	e∑_°ªam_°©e
 {

69 
	mPA_STREAM_UNCONNECTED
,

70 
	mPA_STREAM_CREATING
,

71 
	mPA_STREAM_READY
,

72 
	mPA_STREAM_FAILED
,

73 
	mPA_STREAM_TERMINATED


74 } 
	t∑_°ªam_°©e_t
;

77 
ölöe
 
	$PA_STREAM_IS_GOOD
(
∑_°ªam_°©e_t
 
x
) {

79 
x
 =
PA_STREAM_CREATING
 ||

80 
x
 =
PA_STREAM_READY
;

81 
	}
}

84 
	#PA_STREAM_UNCONNECTED
 
PA_STREAM_UNCONNECTED


	)

85 
	#PA_STREAM_CREATING
 
PA_STREAM_CREATING


	)

86 
	#PA_STREAM_READY
 
PA_STREAM_READY


	)

87 
	#PA_STREAM_FAILED
 
PA_STREAM_FAILED


	)

88 
	#PA_STREAM_TERMINATED
 
PA_STREAM_TERMINATED


	)

89 
	#PA_STREAM_IS_GOOD
 
PA_STREAM_IS_GOOD


	)

93 
	e∑_›î©i⁄_°©e
 {

94 
	mPA_OPERATION_RUNNING
,

96 
	mPA_OPERATION_DONE
,

98 
	mPA_OPERATION_CANCELLED


102 } 
	t∑_›î©i⁄_°©e_t
;

105 
	#PA_OPERATION_RUNNING
 
PA_OPERATION_RUNNING


	)

106 
	#PA_OPERATION_DONE
 
PA_OPERATION_DONE


	)

107 
	#PA_OPERATION_CANCELED
 
PA_OPERATION_CANCELLED


	)

108 
	#PA_OPERATION_CANCELLED
 
PA_OPERATION_CANCELLED


	)

112 
	#PA_INVALID_INDEX
 ((
uöt32_t
Ë-1)

	)

115 
	e∑_c⁄ãxt_Êags
 {

116 
	mPA_CONTEXT_NOFLAGS
 = 0x0000U,

118 
	mPA_CONTEXT_NOAUTOSPAWN
 = 0x0001U,

120 
	mPA_CONTEXT_NOFAIL
 = 0x0002U

122 } 
	t∑_c⁄ãxt_Êags_t
;

126 
	#PA_CONTEXT_NOAUTOSPAWN
 
PA_CONTEXT_NOAUTOSPAWN


	)

127 
	#PA_CONTEXT_NOFAIL
 
PA_CONTEXT_NOFAIL


	)

134 
	e∑_dúe˘i⁄
 {

135 
	mPA_DIRECTION_OUTPUT
 = 0x0001U,

136 
	mPA_DIRECTION_INPUT
 = 0x0002U

137 } 
	t∑_dúe˘i⁄_t
;

140 
	#PA_DIRECTION_OUTPUT
 
PA_DIRECTION_OUTPUT


	)

141 
	#PA_DIRECTION_INPUT
 
PA_DIRECTION_INPUT


	)

145 
	e∑_devi˚_ty≥
 {

146 
	mPA_DEVICE_TYPE_SINK
,

147 
	mPA_DEVICE_TYPE_SOURCE


148 } 
	t∑_devi˚_ty≥_t
;

151 
	#PA_DEVICE_TYPE_SINK
 
PA_DEVICE_TYPE_SINK


	)

152 
	#PA_DEVICE_TYPE_SOURCE
 
PA_DEVICE_TYPE_SOURCE


	)

156 
	e∑_°ªam_dúe˘i⁄
 {

157 
	mPA_STREAM_NODIRECTION
,

158 
	mPA_STREAM_PLAYBACK
,

159 
	mPA_STREAM_RECORD
,

160 
	mPA_STREAM_UPLOAD


161 } 
	t∑_°ªam_dúe˘i⁄_t
;

164 
	#PA_STREAM_NODIRECTION
 
PA_STREAM_NODIRECTION


	)

165 
	#PA_STREAM_PLAYBACK
 
PA_STREAM_PLAYBACK


	)

166 
	#PA_STREAM_RECORD
 
PA_STREAM_RECORD


	)

167 
	#PA_STREAM_UPLOAD
 
PA_STREAM_UPLOAD


	)

171 
	e∑_°ªam_Êags
 {

173 
	mPA_STREAM_NOFLAGS
 = 0x0000U,

176 
	mPA_STREAM_START_CORKED
 = 0x0001U,

180 
	mPA_STREAM_INTERPOLATE_TIMING
 = 0x0002U,

192 
	mPA_STREAM_NOT_MONOTONIC
 = 0x0004U,

204 
	mPA_STREAM_AUTO_TIMING_UPDATE
 = 0x0008U,

211 
	mPA_STREAM_NO_REMAP_CHANNELS
 = 0x0010U,

217 
	mPA_STREAM_NO_REMIX_CHANNELS
 = 0x0020U,

223 
	mPA_STREAM_FIX_FORMAT
 = 0x0040U,

244 
	mPA_STREAM_FIX_RATE
 = 0x0080U,

259 
	mPA_STREAM_FIX_CHANNELS
 = 0x0100,

278 
	mPA_STREAM_DONT_MOVE
 = 0x0200U,

287 
	mPA_STREAM_VARIABLE_RATE
 = 0x0400U,

293 
	mPA_STREAM_PEAK_DETECT
 = 0x0800U,

296 
	mPA_STREAM_START_MUTED
 = 0x1000U,

302 
	mPA_STREAM_ADJUST_LATENCY
 = 0x2000U,

309 
	mPA_STREAM_EARLY_REQUESTS
 = 0x4000U,

326 
	mPA_STREAM_DONT_INHIBIT_AUTO_SUSPEND
 = 0x8000U,

331 
	mPA_STREAM_START_UNMUTED
 = 0x10000U,

337 
	mPA_STREAM_FAIL_ON_SUSPEND
 = 0x20000U,

343 
	mPA_STREAM_RELATIVE_VOLUME
 = 0x40000U,

350 
	mPA_STREAM_PASSTHROUGH
 = 0x80000U

355 } 
	t∑_°ªam_Êags_t
;

360 
	#PA_STREAM_NOT_MONOTONOUS
 
PA_STREAM_NOT_MONOTONIC


	)

363 
	#PA_STREAM_START_CORKED
 
PA_STREAM_START_CORKED


	)

364 
	#PA_STREAM_INTERPOLATE_TIMING
 
PA_STREAM_INTERPOLATE_TIMING


	)

365 
	#PA_STREAM_NOT_MONOTONIC
 
PA_STREAM_NOT_MONOTONIC


	)

366 
	#PA_STREAM_AUTO_TIMING_UPDATE
 
PA_STREAM_AUTO_TIMING_UPDATE


	)

367 
	#PA_STREAM_NO_REMAP_CHANNELS
 
PA_STREAM_NO_REMAP_CHANNELS


	)

368 
	#PA_STREAM_NO_REMIX_CHANNELS
 
PA_STREAM_NO_REMIX_CHANNELS


	)

369 
	#PA_STREAM_FIX_FORMAT
 
PA_STREAM_FIX_FORMAT


	)

370 
	#PA_STREAM_FIX_RATE
 
PA_STREAM_FIX_RATE


	)

371 
	#PA_STREAM_FIX_CHANNELS
 
PA_STREAM_FIX_CHANNELS


	)

372 
	#PA_STREAM_DONT_MOVE
 
PA_STREAM_DONT_MOVE


	)

373 
	#PA_STREAM_VARIABLE_RATE
 
PA_STREAM_VARIABLE_RATE


	)

374 
	#PA_STREAM_PEAK_DETECT
 
PA_STREAM_PEAK_DETECT


	)

375 
	#PA_STREAM_START_MUTED
 
PA_STREAM_START_MUTED


	)

376 
	#PA_STREAM_ADJUST_LATENCY
 
PA_STREAM_ADJUST_LATENCY


	)

377 
	#PA_STREAM_EARLY_REQUESTS
 
PA_STREAM_EARLY_REQUESTS


	)

378 
	#PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND
 
PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND


	)

379 
	#PA_STREAM_START_UNMUTED
 
PA_STREAM_START_UNMUTED


	)

380 
	#PA_STREAM_FAIL_ON_SUSPEND
 
PA_STREAM_FAIL_ON_SUSPEND


	)

381 
	#PA_STREAM_RELATIVE_VOLUME
 
PA_STREAM_RELATIVE_VOLUME


	)

382 
	#PA_STREAM_PASSTHROUGH
 
PA_STREAM_PASSTHROUGH


	)

387 
	s∑_buf„r_©å
 {

388 
uöt32_t
 
	mmaxÀngth
;

399 
uöt32_t
 
	méígth
;

417 
uöt32_t
 
	m¥ebuf
;

428 
uöt32_t
 
	mmöªq
;

438 
uöt32_t
 
	m‰agsize
;

452 } 
	t∑_buf„r_©å
;

455 
	e∑_îr‹_code
 {

456 
	mPA_OK
 = 0,

457 
	mPA_ERR_ACCESS
,

458 
	mPA_ERR_COMMAND
,

459 
	mPA_ERR_INVALID
,

460 
	mPA_ERR_EXIST
,

461 
	mPA_ERR_NOENTITY
,

462 
	mPA_ERR_CONNECTIONREFUSED
,

463 
	mPA_ERR_PROTOCOL
,

464 
	mPA_ERR_TIMEOUT
,

465 
	mPA_ERR_AUTHKEY
,

466 
	mPA_ERR_INTERNAL
,

467 
	mPA_ERR_CONNECTIONTERMINATED
,

468 
	mPA_ERR_KILLED
,

469 
	mPA_ERR_INVALIDSERVER
,

470 
	mPA_ERR_MODINITFAILED
,

471 
	mPA_ERR_BADSTATE
,

472 
	mPA_ERR_NODATA
,

473 
	mPA_ERR_VERSION
,

474 
	mPA_ERR_TOOLARGE
,

475 
	mPA_ERR_NOTSUPPORTED
,

476 
	mPA_ERR_UNKNOWN
,

477 
	mPA_ERR_NOEXTENSION
,

478 
	mPA_ERR_OBSOLETE
,

479 
	mPA_ERR_NOTIMPLEMENTED
,

480 
	mPA_ERR_FORKED
,

481 
	mPA_ERR_IO
,

482 
	mPA_ERR_BUSY
,

483 
	mPA_ERR_MAX


484 } 
	t∑_îr‹_code_t
;

487 
	#PA_OK
 
PA_OK


	)

488 
	#PA_ERR_ACCESS
 
PA_ERR_ACCESS


	)

489 
	#PA_ERR_COMMAND
 
PA_ERR_COMMAND


	)

490 
	#PA_ERR_INVALID
 
PA_ERR_INVALID


	)

491 
	#PA_ERR_EXIST
 
PA_ERR_EXIST


	)

492 
	#PA_ERR_NOENTITY
 
PA_ERR_NOENTITY


	)

493 
	#PA_ERR_CONNECTIONREFUSED
 
PA_ERR_CONNECTIONREFUSED


	)

494 
	#PA_ERR_PROTOCOL
 
PA_ERR_PROTOCOL


	)

495 
	#PA_ERR_TIMEOUT
 
PA_ERR_TIMEOUT


	)

496 
	#PA_ERR_AUTHKEY
 
PA_ERR_AUTHKEY


	)

497 
	#PA_ERR_INTERNAL
 
PA_ERR_INTERNAL


	)

498 
	#PA_ERR_CONNECTIONTERMINATED
 
PA_ERR_CONNECTIONTERMINATED


	)

499 
	#PA_ERR_KILLED
 
PA_ERR_KILLED


	)

500 
	#PA_ERR_INVALIDSERVER
 
PA_ERR_INVALIDSERVER


	)

501 
	#PA_ERR_MODINITFAILED
 
PA_ERR_MODINITFAILED


	)

502 
	#PA_ERR_BADSTATE
 
PA_ERR_BADSTATE


	)

503 
	#PA_ERR_NODATA
 
PA_ERR_NODATA


	)

504 
	#PA_ERR_VERSION
 
PA_ERR_VERSION


	)

505 
	#PA_ERR_TOOLARGE
 
PA_ERR_TOOLARGE


	)

506 
	#PA_ERR_NOTSUPPORTED
 
PA_ERR_NOTSUPPORTED


	)

507 
	#PA_ERR_UNKNOWN
 
PA_ERR_UNKNOWN


	)

508 
	#PA_ERR_NOEXTENSION
 
PA_ERR_NOEXTENSION


	)

509 
	#PA_ERR_OBSOLETE
 
PA_ERR_OBSOLETE


	)

510 
	#PA_ERR_NOTIMPLEMENTED
 
PA_ERR_NOTIMPLEMENTED


	)

511 
	#PA_ERR_FORKED
 
PA_ERR_FORKED


	)

512 
	#PA_ERR_MAX
 
PA_ERR_MAX


	)

516 
	e∑_subs¸ùti⁄_mask
 {

517 
	mPA_SUBSCRIPTION_MASK_NULL
 = 0x0000U,

520 
	mPA_SUBSCRIPTION_MASK_SINK
 = 0x0001U,

523 
	mPA_SUBSCRIPTION_MASK_SOURCE
 = 0x0002U,

526 
	mPA_SUBSCRIPTION_MASK_SINK_INPUT
 = 0x0004U,

529 
	mPA_SUBSCRIPTION_MASK_SOURCE_OUTPUT
 = 0x0008U,

532 
	mPA_SUBSCRIPTION_MASK_MODULE
 = 0x0010U,

535 
	mPA_SUBSCRIPTION_MASK_CLIENT
 = 0x0020U,

538 
	mPA_SUBSCRIPTION_MASK_SAMPLE_CACHE
 = 0x0040U,

541 
	mPA_SUBSCRIPTION_MASK_SERVER
 = 0x0080U,

545 
	mPA_SUBSCRIPTION_MASK_AUTOLOAD
 = 0x0100U,

549 
	mPA_SUBSCRIPTION_MASK_CARD
 = 0x0200U,

552 
	mPA_SUBSCRIPTION_MASK_ALL
 = 0x02ffU

554 } 
	t∑_subs¸ùti⁄_mask_t
;

557 
	e∑_subs¸ùti⁄_evít_ty≥
 {

558 
	mPA_SUBSCRIPTION_EVENT_SINK
 = 0x0000U,

561 
	mPA_SUBSCRIPTION_EVENT_SOURCE
 = 0x0001U,

564 
	mPA_SUBSCRIPTION_EVENT_SINK_INPUT
 = 0x0002U,

567 
	mPA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT
 = 0x0003U,

570 
	mPA_SUBSCRIPTION_EVENT_MODULE
 = 0x0004U,

573 
	mPA_SUBSCRIPTION_EVENT_CLIENT
 = 0x0005U,

576 
	mPA_SUBSCRIPTION_EVENT_SAMPLE_CACHE
 = 0x0006U,

579 
	mPA_SUBSCRIPTION_EVENT_SERVER
 = 0x0007U,

583 
	mPA_SUBSCRIPTION_EVENT_AUTOLOAD
 = 0x0008U,

587 
	mPA_SUBSCRIPTION_EVENT_CARD
 = 0x0009U,

590 
	mPA_SUBSCRIPTION_EVENT_FACILITY_MASK
 = 0x000FU,

593 
	mPA_SUBSCRIPTION_EVENT_NEW
 = 0x0000U,

596 
	mPA_SUBSCRIPTION_EVENT_CHANGE
 = 0x0010U,

599 
	mPA_SUBSCRIPTION_EVENT_REMOVE
 = 0x0020U,

602 
	mPA_SUBSCRIPTION_EVENT_TYPE_MASK
 = 0x0030U

605 } 
	t∑_subs¸ùti⁄_evít_ty≥_t
;

608 
	#∑_subs¸ùti⁄_m©ch_Êags
(
m
, 
t
Ë(!!((mË& (1 << (—Ë& 
PA_SUBSCRIPTION_EVENT_FACILITY_MASK
))))

	)

611 
	#PA_SUBSCRIPTION_MASK_NULL
 
PA_SUBSCRIPTION_MASK_NULL


	)

612 
	#PA_SUBSCRIPTION_MASK_SINK
 
PA_SUBSCRIPTION_MASK_SINK


	)

613 
	#PA_SUBSCRIPTION_MASK_SOURCE
 
PA_SUBSCRIPTION_MASK_SOURCE


	)

614 
	#PA_SUBSCRIPTION_MASK_SINK_INPUT
 
PA_SUBSCRIPTION_MASK_SINK_INPUT


	)

615 
	#PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT
 
PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT


	)

616 
	#PA_SUBSCRIPTION_MASK_MODULE
 
PA_SUBSCRIPTION_MASK_MODULE


	)

617 
	#PA_SUBSCRIPTION_MASK_CLIENT
 
PA_SUBSCRIPTION_MASK_CLIENT


	)

618 
	#PA_SUBSCRIPTION_MASK_SAMPLE_CACHE
 
PA_SUBSCRIPTION_MASK_SAMPLE_CACHE


	)

619 
	#PA_SUBSCRIPTION_MASK_SERVER
 
PA_SUBSCRIPTION_MASK_SERVER


	)

620 
	#PA_SUBSCRIPTION_MASK_AUTOLOAD
 
PA_SUBSCRIPTION_MASK_AUTOLOAD


	)

621 
	#PA_SUBSCRIPTION_MASK_CARD
 
PA_SUBSCRIPTION_MASK_CARD


	)

622 
	#PA_SUBSCRIPTION_MASK_ALL
 
PA_SUBSCRIPTION_MASK_ALL


	)

623 
	#PA_SUBSCRIPTION_EVENT_SINK
 
PA_SUBSCRIPTION_EVENT_SINK


	)

624 
	#PA_SUBSCRIPTION_EVENT_SOURCE
 
PA_SUBSCRIPTION_EVENT_SOURCE


	)

625 
	#PA_SUBSCRIPTION_EVENT_SINK_INPUT
 
PA_SUBSCRIPTION_EVENT_SINK_INPUT


	)

626 
	#PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT
 
PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT


	)

627 
	#PA_SUBSCRIPTION_EVENT_MODULE
 
PA_SUBSCRIPTION_EVENT_MODULE


	)

628 
	#PA_SUBSCRIPTION_EVENT_CLIENT
 
PA_SUBSCRIPTION_EVENT_CLIENT


	)

629 
	#PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE
 
PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE


	)

630 
	#PA_SUBSCRIPTION_EVENT_SERVER
 
PA_SUBSCRIPTION_EVENT_SERVER


	)

631 
	#PA_SUBSCRIPTION_EVENT_AUTOLOAD
 
PA_SUBSCRIPTION_EVENT_AUTOLOAD


	)

632 
	#PA_SUBSCRIPTION_EVENT_CARD
 
PA_SUBSCRIPTION_EVENT_CARD


	)

633 
	#PA_SUBSCRIPTION_EVENT_FACILITY_MASK
 
PA_SUBSCRIPTION_EVENT_FACILITY_MASK


	)

634 
	#PA_SUBSCRIPTION_EVENT_NEW
 
PA_SUBSCRIPTION_EVENT_NEW


	)

635 
	#PA_SUBSCRIPTION_EVENT_CHANGE
 
PA_SUBSCRIPTION_EVENT_CHANGE


	)

636 
	#PA_SUBSCRIPTION_EVENT_REMOVE
 
PA_SUBSCRIPTION_EVENT_REMOVE


	)

637 
	#PA_SUBSCRIPTION_EVENT_TYPE_MASK
 
PA_SUBSCRIPTION_EVENT_TYPE_MASK


	)

658 
	s∑_timög_öfo
 {

659 
timevÆ
 
	mtime°amp
;

662 
	msynchr⁄ized_˛ocks
;

669 
∑_u£c_t
 
	msök_u£c
;

674 
∑_u£c_t
 
	msour˚_u£c
;

678 
∑_u£c_t
 
	må™•‹t_u£c
;

682 
	m∂ayög
;

689 
	mwrôe_ödex_c‹ru±
;

696 
öt64_t
 
	mwrôe_ödex
;

702 
	mªad_ödex_c‹ru±
;

707 
öt64_t
 
	mªad_ödex
;

713 
∑_u£c_t
 
	mc⁄figuªd_sök_u£c
;

716 
∑_u£c_t
 
	mc⁄figuªd_sour˚_u£c
;

719 
öt64_t
 
	msö˚_undîrun
;

725 } 
	t∑_timög_öfo
;

734 
	s∑_•awn_≠i
 {

735 (*
	m¥ef‹k
)();

739 (*
	mpo°f‹k
)();

743 (*
	m©f‹k
)();

749 } 
	t∑_•awn_≠i
;

752 
	e∑_£ek_mode
 {

753 
	mPA_SEEK_RELATIVE
 = 0,

756 
	mPA_SEEK_ABSOLUTE
 = 1,

759 
	mPA_SEEK_RELATIVE_ON_READ
 = 2,

762 
	mPA_SEEK_RELATIVE_END
 = 3

764 } 
	t∑_£ek_mode_t
;

767 
	#PA_SEEK_RELATIVE
 
PA_SEEK_RELATIVE


	)

768 
	#PA_SEEK_ABSOLUTE
 
PA_SEEK_ABSOLUTE


	)

769 
	#PA_SEEK_RELATIVE_ON_READ
 
PA_SEEK_RELATIVE_ON_READ


	)

770 
	#PA_SEEK_RELATIVE_END
 
PA_SEEK_RELATIVE_END


	)

774 
	e∑_sök_Êags
 {

775 
	mPA_SINK_NOFLAGS
 = 0x0000U,

778 
	mPA_SINK_HW_VOLUME_CTRL
 = 0x0001U,

782 
	mPA_SINK_LATENCY
 = 0x0002U,

785 
	mPA_SINK_HARDWARE
 = 0x0004U,

789 
	mPA_SINK_NETWORK
 = 0x0008U,

792 
	mPA_SINK_HW_MUTE_CTRL
 = 0x0010U,

796 
	mPA_SINK_DECIBEL_VOLUME
 = 0x0020U,

801 
	mPA_SINK_FLAT_VOLUME
 = 0x0040U,

805 
	mPA_SINK_DYNAMIC_LATENCY
 = 0x0080U,

809 
	mPA_SINK_SET_FORMATS
 = 0x0100U,

814 #ifde‡
__INCLUDED_FROM_PULSE_AUDIO


820 
	mPA_SINK_SHARE_VOLUME_WITH_MASTER
 = 0x1000000U,

824 
	mPA_SINK_DEFERRED_VOLUME
 = 0x2000000U,

829 } 
	t∑_sök_Êags_t
;

832 
	#PA_SINK_HW_VOLUME_CTRL
 
PA_SINK_HW_VOLUME_CTRL


	)

833 
	#PA_SINK_LATENCY
 
PA_SINK_LATENCY


	)

834 
	#PA_SINK_HARDWARE
 
PA_SINK_HARDWARE


	)

835 
	#PA_SINK_NETWORK
 
PA_SINK_NETWORK


	)

836 
	#PA_SINK_HW_MUTE_CTRL
 
PA_SINK_HW_MUTE_CTRL


	)

837 
	#PA_SINK_DECIBEL_VOLUME
 
PA_SINK_DECIBEL_VOLUME


	)

838 
	#PA_SINK_FLAT_VOLUME
 
PA_SINK_FLAT_VOLUME


	)

839 
	#PA_SINK_DYNAMIC_LATENCY
 
PA_SINK_DYNAMIC_LATENCY


	)

840 
	#PA_SINK_SET_FORMATS
 
PA_SINK_SET_FORMATS


	)

841 #ifde‡
__INCLUDED_FROM_PULSE_AUDIO


842 
	#PA_SINK_CLIENT_FLAGS_MASK
 0xFFFFFF

	)

848 
	e∑_sök_°©e
 {

849 
	mPA_SINK_INVALID_STATE
 = -1,

852 
	mPA_SINK_RUNNING
 = 0,

855 
	mPA_SINK_IDLE
 = 1,

858 
	mPA_SINK_SUSPENDED
 = 2,

868 
	mPA_SINK_INIT
 = -2,

871 
	mPA_SINK_UNLINKED
 = -3

875 } 
	t∑_sök_°©e_t
;

878 
ölöe
 
	$PA_SINK_IS_OPENED
(
∑_sök_°©e_t
 
x
) {

879  
x
 =
PA_SINK_RUNNING
 || x =
PA_SINK_IDLE
;

880 
	}
}

883 
ölöe
 
	$PA_SINK_IS_RUNNING
(
∑_sök_°©e_t
 
x
) {

884  
x
 =
PA_SINK_RUNNING
;

885 
	}
}

888 
	#PA_SINK_INVALID_STATE
 
PA_SINK_INVALID_STATE


	)

889 
	#PA_SINK_RUNNING
 
PA_SINK_RUNNING


	)

890 
	#PA_SINK_IDLE
 
PA_SINK_IDLE


	)

891 
	#PA_SINK_SUSPENDED
 
PA_SINK_SUSPENDED


	)

892 
	#PA_SINK_INIT
 
PA_SINK_INIT


	)

893 
	#PA_SINK_UNLINKED
 
PA_SINK_UNLINKED


	)

894 
	#PA_SINK_IS_OPENED
 
PA_SINK_IS_OPENED


	)

898 
	e∑_sour˚_Êags
 {

899 
	mPA_SOURCE_NOFLAGS
 = 0x0000U,

902 
	mPA_SOURCE_HW_VOLUME_CTRL
 = 0x0001U,

906 
	mPA_SOURCE_LATENCY
 = 0x0002U,

909 
	mPA_SOURCE_HARDWARE
 = 0x0004U,

913 
	mPA_SOURCE_NETWORK
 = 0x0008U,

916 
	mPA_SOURCE_HW_MUTE_CTRL
 = 0x0010U,

920 
	mPA_SOURCE_DECIBEL_VOLUME
 = 0x0020U,

925 
	mPA_SOURCE_DYNAMIC_LATENCY
 = 0x0040U,

929 
	mPA_SOURCE_FLAT_VOLUME
 = 0x0080U,

933 #ifde‡
__INCLUDED_FROM_PULSE_AUDIO


939 
	mPA_SOURCE_SHARE_VOLUME_WITH_MASTER
 = 0x1000000U,

943 
	mPA_SOURCE_DEFERRED_VOLUME
 = 0x2000000U,

946 } 
	t∑_sour˚_Êags_t
;

949 
	#PA_SOURCE_HW_VOLUME_CTRL
 
PA_SOURCE_HW_VOLUME_CTRL


	)

950 
	#PA_SOURCE_LATENCY
 
PA_SOURCE_LATENCY


	)

951 
	#PA_SOURCE_HARDWARE
 
PA_SOURCE_HARDWARE


	)

952 
	#PA_SOURCE_NETWORK
 
PA_SOURCE_NETWORK


	)

953 
	#PA_SOURCE_HW_MUTE_CTRL
 
PA_SOURCE_HW_MUTE_CTRL


	)

954 
	#PA_SOURCE_DECIBEL_VOLUME
 
PA_SOURCE_DECIBEL_VOLUME


	)

955 
	#PA_SOURCE_DYNAMIC_LATENCY
 
PA_SOURCE_DYNAMIC_LATENCY


	)

956 
	#PA_SOURCE_FLAT_VOLUME
 
PA_SOURCE_FLAT_VOLUME


	)

957 #ifde‡
__INCLUDED_FROM_PULSE_AUDIO


958 
	#PA_SOURCE_CLIENT_FLAGS_MASK
 0xFFFFFF

	)

964 
	e∑_sour˚_°©e
 {

965 
	mPA_SOURCE_INVALID_STATE
 = -1,

968 
	mPA_SOURCE_RUNNING
 = 0,

971 
	mPA_SOURCE_IDLE
 = 1,

974 
	mPA_SOURCE_SUSPENDED
 = 2,

984 
	mPA_SOURCE_INIT
 = -2,

987 
	mPA_SOURCE_UNLINKED
 = -3

991 } 
	t∑_sour˚_°©e_t
;

994 
ölöe
 
	$PA_SOURCE_IS_OPENED
(
∑_sour˚_°©e_t
 
x
) {

995  
x
 =
PA_SOURCE_RUNNING
 || x =
PA_SOURCE_IDLE
;

996 
	}
}

999 
ölöe
 
	$PA_SOURCE_IS_RUNNING
(
∑_sour˚_°©e_t
 
x
) {

1000  
x
 =
PA_SOURCE_RUNNING
;

1001 
	}
}

1004 
	#PA_SOURCE_INVALID_STATE
 
PA_SOURCE_INVALID_STATE


	)

1005 
	#PA_SOURCE_RUNNING
 
PA_SOURCE_RUNNING


	)

1006 
	#PA_SOURCE_IDLE
 
PA_SOURCE_IDLE


	)

1007 
	#PA_SOURCE_SUSPENDED
 
PA_SOURCE_SUSPENDED


	)

1008 
	#PA_SOURCE_INIT
 
PA_SOURCE_INIT


	)

1009 
	#PA_SOURCE_UNLINKED
 
PA_SOURCE_UNLINKED


	)

1010 
	#PA_SOURCE_IS_OPENED
 
PA_SOURCE_IS_OPENED


	)

1014 (*
	t∑_‰ì_cb_t
)(*
	tp
);

1019 
	#PA_STREAM_EVENT_REQUEST_CORK
 "ªque°-c‹k"

	)

1024 
	#PA_STREAM_EVENT_REQUEST_UNCORK
 "ªque°-unc‹k"

	)

1031 
	#PA_STREAM_EVENT_FORMAT_LOST
 "f‹m©-lo°"

	)

1033 #i‚de‡
__INCLUDED_FROM_PULSE_AUDIO


1036 
	e∑_p‹t_avaûabÀ
 {

1037 
PA_PORT_AVAILABLE_UNKNOWN
 = 0,

1038 
PA_PORT_AVAILABLE_NO
 = 1,

1039 
PA_PORT_AVAILABLE_YES
 = 2,

1040 } 
	t∑_p‹t_avaûabÀ_t
;

1043 
	#PA_PORT_AVAILABLE_UNKNOWN
 
PA_PORT_AVAILABLE_UNKNOWN


	)

1044 
	#PA_PORT_AVAILABLE_NO
 
PA_PORT_AVAILABLE_NO


	)

1045 
	#PA_PORT_AVAILABLE_YES
 
PA_PORT_AVAILABLE_YES


	)

1050 
PA_C_DECL_END


	@/usr/include/pulse/direction.h

1 #i‚de‡
foodúe˘i⁄hfoo


2 
	#foodúe˘i⁄hfoo


	)

23 
	~<pul£/def.h
>

30 
	$∑_dúe˘i⁄_vÆid
(
∑_dúe˘i⁄_t
 
dúe˘i⁄
Ë
PA_GCC_CONST
;

33 c⁄° *
	`∑_dúe˘i⁄_to_°rög
(
∑_dúe˘i⁄_t
 
dúe˘i⁄
);

	@/usr/include/pulse/error.h

1 #i‚de‡
fo€º‹hfoo


2 
	#fo€º‹hfoo


	)

24 
	~<pul£/cde˛.h
>

25 
	~<pul£/vîsi⁄.h
>

30 
PA_C_DECL_BEGIN


33 c⁄° * 
∑_°ªº‹
(
îr‹
);

35 
	gPA_C_DECL_END


	@/usr/include/pulse/format.h

1 #i‚de‡
foof‹m©hfoo


2 
	#foof‹m©hfoo


	)

25 
	~<pul£/cde˛.h
>

26 
	~<pul£/gccma¸o.h
>

27 
	~<pul£/¥›li°.h
>

28 
	~<pul£/ßm∂e.h
>

29 
	~<pul£/ch™√lm≠.h
>

34 
PA_C_DECL_BEGIN


37 
	e∑_ícodög
 {

38 
	mPA_ENCODING_ANY
,

41 
	mPA_ENCODING_PCM
,

44 
	mPA_ENCODING_AC3_IEC61937
,

47 
	mPA_ENCODING_EAC3_IEC61937
,

50 
	mPA_ENCODING_MPEG_IEC61937
,

53 
	mPA_ENCODING_DTS_IEC61937
,

56 
	mPA_ENCODING_MPEG2_AAC_IEC61937
,

59 
	mPA_ENCODING_MAX
,

62 
	mPA_ENCODING_INVALID
 = -1,

64 } 
	t∑_ícodög_t
;

67 
	#PA_ENCODING_ANY
 
PA_ENCODING_ANY


	)

68 
	#PA_ENCODING_PCM
 
PA_ENCODING_PCM


	)

69 
	#PA_ENCODING_AC3_IEC61937
 
PA_ENCODING_AC3_IEC61937


	)

70 
	#PA_ENCODING_EAC3_IEC61937
 
PA_ENCODING_EAC3_IEC61937


	)

71 
	#PA_ENCODING_MPEG_IEC61937
 
PA_ENCODING_MPEG_IEC61937


	)

72 
	#PA_ENCODING_DTS_IEC61937
 
PA_ENCODING_DTS_IEC61937


	)

73 
	#PA_ENCODING_MPEG2_AAC_IEC61937
 
PA_ENCODING_MPEG2_AAC_IEC61937


	)

74 
	#PA_ENCODING_MAX
 
PA_ENCODING_MAX


	)

75 
	#PA_ENCODING_INVALID
 
PA_ENCODING_INVALID


	)

79 c⁄° *
	$∑_ícodög_to_°rög
(
∑_ícodög_t
 
e
Ë
PA_GCC_CONST
;

82 
∑_ícodög_t
 
	`∑_ícodög_‰om_°rög
(c⁄° *
ícodög
);

85 
	s∑_f‹m©_öfo
 {

86 
∑_ícodög_t
 
ícodög
;

89 
∑_¥›li°
 *
∂i°
;

91 } 
	t∑_f‹m©_öfo
;

94 
∑_f‹m©_öfo
* 
	`∑_f‹m©_öfo_√w
();

97 
∑_f‹m©_öfo
* 
	`∑_f‹m©_öfo_c›y
(c⁄°Öa_f‹m©_öfÿ*
§c
);

100 
	`∑_f‹m©_öfo_‰ì
(
∑_f‹m©_öfo
 *
f
);

103 
	`∑_f‹m©_öfo_vÆid
(c⁄° 
∑_f‹m©_öfo
 *
f
);

106 
	`∑_f‹m©_öfo_is_pcm
(c⁄° 
∑_f‹m©_öfo
 *
f
);

115 
	`∑_f‹m©_öfo_is_com∑tibÀ
(c⁄° 
∑_f‹m©_öfo
 *
fú°
, c⁄°Öa_f‹m©_öfÿ*
£c⁄d
);

122 
	#PA_FORMAT_INFO_SNPRINT_MAX
 256

	)

125 *
	`∑_f‹m©_öfo_¢¥öt
(*
s
, 
size_t
 
l
, c⁄° 
∑_f‹m©_öfo
 *
f
);

129 
∑_f‹m©_öfo
* 
	`∑_f‹m©_öfo_‰om_°rög
(c⁄° *
°r
);

143 
∑_f‹m©_öfo
* 
	`∑_f‹m©_öfo_‰om_ßm∂e_•ec
(c⁄° 
∑_ßm∂e_•ec
 *
ss
, c⁄° 
∑_ch™√l_m≠
 *
m≠
);

150 
	`∑_f‹m©_öfo_to_ßm∂e_•ec
(c⁄° 
∑_f‹m©_öfo
 *
f
, 
∑_ßm∂e_•ec
 *
ss
, 
∑_ch™√l_m≠
 *
m≠
);

153 
	e∑_¥›_ty≥_t
 {

154 
PA_PROP_TYPE_INT
,

157 
PA_PROP_TYPE_INT_RANGE
,

160 
PA_PROP_TYPE_INT_ARRAY
,

163 
PA_PROP_TYPE_STRING
,

166 
PA_PROP_TYPE_STRING_ARRAY
,

169 
PA_PROP_TYPE_INVALID
 = -1,

171 } 
	t∑_¥›_ty≥_t
;

174 
	#PA_PROP_TYPE_INT
 
PA_PROP_TYPE_INT


	)

175 
	#PA_PROP_TYPE_INT_RANGE
 
PA_PROP_TYPE_INT_RANGE


	)

176 
	#PA_PROP_TYPE_INT_ARRAY
 
PA_PROP_TYPE_INT_ARRAY


	)

177 
	#PA_PROP_TYPE_STRING
 
PA_PROP_TYPE_STRING


	)

178 
	#PA_PROP_TYPE_STRING_ARRAY
 
PA_PROP_TYPE_STRING_ARRAY


	)

179 
	#PA_PROP_TYPE_INVALID
 
PA_PROP_TYPE_INVALID


	)

183 
∑_¥›_ty≥_t
 
	`∑_f‹m©_öfo_gë_¥›_ty≥
(c⁄° 
∑_f‹m©_öfo
 *
f
, c⁄° *
key
);

186 
	`∑_f‹m©_öfo_gë_¥›_öt
(c⁄° 
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, *
v
);

189 
	`∑_f‹m©_öfo_gë_¥›_öt_ønge
(c⁄° 
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, *
mö
, *
max
);

193 
	`∑_f‹m©_öfo_gë_¥›_öt_¨øy
(c⁄° 
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, **
vÆues
, *
n_vÆues
);

196 
	`∑_f‹m©_öfo_gë_¥›_°rög
(c⁄° 
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, **
v
);

200 
	`∑_f‹m©_öfo_gë_¥›_°rög_¨øy
(c⁄° 
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, ***
vÆues
, *
n_vÆues
);

203 
	`∑_f‹m©_öfo_‰ì_°rög_¨øy
(**
vÆues
, 
n_vÆues
);

206 
	`∑_f‹m©_öfo_£t_¥›_öt
(
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, 
vÆue
);

208 
	`∑_f‹m©_öfo_£t_¥›_öt_¨øy
(
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, c⁄° *
vÆues
, 
n_vÆues
);

210 
	`∑_f‹m©_öfo_£t_¥›_öt_ønge
(
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, 
mö
, 
max
);

212 
	`∑_f‹m©_öfo_£t_¥›_°rög
(
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, c⁄° *
vÆue
);

214 
	`∑_f‹m©_öfo_£t_¥›_°rög_¨øy
(
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, c⁄° **
vÆues
, 
n_vÆues
);

225 
	`∑_f‹m©_öfo_£t_ßm∂e_f‹m©
(
∑_f‹m©_öfo
 *
f
, 
∑_ßm∂e_f‹m©_t
 
sf
);

236 
	`∑_f‹m©_öfo_£t_øã
(
∑_f‹m©_öfo
 *
f
, 
øã
);

247 
	`∑_f‹m©_öfo_£t_ch™√ls
(
∑_f‹m©_öfo
 *
f
, 
ch™√ls
);

258 
	`∑_f‹m©_öfo_£t_ch™√l_m≠
(
∑_f‹m©_öfo
 *
f
, c⁄° 
∑_ch™√l_m≠
 *
m≠
);

260 
PA_C_DECL_END


	@/usr/include/pulse/introspect.h

1 #i‚de‡
fooöåo•e˘hfoo


2 
	#fooöåo•e˘hfoo


	)

24 
	~<öây≥s.h
>

26 
	~<pul£/›î©i⁄.h
>

27 
	~<pul£/c⁄ãxt.h
>

28 
	~<pul£/cde˛.h
>

29 
	~<pul£/gccma¸o.h
>

30 
	~<pul£/ch™√lm≠.h
>

31 
	~<pul£/vﬁume.h
>

32 
	~<pul£/¥›li°.h
>

33 
	~<pul£/f‹m©.h
>

34 
	~<pul£/vîsi⁄.h
>

220 
PA_C_DECL_BEGIN


227 
	s∑_sök_p‹t_öfo
 {

228 c⁄° *
	m«me
;

229 c⁄° *
	mdes¸ùti⁄
;

230 
uöt32_t
 
	m¥i‹ôy
;

231 
	mavaûabÀ
;

232 } 
	t∑_sök_p‹t_öfo
;

237 
	s∑_sök_öfo
 {

238 c⁄° *
	m«me
;

239 
uöt32_t
 
	mödex
;

240 c⁄° *
	mdes¸ùti⁄
;

241 
∑_ßm∂e_•ec
 
	mßm∂e_•ec
;

242 
∑_ch™√l_m≠
 
	mch™√l_m≠
;

243 
uöt32_t
 
	mow√r_moduÀ
;

244 
∑_cvﬁume
 
	mvﬁume
;

245 
	mmuã
;

246 
uöt32_t
 
	mm⁄ô‹_sour˚
;

247 c⁄° *
	mm⁄ô‹_sour˚_«me
;

248 
∑_u£c_t
 
	mœãncy
;

249 c⁄° *
	mdrivî
;

250 
∑_sök_Êags_t
 
	mÊags
;

251 
∑_¥›li°
 *
	m¥›li°
;

252 
∑_u£c_t
 
	mc⁄figuªd_œãncy
;

253 
∑_vﬁume_t
 
	mba£_vﬁume
;

254 
∑_sök_°©e_t
 
	m°©e
;

255 
uöt32_t
 
	mn_vﬁume_°ïs
;

256 
uöt32_t
 
	mˇrd
;

257 
uöt32_t
 
	mn_p‹ts
;

258 
∑_sök_p‹t_öfo
** 
	mp‹ts
;

259 
∑_sök_p‹t_öfo
* 
	ma˘ive_p‹t
;

260 
uöt8_t
 
	mn_f‹m©s
;

261 
∑_f‹m©_öfo
 **
	mf‹m©s
;

262 } 
	t∑_sök_öfo
;

265 (*
	t∑_sök_öfo_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_sök_öfo
 *
	ti
, 
	teﬁ
, *
	tu£rd©a
);

268 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sök_öfo_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_sök_öfo_cb_t
 
cb
, *
u£rd©a
);

271 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sök_öfo_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_sök_öfo_cb_t
 
cb
, *
u£rd©a
);

274 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sök_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_sök_öfo_cb_t
 
cb
, *
u£rd©a
);

277 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_vﬁume_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° 
∑_cvﬁume
 *
vﬁume
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

280 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_vﬁume_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, c⁄° 
∑_cvﬁume
 *
vﬁume
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

283 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_muã_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
muã
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

286 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_muã_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
muã
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

289 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_su•íd_sök_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
sök_«me
, 
su•íd
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

292 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_su•íd_sök_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
su•íd
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

295 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_p‹t_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° *
p‹t
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

298 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_p‹t_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, c⁄° *
p‹t
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

307 
	s∑_sour˚_p‹t_öfo
 {

308 c⁄° *
«me
;

309 c⁄° *
des¸ùti⁄
;

310 
uöt32_t
 
¥i‹ôy
;

311 
avaûabÀ
;

312 } 
	t∑_sour˚_p‹t_öfo
;

317 
	s∑_sour˚_öfo
 {

318 c⁄° *
«me
;

319 
uöt32_t
 
ödex
;

320 c⁄° *
des¸ùti⁄
;

321 
∑_ßm∂e_•ec
 
ßm∂e_•ec
;

322 
∑_ch™√l_m≠
 
ch™√l_m≠
;

323 
uöt32_t
 
ow√r_moduÀ
;

324 
∑_cvﬁume
 
vﬁume
;

325 
muã
;

326 
uöt32_t
 
m⁄ô‹_of_sök
;

327 c⁄° *
m⁄ô‹_of_sök_«me
;

328 
∑_u£c_t
 
œãncy
;

329 c⁄° *
drivî
;

330 
∑_sour˚_Êags_t
 
Êags
;

331 
∑_¥›li°
 *
¥›li°
;

332 
∑_u£c_t
 
c⁄figuªd_œãncy
;

333 
∑_vﬁume_t
 
ba£_vﬁume
;

334 
∑_sour˚_°©e_t
 
°©e
;

335 
uöt32_t
 
n_vﬁume_°ïs
;

336 
uöt32_t
 
ˇrd
;

337 
uöt32_t
 
n_p‹ts
;

338 
∑_sour˚_p‹t_öfo
** 
p‹ts
;

339 
∑_sour˚_p‹t_öfo
* 
a˘ive_p‹t
;

340 
uöt8_t
 
n_f‹m©s
;

341 
∑_f‹m©_öfo
 **
f‹m©s
;

342 } 
	t∑_sour˚_öfo
;

345 (*
	t∑_sour˚_öfo_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_sour˚_öfo
 *
	ti
, 
	teﬁ
, *
	tu£rd©a
);

348 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sour˚_öfo_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_sour˚_öfo_cb_t
 
cb
, *
u£rd©a
);

351 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sour˚_öfo_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_sour˚_öfo_cb_t
 
cb
, *
u£rd©a
);

354 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sour˚_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_sour˚_öfo_cb_t
 
cb
, *
u£rd©a
);

357 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_vﬁume_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° 
∑_cvﬁume
 *
vﬁume
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

360 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_vﬁume_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, c⁄° 
∑_cvﬁume
 *
vﬁume
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

363 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_muã_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
muã
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

366 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_muã_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
muã
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

369 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_su•íd_sour˚_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
sour˚_«me
, 
su•íd
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

372 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_su•íd_sour˚_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
su•íd
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

375 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_p‹t_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° *
p‹t
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

378 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_p‹t_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, c⁄° *
p‹t
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

387 
	s∑_£rvî_öfo
 {

388 c⁄° *
u£r_«me
;

389 c⁄° *
ho°_«me
;

390 c⁄° *
£rvî_vîsi⁄
;

391 c⁄° *
£rvî_«me
;

392 
∑_ßm∂e_•ec
 
ßm∂e_•ec
;

393 c⁄° *
deÁu…_sök_«me
;

394 c⁄° *
deÁu…_sour˚_«me
;

395 
uöt32_t
 
cookõ
;

396 
∑_ch™√l_m≠
 
ch™√l_m≠
;

397 } 
	t∑_£rvî_öfo
;

400 (*
	t∑_£rvî_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_£rvî_öfo
*
	ti
, *
	tu£rd©a
);

403 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_£rvî_öfo
(
∑_c⁄ãxt
 *
c
, 
∑_£rvî_öfo_cb_t
 
cb
, *
u£rd©a
);

412 
	s∑_moduÀ_öfo
 {

413 
uöt32_t
 
ödex
;

414 c⁄° *
«me
,

415 *
¨gumít
;

416 
uöt32_t
 
n_u£d
;

418 
auto_u∆ﬂd
;

420 
∑_¥›li°
 *
¥›li°
;

421 } 
	t∑_moduÀ_öfo
;

424 (*
	t∑_moduÀ_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_moduÀ_öfo
*
	ti
, 
	teﬁ
, *
	tu£rd©a
);

427 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_moduÀ_öfo
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_moduÀ_öfo_cb_t
 
cb
, *
u£rd©a
);

430 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_moduÀ_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_moduÀ_öfo_cb_t
 
cb
, *
u£rd©a
);

433 (*
	t∑_c⁄ãxt_ödex_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, 
	tuöt32_t
 
	tidx
, *
	tu£rd©a
);

436 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_lﬂd_moduÀ
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, c⁄° *
¨gumít
, 
∑_c⁄ãxt_ödex_cb_t
 
cb
, *
u£rd©a
);

439 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_u∆ﬂd_moduÀ
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

448 
	s∑_˛õ¡_öfo
 {

449 
uöt32_t
 
ödex
;

450 c⁄° *
«me
;

451 
uöt32_t
 
ow√r_moduÀ
;

452 c⁄° *
drivî
;

453 
∑_¥›li°
 *
¥›li°
;

454 } 
	t∑_˛õ¡_öfo
;

457 (*
	t∑_˛õ¡_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_˛õ¡_öfo
*
	ti
, 
	teﬁ
, *
	tu£rd©a
);

460 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_˛õ¡_öfo
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_˛õ¡_öfo_cb_t
 
cb
, *
u£rd©a
);

463 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_˛õ¡_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_˛õ¡_öfo_cb_t
 
cb
, *
u£rd©a
);

466 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_kûl_˛õ¡
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

473 
	s∑_ˇrd_¥ofûe_öfo
 {

474 c⁄° *
«me
;

475 c⁄° *
des¸ùti⁄
;

476 
uöt32_t
 
n_söks
;

477 
uöt32_t
 
n_sour˚s
;

478 
uöt32_t
 
¥i‹ôy
;

479 } 
	t∑_ˇrd_¥ofûe_öfo
;

484 
	s∑_ˇrd_¥ofûe_öfo2
 {

485 c⁄° *
«me
;

486 c⁄° *
des¸ùti⁄
;

487 
uöt32_t
 
n_söks
;

488 
uöt32_t
 
n_sour˚s
;

489 
uöt32_t
 
¥i‹ôy
;

490 
avaûabÀ
;

496 } 
	t∑_ˇrd_¥ofûe_öfo2
;

501 
	s∑_ˇrd_p‹t_öfo
 {

502 c⁄° *
«me
;

503 c⁄° *
des¸ùti⁄
;

504 
uöt32_t
 
¥i‹ôy
;

505 
avaûabÀ
;

506 
dúe˘i⁄
;

507 
uöt32_t
 
n_¥ofûes
;

508 
∑_ˇrd_¥ofûe_öfo
** 
¥ofûes
;

509 
∑_¥›li°
 *
¥›li°
;

510 
öt64_t
 
œãncy_off£t
;

511 
∑_ˇrd_¥ofûe_öfo2
** 
¥ofûes2
;

512 } 
	t∑_ˇrd_p‹t_öfo
;

517 
	s∑_ˇrd_öfo
 {

518 
uöt32_t
 
ödex
;

519 c⁄° *
«me
;

520 
uöt32_t
 
ow√r_moduÀ
;

521 c⁄° *
drivî
;

522 
uöt32_t
 
n_¥ofûes
;

523 
∑_ˇrd_¥ofûe_öfo
* 
¥ofûes
;

524 
∑_ˇrd_¥ofûe_öfo
* 
a˘ive_¥ofûe
;

525 
∑_¥›li°
 *
¥›li°
;

526 
uöt32_t
 
n_p‹ts
;

527 
∑_ˇrd_p‹t_öfo
 **
p‹ts
;

528 
∑_ˇrd_¥ofûe_öfo2
** 
¥ofûes2
;

529 
∑_ˇrd_¥ofûe_öfo2
* 
a˘ive_¥ofûe2
;

530 } 
	t∑_ˇrd_öfo
;

533 (*
	t∑_ˇrd_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_ˇrd_öfo
*
	ti
, 
	teﬁ
, *
	tu£rd©a
);

536 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_ˇrd_öfo_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_ˇrd_öfo_cb_t
 
cb
, *
u£rd©a
);

539 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_ˇrd_öfo_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_ˇrd_öfo_cb_t
 
cb
, *
u£rd©a
);

542 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_ˇrd_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_ˇrd_öfo_cb_t
 
cb
, *
u£rd©a
);

545 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_ˇrd_¥ofûe_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° *
¥ofûe
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

548 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_ˇrd_¥ofûe_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, c⁄° *
¥ofûe
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

551 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_p‹t_œãncy_off£t
(
∑_c⁄ãxt
 *
c
, c⁄° *
ˇrd_«me
, c⁄° *
p‹t_«me
, 
öt64_t
 
off£t
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

560 
	s∑_sök_öput_öfo
 {

561 
uöt32_t
 
ödex
;

562 c⁄° *
«me
;

563 
uöt32_t
 
ow√r_moduÀ
;

564 
uöt32_t
 
˛õ¡
;

565 
uöt32_t
 
sök
;

566 
∑_ßm∂e_•ec
 
ßm∂e_•ec
;

567 
∑_ch™√l_m≠
 
ch™√l_m≠
;

568 
∑_cvﬁume
 
vﬁume
;

569 
∑_u£c_t
 
buf„r_u£c
;

570 
∑_u£c_t
 
sök_u£c
;

571 c⁄° *
ªßm∂e_mëhod
;

572 c⁄° *
drivî
;

573 
muã
;

574 
∑_¥›li°
 *
¥›li°
;

575 
c‹ked
;

576 
has_vﬁume
;

577 
vﬁume_wrôabÀ
;

578 
∑_f‹m©_öfo
 *
f‹m©
;

579 } 
	t∑_sök_öput_öfo
;

582 (*
	t∑_sök_öput_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_sök_öput_öfo
 *
	ti
, 
	teﬁ
, *
	tu£rd©a
);

585 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sök_öput_öfo
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_sök_öput_öfo_cb_t
 
cb
, *
u£rd©a
);

588 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sök_öput_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_sök_öput_öfo_cb_t
 
cb
, *
u£rd©a
);

591 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_move_sök_öput_by_«me
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° *
sök_«me
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

594 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_move_sök_öput_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, uöt32_à
sök_idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

597 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_öput_vﬁume
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° 
∑_cvﬁume
 *
vﬁume
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

600 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_öput_muã
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
muã
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

603 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_kûl_sök_öput
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

612 
	s∑_sour˚_ouçut_öfo
 {

613 
uöt32_t
 
ödex
;

614 c⁄° *
«me
;

615 
uöt32_t
 
ow√r_moduÀ
;

616 
uöt32_t
 
˛õ¡
;

617 
uöt32_t
 
sour˚
;

618 
∑_ßm∂e_•ec
 
ßm∂e_•ec
;

619 
∑_ch™√l_m≠
 
ch™√l_m≠
;

620 
∑_u£c_t
 
buf„r_u£c
;

621 
∑_u£c_t
 
sour˚_u£c
;

622 c⁄° *
ªßm∂e_mëhod
;

623 c⁄° *
drivî
;

624 
∑_¥›li°
 *
¥›li°
;

625 
c‹ked
;

626 
∑_cvﬁume
 
vﬁume
;

627 
muã
;

628 
has_vﬁume
;

629 
vﬁume_wrôabÀ
;

630 
∑_f‹m©_öfo
 *
f‹m©
;

631 } 
	t∑_sour˚_ouçut_öfo
;

634 (*
	t∑_sour˚_ouçut_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_sour˚_ouçut_öfo
 *
	ti
, 
	teﬁ
, *
	tu£rd©a
);

637 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sour˚_ouçut_öfo
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_sour˚_ouçut_öfo_cb_t
 
cb
, *
u£rd©a
);

640 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sour˚_ouçut_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_sour˚_ouçut_öfo_cb_t
 
cb
, *
u£rd©a
);

643 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_move_sour˚_ouçut_by_«me
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° *
sour˚_«me
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

646 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_move_sour˚_ouçut_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, uöt32_à
sour˚_idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

649 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_ouçut_vﬁume
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° 
∑_cvﬁume
 *
vﬁume
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

652 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_ouçut_muã
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
muã
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

655 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_kûl_sour˚_ouçut
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

664 
	s∑_°©_öfo
 {

665 
uöt32_t
 
memblock_tŸÆ
;

666 
uöt32_t
 
memblock_tŸÆ_size
;

667 
uöt32_t
 
memblock_Æloˇãd
;

668 
uöt32_t
 
memblock_Æloˇãd_size
;

669 
uöt32_t
 
sˇche_size
;

670 } 
	t∑_°©_öfo
;

673 (*
	t∑_°©_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_°©_öfo
 *
	ti
, *
	tu£rd©a
);

676 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_°©
(
∑_c⁄ãxt
 *
c
, 
∑_°©_öfo_cb_t
 
cb
, *
u£rd©a
);

685 
	s∑_ßm∂e_öfo
 {

686 
uöt32_t
 
ödex
;

687 c⁄° *
«me
;

688 
∑_cvﬁume
 
vﬁume
;

689 
∑_ßm∂e_•ec
 
ßm∂e_•ec
;

690 
∑_ch™√l_m≠
 
ch™√l_m≠
;

691 
∑_u£c_t
 
duøti⁄
;

692 
uöt32_t
 
byãs
;

693 
œzy
;

694 c⁄° *
fûíame
;

695 
∑_¥›li°
 *
¥›li°
;

696 } 
	t∑_ßm∂e_öfo
;

699 (*
	t∑_ßm∂e_öfo_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_ßm∂e_öfo
 *
	ti
, 
	teﬁ
, *
	tu£rd©a
);

702 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_ßm∂e_öfo_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_ßm∂e_öfo_cb_t
 
cb
, *
u£rd©a
);

705 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_ßm∂e_öfo_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_ßm∂e_öfo_cb_t
 
cb
, *
u£rd©a
);

708 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_ßm∂e_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_ßm∂e_öfo_cb_t
 
cb
, *
u£rd©a
);

717 
	e∑_autﬁﬂd_ty≥
 {

718 
PA_AUTOLOAD_SINK
 = 0,

719 
PA_AUTOLOAD_SOURCE
 = 1

720 } 
	t∑_autﬁﬂd_ty≥_t
;

725 
	s∑_autﬁﬂd_öfo
 {

726 
uöt32_t
 
ödex
;

727 c⁄° *
«me
;

728 
∑_autﬁﬂd_ty≥_t
 
ty≥
;

729 c⁄° *
moduÀ
;

730 c⁄° *
¨gumít
;

731 } 
	t∑_autﬁﬂd_öfo
;

734 (*
	t∑_autﬁﬂd_öfo_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_autﬁﬂd_öfo
 *
	ti
, 
	teﬁ
, *
	tu£rd©a
);

737 
∑_›î©i⁄
* 
	$∑_c⁄ãxt_gë_autﬁﬂd_öfo_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_autﬁﬂd_ty≥_t
 
ty≥
, 
∑_autﬁﬂd_öfo_cb_t
 
cb
, *
u£rd©a
Ë
PA_GCC_DEPRECATED
;

740 
∑_›î©i⁄
* 
	$∑_c⁄ãxt_gë_autﬁﬂd_öfo_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_autﬁﬂd_öfo_cb_t
 
cb
, *
u£rd©a
Ë
PA_GCC_DEPRECATED
;

743 
∑_›î©i⁄
* 
	$∑_c⁄ãxt_gë_autﬁﬂd_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_autﬁﬂd_öfo_cb_t
 
cb
, *
u£rd©a
Ë
PA_GCC_DEPRECATED
;

746 
∑_›î©i⁄
* 
	$∑_c⁄ãxt_add_autﬁﬂd
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_autﬁﬂd_ty≥_t
 
ty≥
, c⁄° *
moduÀ
, c⁄° *
¨gumít
, 
∑_c⁄ãxt_ödex_cb_t
, * 
u£rd©a
Ë
PA_GCC_DEPRECATED
;

749 
∑_›î©i⁄
* 
	$∑_c⁄ãxt_ªmove_autﬁﬂd_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_autﬁﬂd_ty≥_t
 
ty≥
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
Ë
PA_GCC_DEPRECATED
;

752 
∑_›î©i⁄
* 
	$∑_c⁄ãxt_ªmove_autﬁﬂd_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
Ë
PA_GCC_DEPRECATED
;

758 
PA_C_DECL_END


	@/usr/include/pulse/mainloop-api.h

1 #i‚de‡
foomaölo›≠ihfoo


2 
	#foomaölo›≠ihfoo


	)

24 
	~<sys/time.h
>

26 
	~<pul£/cde˛.h
>

27 
	~<pul£/vîsi⁄.h
>

44 
PA_C_DECL_BEGIN


47 
∑_maölo›_≠i
 
	t∑_maölo›_≠i
;

50 
	e∑_io_evít_Êags
 {

51 
	mPA_IO_EVENT_NULL
 = 0,

52 
	mPA_IO_EVENT_INPUT
 = 1,

53 
	mPA_IO_EVENT_OUTPUT
 = 2,

54 
	mPA_IO_EVENT_HANGUP
 = 4,

55 
	mPA_IO_EVENT_ERROR
 = 8

56 } 
	t∑_io_evít_Êags_t
;

59 
∑_io_evít
 
	t∑_io_evít
;

61 (*
	t∑_io_evít_cb_t
)(
	t∑_maölo›_≠i
*
	tó
, 
	t∑_io_evít
* 
	te
, 
	tfd
, 
	t∑_io_evít_Êags_t
 
	tevíts
, *
	tu£rd©a
);

63 (*
	t∑_io_evít_de°roy_cb_t
)(
	t∑_maölo›_≠i
*
	ta
, 
	t∑_io_evít
 *
	te
, *
	tu£rd©a
);

66 
∑_time_evít
 
	t∑_time_evít
;

68 (*
	t∑_time_evít_cb_t
)(
	t∑_maölo›_≠i
*
	ta
, 
	t∑_time_evít
* 
	te
, c⁄° 
	ttimevÆ
 *
	ttv
, *
	tu£rd©a
);

70 (*
	t∑_time_evít_de°roy_cb_t
)(
	t∑_maölo›_≠i
*
	ta
, 
	t∑_time_evít
 *
	te
, *
	tu£rd©a
);

73 
∑_de„r_evít
 
	t∑_de„r_evít
;

75 (*
	t∑_de„r_evít_cb_t
)(
	t∑_maölo›_≠i
*
	ta
, 
	t∑_de„r_evít
* 
	te
, *
	tu£rd©a
);

77 (*
	t∑_de„r_evít_de°roy_cb_t
)(
	t∑_maölo›_≠i
*
	ta
, 
	t∑_de„r_evít
 *
	te
, *
	tu£rd©a
);

80 
	s∑_maölo›_≠i
 {

82 *
u£rd©a
;

85 
∑_io_evít
* (*
io_√w
)(
∑_maölo›_≠i
*
a
, 
fd
, 
∑_io_evít_Êags_t
 
evíts
, 
∑_io_evít_cb_t
 
cb
, *
u£rd©a
);

87 (*
io_íabÀ
)(
∑_io_evít
* 
e
, 
∑_io_evít_Êags_t
 
evíts
);

89 (*
io_‰ì
)(
∑_io_evít
* 
e
);

91 (*
io_£t_de°roy
)(
∑_io_evít
 *
e
, 
∑_io_evít_de°roy_cb_t
 
cb
);

94 
∑_time_evít
* (*
time_√w
)(
∑_maölo›_≠i
*
a
, c⁄° 
timevÆ
 *
tv
, 
∑_time_evít_cb_t
 
cb
, *
u£rd©a
);

96 (*
time_ª°¨t
)(
∑_time_evít
* 
e
, c⁄° 
timevÆ
 *
tv
);

98 (*
time_‰ì
)(
∑_time_evít
* 
e
);

100 (*
time_£t_de°roy
)(
∑_time_evít
 *
e
, 
∑_time_evít_de°roy_cb_t
 
cb
);

103 
∑_de„r_evít
* (*
de„r_√w
)(
∑_maölo›_≠i
*
a
, 
∑_de„r_evít_cb_t
 
cb
, *
u£rd©a
);

105 (*
de„r_íabÀ
)(
∑_de„r_evít
* 
e
, 
b
);

107 (*
de„r_‰ì
)(
∑_de„r_evít
* 
e
);

109 (*
de„r_£t_de°roy
)(
∑_de„r_evít
 *
e
, 
∑_de„r_evít_de°roy_cb_t
 
cb
);

112 (*
quô
)(
∑_maölo›_≠i
*
a
, 
ªtvÆ
);

120 
	`∑_maölo›_≠i_⁄˚
(
∑_maölo›_≠i
*
m
, (*
ˇŒback
)’a_maölo›_≠i*m, *
u£rd©a
), *userdata);

122 
PA_C_DECL_END


	@/usr/include/pulse/mainloop-signal.h

1 #i‚de‡
foomaölo›sig«lhfoo


2 
	#foomaölo›sig«lhfoo


	)

24 
	~<pul£/maölo›-≠i.h
>

25 
	~<pul£/cde˛.h
>

27 
PA_C_DECL_BEGIN


39 
∑_sig«l_evít
 
	t∑_sig«l_evít
;

42 (*
	t∑_sig«l_cb_t
Ë(
	t∑_maölo›_≠i
 *
	t≠i
, 
	t∑_sig«l_evít
*
	te
, 
	tsig
, *
	tu£rd©a
);

45 (*
	t∑_sig«l_de°roy_cb_t
Ë(
	t∑_maölo›_≠i
 *
	t≠i
, 
	t∑_sig«l_evít
*
	te
, *
	tu£rd©a
);

48 
	`∑_sig«l_öô
(
∑_maölo›_≠i
 *
≠i
);

51 
	`∑_sig«l_d⁄e
();

54 
∑_sig«l_evít
* 
	`∑_sig«l_√w
(
sig
, 
∑_sig«l_cb_t
 
ˇŒback
, *
u£rd©a
);

57 
	`∑_sig«l_‰ì
(
∑_sig«l_evít
 *
e
);

60 
	`∑_sig«l_£t_de°roy
(
∑_sig«l_evít
 *
e
, 
∑_sig«l_de°roy_cb_t
 
ˇŒback
);

62 
PA_C_DECL_END


	@/usr/include/pulse/mainloop.h

1 #i‚de‡
foomaölo›hfoo


2 
	#foomaölo›hfoo


	)

24 
	~<pul£/maölo›-≠i.h
>

25 
	~<pul£/cde˛.h
>

27 
PA_C_DECL_BEGIN


29 
	gpﬁlfd
;

78 
∑_maölo›
 
	t∑_maölo›
;

81 
∑_maölo›
 *
∑_maölo›_√w
();

84 
∑_maölo›_‰ì
(
∑_maölo›
* 
m
);

89 
∑_maölo›_¥ï¨e
(
∑_maölo›
 *
m
, 
timeout
);

92 
∑_maölo›_pﬁl
(
∑_maölo›
 *
m
);

96 
∑_maölo›_di•©ch
(
∑_maölo›
 *
m
);

99 
∑_maölo›_gë_ªtvÆ
(
∑_maölo›
 *
m
);

107 
∑_maölo›_ôî©e
(
∑_maölo›
 *
m
, 
block
, *
ªtvÆ
);

110 
∑_maölo›_run
(
∑_maölo›
 *
m
, *
ªtvÆ
);

115 
∑_maölo›_≠i
* 
∑_maölo›_gë_≠i
(
∑_maölo›
*
m
);

118 
∑_maölo›_quô
(
∑_maölo›
 *
m
, 
ªtvÆ
);

121 
∑_maölo›_wakeup
(
∑_maölo›
 *
m
);

124 (*
	t∑_pﬁl_func
)(
	tpﬁlfd
 *
	tufds
, 
	tnfds
, 
	ttimeout
, *
	tu£rd©a
);

127 
	`∑_maölo›_£t_pﬁl_func
(
∑_maölo›
 *
m
, 
∑_pﬁl_func
 
pﬁl_func
, *
u£rd©a
);

129 
PA_C_DECL_END


	@/usr/include/pulse/operation.h

1 #i‚de‡
foo›î©i⁄hfoo


2 
	#foo›î©i⁄hfoo


	)

23 
	~<pul£/cde˛.h
>

24 
	~<pul£/def.h
>

25 
	~<pul£/vîsi⁄.h
>

30 
PA_C_DECL_BEGIN


33 
∑_›î©i⁄
 
	t∑_›î©i⁄
;

36 (*
	t∑_›î©i⁄_nŸify_cb_t
Ë(
	t∑_›î©i⁄
 *
	to
, *
	tu£rd©a
);

39 
∑_›î©i⁄
 *
	`∑_›î©i⁄_ªf
’a_›î©i⁄ *
o
);

42 
	`∑_›î©i⁄_uƒef
(
∑_›î©i⁄
 *
o
);

49 
	`∑_›î©i⁄_ˇn˚l
(
∑_›î©i⁄
 *
o
);

52 
∑_›î©i⁄_°©e_t
 
	`∑_›î©i⁄_gë_°©e
(
∑_›î©i⁄
 *
o
);

60 
	`∑_›î©i⁄_£t_°©e_ˇŒback
(
∑_›î©i⁄
 *
o
, 
∑_›î©i⁄_nŸify_cb_t
 
cb
, *
u£rd©a
);

62 
PA_C_DECL_END


	@/usr/include/pulse/proplist.h

1 #i‚de‡
fo›ul£¥›li°hfoo


2 
	#fo›ul£¥›li°hfoo


	)

23 
	~<sys/ty≥s.h
>

25 
	~<pul£/cde˛.h
>

26 
	~<pul£/gccma¸o.h
>

27 
	~<pul£/vîsi⁄.h
>

32 
	gPA_C_DECL_BEGIN


35 
	#PA_PROP_MEDIA_NAME
 "medü.«me"

	)

38 
	#PA_PROP_MEDIA_TITLE
 "medü.tôÀ"

	)

41 
	#PA_PROP_MEDIA_ARTIST
 "medü.¨ti°"

	)

44 
	#PA_PROP_MEDIA_COPYRIGHT
 "medü.c›yright"

	)

47 
	#PA_PROP_MEDIA_SOFTWARE
 "medü.so·w¨e"

	)

50 
	#PA_PROP_MEDIA_LANGUAGE
 "medü.œnguage"

	)

53 
	#PA_PROP_MEDIA_FILENAME
 "medü.fûíame"

	)

57 
	#PA_PROP_MEDIA_ICON
 "medü.ic⁄"

	)

61 
	#PA_PROP_MEDIA_ICON_NAME
 "medü.ic⁄_«me"

	)

64 
	#PA_PROP_MEDIA_ROLE
 "medü.rﬁe"

	)

67 
	#PA_PROP_FILTER_WANT
 "fûãr.w™t"

	)

70 
	#PA_PROP_FILTER_APPLY
 "fûãr.≠∂y"

	)

73 
	#PA_PROP_FILTER_SUPPRESS
 "fûãr.suµªss"

	)

76 
	#PA_PROP_EVENT_ID
 "evít.id"

	)

79 
	#PA_PROP_EVENT_DESCRIPTION
 "evít.des¸ùti⁄"

	)

82 
	#PA_PROP_EVENT_MOUSE_X
 "evít.mou£.x"

	)

85 
	#PA_PROP_EVENT_MOUSE_Y
 "evít.mou£.y"

	)

88 
	#PA_PROP_EVENT_MOUSE_HPOS
 "evít.mou£.hpos"

	)

91 
	#PA_PROP_EVENT_MOUSE_VPOS
 "evít.mou£.vpos"

	)

94 
	#PA_PROP_EVENT_MOUSE_BUTTON
 "evít.mou£.buâ⁄"

	)

97 
	#PA_PROP_WINDOW_NAME
 "wödow.«me"

	)

100 
	#PA_PROP_WINDOW_ID
 "wödow.id"

	)

104 
	#PA_PROP_WINDOW_ICON
 "wödow.ic⁄"

	)

108 
	#PA_PROP_WINDOW_ICON_NAME
 "wödow.ic⁄_«me"

	)

111 
	#PA_PROP_WINDOW_X
 "wödow.x"

	)

114 
	#PA_PROP_WINDOW_Y
 "wödow.y"

	)

117 
	#PA_PROP_WINDOW_WIDTH
 "wödow.width"

	)

120 
	#PA_PROP_WINDOW_HEIGHT
 "wödow.height"

	)

123 
	#PA_PROP_WINDOW_HPOS
 "wödow.hpos"

	)

126 
	#PA_PROP_WINDOW_VPOS
 "wödow.vpos"

	)

129 
	#PA_PROP_WINDOW_DESKTOP
 "wödow.deskt›"

	)

132 
	#PA_PROP_WINDOW_X11_DISPLAY
 "wödow.x11.di•œy"

	)

135 
	#PA_PROP_WINDOW_X11_SCREEN
 "wödow.x11.s¸ìn"

	)

138 
	#PA_PROP_WINDOW_X11_MONITOR
 "wödow.x11.m⁄ô‹"

	)

141 
	#PA_PROP_WINDOW_X11_XID
 "wödow.x11.xid"

	)

144 
	#PA_PROP_APPLICATION_NAME
 "≠∂iˇti⁄.«me"

	)

147 
	#PA_PROP_APPLICATION_ID
 "≠∂iˇti⁄.id"

	)

150 
	#PA_PROP_APPLICATION_VERSION
 "≠∂iˇti⁄.vîsi⁄"

	)

154 
	#PA_PROP_APPLICATION_ICON
 "≠∂iˇti⁄.ic⁄"

	)

158 
	#PA_PROP_APPLICATION_ICON_NAME
 "≠∂iˇti⁄.ic⁄_«me"

	)

161 
	#PA_PROP_APPLICATION_LANGUAGE
 "≠∂iˇti⁄.œnguage"

	)

164 
	#PA_PROP_APPLICATION_PROCESS_ID
 "≠∂iˇti⁄.¥o˚ss.id"

	)

167 
	#PA_PROP_APPLICATION_PROCESS_BINARY
 "≠∂iˇti⁄.¥o˚ss.bö¨y"

	)

170 
	#PA_PROP_APPLICATION_PROCESS_USER
 "≠∂iˇti⁄.¥o˚ss.u£r"

	)

173 
	#PA_PROP_APPLICATION_PROCESS_HOST
 "≠∂iˇti⁄.¥o˚ss.ho°"

	)

176 
	#PA_PROP_APPLICATION_PROCESS_MACHINE_ID
 "≠∂iˇti⁄.¥o˚ss.machöe_id"

	)

179 
	#PA_PROP_APPLICATION_PROCESS_SESSION_ID
 "≠∂iˇti⁄.¥o˚ss.£ssi⁄_id"

	)

182 
	#PA_PROP_DEVICE_STRING
 "devi˚.°rög"

	)

185 
	#PA_PROP_DEVICE_API
 "devi˚.≠i"

	)

188 
	#PA_PROP_DEVICE_DESCRIPTION
 "devi˚.des¸ùti⁄"

	)

191 
	#PA_PROP_DEVICE_BUS_PATH
 "devi˚.bus_∑th"

	)

194 
	#PA_PROP_DEVICE_SERIAL
 "devi˚.£rül"

	)

197 
	#PA_PROP_DEVICE_VENDOR_ID
 "devi˚.víd‹.id"

	)

200 
	#PA_PROP_DEVICE_VENDOR_NAME
 "devi˚.víd‹.«me"

	)

203 
	#PA_PROP_DEVICE_PRODUCT_ID
 "devi˚.¥odu˘.id"

	)

206 
	#PA_PROP_DEVICE_PRODUCT_NAME
 "devi˚.¥odu˘.«me"

	)

209 
	#PA_PROP_DEVICE_CLASS
 "devi˚.˛ass"

	)

212 
	#PA_PROP_DEVICE_FORM_FACTOR
 "devi˚.f‹m_Á˘‹"

	)

215 
	#PA_PROP_DEVICE_BUS
 "devi˚.bus"

	)

219 
	#PA_PROP_DEVICE_ICON
 "devi˚.ic⁄"

	)

223 
	#PA_PROP_DEVICE_ICON_NAME
 "devi˚.ic⁄_«me"

	)

226 
	#PA_PROP_DEVICE_ACCESS_MODE
 "devi˚.ac˚ss_mode"

	)

229 
	#PA_PROP_DEVICE_MASTER_DEVICE
 "devi˚.ma°î_devi˚"

	)

232 
	#PA_PROP_DEVICE_BUFFERING_BUFFER_SIZE
 "devi˚.buf„rög.buf„r_size"

	)

235 
	#PA_PROP_DEVICE_BUFFERING_FRAGMENT_SIZE
 "devi˚.buf„rög.‰agmít_size"

	)

238 
	#PA_PROP_DEVICE_PROFILE_NAME
 "devi˚.¥ofûe.«me"

	)

241 
	#PA_PROP_DEVICE_INTENDED_ROLES
 "devi˚.öãnded_rﬁes"

	)

244 
	#PA_PROP_DEVICE_PROFILE_DESCRIPTION
 "devi˚.¥ofûe.des¸ùti⁄"

	)

247 
	#PA_PROP_MODULE_AUTHOR
 "moduÀ.auth‹"

	)

250 
	#PA_PROP_MODULE_DESCRIPTION
 "moduÀ.des¸ùti⁄"

	)

253 
	#PA_PROP_MODULE_USAGE
 "moduÀ.ußge"

	)

256 
	#PA_PROP_MODULE_VERSION
 "moduÀ.vîsi⁄"

	)

259 
	#PA_PROP_FORMAT_SAMPLE_FORMAT
 "f‹m©.ßm∂e_f‹m©"

	)

262 
	#PA_PROP_FORMAT_RATE
 "f‹m©.øã"

	)

265 
	#PA_PROP_FORMAT_CHANNELS
 "f‹m©.ch™√ls"

	)

268 
	#PA_PROP_FORMAT_CHANNEL_MAP
 "f‹m©.ch™√l_m≠"

	)

272 
∑_¥›li°
 
	t∑_¥›li°
;

275 
∑_¥›li°
* 
∑_¥›li°_√w
();

278 
∑_¥›li°_‰ì
(
∑_¥›li°
* 
p
);

281 
∑_¥›li°_key_vÆid
(c⁄° *
key
);

287 
∑_¥›li°_£ts
(
∑_¥›li°
 *
p
, c⁄° *
key
, c⁄° *
vÆue
);

295 
∑_¥›li°_£ç
(
∑_¥›li°
 *
p
, c⁄° *
∑ú
);

302 
	$∑_¥›li°_£tf
(
∑_¥›li°
 *
p
, c⁄° *
key
, c⁄° *
f‹m©
, ...Ë
	`PA_GCC_PRINTF_ATTR
(3,4);

307 
	`∑_¥›li°_£t
(
∑_¥›li°
 *
p
, c⁄° *
key
, c⁄° *
d©a
, 
size_t
 
nbyãs
);

313 c⁄° *
	`∑_¥›li°_gës
(
∑_¥›li°
 *
p
, c⁄° *
key
);

320 
	`∑_¥›li°_gë
(
∑_¥›li°
 *
p
, c⁄° *
key
, c⁄° **
d©a
, 
size_t
 *
nbyãs
);

323 
	e∑_upd©e_mode
 {

324 
PA_UPDATE_SET


328 
PA_UPDATE_MERGE


333 
PA_UPDATE_REPLACE


337 } 
	t∑_upd©e_mode_t
;

340 
	#PA_UPDATE_SET
 
PA_UPDATE_SET


	)

341 
	#PA_UPDATE_MERGE
 
PA_UPDATE_MERGE


	)

342 
	#PA_UPDATE_REPLACE
 
PA_UPDATE_REPLACE


	)

347 
	`∑_¥›li°_upd©e
(
∑_¥›li°
 *
p
, 
∑_upd©e_mode_t
 
mode
, c⁄°Öa_¥›li° *
Ÿhî
);

351 
	`∑_¥›li°_un£t
(
∑_¥›li°
 *
p
, c⁄° *
key
);

358 
	`∑_¥›li°_un£t_m™y
(
∑_¥›li°
 *
p
, c⁄° * c⁄° 
keys
[]);

369 c⁄° *
	`∑_¥›li°_ôî©e
(
∑_¥›li°
 *
p
, **
°©e
);

375 *
	`∑_¥›li°_to_°rög
(
∑_¥›li°
 *
p
);

380 *
	`∑_¥›li°_to_°rög_£p
(
∑_¥›li°
 *
p
, c⁄° *
£p
);

384 
∑_¥›li°
 *
	`∑_¥›li°_‰om_°rög
(c⁄° *
°r
);

388 
	`∑_¥›li°_c⁄èös
(
∑_¥›li°
 *
p
, c⁄° *
key
);

391 
	`∑_¥›li°_˛ór
(
∑_¥›li°
 *
p
);

395 
∑_¥›li°
* 
	`∑_¥›li°_c›y
(c⁄°Öa_¥›li° *
p
);

398 
	`∑_¥›li°_size
(
∑_¥›li°
 *
p
);

401 
	`∑_¥›li°_i£m±y
(
∑_¥›li°
 *
p
);

405 
	`∑_¥›li°_equÆ
(
∑_¥›li°
 *
a
,Öa_¥›li° *
b
);

407 
PA_C_DECL_END


	@/usr/include/pulse/rtclock.h

1 #i‚de‡
fo‹t˛ockfoo


2 
	#fo‹t˛ockfoo


	)

23 
	~<pul£/cde˛.h
>

24 
	~<pul£/ßm∂e.h
>

29 
PA_C_DECL_BEGIN


34 
∑_u£c_t
 
∑_π˛ock_now
();

36 
	gPA_C_DECL_END


	@/usr/include/pulse/sample.h

1 #i‚de‡
fooßm∂ehfoo


2 
	#fooßm∂ehfoo


	)

24 
	~<öây≥s.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/∑øm.h
>

28 
	~<pul£/gccma¸o.h
>

29 
	~<pul£/cde˛.h
>

30 
	~<pul£/vîsi⁄.h
>

110 
	gPA_C_DECL_BEGIN


112 #i‡!
deföed
(
WORDS_BIGENDIAN
)

114 #i‡
deföed
(
__BYTE_ORDER
)

115 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


116 
	#WORDS_BIGENDIAN


	)

121 #i‡
deföed
(
__•¨c__
Ë&& deföed(
_BIG_ENDIAN
)

122 
	#WORDS_BIGENDIAN


	)

128 
	#PA_CHANNELS_MAX
 32U

	)

131 
	#PA_RATE_MAX
 (48000U*8U)

	)

134 
	e∑_ßm∂e_f‹m©
 {

135 
	mPA_SAMPLE_U8
,

138 
	mPA_SAMPLE_ALAW
,

141 
	mPA_SAMPLE_ULAW
,

144 
	mPA_SAMPLE_S16LE
,

147 
	mPA_SAMPLE_S16BE
,

150 
	mPA_SAMPLE_FLOAT32LE
,

153 
	mPA_SAMPLE_FLOAT32BE
,

156 
	mPA_SAMPLE_S32LE
,

159 
	mPA_SAMPLE_S32BE
,

162 
	mPA_SAMPLE_S24LE
,

165 
	mPA_SAMPLE_S24BE
,

168 
	mPA_SAMPLE_S24_32LE
,

171 
	mPA_SAMPLE_S24_32BE
,

174 
	mPA_SAMPLE_MAX
,

177 
	mPA_SAMPLE_INVALID
 = -1

179 } 
	t∑_ßm∂e_f‹m©_t
;

181 #ifde‡
WORDS_BIGENDIAN


183 
	#PA_SAMPLE_S16NE
 
PA_SAMPLE_S16BE


	)

185 
	#PA_SAMPLE_FLOAT32NE
 
PA_SAMPLE_FLOAT32BE


	)

187 
	#PA_SAMPLE_S32NE
 
PA_SAMPLE_S32BE


	)

189 
	#PA_SAMPLE_S24NE
 
PA_SAMPLE_S24BE


	)

191 
	#PA_SAMPLE_S24_32NE
 
PA_SAMPLE_S24_32BE


	)

194 
	#PA_SAMPLE_S16RE
 
PA_SAMPLE_S16LE


	)

196 
	#PA_SAMPLE_FLOAT32RE
 
PA_SAMPLE_FLOAT32LE


	)

198 
	#PA_SAMPLE_S32RE
 
PA_SAMPLE_S32LE


	)

200 
	#PA_SAMPLE_S24RE
 
PA_SAMPLE_S24LE


	)

202 
	#PA_SAMPLE_S24_32RE
 
PA_SAMPLE_S24_32LE


	)

205 
	#PA_SAMPLE_S16NE
 
PA_SAMPLE_S16LE


	)

207 
	#PA_SAMPLE_FLOAT32NE
 
PA_SAMPLE_FLOAT32LE


	)

209 
	#PA_SAMPLE_S32NE
 
PA_SAMPLE_S32LE


	)

211 
	#PA_SAMPLE_S24NE
 
PA_SAMPLE_S24LE


	)

213 
	#PA_SAMPLE_S24_32NE
 
PA_SAMPLE_S24_32LE


	)

216 
	#PA_SAMPLE_S16RE
 
PA_SAMPLE_S16BE


	)

218 
	#PA_SAMPLE_FLOAT32RE
 
PA_SAMPLE_FLOAT32BE


	)

220 
	#PA_SAMPLE_S32RE
 
PA_SAMPLE_S32BE


	)

222 
	#PA_SAMPLE_S24RE
 
PA_SAMPLE_S24BE


	)

224 
	#PA_SAMPLE_S24_32RE
 
PA_SAMPLE_S24_32BE


	)

228 
	#PA_SAMPLE_FLOAT32
 
PA_SAMPLE_FLOAT32NE


	)

232 
	#PA_SAMPLE_U8
 
PA_SAMPLE_U8


	)

233 
	#PA_SAMPLE_ALAW
 
PA_SAMPLE_ALAW


	)

234 
	#PA_SAMPLE_ULAW
 
PA_SAMPLE_ULAW


	)

235 
	#PA_SAMPLE_S16LE
 
PA_SAMPLE_S16LE


	)

236 
	#PA_SAMPLE_S16BE
 
PA_SAMPLE_S16BE


	)

237 
	#PA_SAMPLE_FLOAT32LE
 
PA_SAMPLE_FLOAT32LE


	)

238 
	#PA_SAMPLE_FLOAT32BE
 
PA_SAMPLE_FLOAT32BE


	)

239 
	#PA_SAMPLE_S32LE
 
PA_SAMPLE_S32LE


	)

240 
	#PA_SAMPLE_S32BE
 
PA_SAMPLE_S32BE


	)

241 
	#PA_SAMPLE_S24LE
 
PA_SAMPLE_S24LE


	)

242 
	#PA_SAMPLE_S24BE
 
PA_SAMPLE_S24BE


	)

243 
	#PA_SAMPLE_S24_32LE
 
PA_SAMPLE_S24_32LE


	)

244 
	#PA_SAMPLE_S24_32BE
 
PA_SAMPLE_S24_32BE


	)

248 
	s∑_ßm∂e_•ec
 {

249 
∑_ßm∂e_f‹m©_t
 
	mf‹m©
;

252 
uöt32_t
 
	møã
;

255 
uöt8_t
 
	mch™√ls
;

257 } 
	t∑_ßm∂e_•ec
;

260 
uöt64_t
 
	t∑_u£c_t
;

263 
size_t
 
	$∑_byãs_≥r_£c⁄d
(c⁄° 
∑_ßm∂e_•ec
 *
•ec
Ë
PA_GCC_PURE
;

266 
size_t
 
	$∑_‰ame_size
(c⁄° 
∑_ßm∂e_•ec
 *
•ec
Ë
PA_GCC_PURE
;

269 
size_t
 
	$∑_ßm∂e_size
(c⁄° 
∑_ßm∂e_•ec
 *
•ec
Ë
PA_GCC_PURE
;

273 
size_t
 
	$∑_ßm∂e_size_of_f‹m©
(
∑_ßm∂e_f‹m©_t
 
f
Ë
PA_GCC_PURE
;

278 
∑_u£c_t
 
	$∑_byãs_to_u£c
(
uöt64_t
 
Àngth
, c⁄° 
∑_ßm∂e_•ec
 *
•ec
Ë
PA_GCC_PURE
;

283 
size_t
 
	$∑_u£c_to_byãs
(
∑_u£c_t
 
t
, c⁄° 
∑_ßm∂e_•ec
 *
•ec
Ë
PA_GCC_PURE
;

288 
∑_ßm∂e_•ec
* 
	`∑_ßm∂e_•ec_öô
’a_ßm∂e_•e¯*
•ec
);

291 
	$∑_ßm∂e_f‹m©_vÆid
(
f‹m©
Ë
PA_GCC_PURE
;

294 
	$∑_ßm∂e_øã_vÆid
(
uöt32_t
 
øã
Ë
PA_GCC_PURE
;

298 
	$∑_ch™√ls_vÆid
(
uöt8_t
 
ch™√ls
Ë
PA_GCC_PURE
;

301 
	$∑_ßm∂e_•ec_vÆid
(c⁄° 
∑_ßm∂e_•ec
 *
•ec
Ë
PA_GCC_PURE
;

304 
	$∑_ßm∂e_•ec_equÆ
(c⁄° 
∑_ßm∂e_•ec
*
a
, c⁄°Öa_ßm∂e_•ec*
b
Ë
PA_GCC_PURE
;

307 c⁄° *
	$∑_ßm∂e_f‹m©_to_°rög
(
∑_ßm∂e_f‹m©_t
 
f
Ë
PA_GCC_PURE
;

310 
∑_ßm∂e_f‹m©_t
 
	$∑_∑r£_ßm∂e_f‹m©
(c⁄° *
f‹m©
Ë
PA_GCC_PURE
;

317 
	#PA_SAMPLE_SPEC_SNPRINT_MAX
 32

	)

320 * 
	`∑_ßm∂e_•ec_¢¥öt
(*
s
, 
size_t
 
l
, c⁄° 
∑_ßm∂e_•ec
 *
•ec
);

327 
	#PA_BYTES_SNPRINT_MAX
 11

	)

330 * 
	`∑_byãs_¢¥öt
(*
s
, 
size_t
 
l
, 
v
);

334 
	$∑_ßm∂e_f‹m©_is_À
(
∑_ßm∂e_f‹m©_t
 
f
Ë
PA_GCC_PURE
;

338 
	$∑_ßm∂e_f‹m©_is_be
(
∑_ßm∂e_f‹m©_t
 
f
Ë
PA_GCC_PURE
;

340 #ifde‡
WORDS_BIGENDIAN


341 
	#∑_ßm∂e_f‹m©_is_√
(
f
Ë
	`∑_ßm∂e_f‹m©_is_be
(f)

	)

342 
	#∑_ßm∂e_f‹m©_is_ª
(
f
Ë
	`∑_ßm∂e_f‹m©_is_À
(f)

	)

346 
	#∑_ßm∂e_f‹m©_is_√
(
f
Ë
	`∑_ßm∂e_f‹m©_is_À
(f)

	)

349 
	#∑_ßm∂e_f‹m©_is_ª
(
f
Ë
	`∑_ßm∂e_f‹m©_is_be
(f)

	)

352 
PA_C_DECL_END


	@/usr/include/pulse/scache.h

1 #i‚de‡
foosˇchehfoo


2 
	#foosˇchehfoo


	)

24 
	~<sys/ty≥s.h
>

26 
	~<pul£/c⁄ãxt.h
>

27 
	~<pul£/°ªam.h
>

28 
	~<pul£/cde˛.h
>

29 
	~<pul£/vîsi⁄.h
>

80 
PA_C_DECL_BEGIN


85 (*
	t∑_c⁄ãxt_∂ay_ßm∂e_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, 
	tuöt32_t
 
	tidx
, *
	tu£rd©a
);

88 
	`∑_°ªam_c⁄√˘_u∂ﬂd
(
∑_°ªam
 *
s
, 
size_t
 
Àngth
);

93 
	`∑_°ªam_föish_u∂ﬂd
(
∑_°ªam
 *
s
);

96 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_ªmove_ßm∂e
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

101 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_∂ay_ßm∂e
(

102 
∑_c⁄ãxt
 *
c
 ,

103 c⁄° *
«me
 ,

104 c⁄° *
dev
 ,

105 
∑_vﬁume_t
 
vﬁume
 ,

106 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
 ,

107 *
u£rd©a
 );

113 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_∂ay_ßm∂e_wôh_¥›li°
(

114 
∑_c⁄ãxt
 *
c
 ,

115 c⁄° *
«me
 ,

116 c⁄° *
dev
 ,

117 
∑_vﬁume_t
 
vﬁume
 ,

118 
∑_¥›li°
 *
¥›li°
 ,

119 
∑_c⁄ãxt_∂ay_ßm∂e_cb_t
 
cb
 ,

120 *
u£rd©a
 );

122 
PA_C_DECL_END


	@/usr/include/pulse/stream.h

1 #i‚de‡
foo°ªamhfoo


2 
	#foo°ªamhfoo


	)

24 
	~<sys/ty≥s.h
>

26 
	~<pul£/ßm∂e.h
>

27 
	~<pul£/f‹m©.h
>

28 
	~<pul£/ch™√lm≠.h
>

29 
	~<pul£/vﬁume.h
>

30 
	~<pul£/def.h
>

31 
	~<pul£/cde˛.h
>

32 
	~<pul£/›î©i⁄.h
>

33 
	~<pul£/c⁄ãxt.h
>

34 
	~<pul£/¥›li°.h
>

332 
PA_C_DECL_BEGIN


335 
∑_°ªam
 
	t∑_°ªam
;

338 (*
	t∑_°ªam_suc˚ss_cb_t
Ë(
	t∑_°ªam
*
	ts
, 
	tsuc˚ss
, *
	tu£rd©a
);

341 (*
	t∑_°ªam_ªque°_cb_t
)(
	t∑_°ªam
 *
	tp
, 
	tsize_t
 
	tnbyãs
, *
	tu£rd©a
);

344 (*
	t∑_°ªam_nŸify_cb_t
)(
	t∑_°ªam
 *
	tp
, *
	tu£rd©a
);

352 (*
	t∑_°ªam_evít_cb_t
)(
	t∑_°ªam
 *
	tp
, c⁄° *
	t«me
, 
	t∑_¥›li°
 *
	t∂
, *
	tu£rd©a
);

357 
∑_°ªam
* 
	`∑_°ªam_√w
(

358 
∑_c⁄ãxt
 *
c
 ,

359 c⁄° *
«me
 ,

360 c⁄° 
∑_ßm∂e_•ec
 *
ss
 ,

361 c⁄° 
∑_ch™√l_m≠
 *
m≠
 );

366 
∑_°ªam
* 
	`∑_°ªam_√w_wôh_¥›li°
(

367 
∑_c⁄ãxt
 *
c
 ,

368 c⁄° *
«me
 ,

369 c⁄° 
∑_ßm∂e_•ec
 *
ss
 ,

370 c⁄° 
∑_ch™√l_m≠
 *
m≠
 ,

371 
∑_¥›li°
 *
p
 );

377 
∑_°ªam
 *
	`∑_°ªam_√w_exãnded
(

378 
∑_c⁄ãxt
 *
c
 ,

379 c⁄° *
«me
 ,

380 
∑_f‹m©_öfo
 * c⁄° * 
f‹m©s
 ,

381 
n_f‹m©s
 ,

382 
∑_¥›li°
 *
p
 );

385 
	`∑_°ªam_uƒef
(
∑_°ªam
 *
s
);

388 
∑_°ªam
 *
	`∑_°ªam_ªf
’a_°ªam *
s
);

391 
∑_°ªam_°©e_t
 
	`∑_°ªam_gë_°©e
(
∑_°ªam
 *
p
);

394 
∑_c⁄ãxt
* 
	`∑_°ªam_gë_c⁄ãxt
(
∑_°ªam
 *
p
);

400 
uöt32_t
 
	`∑_°ªam_gë_ödex
(
∑_°ªam
 *
s
);

411 
uöt32_t
 
	`∑_°ªam_gë_devi˚_ödex
(
∑_°ªam
 *
s
);

422 c⁄° *
	`∑_°ªam_gë_devi˚_«me
(
∑_°ªam
 *
s
);

428 
	`∑_°ªam_is_su•íded
(
∑_°ªam
 *
s
);

432 
	`∑_°ªam_is_c‹ked
(
∑_°ªam
 *
s
);

458 
	`∑_°ªam_c⁄√˘_∂ayback
(

459 
∑_°ªam
 *
s
 ,

460 c⁄° *
dev
 ,

461 c⁄° 
∑_buf„r_©å
 *
©å
 ,

462 
∑_°ªam_Êags_t
 
Êags
 ,

463 c⁄° 
∑_cvﬁume
 *
vﬁume
 ,

464 
∑_°ªam
 *
sync_°ªam
 );

467 
	`∑_°ªam_c⁄√˘_ªc‹d
(

468 
∑_°ªam
 *
s
 ,

469 c⁄° *
dev
 ,

470 c⁄° 
∑_buf„r_©å
 *
©å
 ,

471 
∑_°ªam_Êags_t
 
Êags
 );

474 
	`∑_°ªam_disc⁄√˘
(
∑_°ªam
 *
s
);

508 
	`∑_°ªam_begö_wrôe
(

509 
∑_°ªam
 *
p
,

510 **
d©a
,

511 
size_t
 *
nbyãs
);

522 
	`∑_°ªam_ˇn˚l_wrôe
(

523 
∑_°ªam
 *
p
);

547 
	`∑_°ªam_wrôe
(

548 
∑_°ªam
 *
p
 ,

549 c⁄° *
d©a
 ,

550 
size_t
 
nbyãs
 ,

551 
∑_‰ì_cb_t
 
‰ì_cb
 ,

552 
öt64_t
 
off£t
 ,

553 
∑_£ek_mode_t
 
£ek
 );

557 
	`∑_°ªam_wrôe_ext_‰ì
(

558 
∑_°ªam
 *
p
 ,

559 c⁄° *
d©a
 ,

560 
size_t
 
nbyãs
 ,

561 
∑_‰ì_cb_t
 
‰ì_cb
 ,

562 *
‰ì_cb_d©a
 ,

563 
öt64_t
 
off£t
 ,

564 
∑_£ek_mode_t
 
£ek
 );

582 
	`∑_°ªam_≥ek
(

583 
∑_°ªam
 *
p
 ,

584 c⁄° **
d©a
 ,

585 
size_t
 *
nbyãs
 );

589 
	`∑_°ªam_dr›
(
∑_°ªam
 *
p
);

599 
size_t
 
	`∑_°ªam_wrôabÀ_size
(
∑_°ªam
 *
p
);

602 
size_t
 
	`∑_°ªam_ªadabÀ_size
(
∑_°ªam
 *
p
);

608 
∑_›î©i⁄
* 
	`∑_°ªam_døö
(
∑_°ªam
 *
s
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

614 
∑_›î©i⁄
* 
	`∑_°ªam_upd©e_timög_öfo
(
∑_°ªam
 *
p
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

617 
	`∑_°ªam_£t_°©e_ˇŒback
(
∑_°ªam
 *
s
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

621 
	`∑_°ªam_£t_wrôe_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_ªque°_cb_t
 
cb
, *
u£rd©a
);

624 
	`∑_°ªam_£t_ªad_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_ªque°_cb_t
 
cb
, *
u£rd©a
);

627 
	`∑_°ªam_£t_ovîÊow_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

633 
öt64_t
 
	`∑_°ªam_gë_undîÊow_ödex
(
∑_°ªam
 *
p
);

636 
	`∑_°ªam_£t_undîÊow_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

643 
	`∑_°ªam_£t_°¨ãd_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

648 
	`∑_°ªam_£t_œãncy_upd©e_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

655 
	`∑_°ªam_£t_moved_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

665 
	`∑_°ªam_£t_su•íded_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

669 
	`∑_°ªam_£t_evít_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_evít_cb_t
 
cb
, *
u£rd©a
);

676 
	`∑_°ªam_£t_buf„r_©å_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

688 
∑_›î©i⁄
* 
	`∑_°ªam_c‹k
(
∑_°ªam
 *
s
, 
b
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

693 
∑_›î©i⁄
* 
	`∑_°ªam_Êush
(
∑_°ªam
 *
s
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

697 
∑_›î©i⁄
* 
	`∑_°ªam_¥ebuf
(
∑_°ªam
 *
s
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

702 
∑_›î©i⁄
* 
	`∑_°ªam_åiggî
(
∑_°ªam
 *
s
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

705 
∑_›î©i⁄
* 
	`∑_°ªam_£t_«me
(
∑_°ªam
 *
s
, c⁄° *
«me
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

738 
	`∑_°ªam_gë_time
(
∑_°ªam
 *
s
, 
∑_u£c_t
 *
r_u£c
);

752 
	`∑_°ªam_gë_œãncy
(
∑_°ªam
 *
s
, 
∑_u£c_t
 *
r_u£c
, *
√g©ive
);

768 c⁄° 
∑_timög_öfo
* 
	`∑_°ªam_gë_timög_öfo
(
∑_°ªam
 *
s
);

771 c⁄° 
∑_ßm∂e_•ec
* 
	`∑_°ªam_gë_ßm∂e_•ec
(
∑_°ªam
 *
s
);

774 c⁄° 
∑_ch™√l_m≠
* 
	`∑_°ªam_gë_ch™√l_m≠
(
∑_°ªam
 *
s
);

777 c⁄° 
∑_f‹m©_öfo
* 
	`∑_°ªam_gë_f‹m©_öfo
(
∑_°ªam
 *
s
);

787 c⁄° 
∑_buf„r_©å
* 
	`∑_°ªam_gë_buf„r_©å
(
∑_°ªam
 *
s
);

797 
∑_›î©i⁄
 *
	`∑_°ªam_£t_buf„r_©å
(
∑_°ªam
 *
s
, c⁄° 
∑_buf„r_©å
 *
©å
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

804 
∑_›î©i⁄
 *
	`∑_°ªam_upd©e_ßm∂e_øã
(
∑_°ªam
 *
s
, 
uöt32_t
 
øã
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

812 
∑_›î©i⁄
 *
	`∑_°ªam_¥›li°_upd©e
(
∑_°ªam
 *
s
, 
∑_upd©e_mode_t
 
mode
, 
∑_¥›li°
 *
p
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

816 
∑_›î©i⁄
 *
	`∑_°ªam_¥›li°_ªmove
(
∑_°ªam
 *
s
, c⁄° *c⁄° 
keys
[], 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

822 
	`∑_°ªam_£t_m⁄ô‹_°ªam
(
∑_°ªam
 *
s
, 
uöt32_t
 
sök_öput_idx
);

827 
uöt32_t
 
	`∑_°ªam_gë_m⁄ô‹_°ªam
(
∑_°ªam
 *
s
);

829 
PA_C_DECL_END


	@/usr/include/pulse/subscribe.h

1 #i‚de‡
foosubs¸ibehfoo


2 
	#foosubs¸ibehfoo


	)

24 
	~<öây≥s.h
>

26 
	~<pul£/def.h
>

27 
	~<pul£/c⁄ãxt.h
>

28 
	~<pul£/cde˛.h
>

29 
	~<pul£/vîsi⁄.h
>

70 
PA_C_DECL_BEGIN


73 (*
	t∑_c⁄ãxt_subs¸ibe_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, 
	t∑_subs¸ùti⁄_evít_ty≥_t
 
	tt
, 
	tuöt32_t
 
	tidx
, *
	tu£rd©a
);

76 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_subs¸ibe
(
∑_c⁄ãxt
 *
c
, 
∑_subs¸ùti⁄_mask_t
 
m
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

79 
	`∑_c⁄ãxt_£t_subs¸ibe_ˇŒback
(
∑_c⁄ãxt
 *
c
, 
∑_c⁄ãxt_subs¸ibe_cb_t
 
cb
, *
u£rd©a
);

81 
PA_C_DECL_END


	@/usr/include/pulse/thread-mainloop.h

1 #i‚de‡
foŸhªadmaölo›hfoo


2 
	#foŸhªadmaölo›hfoo


	)

24 
	~<pul£/maölo›-≠i.h
>

25 
	~<pul£/cde˛.h
>

26 
	~<pul£/vîsi⁄.h
>

28 
PA_C_DECL_BEGIN


246 
∑_thªaded_maölo›
 
	t∑_thªaded_maölo›
;

251 
∑_thªaded_maölo›
 *
∑_thªaded_maölo›_√w
();

256 
∑_thªaded_maölo›_‰ì
(
∑_thªaded_maölo›
* 
m
);

259 
∑_thªaded_maölo›_°¨t
(
∑_thªaded_maölo›
 *
m
);

263 
∑_thªaded_maölo›_°›
(
∑_thªaded_maölo›
 *
m
);

271 
∑_thªaded_maölo›_lock
(
∑_thªaded_maölo›
 *
m
);

274 
∑_thªaded_maölo›_u∆ock
(
∑_thªaded_maölo›
 *
m
);

285 
∑_thªaded_maölo›_waô
(
∑_thªaded_maölo›
 *
m
);

292 
∑_thªaded_maölo›_sig«l
(
∑_thªaded_maölo›
 *
m
, 
waô_f‹_ac˚±
);

298 
∑_thªaded_maölo›_ac˚±
(
∑_thªaded_maölo›
 *
m
);

302 
∑_thªaded_maölo›_gë_ªtvÆ
(
∑_thªaded_maölo›
 *
m
);

307 
∑_maölo›_≠i
* 
∑_thªaded_maölo›_gë_≠i
(
∑_thªaded_maölo›
*
m
);

310 
∑_thªaded_maölo›_ö_thªad
(
∑_thªaded_maölo›
 *
m
);

313 
∑_thªaded_maölo›_£t_«me
(
∑_thªaded_maölo›
 *
m
, c⁄° *
«me
);

315 
	gPA_C_DECL_END


	@/usr/include/pulse/timeval.h

1 #i‚de‡
foŸimevÆhfoo


2 
	#foŸimevÆhfoo


	)

24 
	~<pul£/cde˛.h
>

25 
	~<pul£/gccma¸o.h
>

26 
	~<pul£/ßm∂e.h
>

27 
	~<pul£/vîsi⁄.h
>

32 
	gPA_C_DECL_BEGIN


35 
	#PA_MSEC_PER_SEC
 ((
∑_u£c_t
Ë1000ULL)

	)

38 
	#PA_USEC_PER_SEC
 ((
∑_u£c_t
Ë1000000ULL)

	)

41 
	#PA_NSEC_PER_SEC
 ((Ë1000000000ULL)

	)

44 
	#PA_USEC_PER_MSEC
 ((
∑_u£c_t
Ë1000ULL)

	)

47 
	#PA_NSEC_PER_MSEC
 ((Ë1000000ULL)

	)

50 
	#PA_NSEC_PER_USEC
 ((Ë1000ULL)

	)

53 
	#PA_USEC_INVALID
 ((
∑_u£c_t
Ë-1)

	)

56 
	#PA_USEC_MAX
 ((
∑_u£c_t
Ë-2)

	)

58 
	gtimevÆ
;

61 
timevÆ
 *
∑_gëtimeofday
(timevÆ *
tv
);

65 
∑_u£c_t
 
	$∑_timevÆ_diff
(c⁄° 
timevÆ
 *
a
, c⁄° timevÆ *
b
Ë
PA_GCC_PURE
;

68 
	$∑_timevÆ_cmp
(c⁄° 
timevÆ
 *
a
, c⁄° timevÆ *
b
Ë
PA_GCC_PURE
;

71 
∑_u£c_t
 
	`∑_timevÆ_age
(c⁄° 
timevÆ
 *
tv
);

74 
timevÆ
* 
	`∑_timevÆ_add
(timevÆ *
tv
, 
∑_u£c_t
 
v
);

77 
timevÆ
* 
	`∑_timevÆ_sub
(timevÆ *
tv
, 
∑_u£c_t
 
v
);

80 
timevÆ
* 
	`∑_timevÆ_°‹e
(timevÆ *
tv
, 
∑_u£c_t
 
v
);

83 
∑_u£c_t
 
	`∑_timevÆ_lﬂd
(c⁄° 
timevÆ
 *
tv
);

85 
PA_C_DECL_END


	@/usr/include/pulse/utf8.h

1 #i‚de‡
fooutf8hfoo


2 
	#fooutf8hfoo


	)

24 
	~<pul£/cde˛.h
>

25 
	~<pul£/gccma¸o.h
>

26 
	~<pul£/vîsi⁄.h
>

32 
PA_C_DECL_BEGIN


35 *
	$∑_utf8_vÆid
(c⁄° *
°r
Ë
PA_GCC_PURE
;

38 *
	$∑_ascii_vÆid
(c⁄° *
°r
Ë
PA_GCC_PURE
;

41 *
	`∑_utf8_fûãr
(c⁄° *
°r
);

44 *
	`∑_ascii_fûãr
(c⁄° *
°r
);

47 * 
	`∑_utf8_to_loˇÀ
 (c⁄° *
°r
);

50 * 
	`∑_loˇÀ_to_utf8
 (c⁄° *
°r
);

52 
PA_C_DECL_END


	@/usr/include/pulse/util.h

1 #i‚de‡
fooutûhfoo


2 
	#fooutûhfoo


	)

24 
	~<°ddef.h
>

26 
	~<pul£/cde˛.h
>

27 
	~<pul£/vîsi⁄.h
>

32 
PA_C_DECL_BEGIN


35 *
∑_gë_u£r_«me
(*
s
, 
size_t
 
l
);

38 *
∑_gë_ho°_«me
(*
s
, 
size_t
 
l
);

41 *
∑_gë_fqdn
(*
s
, 
size_t
 
l
);

44 *
∑_gë_home_dú
(*
s
, 
size_t
 
l
);

48 *
∑_gë_bö¨y_«me
(*
s
, 
size_t
 
l
);

52 *
∑_∑th_gë_fûíame
(c⁄° *
p
);

55 
∑_m¶ìp
(
t
);

57 
	gPA_C_DECL_END


	@/usr/include/pulse/version.h

1 #i‚de‡
foovîsi⁄hfoo


2 
	#foovîsi⁄hfoo


	)

26 
	~<pul£/cde˛.h
>

31 
	gPA_C_DECL_BEGIN


36 
	#∑_gë_hódîs_vîsi⁄
(Ë("10.0.0")

	)

40 c⁄° * 
∑_gë_libøry_vîsi⁄
();

46 
	#PA_API_VERSION
 12

	)

50 
	#PA_PROTOCOL_VERSION
 32

	)

53 
	#PA_MAJOR
 10

	)

56 
	#PA_MINOR
 0

	)

59 
	#PA_MICRO
 0

	)

63 
	#PA_CHECK_VERSION
(
maj‹
,
mö‹
,
mi¸o
) \

64 ((
PA_MAJOR
 > (
maj‹
)) || \

65 (
PA_MAJOR
 =(
maj‹
Ë&& 
PA_MINOR
 > (
mö‹
)) || \

66 (
PA_MAJOR
 =(
maj‹
Ë&& 
PA_MINOR
 =(
mö‹
Ë&& 
PA_MICRO
 >(
mi¸o
)))

	)

68 
	gPA_C_DECL_END


	@/usr/include/pulse/volume.h

1 #i‚de‡
foovﬁumehfoo


2 
	#foovﬁumehfoo


	)

24 
	~<öây≥s.h
>

25 
	~<limôs.h
>

27 
	~<pul£/cde˛.h
>

28 
	~<pul£/gccma¸o.h
>

29 
	~<pul£/ßm∂e.h
>

30 
	~<pul£/ch™√lm≠.h
>

31 
	~<pul£/vîsi⁄.h
>

113 
PA_C_DECL_BEGIN


120 
uöt32_t
 
	t∑_vﬁume_t
;

123 
	#PA_VOLUME_NORM
 ((
∑_vﬁume_t
Ë0x10000U)

	)

126 
	#PA_VOLUME_MUTED
 ((
∑_vﬁume_t
Ë0U)

	)

129 
	#PA_VOLUME_MAX
 ((
∑_vﬁume_t
Ë
UINT32_MAX
/2)

	)

136 
	#PA_VOLUME_UI_MAX
 (
	`∑_sw_vﬁume_‰om_dB
(+11.0))

	)

139 
	#PA_VOLUME_INVALID
 ((
∑_vﬁume_t
Ë
UINT32_MAX
)

	)

142 
	#PA_VOLUME_IS_VALID
(
v
Ë((vË<
PA_VOLUME_MAX
)

	)

145 
	#PA_CLAMP_VOLUME
(
v
Ë(
	`PA_CLAMP_UNLIKELY
((v), 
PA_VOLUME_MUTED
, 
PA_VOLUME_MAX
))

	)

148 
	s∑_cvﬁume
 {

149 
uöt8_t
 
	mch™√ls
;

150 
∑_vﬁume_t
 
	mvÆues
[
PA_CHANNELS_MAX
];

151 } 
	t∑_cvﬁume
;

154 
	$∑_cvﬁume_equÆ
(c⁄° 
∑_cvﬁume
 *
a
, c⁄°Öa_cvﬁumê*
b
Ë
PA_GCC_PURE
;

159 
∑_cvﬁume
* 
	`∑_cvﬁume_öô
’a_cvﬁumê*
a
);

162 
	#∑_cvﬁume_ª£t
(
a
, 
n
Ë
	`∑_cvﬁume_£t
(◊), (n), 
PA_VOLUME_NORM
)

	)

165 
	#∑_cvﬁume_muã
(
a
, 
n
Ë
	`∑_cvﬁume_£t
(◊), (n), 
PA_VOLUME_MUTED
)

	)

168 
∑_cvﬁume
* 
	`∑_cvﬁume_£t
’a_cvﬁumê*
a
, 
ch™√ls
, 
∑_vﬁume_t
 
v
);

175 
	#PA_CVOLUME_SNPRINT_MAX
 320

	)

178 *
	`∑_cvﬁume_¢¥öt
(*
s
, 
size_t
 
l
, c⁄° 
∑_cvﬁume
 *
c
);

185 
	#PA_SW_CVOLUME_SNPRINT_DB_MAX
 448

	)

188 *
	`∑_sw_cvﬁume_¢¥öt_dB
(*
s
, 
size_t
 
l
, c⁄° 
∑_cvﬁume
 *
c
);

194 
	#PA_CVOLUME_SNPRINT_VERBOSE_MAX
 1984

	)

200 *
	`∑_cvﬁume_¢¥öt_vîbo£
(*
s
, 
size_t
 
l
, c⁄° 
∑_cvﬁume
 *
c
, c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
¥öt_dB
);

207 
	#PA_VOLUME_SNPRINT_MAX
 10

	)

210 *
	`∑_vﬁume_¢¥öt
(*
s
, 
size_t
 
l
, 
∑_vﬁume_t
 
v
);

217 
	#PA_SW_VOLUME_SNPRINT_DB_MAX
 11

	)

220 *
	`∑_sw_vﬁume_¢¥öt_dB
(*
s
, 
size_t
 
l
, 
∑_vﬁume_t
 
v
);

226 
	#PA_VOLUME_SNPRINT_VERBOSE_MAX
 35

	)

231 *
	`∑_vﬁume_¢¥öt_vîbo£
(*
s
, 
size_t
 
l
, 
∑_vﬁume_t
 
v
, 
¥öt_dB
);

234 
∑_vﬁume_t
 
	$∑_cvﬁume_avg
(c⁄° 
∑_cvﬁume
 *
a
Ë
PA_GCC_PURE
;

241 
∑_vﬁume_t
 
	$∑_cvﬁume_avg_mask
(c⁄° 
∑_cvﬁume
 *
a
, c⁄° 
∑_ch™√l_m≠
 *
cm
, 
∑_ch™√l_posôi⁄_mask_t
 
mask
Ë
PA_GCC_PURE
;

244 
∑_vﬁume_t
 
	$∑_cvﬁume_max
(c⁄° 
∑_cvﬁume
 *
a
Ë
PA_GCC_PURE
;

251 
∑_vﬁume_t
 
	$∑_cvﬁume_max_mask
(c⁄° 
∑_cvﬁume
 *
a
, c⁄° 
∑_ch™√l_m≠
 *
cm
, 
∑_ch™√l_posôi⁄_mask_t
 
mask
Ë
PA_GCC_PURE
;

254 
∑_vﬁume_t
 
	$∑_cvﬁume_mö
(c⁄° 
∑_cvﬁume
 *
a
Ë
PA_GCC_PURE
;

261 
∑_vﬁume_t
 
	$∑_cvﬁume_mö_mask
(c⁄° 
∑_cvﬁume
 *
a
, c⁄° 
∑_ch™√l_m≠
 *
cm
, 
∑_ch™√l_posôi⁄_mask_t
 
mask
Ë
PA_GCC_PURE
;

264 
	$∑_cvﬁume_vÆid
(c⁄° 
∑_cvﬁume
 *
v
Ë
PA_GCC_PURE
;

267 
	$∑_cvﬁume_ch™√ls_equÆ_to
(c⁄° 
∑_cvﬁume
 *
a
, 
∑_vﬁume_t
 
v
Ë
PA_GCC_PURE
;

270 
	#∑_cvﬁume_is_muãd
(
a
Ë
	`∑_cvﬁume_ch™√ls_equÆ_to
(◊), 
PA_VOLUME_MUTED
)

	)

273 
	#∑_cvﬁume_is_n‹m
(
a
Ë
	`∑_cvﬁume_ch™√ls_equÆ_to
(◊), 
PA_VOLUME_NORM
)

	)

278 
∑_vﬁume_t
 
	$∑_sw_vﬁume_mu…ùly
(
∑_vﬁume_t
 
a
,Öa_vﬁume_à
b
Ë
PA_GCC_CONST
;

283 
∑_cvﬁume
 *
	`∑_sw_cvﬁume_mu…ùly
’a_cvﬁumê*
de°
, c⁄°Öa_cvﬁumê*
a
, c⁄°Öa_cvﬁumê*
b
);

289 
∑_cvﬁume
 *
	`∑_sw_cvﬁume_mu…ùly_sˇœr
’a_cvﬁumê*
de°
, c⁄°Öa_cvﬁumê*
a
, 
∑_vﬁume_t
 
b
);

295 
∑_vﬁume_t
 
	$∑_sw_vﬁume_divide
(
∑_vﬁume_t
 
a
,Öa_vﬁume_à
b
Ë
PA_GCC_CONST
;

300 
∑_cvﬁume
 *
	`∑_sw_cvﬁume_divide
’a_cvﬁumê*
de°
, c⁄°Öa_cvﬁumê*
a
, c⁄°Öa_cvﬁumê*
b
);

306 
∑_cvﬁume
 *
	`∑_sw_cvﬁume_divide_sˇœr
’a_cvﬁumê*
de°
, c⁄°Öa_cvﬁumê*
a
, 
∑_vﬁume_t
 
b
);

309 
∑_vﬁume_t
 
	$∑_sw_vﬁume_‰om_dB
(
f
Ë
PA_GCC_CONST
;

312 
	$∑_sw_vﬁume_to_dB
(
∑_vﬁume_t
 
v
Ë
PA_GCC_CONST
;

316 
∑_vﬁume_t
 
	$∑_sw_vﬁume_‰om_löór
(
v
Ë
PA_GCC_CONST
;

319 
	$∑_sw_vﬁume_to_löór
(
∑_vﬁume_t
 
v
Ë
PA_GCC_CONST
;

321 #ifde‡
INFINITY


322 
	#PA_DECIBEL_MININFTY
 ((Ë-
INFINITY
)

	)

325 
	#PA_DECIBEL_MININFTY
 ((Ë-200.0)

	)

329 
∑_cvﬁume
 *
	`∑_cvﬁume_ªm≠
’a_cvﬁumê*
v
, c⁄° 
∑_ch™√l_m≠
 *
‰om
, c⁄°Öa_ch™√l_m≠ *
to
);

333 
	$∑_cvﬁume_com∑tibÀ
(c⁄° 
∑_cvﬁume
 *
v
, c⁄° 
∑_ßm∂e_•ec
 *
ss
Ë
PA_GCC_PURE
;

337 
	$∑_cvﬁume_com∑tibÀ_wôh_ch™√l_m≠
(c⁄° 
∑_cvﬁume
 *
v
, c⁄° 
∑_ch™√l_m≠
 *
cm
Ë
PA_GCC_PURE
;

344 
	$∑_cvﬁume_gë_bÆ™˚
(c⁄° 
∑_cvﬁume
 *
v
, c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

355 
∑_cvﬁume
* 
	`∑_cvﬁume_£t_bÆ™˚
’a_cvﬁumê*
v
, c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
√w_bÆ™˚
);

362 
	$∑_cvﬁume_gë_Áde
(c⁄° 
∑_cvﬁume
 *
v
, c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

373 
∑_cvﬁume
* 
	`∑_cvﬁume_£t_Áde
’a_cvﬁumê*
v
, c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
√w_Áde
);

380 
	$∑_cvﬁume_gë_l„_bÆ™˚
(c⁄° 
∑_cvﬁume
 *
v
, c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

391 
∑_cvﬁume
* 
	`∑_cvﬁume_£t_l„_bÆ™˚
’a_cvﬁumê*
v
, c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
√w_bÆ™˚
);

396 
∑_cvﬁume
* 
	`∑_cvﬁume_sˇÀ
’a_cvﬁumê*
v
, 
∑_vﬁume_t
 
max
);

402 
∑_cvﬁume
* 
	`∑_cvﬁume_sˇÀ_mask
’a_cvﬁumê*
v
, 
∑_vﬁume_t
 
max
, 
∑_ch™√l_m≠
 *
cm
, 
∑_ch™√l_posôi⁄_mask_t
 
mask
);

409 
∑_cvﬁume
* 
	`∑_cvﬁume_£t_posôi⁄
’a_cvﬁumê*
cv
, c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
∑_ch™√l_posôi⁄_t
 
t
, 
∑_vﬁume_t
 
v
);

415 
∑_vﬁume_t
 
	$∑_cvﬁume_gë_posôi⁄
(
∑_cvﬁume
 *
cv
, c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
∑_ch™√l_posôi⁄_t
 
t
Ë
PA_GCC_PURE
;

420 
∑_cvﬁume
* 
	`∑_cvﬁume_mîge
’a_cvﬁumê*
de°
, c⁄°Öa_cvﬁumê*
a
, c⁄°Öa_cvﬁumê*
b
);

424 
∑_cvﬁume
* 
	`∑_cvﬁume_öc_˛amp
’a_cvﬁumê*
v
, 
∑_vﬁume_t
 
öc
,Öa_vﬁume_à
limô
);

428 
∑_cvﬁume
* 
	`∑_cvﬁume_öc
’a_cvﬁumê*
v
, 
∑_vﬁume_t
 
öc
);

432 
∑_cvﬁume
* 
	`∑_cvﬁume_dec
’a_cvﬁumê*
v
, 
∑_vﬁume_t
 
dec
);

434 
PA_C_DECL_END


	@/usr/include/pulse/xmalloc.h

1 #i‚de‡
foomem‹yhfoo


2 
	#foomem‹yhfoo


	)

23 
	~<sys/ty≥s.h
>

24 
	~<°dlib.h
>

25 
	~<limôs.h
>

26 
	~<as£π.h
>

28 
	~<pul£/cde˛.h
>

29 
	~<pul£/gccma¸o.h
>

30 
	~<pul£/vîsi⁄.h
>

36 
PA_C_DECL_BEGIN


39 * 
	$∑_xmÆloc
(
size_t
 
l
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE
(1);

42 *
	$∑_xmÆloc0
(
size_t
 
l
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE
(1);

45 *
	$∑_xªÆloc
(*
±r
, 
size_t
 
size
Ë
	`PA_GCC_ALLOC_SIZE
(2);

48 
	`∑_x‰ì
(*
p
);

51 *
	$∑_x°rdup
(c⁄° *
s
Ë
PA_GCC_MALLOC
;

54 *
	$∑_x°∫dup
(c⁄° *
s
, 
size_t
 
l
Ë
PA_GCC_MALLOC
;

57 * 
	$∑_xmemdup
(c⁄° *
p
, 
size_t
 
l
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE
(2);

60 * 
	$_∑_x√w_öã∫Æ
(
size_t
 
n
, size_à
k
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE2
(1,2);

62 
ölöe
 * 
	$_∑_x√w_öã∫Æ
(
size_t
 
n
, size_à
k
) {

63 
	`as£π
(
n
 < 
INT_MAX
/
k
);

64  
	`∑_xmÆloc
(
n
*
k
);

65 
	}
}

68 
	#∑_x√w
(
ty≥
, 
n
Ë(—y≥*Ë
	`_∑_x√w_öã∫Æ
(“), —y≥)))

	)

71 * 
	$_∑_x√w0_öã∫Æ
(
size_t
 
n
, size_à
k
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE2
(1,2);

73 
ölöe
 * 
	$_∑_x√w0_öã∫Æ
(
size_t
 
n
, size_à
k
) {

74 
	`as£π
(
n
 < 
INT_MAX
/
k
);

75  
	`∑_xmÆloc0
(
n
*
k
);

76 
	}
}

79 
	#∑_x√w0
(
ty≥
, 
n
Ë(—y≥*Ë
	`_∑_x√w0_öã∫Æ
(“), —y≥)))

	)

82 * 
	$_∑_x√wdup_öã∫Æ
(c⁄° *
p
, 
size_t
 
n
, size_à
k
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE2
(2,3);

84 
ölöe
 * 
	$_∑_x√wdup_öã∫Æ
(c⁄° *
p
, 
size_t
 
n
, size_à
k
) {

85 
	`as£π
(
n
 < 
INT_MAX
/
k
);

86  
	`∑_xmemdup
(
p
, 
n
*
k
);

87 
	}
}

90 
	#∑_x√wdup
(
ty≥
, 
p
, 
n
Ë(—y≥*Ë
	`_∑_x√wdup_öã∫Æ
(’), (n), —y≥)))

	)

93 * 
	$_∑_xª√w_öã∫Æ
(*
p
, 
size_t
 
n
, size_à
k
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE2
(2,3);

95 
ölöe
 * 
	$_∑_xª√w_öã∫Æ
(*
p
, 
size_t
 
n
, size_à
k
) {

96 
	`as£π
(
n
 < 
INT_MAX
/
k
);

97  
	`∑_xªÆloc
(
p
, 
n
*
k
);

98 
	}
}

101 
	#∑_xª√w
(
ty≥
, 
p
, 
n
Ë(—y≥*Ë
	`_∑_xª√w_öã∫Æ
’, (n), —y≥)))

	)

103 
	gPA_C_DECL_END


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/sys/ipc.h

18 #i‚de‡
_SYS_IPC_H


19 
	#_SYS_IPC_H
 1

	)

21 
	~<„©uªs.h
>

23 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_XOPEN
 && 
__GNUC__
 >= 2

28 
	~<bôs/ù˘y≥s.h
>

29 
	~<bôs/ùc.h
>

31 #i‚de‡
__uid_t_deföed


32 
__uid_t
 
	tuid_t
;

33 
	#__uid_t_deföed


	)

36 #i‚de‡
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

41 #i‚de‡
__mode_t_deföed


42 
__mode_t
 
	tmode_t
;

43 
	#__mode_t_deföed


	)

46 #i‚de‡
__key_t_deföed


47 
__key_t
 
	tkey_t
;

48 
	#__key_t_deföed


	)

51 
__BEGIN_DECLS


54 
key_t
 
	$·ok
 (c⁄° *
__∑th«me
, 
__¥oj_id
Ë
__THROW
;

56 
__END_DECLS


	@/usr/include/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


28 
	~<bôs/sig£t.h
>

30 
	#__√ed_time•ec


	)

31 
	~<time.h
>

36 
	tnfds_t
;

39 
	spﬁlfd


41 
	mfd
;

42 
	mevíts
;

43 
	mªvíts
;

47 
__BEGIN_DECLS


57 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

59 #ifde‡
__USE_GNU


66 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

67 c⁄° 
time•ec
 *
__timeout
,

68 c⁄° 
__sig£t_t
 *
__ss
);

71 
	g__END_DECLS


75 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


76 
	~<bôs/pﬁl2.h
>

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 #ifde‡
__USE_XOPEN2K


43 
	#__√ed_time•ec


	)

45 
	~<time.h
>

46 
	#__√ed_timevÆ


	)

47 
	~<bôs/time.h
>

49 #i‚de‡
__su£c⁄ds_t_deföed


50 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

51 
	#__su£c⁄ds_t_deföed


	)

56 
	t__fd_mask
;

59 #unde‡
__NFDBITS


61 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

62 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

63 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

70 #ifde‡
__USE_XOPEN


71 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

72 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

74 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

75 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

77 } 
	tfd_£t
;

80 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

82 #ifde‡
__USE_MISC


84 
__fd_mask
 
	tfd_mask
;

87 
	#NFDBITS
 
__NFDBITS


	)

92 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

93 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

94 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

95 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

98 
__BEGIN_DECLS


108 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

109 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

110 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

111 
timevÆ
 *
__ª°ri˘
 
__timeout
);

113 #ifde‡
__USE_XOPEN2K


120 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

121 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

122 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

123 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

124 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

129 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


130 
	~<bôs/£À˘2.h
>

133 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 #i‚de‡
Z_SOLO


33 
	#com¥ess
 
z_com¥ess


	)

34 
	#com¥ess2
 
z_com¥ess2


	)

35 
	#com¥essBound
 
z_com¥essBound


	)

37 
	#¸c32
 
z_¸c32


	)

38 
	#¸c32_comböe
 
z_¸c32_comböe


	)

39 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

40 
	#deÊ©e
 
z_deÊ©e


	)

41 
	#deÊ©eBound
 
z_deÊ©eBound


	)

42 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

43 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

44 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

45 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

46 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

47 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

48 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

49 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

50 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

51 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

52 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

53 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

54 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

55 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

56 #i‚de‡
Z_SOLO


57 
	#gz_îr‹
 
z_gz_îr‹


	)

58 
	#gz_ötmax
 
z_gz_ötmax


	)

59 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

60 
	#gzbuf„r
 
z_gzbuf„r


	)

61 
	#gz˛óªº
 
z_gz˛óªº


	)

62 
	#gz˛o£
 
z_gz˛o£


	)

63 
	#gz˛o£_r
 
z_gz˛o£_r


	)

64 
	#gz˛o£_w
 
z_gz˛o£_w


	)

65 
	#gzdúe˘
 
z_gzdúe˘


	)

66 
	#gzd›í
 
z_gzd›í


	)

67 
	#gzeof
 
z_gzeof


	)

68 
	#gzîr‹
 
z_gzîr‹


	)

69 
	#gzÊush
 
z_gzÊush


	)

70 
	#gzgëc
 
z_gzgëc


	)

71 
	#gzgëc_
 
z_gzgëc_


	)

72 
	#gzgës
 
z_gzgës


	)

73 
	#gzoff£t
 
z_gzoff£t


	)

74 
	#gzoff£t64
 
z_gzoff£t64


	)

75 
	#gz›í
 
z_gz›í


	)

76 
	#gz›í64
 
z_gz›í64


	)

77 #ifde‡
_WIN32


78 
	#gz›í_w
 
z_gz›í_w


	)

80 
	#gz¥ötf
 
z_gz¥ötf


	)

81 
	#gzv¥ötf
 
z_gzv¥ötf


	)

82 
	#gzputc
 
z_gzputc


	)

83 
	#gzputs
 
z_gzputs


	)

84 
	#gzªad
 
z_gzªad


	)

85 
	#gzªwöd
 
z_gzªwöd


	)

86 
	#gz£ek
 
z_gz£ek


	)

87 
	#gz£ek64
 
z_gz£ek64


	)

88 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

89 
	#gzãŒ
 
z_gzãŒ


	)

90 
	#gzãŒ64
 
z_gzãŒ64


	)

91 
	#gzungëc
 
z_gzungëc


	)

92 
	#gzwrôe
 
z_gzwrôe


	)

94 
	#öÊ©e
 
z_öÊ©e


	)

95 
	#öÊ©eBack
 
z_öÊ©eBack


	)

96 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

97 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

98 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

99 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

100 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

101 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

102 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

103 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

104 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

105 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

106 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

107 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

108 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

109 
	#öÊ©eSync
 
z_öÊ©eSync


	)

110 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

111 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

112 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

113 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

114 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

115 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

116 #i‚de‡
Z_SOLO


117 
	#uncom¥ess
 
z_uncom¥ess


	)

119 
	#zEº‹
 
z_zEº‹


	)

120 #i‚de‡
Z_SOLO


121 
	#zˇŒoc
 
z_zˇŒoc


	)

122 
	#zc‰ì
 
z_zc‰ì


	)

124 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

125 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

128 
	#Byã
 
z_Byã


	)

129 
	#Byãf
 
z_Byãf


	)

130 
	#Æloc_func
 
z_Æloc_func


	)

131 
	#ch¨f
 
z_ch¨f


	)

132 
	#‰ì_func
 
z_‰ì_func


	)

133 #i‚de‡
Z_SOLO


134 
	#gzFûe
 
z_gzFûe


	)

136 
	#gz_hódî
 
z_gz_hódî


	)

137 
	#gz_hódîp
 
z_gz_hódîp


	)

138 
	#ö_func
 
z_ö_func


	)

139 
	#ötf
 
z_ötf


	)

140 
	#out_func
 
z_out_func


	)

141 
	#uI¡
 
z_uI¡


	)

142 
	#uI¡f
 
z_uI¡f


	)

143 
	#uL⁄g
 
z_uL⁄g


	)

144 
	#uL⁄gf
 
z_uL⁄gf


	)

145 
	#voidp
 
z_voidp


	)

146 
	#voidpc
 
z_voidpc


	)

147 
	#voidpf
 
z_voidpf


	)

150 
	#gz_hódî_s
 
z_gz_hódî_s


	)

151 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

155 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

156 
	#MSDOS


	)

158 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

159 
	#OS2


	)

161 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

162 
	#WINDOWS


	)

164 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

165 #i‚de‡
WIN32


166 
	#WIN32


	)

169 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

170 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

171 #i‚de‡
SYS16BIT


172 
	#SYS16BIT


	)

181 #ifde‡
SYS16BIT


182 
	#MAXSEG_64K


	)

184 #ifde‡
MSDOS


185 
	#UNALIGNED_OK


	)

188 #ifde‡
__STDC_VERSION__


189 #i‚de‡
STDC


190 
	#STDC


	)

192 #i‡
__STDC_VERSION__
 >= 199901L

193 #i‚de‡
STDC99


194 
	#STDC99


	)

198 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

199 
	#STDC


	)

201 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

202 
	#STDC


	)

204 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

205 
	#STDC


	)

207 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

208 
	#STDC


	)

211 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

212 
	#STDC


	)

215 #i‚de‡
STDC


217 c⁄°

	)

221 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

222 
	#z_c⁄°
 c⁄°

	)

224 
	#z_c⁄°


	)

228 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

229 
	#NO_DUMMY_DECL


	)

233 #i‚de‡
MAX_MEM_LEVEL


234 #ifde‡
MAXSEG_64K


235 
	#MAX_MEM_LEVEL
 8

	)

237 
	#MAX_MEM_LEVEL
 9

	)

246 #i‚de‡
MAX_WBITS


247 
	#MAX_WBITS
 15

	)

265 #i‚de‡
OF


266 #ifde‡
STDC


267 
	#OF
(
¨gs
Ë
	)
args

269 
	#OF
(
¨gs
Ë()

	)

273 #i‚de‡
Z_ARG


274 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

275 
	#Z_ARG
(
¨gs
Ë
	)
args

277 
	#Z_ARG
(
¨gs
Ë()

	)

287 #ifde‡
SYS16BIT


288 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

290 
	#SMALL_MEDIUM


	)

291 #ifde‡
_MSC_VER


292 
	#FAR
 
_Ár


	)

294 
	#FAR
 
Ár


	)

297 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

299 
	#SMALL_MEDIUM


	)

300 #ifde‡
__BORLANDC__


301 
	#FAR
 
_Ár


	)

303 
	#FAR
 
Ár


	)

308 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

312 #ifde‡
ZLIB_DLL


313 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

314 #ifde‡
ZLIB_INTERNAL


315 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

317 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

325 #ifde‡
ZLIB_WINAPI


326 #ifde‡
FAR


327 #unde‡
FAR


329 
	~<wödows.h
>

332 
	#ZEXPORT
 
WINAPI


	)

333 #ifde‡
WIN32


334 
	#ZEXPORTVA
 
WINAPIV


	)

336 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

341 #i‡
deföed
 (
__BEOS__
)

342 #ifde‡
ZLIB_DLL


343 #ifde‡
ZLIB_INTERNAL


344 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

345 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

347 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

353 #i‚de‡
ZEXTERN


354 
	#ZEXTERN
 

	)

356 #i‚de‡
ZEXPORT


357 
	#ZEXPORT


	)

359 #i‚de‡
ZEXPORTVA


360 
	#ZEXPORTVA


	)

363 #i‚de‡
FAR


364 
	#FAR


	)

367 #i‡!
deföed
(
__MACTYPES__
)

368 
	tByã
;

370 
	tuI¡
;

371 
	tuL⁄g
;

373 #ifde‡
SMALL_MEDIUM


375 
	#Byãf
 
Byã
 
FAR


	)

377 
Byã
 
	tFAR
 
	tByãf
;

379 
	tFAR
 
	tch¨f
;

380 
	tFAR
 
	tötf
;

381 
uI¡
 
	tFAR
 
	tuI¡f
;

382 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

384 #ifde‡
STDC


385 c⁄° *
	tvoidpc
;

386 
	tFAR
 *
	tvoidpf
;

387 *
	tvoidp
;

389 
Byã
 c⁄° *
	tvoidpc
;

390 
Byã
 
	tFAR
 *
	tvoidpf
;

391 
Byã
 *
	tvoidp
;

394 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

395 
	~<limôs.h
>

396 #i‡(
UINT_MAX
 == 0xffffffffUL)

397 
	#Z_U4
 

	)

398 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

399 
	#Z_U4
 

	)

400 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

401 
	#Z_U4
 

	)

405 #ifde‡
Z_U4


406 
Z_U4
 
	tz_¸c_t
;

408 
	tz_¸c_t
;

412 
	#Z_HAVE_UNISTD_H


	)

416 
	#Z_HAVE_STDARG_H


	)

419 #ifde‡
STDC


420 #i‚de‡
Z_SOLO


421 
	~<sys/ty≥s.h
>

425 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

426 #i‚de‡
Z_SOLO


427 
	~<°d¨g.h
>

431 #ifde‡
_WIN32


432 #i‚de‡
Z_SOLO


433 
	~<°ddef.h
>

443 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

444 #unde‡
_LARGEFILE64_SOURCE


447 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

448 
	#Z_HAVE_UNISTD_H


	)

450 #i‚de‡
Z_SOLO


451 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

452 
	~<uni°d.h
>

453 #ifde‡
VMS


454 
	~<unixio.h
>

456 #i‚de‡
z_off_t


457 
	#z_off_t
 
off_t


	)

462 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

463 
	#Z_LFS64


	)

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

467 
	#Z_LARGE64


	)

470 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

471 
	#Z_WANT64


	)

474 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

475 
	#SEEK_SET
 0

	)

476 
	#SEEK_CUR
 1

	)

477 
	#SEEK_END
 2

	)

480 #i‚de‡
z_off_t


481 
	#z_off_t
 

	)

484 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

485 
	#z_off64_t
 
off64_t


	)

487 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

488 
	#z_off64_t
 
__öt64


	)

490 
	#z_off64_t
 
z_off_t


	)

495 #i‡
deföed
(
__MVS__
)

496 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

497 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

498 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

499 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

500 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

501 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

502 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

503 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

504 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

505 #¥agm®
m≠
(
com¥essBound
,"CMBND")

506 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

507 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

508 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	#FALLOC_FL_KEEP_SIZE
 1

	)

324 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

325 
	#FALLOC_FL_COLLAPSE_RANGE
 8

	)

328 
	#FALLOC_FL_ZERO_RANGE
 16

	)

333 
	sfûe_h™dÀ


335 
	mh™dÀ_byãs
;

336 
	mh™dÀ_ty≥
;

338 
	mf_h™dÀ
[0];

342 
	#MAX_HANDLE_SZ
 128

	)

346 #ifde‡
__USE_ATFILE


347 
	#AT_FDCWD
 -100

	)

350 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

351 
	#AT_REMOVEDIR
 0x200

	)

353 
	#AT_SYMLINK_FOLLOW
 0x400

	)

354 #ifde‡
__USE_GNU


355 
	#AT_NO_AUTOMOUNT
 0x800

	)

357 
	#AT_EMPTY_PATH
 0x1000

	)

359 
	#AT_EACCESS
 0x200

	)

363 
	g__BEGIN_DECLS


365 #ifde‡
__USE_GNU


368 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

369 
__THROW
;

376 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

377 
__Êags
);

384 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

385 
size_t
 
__cou¡
, 
__Êags
);

391 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

392 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

393 
__Êags
);

399 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

400 
__Êags
);

406 #i‚de‡
__USE_FILE_OFFSET64


407 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

409 #ifde‡
__REDIRECT


410 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

411 
__off64_t
 
__Àn
),

412 
ÁŒoˇã64
);

414 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

417 #ifde‡
__USE_LARGEFILE64


418 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

419 
__off64_t
 
__Àn
);

424 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

425 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

426 
__Êags
Ë
__THROW
;

432 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

433 
__Êags
);

437 
__END_DECLS


	@/usr/include/bits/ipc.h

18 #i‚de‡
_SYS_IPC_H


22 
	~<bôs/ty≥s.h
>

25 
	#IPC_CREAT
 01000

	)

26 
	#IPC_EXCL
 02000

	)

27 
	#IPC_NOWAIT
 04000

	)

30 
	#IPC_RMID
 0

	)

31 
	#IPC_SET
 1

	)

32 
	#IPC_STAT
 2

	)

33 #ifde‡
__USE_GNU


34 
	#IPC_INFO
 3

	)

38 
	#IPC_PRIVATE
 ((
__key_t
Ë0Ë

	)

42 
	sùc_≥rm


44 
__key_t
 
	m__key
;

45 
__uid_t
 
	muid
;

46 
__gid_t
 
	mgid
;

47 
__uid_t
 
	mcuid
;

48 
__gid_t
 
	mcgid
;

49 
	mmode
;

50 
	m__∑d1
;

51 
	m__£q
;

52 
	m__∑d2
;

53 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved1
;

54 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved2
;

	@/usr/include/bits/ipctypes.h

19 #i‚de‡
_SYS_IPC_H


23 #i‚de‡
_BITS_IPCTYPES_H


24 
	#_BITS_IPCTYPES_H
 1

	)

27 #ifde‡
__x86_64__


28 
	t__ùc_pid_t
;

30 
	t__ùc_pid_t
;

	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

40 
	#__DECL_SIMD_sö


	)

41 
	#__DECL_SIMD_söf


	)

42 
	#__DECL_SIMD_söl


	)

44 
	#__DECL_SIMD_söcos


	)

45 
	#__DECL_SIMD_söcosf


	)

46 
	#__DECL_SIMD_söco¶


	)

48 
	#__DECL_SIMD_log


	)

49 
	#__DECL_SIMD_logf


	)

50 
	#__DECL_SIMD_logl


	)

52 
	#__DECL_SIMD_exp


	)

53 
	#__DECL_SIMD_expf


	)

54 
	#__DECL_SIMD_ex∂


	)

56 
	#__DECL_SIMD_pow


	)

57 
	#__DECL_SIMD_powf


	)

58 
	#__DECL_SIMD_powl


	)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


35 
	#PROT_READ
 0x1

	)

36 
	#PROT_WRITE
 0x2

	)

37 
	#PROT_EXEC
 0x4

	)

38 
	#PROT_NONE
 0x0

	)

39 
	#PROT_GROWSDOWN
 0x01000000

	)

41 
	#PROT_GROWSUP
 0x02000000

	)

45 
	#MAP_SHARED
 0x01

	)

46 
	#MAP_PRIVATE
 0x02

	)

47 #ifde‡
__USE_MISC


48 
	#MAP_TYPE
 0x0‡

	)

52 
	#MAP_FIXED
 0x10

	)

53 #ifde‡
__USE_MISC


54 
	#MAP_FILE
 0

	)

55 #ifde‡
__MAP_ANONYMOUS


56 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

58 
	#MAP_ANONYMOUS
 0x20

	)

60 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

62 
	#MAP_HUGE_SHIFT
 26

	)

63 
	#MAP_HUGE_MASK
 0x3f

	)

67 
	#MS_ASYNC
 1

	)

68 
	#MS_SYNC
 4

	)

69 
	#MS_INVALIDATE
 2

	)

72 #ifde‡
__USE_GNU


73 
	#MREMAP_MAYMOVE
 1

	)

74 
	#MREMAP_FIXED
 2

	)

78 #ifde‡
__USE_MISC


79 
	#MADV_NORMAL
 0

	)

80 
	#MADV_RANDOM
 1

	)

81 
	#MADV_SEQUENTIAL
 2

	)

82 
	#MADV_WILLNEED
 3

	)

83 
	#MADV_DONTNEED
 4

	)

84 
	#MADV_FREE
 8

	)

85 
	#MADV_REMOVE
 9

	)

86 
	#MADV_DONTFORK
 10

	)

87 
	#MADV_DOFORK
 11

	)

88 
	#MADV_MERGEABLE
 12

	)

89 
	#MADV_UNMERGEABLE
 13

	)

90 
	#MADV_HUGEPAGE
 14

	)

91 
	#MADV_NOHUGEPAGE
 15

	)

92 
	#MADV_DONTDUMP
 16

	)

94 
	#MADV_DODUMP
 17

	)

95 
	#MADV_HWPOISON
 100

	)

99 #ifde‡
__USE_XOPEN2K


100 
	#POSIX_MADV_NORMAL
 0

	)

101 
	#POSIX_MADV_RANDOM
 1

	)

102 
	#POSIX_MADV_SEQUENTIAL
 2

	)

103 
	#POSIX_MADV_WILLNEED
 3

	)

104 
	#POSIX_MADV_DONTNEED
 4

	)

108 #i‚de‡
MCL_CURRENT


109 
	#MCL_CURRENT
 1

	)

110 
	#MCL_FUTURE
 2

	)

112 
	#MCL_ONFAULT
 4

	)

	@/usr/include/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
);

30 
__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

31 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

32 
__pﬁl_chk
)

33 
__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

35 
__f‹tify_fun˘i⁄
 

36 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

38 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

40 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

41  
	`__pﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

42 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

43  
	`__pﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

46  
	`__pﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
);

47 
	}
}

50 #ifde‡
__USE_GNU


51 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

52 c⁄° 
time•ec
 *
__timeout
,

53 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

54 
__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

55 c⁄° 
time•ec
 *
__timeout
,

56 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
);

57 
__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

58 c⁄° 
time•ec
 *
__timeout
,

59 c⁄° 
__sig£t_t
 *
__ss
,

60 
__SIZE_TYPE__
 
__fd¶í
),

61 
__µﬁl_chk
)

62 
__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

64 
__f‹tify_fun˘i⁄
 

65 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

68 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

70 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

71  
	`__µﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
, 
	`__bos
 (__fds));

72 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

73  
	`__µﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
,

74 
	`__bos
 (
__fds
));

77  
	`__µﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

78 
	}
}

81 
	g__END_DECLS


	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWCGROUP
 0x02000000

	)

64 
	#CLONE_NEWUTS
 0x04000000

	)

65 
	#CLONE_NEWIPC
 0x08000000

	)

66 
	#CLONE_NEWUSER
 0x10000000

	)

67 
	#CLONE_NEWPID
 0x20000000

	)

68 
	#CLONE_NEWNET
 0x40000000

	)

69 
	#CLONE_IO
 0x80000000

	)

73 
	ssched_∑øm


75 
	m__sched_¥i‹ôy
;

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
	$˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

96 
__END_DECLS


100 #i‡!
deföed
 
__deföed_sched∑øm
 \

101 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

102 
	#__deföed_sched∑øm
 1

	)

104 
	s__sched_∑øm


106 
__sched_¥i‹ôy
;

108 #unde‡
__√ed_sched∑øm


112 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


113 
	#__˝u_£t_t_deföed


	)

115 
	#__CPU_SETSIZE
 1024

	)

116 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

119 
__CPU_MASK_TYPE
 
	t__˝u_mask
;

122 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

123 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

128 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	t˝u_£t_t
;

132 #i‡
	`__GNUC_PREREQ
 (2, 91)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

134 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

136 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

140 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

141 
__i
 = 0; __ò< 
__imax
; ++__i) \

142 
__bôs
[
__i
] = 0; \

143 
	}
} 0)

	)

145 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

146 (
__exãnsi⁄__
 \

147 ({ 
size_t
 
__˝u
 = (
˝u
); \

148 
__˝u
 / 8 < (
£tsize
) \

149 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

150 |
	`__CPUMASK
 (
__˝u
)) \

151 : 0; }))

	)

152 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

153 (
__exãnsi⁄__
 \

154 ({ 
size_t
 
__˝u
 = (
˝u
); \

155 
__˝u
 / 8 < (
£tsize
) \

156 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

157 &~
	`__CPUMASK
 (
__˝u
)) \

158 : 0; }))

	)

159 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

160 (
__exãnsi⁄__
 \

161 ({ 
size_t
 
__˝u
 = (
˝u
); \

162 
__˝u
 / 8 < (
£tsize
) \

163 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

164 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

165 : 0; }))

	)

167 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

168 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

170 #i‡
__GNUC_PREREQ
 (2, 91)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

174 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

175 (
__exãnsi⁄__
 \

176 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

177 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

178 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

179 
size_t
 
__i
; \

180 
__i
 = 0; __ò< 
__imax
; ++__i) \

181 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

183 
__i
 =
__imax
; }))

	)

186 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

187 (
__exãnsi⁄__
 \

188 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

189 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

190 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

191 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

192 
size_t
 
__i
; \

193 
__i
 = 0; __ò< 
__imax
; ++__i) \

194 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

195 
__de°
; }))

	)

197 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

198 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

199 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

200 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

202 
__BEGIN_DECLS


204 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

205 
__THROW
;

206 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

207 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

209 
__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/patchkey.h

13 #i‚de‡
_LINUX_PATCHKEY_H_INDIRECT


17 #i‚de‡
_LINUX_PATCHKEY_H


18 
	#_LINUX_PATCHKEY_H


	)

21 
	~<ídün.h
>

23 #i‡
deföed
(
__BYTE_ORDER
)

24 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


25 
	#_PATCHKEY
(
id
Ë(0xfd00|id)

	)

26 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


27 
	#_PATCHKEY
(
id
Ë((id<<8)|0x00fd)

	)

	@/usr/include/pulse/cdecl.h

1 #i‚de‡
fo›ul£cde˛hfoo


2 
	#fo›ul£cde˛hfoo


	)

26 #ifde‡
__˝lu•lus


28 
	#PA_C_DECL_BEGIN
 "C" {

	)

30 
	#PA_C_DECL_END
 }

	)

34 
	#PA_C_DECL_BEGIN


	)

36 
	#PA_C_DECL_END


	)

	@/usr/include/pulse/gccmacro.h

1 #i‚de‡
fo›ul£gccma¸ohfoo


2 
	#fo›ul£gccma¸ohfoo


	)

26 #i‡
deföed
(
__GNUC__
)

27 #ifde‡
__MINGW32__


31 
	#PA_GCC_PRINTF_ATTR
(
a
,
b
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
__¥ötf__
,á, b)))

	)

33 
	#PA_GCC_PRINTF_ATTR
(
a
,
b
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
,á, b)))

	)

37 
	#PA_GCC_PRINTF_ATTR
(
a
,
b
)

	)

40 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 4)

41 
	#PA_GCC_SENTINEL
 
	`__©åibuã__
 ((
£¡öñ
))

	)

44 
	#PA_GCC_SENTINEL


	)

47 #ifde‡
__GNUC__


48 
	#PA_GCC_NORETURN
 
	`__©åibuã__
((
n‹ëu∫
))

	)

51 
	#PA_GCC_NORETURN


	)

54 #ifde‡
__GNUC__


55 
	#PA_GCC_UNUSED
 
	`__©åibuã__
 ((
unu£d
))

	)

58 
	#PA_GCC_UNUSED


	)

61 #ifde‡
__GNUC__


62 
	#PA_GCC_DESTRUCTOR
 
	`__©åibuã__
 ((
de°ru˘‹
))

	)

65 
	#PA_GCC_DESTRUCTOR


	)

68 #i‚de‡
PA_GCC_PURE


69 #ifde‡
__GNUC__


70 
	#PA_GCC_PURE
 
	`__©åibuã__
 ((
puª
))

	)

73 
	#PA_GCC_PURE


	)

77 #i‚de‡
PA_GCC_CONST


78 #ifde‡
__GNUC__


79 
	#PA_GCC_CONST
 
	`__©åibuã__
 ((c⁄°))

	)

82 
	#PA_GCC_CONST


	)

86 #i‚de‡
PA_GCC_DEPRECATED


87 #ifde‡
__GNUC__


88 
	#PA_GCC_DEPRECATED
 
	`__©åibuã__
 ((
dïªˇãd
))

	)

91 
	#PA_GCC_DEPRECATED


	)

95 #i‚de‡
PA_GCC_PACKED


96 #ifde‡
__GNUC__


97 
	#PA_GCC_PACKED
 
	`__©åibuã__
 ((
∑cked
))

	)

100 
	#PA_GCC_PACKED


	)

104 #i‚de‡
PA_GCC_ALLOC_SIZE


105 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >4Ë&& (
__GNUC_MINOR__
 >= 3)

106 
	#PA_GCC_ALLOC_SIZE
(
x
Ë
	`__©åibuã__
 ((
	`__Æloc_size__
(x)))

	)

107 
	#PA_GCC_ALLOC_SIZE2
(
x
,
y
Ë
	`__©åibuã__
 ((
	`__Æloc_size__
(x,y)))

	)

110 
	#PA_GCC_ALLOC_SIZE
(
x
)

	)

112 
	#PA_GCC_ALLOC_SIZE2
(
x
,
y
)

	)

116 #i‚de‡
PA_GCC_MALLOC


117 #ifde‡
__GNUC__


118 
	#PA_GCC_MALLOC
 
	`__©åibuã__
 ((
mÆloc
))

	)

121 
	#PA_GCC_MALLOC


	)

125 #i‚de‡
PA_GCC_WEAKREF


126 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__ELF__
Ë&& (((__GNUC__ =4Ë&& (
__GNUC_MINOR__
 > 1)) || (__GNUC__ > 4))

128 
	#PA_GCC_WEAKREF
(
x
Ë
	`__©åibuã__
((
	`wókªf
(#x)))

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

57 
	#__STDC_ISO_10646__
 201605L

	)

60 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

310 #unde‡
__Æways_ölöe


311 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

313 #unde‡
__Æways_ölöe


314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡
__GNUC_PREREQ
 (4,3)

320 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

322 
	#__©åibuã_¨tificül__


	)

334 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

335 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

336 || 
deföed
 
__GNUC_GNU_INLINE__
)))

337 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


338 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

339 
	#__exã∫_Æways_ölöe
 \

340 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

342 
	#__exã∫_ölöe
 
__ölöe


	)

343 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

347 #ifde‡
__exã∫_Æways_ölöe


348 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

353 #i‡
__GNUC_PREREQ
 (4,3)

354 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

355 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

362 #i‡!
__GNUC_PREREQ
 (2,8)

363 
	#__exãnsi⁄__


	)

367 #i‡!
__GNUC_PREREQ
 (2,92)

368 
	#__ª°ri˘


	)

374 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


375 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

377 #ifde‡
__GNUC__


378 
	#__ª°ri˘_¨r


	)

380 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

381 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

384 
	#__ª°ri˘_¨r


	)

389 #i‡
__GNUC__
 >= 3

390 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

391 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

393 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

394 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

397 #i‡(!
deföed
 
_N‹ëu∫
 \

398 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

399 && !
	$__GNUC_PREREQ
 (4,7))

400 #i‡
	`__GNUC_PREREQ
 (2,8)

401 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

403 
	#_N‹ëu∫


	)

407 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

408 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

409 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

410 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

411 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

412 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

415 
	~<bôs/w‹dsize.h
>

417 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


418 
	#__LDBL_COMPAT
 1

	)

419 #ifde‡
__REDIRECT


420 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

421 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

422 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

423 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

424 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

425 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

426 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

427 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

428 
	#__LDBL_REDIR_DECL
(
«me
) \

429 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

430 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

431 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

432 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

433 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

436 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


437 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

438 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

439 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

440 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

441 
	#__LDBL_REDIR_DECL
(
«me
)

	)

442 #ifde‡
__REDIRECT


443 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

444 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

445 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‡!
deföed
 
MAXHOSTNAMELEN
 && deföed 
HOST_NAME_MAX


54 
	#MAXHOSTNAMELEN
 
HOST_NAME_MAX


	)

56 #i‚de‡
NCARGS


57 #ifde‡
ARG_MAX


58 
	#NCARGS
 
ARG_MAX


	)

62 
	#NCARGS
 
INT_MAX


	)

68 #i‚de‡
NOGROUP


69 
	#NOGROUP
 65535

	)

71 #i‚de‡
NODEV


72 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

77 #i‚de‡
DEV_BSIZE


78 
	#DEV_BSIZE
 512

	)

83 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

84 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

85 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

86 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

89 #i‚de‡
howm™y


90 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

92 #ifde‡
__GNUC__


93 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

94 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

95 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

97 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

99 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

102 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

103 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
[0];

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_quîy_moduÀ


	)

14 
	#__°ub___com∑t_u£lib


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_gëmsg


	)

20 
	#__°ub_gây


	)

21 
	#__°ub_lchmod


	)

22 
	#__°ub_nfs£rv˘l


	)

23 
	#__°ub_putmsg


	)

24 
	#__°ub_ªvoke


	)

25 
	#__°ub_£éogö


	)

26 
	#__°ub_sigªtu∫


	)

27 
	#__°ub_s°k


	)

28 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

17 
	#ENOSYS
 38

	)

19 
	#ENOTEMPTY
 39

	)

20 
	#ELOOP
 40

	)

21 
	#EWOULDBLOCK
 
EAGAIN


	)

22 
	#ENOMSG
 42

	)

23 
	#EIDRM
 43

	)

24 
	#ECHRNG
 44

	)

25 
	#EL2NSYNC
 45

	)

26 
	#EL3HLT
 46

	)

27 
	#EL3RST
 47

	)

28 
	#ELNRNG
 48

	)

29 
	#EUNATCH
 49

	)

30 
	#ENOCSI
 50

	)

31 
	#EL2HLT
 51

	)

32 
	#EBADE
 52

	)

33 
	#EBADR
 53

	)

34 
	#EXFULL
 54

	)

35 
	#ENOANO
 55

	)

36 
	#EBADRQC
 56

	)

37 
	#EBADSLT
 57

	)

39 
	#EDEADLOCK
 
EDEADLK


	)

41 
	#EBFONT
 59

	)

42 
	#ENOSTR
 60

	)

43 
	#ENODATA
 61

	)

44 
	#ETIME
 62

	)

45 
	#ENOSR
 63

	)

46 
	#ENONET
 64

	)

47 
	#ENOPKG
 65

	)

48 
	#EREMOTE
 66

	)

49 
	#ENOLINK
 67

	)

50 
	#EADV
 68

	)

51 
	#ESRMNT
 69

	)

52 
	#ECOMM
 70

	)

53 
	#EPROTO
 71

	)

54 
	#EMULTIHOP
 72

	)

55 
	#EDOTDOT
 73

	)

56 
	#EBADMSG
 74

	)

57 
	#EOVERFLOW
 75

	)

58 
	#ENOTUNIQ
 76

	)

59 
	#EBADFD
 77

	)

60 
	#EREMCHG
 78

	)

61 
	#ELIBACC
 79

	)

62 
	#ELIBBAD
 80

	)

63 
	#ELIBSCN
 81

	)

64 
	#ELIBMAX
 82

	)

65 
	#ELIBEXEC
 83

	)

66 
	#EILSEQ
 84

	)

67 
	#ERESTART
 85

	)

68 
	#ESTRPIPE
 86

	)

69 
	#EUSERS
 87

	)

70 
	#ENOTSOCK
 88

	)

71 
	#EDESTADDRREQ
 89

	)

72 
	#EMSGSIZE
 90

	)

73 
	#EPROTOTYPE
 91

	)

74 
	#ENOPROTOOPT
 92

	)

75 
	#EPROTONOSUPPORT
 93

	)

76 
	#ESOCKTNOSUPPORT
 94

	)

77 
	#EOPNOTSUPP
 95

	)

78 
	#EPFNOSUPPORT
 96

	)

79 
	#EAFNOSUPPORT
 97

	)

80 
	#EADDRINUSE
 98

	)

81 
	#EADDRNOTAVAIL
 99

	)

82 
	#ENETDOWN
 100

	)

83 
	#ENETUNREACH
 101

	)

84 
	#ENETRESET
 102

	)

85 
	#ECONNABORTED
 103

	)

86 
	#ECONNRESET
 104

	)

87 
	#ENOBUFS
 105

	)

88 
	#EISCONN
 106

	)

89 
	#ENOTCONN
 107

	)

90 
	#ESHUTDOWN
 108

	)

91 
	#ETOOMANYREFS
 109

	)

92 
	#ETIMEDOUT
 110

	)

93 
	#ECONNREFUSED
 111

	)

94 
	#EHOSTDOWN
 112

	)

95 
	#EHOSTUNREACH
 113

	)

96 
	#EALREADY
 114

	)

97 
	#EINPROGRESS
 115

	)

98 
	#ESTALE
 116

	)

99 
	#EUCLEAN
 117

	)

100 
	#ENOTNAM
 118

	)

101 
	#ENAVAIL
 119

	)

102 
	#EISNAM
 120

	)

103 
	#EREMOTEIO
 121

	)

104 
	#EDQUOT
 122

	)

106 
	#ENOMEDIUM
 123

	)

107 
	#EMEDIUMTYPE
 124

	)

108 
	#ECANCELED
 125

	)

109 
	#ENOKEY
 126

	)

110 
	#EKEYEXPIRED
 127

	)

111 
	#EKEYREVOKED
 128

	)

112 
	#EKEYREJECTED
 129

	)

115 
	#EOWNERDEAD
 130

	)

116 
	#ENOTRECOVERABLE
 131

	)

118 
	#ERFKILL
 132

	)

120 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@
1
.
1
/usr/include
329
8875
src/cdriso.cpp
src/cdriso.h
src/cdrom.cpp
src/cdrom.h
src/decode_xa.cpp
src/decode_xa.h
src/gpu.h
src/gpu/gpu_dfxvideo/gpu.cpp
src/gpu/gpu_dfxvideo/gpu.h
src/gpu/gpu_dfxvideo/gpu_blit.h
src/gpu/gpu_dfxvideo/gpu_fps.h
src/gpu/gpu_dfxvideo/gpu_prim.h
src/gpu/gpu_dfxvideo/gpu_soft.h
src/gpu/gpu_drhell/gpu.cpp
src/gpu/gpu_drhell/gpu_blit.h
src/gpu/gpu_drhell/gpu_draw.h
src/gpu/gpu_drhell/gpu_prim.h
src/gpu/gpu_null/gpu.cpp
src/gpu/gpu_unai/gpu.cpp
src/gpu/gpu_unai/gpu.h
src/gpu/gpu_unai/gpu_arm.h
src/gpu/gpu_unai/gpu_blit.h
src/gpu/gpu_unai/gpu_command.h
src/gpu/gpu_unai/gpu_fixedpoint.h
src/gpu/gpu_unai/gpu_inner.h
src/gpu/gpu_unai/gpu_inner_blend.h
src/gpu/gpu_unai/gpu_inner_blend_arm5.h
src/gpu/gpu_unai/gpu_inner_blend_arm7.h
src/gpu/gpu_unai/gpu_inner_light.h
src/gpu/gpu_unai/gpu_inner_quantization.h
src/gpu/gpu_unai/gpu_raster_image.h
src/gpu/gpu_unai/gpu_raster_line.h
src/gpu/gpu_unai/gpu_raster_polygon.h
src/gpu/gpu_unai/gpu_raster_sprite.h
src/gpu/gpu_unai/gpu_unai.h
src/gpu/gpu_unai/gpulib_if.cpp
src/gpu/gpulib/gpu.cpp
src/gpu/gpulib/gpu.h
src/gpu/gpulib/vout_port.cpp
src/gte.cpp
src/gte.h
src/gte_divide.h
src/mdec.cpp
src/mdec.h
src/misc.cpp
src/misc.h
src/pad.cpp
src/plugin_lib/perfmon.cpp
src/plugin_lib/perfmon.h
src/plugin_lib/pl_sshot.cpp
src/plugin_lib/plugin_lib.cpp
src/plugin_lib/plugin_lib.h
src/plugins.cpp
src/plugins.h
src/port/sdl/frontend.cpp
src/port/sdl/port.cpp
src/port/sdl/port.h
src/ppf.cpp
src/ppf.h
src/psemu_plugin_defs.h
src/psxbios.cpp
src/psxbios.h
src/psxcommon.cpp
src/psxcommon.h
src/psxcounters.cpp
src/psxcounters.h
src/psxdma.cpp
src/psxdma.h
src/psxevents.cpp
src/psxevents.h
src/psxhle.cpp
src/psxhle.h
src/psxhw.cpp
src/psxhw.h
src/psxinterpreter.cpp
src/psxmem.cpp
src/psxmem.h
src/r3000a.cpp
src/r3000a.h
src/recompiler/arm/arm.h
src/recompiler/arm/disarm.h
src/recompiler/arm/opcodes.h
src/recompiler/arm/rec_alu.h
src/recompiler/arm/rec_branch.h
src/recompiler/arm/rec_gte.h
src/recompiler/arm/rec_mem.h
src/recompiler/arm/rec_misc.h
src/recompiler/arm/recompiler.cpp
src/recompiler/arm/risc_armv4le.h
src/recompiler/arm_old/arm.h
src/recompiler/arm_old/opcodes.h
src/recompiler/arm_old/rec_alu.h
src/recompiler/arm_old/rec_branch.h
src/recompiler/arm_old/rec_gte.h
src/recompiler/arm_old/rec_mem.h
src/recompiler/arm_old/rec_misc.h
src/recompiler/arm_old/recompiler.cpp
src/recompiler/arm_old/risc_armv4le.h
src/recompiler/mips/disasm.h
src/recompiler/mips/mips_codegen.h
src/recompiler/mips/mips_disasm.cpp
src/recompiler/mips/opcodes.h
src/recompiler/mips/rec_alu.cpp.h
src/recompiler/mips/rec_bcu.cpp.h
src/recompiler/mips/rec_cp0.cpp.h
src/recompiler/mips/rec_gte.cpp.h
src/recompiler/mips/rec_lsu.cpp.h
src/recompiler/mips/rec_mdu.cpp.h
src/recompiler/mips/recompiler.cpp
src/recompiler/mips/regcache.h
src/sio.cpp
src/sio.h
src/sjisfont.h
src/spu/spu_pcsxrearmed/adsr.c
src/spu/spu_pcsxrearmed/adsr.h
src/spu/spu_pcsxrearmed/alsa.c
src/spu/spu_pcsxrearmed/dma.c
src/spu/spu_pcsxrearmed/dma.h
src/spu/spu_pcsxrearmed/externals.h
src/spu/spu_pcsxrearmed/freeze.c
src/spu/spu_pcsxrearmed/gauss_i.h
src/spu/spu_pcsxrearmed/nullsnd.c
src/spu/spu_pcsxrearmed/oss.c
src/spu/spu_pcsxrearmed/out.c
src/spu/spu_pcsxrearmed/out.h
src/spu/spu_pcsxrearmed/psemuxa.h
src/spu/spu_pcsxrearmed/pulseaudio.c
src/spu/spu_pcsxrearmed/registers.c
src/spu/spu_pcsxrearmed/registers.h
src/spu/spu_pcsxrearmed/reverb.c
src/spu/spu_pcsxrearmed/sdl.c
src/spu/spu_pcsxrearmed/spu.c
src/spu/spu_pcsxrearmed/spu.h
src/spu/spu_pcsxrearmed/spu_c64x.c
src/spu/spu_pcsxrearmed/spu_c64x.h
src/spu/spu_pcsxrearmed/spu_c64x_dspcode.c
src/spu/spu_pcsxrearmed/spu_config.h
src/spu/spu_pcsxrearmed/stdafx.h
src/spu/spu_pcsxrearmed/xa.c
src/spu/spu_pcsxrearmed/xa.h
/usr/include/alsa/asoundlib.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/pthread.h
/usr/include/pulse/pulseaudio.h
/usr/include/semaphore.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/resource.h
/usr/include/sys/shm.h
/usr/include/sys/soundcard.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/alsa/asoundef.h
/usr/include/alsa/conf.h
/usr/include/alsa/control.h
/usr/include/alsa/error.h
/usr/include/alsa/global.h
/usr/include/alsa/hwdep.h
/usr/include/alsa/input.h
/usr/include/alsa/mixer.h
/usr/include/alsa/output.h
/usr/include/alsa/pcm.h
/usr/include/alsa/rawmidi.h
/usr/include/alsa/seq.h
/usr/include/alsa/seq_event.h
/usr/include/alsa/seq_midi_event.h
/usr/include/alsa/seqmid.h
/usr/include/alsa/timer.h
/usr/include/alsa/version.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/math-finite.h
/usr/include/bits/math-vector.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/shm.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/soundcard.h
/usr/include/pulse/channelmap.h
/usr/include/pulse/context.h
/usr/include/pulse/def.h
/usr/include/pulse/direction.h
/usr/include/pulse/error.h
/usr/include/pulse/format.h
/usr/include/pulse/introspect.h
/usr/include/pulse/mainloop-api.h
/usr/include/pulse/mainloop-signal.h
/usr/include/pulse/mainloop.h
/usr/include/pulse/operation.h
/usr/include/pulse/proplist.h
/usr/include/pulse/rtclock.h
/usr/include/pulse/sample.h
/usr/include/pulse/scache.h
/usr/include/pulse/stream.h
/usr/include/pulse/subscribe.h
/usr/include/pulse/thread-mainloop.h
/usr/include/pulse/timeval.h
/usr/include/pulse/utf8.h
/usr/include/pulse/util.h
/usr/include/pulse/version.h
/usr/include/pulse/volume.h
/usr/include/pulse/xmalloc.h
/usr/include/sched.h
/usr/include/sys/ipc.h
/usr/include/sys/poll.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/ipc.h
/usr/include/bits/ipctypes.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/libm-simd-decl-stubs.h
/usr/include/bits/local_lim.h
/usr/include/bits/mman-linux.h
/usr/include/bits/poll.h
/usr/include/bits/poll2.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/inttypes.h
/usr/include/linux/errno.h
/usr/include/linux/ioctl.h
/usr/include/linux/patchkey.h
/usr/include/pulse/cdecl.h
/usr/include/pulse/gccmacro.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/param.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm/errno.h
/usr/include/asm/ioctl.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/param.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/limits.h
/usr/include/signal.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/ioctl.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/linux/param.h
/usr/include/sys/ucontext.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm/param.h
/usr/include/asm-generic/param.h
